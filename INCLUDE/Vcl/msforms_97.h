// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.21  $
// File generated on 1/28/2002 7:55:35 AM from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\WINNT\System32\FM20.DLL (1)
// LIBID: {0D452EE1-E08F-101A-852E-02608C4D0BB4}
// LCID: 0
// Helpfile: C:\WINNT\System32\fm20.hlp
// HelpString: Microsoft Forms 2.0 Object Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\stdole2.tlb)
// Parent TypeLibrary:
//   (0) v8.0 Outlook, (c:\program files\microsoft office\office97\office\msoutl8.olb)
// ************************************************************************ //
#ifndef   MSForms_97H
#define   MSForms_97H

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Msforms_97
{

// *********************************************************************//
// HelpString: Microsoft Forms 2.0 Object Library
// Version:    2.0
// *********************************************************************//

/*   **********************************************************

  Type Library Options: 
  Generate C++ Import file
  Expose namespace with 'using'.
  Generate files for dependant type libraries
  Map HRESULT to safecall on dual interfaces
  Place warnings in imported files
  Generate IDE registration for component wrappers
  Generate dispinterfaces
  Generate CoClassCreator wrappers
  Generate C++Builder 4.0 event wrappers for servers
  Generate VCL component wrappers for servers
  Force use of a _TLB file
  Ignore Standard Type Libraries
  Show Debug Output
  Place comments in imported files
   ******************************************************** */

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_MSForms;
extern __declspec (package) const GUID GUID_OLE_COLOR;
extern __declspec (package) const GUID GUID_OLE_HANDLE;
extern __declspec (package) const GUID GUID_OLE_OPTEXCLUSIVE;
extern __declspec (package) const GUID IID_IFont;
extern __declspec (package) const GUID DIID_Font;
extern __declspec (package) const GUID GUID_fmDropEffect;
extern __declspec (package) const GUID GUID_fmAction;
extern __declspec (package) const GUID IID_IDataAutoWrapper;
extern __declspec (package) const GUID IID_IReturnInteger;
extern __declspec (package) const GUID IID_IReturnBoolean;
extern __declspec (package) const GUID IID_IReturnString;
extern __declspec (package) const GUID IID_IReturnSingle;
extern __declspec (package) const GUID IID_IReturnEffect;
extern __declspec (package) const GUID CLSID_ReturnInteger;
extern __declspec (package) const GUID CLSID_ReturnBoolean;
extern __declspec (package) const GUID CLSID_ReturnString;
extern __declspec (package) const GUID CLSID_ReturnSingle;
extern __declspec (package) const GUID CLSID_ReturnEffect;
extern __declspec (package) const GUID CLSID_DataObject;
extern __declspec (package) const GUID GUID_fmMode;
extern __declspec (package) const GUID GUID_fmMousePointer;
extern __declspec (package) const GUID GUID_fmScrollBars;
extern __declspec (package) const GUID GUID_fmScrollAction;
extern __declspec (package) const GUID GUID_fmCycle;
extern __declspec (package) const GUID GUID_fmZOrder;
extern __declspec (package) const GUID GUID_fmBorderStyle;
extern __declspec (package) const GUID GUID_fmTextAlign;
extern __declspec (package) const GUID GUID_fmAlignment;
extern __declspec (package) const GUID GUID_fmBorders;
extern __declspec (package) const GUID GUID_fmBackStyle;
extern __declspec (package) const GUID GUID_fmButtonStyle;
extern __declspec (package) const GUID GUID_fmPicPosition;
extern __declspec (package) const GUID GUID_fmVerticalScrollBarSide;
extern __declspec (package) const GUID GUID_fmLayoutEffect;
extern __declspec (package) const GUID GUID_fmSpecialEffect;
extern __declspec (package) const GUID GUID_fmDragState;
extern __declspec (package) const GUID GUID_fmPictureSizeMode;
extern __declspec (package) const GUID GUID_fmPictureAlignment;
extern __declspec (package) const GUID IID_IControl;
extern __declspec (package) const GUID IID_Controls_;
extern __declspec (package) const GUID IID_IOptionFrame;
extern __declspec (package) const GUID IID__UserForm;
extern __declspec (package) const GUID DIID_ControlEvents;
extern __declspec (package) const GUID CLSID_Control;
extern __declspec (package) const GUID DIID_FormEvents;
extern __declspec (package) const GUID DIID_OptionFrameEvents;
extern __declspec (package) const GUID CLSID_UserForm;
extern __declspec (package) const GUID CLSID_Frame;
extern __declspec (package) const GUID GUID_fmButtonEffect;
extern __declspec (package) const GUID GUID_fmOrientation;
extern __declspec (package) const GUID GUID_fmSnapPoint;
extern __declspec (package) const GUID GUID_fmPicturePosition;
extern __declspec (package) const GUID GUID_fmDisplayStyle;
extern __declspec (package) const GUID GUID_fmShowListWhen;
extern __declspec (package) const GUID GUID_fmShowDropButtonWhen;
extern __declspec (package) const GUID GUID_fmMultiSelect;
extern __declspec (package) const GUID GUID_fmListStyle;
extern __declspec (package) const GUID GUID_fmEnterFieldBehavior;
extern __declspec (package) const GUID GUID_fmDragBehavior;
extern __declspec (package) const GUID GUID_fmMatchEntry;
extern __declspec (package) const GUID GUID_fmDropButtonStyle;
extern __declspec (package) const GUID GUID_fmStyle;
extern __declspec (package) const GUID GUID_fmTabOrientation;
extern __declspec (package) const GUID GUID_fmTabStyle;
extern __declspec (package) const GUID GUID_fmIMEMode;
extern __declspec (package) const GUID IID_ILabelControl;
extern __declspec (package) const GUID IID_ICommandButton;
extern __declspec (package) const GUID GUID_PIROWSET;
extern __declspec (package) const GUID IID_IMdcText;
extern __declspec (package) const GUID IID_IMdcList;
extern __declspec (package) const GUID IID_IMdcCombo;
extern __declspec (package) const GUID IID_IMdcCheckBox;
extern __declspec (package) const GUID IID_IMdcOptionButton;
extern __declspec (package) const GUID IID_IMdcToggleButton;
extern __declspec (package) const GUID IID_IScrollbar;
extern __declspec (package) const GUID IID_Tab;
extern __declspec (package) const GUID IID_Tabs;
extern __declspec (package) const GUID IID_ITabStrip;
extern __declspec (package) const GUID IID_ISpinbutton;
extern __declspec (package) const GUID IID_IImage;
extern __declspec (package) const GUID IID_IWHTMLSubmitButton;
extern __declspec (package) const GUID IID_IWHTMLImage;
extern __declspec (package) const GUID IID_IWHTMLReset;
extern __declspec (package) const GUID IID_IWHTMLCheckbox;
extern __declspec (package) const GUID IID_IWHTMLOption;
extern __declspec (package) const GUID IID_IWHTMLText;
extern __declspec (package) const GUID IID_IWHTMLHidden;
extern __declspec (package) const GUID IID_IWHTMLPassword;
extern __declspec (package) const GUID IID_IWHTMLSelect;
extern __declspec (package) const GUID IID_IWHTMLTextArea;
extern __declspec (package) const GUID DIID_LabelControlEvents;
extern __declspec (package) const GUID CLSID_Label;
extern __declspec (package) const GUID DIID_CommandButtonEvents;
extern __declspec (package) const GUID CLSID_CommandButton;
extern __declspec (package) const GUID DIID_MdcTextEvents;
extern __declspec (package) const GUID CLSID_TextBox;
extern __declspec (package) const GUID DIID_MdcListEvents;
extern __declspec (package) const GUID CLSID_ListBox;
extern __declspec (package) const GUID DIID_MdcComboEvents;
extern __declspec (package) const GUID CLSID_ComboBox;
extern __declspec (package) const GUID DIID_MdcCheckBoxEvents;
extern __declspec (package) const GUID DIID_MdcOptionButtonEvents;
extern __declspec (package) const GUID DIID_MdcToggleButtonEvents;
extern __declspec (package) const GUID CLSID_CheckBox;
extern __declspec (package) const GUID CLSID_OptionButton;
extern __declspec (package) const GUID CLSID_ToggleButton;
extern __declspec (package) const GUID CLSID_NewFont;
extern __declspec (package) const GUID DIID_ScrollbarEvents;
extern __declspec (package) const GUID CLSID_ScrollBar;
extern __declspec (package) const GUID DIID_TabStripEvents;
extern __declspec (package) const GUID CLSID_TabStrip;
extern __declspec (package) const GUID DIID_SpinbuttonEvents;
extern __declspec (package) const GUID CLSID_SpinButton;
extern __declspec (package) const GUID DIID_ImageEvents;
extern __declspec (package) const GUID CLSID_Image;
extern __declspec (package) const GUID DIID_WHTMLControlEvents;
extern __declspec (package) const GUID DIID_WHTMLControlEvents1;
extern __declspec (package) const GUID DIID_WHTMLControlEvents2;
extern __declspec (package) const GUID DIID_WHTMLControlEvents3;
extern __declspec (package) const GUID DIID_WHTMLControlEvents4;
extern __declspec (package) const GUID DIID_WHTMLControlEvents5;
extern __declspec (package) const GUID DIID_WHTMLControlEvents6;
extern __declspec (package) const GUID DIID_WHTMLControlEvents7;
extern __declspec (package) const GUID DIID_WHTMLControlEvents9;
extern __declspec (package) const GUID DIID_WHTMLControlEvents10;
extern __declspec (package) const GUID CLSID_HTMLSubmit;
extern __declspec (package) const GUID CLSID_HTMLImage;
extern __declspec (package) const GUID CLSID_HTMLReset;
extern __declspec (package) const GUID CLSID_HTMLCheckbox;
extern __declspec (package) const GUID CLSID_HTMLOption;
extern __declspec (package) const GUID CLSID_HTMLText;
extern __declspec (package) const GUID CLSID_HTMLHidden;
extern __declspec (package) const GUID CLSID_HTMLPassword;
extern __declspec (package) const GUID CLSID_HTMLSelect;
extern __declspec (package) const GUID CLSID_HTMLTextArea;
extern __declspec (package) const GUID GUID_fmTransitionEffect;
extern __declspec (package) const GUID IID_IPage;
extern __declspec (package) const GUID IID_Pages;
extern __declspec (package) const GUID IID_IMultiPage;
extern __declspec (package) const GUID DIID_MultiPageEvents;
extern __declspec (package) const GUID CLSID_MultiPage;
extern __declspec (package) const GUID CLSID_Page;
extern __declspec (package) const GUID GUID_fmListBoxStyles;
extern __declspec (package) const GUID GUID_fmRepeatDirection;
extern __declspec (package) const GUID GUID_fmEnAutoSize;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      fmDropEffect;
enum      fmAction;
enum      fmMode;
enum      fmMousePointer;
enum      fmScrollBars;
enum      fmScrollAction;
enum      fmCycle;
enum      fmZOrder;
enum      fmBorderStyle;
enum      fmTextAlign;
enum      fmAlignment;
enum      fmBorders;
enum      fmBackStyle;
enum      fmButtonStyle;
enum      fmPicPosition;
enum      fmVerticalScrollBarSide;
enum      fmLayoutEffect;
enum      fmSpecialEffect;
enum      fmDragState;
enum      fmPictureSizeMode;
enum      fmPictureAlignment;
enum      fmButtonEffect;
enum      fmOrientation;
enum      fmSnapPoint;
enum      fmPicturePosition;
enum      fmDisplayStyle;
enum      fmShowListWhen;
enum      fmShowDropButtonWhen;
enum      fmMultiSelect;
enum      fmListStyle;
enum      fmEnterFieldBehavior;
enum      fmDragBehavior;
enum      fmMatchEntry;
enum      fmDropButtonStyle;
enum      fmStyle;
enum      fmTabOrientation;
enum      fmTabStyle;
enum      fmIMEMode;
enum      fmTransitionEffect;
enum      fmListBoxStyles;
enum      fmRepeatDirection;
enum      fmEnAutoSize;
interface DECLSPEC_UUID("{BEF6E002-A874-101A-8BBA-00AA00300CAB}") IFont;
typedef TComInterface<IFont, &IID_IFont> IFontPtr;

interface DECLSPEC_UUID("{BEF6E003-A874-101A-8BBA-00AA00300CAB}") Font;
typedef TComInterface<Font, &DIID_Font> FontPtr;

interface DECLSPEC_UUID("{EC72F590-F375-11CE-B9E8-00AA006B1A69}") IDataAutoWrapper;
typedef TComInterface<IDataAutoWrapper, &IID_IDataAutoWrapper> IDataAutoWrapperPtr;

interface DECLSPEC_UUID("{82B02370-B5BC-11CF-810F-00A0C9030074}") IReturnInteger;
typedef TComInterface<IReturnInteger, &IID_IReturnInteger> IReturnIntegerPtr;

interface DECLSPEC_UUID("{82B02371-B5BC-11CF-810F-00A0C9030074}") IReturnBoolean;
typedef TComInterface<IReturnBoolean, &IID_IReturnBoolean> IReturnBooleanPtr;

interface DECLSPEC_UUID("{82B02372-B5BC-11CF-810F-00A0C9030074}") IReturnString;
typedef TComInterface<IReturnString, &IID_IReturnString> IReturnStringPtr;

interface DECLSPEC_UUID("{8A683C90-BA84-11CF-8110-00A0C9030074}") IReturnSingle;
typedef TComInterface<IReturnSingle, &IID_IReturnSingle> IReturnSinglePtr;

interface DECLSPEC_UUID("{8A683C91-BA84-11CF-8110-00A0C9030074}") IReturnEffect;
typedef TComInterface<IReturnEffect, &IID_IReturnEffect> IReturnEffectPtr;

interface DECLSPEC_UUID("{04598FC6-866C-11CF-AB7C-00AA00C08FCF}") IControl;
typedef TComInterface<IControl, &IID_IControl> IControlPtr;

interface DECLSPEC_UUID("{04598FC7-866C-11CF-AB7C-00AA00C08FCF}") Controls_;
typedef TComInterface<Controls_, &IID_Controls_> Controls_Ptr;

interface DECLSPEC_UUID("{29B86A70-F52E-11CE-9BCE-00AA00608E01}") IOptionFrame;
typedef TComInterface<IOptionFrame, &IID_IOptionFrame> IOptionFramePtr;

interface DECLSPEC_UUID("{04598FC8-866C-11CF-AB7C-00AA00C08FCF}") _UserForm;
typedef TComInterface<_UserForm, &IID__UserForm> _UserFormPtr;

interface DECLSPEC_UUID("{9A4BBF53-4E46-101B-8BBD-00AA003E3B29}") ControlEvents;
typedef TComInterface<ControlEvents, &DIID_ControlEvents> ControlEventsPtr;

interface DECLSPEC_UUID("{5B9D8FC8-4A71-101B-97A6-00000B65C08B}") FormEvents;
typedef TComInterface<FormEvents, &DIID_FormEvents> FormEventsPtr;

interface DECLSPEC_UUID("{CF3F94A0-F546-11CE-9BCE-00AA00608E01}") OptionFrameEvents;
typedef TComInterface<OptionFrameEvents, &DIID_OptionFrameEvents> OptionFrameEventsPtr;

interface DECLSPEC_UUID("{04598FC1-866C-11CF-AB7C-00AA00C08FCF}") ILabelControl;
typedef TComInterface<ILabelControl, &IID_ILabelControl> ILabelControlPtr;

interface DECLSPEC_UUID("{04598FC4-866C-11CF-AB7C-00AA00C08FCF}") ICommandButton;
typedef TComInterface<ICommandButton, &IID_ICommandButton> ICommandButtonPtr;

interface DECLSPEC_UUID("{8BD21D13-EC42-11CE-9E0D-00AA006002F3}") IMdcText;
typedef TComInterface<IMdcText, &IID_IMdcText> IMdcTextPtr;

interface DECLSPEC_UUID("{8BD21D23-EC42-11CE-9E0D-00AA006002F3}") IMdcList;
typedef TComInterface<IMdcList, &IID_IMdcList> IMdcListPtr;

interface DECLSPEC_UUID("{8BD21D33-EC42-11CE-9E0D-00AA006002F3}") IMdcCombo;
typedef TComInterface<IMdcCombo, &IID_IMdcCombo> IMdcComboPtr;

interface DECLSPEC_UUID("{8BD21D43-EC42-11CE-9E0D-00AA006002F3}") IMdcCheckBox;
typedef TComInterface<IMdcCheckBox, &IID_IMdcCheckBox> IMdcCheckBoxPtr;

interface DECLSPEC_UUID("{8BD21D53-EC42-11CE-9E0D-00AA006002F3}") IMdcOptionButton;
typedef TComInterface<IMdcOptionButton, &IID_IMdcOptionButton> IMdcOptionButtonPtr;

interface DECLSPEC_UUID("{8BD21D63-EC42-11CE-9E0D-00AA006002F3}") IMdcToggleButton;
typedef TComInterface<IMdcToggleButton, &IID_IMdcToggleButton> IMdcToggleButtonPtr;

interface DECLSPEC_UUID("{04598FC3-866C-11CF-AB7C-00AA00C08FCF}") IScrollbar;
typedef TComInterface<IScrollbar, &IID_IScrollbar> IScrollbarPtr;

interface DECLSPEC_UUID("{A38BFFC3-A5A0-11CE-8107-00AA00611080}") Tab;
typedef TComInterface<Tab, &IID_Tab> TabPtr;

interface DECLSPEC_UUID("{944ACF93-A1E6-11CE-8104-00AA00611080}") Tabs;
typedef TComInterface<Tabs, &IID_Tabs> TabsPtr;

interface DECLSPEC_UUID("{04598FC2-866C-11CF-AB7C-00AA00C08FCF}") ITabStrip;
typedef TComInterface<ITabStrip, &IID_ITabStrip> ITabStripPtr;

interface DECLSPEC_UUID("{79176FB3-B7F2-11CE-97EF-00AA006D2776}") ISpinbutton;
typedef TComInterface<ISpinbutton, &IID_ISpinbutton> ISpinbuttonPtr;

interface DECLSPEC_UUID("{4C599243-6926-101B-9992-00000B65C6F9}") IImage;
typedef TComInterface<IImage, &IID_IImage> IImagePtr;

interface DECLSPEC_UUID("{5512D111-5CC6-11CF-8D67-00AA00BDCE1D}") IWHTMLSubmitButton;
typedef TComInterface<IWHTMLSubmitButton, &IID_IWHTMLSubmitButton> IWHTMLSubmitButtonPtr;

interface DECLSPEC_UUID("{5512D113-5CC6-11CF-8D67-00AA00BDCE1D}") IWHTMLImage;
typedef TComInterface<IWHTMLImage, &IID_IWHTMLImage> IWHTMLImagePtr;

interface DECLSPEC_UUID("{5512D115-5CC6-11CF-8D67-00AA00BDCE1D}") IWHTMLReset;
typedef TComInterface<IWHTMLReset, &IID_IWHTMLReset> IWHTMLResetPtr;

interface DECLSPEC_UUID("{5512D117-5CC6-11CF-8D67-00AA00BDCE1D}") IWHTMLCheckbox;
typedef TComInterface<IWHTMLCheckbox, &IID_IWHTMLCheckbox> IWHTMLCheckboxPtr;

interface DECLSPEC_UUID("{5512D119-5CC6-11CF-8D67-00AA00BDCE1D}") IWHTMLOption;
typedef TComInterface<IWHTMLOption, &IID_IWHTMLOption> IWHTMLOptionPtr;

interface DECLSPEC_UUID("{5512D11B-5CC6-11CF-8D67-00AA00BDCE1D}") IWHTMLText;
typedef TComInterface<IWHTMLText, &IID_IWHTMLText> IWHTMLTextPtr;

interface DECLSPEC_UUID("{5512D11D-5CC6-11CF-8D67-00AA00BDCE1D}") IWHTMLHidden;
typedef TComInterface<IWHTMLHidden, &IID_IWHTMLHidden> IWHTMLHiddenPtr;

interface DECLSPEC_UUID("{5512D11F-5CC6-11CF-8D67-00AA00BDCE1D}") IWHTMLPassword;
typedef TComInterface<IWHTMLPassword, &IID_IWHTMLPassword> IWHTMLPasswordPtr;

interface DECLSPEC_UUID("{5512D123-5CC6-11CF-8D67-00AA00BDCE1D}") IWHTMLSelect;
typedef TComInterface<IWHTMLSelect, &IID_IWHTMLSelect> IWHTMLSelectPtr;

interface DECLSPEC_UUID("{5512D125-5CC6-11CF-8D67-00AA00BDCE1D}") IWHTMLTextArea;
typedef TComInterface<IWHTMLTextArea, &IID_IWHTMLTextArea> IWHTMLTextAreaPtr;

interface DECLSPEC_UUID("{978C9E22-D4B0-11CE-BF2D-00AA003F40D0}") LabelControlEvents;
typedef TComInterface<LabelControlEvents, &DIID_LabelControlEvents> LabelControlEventsPtr;

interface DECLSPEC_UUID("{7B020EC1-AF6C-11CE-9F46-00AA00574A4F}") CommandButtonEvents;
typedef TComInterface<CommandButtonEvents, &DIID_CommandButtonEvents> CommandButtonEventsPtr;

interface DECLSPEC_UUID("{8BD21D12-EC42-11CE-9E0D-00AA006002F3}") MdcTextEvents;
typedef TComInterface<MdcTextEvents, &DIID_MdcTextEvents> MdcTextEventsPtr;

interface DECLSPEC_UUID("{8BD21D22-EC42-11CE-9E0D-00AA006002F3}") MdcListEvents;
typedef TComInterface<MdcListEvents, &DIID_MdcListEvents> MdcListEventsPtr;

interface DECLSPEC_UUID("{8BD21D32-EC42-11CE-9E0D-00AA006002F3}") MdcComboEvents;
typedef TComInterface<MdcComboEvents, &DIID_MdcComboEvents> MdcComboEventsPtr;

interface DECLSPEC_UUID("{8BD21D42-EC42-11CE-9E0D-00AA006002F3}") MdcCheckBoxEvents;
typedef TComInterface<MdcCheckBoxEvents, &DIID_MdcCheckBoxEvents> MdcCheckBoxEventsPtr;

interface DECLSPEC_UUID("{8BD21D52-EC42-11CE-9E0D-00AA006002F3}") MdcOptionButtonEvents;
typedef TComInterface<MdcOptionButtonEvents, &DIID_MdcOptionButtonEvents> MdcOptionButtonEventsPtr;

interface DECLSPEC_UUID("{8BD21D62-EC42-11CE-9E0D-00AA006002F3}") MdcToggleButtonEvents;
typedef TComInterface<MdcToggleButtonEvents, &DIID_MdcToggleButtonEvents> MdcToggleButtonEventsPtr;

interface DECLSPEC_UUID("{7B020EC2-AF6C-11CE-9F46-00AA00574A4F}") ScrollbarEvents;
typedef TComInterface<ScrollbarEvents, &DIID_ScrollbarEvents> ScrollbarEventsPtr;

interface DECLSPEC_UUID("{7B020EC7-AF6C-11CE-9F46-00AA00574A4F}") TabStripEvents;
typedef TComInterface<TabStripEvents, &DIID_TabStripEvents> TabStripEventsPtr;

interface DECLSPEC_UUID("{79176FB2-B7F2-11CE-97EF-00AA006D2776}") SpinbuttonEvents;
typedef TComInterface<SpinbuttonEvents, &DIID_SpinbuttonEvents> SpinbuttonEventsPtr;

interface DECLSPEC_UUID("{4C5992A5-6926-101B-9992-00000B65C6F9}") ImageEvents;
typedef TComInterface<ImageEvents, &DIID_ImageEvents> ImageEventsPtr;

interface DECLSPEC_UUID("{796ED650-5FE9-11CF-8D68-00AA00BDCE1D}") WHTMLControlEvents;
typedef TComInterface<WHTMLControlEvents, &DIID_WHTMLControlEvents> WHTMLControlEventsPtr;

interface DECLSPEC_UUID("{47FF8FE0-6198-11CF-8CE8-00AA006CB389}") WHTMLControlEvents1;
typedef TComInterface<WHTMLControlEvents1, &DIID_WHTMLControlEvents1> WHTMLControlEvents1Ptr;

interface DECLSPEC_UUID("{47FF8FE1-6198-11CF-8CE8-00AA006CB389}") WHTMLControlEvents2;
typedef TComInterface<WHTMLControlEvents2, &DIID_WHTMLControlEvents2> WHTMLControlEvents2Ptr;

interface DECLSPEC_UUID("{47FF8FE2-6198-11CF-8CE8-00AA006CB389}") WHTMLControlEvents3;
typedef TComInterface<WHTMLControlEvents3, &DIID_WHTMLControlEvents3> WHTMLControlEvents3Ptr;

interface DECLSPEC_UUID("{47FF8FE3-6198-11CF-8CE8-00AA006CB389}") WHTMLControlEvents4;
typedef TComInterface<WHTMLControlEvents4, &DIID_WHTMLControlEvents4> WHTMLControlEvents4Ptr;

interface DECLSPEC_UUID("{47FF8FE4-6198-11CF-8CE8-00AA006CB389}") WHTMLControlEvents5;
typedef TComInterface<WHTMLControlEvents5, &DIID_WHTMLControlEvents5> WHTMLControlEvents5Ptr;

interface DECLSPEC_UUID("{47FF8FE5-6198-11CF-8CE8-00AA006CB389}") WHTMLControlEvents6;
typedef TComInterface<WHTMLControlEvents6, &DIID_WHTMLControlEvents6> WHTMLControlEvents6Ptr;

interface DECLSPEC_UUID("{47FF8FE6-6198-11CF-8CE8-00AA006CB389}") WHTMLControlEvents7;
typedef TComInterface<WHTMLControlEvents7, &DIID_WHTMLControlEvents7> WHTMLControlEvents7Ptr;

interface DECLSPEC_UUID("{47FF8FE8-6198-11CF-8CE8-00AA006CB389}") WHTMLControlEvents9;
typedef TComInterface<WHTMLControlEvents9, &DIID_WHTMLControlEvents9> WHTMLControlEvents9Ptr;

interface DECLSPEC_UUID("{47FF8FE9-6198-11CF-8CE8-00AA006CB389}") WHTMLControlEvents10;
typedef TComInterface<WHTMLControlEvents10, &DIID_WHTMLControlEvents10> WHTMLControlEvents10Ptr;

interface DECLSPEC_UUID("{5CEF5613-713D-11CE-80C9-00AA00611080}") IPage;
typedef TComInterface<IPage, &IID_IPage> IPagePtr;

interface DECLSPEC_UUID("{92E11A03-7358-11CE-80CB-00AA00611080}") Pages;
typedef TComInterface<Pages, &IID_Pages> PagesPtr;

interface DECLSPEC_UUID("{04598FC9-866C-11CF-AB7C-00AA00C08FCF}") IMultiPage;
typedef TComInterface<IMultiPage, &IID_IMultiPage> IMultiPagePtr;

interface DECLSPEC_UUID("{7B020EC8-AF6C-11CE-9F46-00AA00574A4F}") MultiPageEvents;
typedef TComInterface<MultiPageEvents, &DIID_MultiPageEvents> MultiPageEventsPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IReturnInteger ReturnInteger;
typedef IReturnIntegerPtr ReturnIntegerPtr;
typedef IReturnBoolean ReturnBoolean;
typedef IReturnBooleanPtr ReturnBooleanPtr;
typedef IReturnString ReturnString;
typedef IReturnStringPtr ReturnStringPtr;
typedef IReturnSingle ReturnSingle;
typedef IReturnSinglePtr ReturnSinglePtr;
typedef IReturnEffect ReturnEffect;
typedef IReturnEffectPtr ReturnEffectPtr;
typedef IDataAutoWrapper DataObject;
typedef IDataAutoWrapperPtr DataObjectPtr;
typedef IControl Control;
typedef IControlPtr ControlPtr;
typedef _UserForm UserForm;
typedef _UserFormPtr UserFormPtr;
typedef IOptionFrame Frame;
typedef IOptionFramePtr FramePtr;
typedef ILabelControl Label;
typedef ILabelControlPtr LabelPtr;
typedef ICommandButton CommandButton;
typedef ICommandButtonPtr CommandButtonPtr;
typedef IMdcText TextBox;
typedef IMdcTextPtr TextBoxPtr;
typedef IMdcList ListBox;
typedef IMdcListPtr ListBoxPtr;
typedef IMdcCombo ComboBox;
typedef IMdcComboPtr ComboBoxPtr;
typedef IMdcCheckBox CheckBox;
typedef IMdcCheckBoxPtr CheckBoxPtr;
typedef IMdcOptionButton OptionButton;
typedef IMdcOptionButtonPtr OptionButtonPtr;
typedef IMdcToggleButton ToggleButton;
typedef IMdcToggleButtonPtr ToggleButtonPtr;
typedef Font NewFont;
typedef FontPtr NewFontPtr;
typedef IScrollbar ScrollBar;
typedef IScrollbarPtr ScrollBarPtr;
typedef ITabStrip TabStrip;
typedef ITabStripPtr TabStripPtr;
typedef ISpinbutton SpinButton;
typedef ISpinbuttonPtr SpinButtonPtr;
typedef IImage Image;
typedef IImagePtr ImagePtr;
typedef IWHTMLSubmitButton HTMLSubmit;
typedef IWHTMLSubmitButtonPtr HTMLSubmitPtr;
typedef IWHTMLImage HTMLImage;
typedef IWHTMLImagePtr HTMLImagePtr;
typedef IWHTMLReset HTMLReset;
typedef IWHTMLResetPtr HTMLResetPtr;
typedef IWHTMLCheckbox HTMLCheckbox;
typedef IWHTMLCheckboxPtr HTMLCheckboxPtr;
typedef IWHTMLOption HTMLOption;
typedef IWHTMLOptionPtr HTMLOptionPtr;
typedef IWHTMLText HTMLText;
typedef IWHTMLTextPtr HTMLTextPtr;
typedef IWHTMLHidden HTMLHidden;
typedef IWHTMLHiddenPtr HTMLHiddenPtr;
typedef IWHTMLPassword HTMLPassword;
typedef IWHTMLPasswordPtr HTMLPasswordPtr;
typedef IWHTMLSelect HTMLSelect;
typedef IWHTMLSelectPtr HTMLSelectPtr;
typedef IWHTMLTextArea HTMLTextArea;
typedef IWHTMLTextAreaPtr HTMLTextAreaPtr;
typedef IMultiPage MultiPage;
typedef IMultiPagePtr MultiPagePtr;
typedef IPage Page;
typedef IPagePtr PagePtr;

#define LIBID_OF_ReturnInteger (&LIBID_MSForms)
#define LIBID_OF_ReturnBoolean (&LIBID_MSForms)
#define LIBID_OF_ReturnString (&LIBID_MSForms)
#define LIBID_OF_ReturnSingle (&LIBID_MSForms)
#define LIBID_OF_ReturnEffect (&LIBID_MSForms)
#define LIBID_OF_DataObject (&LIBID_MSForms)
#define LIBID_OF_Control (&LIBID_MSForms)
#define LIBID_OF_UserForm (&LIBID_MSForms)
#define LIBID_OF_Frame (&LIBID_MSForms)
#define LIBID_OF_Label (&LIBID_MSForms)
#define LIBID_OF_CommandButton (&LIBID_MSForms)
#define LIBID_OF_TextBox (&LIBID_MSForms)
#define LIBID_OF_ListBox (&LIBID_MSForms)
#define LIBID_OF_ComboBox (&LIBID_MSForms)
#define LIBID_OF_CheckBox (&LIBID_MSForms)
#define LIBID_OF_OptionButton (&LIBID_MSForms)
#define LIBID_OF_ToggleButton (&LIBID_MSForms)
#define LIBID_OF_NewFont (&LIBID_MSForms)
#define LIBID_OF_ScrollBar (&LIBID_MSForms)
#define LIBID_OF_TabStrip (&LIBID_MSForms)
#define LIBID_OF_SpinButton (&LIBID_MSForms)
#define LIBID_OF_Image (&LIBID_MSForms)
#define LIBID_OF_HTMLSubmit (&LIBID_MSForms)
#define LIBID_OF_HTMLImage (&LIBID_MSForms)
#define LIBID_OF_HTMLReset (&LIBID_MSForms)
#define LIBID_OF_HTMLCheckbox (&LIBID_MSForms)
#define LIBID_OF_HTMLOption (&LIBID_MSForms)
#define LIBID_OF_HTMLText (&LIBID_MSForms)
#define LIBID_OF_HTMLHidden (&LIBID_MSForms)
#define LIBID_OF_HTMLPassword (&LIBID_MSForms)
#define LIBID_OF_HTMLSelect (&LIBID_MSForms)
#define LIBID_OF_HTMLTextArea (&LIBID_MSForms)
#define LIBID_OF_MultiPage (&LIBID_MSForms)
#define LIBID_OF_Page (&LIBID_MSForms)

// *********************************************************************//
// Declaration of Aliases defined in Type Library                         
// *********************************************************************//
typedef long OLE_COLOR;
typedef long OLE_HANDLE;
typedef VARIANT_BOOL OLE_OPTEXCLUSIVE;
typedef LPUNKNOWN PIROWSET;
typedef LPUNKNOWN *PIROWSETPtr;

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum fmDropEffect
{
  fmDropEffectNone = 0, 
  fmDropEffectCopy = 1, 
  fmDropEffectMove = 2, 
  fmDropEffectCopyOrMove = 3
} fmDropEffect;

typedef enum fmAction
{
  fmActionCut = 0, 
  fmActionCopy = 1, 
  fmActionPaste = 2, 
  fmActionDragDrop = 3
} fmAction;

typedef enum fmMode
{
  fmModeInherit = 0xFFFFFFFE, 
  fmModeOn = 0xFFFFFFFF, 
  fmModeOff = 0
} fmMode;

typedef enum fmMousePointer
{
  fmMousePointerDefault = 0, 
  fmMousePointerArrow = 1, 
  fmMousePointerCross = 2, 
  fmMousePointerIBeam = 3, 
  fmMousePointerSizeNESW = 6, 
  fmMousePointerSizeNS = 7, 
  fmMousePointerSizeNWSE = 8, 
  fmMousePointerSizeWE = 9, 
  fmMousePointerUpArrow = 10, 
  fmMousePointerHourGlass = 11, 
  fmMousePointerNoDrop = 12, 
  fmMousePointerAppStarting = 13, 
  fmMousePointerHelp = 14, 
  fmMousePointerSizeAll = 15, 
  fmMousePointerCustom = 99
} fmMousePointer;

typedef enum fmScrollBars
{
  fmScrollBarsNone = 0, 
  fmScrollBarsHorizontal = 1, 
  fmScrollBarsVertical = 2, 
  fmScrollBarsBoth = 3
} fmScrollBars;

typedef enum fmScrollAction
{
  fmScrollActionNoChange = 0, 
  fmScrollActionLineUp = 1, 
  fmScrollActionLineDown = 2, 
  fmScrollActionPageUp = 3, 
  fmScrollActionPageDown = 4, 
  fmScrollActionBegin = 5, 
  fmScrollActionEnd = 6, 
  _fmScrollActionAbsoluteChange = 7, 
  fmScrollActionPropertyChange = 8, 
  fmScrollActionControlRequest = 9, 
  fmScrollActionFocusRequest = 10
} fmScrollAction;

typedef enum fmCycle
{
  fmCycleAllForms = 0, 
  fmCycleCurrentForm = 2
} fmCycle;

typedef enum fmZOrder
{
  fmZOrderFront = 0, 
  fmZOrderBack = 1
} fmZOrder;

typedef enum fmBorderStyle
{
  fmBorderStyleNone = 0, 
  fmBorderStyleSingle = 1
} fmBorderStyle;

typedef enum fmTextAlign
{
  fmTextAlignLeft = 1, 
  fmTextAlignCenter = 2, 
  fmTextAlignRight = 3
} fmTextAlign;

typedef enum fmAlignment
{
  fmAlignmentLeft = 0, 
  fmAlignmentRight = 1
} fmAlignment;

typedef enum fmBorders
{
  fmBordersNone = 0, 
  fmBordersBox = 1, 
  fmBordersLeft = 2, 
  fmBordersTop = 3
} fmBorders;

typedef enum fmBackStyle
{
  fmBackStyleTransparent = 0, 
  fmBackStyleOpaque = 1
} fmBackStyle;

typedef enum fmButtonStyle
{
  fmButtonStylePushButton = 0, 
  fmButtonStyleToggleButton = 1
} fmButtonStyle;

typedef enum fmPicPosition
{
  fmPicPositionCenter = 0, 
  fmPicPositionTopLeft = 1, 
  fmPicPositionTopCenter = 2, 
  fmPicPositionTopRight = 3, 
  fmPicPositionCenterLeft = 4, 
  fmPicPositionCenterRight = 5, 
  fmPicPositionBottomLeft = 6, 
  fmPicPositionBottomCenter = 7, 
  fmPicPositionBottomRight = 8
} fmPicPosition;

typedef enum fmVerticalScrollBarSide
{
  fmVerticalScrollBarSideRight = 0, 
  fmVerticalScrollBarSideLeft = 1
} fmVerticalScrollBarSide;

typedef enum fmLayoutEffect
{
  fmLayoutEffectNone = 0, 
  fmLayoutEffectInitiate = 1, 
  _fmLayoutEffectRespond = 2
} fmLayoutEffect;

typedef enum fmSpecialEffect
{
  fmSpecialEffectFlat = 0, 
  fmSpecialEffectRaised = 1, 
  fmSpecialEffectSunken = 2, 
  fmSpecialEffectEtched = 3, 
  fmSpecialEffectBump = 6
} fmSpecialEffect;

typedef enum fmDragState
{
  fmDragStateEnter = 0, 
  fmDragStateLeave = 1, 
  fmDragStateOver = 2
} fmDragState;

typedef enum fmPictureSizeMode
{
  fmPictureSizeModeClip = 0, 
  fmPictureSizeModeStretch = 1, 
  fmPictureSizeModeZoom = 3
} fmPictureSizeMode;

typedef enum fmPictureAlignment
{
  fmPictureAlignmentTopLeft = 0, 
  fmPictureAlignmentTopRight = 1, 
  fmPictureAlignmentCenter = 2, 
  fmPictureAlignmentBottomLeft = 3, 
  fmPictureAlignmentBottomRight = 4
} fmPictureAlignment;

typedef enum fmButtonEffect
{
  fmButtonEffectFlat = 0, 
  fmButtonEffectSunken = 2
} fmButtonEffect;

typedef enum fmOrientation
{
  fmOrientationAuto = 0xFFFFFFFF, 
  fmOrientationVertical = 0, 
  fmOrientationHorizontal = 1
} fmOrientation;

typedef enum fmSnapPoint
{
  fmSnapPointTopLeft = 0, 
  fmSnapPointTopCenter = 1, 
  fmSnapPointTopRight = 2, 
  fmSnapPointCenterLeft = 3, 
  fmSnapPointCenter = 4, 
  fmSnapPointCenterRight = 5, 
  fmSnapPointBottomLeft = 6, 
  fmSnapPointBottomCenter = 7, 
  fmSnapPointBottomRight = 8
} fmSnapPoint;

typedef enum fmPicturePosition
{
  fmPicturePositionLeftTop = 0, 
  fmPicturePositionLeftCenter = 1, 
  fmPicturePositionLeftBottom = 2, 
  fmPicturePositionRightTop = 3, 
  fmPicturePositionRightCenter = 4, 
  fmPicturePositionRightBottom = 5, 
  fmPicturePositionAboveLeft = 6, 
  fmPicturePositionAboveCenter = 7, 
  fmPicturePositionAboveRight = 8, 
  fmPicturePositionBelowLeft = 9, 
  fmPicturePositionBelowCenter = 10, 
  fmPicturePositionBelowRight = 11, 
  fmPicturePositionCenter = 12
} fmPicturePosition;

typedef enum fmDisplayStyle
{
  fmDisplayStyleText = 1, 
  fmDisplayStyleList = 2, 
  fmDisplayStyleCombo = 3, 
  fmDisplayStyleCheckBox = 4, 
  fmDisplayStyleOptionButton = 5, 
  fmDisplayStyleToggle = 6, 
  fmDisplayStyleDropList = 7
} fmDisplayStyle;

typedef enum fmShowListWhen
{
  fmShowListWhenNever = 0, 
  fmShowListWhenButton = 1, 
  fmShowListWhenFocus = 2, 
  fmShowListWhenAlways = 3
} fmShowListWhen;

typedef enum fmShowDropButtonWhen
{
  fmShowDropButtonWhenNever = 0, 
  fmShowDropButtonWhenFocus = 1, 
  fmShowDropButtonWhenAlways = 2
} fmShowDropButtonWhen;

typedef enum fmMultiSelect
{
  fmMultiSelectSingle = 0, 
  fmMultiSelectMulti = 1, 
  fmMultiSelectExtended = 2
} fmMultiSelect;

typedef enum fmListStyle
{
  fmListStylePlain = 0, 
  fmListStyleOption = 1
} fmListStyle;

typedef enum fmEnterFieldBehavior
{
  fmEnterFieldBehaviorSelectAll = 0, 
  fmEnterFieldBehaviorRecallSelection = 1
} fmEnterFieldBehavior;

typedef enum fmDragBehavior
{
  fmDragBehaviorDisabled = 0, 
  fmDragBehaviorEnabled = 1
} fmDragBehavior;

typedef enum fmMatchEntry
{
  fmMatchEntryFirstLetter = 0, 
  fmMatchEntryComplete = 1, 
  fmMatchEntryNone = 2
} fmMatchEntry;

typedef enum fmDropButtonStyle
{
  fmDropButtonStylePlain = 0, 
  fmDropButtonStyleArrow = 1, 
  fmDropButtonStyleEllipsis = 2, 
  fmDropButtonStyleReduce = 3
} fmDropButtonStyle;

typedef enum fmStyle
{
  fmStyleDropDownCombo = 0, 
  fmStyleDropDownList = 2
} fmStyle;

typedef enum fmTabOrientation
{
  fmTabOrientationTop = 0, 
  fmTabOrientationBottom = 1, 
  fmTabOrientationLeft = 2, 
  fmTabOrientationRight = 3
} fmTabOrientation;

typedef enum fmTabStyle
{
  fmTabStyleTabs = 0, 
  fmTabStyleButtons = 1, 
  fmTabStyleNone = 2
} fmTabStyle;

typedef enum fmIMEMode
{
  fmIMEModeNoControl = 0, 
  fmIMEModeOn = 1, 
  fmIMEModeOff = 2, 
  fmIMEModeDisable = 3, 
  fmIMEModeHiragana = 4, 
  fmIMEModeKatakana = 5, 
  fmIMEModeKatakanaHalf = 6, 
  fmIMEModeAlphaFull = 7, 
  fmIMEModeAlpha = 8, 
  fmIMEModeHangulFull = 9, 
  fmIMEModeHangul = 10, 
  fmIMEModeHanziFull = 11, 
  fmIMEModeHanzi = 12
} fmIMEMode;

typedef enum fmTransitionEffect
{
  fmTransitionEffectNone = 0, 
  fmTransitionEffectCoverUp = 1, 
  fmTransitionEffectCoverRightUp = 2, 
  fmTransitionEffectCoverRight = 3, 
  fmTransitionEffectCoverRightDown = 4, 
  fmTransitionEffectCoverDown = 5, 
  fmTransitionEffectCoverLeftDown = 6, 
  fmTransitionEffectCoverLeft = 7, 
  fmTransitionEffectCoverLeftUp = 8, 
  fmTransitionEffectPushUp = 9, 
  fmTransitionEffectPushRight = 10, 
  fmTransitionEffectPushDown = 11, 
  fmTransitionEffectPushLeft = 12
} fmTransitionEffect;

typedef enum fmListBoxStyles
{
  _fmListBoxStylesNone = 0, 
  _fmListBoxStylesListBox = 1, 
  _fmListBoxStylesComboBox = 2
} fmListBoxStyles;

typedef enum fmRepeatDirection
{
  _fmRepeatDirectionHorizontal = 0, 
  _fmRepeatDirectionVertical = 1
} fmRepeatDirection;

typedef enum fmEnAutoSize
{
  _fmEnAutoSizeNone = 0, 
  _fmEnAutoSizeHorizontal = 1, 
  _fmEnAutoSizeVertical = 2, 
  _fmEnAutoSizeBoth = 3
} fmEnAutoSize;

// *********************************************************************//
// Interface: IFont
// Flags:     (16) Hidden
// GUID:      {BEF6E002-A874-101A-8BBA-00AA00300CAB}
// *********************************************************************//
interface IFont  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pname/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pname/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Size(CURRENCY* psize/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_Size(CURRENCY psize/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Bold(VARIANT_BOOL* pbold/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_Bold(VARIANT_BOOL pbold/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_Italic(VARIANT_BOOL* pitalic/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_Italic(VARIANT_BOOL pitalic/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_Underline(VARIANT_BOOL* punderline/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_Underline(VARIANT_BOOL punderline/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_Strikethrough(VARIANT_BOOL* pstrikethrough/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_Strikethrough(VARIANT_BOOL pstrikethrough/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_Weight(short* pweight/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_Weight(short pweight/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_Charset(short* pcharset/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_Charset(short pcharset/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_hFont(Msforms_97::OLE_HANDLE* phfont/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Clone(Msforms_97::IFont** lplpfont/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE IsEqual(Msforms_97::IFont* lpFontOther/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetRatio(long cyLogical/*[in]*/, long cyHimetric/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AddRefHfont(Msforms_97::OLE_HANDLE hFont/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ReleaseHfont(Msforms_97::OLE_HANDLE hFont/*[in]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: Font
// Flags:     (4096) Dispatchable
// GUID:      {BEF6E003-A874-101A-8BBA-00AA00300CAB}
// *********************************************************************//
interface Font : public TDispWrapper<IDispatch>
{
  void __fastcall set_Name(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Name */ DISPID(0));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(0));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Size(CURRENCY /*[VT_CY:0]*/ Value)
  {
    _TDispID _dispid(/* Size */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  CURRENCY /*[VT_CY:0]*/ __fastcall get_Size()
  {
    _TDispID _dispid(/* Size */ DISPID(2));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Bold(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Bold */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Bold()
  {
    _TDispID _dispid(/* Bold */ DISPID(3));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Italic(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Italic */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Italic()
  {
    _TDispID _dispid(/* Italic */ DISPID(4));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Underline(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Underline */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Underline()
  {
    _TDispID _dispid(/* Underline */ DISPID(5));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Strikethrough(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Strikethrough */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Strikethrough()
  {
    _TDispID _dispid(/* Strikethrough */ DISPID(6));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Weight(short /*[VT_I2:0]*/ Value)
  {
    _TDispID _dispid(/* Weight */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  short /*[VT_I2:0]*/ __fastcall get_Weight()
  {
    _TDispID _dispid(/* Weight */ DISPID(7));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Charset(short /*[VT_I2:0]*/ Value)
  {
    _TDispID _dispid(/* Charset */ DISPID(8));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  short /*[VT_I2:0]*/ __fastcall get_Charset()
  {
    _TDispID _dispid(/* Charset */ DISPID(8));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   CURRENCY        Size = {read = get_Size, write = set_Size};
  __property   VARIANT_BOOL    Bold = {read = get_Bold, write = set_Bold};
  __property   VARIANT_BOOL    Italic = {read = get_Italic, write = set_Italic};
  __property   VARIANT_BOOL    Underline = {read = get_Underline, write = set_Underline};
  __property   VARIANT_BOOL    Strikethrough = {read = get_Strikethrough, write = set_Strikethrough};
  __property   short           Weight = {read = get_Weight, write = set_Weight};
  __property   short           Charset = {read = get_Charset, write = set_Charset};
};
// *********************************************************************//
// Interface: IDataAutoWrapper
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EC72F590-F375-11CE-B9E8-00AA006B1A69}
// *********************************************************************//
interface IDataAutoWrapper  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetFormat(VARIANT Format/*[in]*/, 
                                              VARIANT_BOOL* Support/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetText(VARIANT Format/*[in,opt]*/, BSTR* Text/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetText(BSTR Text/*[in]*/, 
                                            VARIANT Format/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE PutInClipboard(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetFromClipboard(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE StartDrag(VARIANT OKEffect/*[in,opt]*/, 
                                              Msforms_97::fmDropEffect* Effect/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall GetFormat(VARIANT Format/*[in]*/)
  {
    VARIANT_BOOL Support;
    OLECHECK(this->GetFormat(Format, (VARIANT_BOOL*)&Support));
    return Support;
  }

  BSTR __fastcall GetText(VARIANT Format/*[in,opt]*/= TNoParam())
  {
    BSTR Text = 0;
    OLECHECK(this->GetText(Format, (BSTR*)&Text));
    return Text;
  }

  Msforms_97::fmDropEffect __fastcall StartDrag(VARIANT OKEffect/*[in,opt]*/= TNoParam())
  {
    Msforms_97::fmDropEffect Effect;
    OLECHECK(this->StartDrag(OKEffect, (Msforms_97::fmDropEffect*)&Effect));
    return Effect;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IReturnInteger
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {82B02370-B5BC-11CF-810F-00A0C9030074}
// *********************************************************************//
interface IReturnInteger  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Value(int Value/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Value(int* Value/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_Value(void)
  {
    int Value;
    OLECHECK(this->get_Value((int*)&Value));
    return Value;
  }


  __property   int             Value = {read = get_Value, write = set_Value};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IReturnBoolean
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {82B02371-B5BC-11CF-810F-00A0C9030074}
// *********************************************************************//
interface IReturnBoolean  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Value(VARIANT_BOOL Value/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_Value(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Value((VARIANT_BOOL*)&Value));
    return Value;
  }


  __property   VARIANT_BOOL    Value = {read = get_Value, write = set_Value};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IReturnString
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {82B02372-B5BC-11CF-810F-00A0C9030074}
// *********************************************************************//
interface IReturnString  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Value(BSTR Value/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Value(BSTR* Value/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Value(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Value((BSTR*)&Value));
    return Value;
  }


  __property   BSTR            Value = {read = get_Value, write = set_Value};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IReturnSingle
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8A683C90-BA84-11CF-8110-00A0C9030074}
// *********************************************************************//
interface IReturnSingle  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Value(float Value/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Value(float* Value/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  float __fastcall get_Value(void)
  {
    float Value;
    OLECHECK(this->get_Value((float*)&Value));
    return Value;
  }


  __property   float           Value = {read = get_Value, write = set_Value};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IReturnEffect
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8A683C91-BA84-11CF-8110-00A0C9030074}
// *********************************************************************//
interface IReturnEffect  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Value(Msforms_97::fmDropEffect Value/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Value(Msforms_97::fmDropEffect* Value/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msforms_97::fmDropEffect __fastcall get_Value(void)
  {
    Msforms_97::fmDropEffect Value;
    OLECHECK(this->get_Value((Msforms_97::fmDropEffect*)&Value));
    return Value;
  }


  __property   Msforms_97::fmDropEffect Value = {read = get_Value, write = set_Value};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {04598FC6-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
interface IControl  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Cancel(VARIANT_BOOL Cancel/*[in]*/) = 0; // [-2147418056]
  virtual HRESULT STDMETHODCALLTYPE get_Cancel(VARIANT_BOOL* Cancel/*[out,retval]*/) = 0; // [-2147418056]
  virtual HRESULT STDMETHODCALLTYPE set_ControlSource(BSTR ControlSource/*[in]*/) = 0; // [-2147385343]
  virtual HRESULT STDMETHODCALLTYPE get_ControlSource(BSTR* ControlSource/*[out,retval]*/) = 0; // [-2147385343]
  virtual HRESULT STDMETHODCALLTYPE set_ControlTipText(BSTR ControlTipText/*[in]*/) = 0; // [-2147418043]
  virtual HRESULT STDMETHODCALLTYPE get_ControlTipText(BSTR* ControlTipText/*[out,retval]*/) = 0; // [-2147418043]
  virtual HRESULT STDMETHODCALLTYPE set_Default(VARIANT_BOOL Default/*[in]*/) = 0; // [-2147418057]
  virtual HRESULT STDMETHODCALLTYPE get_Default(VARIANT_BOOL* Default/*[out,retval]*/) = 0; // [-2147418057]
  virtual HRESULT STDMETHODCALLTYPE _SetHeight(long Height/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetHeight(long* Height/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [-2147418106]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [-2147418106]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextID(long HelpContextID/*[in]*/) = 0; // [-2147418062]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextID(long* HelpContextID/*[out,retval]*/) = 0; // [-2147418062]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(VARIANT_BOOL InSelection/*[in]*/) = 0; // [-2147385341]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(VARIANT_BOOL* InSelection/*[out,retval]*/) = 0; // [-2147385341]
  virtual HRESULT STDMETHODCALLTYPE get_LayoutEffect(Msforms_97::fmLayoutEffect* LayoutEffect/*[out,retval]*/) = 0; // [-2147385340]
  virtual HRESULT STDMETHODCALLTYPE _SetLeft(long Left/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetLeft(long* Left/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Left(float Left/*[in]*/) = 0; // [-2147418109]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [-2147418109]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [-2147418112]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [-2147418112]
  virtual HRESULT STDMETHODCALLTYPE _GetOldHeight(long* OldHeight/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_OldHeight(float* OldHeight/*[out,retval]*/) = 0; // [-2147385339]
  virtual HRESULT STDMETHODCALLTYPE _GetOldLeft(long* OldLeft/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_OldLeft(float* OldLeft/*[out,retval]*/) = 0; // [-2147385338]
  virtual HRESULT STDMETHODCALLTYPE _GetOldTop(long* OldTop/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_OldTop(float* OldTop/*[out,retval]*/) = 0; // [-2147385337]
  virtual HRESULT STDMETHODCALLTYPE _GetOldWidth(long* OldWidth/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_OldWidth(float* OldWidth/*[out,retval]*/) = 0; // [-2147385336]
  virtual HRESULT STDMETHODCALLTYPE get_Object(LPDISPATCH* Object/*[out,retval]*/) = 0; // [-2147385335]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [-2147418104]
  virtual HRESULT STDMETHODCALLTYPE set_RowSource(BSTR RowSource/*[in]*/) = 0; // [-2147385330]
  virtual HRESULT STDMETHODCALLTYPE get_RowSource(BSTR* RowSource/*[out,retval]*/) = 0; // [-2147385330]
  virtual HRESULT STDMETHODCALLTYPE set_RowSourceType(short RowSourceType/*[in]*/) = 0; // [-2147385329]
  virtual HRESULT STDMETHODCALLTYPE get_RowSourceType(short* RowSourceType/*[out,retval]*/) = 0; // [-2147385329]
  virtual HRESULT STDMETHODCALLTYPE set_TabIndex(short TabIndex/*[in]*/) = 0; // [-2147418097]
  virtual HRESULT STDMETHODCALLTYPE get_TabIndex(short* TabIndex/*[out,retval]*/) = 0; // [-2147418097]
  virtual HRESULT STDMETHODCALLTYPE set_TabStop(VARIANT_BOOL TabStop/*[in]*/) = 0; // [-2147418098]
  virtual HRESULT STDMETHODCALLTYPE get_TabStop(VARIANT_BOOL* TabStop/*[out,retval]*/) = 0; // [-2147418098]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR Tag/*[in]*/) = 0; // [-2147418101]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* Tag/*[out,retval]*/) = 0; // [-2147418101]
  virtual HRESULT STDMETHODCALLTYPE _SetTop(long Top/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetTop(long* Top/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Top(float Top/*[in]*/) = 0; // [-2147418108]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [-2147418108]
  virtual HRESULT STDMETHODCALLTYPE set_BoundValue(VARIANT* BoundValue/*[in]*/) = 0; // [-2147385328]
  virtual HRESULT STDMETHODCALLTYPE get_BoundValue(VARIANT* BoundValue/*[out,retval]*/) = 0; // [-2147385328]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL Visible/*[in]*/) = 0; // [-2147418105]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/) = 0; // [-2147418105]
  virtual HRESULT STDMETHODCALLTYPE _SetWidth(long Width/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetWidth(long* Width/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [-2147418107]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [-2147418107]
  virtual HRESULT STDMETHODCALLTYPE Move(VARIANT Left/*[in,opt]*/= TNoParam(), 
                                         VARIANT Top/*[in,opt]*/= TNoParam(), 
                                         VARIANT Width/*[in,opt]*/= TNoParam(), 
                                         VARIANT Height/*[in,opt]*/= TNoParam(), 
                                         VARIANT Layout/*[in,opt]*/= TNoParam()) = 0; // [-2147385088]
  virtual HRESULT STDMETHODCALLTYPE ZOrder(VARIANT zPosition/*[in,opt]*/= TNoParam()) = 0; // [-2147385083]
  virtual HRESULT STDMETHODCALLTYPE Select(VARIANT_BOOL SelectInGroup/*[in]*/) = 0; // [-2147385086]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [-2147385085]
  virtual HRESULT STDMETHODCALLTYPE _GethWnd(int* hWnd/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetID(long* ID/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _Move(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                          long Height/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _ZOrder(Msforms_97::fmZOrder zPosition/*[in]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_Cancel(void)
  {
    VARIANT_BOOL Cancel;
    OLECHECK(this->get_Cancel((VARIANT_BOOL*)&Cancel));
    return Cancel;
  }

  BSTR __fastcall get_ControlSource(void)
  {
    BSTR ControlSource = 0;
    OLECHECK(this->get_ControlSource((BSTR*)&ControlSource));
    return ControlSource;
  }

  BSTR __fastcall get_ControlTipText(void)
  {
    BSTR ControlTipText = 0;
    OLECHECK(this->get_ControlTipText((BSTR*)&ControlTipText));
    return ControlTipText;
  }

  VARIANT_BOOL __fastcall get_Default(void)
  {
    VARIANT_BOOL Default;
    OLECHECK(this->get_Default((VARIANT_BOOL*)&Default));
    return Default;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  long __fastcall get_HelpContextID(void)
  {
    long HelpContextID;
    OLECHECK(this->get_HelpContextID((long*)&HelpContextID));
    return HelpContextID;
  }

  VARIANT_BOOL __fastcall get_InSelection(void)
  {
    VARIANT_BOOL InSelection;
    OLECHECK(this->get_InSelection((VARIANT_BOOL*)&InSelection));
    return InSelection;
  }

  Msforms_97::fmLayoutEffect __fastcall get_LayoutEffect(void)
  {
    Msforms_97::fmLayoutEffect LayoutEffect;
    OLECHECK(this->get_LayoutEffect((Msforms_97::fmLayoutEffect*)&LayoutEffect));
    return LayoutEffect;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  float __fastcall get_OldHeight(void)
  {
    float OldHeight;
    OLECHECK(this->get_OldHeight((float*)&OldHeight));
    return OldHeight;
  }

  float __fastcall get_OldLeft(void)
  {
    float OldLeft;
    OLECHECK(this->get_OldLeft((float*)&OldLeft));
    return OldLeft;
  }

  float __fastcall get_OldTop(void)
  {
    float OldTop;
    OLECHECK(this->get_OldTop((float*)&OldTop));
    return OldTop;
  }

  float __fastcall get_OldWidth(void)
  {
    float OldWidth;
    OLECHECK(this->get_OldWidth((float*)&OldWidth));
    return OldWidth;
  }

  LPDISPATCH __fastcall get_Object(void)
  {
    LPDISPATCH Object;
    OLECHECK(this->get_Object((LPDISPATCH*)&Object));
    return Object;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall get_RowSource(void)
  {
    BSTR RowSource = 0;
    OLECHECK(this->get_RowSource((BSTR*)&RowSource));
    return RowSource;
  }

  short __fastcall get_RowSourceType(void)
  {
    short RowSourceType;
    OLECHECK(this->get_RowSourceType((short*)&RowSourceType));
    return RowSourceType;
  }

  short __fastcall get_TabIndex(void)
  {
    short TabIndex;
    OLECHECK(this->get_TabIndex((short*)&TabIndex));
    return TabIndex;
  }

  VARIANT_BOOL __fastcall get_TabStop(void)
  {
    VARIANT_BOOL TabStop;
    OLECHECK(this->get_TabStop((VARIANT_BOOL*)&TabStop));
    return TabStop;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR Tag = 0;
    OLECHECK(this->get_Tag((BSTR*)&Tag));
    return Tag;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }

  VARIANT __fastcall get_BoundValue(void)
  {
    VARIANT BoundValue;
    OLECHECK(this->get_BoundValue((VARIANT*)&BoundValue));
    return BoundValue;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL Visible;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&Visible));
    return Visible;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  int __fastcall _GethWnd(void)
  {
    int hWnd;
    OLECHECK(this->_GethWnd((int*)&hWnd));
    return hWnd;
  }

  long __fastcall _GetID(void)
  {
    long ID;
    OLECHECK(this->_GetID((long*)&ID));
    return ID;
  }


  __property   VARIANT_BOOL    Cancel = {read = get_Cancel, write = set_Cancel};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   VARIANT_BOOL    Default = {read = get_Default, write = set_Default};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HelpContextID = {read = get_HelpContextID, write = set_HelpContextID};
  __property   VARIANT_BOOL    InSelection = {read = get_InSelection, write = set_InSelection};
  __property   Msforms_97::fmLayoutEffect LayoutEffect = {read = get_LayoutEffect};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   float           OldHeight = {read = get_OldHeight};
  __property   float           OldLeft = {read = get_OldLeft};
  __property   float           OldTop = {read = get_OldTop};
  __property   float           OldWidth = {read = get_OldWidth};
  __property   LPDISPATCH      Object = {read = get_Object};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            RowSource = {read = get_RowSource, write = set_RowSource};
  __property   short           RowSourceType = {read = get_RowSourceType, write = set_RowSourceType};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Controls_
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {04598FC7-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
interface Controls_  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [60]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT varg/*[in]*/, 
                                         LPDISPATCH* ppDispatch/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0; // [62]
  virtual HRESULT STDMETHODCALLTYPE _Move(long cx/*[in]*/, long cy/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SelectAll(void) = 0; // [65]
  virtual HRESULT STDMETHODCALLTYPE _AddByClass(long* clsid/*[in]*/, 
                                                Msforms_97::Control** Control/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AlignToGrid(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE BringForward(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE BringToFront(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Copy(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Cut(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Enum(LPUNKNOWN* ppEnum/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetItemByIndex(long lIndex/*[in]*/, 
                                                    Msforms_97::Control** Control/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetItemByName(BSTR pstr/*[in]*/, 
                                                   Msforms_97::Control** Control/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetItemByID(long ID/*[in]*/, 
                                                 Msforms_97::Control** Control/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SendBackward(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SendToBack(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Move(float cx/*[in]*/, float cy/*[in]*/) = 0; // [63]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR bstrProgID/*[in]*/, VARIANT Name/*[in,opt]*/, 
                                        VARIANT Visible/*[in,opt]*/, 
                                        Msforms_97::Control** Control/*[out,retval]*/) = 0; // [66]
  virtual HRESULT STDMETHODCALLTYPE Remove(VARIANT varg/*[in]*/) = 0; // [67]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }

  LPDISPATCH __fastcall Item(VARIANT varg/*[in]*/)
  {
    LPDISPATCH ppDispatch;
    OLECHECK(this->Item(varg, (LPDISPATCH*)&ppDispatch));
    return ppDispatch;
  }

  Msforms_97::Control* __fastcall _AddByClass(long* clsid/*[in]*/)
  {
    Msforms_97::Control* Control;
    OLECHECK(this->_AddByClass(clsid, (Msforms_97::Control**)&Control));
    return Control;
  }

  LPUNKNOWN __fastcall Enum(void)
  {
    LPUNKNOWN ppEnum;
    OLECHECK(this->Enum((LPUNKNOWN*)&ppEnum));
    return ppEnum;
  }

  Msforms_97::Control* __fastcall _GetItemByIndex(long lIndex/*[in]*/)
  {
    Msforms_97::Control* Control;
    OLECHECK(this->_GetItemByIndex(lIndex, (Msforms_97::Control**)&Control));
    return Control;
  }

  Msforms_97::Control* __fastcall _GetItemByName(BSTR pstr/*[in]*/)
  {
    Msforms_97::Control* Control;
    OLECHECK(this->_GetItemByName(pstr, (Msforms_97::Control**)&Control));
    return Control;
  }

  Msforms_97::Control* __fastcall _GetItemByID(long ID/*[in]*/)
  {
    Msforms_97::Control* Control;
    OLECHECK(this->_GetItemByID(ID, (Msforms_97::Control**)&Control));
    return Control;
  }

  Msforms_97::Control* __fastcall Add(BSTR bstrProgID/*[in]*/, VARIANT Name/*[in,opt]*/= TNoParam(), 
                                      VARIANT Visible/*[in,opt]*/= TNoParam())
  {
    Msforms_97::Control* Control;
    OLECHECK(this->Add(bstrProgID, Name, Visible, (Msforms_97::Control**)&Control));
    return Control;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOptionFrame
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {29B86A70-F52E-11CE-9BCE-00AA00608E01}
// *********************************************************************//
interface IOptionFrame  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ActiveControl(Msforms_97::Control** ActiveControl/*[out,retval]*/) = 0; // [256]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/) = 0; // [-503]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/) = 0; // [-503]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/) = 0; // [-504]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/) = 0; // [-504]
  virtual HRESULT STDMETHODCALLTYPE get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/) = 0; // [257]
  virtual HRESULT STDMETHODCALLTYPE get_CanRedo(VARIANT_BOOL* CanRedo/*[out,retval]*/) = 0; // [258]
  virtual HRESULT STDMETHODCALLTYPE get_CanUndo(VARIANT_BOOL* CanUndo/*[out,retval]*/) = 0; // [259]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Caption/*[in]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Msforms_97::Controls_** Controls/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Cycle(Msforms_97::fmCycle Cycle/*[in]*/) = 0; // [260]
  virtual HRESULT STDMETHODCALLTYPE get_Cycle(Msforms_97::fmCycle* Cycle/*[out,retval]*/) = 0; // [260]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Enabled/*[in]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE set__Font_Reserved(IFontDisp** Param1/*[in]*/) = 0; // [2147483135]
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp** Font/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp*** Font/*[out,retval]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE _GetInsideHeight(long* InsideHeight/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InsideHeight(float* InsideHeight/*[out,retval]*/) = 0; // [262]
  virtual HRESULT STDMETHODCALLTYPE _GetInsideWidth(long* InsideWidth/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InsideWidth(float* InsideWidth/*[out,retval]*/) = 0; // [263]
  virtual HRESULT STDMETHODCALLTYPE set_KeepScrollBarsVisible(Msforms_97::fmScrollBars ScrollBars/*[in]*/) = 0; // [264]
  virtual HRESULT STDMETHODCALLTYPE get_KeepScrollBarsVisible(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/) = 0; // [264]
  virtual HRESULT STDMETHODCALLTYPE set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE set_PictureAlignment(Msforms_97::fmPictureAlignment PictureAlignment/*[in]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_PictureAlignment(Msforms_97::fmPictureAlignment* PictureAlignment/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE set_Picture(IPictureDisp** Picture/*[in]*/) = 0; // [-523]
  virtual HRESULT STDMETHODCALLTYPE _set_Picture(IPictureDisp** Picture/*[in]*/) = 0; // [-523]
  virtual HRESULT STDMETHODCALLTYPE get_Picture(IPictureDisp*** Picture/*[out,retval]*/) = 0; // [-523]
  virtual HRESULT STDMETHODCALLTYPE set_PictureSizeMode(Msforms_97::fmPictureSizeMode PictureSizeMode/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_PictureSizeMode(Msforms_97::fmPictureSizeMode* PictureSizeMode/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_PictureTiling(VARIANT_BOOL PictureTiling/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_PictureTiling(VARIANT_BOOL* PictureTiling/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_ScrollBars(Msforms_97::fmScrollBars ScrollBars/*[in]*/) = 0; // [265]
  virtual HRESULT STDMETHODCALLTYPE get_ScrollBars(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/) = 0; // [265]
  virtual HRESULT STDMETHODCALLTYPE _SetScrollHeight(long ScrollHeight/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetScrollHeight(long* ScrollHeight/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ScrollHeight(float ScrollHeight/*[in]*/) = 0; // [266]
  virtual HRESULT STDMETHODCALLTYPE get_ScrollHeight(float* ScrollHeight/*[out,retval]*/) = 0; // [266]
  virtual HRESULT STDMETHODCALLTYPE _SetScrollLeft(long ScrollLeft/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetScrollLeft(long* ScrollLeft/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ScrollLeft(float ScrollLeft/*[in]*/) = 0; // [267]
  virtual HRESULT STDMETHODCALLTYPE get_ScrollLeft(float* ScrollLeft/*[out,retval]*/) = 0; // [267]
  virtual HRESULT STDMETHODCALLTYPE _SetScrollTop(long ScrollTop/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetScrollTop(long* ScrollTop/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ScrollTop(float ScrollTop/*[in]*/) = 0; // [268]
  virtual HRESULT STDMETHODCALLTYPE get_ScrollTop(float* ScrollTop/*[out,retval]*/) = 0; // [268]
  virtual HRESULT STDMETHODCALLTYPE _SetScrollWidth(long ScrollWidth/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetScrollWidth(long* ScrollWidth/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ScrollWidth(float ScrollWidth/*[in]*/) = 0; // [269]
  virtual HRESULT STDMETHODCALLTYPE get_ScrollWidth(float* ScrollWidth/*[out,retval]*/) = 0; // [269]
  virtual HRESULT STDMETHODCALLTYPE get_Selected(Msforms_97::Controls_** Selected/*[out,retval]*/) = 0; // [270]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide side/*[in]*/) = 0; // [271]
  virtual HRESULT STDMETHODCALLTYPE get_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide* side/*[out,retval]*/) = 0; // [271]
  virtual HRESULT STDMETHODCALLTYPE set_Zoom(short Zoom/*[in]*/) = 0; // [272]
  virtual HRESULT STDMETHODCALLTYPE get_Zoom(short* Zoom/*[out,retval]*/) = 0; // [272]
  virtual HRESULT STDMETHODCALLTYPE Copy(void) = 0; // [512]
  virtual HRESULT STDMETHODCALLTYPE Cut(void) = 0; // [513]
  virtual HRESULT STDMETHODCALLTYPE Paste(void) = 0; // [514]
  virtual HRESULT STDMETHODCALLTYPE RedoAction(void) = 0; // [515]
  virtual HRESULT STDMETHODCALLTYPE Repaint(void) = 0; // [516]
  virtual HRESULT STDMETHODCALLTYPE Scroll(VARIANT xAction/*[in,opt]*/= TNoParam(), 
                                           VARIANT yAction/*[in,opt]*/= TNoParam()) = 0; // [517]
  virtual HRESULT STDMETHODCALLTYPE SetDefaultTabOrder(void) = 0; // [518]
  virtual HRESULT STDMETHODCALLTYPE UndoAction(void) = 0; // [519]
  virtual HRESULT STDMETHODCALLTYPE set_DesignMode(Msforms_97::fmMode DesignMode/*[in]*/) = 0; // [384]
  virtual HRESULT STDMETHODCALLTYPE get_DesignMode(Msforms_97::fmMode* DesignMode/*[out,retval]*/) = 0; // [384]
  virtual HRESULT STDMETHODCALLTYPE set_ShowToolbox(Msforms_97::fmMode ShowToolbox/*[in]*/) = 0; // [385]
  virtual HRESULT STDMETHODCALLTYPE get_ShowToolbox(Msforms_97::fmMode* ShowToolbox/*[out,retval]*/) = 0; // [385]
  virtual HRESULT STDMETHODCALLTYPE set_ShowGridDots(Msforms_97::fmMode ShowGridDots/*[in]*/) = 0; // [386]
  virtual HRESULT STDMETHODCALLTYPE get_ShowGridDots(Msforms_97::fmMode* ShowGridDots/*[out,retval]*/) = 0; // [386]
  virtual HRESULT STDMETHODCALLTYPE set_SnapToGrid(Msforms_97::fmMode SnapToGrid/*[in]*/) = 0; // [387]
  virtual HRESULT STDMETHODCALLTYPE get_SnapToGrid(Msforms_97::fmMode* SnapToGrid/*[out,retval]*/) = 0; // [387]
  virtual HRESULT STDMETHODCALLTYPE set_GridX(float GridX/*[in]*/) = 0; // [388]
  virtual HRESULT STDMETHODCALLTYPE get_GridX(float* GridX/*[out,retval]*/) = 0; // [388]
  virtual HRESULT STDMETHODCALLTYPE _SetGridX(long GridX/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetGridX(long* GridX/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_GridY(float GridY/*[in]*/) = 0; // [389]
  virtual HRESULT STDMETHODCALLTYPE get_GridY(float* GridY/*[out,retval]*/) = 0; // [389]
  virtual HRESULT STDMETHODCALLTYPE _SetGridY(long GridY/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetGridY(long* GridY/*[out]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msforms_97::Control* __fastcall get_ActiveControl(void)
  {
    Msforms_97::Control* ActiveControl;
    OLECHECK(this->get_ActiveControl((Msforms_97::Control**)&ActiveControl));
    return ActiveControl;
  }

  Msforms_97::OLE_COLOR __fastcall get_BackColor(void)
  {
    Msforms_97::OLE_COLOR BackColor;
    OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
    return BackColor;
  }

  Msforms_97::OLE_COLOR __fastcall get_BorderColor(void)
  {
    Msforms_97::OLE_COLOR BorderColor;
    OLECHECK(this->get_BorderColor((Msforms_97::OLE_COLOR*)&BorderColor));
    return BorderColor;
  }

  Msforms_97::fmBorderStyle __fastcall get_BorderStyle(void)
  {
    Msforms_97::fmBorderStyle BorderStyle;
    OLECHECK(this->get_BorderStyle((Msforms_97::fmBorderStyle*)&BorderStyle));
    return BorderStyle;
  }

  VARIANT_BOOL __fastcall get_CanPaste(void)
  {
    VARIANT_BOOL CanPaste;
    OLECHECK(this->get_CanPaste((VARIANT_BOOL*)&CanPaste));
    return CanPaste;
  }

  VARIANT_BOOL __fastcall get_CanRedo(void)
  {
    VARIANT_BOOL CanRedo;
    OLECHECK(this->get_CanRedo((VARIANT_BOOL*)&CanRedo));
    return CanRedo;
  }

  VARIANT_BOOL __fastcall get_CanUndo(void)
  {
    VARIANT_BOOL CanUndo;
    OLECHECK(this->get_CanUndo((VARIANT_BOOL*)&CanUndo));
    return CanUndo;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  Msforms_97::Controls_* __fastcall get_Controls(void)
  {
    Msforms_97::Controls_* Controls;
    OLECHECK(this->get_Controls((Msforms_97::Controls_**)&Controls));
    return Controls;
  }

  Msforms_97::fmCycle __fastcall get_Cycle(void)
  {
    Msforms_97::fmCycle Cycle;
    OLECHECK(this->get_Cycle((Msforms_97::fmCycle*)&Cycle));
    return Cycle;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Enabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Enabled));
    return Enabled;
  }

  IFontDisp** __fastcall get_Font(void)
  {
    IFontDisp** Font;
    OLECHECK(this->get_Font((IFontDisp***)&Font));
    return Font;
  }

  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void)
  {
    Msforms_97::OLE_COLOR ForeColor;
    OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
    return ForeColor;
  }

  float __fastcall get_InsideHeight(void)
  {
    float InsideHeight;
    OLECHECK(this->get_InsideHeight((float*)&InsideHeight));
    return InsideHeight;
  }

  float __fastcall get_InsideWidth(void)
  {
    float InsideWidth;
    OLECHECK(this->get_InsideWidth((float*)&InsideWidth));
    return InsideWidth;
  }

  Msforms_97::fmScrollBars __fastcall get_KeepScrollBarsVisible(void)
  {
    Msforms_97::fmScrollBars ScrollBars;
    OLECHECK(this->get_KeepScrollBarsVisible((Msforms_97::fmScrollBars*)&ScrollBars));
    return ScrollBars;
  }

  IPictureDisp** __fastcall get_MouseIcon(void)
  {
    IPictureDisp** MouseIcon;
    OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
    return MouseIcon;
  }

  Msforms_97::fmMousePointer __fastcall get_MousePointer(void)
  {
    Msforms_97::fmMousePointer MousePointer;
    OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
    return MousePointer;
  }

  Msforms_97::fmPictureAlignment __fastcall get_PictureAlignment(void)
  {
    Msforms_97::fmPictureAlignment PictureAlignment;
    OLECHECK(this->get_PictureAlignment((Msforms_97::fmPictureAlignment*)&PictureAlignment));
    return PictureAlignment;
  }

  IPictureDisp** __fastcall get_Picture(void)
  {
    IPictureDisp** Picture;
    OLECHECK(this->get_Picture((IPictureDisp***)&Picture));
    return Picture;
  }

  Msforms_97::fmPictureSizeMode __fastcall get_PictureSizeMode(void)
  {
    Msforms_97::fmPictureSizeMode PictureSizeMode;
    OLECHECK(this->get_PictureSizeMode((Msforms_97::fmPictureSizeMode*)&PictureSizeMode));
    return PictureSizeMode;
  }

  VARIANT_BOOL __fastcall get_PictureTiling(void)
  {
    VARIANT_BOOL PictureTiling;
    OLECHECK(this->get_PictureTiling((VARIANT_BOOL*)&PictureTiling));
    return PictureTiling;
  }

  Msforms_97::fmScrollBars __fastcall get_ScrollBars(void)
  {
    Msforms_97::fmScrollBars ScrollBars;
    OLECHECK(this->get_ScrollBars((Msforms_97::fmScrollBars*)&ScrollBars));
    return ScrollBars;
  }

  float __fastcall get_ScrollHeight(void)
  {
    float ScrollHeight;
    OLECHECK(this->get_ScrollHeight((float*)&ScrollHeight));
    return ScrollHeight;
  }

  float __fastcall get_ScrollLeft(void)
  {
    float ScrollLeft;
    OLECHECK(this->get_ScrollLeft((float*)&ScrollLeft));
    return ScrollLeft;
  }

  float __fastcall get_ScrollTop(void)
  {
    float ScrollTop;
    OLECHECK(this->get_ScrollTop((float*)&ScrollTop));
    return ScrollTop;
  }

  float __fastcall get_ScrollWidth(void)
  {
    float ScrollWidth;
    OLECHECK(this->get_ScrollWidth((float*)&ScrollWidth));
    return ScrollWidth;
  }

  Msforms_97::Controls_* __fastcall get_Selected(void)
  {
    Msforms_97::Controls_* Selected;
    OLECHECK(this->get_Selected((Msforms_97::Controls_**)&Selected));
    return Selected;
  }

  Msforms_97::fmSpecialEffect __fastcall get_SpecialEffect(void)
  {
    Msforms_97::fmSpecialEffect SpecialEffect;
    OLECHECK(this->get_SpecialEffect((Msforms_97::fmSpecialEffect*)&SpecialEffect));
    return SpecialEffect;
  }

  Msforms_97::fmVerticalScrollBarSide __fastcall get_VerticalScrollBarSide(void)
  {
    Msforms_97::fmVerticalScrollBarSide side;
    OLECHECK(this->get_VerticalScrollBarSide((Msforms_97::fmVerticalScrollBarSide*)&side));
    return side;
  }

  short __fastcall get_Zoom(void)
  {
    short Zoom;
    OLECHECK(this->get_Zoom((short*)&Zoom));
    return Zoom;
  }

  Msforms_97::fmMode __fastcall get_DesignMode(void)
  {
    Msforms_97::fmMode DesignMode;
    OLECHECK(this->get_DesignMode((Msforms_97::fmMode*)&DesignMode));
    return DesignMode;
  }

  Msforms_97::fmMode __fastcall get_ShowToolbox(void)
  {
    Msforms_97::fmMode ShowToolbox;
    OLECHECK(this->get_ShowToolbox((Msforms_97::fmMode*)&ShowToolbox));
    return ShowToolbox;
  }

  Msforms_97::fmMode __fastcall get_ShowGridDots(void)
  {
    Msforms_97::fmMode ShowGridDots;
    OLECHECK(this->get_ShowGridDots((Msforms_97::fmMode*)&ShowGridDots));
    return ShowGridDots;
  }

  Msforms_97::fmMode __fastcall get_SnapToGrid(void)
  {
    Msforms_97::fmMode SnapToGrid;
    OLECHECK(this->get_SnapToGrid((Msforms_97::fmMode*)&SnapToGrid));
    return SnapToGrid;
  }

  float __fastcall get_GridX(void)
  {
    float GridX;
    OLECHECK(this->get_GridX((float*)&GridX));
    return GridX;
  }

  float __fastcall get_GridY(void)
  {
    float GridY;
    OLECHECK(this->get_GridY((float*)&GridY));
    return GridY;
  }


  __property   Msforms_97::Control* ActiveControl = {read = get_ActiveControl};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::OLE_COLOR BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   Msforms_97::fmBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   VARIANT_BOOL    CanPaste = {read = get_CanPaste};
  __property   VARIANT_BOOL    CanRedo = {read = get_CanRedo};
  __property   VARIANT_BOOL    CanUndo = {read = get_CanUndo};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Msforms_97::Controls_* Controls = {read = get_Controls};
  __property   Msforms_97::fmCycle Cycle = {read = get_Cycle, write = set_Cycle};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   float           InsideHeight = {read = get_InsideHeight};
  __property   float           InsideWidth = {read = get_InsideWidth};
  __property   Msforms_97::fmScrollBars KeepScrollBarsVisible = {read = get_KeepScrollBarsVisible, write = set_KeepScrollBarsVisible};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   Msforms_97::fmPictureAlignment PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   IPictureDisp**  Picture = {read = get_Picture, write = set_Picture};
  __property   Msforms_97::fmPictureSizeMode PictureSizeMode = {read = get_PictureSizeMode, write = set_PictureSizeMode};
  __property   VARIANT_BOOL    PictureTiling = {read = get_PictureTiling, write = set_PictureTiling};
  __property   Msforms_97::fmScrollBars ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   float           ScrollHeight = {read = get_ScrollHeight, write = set_ScrollHeight};
  __property   float           ScrollLeft = {read = get_ScrollLeft, write = set_ScrollLeft};
  __property   float           ScrollTop = {read = get_ScrollTop, write = set_ScrollTop};
  __property   float           ScrollWidth = {read = get_ScrollWidth, write = set_ScrollWidth};
  __property   Msforms_97::Controls_* Selected = {read = get_Selected};
  __property   Msforms_97::fmSpecialEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   Msforms_97::fmVerticalScrollBarSide VerticalScrollBarSide = {read = get_VerticalScrollBarSide, write = set_VerticalScrollBarSide};
  __property   short           Zoom = {read = get_Zoom, write = set_Zoom};
  __property   Msforms_97::fmMode DesignMode = {read = get_DesignMode, write = set_DesignMode};
  __property   Msforms_97::fmMode ShowToolbox = {read = get_ShowToolbox, write = set_ShowToolbox};
  __property   Msforms_97::fmMode ShowGridDots = {read = get_ShowGridDots, write = set_ShowGridDots};
  __property   Msforms_97::fmMode SnapToGrid = {read = get_SnapToGrid, write = set_SnapToGrid};
  __property   float           GridX = {read = get_GridX, write = set_GridX};
  __property   float           GridY = {read = get_GridY, write = set_GridY};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _UserForm
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04598FC8-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
interface _UserForm  : public Msforms_97::IOptionFrame
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_DrawBuffer(long DrawBuffer/*[in]*/) = 0; // [395]
  virtual HRESULT STDMETHODCALLTYPE get_DrawBuffer(long* DrawBuffer/*[out,retval]*/) = 0; // [395]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_DrawBuffer(void)
  {
    long DrawBuffer;
    OLECHECK(this->get_DrawBuffer((long*)&DrawBuffer));
    return DrawBuffer;
  }


  __property   long            DrawBuffer = {read = get_DrawBuffer, write = set_DrawBuffer};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ControlEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {9A4BBF53-4E46-101B-8BBD-00AA003E3B29}
// *********************************************************************//
interface ControlEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall Enter()
  {
    _TDispID _dispid(/* Enter */ DISPID(-2147384830));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall Exit(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* Exit */ DISPID(-2147384829));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeUpdate(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* BeforeUpdate */ DISPID(-2147384831));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall AfterUpdate()
  {
    _TDispID _dispid(/* AfterUpdate */ DISPID(-2147384832));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: FormEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {5B9D8FC8-4A71-101B-97A6-00000B65C08B}
// *********************************************************************//
interface FormEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall AddControl(Msforms_97::Control* Control/*[in]*/)
  {
    _TDispID _dispid(/* AddControl */ DISPID(768));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::Control* Control/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState State/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
    TAutoArgs<8> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
    _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    _args[6] = (int)State /*[VT_USERDEFINED:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[8] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::Control* Control/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
    TAutoArgs<8> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
    _args[3] = (int)Action /*[VT_USERDEFINED:0]*/;
    _args[4] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[5] = X /*[VT_R4:0]*/;
    _args[6] = Y /*[VT_R4:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[8] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* DblClick */ DISPID(-601));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
  {
    _TDispID _dispid(/* Error */ DISPID(-608));
    TAutoArgs<7> _args;
    _args[1] = Number /*[VT_I2:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
    _args[3] = SCode /*[VT_I4:0]*/;
    _args[4] = Source /*[VT_BSTR:0]*/;
    _args[5] = HelpFile /*[VT_BSTR:0]*/;
    _args[6] = HelpContext /*[VT_I4:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Layout()
  {
    _TDispID _dispid(/* Layout */ DISPID(770));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall RemoveControl(Msforms_97::Control* Control/*[in]*/)
  {
    _TDispID _dispid(/* RemoveControl */ DISPID(771));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Scroll(Msforms_97::fmScrollAction ActionX/*[in]*/, 
                                         Msforms_97::fmScrollAction ActionY/*[in]*/, 
                                         float RequestDx/*[in]*/, float RequestDy/*[in]*/, 
                                         Msforms_97::ReturnSingle* ActualDx/*[in]*/, 
                                         Msforms_97::ReturnSingle* ActualDy/*[in]*/)
  {
    _TDispID _dispid(/* Scroll */ DISPID(772));
    TAutoArgs<6> _args;
    _args[1] = (int)ActionX /*[VT_USERDEFINED:0]*/;
    _args[2] = (int)ActionY /*[VT_USERDEFINED:0]*/;
    _args[3] = RequestDx /*[VT_R4:0]*/;
    _args[4] = RequestDy /*[VT_R4:0]*/;
    _args[5] = (LPDISPATCH)(Msforms_97::ReturnSingle*)ActualDx /*[VT_USERDEFINED:1]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnSingle*)ActualDy /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Zoom(short* Percent/*[in,out]*/)
  {
    _TDispID _dispid(/* Zoom */ DISPID(773));
    TAutoArgs<1> _args;
    _args[1] = Percent /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: OptionFrameEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {CF3F94A0-F546-11CE-9BCE-00AA00608E01}
// *********************************************************************//
interface OptionFrameEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall AddControl(Msforms_97::Control* Control/*[in]*/)
  {
    _TDispID _dispid(/* AddControl */ DISPID(768));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::Control* Control/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState State/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
    TAutoArgs<8> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
    _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    _args[6] = (int)State /*[VT_USERDEFINED:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[8] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::Control* Control/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
    TAutoArgs<8> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
    _args[3] = (int)Action /*[VT_USERDEFINED:0]*/;
    _args[4] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[5] = X /*[VT_R4:0]*/;
    _args[6] = Y /*[VT_R4:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[8] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* DblClick */ DISPID(-601));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
  {
    _TDispID _dispid(/* Error */ DISPID(-608));
    TAutoArgs<7> _args;
    _args[1] = Number /*[VT_I2:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
    _args[3] = SCode /*[VT_I4:0]*/;
    _args[4] = Source /*[VT_BSTR:0]*/;
    _args[5] = HelpFile /*[VT_BSTR:0]*/;
    _args[6] = HelpContext /*[VT_I4:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Layout()
  {
    _TDispID _dispid(/* Layout */ DISPID(770));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall RemoveControl(Msforms_97::Control* Control/*[in]*/)
  {
    _TDispID _dispid(/* RemoveControl */ DISPID(771));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Scroll(Msforms_97::fmScrollAction ActionX/*[in]*/, 
                                         Msforms_97::fmScrollAction ActionY/*[in]*/, 
                                         float RequestDx/*[in]*/, float RequestDy/*[in]*/, 
                                         Msforms_97::ReturnSingle* ActualDx/*[in]*/, 
                                         Msforms_97::ReturnSingle* ActualDy/*[in]*/)
  {
    _TDispID _dispid(/* Scroll */ DISPID(772));
    TAutoArgs<6> _args;
    _args[1] = (int)ActionX /*[VT_USERDEFINED:0]*/;
    _args[2] = (int)ActionY /*[VT_USERDEFINED:0]*/;
    _args[3] = RequestDx /*[VT_R4:0]*/;
    _args[4] = RequestDy /*[VT_R4:0]*/;
    _args[5] = (LPDISPATCH)(Msforms_97::ReturnSingle*)ActualDx /*[VT_USERDEFINED:1]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnSingle*)ActualDy /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Zoom(short* Percent/*[in,out]*/)
  {
    _TDispID _dispid(/* Zoom */ DISPID(773));
    TAutoArgs<1> _args;
    _args[1] = Percent /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: ILabelControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04598FC1-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
interface ILabelControl  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_AutoSize(VARIANT_BOOL fvbAutoSize/*[in]*/) = 0; // [-500]
  virtual HRESULT STDMETHODCALLTYPE get_AutoSize(VARIANT_BOOL* fvbAutoSize/*[out,retval]*/) = 0; // [-500]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/) = 0; // [-502]
  virtual HRESULT STDMETHODCALLTYPE get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/) = 0; // [-502]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/) = 0; // [-503]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/) = 0; // [-503]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/) = 0; // [-504]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/) = 0; // [-504]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR bstrCaption/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* bstrCaption/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL fEnabled/*[in]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE set__Font_Reserved(IFontDisp** Param1/*[in]*/) = 0; // [2147483135]
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp** Font/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp*** Font/*[out,retval]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(VARIANT_BOOL FontBold/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR FontName/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* FontName/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(CURRENCY FontSize/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(CURRENCY* FontSize/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE set_Picture(IPictureDisp** pPicture/*[in]*/) = 0; // [-523]
  virtual HRESULT STDMETHODCALLTYPE _set_Picture(IPictureDisp** pPicture/*[in]*/) = 0; // [-523]
  virtual HRESULT STDMETHODCALLTYPE get_Picture(IPictureDisp*** pPicture/*[out,retval]*/) = 0; // [-523]
  virtual HRESULT STDMETHODCALLTYPE set_PicturePosition(Msforms_97::fmPicturePosition PicPos/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_PicturePosition(Msforms_97::fmPicturePosition* PicPos/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/) = 0; // [-536]
  virtual HRESULT STDMETHODCALLTYPE get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/) = 0; // [-536]
  virtual HRESULT STDMETHODCALLTYPE set_Accelerator(BSTR Accelerator/*[in]*/) = 0; // [-543]
  virtual HRESULT STDMETHODCALLTYPE get_Accelerator(BSTR* Accelerator/*[out,retval]*/) = 0; // [-543]
  virtual HRESULT STDMETHODCALLTYPE set_FontWeight(short FontWeight/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_FontWeight(short* FontWeight/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set__Value(BSTR bstrCaption/*[in]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE get__Value(BSTR* bstrCaption/*[out,retval]*/) = 0; // [-518]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_AutoSize(void)
  {
    VARIANT_BOOL fvbAutoSize;
    OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&fvbAutoSize));
    return fvbAutoSize;
  }

  Msforms_97::OLE_COLOR __fastcall get_BackColor(void)
  {
    Msforms_97::OLE_COLOR BackColor;
    OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
    return BackColor;
  }

  Msforms_97::fmBackStyle __fastcall get_BackStyle(void)
  {
    Msforms_97::fmBackStyle BackStyle;
    OLECHECK(this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle));
    return BackStyle;
  }

  Msforms_97::OLE_COLOR __fastcall get_BorderColor(void)
  {
    Msforms_97::OLE_COLOR BorderColor;
    OLECHECK(this->get_BorderColor((Msforms_97::OLE_COLOR*)&BorderColor));
    return BorderColor;
  }

  Msforms_97::fmBorderStyle __fastcall get_BorderStyle(void)
  {
    Msforms_97::fmBorderStyle BorderStyle;
    OLECHECK(this->get_BorderStyle((Msforms_97::fmBorderStyle*)&BorderStyle));
    return BorderStyle;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR bstrCaption = 0;
    OLECHECK(this->get_Caption((BSTR*)&bstrCaption));
    return bstrCaption;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL fEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&fEnabled));
    return fEnabled;
  }

  IFontDisp** __fastcall get_Font(void)
  {
    IFontDisp** Font;
    OLECHECK(this->get_Font((IFontDisp***)&Font));
    return Font;
  }

  VARIANT_BOOL __fastcall get_FontItalic(void)
  {
    VARIANT_BOOL FontItalic;
    OLECHECK(this->get_FontItalic((VARIANT_BOOL*)&FontItalic));
    return FontItalic;
  }

  VARIANT_BOOL __fastcall get_FontBold(void)
  {
    VARIANT_BOOL FontBold;
    OLECHECK(this->get_FontBold((VARIANT_BOOL*)&FontBold));
    return FontBold;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR FontName = 0;
    OLECHECK(this->get_FontName((BSTR*)&FontName));
    return FontName;
  }

  CURRENCY __fastcall get_FontSize(void)
  {
    CURRENCY FontSize;
    OLECHECK(this->get_FontSize((CURRENCY*)&FontSize));
    return FontSize;
  }

  VARIANT_BOOL __fastcall get_FontStrikethru(void)
  {
    VARIANT_BOOL FontStrikethru;
    OLECHECK(this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru));
    return FontStrikethru;
  }

  VARIANT_BOOL __fastcall get_FontUnderline(void)
  {
    VARIANT_BOOL FontUnderline;
    OLECHECK(this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline));
    return FontUnderline;
  }

  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void)
  {
    Msforms_97::OLE_COLOR ForeColor;
    OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
    return ForeColor;
  }

  IPictureDisp** __fastcall get_MouseIcon(void)
  {
    IPictureDisp** MouseIcon;
    OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
    return MouseIcon;
  }

  Msforms_97::fmMousePointer __fastcall get_MousePointer(void)
  {
    Msforms_97::fmMousePointer MousePointer;
    OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
    return MousePointer;
  }

  IPictureDisp** __fastcall get_Picture(void)
  {
    IPictureDisp** pPicture;
    OLECHECK(this->get_Picture((IPictureDisp***)&pPicture));
    return pPicture;
  }

  Msforms_97::fmPicturePosition __fastcall get_PicturePosition(void)
  {
    Msforms_97::fmPicturePosition PicPos;
    OLECHECK(this->get_PicturePosition((Msforms_97::fmPicturePosition*)&PicPos));
    return PicPos;
  }

  Msforms_97::fmSpecialEffect __fastcall get_SpecialEffect(void)
  {
    Msforms_97::fmSpecialEffect SpecialEffect;
    OLECHECK(this->get_SpecialEffect((Msforms_97::fmSpecialEffect*)&SpecialEffect));
    return SpecialEffect;
  }

  Msforms_97::fmTextAlign __fastcall get_TextAlign(void)
  {
    Msforms_97::fmTextAlign TextAlign;
    OLECHECK(this->get_TextAlign((Msforms_97::fmTextAlign*)&TextAlign));
    return TextAlign;
  }

  VARIANT_BOOL __fastcall get_WordWrap(void)
  {
    VARIANT_BOOL WordWrap;
    OLECHECK(this->get_WordWrap((VARIANT_BOOL*)&WordWrap));
    return WordWrap;
  }

  BSTR __fastcall get_Accelerator(void)
  {
    BSTR Accelerator = 0;
    OLECHECK(this->get_Accelerator((BSTR*)&Accelerator));
    return Accelerator;
  }

  short __fastcall get_FontWeight(void)
  {
    short FontWeight;
    OLECHECK(this->get_FontWeight((short*)&FontWeight));
    return FontWeight;
  }

  BSTR __fastcall get__Value(void)
  {
    BSTR bstrCaption = 0;
    OLECHECK(this->get__Value((BSTR*)&bstrCaption));
    return bstrCaption;
  }


  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   Msforms_97::OLE_COLOR BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   Msforms_97::fmBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   VARIANT_BOOL    FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   VARIANT_BOOL    FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   VARIANT_BOOL    FontStrikethru = {read = get_FontStrikethru, write = set_FontStrikethru};
  __property   VARIANT_BOOL    FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   IPictureDisp**  Picture = {read = get_Picture, write = set_Picture};
  __property   Msforms_97::fmPicturePosition PicturePosition = {read = get_PicturePosition, write = set_PicturePosition};
  __property   Msforms_97::fmSpecialEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   Msforms_97::fmTextAlign TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   VARIANT_BOOL    WordWrap = {read = get_WordWrap, write = set_WordWrap};
  __property   BSTR            Accelerator = {read = get_Accelerator, write = set_Accelerator};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   BSTR            _Value = {read = get__Value, write = set__Value};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ICommandButton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04598FC4-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
interface ICommandButton  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_AutoSize(VARIANT_BOOL fvbAutoSize/*[in]*/) = 0; // [-500]
  virtual HRESULT STDMETHODCALLTYPE get_AutoSize(VARIANT_BOOL* fvbAutoSize/*[out,retval]*/) = 0; // [-500]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/) = 0; // [-502]
  virtual HRESULT STDMETHODCALLTYPE get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/) = 0; // [-502]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR bstrCaption/*[in]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* bstrCaption/*[out,retval]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL fEnabled/*[in]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE set__Font_Reserved(IFontDisp** Param1/*[in]*/) = 0; // [2147483135]
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp** Font/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp*** Font/*[out,retval]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(VARIANT_BOOL FontBold/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR FontName/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* FontName/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(CURRENCY FontSize/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(CURRENCY* FontSize/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE set_TakeFocusOnClick(VARIANT_BOOL TakeFocusOnClick/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_TakeFocusOnClick(VARIANT_BOOL* TakeFocusOnClick/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_Locked(VARIANT_BOOL fLocked/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Locked(VARIANT_BOOL* fLocked/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(Msforms_97::fmMousePointer mouseptr/*[in]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(Msforms_97::fmMousePointer* mouseptr/*[out,retval]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE set_Picture(IPictureDisp** Picture/*[in]*/) = 0; // [-523]
  virtual HRESULT STDMETHODCALLTYPE _set_Picture(IPictureDisp** Picture/*[in]*/) = 0; // [-523]
  virtual HRESULT STDMETHODCALLTYPE get_Picture(IPictureDisp*** Picture/*[out,retval]*/) = 0; // [-523]
  virtual HRESULT STDMETHODCALLTYPE set_PicturePosition(Msforms_97::fmPicturePosition PicturePosition/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_PicturePosition(Msforms_97::fmPicturePosition* PicturePosition/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_Accelerator(BSTR Accelerator/*[in]*/) = 0; // [-543]
  virtual HRESULT STDMETHODCALLTYPE get_Accelerator(BSTR* Accelerator/*[out,retval]*/) = 0; // [-543]
  virtual HRESULT STDMETHODCALLTYPE set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/) = 0; // [-536]
  virtual HRESULT STDMETHODCALLTYPE get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/) = 0; // [-536]
  virtual HRESULT STDMETHODCALLTYPE set_Value(VARIANT_BOOL fValue/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT_BOOL* fValue/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_FontWeight(short FontWeight/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_FontWeight(short* FontWeight/*[out,retval]*/) = 0; // [7]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_AutoSize(void)
  {
    VARIANT_BOOL fvbAutoSize;
    OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&fvbAutoSize));
    return fvbAutoSize;
  }

  Msforms_97::OLE_COLOR __fastcall get_BackColor(void)
  {
    Msforms_97::OLE_COLOR BackColor;
    OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
    return BackColor;
  }

  Msforms_97::fmBackStyle __fastcall get_BackStyle(void)
  {
    Msforms_97::fmBackStyle BackStyle;
    OLECHECK(this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle));
    return BackStyle;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR bstrCaption = 0;
    OLECHECK(this->get_Caption((BSTR*)&bstrCaption));
    return bstrCaption;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL fEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&fEnabled));
    return fEnabled;
  }

  IFontDisp** __fastcall get_Font(void)
  {
    IFontDisp** Font;
    OLECHECK(this->get_Font((IFontDisp***)&Font));
    return Font;
  }

  VARIANT_BOOL __fastcall get_FontBold(void)
  {
    VARIANT_BOOL FontBold;
    OLECHECK(this->get_FontBold((VARIANT_BOOL*)&FontBold));
    return FontBold;
  }

  VARIANT_BOOL __fastcall get_FontItalic(void)
  {
    VARIANT_BOOL FontItalic;
    OLECHECK(this->get_FontItalic((VARIANT_BOOL*)&FontItalic));
    return FontItalic;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR FontName = 0;
    OLECHECK(this->get_FontName((BSTR*)&FontName));
    return FontName;
  }

  CURRENCY __fastcall get_FontSize(void)
  {
    CURRENCY FontSize;
    OLECHECK(this->get_FontSize((CURRENCY*)&FontSize));
    return FontSize;
  }

  VARIANT_BOOL __fastcall get_FontStrikethru(void)
  {
    VARIANT_BOOL FontStrikethru;
    OLECHECK(this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru));
    return FontStrikethru;
  }

  VARIANT_BOOL __fastcall get_FontUnderline(void)
  {
    VARIANT_BOOL FontUnderline;
    OLECHECK(this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline));
    return FontUnderline;
  }

  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void)
  {
    Msforms_97::OLE_COLOR ForeColor;
    OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
    return ForeColor;
  }

  VARIANT_BOOL __fastcall get_TakeFocusOnClick(void)
  {
    VARIANT_BOOL TakeFocusOnClick;
    OLECHECK(this->get_TakeFocusOnClick((VARIANT_BOOL*)&TakeFocusOnClick));
    return TakeFocusOnClick;
  }

  VARIANT_BOOL __fastcall get_Locked(void)
  {
    VARIANT_BOOL fLocked;
    OLECHECK(this->get_Locked((VARIANT_BOOL*)&fLocked));
    return fLocked;
  }

  IPictureDisp** __fastcall get_MouseIcon(void)
  {
    IPictureDisp** MouseIcon;
    OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
    return MouseIcon;
  }

  Msforms_97::fmMousePointer __fastcall get_MousePointer(void)
  {
    Msforms_97::fmMousePointer mouseptr;
    OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&mouseptr));
    return mouseptr;
  }

  IPictureDisp** __fastcall get_Picture(void)
  {
    IPictureDisp** Picture;
    OLECHECK(this->get_Picture((IPictureDisp***)&Picture));
    return Picture;
  }

  Msforms_97::fmPicturePosition __fastcall get_PicturePosition(void)
  {
    Msforms_97::fmPicturePosition PicturePosition;
    OLECHECK(this->get_PicturePosition((Msforms_97::fmPicturePosition*)&PicturePosition));
    return PicturePosition;
  }

  BSTR __fastcall get_Accelerator(void)
  {
    BSTR Accelerator = 0;
    OLECHECK(this->get_Accelerator((BSTR*)&Accelerator));
    return Accelerator;
  }

  VARIANT_BOOL __fastcall get_WordWrap(void)
  {
    VARIANT_BOOL WordWrap;
    OLECHECK(this->get_WordWrap((VARIANT_BOOL*)&WordWrap));
    return WordWrap;
  }

  VARIANT_BOOL __fastcall get_Value(void)
  {
    VARIANT_BOOL fValue;
    OLECHECK(this->get_Value((VARIANT_BOOL*)&fValue));
    return fValue;
  }

  short __fastcall get_FontWeight(void)
  {
    short FontWeight;
    OLECHECK(this->get_FontWeight((short*)&FontWeight));
    return FontWeight;
  }


  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   VARIANT_BOOL    FontBold = {read = get_FontBold, write = set_FontBold};
  __property   VARIANT_BOOL    FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   VARIANT_BOOL    FontStrikethru = {read = get_FontStrikethru, write = set_FontStrikethru};
  __property   VARIANT_BOOL    FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   VARIANT_BOOL    TakeFocusOnClick = {read = get_TakeFocusOnClick, write = set_TakeFocusOnClick};
  __property   VARIANT_BOOL    Locked = {read = get_Locked, write = set_Locked};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   IPictureDisp**  Picture = {read = get_Picture, write = set_Picture};
  __property   Msforms_97::fmPicturePosition PicturePosition = {read = get_PicturePosition, write = set_PicturePosition};
  __property   BSTR            Accelerator = {read = get_Accelerator, write = set_Accelerator};
  __property   VARIANT_BOOL    WordWrap = {read = get_WordWrap, write = set_WordWrap};
  __property   VARIANT_BOOL    Value = {read = get_Value, write = set_Value};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMdcText
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8BD21D13-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
interface IMdcText  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_AutoSize(VARIANT_BOOL AutoSize/*[in]*/) = 0; // [-500]
  virtual HRESULT STDMETHODCALLTYPE get_AutoSize(VARIANT_BOOL* AutoSize/*[out,retval]*/) = 0; // [-500]
  virtual HRESULT STDMETHODCALLTYPE set_AutoTab(VARIANT_BOOL AutoTab/*[in]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE get_AutoTab(VARIANT_BOOL* AutoTab/*[out,retval]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE set_AutoWordSelect(VARIANT_BOOL AutoWordSelect/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_AutoWordSelect(VARIANT_BOOL* AutoWordSelect/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/) = 0; // [-502]
  virtual HRESULT STDMETHODCALLTYPE get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/) = 0; // [-502]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/) = 0; // [-503]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/) = 0; // [-503]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/) = 0; // [-504]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/) = 0; // [-504]
  virtual HRESULT STDMETHODCALLTYPE set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_CurLine(long CurLine/*[in]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE get_CurLine(long* CurLine/*[out,retval]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE get_CurTargetX(long* CurTargetX/*[out,retval]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE get_CurTargetY(long* CurTargetY/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_CurX(long CurX/*[in]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE get_CurX(long* CurX/*[out,retval]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE set_CurY(long CurY/*[in]*/) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE get_CurY(long* CurY/*[out,retval]*/) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE set_DropButtonStyle(Msforms_97::fmDropButtonStyle DropButtonStyle/*[in]*/) = 0; // [305]
  virtual HRESULT STDMETHODCALLTYPE get_DropButtonStyle(Msforms_97::fmDropButtonStyle* DropButtonStyle/*[out,retval]*/) = 0; // [305]
  virtual HRESULT STDMETHODCALLTYPE set_EnterKeyBehavior(VARIANT_BOOL EnterKeyBehavior/*[in]*/) = 0; // [-544]
  virtual HRESULT STDMETHODCALLTYPE get_EnterKeyBehavior(VARIANT_BOOL* EnterKeyBehavior/*[out,retval]*/) = 0; // [-544]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Enabled/*[in]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE set__Font_Reserved(IFontDisp** Param1/*[in]*/) = 0; // [2147483135]
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp** Font/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp*** Font/*[out,retval]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(VARIANT_BOOL FontBold/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR FontName/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* FontName/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(CURRENCY FontSize/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(CURRENCY* FontSize/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_FontWeight(short FontWeight/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_FontWeight(short* FontWeight/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE set_HideSelection(VARIANT_BOOL HideSelection/*[in]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE get_HideSelection(VARIANT_BOOL* HideSelection/*[out,retval]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE set_IntegralHeight(VARIANT_BOOL IntegralHeight/*[in]*/) = 0; // [604]
  virtual HRESULT STDMETHODCALLTYPE get_IntegralHeight(VARIANT_BOOL* IntegralHeight/*[out,retval]*/) = 0; // [604]
  virtual HRESULT STDMETHODCALLTYPE get_LineCount(long* LineCount/*[out,retval]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE set_Locked(VARIANT_BOOL Locked/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_MaxLength(long MaxLength/*[in]*/) = 0; // [-533]
  virtual HRESULT STDMETHODCALLTYPE get_MaxLength(long* MaxLength/*[out,retval]*/) = 0; // [-533]
  virtual HRESULT STDMETHODCALLTYPE set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE set_MultiLine(VARIANT_BOOL MultiLine/*[in]*/) = 0; // [-537]
  virtual HRESULT STDMETHODCALLTYPE get_MultiLine(VARIANT_BOOL* MultiLine/*[out,retval]*/) = 0; // [-537]
  virtual HRESULT STDMETHODCALLTYPE set_PasswordChar(BSTR PasswordChar/*[in]*/) = 0; // [-534]
  virtual HRESULT STDMETHODCALLTYPE get_PasswordChar(BSTR* PasswordChar/*[out,retval]*/) = 0; // [-534]
  virtual HRESULT STDMETHODCALLTYPE set_ScrollBars(Msforms_97::fmScrollBars ScrollBars/*[in]*/) = 0; // [-535]
  virtual HRESULT STDMETHODCALLTYPE get_ScrollBars(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/) = 0; // [-535]
  virtual HRESULT STDMETHODCALLTYPE set_SelectionMargin(VARIANT_BOOL SelectionMargin/*[in]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE get_SelectionMargin(VARIANT_BOOL* SelectionMargin/*[out,retval]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE set_SelLength(long SelLength/*[in]*/) = 0; // [-548]
  virtual HRESULT STDMETHODCALLTYPE get_SelLength(long* SelLength/*[out,retval]*/) = 0; // [-548]
  virtual HRESULT STDMETHODCALLTYPE set_SelStart(long SelStart/*[in]*/) = 0; // [-547]
  virtual HRESULT STDMETHODCALLTYPE get_SelStart(long* SelStart/*[out,retval]*/) = 0; // [-547]
  virtual HRESULT STDMETHODCALLTYPE set_SelText(BSTR SelText/*[in]*/) = 0; // [-546]
  virtual HRESULT STDMETHODCALLTYPE get_SelText(BSTR* SelText/*[out,retval]*/) = 0; // [-546]
  virtual HRESULT STDMETHODCALLTYPE set_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen/*[in]*/) = 0; // [304]
  virtual HRESULT STDMETHODCALLTYPE get_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen* ShowDropButtonWhen/*[out,retval]*/) = 0; // [304]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_TabKeyBehavior(VARIANT_BOOL TabKeyBehavior/*[in]*/) = 0; // [-545]
  virtual HRESULT STDMETHODCALLTYPE get_TabKeyBehavior(VARIANT_BOOL* TabKeyBehavior/*[out,retval]*/) = 0; // [-545]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR Text/*[in]*/) = 0; // [-517]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* Text/*[out,retval]*/) = 0; // [-517]
  virtual HRESULT STDMETHODCALLTYPE set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/) = 0; // [10004]
  virtual HRESULT STDMETHODCALLTYPE get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/) = 0; // [10004]
  virtual HRESULT STDMETHODCALLTYPE get_TextLength(long* TextLength/*[out,retval]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/) = 0; // [-524]
  virtual HRESULT STDMETHODCALLTYPE set_Value(VARIANT* Value/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* Value/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/) = 0; // [-536]
  virtual HRESULT STDMETHODCALLTYPE get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/) = 0; // [-536]
  virtual HRESULT STDMETHODCALLTYPE Copy(void) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE Cut(void) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE Paste(void) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE set_IMEMode(Msforms_97::fmIMEMode IMEMode/*[in]*/) = 0; // [-542]
  virtual HRESULT STDMETHODCALLTYPE get_IMEMode(Msforms_97::fmIMEMode* IMEMode/*[out,retval]*/) = 0; // [-542]
  virtual HRESULT STDMETHODCALLTYPE set_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior EnterFieldBehavior/*[in]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE get_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior* EnterFieldBehavior/*[out,retval]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE set_DragBehavior(Msforms_97::fmDragBehavior DragBehavior/*[in]*/) = 0; // [225]
  virtual HRESULT STDMETHODCALLTYPE get_DragBehavior(Msforms_97::fmDragBehavior* DragBehavior/*[out,retval]*/) = 0; // [225]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/) = 0; // [-540]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_AutoSize(void)
  {
    VARIANT_BOOL AutoSize;
    OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&AutoSize));
    return AutoSize;
  }

  VARIANT_BOOL __fastcall get_AutoTab(void)
  {
    VARIANT_BOOL AutoTab;
    OLECHECK(this->get_AutoTab((VARIANT_BOOL*)&AutoTab));
    return AutoTab;
  }

  VARIANT_BOOL __fastcall get_AutoWordSelect(void)
  {
    VARIANT_BOOL AutoWordSelect;
    OLECHECK(this->get_AutoWordSelect((VARIANT_BOOL*)&AutoWordSelect));
    return AutoWordSelect;
  }

  Msforms_97::OLE_COLOR __fastcall get_BackColor(void)
  {
    Msforms_97::OLE_COLOR BackColor;
    OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
    return BackColor;
  }

  Msforms_97::fmBackStyle __fastcall get_BackStyle(void)
  {
    Msforms_97::fmBackStyle BackStyle;
    OLECHECK(this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle));
    return BackStyle;
  }

  Msforms_97::OLE_COLOR __fastcall get_BorderColor(void)
  {
    Msforms_97::OLE_COLOR BorderColor;
    OLECHECK(this->get_BorderColor((Msforms_97::OLE_COLOR*)&BorderColor));
    return BorderColor;
  }

  Msforms_97::fmBorderStyle __fastcall get_BorderStyle(void)
  {
    Msforms_97::fmBorderStyle BorderStyle;
    OLECHECK(this->get_BorderStyle((Msforms_97::fmBorderStyle*)&BorderStyle));
    return BorderStyle;
  }

  VARIANT_BOOL __fastcall get_BordersSuppress(void)
  {
    VARIANT_BOOL BordersSuppress;
    OLECHECK(this->get_BordersSuppress((VARIANT_BOOL*)&BordersSuppress));
    return BordersSuppress;
  }

  VARIANT_BOOL __fastcall get_CanPaste(void)
  {
    VARIANT_BOOL CanPaste;
    OLECHECK(this->get_CanPaste((VARIANT_BOOL*)&CanPaste));
    return CanPaste;
  }

  long __fastcall get_CurLine(void)
  {
    long CurLine;
    OLECHECK(this->get_CurLine((long*)&CurLine));
    return CurLine;
  }

  long __fastcall get_CurTargetX(void)
  {
    long CurTargetX;
    OLECHECK(this->get_CurTargetX((long*)&CurTargetX));
    return CurTargetX;
  }

  long __fastcall get_CurTargetY(void)
  {
    long CurTargetY;
    OLECHECK(this->get_CurTargetY((long*)&CurTargetY));
    return CurTargetY;
  }

  long __fastcall get_CurX(void)
  {
    long CurX;
    OLECHECK(this->get_CurX((long*)&CurX));
    return CurX;
  }

  long __fastcall get_CurY(void)
  {
    long CurY;
    OLECHECK(this->get_CurY((long*)&CurY));
    return CurY;
  }

  Msforms_97::fmDropButtonStyle __fastcall get_DropButtonStyle(void)
  {
    Msforms_97::fmDropButtonStyle DropButtonStyle;
    OLECHECK(this->get_DropButtonStyle((Msforms_97::fmDropButtonStyle*)&DropButtonStyle));
    return DropButtonStyle;
  }

  VARIANT_BOOL __fastcall get_EnterKeyBehavior(void)
  {
    VARIANT_BOOL EnterKeyBehavior;
    OLECHECK(this->get_EnterKeyBehavior((VARIANT_BOOL*)&EnterKeyBehavior));
    return EnterKeyBehavior;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Enabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Enabled));
    return Enabled;
  }

  IFontDisp** __fastcall get_Font(void)
  {
    IFontDisp** Font;
    OLECHECK(this->get_Font((IFontDisp***)&Font));
    return Font;
  }

  VARIANT_BOOL __fastcall get_FontBold(void)
  {
    VARIANT_BOOL FontBold;
    OLECHECK(this->get_FontBold((VARIANT_BOOL*)&FontBold));
    return FontBold;
  }

  VARIANT_BOOL __fastcall get_FontItalic(void)
  {
    VARIANT_BOOL FontItalic;
    OLECHECK(this->get_FontItalic((VARIANT_BOOL*)&FontItalic));
    return FontItalic;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR FontName = 0;
    OLECHECK(this->get_FontName((BSTR*)&FontName));
    return FontName;
  }

  CURRENCY __fastcall get_FontSize(void)
  {
    CURRENCY FontSize;
    OLECHECK(this->get_FontSize((CURRENCY*)&FontSize));
    return FontSize;
  }

  VARIANT_BOOL __fastcall get_FontStrikethru(void)
  {
    VARIANT_BOOL FontStrikethru;
    OLECHECK(this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru));
    return FontStrikethru;
  }

  VARIANT_BOOL __fastcall get_FontUnderline(void)
  {
    VARIANT_BOOL FontUnderline;
    OLECHECK(this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline));
    return FontUnderline;
  }

  short __fastcall get_FontWeight(void)
  {
    short FontWeight;
    OLECHECK(this->get_FontWeight((short*)&FontWeight));
    return FontWeight;
  }

  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void)
  {
    Msforms_97::OLE_COLOR ForeColor;
    OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
    return ForeColor;
  }

  VARIANT_BOOL __fastcall get_HideSelection(void)
  {
    VARIANT_BOOL HideSelection;
    OLECHECK(this->get_HideSelection((VARIANT_BOOL*)&HideSelection));
    return HideSelection;
  }

  VARIANT_BOOL __fastcall get_IntegralHeight(void)
  {
    VARIANT_BOOL IntegralHeight;
    OLECHECK(this->get_IntegralHeight((VARIANT_BOOL*)&IntegralHeight));
    return IntegralHeight;
  }

  long __fastcall get_LineCount(void)
  {
    long LineCount;
    OLECHECK(this->get_LineCount((long*)&LineCount));
    return LineCount;
  }

  VARIANT_BOOL __fastcall get_Locked(void)
  {
    VARIANT_BOOL Locked;
    OLECHECK(this->get_Locked((VARIANT_BOOL*)&Locked));
    return Locked;
  }

  long __fastcall get_MaxLength(void)
  {
    long MaxLength;
    OLECHECK(this->get_MaxLength((long*)&MaxLength));
    return MaxLength;
  }

  IPictureDisp** __fastcall get_MouseIcon(void)
  {
    IPictureDisp** MouseIcon;
    OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
    return MouseIcon;
  }

  Msforms_97::fmMousePointer __fastcall get_MousePointer(void)
  {
    Msforms_97::fmMousePointer MousePointer;
    OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
    return MousePointer;
  }

  VARIANT_BOOL __fastcall get_MultiLine(void)
  {
    VARIANT_BOOL MultiLine;
    OLECHECK(this->get_MultiLine((VARIANT_BOOL*)&MultiLine));
    return MultiLine;
  }

  BSTR __fastcall get_PasswordChar(void)
  {
    BSTR PasswordChar = 0;
    OLECHECK(this->get_PasswordChar((BSTR*)&PasswordChar));
    return PasswordChar;
  }

  Msforms_97::fmScrollBars __fastcall get_ScrollBars(void)
  {
    Msforms_97::fmScrollBars ScrollBars;
    OLECHECK(this->get_ScrollBars((Msforms_97::fmScrollBars*)&ScrollBars));
    return ScrollBars;
  }

  VARIANT_BOOL __fastcall get_SelectionMargin(void)
  {
    VARIANT_BOOL SelectionMargin;
    OLECHECK(this->get_SelectionMargin((VARIANT_BOOL*)&SelectionMargin));
    return SelectionMargin;
  }

  long __fastcall get_SelLength(void)
  {
    long SelLength;
    OLECHECK(this->get_SelLength((long*)&SelLength));
    return SelLength;
  }

  long __fastcall get_SelStart(void)
  {
    long SelStart;
    OLECHECK(this->get_SelStart((long*)&SelStart));
    return SelStart;
  }

  BSTR __fastcall get_SelText(void)
  {
    BSTR SelText = 0;
    OLECHECK(this->get_SelText((BSTR*)&SelText));
    return SelText;
  }

  Msforms_97::fmShowDropButtonWhen __fastcall get_ShowDropButtonWhen(void)
  {
    Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen;
    OLECHECK(this->get_ShowDropButtonWhen((Msforms_97::fmShowDropButtonWhen*)&ShowDropButtonWhen));
    return ShowDropButtonWhen;
  }

  Msforms_97::fmSpecialEffect __fastcall get_SpecialEffect(void)
  {
    Msforms_97::fmSpecialEffect SpecialEffect;
    OLECHECK(this->get_SpecialEffect((Msforms_97::fmSpecialEffect*)&SpecialEffect));
    return SpecialEffect;
  }

  VARIANT_BOOL __fastcall get_TabKeyBehavior(void)
  {
    VARIANT_BOOL TabKeyBehavior;
    OLECHECK(this->get_TabKeyBehavior((VARIANT_BOOL*)&TabKeyBehavior));
    return TabKeyBehavior;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR Text = 0;
    OLECHECK(this->get_Text((BSTR*)&Text));
    return Text;
  }

  Msforms_97::fmTextAlign __fastcall get_TextAlign(void)
  {
    Msforms_97::fmTextAlign TextAlign;
    OLECHECK(this->get_TextAlign((Msforms_97::fmTextAlign*)&TextAlign));
    return TextAlign;
  }

  long __fastcall get_TextLength(void)
  {
    long TextLength;
    OLECHECK(this->get_TextLength((long*)&TextLength));
    return TextLength;
  }

  VARIANT_BOOL __fastcall get_Valid(void)
  {
    VARIANT_BOOL Valid;
    OLECHECK(this->get_Valid((VARIANT_BOOL*)&Valid));
    return Valid;
  }

  VARIANT __fastcall get_Value(void)
  {
    VARIANT Value;
    OLECHECK(this->get_Value((VARIANT*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_WordWrap(void)
  {
    VARIANT_BOOL WordWrap;
    OLECHECK(this->get_WordWrap((VARIANT_BOOL*)&WordWrap));
    return WordWrap;
  }

  Msforms_97::fmIMEMode __fastcall get_IMEMode(void)
  {
    Msforms_97::fmIMEMode IMEMode;
    OLECHECK(this->get_IMEMode((Msforms_97::fmIMEMode*)&IMEMode));
    return IMEMode;
  }

  Msforms_97::fmEnterFieldBehavior __fastcall get_EnterFieldBehavior(void)
  {
    Msforms_97::fmEnterFieldBehavior EnterFieldBehavior;
    OLECHECK(this->get_EnterFieldBehavior((Msforms_97::fmEnterFieldBehavior*)&EnterFieldBehavior));
    return EnterFieldBehavior;
  }

  Msforms_97::fmDragBehavior __fastcall get_DragBehavior(void)
  {
    Msforms_97::fmDragBehavior DragBehavior;
    OLECHECK(this->get_DragBehavior((Msforms_97::fmDragBehavior*)&DragBehavior));
    return DragBehavior;
  }

  Msforms_97::fmDisplayStyle __fastcall get_DisplayStyle(void)
  {
    Msforms_97::fmDisplayStyle DisplayStyle;
    OLECHECK(this->get_DisplayStyle((Msforms_97::fmDisplayStyle*)&DisplayStyle));
    return DisplayStyle;
  }


  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   VARIANT_BOOL    AutoTab = {read = get_AutoTab, write = set_AutoTab};
  __property   VARIANT_BOOL    AutoWordSelect = {read = get_AutoWordSelect, write = set_AutoWordSelect};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   Msforms_97::OLE_COLOR BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   Msforms_97::fmBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   VARIANT_BOOL    BordersSuppress = {read = get_BordersSuppress, write = set_BordersSuppress};
  __property   VARIANT_BOOL    CanPaste = {read = get_CanPaste};
  __property   long            CurLine = {read = get_CurLine, write = set_CurLine};
  __property   long            CurTargetX = {read = get_CurTargetX};
  __property   long            CurTargetY = {read = get_CurTargetY};
  __property   long            CurX = {read = get_CurX, write = set_CurX};
  __property   long            CurY = {read = get_CurY, write = set_CurY};
  __property   Msforms_97::fmDropButtonStyle DropButtonStyle = {read = get_DropButtonStyle, write = set_DropButtonStyle};
  __property   VARIANT_BOOL    EnterKeyBehavior = {read = get_EnterKeyBehavior, write = set_EnterKeyBehavior};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   VARIANT_BOOL    FontBold = {read = get_FontBold, write = set_FontBold};
  __property   VARIANT_BOOL    FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   VARIANT_BOOL    FontStrikethru = {read = get_FontStrikethru, write = set_FontStrikethru};
  __property   VARIANT_BOOL    FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   VARIANT_BOOL    HideSelection = {read = get_HideSelection, write = set_HideSelection};
  __property   VARIANT_BOOL    IntegralHeight = {read = get_IntegralHeight, write = set_IntegralHeight};
  __property   long            LineCount = {read = get_LineCount};
  __property   VARIANT_BOOL    Locked = {read = get_Locked, write = set_Locked};
  __property   long            MaxLength = {read = get_MaxLength, write = set_MaxLength};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   VARIANT_BOOL    MultiLine = {read = get_MultiLine, write = set_MultiLine};
  __property   BSTR            PasswordChar = {read = get_PasswordChar, write = set_PasswordChar};
  __property   Msforms_97::fmScrollBars ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   VARIANT_BOOL    SelectionMargin = {read = get_SelectionMargin, write = set_SelectionMargin};
  __property   long            SelLength = {read = get_SelLength, write = set_SelLength};
  __property   long            SelStart = {read = get_SelStart, write = set_SelStart};
  __property   BSTR            SelText = {read = get_SelText, write = set_SelText};
  __property   Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen = {read = get_ShowDropButtonWhen, write = set_ShowDropButtonWhen};
  __property   Msforms_97::fmSpecialEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   VARIANT_BOOL    TabKeyBehavior = {read = get_TabKeyBehavior, write = set_TabKeyBehavior};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   Msforms_97::fmTextAlign TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   long            TextLength = {read = get_TextLength};
  __property   VARIANT_BOOL    Valid = {read = get_Valid};
  __property   VARIANT_BOOL    WordWrap = {read = get_WordWrap, write = set_WordWrap};
  __property   Msforms_97::fmIMEMode IMEMode = {read = get_IMEMode, write = set_IMEMode};
  __property   Msforms_97::fmEnterFieldBehavior EnterFieldBehavior = {read = get_EnterFieldBehavior, write = set_EnterFieldBehavior};
  __property   Msforms_97::fmDragBehavior DragBehavior = {read = get_DragBehavior, write = set_DragBehavior};
  __property   Msforms_97::fmDisplayStyle DisplayStyle = {read = get_DisplayStyle};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMdcList
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8BD21D23-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
interface IMdcList  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/) = 0; // [-503]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/) = 0; // [-503]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/) = 0; // [-504]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/) = 0; // [-504]
  virtual HRESULT STDMETHODCALLTYPE set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_BoundColumn(VARIANT* BoundColumn/*[in]*/) = 0; // [501]
  virtual HRESULT STDMETHODCALLTYPE get_BoundColumn(VARIANT* BoundColumn/*[out,retval]*/) = 0; // [501]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnCount(long ColumnCount/*[in]*/) = 0; // [601]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnCount(long* ColumnCount/*[out,retval]*/) = 0; // [601]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnHeads(VARIANT_BOOL ColumnHeads/*[in]*/) = 0; // [602]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnHeads(VARIANT_BOOL* ColumnHeads/*[out,retval]*/) = 0; // [602]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnWidths(BSTR ColumnWidths/*[in]*/) = 0; // [603]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnWidths(BSTR* ColumnWidths/*[out,retval]*/) = 0; // [603]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Enabled/*[in]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE set__Font_Reserved(IFontDisp** Param1/*[in]*/) = 0; // [2147483135]
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp** Font/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp*** Font/*[out,retval]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(VARIANT_BOOL FontBold/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR FontName/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* FontName/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(CURRENCY FontSize/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(CURRENCY* FontSize/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_FontWeight(short FontWeight/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_FontWeight(short* FontWeight/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE set_IntegralHeight(VARIANT_BOOL IntegralHeight/*[in]*/) = 0; // [604]
  virtual HRESULT STDMETHODCALLTYPE get_IntegralHeight(VARIANT_BOOL* IntegralHeight/*[out,retval]*/) = 0; // [604]
  virtual HRESULT STDMETHODCALLTYPE get_ListCount(long* ListCount/*[out,retval]*/) = 0; // [-531]
  virtual HRESULT STDMETHODCALLTYPE set_ListCursor(Msforms_97::PIROWSET ListCursor/*[in]*/) = 0; // [403]
  virtual HRESULT STDMETHODCALLTYPE get_ListCursor(Msforms_97::PIROWSET* ListCursor/*[out,retval]*/) = 0; // [403]
  virtual HRESULT STDMETHODCALLTYPE set_ListIndex(VARIANT* ListIndex/*[in]*/) = 0; // [-526]
  virtual HRESULT STDMETHODCALLTYPE get_ListIndex(VARIANT* ListIndex/*[out,retval]*/) = 0; // [-526]
  virtual HRESULT STDMETHODCALLTYPE set_ListStyle(Msforms_97::fmListStyle ListStyle/*[in]*/) = 0; // [307]
  virtual HRESULT STDMETHODCALLTYPE get_ListStyle(Msforms_97::fmListStyle* ListStyle/*[out,retval]*/) = 0; // [307]
  virtual HRESULT STDMETHODCALLTYPE set_ListWidth(VARIANT* ListWidth/*[in]*/) = 0; // [606]
  virtual HRESULT STDMETHODCALLTYPE get_ListWidth(VARIANT* ListWidth/*[out,retval]*/) = 0; // [606]
  virtual HRESULT STDMETHODCALLTYPE set_Locked(VARIANT_BOOL Locked/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_MatchEntry(Msforms_97::fmMatchEntry MatchEntry/*[in]*/) = 0; // [504]
  virtual HRESULT STDMETHODCALLTYPE get_MatchEntry(Msforms_97::fmMatchEntry* MatchEntry/*[out,retval]*/) = 0; // [504]
  virtual HRESULT STDMETHODCALLTYPE set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE set_MultiSelect(Msforms_97::fmMultiSelect MultiSelect/*[in]*/) = 0; // [-532]
  virtual HRESULT STDMETHODCALLTYPE get_MultiSelect(Msforms_97::fmMultiSelect* MultiSelect/*[out,retval]*/) = 0; // [-532]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR Text/*[in]*/) = 0; // [-517]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* Text/*[out,retval]*/) = 0; // [-517]
  virtual HRESULT STDMETHODCALLTYPE set_TextColumn(VARIANT* TextColumn/*[in]*/) = 0; // [502]
  virtual HRESULT STDMETHODCALLTYPE get_TextColumn(VARIANT* TextColumn/*[out,retval]*/) = 0; // [502]
  virtual HRESULT STDMETHODCALLTYPE set_TopIndex(VARIANT* TopIndex/*[in]*/) = 0; // [611]
  virtual HRESULT STDMETHODCALLTYPE get_TopIndex(VARIANT* TopIndex/*[out,retval]*/) = 0; // [611]
  virtual HRESULT STDMETHODCALLTYPE get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/) = 0; // [-524]
  virtual HRESULT STDMETHODCALLTYPE set_Value(VARIANT* Value/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* Value/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Column(VARIANT* pvargColumn/*[in,opt]*/, 
                                               VARIANT* pvargIndex/*[in,opt]*/, 
                                               VARIANT* pvargValue/*[out,retval]*/) = 0; // [-529]
  virtual HRESULT STDMETHODCALLTYPE set_Column(VARIANT* pvargColumn/*[in,opt]*/, 
                                               VARIANT* pvargIndex/*[in,opt]*/, 
                                               VARIANT* pvargValue/*[in]*/) = 0; // [-529]
  virtual HRESULT STDMETHODCALLTYPE get_List(VARIANT* pvargIndex/*[in,opt]*/, 
                                             VARIANT* pvargColumn/*[in,opt]*/, 
                                             VARIANT* pvargValue/*[out,retval]*/) = 0; // [-528]
  virtual HRESULT STDMETHODCALLTYPE set_List(VARIANT* pvargIndex/*[in,opt]*/, 
                                             VARIANT* pvargColumn/*[in,opt]*/, 
                                             VARIANT* pvargValue/*[in]*/) = 0; // [-528]
  virtual HRESULT STDMETHODCALLTYPE get_Selected(VARIANT* pvargIndex/*[in]*/, 
                                                 VARIANT_BOOL* pfvb/*[out,retval]*/) = 0; // [-527]
  virtual HRESULT STDMETHODCALLTYPE set_Selected(VARIANT* pvargIndex/*[in]*/, 
                                                 VARIANT_BOOL pfvb/*[in]*/) = 0; // [-527]
  virtual HRESULT STDMETHODCALLTYPE AddItem(VARIANT* pvargItem/*[in,opt]*/= TNoParam(), 
                                            VARIANT* pvargIndex/*[in,opt]*/= TNoParam()) = 0; // [-553]
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0; // [-554]
  virtual HRESULT STDMETHODCALLTYPE RemoveItem(VARIANT* pvargIndex/*[in]*/) = 0; // [-555]
  virtual HRESULT STDMETHODCALLTYPE set_IMEMode(Msforms_97::fmIMEMode IMEMode/*[in]*/) = 0; // [-542]
  virtual HRESULT STDMETHODCALLTYPE get_IMEMode(Msforms_97::fmIMEMode* IMEMode/*[out,retval]*/) = 0; // [-542]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/) = 0; // [-540]
  virtual HRESULT STDMETHODCALLTYPE set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/) = 0; // [10004]
  virtual HRESULT STDMETHODCALLTYPE get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/) = 0; // [10004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msforms_97::OLE_COLOR __fastcall get_BackColor(void)
  {
    Msforms_97::OLE_COLOR BackColor;
    OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
    return BackColor;
  }

  Msforms_97::OLE_COLOR __fastcall get_BorderColor(void)
  {
    Msforms_97::OLE_COLOR BorderColor;
    OLECHECK(this->get_BorderColor((Msforms_97::OLE_COLOR*)&BorderColor));
    return BorderColor;
  }

  Msforms_97::fmBorderStyle __fastcall get_BorderStyle(void)
  {
    Msforms_97::fmBorderStyle BorderStyle;
    OLECHECK(this->get_BorderStyle((Msforms_97::fmBorderStyle*)&BorderStyle));
    return BorderStyle;
  }

  VARIANT_BOOL __fastcall get_BordersSuppress(void)
  {
    VARIANT_BOOL BordersSuppress;
    OLECHECK(this->get_BordersSuppress((VARIANT_BOOL*)&BordersSuppress));
    return BordersSuppress;
  }

  VARIANT __fastcall get_BoundColumn(void)
  {
    VARIANT BoundColumn;
    OLECHECK(this->get_BoundColumn((VARIANT*)&BoundColumn));
    return BoundColumn;
  }

  long __fastcall get_ColumnCount(void)
  {
    long ColumnCount;
    OLECHECK(this->get_ColumnCount((long*)&ColumnCount));
    return ColumnCount;
  }

  VARIANT_BOOL __fastcall get_ColumnHeads(void)
  {
    VARIANT_BOOL ColumnHeads;
    OLECHECK(this->get_ColumnHeads((VARIANT_BOOL*)&ColumnHeads));
    return ColumnHeads;
  }

  BSTR __fastcall get_ColumnWidths(void)
  {
    BSTR ColumnWidths = 0;
    OLECHECK(this->get_ColumnWidths((BSTR*)&ColumnWidths));
    return ColumnWidths;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Enabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Enabled));
    return Enabled;
  }

  IFontDisp** __fastcall get_Font(void)
  {
    IFontDisp** Font;
    OLECHECK(this->get_Font((IFontDisp***)&Font));
    return Font;
  }

  VARIANT_BOOL __fastcall get_FontBold(void)
  {
    VARIANT_BOOL FontBold;
    OLECHECK(this->get_FontBold((VARIANT_BOOL*)&FontBold));
    return FontBold;
  }

  VARIANT_BOOL __fastcall get_FontItalic(void)
  {
    VARIANT_BOOL FontItalic;
    OLECHECK(this->get_FontItalic((VARIANT_BOOL*)&FontItalic));
    return FontItalic;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR FontName = 0;
    OLECHECK(this->get_FontName((BSTR*)&FontName));
    return FontName;
  }

  CURRENCY __fastcall get_FontSize(void)
  {
    CURRENCY FontSize;
    OLECHECK(this->get_FontSize((CURRENCY*)&FontSize));
    return FontSize;
  }

  VARIANT_BOOL __fastcall get_FontStrikethru(void)
  {
    VARIANT_BOOL FontStrikethru;
    OLECHECK(this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru));
    return FontStrikethru;
  }

  VARIANT_BOOL __fastcall get_FontUnderline(void)
  {
    VARIANT_BOOL FontUnderline;
    OLECHECK(this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline));
    return FontUnderline;
  }

  short __fastcall get_FontWeight(void)
  {
    short FontWeight;
    OLECHECK(this->get_FontWeight((short*)&FontWeight));
    return FontWeight;
  }

  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void)
  {
    Msforms_97::OLE_COLOR ForeColor;
    OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
    return ForeColor;
  }

  VARIANT_BOOL __fastcall get_IntegralHeight(void)
  {
    VARIANT_BOOL IntegralHeight;
    OLECHECK(this->get_IntegralHeight((VARIANT_BOOL*)&IntegralHeight));
    return IntegralHeight;
  }

  long __fastcall get_ListCount(void)
  {
    long ListCount;
    OLECHECK(this->get_ListCount((long*)&ListCount));
    return ListCount;
  }

  Msforms_97::PIROWSET __fastcall get_ListCursor(void)
  {
    Msforms_97::PIROWSET ListCursor;
    OLECHECK(this->get_ListCursor((Msforms_97::PIROWSET*)&ListCursor));
    return ListCursor;
  }

  VARIANT __fastcall get_ListIndex(void)
  {
    VARIANT ListIndex;
    OLECHECK(this->get_ListIndex((VARIANT*)&ListIndex));
    return ListIndex;
  }

  Msforms_97::fmListStyle __fastcall get_ListStyle(void)
  {
    Msforms_97::fmListStyle ListStyle;
    OLECHECK(this->get_ListStyle((Msforms_97::fmListStyle*)&ListStyle));
    return ListStyle;
  }

  VARIANT __fastcall get_ListWidth(void)
  {
    VARIANT ListWidth;
    OLECHECK(this->get_ListWidth((VARIANT*)&ListWidth));
    return ListWidth;
  }

  VARIANT_BOOL __fastcall get_Locked(void)
  {
    VARIANT_BOOL Locked;
    OLECHECK(this->get_Locked((VARIANT_BOOL*)&Locked));
    return Locked;
  }

  Msforms_97::fmMatchEntry __fastcall get_MatchEntry(void)
  {
    Msforms_97::fmMatchEntry MatchEntry;
    OLECHECK(this->get_MatchEntry((Msforms_97::fmMatchEntry*)&MatchEntry));
    return MatchEntry;
  }

  IPictureDisp** __fastcall get_MouseIcon(void)
  {
    IPictureDisp** MouseIcon;
    OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
    return MouseIcon;
  }

  Msforms_97::fmMousePointer __fastcall get_MousePointer(void)
  {
    Msforms_97::fmMousePointer MousePointer;
    OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
    return MousePointer;
  }

  Msforms_97::fmMultiSelect __fastcall get_MultiSelect(void)
  {
    Msforms_97::fmMultiSelect MultiSelect;
    OLECHECK(this->get_MultiSelect((Msforms_97::fmMultiSelect*)&MultiSelect));
    return MultiSelect;
  }

  Msforms_97::fmSpecialEffect __fastcall get_SpecialEffect(void)
  {
    Msforms_97::fmSpecialEffect SpecialEffect;
    OLECHECK(this->get_SpecialEffect((Msforms_97::fmSpecialEffect*)&SpecialEffect));
    return SpecialEffect;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR Text = 0;
    OLECHECK(this->get_Text((BSTR*)&Text));
    return Text;
  }

  VARIANT __fastcall get_TextColumn(void)
  {
    VARIANT TextColumn;
    OLECHECK(this->get_TextColumn((VARIANT*)&TextColumn));
    return TextColumn;
  }

  VARIANT __fastcall get_TopIndex(void)
  {
    VARIANT TopIndex;
    OLECHECK(this->get_TopIndex((VARIANT*)&TopIndex));
    return TopIndex;
  }

  VARIANT_BOOL __fastcall get_Valid(void)
  {
    VARIANT_BOOL Valid;
    OLECHECK(this->get_Valid((VARIANT_BOOL*)&Valid));
    return Valid;
  }

  VARIANT __fastcall get_Value(void)
  {
    VARIANT Value;
    OLECHECK(this->get_Value((VARIANT*)&Value));
    return Value;
  }

  VARIANT __fastcall get_Column(VARIANT* pvargColumn/*[in,opt]*/= TNoParam(), 
                                VARIANT* pvargIndex/*[in,opt]*/= TNoParam())
  {
    VARIANT pvargValue;
    OLECHECK(this->get_Column(pvargColumn, pvargIndex, (VARIANT*)&pvargValue));
    return pvargValue;
  }

  VARIANT __fastcall get_List(VARIANT* pvargIndex/*[in,opt]*/= TNoParam(), 
                              VARIANT* pvargColumn/*[in,opt]*/= TNoParam())
  {
    VARIANT pvargValue;
    OLECHECK(this->get_List(pvargIndex, pvargColumn, (VARIANT*)&pvargValue));
    return pvargValue;
  }

  VARIANT_BOOL __fastcall get_Selected(VARIANT* pvargIndex/*[in]*/)
  {
    VARIANT_BOOL pfvb;
    OLECHECK(this->get_Selected(pvargIndex, (VARIANT_BOOL*)&pfvb));
    return pfvb;
  }

  Msforms_97::fmIMEMode __fastcall get_IMEMode(void)
  {
    Msforms_97::fmIMEMode IMEMode;
    OLECHECK(this->get_IMEMode((Msforms_97::fmIMEMode*)&IMEMode));
    return IMEMode;
  }

  Msforms_97::fmDisplayStyle __fastcall get_DisplayStyle(void)
  {
    Msforms_97::fmDisplayStyle DisplayStyle;
    OLECHECK(this->get_DisplayStyle((Msforms_97::fmDisplayStyle*)&DisplayStyle));
    return DisplayStyle;
  }

  Msforms_97::fmTextAlign __fastcall get_TextAlign(void)
  {
    Msforms_97::fmTextAlign TextAlign;
    OLECHECK(this->get_TextAlign((Msforms_97::fmTextAlign*)&TextAlign));
    return TextAlign;
  }


  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::OLE_COLOR BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   Msforms_97::fmBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   VARIANT_BOOL    BordersSuppress = {read = get_BordersSuppress, write = set_BordersSuppress};
  __property   long            ColumnCount = {read = get_ColumnCount, write = set_ColumnCount};
  __property   VARIANT_BOOL    ColumnHeads = {read = get_ColumnHeads, write = set_ColumnHeads};
  __property   BSTR            ColumnWidths = {read = get_ColumnWidths, write = set_ColumnWidths};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   VARIANT_BOOL    FontBold = {read = get_FontBold, write = set_FontBold};
  __property   VARIANT_BOOL    FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   VARIANT_BOOL    FontStrikethru = {read = get_FontStrikethru, write = set_FontStrikethru};
  __property   VARIANT_BOOL    FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   VARIANT_BOOL    IntegralHeight = {read = get_IntegralHeight, write = set_IntegralHeight};
  __property   long            ListCount = {read = get_ListCount};
  __property   Msforms_97::PIROWSET ListCursor = {read = get_ListCursor, write = set_ListCursor};
  __property   Msforms_97::fmListStyle ListStyle = {read = get_ListStyle, write = set_ListStyle};
  __property   VARIANT_BOOL    Locked = {read = get_Locked, write = set_Locked};
  __property   Msforms_97::fmMatchEntry MatchEntry = {read = get_MatchEntry, write = set_MatchEntry};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   Msforms_97::fmMultiSelect MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   Msforms_97::fmSpecialEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Valid = {read = get_Valid};
  __property   Msforms_97::fmIMEMode IMEMode = {read = get_IMEMode, write = set_IMEMode};
  __property   Msforms_97::fmDisplayStyle DisplayStyle = {read = get_DisplayStyle};
  __property   Msforms_97::fmTextAlign TextAlign = {read = get_TextAlign, write = set_TextAlign};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMdcCombo
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8BD21D33-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
interface IMdcCombo  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_AutoSize(VARIANT_BOOL AutoSize/*[in]*/) = 0; // [-500]
  virtual HRESULT STDMETHODCALLTYPE get_AutoSize(VARIANT_BOOL* AutoSize/*[out,retval]*/) = 0; // [-500]
  virtual HRESULT STDMETHODCALLTYPE set_AutoTab(VARIANT_BOOL AutoTab/*[in]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE get_AutoTab(VARIANT_BOOL* AutoTab/*[out,retval]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE set_AutoWordSelect(VARIANT_BOOL AutoWordSelect/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_AutoWordSelect(VARIANT_BOOL* AutoWordSelect/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/) = 0; // [-502]
  virtual HRESULT STDMETHODCALLTYPE get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/) = 0; // [-502]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/) = 0; // [-503]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/) = 0; // [-503]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/) = 0; // [-504]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/) = 0; // [-504]
  virtual HRESULT STDMETHODCALLTYPE set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_BoundColumn(VARIANT* BoundColumn/*[in]*/) = 0; // [501]
  virtual HRESULT STDMETHODCALLTYPE get_BoundColumn(VARIANT* BoundColumn/*[out,retval]*/) = 0; // [501]
  virtual HRESULT STDMETHODCALLTYPE get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnCount(long ColumnCount/*[in]*/) = 0; // [601]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnCount(long* ColumnCount/*[out,retval]*/) = 0; // [601]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnHeads(VARIANT_BOOL ColumnHeads/*[in]*/) = 0; // [602]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnHeads(VARIANT_BOOL* ColumnHeads/*[out,retval]*/) = 0; // [602]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnWidths(BSTR ColumnWidths/*[in]*/) = 0; // [603]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnWidths(BSTR* ColumnWidths/*[out,retval]*/) = 0; // [603]
  virtual HRESULT STDMETHODCALLTYPE get_CurTargetX(long* CurTargetX/*[out,retval]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE get_CurTargetY(long* CurTargetY/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_CurX(long CurX/*[in]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE get_CurX(long* CurX/*[out,retval]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE set_DropButtonStyle(Msforms_97::fmDropButtonStyle DropButtonStyle/*[in]*/) = 0; // [305]
  virtual HRESULT STDMETHODCALLTYPE get_DropButtonStyle(Msforms_97::fmDropButtonStyle* DropButtonStyle/*[out,retval]*/) = 0; // [305]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Enabled/*[in]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE set__Font_Reserved(IFontDisp** Param1/*[in]*/) = 0; // [2147483135]
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp** Font/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp*** Font/*[out,retval]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(VARIANT_BOOL FontBold/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR FontName/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* FontName/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(CURRENCY FontSize/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(CURRENCY* FontSize/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_FontWeight(short FontWeight/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_FontWeight(short* FontWeight/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE set_HideSelection(VARIANT_BOOL HideSelection/*[in]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE get_HideSelection(VARIANT_BOOL* HideSelection/*[out,retval]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE get_LineCount(long* LineCount/*[out,retval]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE get_ListCount(long* ListCount/*[out,retval]*/) = 0; // [-531]
  virtual HRESULT STDMETHODCALLTYPE set_ListCursor(Msforms_97::PIROWSET ListCursor/*[in]*/) = 0; // [403]
  virtual HRESULT STDMETHODCALLTYPE get_ListCursor(Msforms_97::PIROWSET* ListCursor/*[out,retval]*/) = 0; // [403]
  virtual HRESULT STDMETHODCALLTYPE set_ListIndex(VARIANT* ListIndex/*[in]*/) = 0; // [-526]
  virtual HRESULT STDMETHODCALLTYPE get_ListIndex(VARIANT* ListIndex/*[out,retval]*/) = 0; // [-526]
  virtual HRESULT STDMETHODCALLTYPE set_ListRows(long ListRows/*[in]*/) = 0; // [605]
  virtual HRESULT STDMETHODCALLTYPE get_ListRows(long* ListRows/*[out,retval]*/) = 0; // [605]
  virtual HRESULT STDMETHODCALLTYPE set_ListStyle(Msforms_97::fmListStyle ListStyle/*[in]*/) = 0; // [307]
  virtual HRESULT STDMETHODCALLTYPE get_ListStyle(Msforms_97::fmListStyle* ListStyle/*[out,retval]*/) = 0; // [307]
  virtual HRESULT STDMETHODCALLTYPE set_ListWidth(VARIANT* ListWidth/*[in]*/) = 0; // [606]
  virtual HRESULT STDMETHODCALLTYPE get_ListWidth(VARIANT* ListWidth/*[out,retval]*/) = 0; // [606]
  virtual HRESULT STDMETHODCALLTYPE set_Locked(VARIANT_BOOL Locked/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_MatchEntry(Msforms_97::fmMatchEntry MatchEntry/*[in]*/) = 0; // [504]
  virtual HRESULT STDMETHODCALLTYPE get_MatchEntry(Msforms_97::fmMatchEntry* MatchEntry/*[out,retval]*/) = 0; // [504]
  virtual HRESULT STDMETHODCALLTYPE get_MatchFound(VARIANT_BOOL* MatchFound/*[out,retval]*/) = 0; // [505]
  virtual HRESULT STDMETHODCALLTYPE set_MatchRequired(VARIANT_BOOL MatchRequired/*[in]*/) = 0; // [503]
  virtual HRESULT STDMETHODCALLTYPE get_MatchRequired(VARIANT_BOOL* MatchRequired/*[out,retval]*/) = 0; // [503]
  virtual HRESULT STDMETHODCALLTYPE set_MaxLength(long MaxLength/*[in]*/) = 0; // [-533]
  virtual HRESULT STDMETHODCALLTYPE get_MaxLength(long* MaxLength/*[out,retval]*/) = 0; // [-533]
  virtual HRESULT STDMETHODCALLTYPE set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE set_SelectionMargin(VARIANT_BOOL SelectionMargin/*[in]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE get_SelectionMargin(VARIANT_BOOL* SelectionMargin/*[out,retval]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE set_SelLength(long SelLength/*[in]*/) = 0; // [-548]
  virtual HRESULT STDMETHODCALLTYPE get_SelLength(long* SelLength/*[out,retval]*/) = 0; // [-548]
  virtual HRESULT STDMETHODCALLTYPE set_SelStart(long SelStart/*[in]*/) = 0; // [-547]
  virtual HRESULT STDMETHODCALLTYPE get_SelStart(long* SelStart/*[out,retval]*/) = 0; // [-547]
  virtual HRESULT STDMETHODCALLTYPE set_SelText(BSTR SelText/*[in]*/) = 0; // [-546]
  virtual HRESULT STDMETHODCALLTYPE get_SelText(BSTR* SelText/*[out,retval]*/) = 0; // [-546]
  virtual HRESULT STDMETHODCALLTYPE set_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen/*[in]*/) = 0; // [304]
  virtual HRESULT STDMETHODCALLTYPE get_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen* ShowDropButtonWhen/*[out,retval]*/) = 0; // [304]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_Style(Msforms_97::fmStyle Style/*[in]*/) = 0; // [308]
  virtual HRESULT STDMETHODCALLTYPE get_Style(Msforms_97::fmStyle* Style/*[out,retval]*/) = 0; // [308]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR Text/*[in]*/) = 0; // [-517]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* Text/*[out,retval]*/) = 0; // [-517]
  virtual HRESULT STDMETHODCALLTYPE set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/) = 0; // [10004]
  virtual HRESULT STDMETHODCALLTYPE get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/) = 0; // [10004]
  virtual HRESULT STDMETHODCALLTYPE set_TextColumn(VARIANT* TextColumn/*[in]*/) = 0; // [502]
  virtual HRESULT STDMETHODCALLTYPE get_TextColumn(VARIANT* TextColumn/*[out,retval]*/) = 0; // [502]
  virtual HRESULT STDMETHODCALLTYPE get_TextLength(long* TextLength/*[out,retval]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE set_TopIndex(VARIANT* TopIndex/*[in]*/) = 0; // [611]
  virtual HRESULT STDMETHODCALLTYPE get_TopIndex(VARIANT* TopIndex/*[out,retval]*/) = 0; // [611]
  virtual HRESULT STDMETHODCALLTYPE get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/) = 0; // [-524]
  virtual HRESULT STDMETHODCALLTYPE set_Value(VARIANT* Value/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* Value/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Column(VARIANT* pvargColumn/*[in,opt]*/, 
                                               VARIANT* pvargIndex/*[in,opt]*/, 
                                               VARIANT* pvargValue/*[out,retval]*/) = 0; // [-529]
  virtual HRESULT STDMETHODCALLTYPE set_Column(VARIANT* pvargColumn/*[in,opt]*/, 
                                               VARIANT* pvargIndex/*[in,opt]*/, 
                                               VARIANT* pvargValue/*[in]*/) = 0; // [-529]
  virtual HRESULT STDMETHODCALLTYPE get_List(VARIANT* pvargIndex/*[in,opt]*/, 
                                             VARIANT* pvargColumn/*[in,opt]*/, 
                                             VARIANT* pvargValue/*[out,retval]*/) = 0; // [-528]
  virtual HRESULT STDMETHODCALLTYPE set_List(VARIANT* pvargIndex/*[in,opt]*/, 
                                             VARIANT* pvargColumn/*[in,opt]*/, 
                                             VARIANT* pvargValue/*[in]*/) = 0; // [-528]
  virtual HRESULT STDMETHODCALLTYPE AddItem(VARIANT* pvargItem/*[in,opt]*/= TNoParam(), 
                                            VARIANT* pvargIndex/*[in,opt]*/= TNoParam()) = 0; // [-553]
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0; // [-554]
  virtual HRESULT STDMETHODCALLTYPE DropDown(void) = 0; // [1001]
  virtual HRESULT STDMETHODCALLTYPE RemoveItem(VARIANT* pvargIndex/*[in]*/) = 0; // [-555]
  virtual HRESULT STDMETHODCALLTYPE Copy(void) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE Cut(void) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE Paste(void) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE set_IMEMode(Msforms_97::fmIMEMode IMEMode/*[in]*/) = 0; // [-542]
  virtual HRESULT STDMETHODCALLTYPE get_IMEMode(Msforms_97::fmIMEMode* IMEMode/*[out,retval]*/) = 0; // [-542]
  virtual HRESULT STDMETHODCALLTYPE set_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior EnterFieldBehavior/*[in]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE get_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior* EnterFieldBehavior/*[out,retval]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE set_DragBehavior(Msforms_97::fmDragBehavior DragBehavior/*[in]*/) = 0; // [225]
  virtual HRESULT STDMETHODCALLTYPE get_DragBehavior(Msforms_97::fmDragBehavior* DragBehavior/*[out,retval]*/) = 0; // [225]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/) = 0; // [-540]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_AutoSize(void)
  {
    VARIANT_BOOL AutoSize;
    OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&AutoSize));
    return AutoSize;
  }

  VARIANT_BOOL __fastcall get_AutoTab(void)
  {
    VARIANT_BOOL AutoTab;
    OLECHECK(this->get_AutoTab((VARIANT_BOOL*)&AutoTab));
    return AutoTab;
  }

  VARIANT_BOOL __fastcall get_AutoWordSelect(void)
  {
    VARIANT_BOOL AutoWordSelect;
    OLECHECK(this->get_AutoWordSelect((VARIANT_BOOL*)&AutoWordSelect));
    return AutoWordSelect;
  }

  Msforms_97::OLE_COLOR __fastcall get_BackColor(void)
  {
    Msforms_97::OLE_COLOR BackColor;
    OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
    return BackColor;
  }

  Msforms_97::fmBackStyle __fastcall get_BackStyle(void)
  {
    Msforms_97::fmBackStyle BackStyle;
    OLECHECK(this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle));
    return BackStyle;
  }

  Msforms_97::OLE_COLOR __fastcall get_BorderColor(void)
  {
    Msforms_97::OLE_COLOR BorderColor;
    OLECHECK(this->get_BorderColor((Msforms_97::OLE_COLOR*)&BorderColor));
    return BorderColor;
  }

  Msforms_97::fmBorderStyle __fastcall get_BorderStyle(void)
  {
    Msforms_97::fmBorderStyle BorderStyle;
    OLECHECK(this->get_BorderStyle((Msforms_97::fmBorderStyle*)&BorderStyle));
    return BorderStyle;
  }

  VARIANT_BOOL __fastcall get_BordersSuppress(void)
  {
    VARIANT_BOOL BordersSuppress;
    OLECHECK(this->get_BordersSuppress((VARIANT_BOOL*)&BordersSuppress));
    return BordersSuppress;
  }

  VARIANT __fastcall get_BoundColumn(void)
  {
    VARIANT BoundColumn;
    OLECHECK(this->get_BoundColumn((VARIANT*)&BoundColumn));
    return BoundColumn;
  }

  VARIANT_BOOL __fastcall get_CanPaste(void)
  {
    VARIANT_BOOL CanPaste;
    OLECHECK(this->get_CanPaste((VARIANT_BOOL*)&CanPaste));
    return CanPaste;
  }

  long __fastcall get_ColumnCount(void)
  {
    long ColumnCount;
    OLECHECK(this->get_ColumnCount((long*)&ColumnCount));
    return ColumnCount;
  }

  VARIANT_BOOL __fastcall get_ColumnHeads(void)
  {
    VARIANT_BOOL ColumnHeads;
    OLECHECK(this->get_ColumnHeads((VARIANT_BOOL*)&ColumnHeads));
    return ColumnHeads;
  }

  BSTR __fastcall get_ColumnWidths(void)
  {
    BSTR ColumnWidths = 0;
    OLECHECK(this->get_ColumnWidths((BSTR*)&ColumnWidths));
    return ColumnWidths;
  }

  long __fastcall get_CurTargetX(void)
  {
    long CurTargetX;
    OLECHECK(this->get_CurTargetX((long*)&CurTargetX));
    return CurTargetX;
  }

  long __fastcall get_CurTargetY(void)
  {
    long CurTargetY;
    OLECHECK(this->get_CurTargetY((long*)&CurTargetY));
    return CurTargetY;
  }

  long __fastcall get_CurX(void)
  {
    long CurX;
    OLECHECK(this->get_CurX((long*)&CurX));
    return CurX;
  }

  Msforms_97::fmDropButtonStyle __fastcall get_DropButtonStyle(void)
  {
    Msforms_97::fmDropButtonStyle DropButtonStyle;
    OLECHECK(this->get_DropButtonStyle((Msforms_97::fmDropButtonStyle*)&DropButtonStyle));
    return DropButtonStyle;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Enabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Enabled));
    return Enabled;
  }

  IFontDisp** __fastcall get_Font(void)
  {
    IFontDisp** Font;
    OLECHECK(this->get_Font((IFontDisp***)&Font));
    return Font;
  }

  VARIANT_BOOL __fastcall get_FontBold(void)
  {
    VARIANT_BOOL FontBold;
    OLECHECK(this->get_FontBold((VARIANT_BOOL*)&FontBold));
    return FontBold;
  }

  VARIANT_BOOL __fastcall get_FontItalic(void)
  {
    VARIANT_BOOL FontItalic;
    OLECHECK(this->get_FontItalic((VARIANT_BOOL*)&FontItalic));
    return FontItalic;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR FontName = 0;
    OLECHECK(this->get_FontName((BSTR*)&FontName));
    return FontName;
  }

  CURRENCY __fastcall get_FontSize(void)
  {
    CURRENCY FontSize;
    OLECHECK(this->get_FontSize((CURRENCY*)&FontSize));
    return FontSize;
  }

  VARIANT_BOOL __fastcall get_FontStrikethru(void)
  {
    VARIANT_BOOL FontStrikethru;
    OLECHECK(this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru));
    return FontStrikethru;
  }

  VARIANT_BOOL __fastcall get_FontUnderline(void)
  {
    VARIANT_BOOL FontUnderline;
    OLECHECK(this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline));
    return FontUnderline;
  }

  short __fastcall get_FontWeight(void)
  {
    short FontWeight;
    OLECHECK(this->get_FontWeight((short*)&FontWeight));
    return FontWeight;
  }

  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void)
  {
    Msforms_97::OLE_COLOR ForeColor;
    OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
    return ForeColor;
  }

  VARIANT_BOOL __fastcall get_HideSelection(void)
  {
    VARIANT_BOOL HideSelection;
    OLECHECK(this->get_HideSelection((VARIANT_BOOL*)&HideSelection));
    return HideSelection;
  }

  long __fastcall get_LineCount(void)
  {
    long LineCount;
    OLECHECK(this->get_LineCount((long*)&LineCount));
    return LineCount;
  }

  long __fastcall get_ListCount(void)
  {
    long ListCount;
    OLECHECK(this->get_ListCount((long*)&ListCount));
    return ListCount;
  }

  Msforms_97::PIROWSET __fastcall get_ListCursor(void)
  {
    Msforms_97::PIROWSET ListCursor;
    OLECHECK(this->get_ListCursor((Msforms_97::PIROWSET*)&ListCursor));
    return ListCursor;
  }

  VARIANT __fastcall get_ListIndex(void)
  {
    VARIANT ListIndex;
    OLECHECK(this->get_ListIndex((VARIANT*)&ListIndex));
    return ListIndex;
  }

  long __fastcall get_ListRows(void)
  {
    long ListRows;
    OLECHECK(this->get_ListRows((long*)&ListRows));
    return ListRows;
  }

  Msforms_97::fmListStyle __fastcall get_ListStyle(void)
  {
    Msforms_97::fmListStyle ListStyle;
    OLECHECK(this->get_ListStyle((Msforms_97::fmListStyle*)&ListStyle));
    return ListStyle;
  }

  VARIANT __fastcall get_ListWidth(void)
  {
    VARIANT ListWidth;
    OLECHECK(this->get_ListWidth((VARIANT*)&ListWidth));
    return ListWidth;
  }

  VARIANT_BOOL __fastcall get_Locked(void)
  {
    VARIANT_BOOL Locked;
    OLECHECK(this->get_Locked((VARIANT_BOOL*)&Locked));
    return Locked;
  }

  Msforms_97::fmMatchEntry __fastcall get_MatchEntry(void)
  {
    Msforms_97::fmMatchEntry MatchEntry;
    OLECHECK(this->get_MatchEntry((Msforms_97::fmMatchEntry*)&MatchEntry));
    return MatchEntry;
  }

  VARIANT_BOOL __fastcall get_MatchFound(void)
  {
    VARIANT_BOOL MatchFound;
    OLECHECK(this->get_MatchFound((VARIANT_BOOL*)&MatchFound));
    return MatchFound;
  }

  VARIANT_BOOL __fastcall get_MatchRequired(void)
  {
    VARIANT_BOOL MatchRequired;
    OLECHECK(this->get_MatchRequired((VARIANT_BOOL*)&MatchRequired));
    return MatchRequired;
  }

  long __fastcall get_MaxLength(void)
  {
    long MaxLength;
    OLECHECK(this->get_MaxLength((long*)&MaxLength));
    return MaxLength;
  }

  IPictureDisp** __fastcall get_MouseIcon(void)
  {
    IPictureDisp** MouseIcon;
    OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
    return MouseIcon;
  }

  Msforms_97::fmMousePointer __fastcall get_MousePointer(void)
  {
    Msforms_97::fmMousePointer MousePointer;
    OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
    return MousePointer;
  }

  VARIANT_BOOL __fastcall get_SelectionMargin(void)
  {
    VARIANT_BOOL SelectionMargin;
    OLECHECK(this->get_SelectionMargin((VARIANT_BOOL*)&SelectionMargin));
    return SelectionMargin;
  }

  long __fastcall get_SelLength(void)
  {
    long SelLength;
    OLECHECK(this->get_SelLength((long*)&SelLength));
    return SelLength;
  }

  long __fastcall get_SelStart(void)
  {
    long SelStart;
    OLECHECK(this->get_SelStart((long*)&SelStart));
    return SelStart;
  }

  BSTR __fastcall get_SelText(void)
  {
    BSTR SelText = 0;
    OLECHECK(this->get_SelText((BSTR*)&SelText));
    return SelText;
  }

  Msforms_97::fmShowDropButtonWhen __fastcall get_ShowDropButtonWhen(void)
  {
    Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen;
    OLECHECK(this->get_ShowDropButtonWhen((Msforms_97::fmShowDropButtonWhen*)&ShowDropButtonWhen));
    return ShowDropButtonWhen;
  }

  Msforms_97::fmSpecialEffect __fastcall get_SpecialEffect(void)
  {
    Msforms_97::fmSpecialEffect SpecialEffect;
    OLECHECK(this->get_SpecialEffect((Msforms_97::fmSpecialEffect*)&SpecialEffect));
    return SpecialEffect;
  }

  Msforms_97::fmStyle __fastcall get_Style(void)
  {
    Msforms_97::fmStyle Style;
    OLECHECK(this->get_Style((Msforms_97::fmStyle*)&Style));
    return Style;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR Text = 0;
    OLECHECK(this->get_Text((BSTR*)&Text));
    return Text;
  }

  Msforms_97::fmTextAlign __fastcall get_TextAlign(void)
  {
    Msforms_97::fmTextAlign TextAlign;
    OLECHECK(this->get_TextAlign((Msforms_97::fmTextAlign*)&TextAlign));
    return TextAlign;
  }

  VARIANT __fastcall get_TextColumn(void)
  {
    VARIANT TextColumn;
    OLECHECK(this->get_TextColumn((VARIANT*)&TextColumn));
    return TextColumn;
  }

  long __fastcall get_TextLength(void)
  {
    long TextLength;
    OLECHECK(this->get_TextLength((long*)&TextLength));
    return TextLength;
  }

  VARIANT __fastcall get_TopIndex(void)
  {
    VARIANT TopIndex;
    OLECHECK(this->get_TopIndex((VARIANT*)&TopIndex));
    return TopIndex;
  }

  VARIANT_BOOL __fastcall get_Valid(void)
  {
    VARIANT_BOOL Valid;
    OLECHECK(this->get_Valid((VARIANT_BOOL*)&Valid));
    return Valid;
  }

  VARIANT __fastcall get_Value(void)
  {
    VARIANT Value;
    OLECHECK(this->get_Value((VARIANT*)&Value));
    return Value;
  }

  VARIANT __fastcall get_Column(VARIANT* pvargColumn/*[in,opt]*/= TNoParam(), 
                                VARIANT* pvargIndex/*[in,opt]*/= TNoParam())
  {
    VARIANT pvargValue;
    OLECHECK(this->get_Column(pvargColumn, pvargIndex, (VARIANT*)&pvargValue));
    return pvargValue;
  }

  VARIANT __fastcall get_List(VARIANT* pvargIndex/*[in,opt]*/= TNoParam(), 
                              VARIANT* pvargColumn/*[in,opt]*/= TNoParam())
  {
    VARIANT pvargValue;
    OLECHECK(this->get_List(pvargIndex, pvargColumn, (VARIANT*)&pvargValue));
    return pvargValue;
  }

  Msforms_97::fmIMEMode __fastcall get_IMEMode(void)
  {
    Msforms_97::fmIMEMode IMEMode;
    OLECHECK(this->get_IMEMode((Msforms_97::fmIMEMode*)&IMEMode));
    return IMEMode;
  }

  Msforms_97::fmEnterFieldBehavior __fastcall get_EnterFieldBehavior(void)
  {
    Msforms_97::fmEnterFieldBehavior EnterFieldBehavior;
    OLECHECK(this->get_EnterFieldBehavior((Msforms_97::fmEnterFieldBehavior*)&EnterFieldBehavior));
    return EnterFieldBehavior;
  }

  Msforms_97::fmDragBehavior __fastcall get_DragBehavior(void)
  {
    Msforms_97::fmDragBehavior DragBehavior;
    OLECHECK(this->get_DragBehavior((Msforms_97::fmDragBehavior*)&DragBehavior));
    return DragBehavior;
  }

  Msforms_97::fmDisplayStyle __fastcall get_DisplayStyle(void)
  {
    Msforms_97::fmDisplayStyle DisplayStyle;
    OLECHECK(this->get_DisplayStyle((Msforms_97::fmDisplayStyle*)&DisplayStyle));
    return DisplayStyle;
  }


  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   VARIANT_BOOL    AutoTab = {read = get_AutoTab, write = set_AutoTab};
  __property   VARIANT_BOOL    AutoWordSelect = {read = get_AutoWordSelect, write = set_AutoWordSelect};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   Msforms_97::OLE_COLOR BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   Msforms_97::fmBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   VARIANT_BOOL    BordersSuppress = {read = get_BordersSuppress, write = set_BordersSuppress};
  __property   VARIANT_BOOL    CanPaste = {read = get_CanPaste};
  __property   long            ColumnCount = {read = get_ColumnCount, write = set_ColumnCount};
  __property   VARIANT_BOOL    ColumnHeads = {read = get_ColumnHeads, write = set_ColumnHeads};
  __property   BSTR            ColumnWidths = {read = get_ColumnWidths, write = set_ColumnWidths};
  __property   long            CurTargetX = {read = get_CurTargetX};
  __property   long            CurTargetY = {read = get_CurTargetY};
  __property   long            CurX = {read = get_CurX, write = set_CurX};
  __property   Msforms_97::fmDropButtonStyle DropButtonStyle = {read = get_DropButtonStyle, write = set_DropButtonStyle};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   VARIANT_BOOL    FontBold = {read = get_FontBold, write = set_FontBold};
  __property   VARIANT_BOOL    FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   VARIANT_BOOL    FontStrikethru = {read = get_FontStrikethru, write = set_FontStrikethru};
  __property   VARIANT_BOOL    FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   VARIANT_BOOL    HideSelection = {read = get_HideSelection, write = set_HideSelection};
  __property   long            LineCount = {read = get_LineCount};
  __property   long            ListCount = {read = get_ListCount};
  __property   Msforms_97::PIROWSET ListCursor = {read = get_ListCursor, write = set_ListCursor};
  __property   long            ListRows = {read = get_ListRows, write = set_ListRows};
  __property   Msforms_97::fmListStyle ListStyle = {read = get_ListStyle, write = set_ListStyle};
  __property   VARIANT_BOOL    Locked = {read = get_Locked, write = set_Locked};
  __property   Msforms_97::fmMatchEntry MatchEntry = {read = get_MatchEntry, write = set_MatchEntry};
  __property   VARIANT_BOOL    MatchFound = {read = get_MatchFound};
  __property   VARIANT_BOOL    MatchRequired = {read = get_MatchRequired, write = set_MatchRequired};
  __property   long            MaxLength = {read = get_MaxLength, write = set_MaxLength};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   VARIANT_BOOL    SelectionMargin = {read = get_SelectionMargin, write = set_SelectionMargin};
  __property   long            SelLength = {read = get_SelLength, write = set_SelLength};
  __property   long            SelStart = {read = get_SelStart, write = set_SelStart};
  __property   BSTR            SelText = {read = get_SelText, write = set_SelText};
  __property   Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen = {read = get_ShowDropButtonWhen, write = set_ShowDropButtonWhen};
  __property   Msforms_97::fmSpecialEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   Msforms_97::fmStyle Style = {read = get_Style, write = set_Style};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   Msforms_97::fmTextAlign TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   long            TextLength = {read = get_TextLength};
  __property   VARIANT_BOOL    Valid = {read = get_Valid};
  __property   Msforms_97::fmIMEMode IMEMode = {read = get_IMEMode, write = set_IMEMode};
  __property   Msforms_97::fmEnterFieldBehavior EnterFieldBehavior = {read = get_EnterFieldBehavior, write = set_EnterFieldBehavior};
  __property   Msforms_97::fmDragBehavior DragBehavior = {read = get_DragBehavior, write = set_DragBehavior};
  __property   Msforms_97::fmDisplayStyle DisplayStyle = {read = get_DisplayStyle};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMdcCheckBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8BD21D43-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
interface IMdcCheckBox  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Accelerator(BSTR Accelerator/*[in]*/) = 0; // [-543]
  virtual HRESULT STDMETHODCALLTYPE get_Accelerator(BSTR* Accelerator/*[out,retval]*/) = 0; // [-543]
  virtual HRESULT STDMETHODCALLTYPE set_Alignment(Msforms_97::fmAlignment Alignment/*[in]*/) = 0; // [710]
  virtual HRESULT STDMETHODCALLTYPE get_Alignment(Msforms_97::fmAlignment* Alignment/*[out,retval]*/) = 0; // [710]
  virtual HRESULT STDMETHODCALLTYPE set_AutoSize(VARIANT_BOOL AutoSize/*[in]*/) = 0; // [-500]
  virtual HRESULT STDMETHODCALLTYPE get_AutoSize(VARIANT_BOOL* AutoSize/*[out,retval]*/) = 0; // [-500]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/) = 0; // [-502]
  virtual HRESULT STDMETHODCALLTYPE get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/) = 0; // [-502]
  virtual HRESULT STDMETHODCALLTYPE set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Caption/*[in]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Enabled/*[in]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE set__Font_Reserved(IFontDisp** Param1/*[in]*/) = 0; // [2147483135]
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp** Font/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp*** Font/*[out,retval]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(VARIANT_BOOL FontBold/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR FontName/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* FontName/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(CURRENCY FontSize/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(CURRENCY* FontSize/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_FontWeight(short FontWeight/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_FontWeight(short* FontWeight/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE set_Locked(VARIANT_BOOL Locked/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE set_MultiSelect(Msforms_97::fmMultiSelect MultiSelect/*[in]*/) = 0; // [-532]
  virtual HRESULT STDMETHODCALLTYPE get_MultiSelect(Msforms_97::fmMultiSelect* MultiSelect/*[out,retval]*/) = 0; // [-532]
  virtual HRESULT STDMETHODCALLTYPE set_Picture(IPictureDisp** Picture/*[in]*/) = 0; // [-523]
  virtual HRESULT STDMETHODCALLTYPE _set_Picture(IPictureDisp** Picture/*[in]*/) = 0; // [-523]
  virtual HRESULT STDMETHODCALLTYPE get_Picture(IPictureDisp*** Picture/*[out,retval]*/) = 0; // [-523]
  virtual HRESULT STDMETHODCALLTYPE set_PicturePosition(Msforms_97::fmPicturePosition PicPos/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_PicturePosition(Msforms_97::fmPicturePosition* PicPos/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(Msforms_97::fmButtonEffect SpecialEffect/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(Msforms_97::fmButtonEffect* SpecialEffect/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_TripleState(VARIANT_BOOL TripleState/*[in]*/) = 0; // [700]
  virtual HRESULT STDMETHODCALLTYPE get_TripleState(VARIANT_BOOL* TripleState/*[out,retval]*/) = 0; // [700]
  virtual HRESULT STDMETHODCALLTYPE get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/) = 0; // [-524]
  virtual HRESULT STDMETHODCALLTYPE set_Value(VARIANT* Value/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* Value/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/) = 0; // [-536]
  virtual HRESULT STDMETHODCALLTYPE get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/) = 0; // [-536]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/) = 0; // [-540]
  virtual HRESULT STDMETHODCALLTYPE set_GroupName(BSTR GroupName/*[in]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE get_GroupName(BSTR* GroupName/*[out,retval]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/) = 0; // [10004]
  virtual HRESULT STDMETHODCALLTYPE get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/) = 0; // [10004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Accelerator(void)
  {
    BSTR Accelerator = 0;
    OLECHECK(this->get_Accelerator((BSTR*)&Accelerator));
    return Accelerator;
  }

  Msforms_97::fmAlignment __fastcall get_Alignment(void)
  {
    Msforms_97::fmAlignment Alignment;
    OLECHECK(this->get_Alignment((Msforms_97::fmAlignment*)&Alignment));
    return Alignment;
  }

  VARIANT_BOOL __fastcall get_AutoSize(void)
  {
    VARIANT_BOOL AutoSize;
    OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&AutoSize));
    return AutoSize;
  }

  Msforms_97::OLE_COLOR __fastcall get_BackColor(void)
  {
    Msforms_97::OLE_COLOR BackColor;
    OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
    return BackColor;
  }

  Msforms_97::fmBackStyle __fastcall get_BackStyle(void)
  {
    Msforms_97::fmBackStyle BackStyle;
    OLECHECK(this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle));
    return BackStyle;
  }

  VARIANT_BOOL __fastcall get_BordersSuppress(void)
  {
    VARIANT_BOOL BordersSuppress;
    OLECHECK(this->get_BordersSuppress((VARIANT_BOOL*)&BordersSuppress));
    return BordersSuppress;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Enabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Enabled));
    return Enabled;
  }

  IFontDisp** __fastcall get_Font(void)
  {
    IFontDisp** Font;
    OLECHECK(this->get_Font((IFontDisp***)&Font));
    return Font;
  }

  VARIANT_BOOL __fastcall get_FontBold(void)
  {
    VARIANT_BOOL FontBold;
    OLECHECK(this->get_FontBold((VARIANT_BOOL*)&FontBold));
    return FontBold;
  }

  VARIANT_BOOL __fastcall get_FontItalic(void)
  {
    VARIANT_BOOL FontItalic;
    OLECHECK(this->get_FontItalic((VARIANT_BOOL*)&FontItalic));
    return FontItalic;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR FontName = 0;
    OLECHECK(this->get_FontName((BSTR*)&FontName));
    return FontName;
  }

  CURRENCY __fastcall get_FontSize(void)
  {
    CURRENCY FontSize;
    OLECHECK(this->get_FontSize((CURRENCY*)&FontSize));
    return FontSize;
  }

  VARIANT_BOOL __fastcall get_FontStrikethru(void)
  {
    VARIANT_BOOL FontStrikethru;
    OLECHECK(this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru));
    return FontStrikethru;
  }

  VARIANT_BOOL __fastcall get_FontUnderline(void)
  {
    VARIANT_BOOL FontUnderline;
    OLECHECK(this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline));
    return FontUnderline;
  }

  short __fastcall get_FontWeight(void)
  {
    short FontWeight;
    OLECHECK(this->get_FontWeight((short*)&FontWeight));
    return FontWeight;
  }

  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void)
  {
    Msforms_97::OLE_COLOR ForeColor;
    OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
    return ForeColor;
  }

  VARIANT_BOOL __fastcall get_Locked(void)
  {
    VARIANT_BOOL Locked;
    OLECHECK(this->get_Locked((VARIANT_BOOL*)&Locked));
    return Locked;
  }

  IPictureDisp** __fastcall get_MouseIcon(void)
  {
    IPictureDisp** MouseIcon;
    OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
    return MouseIcon;
  }

  Msforms_97::fmMousePointer __fastcall get_MousePointer(void)
  {
    Msforms_97::fmMousePointer MousePointer;
    OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
    return MousePointer;
  }

  Msforms_97::fmMultiSelect __fastcall get_MultiSelect(void)
  {
    Msforms_97::fmMultiSelect MultiSelect;
    OLECHECK(this->get_MultiSelect((Msforms_97::fmMultiSelect*)&MultiSelect));
    return MultiSelect;
  }

  IPictureDisp** __fastcall get_Picture(void)
  {
    IPictureDisp** Picture;
    OLECHECK(this->get_Picture((IPictureDisp***)&Picture));
    return Picture;
  }

  Msforms_97::fmPicturePosition __fastcall get_PicturePosition(void)
  {
    Msforms_97::fmPicturePosition PicPos;
    OLECHECK(this->get_PicturePosition((Msforms_97::fmPicturePosition*)&PicPos));
    return PicPos;
  }

  Msforms_97::fmButtonEffect __fastcall get_SpecialEffect(void)
  {
    Msforms_97::fmButtonEffect SpecialEffect;
    OLECHECK(this->get_SpecialEffect((Msforms_97::fmButtonEffect*)&SpecialEffect));
    return SpecialEffect;
  }

  VARIANT_BOOL __fastcall get_TripleState(void)
  {
    VARIANT_BOOL TripleState;
    OLECHECK(this->get_TripleState((VARIANT_BOOL*)&TripleState));
    return TripleState;
  }

  VARIANT_BOOL __fastcall get_Valid(void)
  {
    VARIANT_BOOL Valid;
    OLECHECK(this->get_Valid((VARIANT_BOOL*)&Valid));
    return Valid;
  }

  VARIANT __fastcall get_Value(void)
  {
    VARIANT Value;
    OLECHECK(this->get_Value((VARIANT*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_WordWrap(void)
  {
    VARIANT_BOOL WordWrap;
    OLECHECK(this->get_WordWrap((VARIANT_BOOL*)&WordWrap));
    return WordWrap;
  }

  Msforms_97::fmDisplayStyle __fastcall get_DisplayStyle(void)
  {
    Msforms_97::fmDisplayStyle DisplayStyle;
    OLECHECK(this->get_DisplayStyle((Msforms_97::fmDisplayStyle*)&DisplayStyle));
    return DisplayStyle;
  }

  BSTR __fastcall get_GroupName(void)
  {
    BSTR GroupName = 0;
    OLECHECK(this->get_GroupName((BSTR*)&GroupName));
    return GroupName;
  }

  Msforms_97::fmTextAlign __fastcall get_TextAlign(void)
  {
    Msforms_97::fmTextAlign TextAlign;
    OLECHECK(this->get_TextAlign((Msforms_97::fmTextAlign*)&TextAlign));
    return TextAlign;
  }


  __property   BSTR            Accelerator = {read = get_Accelerator, write = set_Accelerator};
  __property   Msforms_97::fmAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   VARIANT_BOOL    BordersSuppress = {read = get_BordersSuppress, write = set_BordersSuppress};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   VARIANT_BOOL    FontBold = {read = get_FontBold, write = set_FontBold};
  __property   VARIANT_BOOL    FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   VARIANT_BOOL    FontStrikethru = {read = get_FontStrikethru, write = set_FontStrikethru};
  __property   VARIANT_BOOL    FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   VARIANT_BOOL    Locked = {read = get_Locked, write = set_Locked};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   Msforms_97::fmMultiSelect MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   IPictureDisp**  Picture = {read = get_Picture, write = set_Picture};
  __property   Msforms_97::fmPicturePosition PicturePosition = {read = get_PicturePosition, write = set_PicturePosition};
  __property   Msforms_97::fmButtonEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   VARIANT_BOOL    TripleState = {read = get_TripleState, write = set_TripleState};
  __property   VARIANT_BOOL    Valid = {read = get_Valid};
  __property   VARIANT_BOOL    WordWrap = {read = get_WordWrap, write = set_WordWrap};
  __property   Msforms_97::fmDisplayStyle DisplayStyle = {read = get_DisplayStyle};
  __property   BSTR            GroupName = {read = get_GroupName, write = set_GroupName};
  __property   Msforms_97::fmTextAlign TextAlign = {read = get_TextAlign, write = set_TextAlign};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMdcOptionButton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8BD21D53-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
interface IMdcOptionButton  : public Msforms_97::IMdcCheckBox
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMdcToggleButton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8BD21D63-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
interface IMdcToggleButton  : public Msforms_97::IMdcCheckBox
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IScrollbar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04598FC3-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
interface IScrollbar  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Enabled/*[in]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE set_Value(long Value/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Value(long* Value/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Min(long Min/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Min(long* Min/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_Max(long Max/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_Max(long* Max/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_SmallChange(long SmallChange/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_SmallChange(long* SmallChange/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_LargeChange(long LargeChange/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_LargeChange(long* LargeChange/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_ProportionalThumb(VARIANT_BOOL ProportionalThumb/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_ProportionalThumb(VARIANT_BOOL* ProportionalThumb/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_Orientation(Msforms_97::fmOrientation Orientation/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_Orientation(Msforms_97::fmOrientation* Orientation/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_Delay(long Delay/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_Delay(long* Delay/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/) = 0; // [-522]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msforms_97::OLE_COLOR __fastcall get_BackColor(void)
  {
    Msforms_97::OLE_COLOR BackColor;
    OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
    return BackColor;
  }

  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void)
  {
    Msforms_97::OLE_COLOR ForeColor;
    OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
    return ForeColor;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Enabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Enabled));
    return Enabled;
  }

  Msforms_97::fmMousePointer __fastcall get_MousePointer(void)
  {
    Msforms_97::fmMousePointer MousePointer;
    OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
    return MousePointer;
  }

  long __fastcall get_Value(void)
  {
    long Value;
    OLECHECK(this->get_Value((long*)&Value));
    return Value;
  }

  long __fastcall get_Min(void)
  {
    long Min;
    OLECHECK(this->get_Min((long*)&Min));
    return Min;
  }

  long __fastcall get_Max(void)
  {
    long Max;
    OLECHECK(this->get_Max((long*)&Max));
    return Max;
  }

  long __fastcall get_SmallChange(void)
  {
    long SmallChange;
    OLECHECK(this->get_SmallChange((long*)&SmallChange));
    return SmallChange;
  }

  long __fastcall get_LargeChange(void)
  {
    long LargeChange;
    OLECHECK(this->get_LargeChange((long*)&LargeChange));
    return LargeChange;
  }

  VARIANT_BOOL __fastcall get_ProportionalThumb(void)
  {
    VARIANT_BOOL ProportionalThumb;
    OLECHECK(this->get_ProportionalThumb((VARIANT_BOOL*)&ProportionalThumb));
    return ProportionalThumb;
  }

  Msforms_97::fmOrientation __fastcall get_Orientation(void)
  {
    Msforms_97::fmOrientation Orientation;
    OLECHECK(this->get_Orientation((Msforms_97::fmOrientation*)&Orientation));
    return Orientation;
  }

  long __fastcall get_Delay(void)
  {
    long Delay;
    OLECHECK(this->get_Delay((long*)&Delay));
    return Delay;
  }

  IPictureDisp** __fastcall get_MouseIcon(void)
  {
    IPictureDisp** MouseIcon;
    OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
    return MouseIcon;
  }


  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   long            Value = {read = get_Value, write = set_Value};
  __property   long            Min = {read = get_Min, write = set_Min};
  __property   long            Max = {read = get_Max, write = set_Max};
  __property   long            SmallChange = {read = get_SmallChange, write = set_SmallChange};
  __property   long            LargeChange = {read = get_LargeChange, write = set_LargeChange};
  __property   VARIANT_BOOL    ProportionalThumb = {read = get_ProportionalThumb, write = set_ProportionalThumb};
  __property   Msforms_97::fmOrientation Orientation = {read = get_Orientation, write = set_Orientation};
  __property   long            Delay = {read = get_Delay, write = set_Delay};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Tab
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A38BFFC3-A5A0-11CE-8107-00AA00611080}
// *********************************************************************//
interface Tab  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Caption/*[in]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE set_ControlTipText(BSTR ControlTipText/*[in]*/) = 0; // [-2147418043]
  virtual HRESULT STDMETHODCALLTYPE get_ControlTipText(BSTR* ControlTipText/*[out,retval]*/) = 0; // [-2147418043]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL fEnabled/*[in]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE set_Index(long Index/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* Index/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [-2147418112]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [-2147418112]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR Tag/*[in]*/) = 0; // [-2147418101]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* Tag/*[out,retval]*/) = 0; // [-2147418101]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL Visible/*[in]*/) = 0; // [-2147418105]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/) = 0; // [-2147418105]
  virtual HRESULT STDMETHODCALLTYPE set_Accelerator(BSTR Accelerator/*[in]*/) = 0; // [-543]
  virtual HRESULT STDMETHODCALLTYPE get_Accelerator(BSTR* Accelerator/*[out,retval]*/) = 0; // [-543]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  BSTR __fastcall get_ControlTipText(void)
  {
    BSTR ControlTipText = 0;
    OLECHECK(this->get_ControlTipText((BSTR*)&ControlTipText));
    return ControlTipText;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL fEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&fEnabled));
    return fEnabled;
  }

  long __fastcall get_Index(void)
  {
    long Index;
    OLECHECK(this->get_Index((long*)&Index));
    return Index;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR Tag = 0;
    OLECHECK(this->get_Tag((BSTR*)&Tag));
    return Tag;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL Visible;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&Visible));
    return Visible;
  }

  BSTR __fastcall get_Accelerator(void)
  {
    BSTR Accelerator = 0;
    OLECHECK(this->get_Accelerator((BSTR*)&Accelerator));
    return Accelerator;
  }


  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   BSTR            Accelerator = {read = get_Accelerator, write = set_Accelerator};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Tabs
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {944ACF93-A1E6-11CE-8104-00AA00611080}
// *********************************************************************//
interface Tabs  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [60]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE _GetItemByIndex(long lIndex/*[in]*/, 
                                                    Msforms_97::Tab** ppTab/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetItemByName(BSTR bstr/*[in]*/, 
                                                   Msforms_97::Tab** ppTab/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT varg/*[in]*/, LPDISPATCH* ppDisp/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Enum(LPUNKNOWN* ppEnum/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Add(VARIANT bstrName/*[in,opt]*/, 
                                        VARIANT bstrCaption/*[in,opt]*/, VARIANT lIndex/*[in,opt]*/, 
                                        Msforms_97::Tab** ppTab/*[out,retval]*/) = 0; // [66]
  virtual HRESULT STDMETHODCALLTYPE _Add(BSTR bstrName/*[in]*/, BSTR bstrCaption/*[in]*/, 
                                         Msforms_97::Tab** ppTab/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _Insert(BSTR bstrName/*[in]*/, BSTR bstrCaption/*[in]*/, 
                                            long lIndex/*[in]*/, 
                                            Msforms_97::Tab** ppTab/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Remove(VARIANT varg/*[in]*/) = 0; // [67]
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0; // [62]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }

  Msforms_97::Tab* __fastcall _GetItemByIndex(long lIndex/*[in]*/)
  {
    Msforms_97::Tab* ppTab;
    OLECHECK(this->_GetItemByIndex(lIndex, (Msforms_97::Tab**)&ppTab));
    return ppTab;
  }

  Msforms_97::Tab* __fastcall _GetItemByName(BSTR bstr/*[in]*/)
  {
    Msforms_97::Tab* ppTab;
    OLECHECK(this->_GetItemByName(bstr, (Msforms_97::Tab**)&ppTab));
    return ppTab;
  }

  LPDISPATCH __fastcall Item(VARIANT varg/*[in]*/)
  {
    LPDISPATCH ppDisp;
    OLECHECK(this->Item(varg, (LPDISPATCH*)&ppDisp));
    return ppDisp;
  }

  LPUNKNOWN __fastcall Enum(void)
  {
    LPUNKNOWN ppEnum;
    OLECHECK(this->Enum((LPUNKNOWN*)&ppEnum));
    return ppEnum;
  }

  Msforms_97::Tab* __fastcall Add(VARIANT bstrName/*[in,opt]*/= TNoParam(), 
                                  VARIANT bstrCaption/*[in,opt]*/= TNoParam(), 
                                  VARIANT lIndex/*[in,opt]*/= TNoParam())
  {
    Msforms_97::Tab* ppTab;
    OLECHECK(this->Add(bstrName, bstrCaption, lIndex, (Msforms_97::Tab**)&ppTab));
    return ppTab;
  }

  Msforms_97::Tab* __fastcall _Add(BSTR bstrName/*[in]*/, BSTR bstrCaption/*[in]*/)
  {
    Msforms_97::Tab* ppTab;
    OLECHECK(this->_Add(bstrName, bstrCaption, (Msforms_97::Tab**)&ppTab));
    return ppTab;
  }

  Msforms_97::Tab* __fastcall _Insert(BSTR bstrName/*[in]*/, BSTR bstrCaption/*[in]*/, 
                                      long lIndex/*[in]*/)
  {
    Msforms_97::Tab* ppTab;
    OLECHECK(this->_Insert(bstrName, bstrCaption, lIndex, (Msforms_97::Tab**)&ppTab));
    return ppTab;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ITabStrip
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04598FC2-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
interface ITabStrip  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE set__Font_Reserved(IFontDisp** Param1/*[in]*/) = 0; // [2147483135]
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp** Font/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp*** Font/*[out,retval]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR FontName/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* FontName/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(VARIANT_BOOL FontBold/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_FontUnderline(VARIANT_BOOL FontUnder/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_FontUnderline(VARIANT_BOOL* FontUnder/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_FontStrikethru(VARIANT_BOOL FontStrike/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_FontStrikethru(VARIANT_BOOL* FontStrike/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(CURRENCY FontSize/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(CURRENCY* FontSize/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL fnabled/*[in]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* fnabled/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE set_MultiRow(VARIANT_BOOL MultiRow/*[in]*/) = 0; // [514]
  virtual HRESULT STDMETHODCALLTYPE get_MultiRow(VARIANT_BOOL* MultiRow/*[out,retval]*/) = 0; // [514]
  virtual HRESULT STDMETHODCALLTYPE set_Style(Msforms_97::fmTabStyle TabStyle/*[in]*/) = 0; // [513]
  virtual HRESULT STDMETHODCALLTYPE get_Style(Msforms_97::fmTabStyle* TabStyle/*[out,retval]*/) = 0; // [513]
  virtual HRESULT STDMETHODCALLTYPE set_TabOrientation(Msforms_97::fmTabOrientation TabOrientation/*[in]*/) = 0; // [512]
  virtual HRESULT STDMETHODCALLTYPE get_TabOrientation(Msforms_97::fmTabOrientation* TabOrientation/*[out,retval]*/) = 0; // [512]
  virtual HRESULT STDMETHODCALLTYPE _SetTabFixedWidth(long TabFixedWidth/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetTabFixedWidth(long* TabFixedWidth/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _SetTabFixedHeight(long TabFixedHeight/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetTabFixedHeight(long* TabFixedHeight/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetClientTop(long* ClientTop/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ClientTop(float* ClientTop/*[out,retval]*/) = 0; // [548]
  virtual HRESULT STDMETHODCALLTYPE _GetClientLeft(long* ClientLeft/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ClientLeft(float* ClientLeft/*[out,retval]*/) = 0; // [547]
  virtual HRESULT STDMETHODCALLTYPE _GetClientWidth(long* ClientWidth/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ClientWidth(float* ClientWidth/*[out,retval]*/) = 0; // [549]
  virtual HRESULT STDMETHODCALLTYPE _GetClientHeight(long* ClientHeight/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ClientHeight(float* ClientHeight/*[out,retval]*/) = 0; // [546]
  virtual HRESULT STDMETHODCALLTYPE get_Tabs(Msforms_97::Tabs** Tabs/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_SelectedItem(Msforms_97::Tab** ActiveTab/*[out,retval]*/) = 0; // [545]
  virtual HRESULT STDMETHODCALLTYPE set_Value(long Index/*[in]*/) = 0; // [528]
  virtual HRESULT STDMETHODCALLTYPE get_Value(long* Index/*[out,retval]*/) = 0; // [528]
  virtual HRESULT STDMETHODCALLTYPE set_TabFixedWidth(float TabFixedWidth/*[in]*/) = 0; // [515]
  virtual HRESULT STDMETHODCALLTYPE get_TabFixedWidth(float* TabFixedWidth/*[out,retval]*/) = 0; // [515]
  virtual HRESULT STDMETHODCALLTYPE set_TabFixedHeight(float TabFixedHeight/*[in]*/) = 0; // [516]
  virtual HRESULT STDMETHODCALLTYPE get_TabFixedHeight(float* TabFixedHeight/*[out,retval]*/) = 0; // [516]
  virtual HRESULT STDMETHODCALLTYPE set_FontWeight(short FontWeight/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_FontWeight(short* FontWeight/*[out,retval]*/) = 0; // [7]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msforms_97::OLE_COLOR __fastcall get_BackColor(void)
  {
    Msforms_97::OLE_COLOR BackColor;
    OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
    return BackColor;
  }

  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void)
  {
    Msforms_97::OLE_COLOR ForeColor;
    OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
    return ForeColor;
  }

  IFontDisp** __fastcall get_Font(void)
  {
    IFontDisp** Font;
    OLECHECK(this->get_Font((IFontDisp***)&Font));
    return Font;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR FontName = 0;
    OLECHECK(this->get_FontName((BSTR*)&FontName));
    return FontName;
  }

  VARIANT_BOOL __fastcall get_FontBold(void)
  {
    VARIANT_BOOL FontBold;
    OLECHECK(this->get_FontBold((VARIANT_BOOL*)&FontBold));
    return FontBold;
  }

  VARIANT_BOOL __fastcall get_FontItalic(void)
  {
    VARIANT_BOOL FontItalic;
    OLECHECK(this->get_FontItalic((VARIANT_BOOL*)&FontItalic));
    return FontItalic;
  }

  VARIANT_BOOL __fastcall get_FontUnderline(void)
  {
    VARIANT_BOOL FontUnder;
    OLECHECK(this->get_FontUnderline((VARIANT_BOOL*)&FontUnder));
    return FontUnder;
  }

  VARIANT_BOOL __fastcall get_FontStrikethru(void)
  {
    VARIANT_BOOL FontStrike;
    OLECHECK(this->get_FontStrikethru((VARIANT_BOOL*)&FontStrike));
    return FontStrike;
  }

  CURRENCY __fastcall get_FontSize(void)
  {
    CURRENCY FontSize;
    OLECHECK(this->get_FontSize((CURRENCY*)&FontSize));
    return FontSize;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL fnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&fnabled));
    return fnabled;
  }

  IPictureDisp** __fastcall get_MouseIcon(void)
  {
    IPictureDisp** MouseIcon;
    OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
    return MouseIcon;
  }

  Msforms_97::fmMousePointer __fastcall get_MousePointer(void)
  {
    Msforms_97::fmMousePointer MousePointer;
    OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
    return MousePointer;
  }

  VARIANT_BOOL __fastcall get_MultiRow(void)
  {
    VARIANT_BOOL MultiRow;
    OLECHECK(this->get_MultiRow((VARIANT_BOOL*)&MultiRow));
    return MultiRow;
  }

  Msforms_97::fmTabStyle __fastcall get_Style(void)
  {
    Msforms_97::fmTabStyle TabStyle;
    OLECHECK(this->get_Style((Msforms_97::fmTabStyle*)&TabStyle));
    return TabStyle;
  }

  Msforms_97::fmTabOrientation __fastcall get_TabOrientation(void)
  {
    Msforms_97::fmTabOrientation TabOrientation;
    OLECHECK(this->get_TabOrientation((Msforms_97::fmTabOrientation*)&TabOrientation));
    return TabOrientation;
  }

  float __fastcall get_ClientTop(void)
  {
    float ClientTop;
    OLECHECK(this->get_ClientTop((float*)&ClientTop));
    return ClientTop;
  }

  float __fastcall get_ClientLeft(void)
  {
    float ClientLeft;
    OLECHECK(this->get_ClientLeft((float*)&ClientLeft));
    return ClientLeft;
  }

  float __fastcall get_ClientWidth(void)
  {
    float ClientWidth;
    OLECHECK(this->get_ClientWidth((float*)&ClientWidth));
    return ClientWidth;
  }

  float __fastcall get_ClientHeight(void)
  {
    float ClientHeight;
    OLECHECK(this->get_ClientHeight((float*)&ClientHeight));
    return ClientHeight;
  }

  Msforms_97::Tabs* __fastcall get_Tabs(void)
  {
    Msforms_97::Tabs* Tabs;
    OLECHECK(this->get_Tabs((Msforms_97::Tabs**)&Tabs));
    return Tabs;
  }

  Msforms_97::Tab* __fastcall get_SelectedItem(void)
  {
    Msforms_97::Tab* ActiveTab;
    OLECHECK(this->get_SelectedItem((Msforms_97::Tab**)&ActiveTab));
    return ActiveTab;
  }

  long __fastcall get_Value(void)
  {
    long Index;
    OLECHECK(this->get_Value((long*)&Index));
    return Index;
  }

  float __fastcall get_TabFixedWidth(void)
  {
    float TabFixedWidth;
    OLECHECK(this->get_TabFixedWidth((float*)&TabFixedWidth));
    return TabFixedWidth;
  }

  float __fastcall get_TabFixedHeight(void)
  {
    float TabFixedHeight;
    OLECHECK(this->get_TabFixedHeight((float*)&TabFixedHeight));
    return TabFixedHeight;
  }

  short __fastcall get_FontWeight(void)
  {
    short FontWeight;
    OLECHECK(this->get_FontWeight((short*)&FontWeight));
    return FontWeight;
  }


  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   VARIANT_BOOL    FontBold = {read = get_FontBold, write = set_FontBold};
  __property   VARIANT_BOOL    FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   VARIANT_BOOL    FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   VARIANT_BOOL    FontStrikethru = {read = get_FontStrikethru, write = set_FontStrikethru};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   VARIANT_BOOL    MultiRow = {read = get_MultiRow, write = set_MultiRow};
  __property   Msforms_97::fmTabStyle Style = {read = get_Style, write = set_Style};
  __property   Msforms_97::fmTabOrientation TabOrientation = {read = get_TabOrientation, write = set_TabOrientation};
  __property   float           ClientTop = {read = get_ClientTop};
  __property   float           ClientLeft = {read = get_ClientLeft};
  __property   float           ClientWidth = {read = get_ClientWidth};
  __property   float           ClientHeight = {read = get_ClientHeight};
  __property   Msforms_97::Tabs* Tabs = {read = get_Tabs};
  __property   Msforms_97::Tab* SelectedItem = {read = get_SelectedItem};
  __property   long            Value = {read = get_Value, write = set_Value};
  __property   float           TabFixedWidth = {read = get_TabFixedWidth, write = set_TabFixedWidth};
  __property   float           TabFixedHeight = {read = get_TabFixedHeight, write = set_TabFixedHeight};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISpinbutton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {79176FB3-B7F2-11CE-97EF-00AA006D2776}
// *********************************************************************//
interface ISpinbutton  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Enabled/*[in]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE set_Value(long Value/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Value(long* Value/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Min(long Min/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Min(long* Min/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_Max(long Max/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_Max(long* Max/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_SmallChange(long SmallChange/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_SmallChange(long* SmallChange/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_Orientation(Msforms_97::fmOrientation Orientation/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_Orientation(Msforms_97::fmOrientation* Orientation/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE set_Delay(long Delay/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_Delay(long* Delay/*[out,retval]*/) = 0; // [106]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msforms_97::OLE_COLOR __fastcall get_BackColor(void)
  {
    Msforms_97::OLE_COLOR BackColor;
    OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
    return BackColor;
  }

  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void)
  {
    Msforms_97::OLE_COLOR ForeColor;
    OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
    return ForeColor;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Enabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Enabled));
    return Enabled;
  }

  Msforms_97::fmMousePointer __fastcall get_MousePointer(void)
  {
    Msforms_97::fmMousePointer MousePointer;
    OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
    return MousePointer;
  }

  long __fastcall get_Value(void)
  {
    long Value;
    OLECHECK(this->get_Value((long*)&Value));
    return Value;
  }

  long __fastcall get_Min(void)
  {
    long Min;
    OLECHECK(this->get_Min((long*)&Min));
    return Min;
  }

  long __fastcall get_Max(void)
  {
    long Max;
    OLECHECK(this->get_Max((long*)&Max));
    return Max;
  }

  long __fastcall get_SmallChange(void)
  {
    long SmallChange;
    OLECHECK(this->get_SmallChange((long*)&SmallChange));
    return SmallChange;
  }

  Msforms_97::fmOrientation __fastcall get_Orientation(void)
  {
    Msforms_97::fmOrientation Orientation;
    OLECHECK(this->get_Orientation((Msforms_97::fmOrientation*)&Orientation));
    return Orientation;
  }

  IPictureDisp** __fastcall get_MouseIcon(void)
  {
    IPictureDisp** MouseIcon;
    OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
    return MouseIcon;
  }

  long __fastcall get_Delay(void)
  {
    long Delay;
    OLECHECK(this->get_Delay((long*)&Delay));
    return Delay;
  }


  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   long            Value = {read = get_Value, write = set_Value};
  __property   long            Min = {read = get_Min, write = set_Min};
  __property   long            Max = {read = get_Max, write = set_Max};
  __property   long            SmallChange = {read = get_SmallChange, write = set_SmallChange};
  __property   Msforms_97::fmOrientation Orientation = {read = get_Orientation, write = set_Orientation};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   long            Delay = {read = get_Delay, write = set_Delay};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IImage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4C599243-6926-101B-9992-00000B65C6F9}
// *********************************************************************//
interface IImage  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL fEnabled/*[in]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/) = 0; // [-521]
  virtual HRESULT STDMETHODCALLTYPE set_AutoSize(VARIANT_BOOL fAutoSize/*[in]*/) = 0; // [-500]
  virtual HRESULT STDMETHODCALLTYPE get_AutoSize(VARIANT_BOOL* fAutoSize/*[out,retval]*/) = 0; // [-500]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/) = 0; // [-502]
  virtual HRESULT STDMETHODCALLTYPE get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/) = 0; // [-502]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/) = 0; // [-503]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/) = 0; // [-503]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(Msforms_97::fmBorderStyle Style/*[in]*/) = 0; // [-504]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(Msforms_97::fmBorderStyle* Style/*[out,retval]*/) = 0; // [-504]
  virtual HRESULT STDMETHODCALLTYPE set_Picture(IPictureDisp** Picture/*[in]*/) = 0; // [-523]
  virtual HRESULT STDMETHODCALLTYPE _set_Picture(IPictureDisp** Picture/*[in]*/) = 0; // [-523]
  virtual HRESULT STDMETHODCALLTYPE get_Picture(IPictureDisp*** Picture/*[out,retval]*/) = 0; // [-523]
  virtual HRESULT STDMETHODCALLTYPE set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/) = 0; // [-522]
  virtual HRESULT STDMETHODCALLTYPE set_PictureSizeMode(Msforms_97::fmPictureSizeMode PictureSizeMode/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_PictureSizeMode(Msforms_97::fmPictureSizeMode* PictureSizeMode/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_PictureAlignment(Msforms_97::fmPictureAlignment PictureAlignment/*[in]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_PictureAlignment(Msforms_97::fmPictureAlignment* PictureAlignment/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE set_PictureTiling(VARIANT_BOOL PictureTiling/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_PictureTiling(VARIANT_BOOL* PictureTiling/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/) = 0; // [12]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL fEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&fEnabled));
    return fEnabled;
  }

  Msforms_97::fmMousePointer __fastcall get_MousePointer(void)
  {
    Msforms_97::fmMousePointer MousePointer;
    OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
    return MousePointer;
  }

  VARIANT_BOOL __fastcall get_AutoSize(void)
  {
    VARIANT_BOOL fAutoSize;
    OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&fAutoSize));
    return fAutoSize;
  }

  Msforms_97::OLE_COLOR __fastcall get_BackColor(void)
  {
    Msforms_97::OLE_COLOR BackColor;
    OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
    return BackColor;
  }

  Msforms_97::fmBackStyle __fastcall get_BackStyle(void)
  {
    Msforms_97::fmBackStyle BackStyle;
    OLECHECK(this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle));
    return BackStyle;
  }

  Msforms_97::OLE_COLOR __fastcall get_BorderColor(void)
  {
    Msforms_97::OLE_COLOR BorderColor;
    OLECHECK(this->get_BorderColor((Msforms_97::OLE_COLOR*)&BorderColor));
    return BorderColor;
  }

  Msforms_97::fmBorderStyle __fastcall get_BorderStyle(void)
  {
    Msforms_97::fmBorderStyle Style;
    OLECHECK(this->get_BorderStyle((Msforms_97::fmBorderStyle*)&Style));
    return Style;
  }

  IPictureDisp** __fastcall get_Picture(void)
  {
    IPictureDisp** Picture;
    OLECHECK(this->get_Picture((IPictureDisp***)&Picture));
    return Picture;
  }

  IPictureDisp** __fastcall get_MouseIcon(void)
  {
    IPictureDisp** MouseIcon;
    OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
    return MouseIcon;
  }

  Msforms_97::fmPictureSizeMode __fastcall get_PictureSizeMode(void)
  {
    Msforms_97::fmPictureSizeMode PictureSizeMode;
    OLECHECK(this->get_PictureSizeMode((Msforms_97::fmPictureSizeMode*)&PictureSizeMode));
    return PictureSizeMode;
  }

  Msforms_97::fmPictureAlignment __fastcall get_PictureAlignment(void)
  {
    Msforms_97::fmPictureAlignment PictureAlignment;
    OLECHECK(this->get_PictureAlignment((Msforms_97::fmPictureAlignment*)&PictureAlignment));
    return PictureAlignment;
  }

  VARIANT_BOOL __fastcall get_PictureTiling(void)
  {
    VARIANT_BOOL PictureTiling;
    OLECHECK(this->get_PictureTiling((VARIANT_BOOL*)&PictureTiling));
    return PictureTiling;
  }

  Msforms_97::fmSpecialEffect __fastcall get_SpecialEffect(void)
  {
    Msforms_97::fmSpecialEffect SpecialEffect;
    OLECHECK(this->get_SpecialEffect((Msforms_97::fmSpecialEffect*)&SpecialEffect));
    return SpecialEffect;
  }


  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   Msforms_97::OLE_COLOR BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   Msforms_97::fmBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   IPictureDisp**  Picture = {read = get_Picture, write = set_Picture};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmPictureSizeMode PictureSizeMode = {read = get_PictureSizeMode, write = set_PictureSizeMode};
  __property   Msforms_97::fmPictureAlignment PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   VARIANT_BOOL    PictureTiling = {read = get_PictureTiling, write = set_PictureTiling};
  __property   Msforms_97::fmSpecialEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWHTMLSubmitButton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D111-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
interface IWHTMLSubmitButton  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Action(BSTR Action/*[in]*/) = 0; // [601]
  virtual HRESULT STDMETHODCALLTYPE get_Action(BSTR* Action/*[out,retval]*/) = 0; // [601]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Caption/*[in]*/) = 0; // [602]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [602]
  virtual HRESULT STDMETHODCALLTYPE set_Encoding(BSTR Encoding/*[in]*/) = 0; // [603]
  virtual HRESULT STDMETHODCALLTYPE get_Encoding(BSTR* Encoding/*[out,retval]*/) = 0; // [603]
  virtual HRESULT STDMETHODCALLTYPE set_Method(BSTR Method/*[in]*/) = 0; // [604]
  virtual HRESULT STDMETHODCALLTYPE get_Method(BSTR* Method/*[out,retval]*/) = 0; // [604]
  virtual HRESULT STDMETHODCALLTYPE set_HTMLName(BSTR HTMLName/*[in]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLName(BSTR* HTMLName/*[out,retval]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE set_HTMLType(BSTR HTMLType/*[in]*/) = 0; // [618]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLType(BSTR* HTMLType/*[out,retval]*/) = 0; // [618]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Action(void)
  {
    BSTR Action = 0;
    OLECHECK(this->get_Action((BSTR*)&Action));
    return Action;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  BSTR __fastcall get_Encoding(void)
  {
    BSTR Encoding = 0;
    OLECHECK(this->get_Encoding((BSTR*)&Encoding));
    return Encoding;
  }

  BSTR __fastcall get_Method(void)
  {
    BSTR Method = 0;
    OLECHECK(this->get_Method((BSTR*)&Method));
    return Method;
  }

  BSTR __fastcall get_HTMLName(void)
  {
    BSTR HTMLName = 0;
    OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
    return HTMLName;
  }

  BSTR __fastcall get_HTMLType(void)
  {
    BSTR HTMLType = 0;
    OLECHECK(this->get_HTMLType((BSTR*)&HTMLType));
    return HTMLType;
  }


  __property   BSTR            Action = {read = get_Action, write = set_Action};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            Encoding = {read = get_Encoding, write = set_Encoding};
  __property   BSTR            Method = {read = get_Method, write = set_Method};
  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWHTMLImage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D113-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
interface IWHTMLImage  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Action(BSTR Action/*[in]*/) = 0; // [601]
  virtual HRESULT STDMETHODCALLTYPE get_Action(BSTR* Action/*[out,retval]*/) = 0; // [601]
  virtual HRESULT STDMETHODCALLTYPE set_Source(BSTR Source/*[in]*/) = 0; // [606]
  virtual HRESULT STDMETHODCALLTYPE get_Source(BSTR* Source/*[out,retval]*/) = 0; // [606]
  virtual HRESULT STDMETHODCALLTYPE set_Encoding(BSTR Encoding/*[in]*/) = 0; // [603]
  virtual HRESULT STDMETHODCALLTYPE get_Encoding(BSTR* Encoding/*[out,retval]*/) = 0; // [603]
  virtual HRESULT STDMETHODCALLTYPE set_Method(BSTR Method/*[in]*/) = 0; // [604]
  virtual HRESULT STDMETHODCALLTYPE get_Method(BSTR* Method/*[out,retval]*/) = 0; // [604]
  virtual HRESULT STDMETHODCALLTYPE set_HTMLName(BSTR HTMLName/*[in]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLName(BSTR* HTMLName/*[out,retval]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE set_HTMLType(BSTR HTMLType/*[in]*/) = 0; // [618]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLType(BSTR* HTMLType/*[out,retval]*/) = 0; // [618]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Action(void)
  {
    BSTR Action = 0;
    OLECHECK(this->get_Action((BSTR*)&Action));
    return Action;
  }

  BSTR __fastcall get_Source(void)
  {
    BSTR Source = 0;
    OLECHECK(this->get_Source((BSTR*)&Source));
    return Source;
  }

  BSTR __fastcall get_Encoding(void)
  {
    BSTR Encoding = 0;
    OLECHECK(this->get_Encoding((BSTR*)&Encoding));
    return Encoding;
  }

  BSTR __fastcall get_Method(void)
  {
    BSTR Method = 0;
    OLECHECK(this->get_Method((BSTR*)&Method));
    return Method;
  }

  BSTR __fastcall get_HTMLName(void)
  {
    BSTR HTMLName = 0;
    OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
    return HTMLName;
  }

  BSTR __fastcall get_HTMLType(void)
  {
    BSTR HTMLType = 0;
    OLECHECK(this->get_HTMLType((BSTR*)&HTMLType));
    return HTMLType;
  }


  __property   BSTR            Action = {read = get_Action, write = set_Action};
  __property   BSTR            Source = {read = get_Source, write = set_Source};
  __property   BSTR            Encoding = {read = get_Encoding, write = set_Encoding};
  __property   BSTR            Method = {read = get_Method, write = set_Method};
  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWHTMLReset
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D115-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
interface IWHTMLReset  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Caption/*[in]*/) = 0; // [602]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [602]
  virtual HRESULT STDMETHODCALLTYPE set_HTMLName(BSTR HTMLName/*[in]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLName(BSTR* HTMLName/*[out,retval]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE set_HTMLType(BSTR HTMLType/*[in]*/) = 0; // [618]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLType(BSTR* HTMLType/*[out,retval]*/) = 0; // [618]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  BSTR __fastcall get_HTMLName(void)
  {
    BSTR HTMLName = 0;
    OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
    return HTMLName;
  }

  BSTR __fastcall get_HTMLType(void)
  {
    BSTR HTMLType = 0;
    OLECHECK(this->get_HTMLType((BSTR*)&HTMLType));
    return HTMLType;
  }


  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWHTMLCheckbox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D117-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
interface IWHTMLCheckbox  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_HTMLName(BSTR HTMLName/*[in]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLName(BSTR* HTMLName/*[out,retval]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE set_Value(BSTR Value/*[in]*/) = 0; // [607]
  virtual HRESULT STDMETHODCALLTYPE get_Value(BSTR* Value/*[out,retval]*/) = 0; // [607]
  virtual HRESULT STDMETHODCALLTYPE set_Checked(VARIANT_BOOL Checked/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Checked(VARIANT_BOOL* Checked/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_HTMLType(BSTR HTMLType/*[in]*/) = 0; // [618]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLType(BSTR* HTMLType/*[out,retval]*/) = 0; // [618]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_HTMLName(void)
  {
    BSTR HTMLName = 0;
    OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
    return HTMLName;
  }

  BSTR __fastcall get_Value(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Value((BSTR*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Checked(void)
  {
    VARIANT_BOOL Checked;
    OLECHECK(this->get_Checked((VARIANT_BOOL*)&Checked));
    return Checked;
  }

  BSTR __fastcall get_HTMLType(void)
  {
    BSTR HTMLType = 0;
    OLECHECK(this->get_HTMLType((BSTR*)&HTMLType));
    return HTMLType;
  }


  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   VARIANT_BOOL    Checked = {read = get_Checked, write = set_Checked};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWHTMLOption
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D119-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
interface IWHTMLOption  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_HTMLName(BSTR HTMLName/*[in]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLName(BSTR* HTMLName/*[out,retval]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE set_Value(BSTR Value/*[in]*/) = 0; // [607]
  virtual HRESULT STDMETHODCALLTYPE get_Value(BSTR* Value/*[out,retval]*/) = 0; // [607]
  virtual HRESULT STDMETHODCALLTYPE set_Checked(VARIANT_BOOL Checked/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Checked(VARIANT_BOOL* Checked/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_HTMLType(BSTR HTMLType/*[in]*/) = 0; // [618]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLType(BSTR* HTMLType/*[out,retval]*/) = 0; // [618]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/) = 0; // [-540]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_HTMLName(void)
  {
    BSTR HTMLName = 0;
    OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
    return HTMLName;
  }

  BSTR __fastcall get_Value(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Value((BSTR*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Checked(void)
  {
    VARIANT_BOOL Checked;
    OLECHECK(this->get_Checked((VARIANT_BOOL*)&Checked));
    return Checked;
  }

  BSTR __fastcall get_HTMLType(void)
  {
    BSTR HTMLType = 0;
    OLECHECK(this->get_HTMLType((BSTR*)&HTMLType));
    return HTMLType;
  }

  Msforms_97::fmDisplayStyle __fastcall get_DisplayStyle(void)
  {
    Msforms_97::fmDisplayStyle DisplayStyle;
    OLECHECK(this->get_DisplayStyle((Msforms_97::fmDisplayStyle*)&DisplayStyle));
    return DisplayStyle;
  }


  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   VARIANT_BOOL    Checked = {read = get_Checked, write = set_Checked};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};
  __property   Msforms_97::fmDisplayStyle DisplayStyle = {read = get_DisplayStyle};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWHTMLText
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D11B-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
interface IWHTMLText  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_HTMLName(BSTR HTMLName/*[in]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLName(BSTR* HTMLName/*[out,retval]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE set_Value(BSTR Value/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Value(BSTR* Value/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_MaxLength(long MaxLength/*[in]*/) = 0; // [609]
  virtual HRESULT STDMETHODCALLTYPE get_MaxLength(long* MaxLength/*[out,retval]*/) = 0; // [609]
  virtual HRESULT STDMETHODCALLTYPE set_Width(long Width/*[in]*/) = 0; // [610]
  virtual HRESULT STDMETHODCALLTYPE get_Width(long* Width/*[out,retval]*/) = 0; // [610]
  virtual HRESULT STDMETHODCALLTYPE set_HTMLType(BSTR HTMLType/*[in]*/) = 0; // [618]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLType(BSTR* HTMLType/*[out,retval]*/) = 0; // [618]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_HTMLName(void)
  {
    BSTR HTMLName = 0;
    OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
    return HTMLName;
  }

  BSTR __fastcall get_Value(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Value((BSTR*)&Value));
    return Value;
  }

  long __fastcall get_MaxLength(void)
  {
    long MaxLength;
    OLECHECK(this->get_MaxLength((long*)&MaxLength));
    return MaxLength;
  }

  long __fastcall get_Width(void)
  {
    long Width;
    OLECHECK(this->get_Width((long*)&Width));
    return Width;
  }

  BSTR __fastcall get_HTMLType(void)
  {
    BSTR HTMLType = 0;
    OLECHECK(this->get_HTMLType((BSTR*)&HTMLType));
    return HTMLType;
  }


  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   long            MaxLength = {read = get_MaxLength, write = set_MaxLength};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWHTMLHidden
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D11D-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
interface IWHTMLHidden  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_HTMLName(BSTR HTMLName/*[in]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLName(BSTR* HTMLName/*[out,retval]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE set_Value(BSTR Value/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Value(BSTR* Value/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_HTMLType(BSTR HTMLType/*[in]*/) = 0; // [618]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLType(BSTR* HTMLType/*[out,retval]*/) = 0; // [618]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_HTMLName(void)
  {
    BSTR HTMLName = 0;
    OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
    return HTMLName;
  }

  BSTR __fastcall get_Value(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Value((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_HTMLType(void)
  {
    BSTR HTMLType = 0;
    OLECHECK(this->get_HTMLType((BSTR*)&HTMLType));
    return HTMLType;
  }


  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWHTMLPassword
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D11F-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
interface IWHTMLPassword  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_HTMLName(BSTR HTMLName/*[in]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLName(BSTR* HTMLName/*[out,retval]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE set_Value(BSTR Value/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Value(BSTR* Value/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_MaxLength(long MaxLength/*[in]*/) = 0; // [609]
  virtual HRESULT STDMETHODCALLTYPE get_MaxLength(long* MaxLength/*[out,retval]*/) = 0; // [609]
  virtual HRESULT STDMETHODCALLTYPE set_Width(long Width/*[in]*/) = 0; // [610]
  virtual HRESULT STDMETHODCALLTYPE get_Width(long* Width/*[out,retval]*/) = 0; // [610]
  virtual HRESULT STDMETHODCALLTYPE set_HTMLType(BSTR HTMLType/*[in]*/) = 0; // [618]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLType(BSTR* HTMLType/*[out,retval]*/) = 0; // [618]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_HTMLName(void)
  {
    BSTR HTMLName = 0;
    OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
    return HTMLName;
  }

  BSTR __fastcall get_Value(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Value((BSTR*)&Value));
    return Value;
  }

  long __fastcall get_MaxLength(void)
  {
    long MaxLength;
    OLECHECK(this->get_MaxLength((long*)&MaxLength));
    return MaxLength;
  }

  long __fastcall get_Width(void)
  {
    long Width;
    OLECHECK(this->get_Width((long*)&Width));
    return Width;
  }

  BSTR __fastcall get_HTMLType(void)
  {
    BSTR HTMLType = 0;
    OLECHECK(this->get_HTMLType((BSTR*)&HTMLType));
    return HTMLType;
  }


  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   long            MaxLength = {read = get_MaxLength, write = set_MaxLength};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWHTMLSelect
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D123-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
interface IWHTMLSelect  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_HTMLName(BSTR HTMLName/*[in]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLName(BSTR* HTMLName/*[out,retval]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE set_Values(VARIANT* Values/*[in]*/) = 0; // [611]
  virtual HRESULT STDMETHODCALLTYPE get_Values(VARIANT* Values/*[out,retval]*/) = 0; // [611]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayValues(VARIANT* DisplayValues/*[in]*/) = 0; // [612]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayValues(VARIANT* DisplayValues/*[out,retval]*/) = 0; // [612]
  virtual HRESULT STDMETHODCALLTYPE set_Selected(BSTR Selected/*[in]*/) = 0; // [613]
  virtual HRESULT STDMETHODCALLTYPE get_Selected(BSTR* Selected/*[out,retval]*/) = 0; // [613]
  virtual HRESULT STDMETHODCALLTYPE set_MultiSelect(VARIANT_BOOL MultiSelect/*[in]*/) = 0; // [614]
  virtual HRESULT STDMETHODCALLTYPE get_MultiSelect(VARIANT_BOOL* MultiSelect/*[out,retval]*/) = 0; // [614]
  virtual HRESULT STDMETHODCALLTYPE set_Size(long Size/*[in]*/) = 0; // [619]
  virtual HRESULT STDMETHODCALLTYPE get_Size(long* Size/*[out,retval]*/) = 0; // [619]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_HTMLName(void)
  {
    BSTR HTMLName = 0;
    OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
    return HTMLName;
  }

  VARIANT __fastcall get_Values(void)
  {
    VARIANT Values;
    OLECHECK(this->get_Values((VARIANT*)&Values));
    return Values;
  }

  VARIANT __fastcall get_DisplayValues(void)
  {
    VARIANT DisplayValues;
    OLECHECK(this->get_DisplayValues((VARIANT*)&DisplayValues));
    return DisplayValues;
  }

  BSTR __fastcall get_Selected(void)
  {
    BSTR Selected = 0;
    OLECHECK(this->get_Selected((BSTR*)&Selected));
    return Selected;
  }

  VARIANT_BOOL __fastcall get_MultiSelect(void)
  {
    VARIANT_BOOL MultiSelect;
    OLECHECK(this->get_MultiSelect((VARIANT_BOOL*)&MultiSelect));
    return MultiSelect;
  }

  long __fastcall get_Size(void)
  {
    long Size;
    OLECHECK(this->get_Size((long*)&Size));
    return Size;
  }


  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Selected = {read = get_Selected, write = set_Selected};
  __property   VARIANT_BOOL    MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   long            Size = {read = get_Size, write = set_Size};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWHTMLTextArea
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D125-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
interface IWHTMLTextArea  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_HTMLName(BSTR HTMLName/*[in]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLName(BSTR* HTMLName/*[out,retval]*/) = 0; // [-541]
  virtual HRESULT STDMETHODCALLTYPE set_Value(BSTR Value/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Value(BSTR* Value/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Rows(long Rows/*[in]*/) = 0; // [615]
  virtual HRESULT STDMETHODCALLTYPE get_Rows(long* Rows/*[out,retval]*/) = 0; // [615]
  virtual HRESULT STDMETHODCALLTYPE set_Columns(long Columns/*[in]*/) = 0; // [616]
  virtual HRESULT STDMETHODCALLTYPE get_Columns(long* Columns/*[out,retval]*/) = 0; // [616]
  virtual HRESULT STDMETHODCALLTYPE set_WordWrap(BSTR WordWrap/*[in]*/) = 0; // [617]
  virtual HRESULT STDMETHODCALLTYPE get_WordWrap(BSTR* WordWrap/*[out,retval]*/) = 0; // [617]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_HTMLName(void)
  {
    BSTR HTMLName = 0;
    OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
    return HTMLName;
  }

  BSTR __fastcall get_Value(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Value((BSTR*)&Value));
    return Value;
  }

  long __fastcall get_Rows(void)
  {
    long Rows;
    OLECHECK(this->get_Rows((long*)&Rows));
    return Rows;
  }

  long __fastcall get_Columns(void)
  {
    long Columns;
    OLECHECK(this->get_Columns((long*)&Columns));
    return Columns;
  }

  BSTR __fastcall get_WordWrap(void)
  {
    BSTR WordWrap = 0;
    OLECHECK(this->get_WordWrap((BSTR*)&WordWrap));
    return WordWrap;
  }


  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   long            Rows = {read = get_Rows, write = set_Rows};
  __property   long            Columns = {read = get_Columns, write = set_Columns};
  __property   BSTR            WordWrap = {read = get_WordWrap, write = set_WordWrap};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: LabelControlEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {978C9E22-D4B0-11CE-BF2D-00AA003F40D0}
// *********************************************************************//
interface LabelControlEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
    _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* DblClick */ DISPID(-601));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
  {
    _TDispID _dispid(/* Error */ DISPID(-608));
    TAutoArgs<7> _args;
    _args[1] = Number /*[VT_I2:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
    _args[3] = SCode /*[VT_I4:0]*/;
    _args[4] = Source /*[VT_BSTR:0]*/;
    _args[5] = HelpFile /*[VT_BSTR:0]*/;
    _args[6] = HelpContext /*[VT_I4:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: CommandButtonEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {7B020EC1-AF6C-11CE-9F46-00AA00574A4F}
// *********************************************************************//
interface CommandButtonEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
    _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* DblClick */ DISPID(-601));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
  {
    _TDispID _dispid(/* Error */ DISPID(-608));
    TAutoArgs<7> _args;
    _args[1] = Number /*[VT_I2:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
    _args[3] = SCode /*[VT_I4:0]*/;
    _args[4] = Source /*[VT_BSTR:0]*/;
    _args[5] = HelpFile /*[VT_BSTR:0]*/;
    _args[6] = HelpContext /*[VT_I4:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: MdcTextEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BD21D12-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
interface MdcTextEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
    _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Change()
  {
    _TDispID _dispid(/* Change */ DISPID(2));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* DblClick */ DISPID(-601));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall DropButtonClick()
  {
    _TDispID _dispid(/* DropButtonClick */ DISPID(2002));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
  {
    _TDispID _dispid(/* Error */ DISPID(-608));
    TAutoArgs<7> _args;
    _args[1] = Number /*[VT_I2:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
    _args[3] = SCode /*[VT_I4:0]*/;
    _args[4] = Source /*[VT_BSTR:0]*/;
    _args[5] = HelpFile /*[VT_BSTR:0]*/;
    _args[6] = HelpContext /*[VT_I4:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: MdcListEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BD21D22-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
interface MdcListEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
    _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Change()
  {
    _TDispID _dispid(/* Change */ DISPID(2));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-610));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* DblClick */ DISPID(-601));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
  {
    _TDispID _dispid(/* Error */ DISPID(-608));
    TAutoArgs<7> _args;
    _args[1] = Number /*[VT_I2:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
    _args[3] = SCode /*[VT_I4:0]*/;
    _args[4] = Source /*[VT_BSTR:0]*/;
    _args[5] = HelpFile /*[VT_BSTR:0]*/;
    _args[6] = HelpContext /*[VT_I4:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: MdcComboEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BD21D32-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
interface MdcComboEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
    _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Change()
  {
    _TDispID _dispid(/* Change */ DISPID(2));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-610));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* DblClick */ DISPID(-601));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall DropButtonClick()
  {
    _TDispID _dispid(/* DropButtonClick */ DISPID(2002));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
  {
    _TDispID _dispid(/* Error */ DISPID(-608));
    TAutoArgs<7> _args;
    _args[1] = Number /*[VT_I2:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
    _args[3] = SCode /*[VT_I4:0]*/;
    _args[4] = Source /*[VT_BSTR:0]*/;
    _args[5] = HelpFile /*[VT_BSTR:0]*/;
    _args[6] = HelpContext /*[VT_I4:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: MdcCheckBoxEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BD21D42-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
interface MdcCheckBoxEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
    _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Change()
  {
    _TDispID _dispid(/* Change */ DISPID(2));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-610));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* DblClick */ DISPID(-601));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
  {
    _TDispID _dispid(/* Error */ DISPID(-608));
    TAutoArgs<7> _args;
    _args[1] = Number /*[VT_I2:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
    _args[3] = SCode /*[VT_I4:0]*/;
    _args[4] = Source /*[VT_BSTR:0]*/;
    _args[5] = HelpFile /*[VT_BSTR:0]*/;
    _args[6] = HelpContext /*[VT_I4:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: MdcOptionButtonEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BD21D52-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
interface MdcOptionButtonEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
    _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Change()
  {
    _TDispID _dispid(/* Change */ DISPID(2));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-610));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* DblClick */ DISPID(-601));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
  {
    _TDispID _dispid(/* Error */ DISPID(-608));
    TAutoArgs<7> _args;
    _args[1] = Number /*[VT_I2:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
    _args[3] = SCode /*[VT_I4:0]*/;
    _args[4] = Source /*[VT_BSTR:0]*/;
    _args[5] = HelpFile /*[VT_BSTR:0]*/;
    _args[6] = HelpContext /*[VT_I4:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: MdcToggleButtonEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BD21D62-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
interface MdcToggleButtonEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
    _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Change()
  {
    _TDispID _dispid(/* Change */ DISPID(2));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-610));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* DblClick */ DISPID(-601));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
  {
    _TDispID _dispid(/* Error */ DISPID(-608));
    TAutoArgs<7> _args;
    _args[1] = Number /*[VT_I2:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
    _args[3] = SCode /*[VT_I4:0]*/;
    _args[4] = Source /*[VT_BSTR:0]*/;
    _args[5] = HelpFile /*[VT_BSTR:0]*/;
    _args[6] = HelpContext /*[VT_I4:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: ScrollbarEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {7B020EC2-AF6C-11CE-9F46-00AA00574A4F}
// *********************************************************************//
interface ScrollbarEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
    _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Change()
  {
    _TDispID _dispid(/* Change */ DISPID(2));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
  {
    _TDispID _dispid(/* Error */ DISPID(-608));
    TAutoArgs<7> _args;
    _args[1] = Number /*[VT_I2:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
    _args[3] = SCode /*[VT_I4:0]*/;
    _args[4] = Source /*[VT_BSTR:0]*/;
    _args[5] = HelpFile /*[VT_BSTR:0]*/;
    _args[6] = HelpContext /*[VT_I4:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Scroll()
  {
    _TDispID _dispid(/* Scroll */ DISPID(7));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: TabStripEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {7B020EC7-AF6C-11CE-9F46-00AA00574A4F}
// *********************************************************************//
interface TabStripEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(long Index/*[in]*/, 
                                                 Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
    TAutoArgs<8> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    _args[6] = (int)DragState /*[VT_USERDEFINED:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[8] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(long Index/*[in]*/, 
                                                    Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
    TAutoArgs<8> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[3] = (int)Action /*[VT_USERDEFINED:0]*/;
    _args[4] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[5] = X /*[VT_R4:0]*/;
    _args[6] = Y /*[VT_R4:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[8] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Change()
  {
    _TDispID _dispid(/* Change */ DISPID(2));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall Click(long Index/*[in]*/)
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick(long Index/*[in]*/, 
                                           Msforms_97::ReturnBoolean* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* DblClick */ DISPID(-601));
    TAutoArgs<2> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
  {
    _TDispID _dispid(/* Error */ DISPID(-608));
    TAutoArgs<7> _args;
    _args[1] = Number /*[VT_I2:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
    _args[3] = SCode /*[VT_I4:0]*/;
    _args[4] = Source /*[VT_BSTR:0]*/;
    _args[5] = HelpFile /*[VT_BSTR:0]*/;
    _args[6] = HelpContext /*[VT_I4:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(long Index/*[in]*/, short Button/*[in]*/, 
                                            short Shift/*[in]*/, float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<5> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    _args[2] = Button /*[VT_I2:0]*/;
    _args[3] = Shift /*[VT_I2:0]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(long Index/*[in]*/, short Button/*[in]*/, 
                                            short Shift/*[in]*/, float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<5> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    _args[2] = Button /*[VT_I2:0]*/;
    _args[3] = Shift /*[VT_I2:0]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(long Index/*[in]*/, short Button/*[in]*/, 
                                          short Shift/*[in]*/, float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<5> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    _args[2] = Button /*[VT_I2:0]*/;
    _args[3] = Shift /*[VT_I2:0]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: SpinbuttonEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {79176FB2-B7F2-11CE-97EF-00AA006D2776}
// *********************************************************************//
interface SpinbuttonEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
    _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Change()
  {
    _TDispID _dispid(/* Change */ DISPID(2));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
  {
    _TDispID _dispid(/* Error */ DISPID(-608));
    TAutoArgs<7> _args;
    _args[1] = Number /*[VT_I2:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
    _args[3] = SCode /*[VT_I4:0]*/;
    _args[4] = Source /*[VT_BSTR:0]*/;
    _args[5] = HelpFile /*[VT_BSTR:0]*/;
    _args[6] = HelpContext /*[VT_I4:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall SpinUp()
  {
    _TDispID _dispid(/* SpinUp */ DISPID(5));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall SpinDown()
  {
    _TDispID _dispid(/* SpinDown */ DISPID(6));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: ImageEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {4C5992A5-6926-101B-9992-00000B65C6F9}
// *********************************************************************//
interface ImageEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
    _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[7] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* DblClick */ DISPID(-601));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
  {
    _TDispID _dispid(/* Error */ DISPID(-608));
    TAutoArgs<7> _args;
    _args[1] = Number /*[VT_I2:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
    _args[3] = SCode /*[VT_I4:0]*/;
    _args[4] = Source /*[VT_BSTR:0]*/;
    _args[5] = HelpFile /*[VT_BSTR:0]*/;
    _args[6] = HelpContext /*[VT_I4:0]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = X /*[VT_R4:0]*/;
    _args[4] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: WHTMLControlEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {796ED650-5FE9-11CF-8D68-00AA00BDCE1D}
// *********************************************************************//
interface WHTMLControlEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: WHTMLControlEvents1
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE0-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
interface WHTMLControlEvents1 : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: WHTMLControlEvents2
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE1-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
interface WHTMLControlEvents2 : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: WHTMLControlEvents3
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE2-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
interface WHTMLControlEvents3 : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: WHTMLControlEvents4
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE3-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
interface WHTMLControlEvents4 : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: WHTMLControlEvents5
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE4-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
interface WHTMLControlEvents5 : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: WHTMLControlEvents6
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE5-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
interface WHTMLControlEvents6 : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: WHTMLControlEvents7
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE6-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
interface WHTMLControlEvents7 : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: WHTMLControlEvents9
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE8-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
interface WHTMLControlEvents9 : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: WHTMLControlEvents10
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE9-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
interface WHTMLControlEvents10 : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: IPage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5CEF5613-713D-11CE-80C9-00AA00611080}
// *********************************************************************//
interface IPage  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Msforms_97::Controls_** Controls/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Selected(Msforms_97::Controls_** Selected/*[out,retval]*/) = 0; // [270]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveControl(Msforms_97::Control** ActiveControl/*[out,retval]*/) = 0; // [256]
  virtual HRESULT STDMETHODCALLTYPE get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/) = 0; // [257]
  virtual HRESULT STDMETHODCALLTYPE get_CanRedo(VARIANT_BOOL* CanRedo/*[out,retval]*/) = 0; // [258]
  virtual HRESULT STDMETHODCALLTYPE get_CanUndo(VARIANT_BOOL* CanUndo/*[out,retval]*/) = 0; // [259]
  virtual HRESULT STDMETHODCALLTYPE set_Cycle(Msforms_97::fmCycle Cycle/*[in]*/) = 0; // [260]
  virtual HRESULT STDMETHODCALLTYPE get_Cycle(Msforms_97::fmCycle* Cycle/*[out,retval]*/) = 0; // [260]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Caption/*[in]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE set_ControlTipText(BSTR tooltip/*[in]*/) = 0; // [-2147418043]
  virtual HRESULT STDMETHODCALLTYPE get_ControlTipText(BSTR* tooltip/*[out,retval]*/) = 0; // [-2147418043]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL fEnabled/*[in]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE set_Index(long Index/*[in]*/) = 0; // [-2147356416]
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* Index/*[out,retval]*/) = 0; // [-2147356416]
  virtual HRESULT STDMETHODCALLTYPE _GetInsideHeight(long* InsideHeight/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InsideHeight(float* InsideHeight/*[out,retval]*/) = 0; // [262]
  virtual HRESULT STDMETHODCALLTYPE _GetInsideWidth(long* InsideWidth/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InsideWidth(float* InsideWidth/*[out,retval]*/) = 0; // [263]
  virtual HRESULT STDMETHODCALLTYPE set_KeepScrollBarsVisible(Msforms_97::fmScrollBars ScrollBars/*[in]*/) = 0; // [264]
  virtual HRESULT STDMETHODCALLTYPE get_KeepScrollBarsVisible(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/) = 0; // [264]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [-2147418112]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [-2147418112]
  virtual HRESULT STDMETHODCALLTYPE set_PictureAlignment(Msforms_97::fmPictureAlignment PictureAlignment/*[in]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_PictureAlignment(Msforms_97::fmPictureAlignment* PictureAlignment/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE set_Picture(IPictureDisp** Picture/*[in]*/) = 0; // [-523]
  virtual HRESULT STDMETHODCALLTYPE _set_Picture(IPictureDisp** Picture/*[in]*/) = 0; // [-523]
  virtual HRESULT STDMETHODCALLTYPE get_Picture(IPictureDisp*** Picture/*[out,retval]*/) = 0; // [-523]
  virtual HRESULT STDMETHODCALLTYPE set_PictureSizeMode(Msforms_97::fmPictureSizeMode PictureSizeMode/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_PictureSizeMode(Msforms_97::fmPictureSizeMode* PictureSizeMode/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_PictureTiling(VARIANT_BOOL PictureTiling/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_PictureTiling(VARIANT_BOOL* PictureTiling/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_ScrollBars(Msforms_97::fmScrollBars ScrollBars/*[in]*/) = 0; // [265]
  virtual HRESULT STDMETHODCALLTYPE get_ScrollBars(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/) = 0; // [265]
  virtual HRESULT STDMETHODCALLTYPE _SetScrollHeight(long ScrollHeight/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetScrollHeight(long* ScrollHeight/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ScrollHeight(float ScrollHeight/*[in]*/) = 0; // [266]
  virtual HRESULT STDMETHODCALLTYPE get_ScrollHeight(float* ScrollHeight/*[out,retval]*/) = 0; // [266]
  virtual HRESULT STDMETHODCALLTYPE _SetScrollLeft(long ScrollLeft/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetScrollLeft(long* ScrollLeft/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ScrollLeft(float ScrollLeft/*[in]*/) = 0; // [267]
  virtual HRESULT STDMETHODCALLTYPE get_ScrollLeft(float* ScrollLeft/*[out,retval]*/) = 0; // [267]
  virtual HRESULT STDMETHODCALLTYPE _SetScrollTop(long ScrollTop/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetScrollTop(long* ScrollTop/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ScrollTop(float ScrollTop/*[in]*/) = 0; // [268]
  virtual HRESULT STDMETHODCALLTYPE get_ScrollTop(float* ScrollTop/*[out,retval]*/) = 0; // [268]
  virtual HRESULT STDMETHODCALLTYPE _SetScrollWidth(long ScrollWidth/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetScrollWidth(long* ScrollWidth/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ScrollWidth(float ScrollWidth/*[in]*/) = 0; // [269]
  virtual HRESULT STDMETHODCALLTYPE get_ScrollWidth(float* ScrollWidth/*[out,retval]*/) = 0; // [269]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR Tag/*[in]*/) = 0; // [-2147418101]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* Tag/*[out,retval]*/) = 0; // [-2147418101]
  virtual HRESULT STDMETHODCALLTYPE set_TransitionEffect(Msforms_97::fmTransitionEffect TransitionEffect/*[in]*/) = 0; // [-2147356415]
  virtual HRESULT STDMETHODCALLTYPE get_TransitionEffect(Msforms_97::fmTransitionEffect* TransitionEffect/*[out,retval]*/) = 0; // [-2147356415]
  virtual HRESULT STDMETHODCALLTYPE set_TransitionPeriod(long TransitionPeriod/*[in]*/) = 0; // [-2147356414]
  virtual HRESULT STDMETHODCALLTYPE get_TransitionPeriod(long* TransitionPeriod/*[out,retval]*/) = 0; // [-2147356414]
  virtual HRESULT STDMETHODCALLTYPE set_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide side/*[in]*/) = 0; // [271]
  virtual HRESULT STDMETHODCALLTYPE get_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide* side/*[out,retval]*/) = 0; // [271]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL fVisible/*[in]*/) = 0; // [-2147418105]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* fVisible/*[out,retval]*/) = 0; // [-2147418105]
  virtual HRESULT STDMETHODCALLTYPE set_Zoom(short Zoom/*[in]*/) = 0; // [272]
  virtual HRESULT STDMETHODCALLTYPE get_Zoom(short* Zoom/*[out,retval]*/) = 0; // [272]
  virtual HRESULT STDMETHODCALLTYPE set_DesignMode(Msforms_97::fmMode DesignMode/*[in]*/) = 0; // [384]
  virtual HRESULT STDMETHODCALLTYPE get_DesignMode(Msforms_97::fmMode* DesignMode/*[out,retval]*/) = 0; // [384]
  virtual HRESULT STDMETHODCALLTYPE set_ShowToolbox(Msforms_97::fmMode ShowToolbox/*[in]*/) = 0; // [385]
  virtual HRESULT STDMETHODCALLTYPE get_ShowToolbox(Msforms_97::fmMode* ShowToolbox/*[out,retval]*/) = 0; // [385]
  virtual HRESULT STDMETHODCALLTYPE set_ShowGridDots(Msforms_97::fmMode ShowGridDots/*[in]*/) = 0; // [386]
  virtual HRESULT STDMETHODCALLTYPE get_ShowGridDots(Msforms_97::fmMode* ShowGridDots/*[out,retval]*/) = 0; // [386]
  virtual HRESULT STDMETHODCALLTYPE set_SnapToGrid(Msforms_97::fmMode SnapToGrid/*[in]*/) = 0; // [387]
  virtual HRESULT STDMETHODCALLTYPE get_SnapToGrid(Msforms_97::fmMode* SnapToGrid/*[out,retval]*/) = 0; // [387]
  virtual HRESULT STDMETHODCALLTYPE set_GridX(float GridX/*[in]*/) = 0; // [388]
  virtual HRESULT STDMETHODCALLTYPE get_GridX(float* GridX/*[out,retval]*/) = 0; // [388]
  virtual HRESULT STDMETHODCALLTYPE _SetGridX(long GridX/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetGridX(long* GridX/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_GridY(float GridY/*[in]*/) = 0; // [389]
  virtual HRESULT STDMETHODCALLTYPE get_GridY(float* GridY/*[out,retval]*/) = 0; // [389]
  virtual HRESULT STDMETHODCALLTYPE _SetGridY(long GridY/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetGridY(long* GridY/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Copy(void) = 0; // [512]
  virtual HRESULT STDMETHODCALLTYPE Cut(void) = 0; // [513]
  virtual HRESULT STDMETHODCALLTYPE Paste(void) = 0; // [514]
  virtual HRESULT STDMETHODCALLTYPE RedoAction(void) = 0; // [515]
  virtual HRESULT STDMETHODCALLTYPE Repaint(void) = 0; // [516]
  virtual HRESULT STDMETHODCALLTYPE Scroll(VARIANT xAction/*[in,opt]*/= TNoParam(), 
                                           VARIANT yAction/*[in,opt]*/= TNoParam()) = 0; // [517]
  virtual HRESULT STDMETHODCALLTYPE SetDefaultTabOrder(void) = 0; // [518]
  virtual HRESULT STDMETHODCALLTYPE UndoAction(void) = 0; // [519]
  virtual HRESULT STDMETHODCALLTYPE set_Accelerator(BSTR Accelerator/*[in]*/) = 0; // [-543]
  virtual HRESULT STDMETHODCALLTYPE get_Accelerator(BSTR* Accelerator/*[out,retval]*/) = 0; // [-543]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [-2147418104]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msforms_97::Controls_* __fastcall get_Controls(void)
  {
    Msforms_97::Controls_* Controls;
    OLECHECK(this->get_Controls((Msforms_97::Controls_**)&Controls));
    return Controls;
  }

  Msforms_97::Controls_* __fastcall get_Selected(void)
  {
    Msforms_97::Controls_* Selected;
    OLECHECK(this->get_Selected((Msforms_97::Controls_**)&Selected));
    return Selected;
  }

  Msforms_97::Control* __fastcall get_ActiveControl(void)
  {
    Msforms_97::Control* ActiveControl;
    OLECHECK(this->get_ActiveControl((Msforms_97::Control**)&ActiveControl));
    return ActiveControl;
  }

  VARIANT_BOOL __fastcall get_CanPaste(void)
  {
    VARIANT_BOOL CanPaste;
    OLECHECK(this->get_CanPaste((VARIANT_BOOL*)&CanPaste));
    return CanPaste;
  }

  VARIANT_BOOL __fastcall get_CanRedo(void)
  {
    VARIANT_BOOL CanRedo;
    OLECHECK(this->get_CanRedo((VARIANT_BOOL*)&CanRedo));
    return CanRedo;
  }

  VARIANT_BOOL __fastcall get_CanUndo(void)
  {
    VARIANT_BOOL CanUndo;
    OLECHECK(this->get_CanUndo((VARIANT_BOOL*)&CanUndo));
    return CanUndo;
  }

  Msforms_97::fmCycle __fastcall get_Cycle(void)
  {
    Msforms_97::fmCycle Cycle;
    OLECHECK(this->get_Cycle((Msforms_97::fmCycle*)&Cycle));
    return Cycle;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  BSTR __fastcall get_ControlTipText(void)
  {
    BSTR tooltip = 0;
    OLECHECK(this->get_ControlTipText((BSTR*)&tooltip));
    return tooltip;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL fEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&fEnabled));
    return fEnabled;
  }

  long __fastcall get_Index(void)
  {
    long Index;
    OLECHECK(this->get_Index((long*)&Index));
    return Index;
  }

  float __fastcall get_InsideHeight(void)
  {
    float InsideHeight;
    OLECHECK(this->get_InsideHeight((float*)&InsideHeight));
    return InsideHeight;
  }

  float __fastcall get_InsideWidth(void)
  {
    float InsideWidth;
    OLECHECK(this->get_InsideWidth((float*)&InsideWidth));
    return InsideWidth;
  }

  Msforms_97::fmScrollBars __fastcall get_KeepScrollBarsVisible(void)
  {
    Msforms_97::fmScrollBars ScrollBars;
    OLECHECK(this->get_KeepScrollBarsVisible((Msforms_97::fmScrollBars*)&ScrollBars));
    return ScrollBars;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Msforms_97::fmPictureAlignment __fastcall get_PictureAlignment(void)
  {
    Msforms_97::fmPictureAlignment PictureAlignment;
    OLECHECK(this->get_PictureAlignment((Msforms_97::fmPictureAlignment*)&PictureAlignment));
    return PictureAlignment;
  }

  IPictureDisp** __fastcall get_Picture(void)
  {
    IPictureDisp** Picture;
    OLECHECK(this->get_Picture((IPictureDisp***)&Picture));
    return Picture;
  }

  Msforms_97::fmPictureSizeMode __fastcall get_PictureSizeMode(void)
  {
    Msforms_97::fmPictureSizeMode PictureSizeMode;
    OLECHECK(this->get_PictureSizeMode((Msforms_97::fmPictureSizeMode*)&PictureSizeMode));
    return PictureSizeMode;
  }

  VARIANT_BOOL __fastcall get_PictureTiling(void)
  {
    VARIANT_BOOL PictureTiling;
    OLECHECK(this->get_PictureTiling((VARIANT_BOOL*)&PictureTiling));
    return PictureTiling;
  }

  Msforms_97::fmScrollBars __fastcall get_ScrollBars(void)
  {
    Msforms_97::fmScrollBars ScrollBars;
    OLECHECK(this->get_ScrollBars((Msforms_97::fmScrollBars*)&ScrollBars));
    return ScrollBars;
  }

  float __fastcall get_ScrollHeight(void)
  {
    float ScrollHeight;
    OLECHECK(this->get_ScrollHeight((float*)&ScrollHeight));
    return ScrollHeight;
  }

  float __fastcall get_ScrollLeft(void)
  {
    float ScrollLeft;
    OLECHECK(this->get_ScrollLeft((float*)&ScrollLeft));
    return ScrollLeft;
  }

  float __fastcall get_ScrollTop(void)
  {
    float ScrollTop;
    OLECHECK(this->get_ScrollTop((float*)&ScrollTop));
    return ScrollTop;
  }

  float __fastcall get_ScrollWidth(void)
  {
    float ScrollWidth;
    OLECHECK(this->get_ScrollWidth((float*)&ScrollWidth));
    return ScrollWidth;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR Tag = 0;
    OLECHECK(this->get_Tag((BSTR*)&Tag));
    return Tag;
  }

  Msforms_97::fmTransitionEffect __fastcall get_TransitionEffect(void)
  {
    Msforms_97::fmTransitionEffect TransitionEffect;
    OLECHECK(this->get_TransitionEffect((Msforms_97::fmTransitionEffect*)&TransitionEffect));
    return TransitionEffect;
  }

  long __fastcall get_TransitionPeriod(void)
  {
    long TransitionPeriod;
    OLECHECK(this->get_TransitionPeriod((long*)&TransitionPeriod));
    return TransitionPeriod;
  }

  Msforms_97::fmVerticalScrollBarSide __fastcall get_VerticalScrollBarSide(void)
  {
    Msforms_97::fmVerticalScrollBarSide side;
    OLECHECK(this->get_VerticalScrollBarSide((Msforms_97::fmVerticalScrollBarSide*)&side));
    return side;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL fVisible;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&fVisible));
    return fVisible;
  }

  short __fastcall get_Zoom(void)
  {
    short Zoom;
    OLECHECK(this->get_Zoom((short*)&Zoom));
    return Zoom;
  }

  Msforms_97::fmMode __fastcall get_DesignMode(void)
  {
    Msforms_97::fmMode DesignMode;
    OLECHECK(this->get_DesignMode((Msforms_97::fmMode*)&DesignMode));
    return DesignMode;
  }

  Msforms_97::fmMode __fastcall get_ShowToolbox(void)
  {
    Msforms_97::fmMode ShowToolbox;
    OLECHECK(this->get_ShowToolbox((Msforms_97::fmMode*)&ShowToolbox));
    return ShowToolbox;
  }

  Msforms_97::fmMode __fastcall get_ShowGridDots(void)
  {
    Msforms_97::fmMode ShowGridDots;
    OLECHECK(this->get_ShowGridDots((Msforms_97::fmMode*)&ShowGridDots));
    return ShowGridDots;
  }

  Msforms_97::fmMode __fastcall get_SnapToGrid(void)
  {
    Msforms_97::fmMode SnapToGrid;
    OLECHECK(this->get_SnapToGrid((Msforms_97::fmMode*)&SnapToGrid));
    return SnapToGrid;
  }

  float __fastcall get_GridX(void)
  {
    float GridX;
    OLECHECK(this->get_GridX((float*)&GridX));
    return GridX;
  }

  float __fastcall get_GridY(void)
  {
    float GridY;
    OLECHECK(this->get_GridY((float*)&GridY));
    return GridY;
  }

  BSTR __fastcall get_Accelerator(void)
  {
    BSTR Accelerator = 0;
    OLECHECK(this->get_Accelerator((BSTR*)&Accelerator));
    return Accelerator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }


  __property   Msforms_97::Controls_* Controls = {read = get_Controls};
  __property   Msforms_97::Controls_* Selected = {read = get_Selected};
  __property   Msforms_97::Control* ActiveControl = {read = get_ActiveControl};
  __property   VARIANT_BOOL    CanPaste = {read = get_CanPaste};
  __property   VARIANT_BOOL    CanRedo = {read = get_CanRedo};
  __property   VARIANT_BOOL    CanUndo = {read = get_CanUndo};
  __property   Msforms_97::fmCycle Cycle = {read = get_Cycle, write = set_Cycle};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   float           InsideHeight = {read = get_InsideHeight};
  __property   float           InsideWidth = {read = get_InsideWidth};
  __property   Msforms_97::fmScrollBars KeepScrollBarsVisible = {read = get_KeepScrollBarsVisible, write = set_KeepScrollBarsVisible};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Msforms_97::fmPictureAlignment PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   IPictureDisp**  Picture = {read = get_Picture, write = set_Picture};
  __property   Msforms_97::fmPictureSizeMode PictureSizeMode = {read = get_PictureSizeMode, write = set_PictureSizeMode};
  __property   VARIANT_BOOL    PictureTiling = {read = get_PictureTiling, write = set_PictureTiling};
  __property   Msforms_97::fmScrollBars ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   float           ScrollHeight = {read = get_ScrollHeight, write = set_ScrollHeight};
  __property   float           ScrollLeft = {read = get_ScrollLeft, write = set_ScrollLeft};
  __property   float           ScrollTop = {read = get_ScrollTop, write = set_ScrollTop};
  __property   float           ScrollWidth = {read = get_ScrollWidth, write = set_ScrollWidth};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   Msforms_97::fmTransitionEffect TransitionEffect = {read = get_TransitionEffect, write = set_TransitionEffect};
  __property   long            TransitionPeriod = {read = get_TransitionPeriod, write = set_TransitionPeriod};
  __property   Msforms_97::fmVerticalScrollBarSide VerticalScrollBarSide = {read = get_VerticalScrollBarSide, write = set_VerticalScrollBarSide};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   short           Zoom = {read = get_Zoom, write = set_Zoom};
  __property   Msforms_97::fmMode DesignMode = {read = get_DesignMode, write = set_DesignMode};
  __property   Msforms_97::fmMode ShowToolbox = {read = get_ShowToolbox, write = set_ShowToolbox};
  __property   Msforms_97::fmMode ShowGridDots = {read = get_ShowGridDots, write = set_ShowGridDots};
  __property   Msforms_97::fmMode SnapToGrid = {read = get_SnapToGrid, write = set_SnapToGrid};
  __property   float           GridX = {read = get_GridX, write = set_GridX};
  __property   float           GridY = {read = get_GridY, write = set_GridY};
  __property   BSTR            Accelerator = {read = get_Accelerator, write = set_Accelerator};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Pages
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {92E11A03-7358-11CE-80CB-00AA00611080}
// *********************************************************************//
interface Pages  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* plCount/*[out,retval]*/) = 0; // [60]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT varg/*[in]*/, LPDISPATCH* ppDisap/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Enum(LPUNKNOWN* ppEnum/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Add(VARIANT bstrName/*[in,opt]*/, 
                                        VARIANT bstrCaption/*[in,opt]*/, VARIANT lIndex/*[in,opt]*/, 
                                        Msforms_97::Page** ppPage/*[out,retval]*/) = 0; // [66]
  virtual HRESULT STDMETHODCALLTYPE _AddCtrl(long* clsid/*[in]*/, BSTR bstrName/*[in]*/, 
                                             BSTR bstrCaption/*[in]*/, 
                                             Msforms_97::Page** ppPage/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _InsertCtrl(long* clsid/*[in]*/, BSTR bstrName/*[in]*/, 
                                                BSTR bstrCaption/*[in]*/, long lIndex/*[in]*/, 
                                                Msforms_97::Page** ppCtrl/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetItemByIndex(long lIndex/*[in]*/, 
                                                    Msforms_97::Control** ppCtrl/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetItemByName(BSTR pstrName/*[in]*/, 
                                                   Msforms_97::Control** ppCtrl/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Remove(VARIANT varg/*[in]*/) = 0; // [67]
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0; // [62]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long plCount;
    OLECHECK(this->get_Count((long*)&plCount));
    return plCount;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppEnum));
    return ppEnum;
  }

  LPDISPATCH __fastcall Item(VARIANT varg/*[in]*/)
  {
    LPDISPATCH ppDisap;
    OLECHECK(this->Item(varg, (LPDISPATCH*)&ppDisap));
    return ppDisap;
  }

  LPUNKNOWN __fastcall Enum(void)
  {
    LPUNKNOWN ppEnum;
    OLECHECK(this->Enum((LPUNKNOWN*)&ppEnum));
    return ppEnum;
  }

  Msforms_97::Page* __fastcall Add(VARIANT bstrName/*[in,opt]*/= TNoParam(), 
                                   VARIANT bstrCaption/*[in,opt]*/= TNoParam(), 
                                   VARIANT lIndex/*[in,opt]*/= TNoParam())
  {
    Msforms_97::Page* ppPage;
    OLECHECK(this->Add(bstrName, bstrCaption, lIndex, (Msforms_97::Page**)&ppPage));
    return ppPage;
  }

  Msforms_97::Page* __fastcall _AddCtrl(long* clsid/*[in]*/, BSTR bstrName/*[in]*/, 
                                        BSTR bstrCaption/*[in]*/)
  {
    Msforms_97::Page* ppPage;
    OLECHECK(this->_AddCtrl(clsid, bstrName, bstrCaption, (Msforms_97::Page**)&ppPage));
    return ppPage;
  }

  Msforms_97::Page* __fastcall _InsertCtrl(long* clsid/*[in]*/, BSTR bstrName/*[in]*/, 
                                           BSTR bstrCaption/*[in]*/, long lIndex/*[in]*/)
  {
    Msforms_97::Page* ppCtrl;
    OLECHECK(this->_InsertCtrl(clsid, bstrName, bstrCaption, lIndex, (Msforms_97::Page**)&ppCtrl));
    return ppCtrl;
  }

  Msforms_97::Control* __fastcall _GetItemByIndex(long lIndex/*[in]*/)
  {
    Msforms_97::Control* ppCtrl;
    OLECHECK(this->_GetItemByIndex(lIndex, (Msforms_97::Control**)&ppCtrl));
    return ppCtrl;
  }

  Msforms_97::Control* __fastcall _GetItemByName(BSTR pstrName/*[in]*/)
  {
    Msforms_97::Control* ppCtrl;
    OLECHECK(this->_GetItemByName(pstrName, (Msforms_97::Control**)&ppCtrl));
    return ppCtrl;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMultiPage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04598FC9-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
interface IMultiPage  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Msforms_97::OLE_COLOR color/*[in]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Msforms_97::OLE_COLOR* color/*[out,retval]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Msforms_97::OLE_COLOR color/*[in]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Msforms_97::OLE_COLOR* color/*[out,retval]*/) = 0; // [-513]
  virtual HRESULT STDMETHODCALLTYPE set__Font_Reserved(IFontDisp** Param1/*[in]*/) = 0; // [2147483135]
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp** Font/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp*** Font/*[out,retval]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR FontName/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* FontName/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(VARIANT_BOOL fBold/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(VARIANT_BOOL* fBold/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(VARIANT_BOOL fItalic/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(VARIANT_BOOL* fItalic/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_FontUnderline(VARIANT_BOOL fUnder/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_FontUnderline(VARIANT_BOOL* fUnder/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_FontStrikethru(VARIANT_BOOL fStrike/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_FontStrikethru(VARIANT_BOOL* fStrike/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(CURRENCY Size/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(CURRENCY* Size/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_MultiRow(VARIANT_BOOL fMultiRow/*[in]*/) = 0; // [514]
  virtual HRESULT STDMETHODCALLTYPE get_MultiRow(VARIANT_BOOL* fMultiRow/*[out,retval]*/) = 0; // [514]
  virtual HRESULT STDMETHODCALLTYPE set_Style(Msforms_97::fmTabStyle Style/*[in]*/) = 0; // [513]
  virtual HRESULT STDMETHODCALLTYPE get_Style(Msforms_97::fmTabStyle* Style/*[out,retval]*/) = 0; // [513]
  virtual HRESULT STDMETHODCALLTYPE set_TabOrientation(Msforms_97::fmTabOrientation Layout/*[in]*/) = 0; // [512]
  virtual HRESULT STDMETHODCALLTYPE get_TabOrientation(Msforms_97::fmTabOrientation* Layout/*[out,retval]*/) = 0; // [512]
  virtual HRESULT STDMETHODCALLTYPE _SetTabFixedWidth(long Width/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetTabFixedWidth(long* Width/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _SetTabFixedHeight(long Height/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _GetTabFixedHeight(long* Height/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Enabled/*[in]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE get_SelectedItem(Msforms_97::Page** ppPage/*[out,retval]*/) = 0; // [545]
  virtual HRESULT STDMETHODCALLTYPE get_Pages(Msforms_97::Pages** ppPages/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(long Index/*[in]*/) = 0; // [528]
  virtual HRESULT STDMETHODCALLTYPE get_Value(long* Index/*[out,retval]*/) = 0; // [528]
  virtual HRESULT STDMETHODCALLTYPE set_TabFixedWidth(float Width/*[in]*/) = 0; // [515]
  virtual HRESULT STDMETHODCALLTYPE get_TabFixedWidth(float* Width/*[out,retval]*/) = 0; // [515]
  virtual HRESULT STDMETHODCALLTYPE set_TabFixedHeight(float Height/*[in]*/) = 0; // [516]
  virtual HRESULT STDMETHODCALLTYPE get_TabFixedHeight(float* Height/*[out,retval]*/) = 0; // [516]
  virtual HRESULT STDMETHODCALLTYPE set_FontWeight(short FontWeight/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_FontWeight(short* FontWeight/*[out,retval]*/) = 0; // [7]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msforms_97::OLE_COLOR __fastcall get_BackColor(void)
  {
    Msforms_97::OLE_COLOR color;
    OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&color));
    return color;
  }

  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void)
  {
    Msforms_97::OLE_COLOR color;
    OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&color));
    return color;
  }

  IFontDisp** __fastcall get_Font(void)
  {
    IFontDisp** Font;
    OLECHECK(this->get_Font((IFontDisp***)&Font));
    return Font;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR FontName = 0;
    OLECHECK(this->get_FontName((BSTR*)&FontName));
    return FontName;
  }

  VARIANT_BOOL __fastcall get_FontBold(void)
  {
    VARIANT_BOOL fBold;
    OLECHECK(this->get_FontBold((VARIANT_BOOL*)&fBold));
    return fBold;
  }

  VARIANT_BOOL __fastcall get_FontItalic(void)
  {
    VARIANT_BOOL fItalic;
    OLECHECK(this->get_FontItalic((VARIANT_BOOL*)&fItalic));
    return fItalic;
  }

  VARIANT_BOOL __fastcall get_FontUnderline(void)
  {
    VARIANT_BOOL fUnder;
    OLECHECK(this->get_FontUnderline((VARIANT_BOOL*)&fUnder));
    return fUnder;
  }

  VARIANT_BOOL __fastcall get_FontStrikethru(void)
  {
    VARIANT_BOOL fStrike;
    OLECHECK(this->get_FontStrikethru((VARIANT_BOOL*)&fStrike));
    return fStrike;
  }

  CURRENCY __fastcall get_FontSize(void)
  {
    CURRENCY Size;
    OLECHECK(this->get_FontSize((CURRENCY*)&Size));
    return Size;
  }

  VARIANT_BOOL __fastcall get_MultiRow(void)
  {
    VARIANT_BOOL fMultiRow;
    OLECHECK(this->get_MultiRow((VARIANT_BOOL*)&fMultiRow));
    return fMultiRow;
  }

  Msforms_97::fmTabStyle __fastcall get_Style(void)
  {
    Msforms_97::fmTabStyle Style;
    OLECHECK(this->get_Style((Msforms_97::fmTabStyle*)&Style));
    return Style;
  }

  Msforms_97::fmTabOrientation __fastcall get_TabOrientation(void)
  {
    Msforms_97::fmTabOrientation Layout;
    OLECHECK(this->get_TabOrientation((Msforms_97::fmTabOrientation*)&Layout));
    return Layout;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Enabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Enabled));
    return Enabled;
  }

  Msforms_97::Page* __fastcall get_SelectedItem(void)
  {
    Msforms_97::Page* ppPage;
    OLECHECK(this->get_SelectedItem((Msforms_97::Page**)&ppPage));
    return ppPage;
  }

  Msforms_97::Pages* __fastcall get_Pages(void)
  {
    Msforms_97::Pages* ppPages;
    OLECHECK(this->get_Pages((Msforms_97::Pages**)&ppPages));
    return ppPages;
  }

  long __fastcall get_Value(void)
  {
    long Index;
    OLECHECK(this->get_Value((long*)&Index));
    return Index;
  }

  float __fastcall get_TabFixedWidth(void)
  {
    float Width;
    OLECHECK(this->get_TabFixedWidth((float*)&Width));
    return Width;
  }

  float __fastcall get_TabFixedHeight(void)
  {
    float Height;
    OLECHECK(this->get_TabFixedHeight((float*)&Height));
    return Height;
  }

  short __fastcall get_FontWeight(void)
  {
    short FontWeight;
    OLECHECK(this->get_FontWeight((short*)&FontWeight));
    return FontWeight;
  }


  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   VARIANT_BOOL    FontBold = {read = get_FontBold, write = set_FontBold};
  __property   VARIANT_BOOL    FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   VARIANT_BOOL    FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   VARIANT_BOOL    FontStrikethru = {read = get_FontStrikethru, write = set_FontStrikethru};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   VARIANT_BOOL    MultiRow = {read = get_MultiRow, write = set_MultiRow};
  __property   Msforms_97::fmTabStyle Style = {read = get_Style, write = set_Style};
  __property   Msforms_97::fmTabOrientation TabOrientation = {read = get_TabOrientation, write = set_TabOrientation};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   Msforms_97::Page* SelectedItem = {read = get_SelectedItem};
  __property   Msforms_97::Pages* Pages = {read = get_Pages};
  __property   long            Value = {read = get_Value, write = set_Value};
  __property   float           TabFixedWidth = {read = get_TabFixedWidth, write = set_TabFixedWidth};
  __property   float           TabFixedHeight = {read = get_TabFixedHeight, write = set_TabFixedHeight};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: MultiPageEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {7B020EC8-AF6C-11CE-9F46-00AA00574A4F}
// *********************************************************************//
interface MultiPageEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall AddControl(long Index/*[in]*/, 
                                             Msforms_97::Control* Control/*[in]*/)
  {
    _TDispID _dispid(/* AddControl */ DISPID(768));
    TAutoArgs<2> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(long Index/*[in]*/, 
                                                 Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::Control* Control/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState State/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
    TAutoArgs<9> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[3] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
    _args[4] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[5] = X /*[VT_R4:0]*/;
    _args[6] = Y /*[VT_R4:0]*/;
    _args[7] = (int)State /*[VT_USERDEFINED:0]*/;
    _args[8] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[9] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(long Index/*[in]*/, 
                                                    Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::Control* Control/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
    TAutoArgs<9> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[3] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
    _args[4] = (int)Action /*[VT_USERDEFINED:0]*/;
    _args[5] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
    _args[6] = X /*[VT_R4:0]*/;
    _args[7] = Y /*[VT_R4:0]*/;
    _args[8] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
    _args[9] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Change()
  {
    _TDispID _dispid(/* Change */ DISPID(2));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall Click(long Index/*[in]*/)
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick(long Index/*[in]*/, 
                                           Msforms_97::ReturnBoolean* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* DblClick */ DISPID(-601));
    TAutoArgs<2> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Error(long Index/*[in]*/, short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
  {
    _TDispID _dispid(/* Error */ DISPID(-608));
    TAutoArgs<8> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    _args[2] = Number /*[VT_I2:0]*/;
    _args[3] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
    _args[4] = SCode /*[VT_I4:0]*/;
    _args[5] = Source /*[VT_BSTR:0]*/;
    _args[6] = HelpFile /*[VT_BSTR:0]*/;
    _args[7] = HelpContext /*[VT_I4:0]*/;
    _args[8] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Layout(long Index/*[in]*/)
  {
    _TDispID _dispid(/* Layout */ DISPID(770));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(long Index/*[in]*/, short Button/*[in]*/, 
                                            short Shift/*[in]*/, float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<5> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    _args[2] = Button /*[VT_I2:0]*/;
    _args[3] = Shift /*[VT_I2:0]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(long Index/*[in]*/, short Button/*[in]*/, 
                                            short Shift/*[in]*/, float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<5> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    _args[2] = Button /*[VT_I2:0]*/;
    _args[3] = Shift /*[VT_I2:0]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(long Index/*[in]*/, short Button/*[in]*/, 
                                          short Shift/*[in]*/, float X/*[in]*/, float Y/*[in]*/)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<5> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    _args[2] = Button /*[VT_I2:0]*/;
    _args[3] = Shift /*[VT_I2:0]*/;
    _args[4] = X /*[VT_R4:0]*/;
    _args[5] = Y /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall RemoveControl(long Index/*[in]*/, 
                                                Msforms_97::Control* Control/*[in]*/)
  {
    _TDispID _dispid(/* RemoveControl */ DISPID(771));
    TAutoArgs<2> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Scroll(long Index/*[in]*/, 
                                         Msforms_97::fmScrollAction ActionX/*[in]*/, 
                                         Msforms_97::fmScrollAction ActionY/*[in]*/, 
                                         float RequestDx/*[in]*/, float RequestDy/*[in]*/, 
                                         Msforms_97::ReturnSingle* ActualDx/*[in]*/, 
                                         Msforms_97::ReturnSingle* ActualDy/*[in]*/)
  {
    _TDispID _dispid(/* Scroll */ DISPID(772));
    TAutoArgs<7> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    _args[2] = (int)ActionX /*[VT_USERDEFINED:0]*/;
    _args[3] = (int)ActionY /*[VT_USERDEFINED:0]*/;
    _args[4] = RequestDx /*[VT_R4:0]*/;
    _args[5] = RequestDy /*[VT_R4:0]*/;
    _args[6] = (LPDISPATCH)(Msforms_97::ReturnSingle*)ActualDx /*[VT_USERDEFINED:1]*/;
    _args[7] = (LPDISPATCH)(Msforms_97::ReturnSingle*)ActualDy /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Zoom(long Index/*[in]*/, short* Percent/*[in,out]*/)
  {
    _TDispID _dispid(/* Zoom */ DISPID(773));
    TAutoArgs<2> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    _args[2] = Percent /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }


};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<IFont>  TCOMIFont;

// *********************************************************************//
// DispIntf:  Font
// Flags:     (4096) Dispatchable
// GUID:      {BEF6E003-A874-101A-8BBA-00AA00300CAB}
// *********************************************************************//
template<class T>
class FontDispT : public TAutoDriver<Font>
{
public:
  FontDispT(){}

  FontDispT(Font *pintf)
  {
    TAutoDriver<Font>::Bind(pintf, false);
  }

  FontDispT(FontPtr pintf)
  {
    TAutoDriver<Font>::Bind(pintf, true);
  }

  FontDispT& operator=(Font *pintf)
  {
    TAutoDriver<Font>::Bind(pintf, false);
    return *this;
  }

  FontDispT& operator=(FontPtr pintf)
  {
    TAutoDriver<Font>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_NewFont));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_NewFont);
  }

  void            __fastcall set_Name(BSTR Value);
  BSTR            __fastcall get_Name();
  void            __fastcall set_Size(CURRENCY Value);
  CURRENCY        __fastcall get_Size();
  void            __fastcall set_Bold(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Bold();
  void            __fastcall set_Italic(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Italic();
  void            __fastcall set_Underline(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Underline();
  void            __fastcall set_Strikethrough(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Strikethrough();
  void            __fastcall set_Weight(short Value);
  short           __fastcall get_Weight();
  void            __fastcall set_Charset(short Value);
  short           __fastcall get_Charset();

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   CURRENCY        Size = {read = get_Size, write = set_Size};
  __property   VARIANT_BOOL    Bold = {read = get_Bold, write = set_Bold};
  __property   VARIANT_BOOL    Italic = {read = get_Italic, write = set_Italic};
  __property   VARIANT_BOOL    Underline = {read = get_Underline, write = set_Underline};
  __property   VARIANT_BOOL    Strikethrough = {read = get_Strikethrough, write = set_Strikethrough};
  __property   short           Weight = {read = get_Weight, write = set_Weight};
  __property   short           Charset = {read = get_Charset, write = set_Charset};
};
typedef FontDispT<Font> FontDisp;

// *********************************************************************//
// SmartIntf: TCOMIDataAutoWrapper
// Interface: IDataAutoWrapper
// *********************************************************************//
template <class T /* IDataAutoWrapper */ >
class TCOMIDataAutoWrapperT : public TComInterface<IDataAutoWrapper>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIDataAutoWrapperT() {}
  TCOMIDataAutoWrapperT(IDataAutoWrapper *intf, bool addRef = false) : TComInterface<IDataAutoWrapper>(intf, addRef) {}
  TCOMIDataAutoWrapperT(const TCOMIDataAutoWrapperT& src) : TComInterface<IDataAutoWrapper>(src) {}
  TCOMIDataAutoWrapperT& operator=(const TCOMIDataAutoWrapperT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall GetFormat(VARIANT Format/*[in]*/, VARIANT_BOOL* Support/*[out,retval]*/);
  VARIANT_BOOL    __fastcall GetFormat(VARIANT Format/*[in]*/);
  HRESULT         __fastcall GetText(VARIANT Format/*[in,opt]*/, BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall GetText(VARIANT Format/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall SetText(BSTR Text/*[in]*/, VARIANT Format/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall PutInClipboard(void);
  HRESULT         __fastcall GetFromClipboard(void);
  HRESULT         __fastcall StartDrag(VARIANT OKEffect/*[in,opt]*/, 
                                       Msforms_97::fmDropEffect* Effect/*[out,retval]*/);
  Msforms_97::fmDropEffect __fastcall StartDrag(VARIANT OKEffect/*[in,opt]*/= TNoParam());

};
typedef TCOMIDataAutoWrapperT<IDataAutoWrapper> TCOMIDataAutoWrapper;

// *********************************************************************//
// DispIntf:  IDataAutoWrapper
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EC72F590-F375-11CE-B9E8-00AA006B1A69}
// *********************************************************************//
template<class T>
class IDataAutoWrapperDispT : public TAutoDriver<IDataAutoWrapper>
{
public:
  IDataAutoWrapperDispT(){}

  IDataAutoWrapperDispT(IDataAutoWrapper *pintf)
  {
    TAutoDriver<IDataAutoWrapper>::Bind(pintf, false);
  }

  IDataAutoWrapperDispT(IDataAutoWrapperPtr pintf)
  {
    TAutoDriver<IDataAutoWrapper>::Bind(pintf, true);
  }

  IDataAutoWrapperDispT& operator=(IDataAutoWrapper *pintf)
  {
    TAutoDriver<IDataAutoWrapper>::Bind(pintf, false);
    return *this;
  }

  IDataAutoWrapperDispT& operator=(IDataAutoWrapperPtr pintf)
  {
    TAutoDriver<IDataAutoWrapper>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DataObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DataObject);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetFormat(VARIANT Format/*[in]*/, 
                                                  VARIANT_BOOL* Support/*[out,retval]*/);
  VARIANT_BOOL    __fastcall GetFormat(VARIANT Format/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetText(VARIANT Format/*[in,opt]*/, 
                                                BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall GetText(VARIANT Format/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetText(BSTR Text/*[in]*/, 
                                                VARIANT Format/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PutInClipboard();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetFromClipboard();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall StartDrag(VARIANT OKEffect/*[in,opt]*/, 
                                                  Msforms_97::fmDropEffect* Effect/*[out,retval]*/);
  Msforms_97::fmDropEffect __fastcall StartDrag(VARIANT OKEffect/*[in,opt]*/= TNoParam());

};
typedef IDataAutoWrapperDispT<IDataAutoWrapper> IDataAutoWrapperDisp;

// *********************************************************************//
// SmartIntf: TCOMIReturnInteger
// Interface: IReturnInteger
// *********************************************************************//
template <class T /* IReturnInteger */ >
class TCOMIReturnIntegerT : public TComInterface<IReturnInteger>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIReturnIntegerT() {}
  TCOMIReturnIntegerT(IReturnInteger *intf, bool addRef = false) : TComInterface<IReturnInteger>(intf, addRef) {}
  TCOMIReturnIntegerT(const TCOMIReturnIntegerT& src) : TComInterface<IReturnInteger>(src) {}
  TCOMIReturnIntegerT& operator=(const TCOMIReturnIntegerT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_Value(int Value/*[in]*/);
  HRESULT         __fastcall get_Value(int* Value/*[out,retval]*/);
  int             __fastcall get_Value(void);

  __property   int             Value = {read = get_Value, write = set_Value};
};
typedef TCOMIReturnIntegerT<IReturnInteger> TCOMIReturnInteger;

// *********************************************************************//
// DispIntf:  IReturnInteger
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {82B02370-B5BC-11CF-810F-00A0C9030074}
// *********************************************************************//
template<class T>
class IReturnIntegerDispT : public TAutoDriver<IReturnInteger>
{
public:
  IReturnIntegerDispT(){}

  IReturnIntegerDispT(IReturnInteger *pintf)
  {
    TAutoDriver<IReturnInteger>::Bind(pintf, false);
  }

  IReturnIntegerDispT(IReturnIntegerPtr pintf)
  {
    TAutoDriver<IReturnInteger>::Bind(pintf, true);
  }

  IReturnIntegerDispT& operator=(IReturnInteger *pintf)
  {
    TAutoDriver<IReturnInteger>::Bind(pintf, false);
    return *this;
  }

  IReturnIntegerDispT& operator=(IReturnIntegerPtr pintf)
  {
    TAutoDriver<IReturnInteger>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ReturnInteger));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ReturnInteger);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(int Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(int* Value/*[out,retval]*/);
  int             __fastcall get_Value(void);

  __property   int             Value = {read = get_Value, write = set_Value};
};
typedef IReturnIntegerDispT<IReturnInteger> IReturnIntegerDisp;

// *********************************************************************//
// SmartIntf: TCOMIReturnBoolean
// Interface: IReturnBoolean
// *********************************************************************//
template <class T /* IReturnBoolean */ >
class TCOMIReturnBooleanT : public TComInterface<IReturnBoolean>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIReturnBooleanT() {}
  TCOMIReturnBooleanT(IReturnBoolean *intf, bool addRef = false) : TComInterface<IReturnBoolean>(intf, addRef) {}
  TCOMIReturnBooleanT(const TCOMIReturnBooleanT& src) : TComInterface<IReturnBoolean>(src) {}
  TCOMIReturnBooleanT& operator=(const TCOMIReturnBooleanT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_Value(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_Value(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_Value(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Value(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Value(void);

  __property   TOLEBOOL        Value = {write = set_Value};
};
typedef TCOMIReturnBooleanT<IReturnBoolean> TCOMIReturnBoolean;

// *********************************************************************//
// DispIntf:  IReturnBoolean
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {82B02371-B5BC-11CF-810F-00A0C9030074}
// *********************************************************************//
template<class T>
class IReturnBooleanDispT : public TAutoDriver<IReturnBoolean>
{
public:
  IReturnBooleanDispT(){}

  IReturnBooleanDispT(IReturnBoolean *pintf)
  {
    TAutoDriver<IReturnBoolean>::Bind(pintf, false);
  }

  IReturnBooleanDispT(IReturnBooleanPtr pintf)
  {
    TAutoDriver<IReturnBoolean>::Bind(pintf, true);
  }

  IReturnBooleanDispT& operator=(IReturnBoolean *pintf)
  {
    TAutoDriver<IReturnBoolean>::Bind(pintf, false);
    return *this;
  }

  IReturnBooleanDispT& operator=(IReturnBooleanPtr pintf)
  {
    TAutoDriver<IReturnBoolean>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ReturnBoolean));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ReturnBoolean);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(VARIANT_BOOL Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Value(void);

  __property   VARIANT_BOOL    Value = {read = get_Value, write = set_Value};
};
typedef IReturnBooleanDispT<IReturnBoolean> IReturnBooleanDisp;

// *********************************************************************//
// SmartIntf: TCOMIReturnString
// Interface: IReturnString
// *********************************************************************//
template <class T /* IReturnString */ >
class TCOMIReturnStringT : public TComInterface<IReturnString>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIReturnStringT() {}
  TCOMIReturnStringT(IReturnString *intf, bool addRef = false) : TComInterface<IReturnString>(intf, addRef) {}
  TCOMIReturnStringT(const TCOMIReturnStringT& src) : TComInterface<IReturnString>(src) {}
  TCOMIReturnStringT& operator=(const TCOMIReturnStringT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_Value(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Value(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Value(void);

  __property   BSTR            Value = {read = get_Value, write = set_Value};
};
typedef TCOMIReturnStringT<IReturnString> TCOMIReturnString;

// *********************************************************************//
// DispIntf:  IReturnString
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {82B02372-B5BC-11CF-810F-00A0C9030074}
// *********************************************************************//
template<class T>
class IReturnStringDispT : public TAutoDriver<IReturnString>
{
public:
  IReturnStringDispT(){}

  IReturnStringDispT(IReturnString *pintf)
  {
    TAutoDriver<IReturnString>::Bind(pintf, false);
  }

  IReturnStringDispT(IReturnStringPtr pintf)
  {
    TAutoDriver<IReturnString>::Bind(pintf, true);
  }

  IReturnStringDispT& operator=(IReturnString *pintf)
  {
    TAutoDriver<IReturnString>::Bind(pintf, false);
    return *this;
  }

  IReturnStringDispT& operator=(IReturnStringPtr pintf)
  {
    TAutoDriver<IReturnString>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ReturnString));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ReturnString);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(BSTR Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Value(void);

  __property   BSTR            Value = {read = get_Value, write = set_Value};
};
typedef IReturnStringDispT<IReturnString> IReturnStringDisp;

// *********************************************************************//
// SmartIntf: TCOMIReturnSingle
// Interface: IReturnSingle
// *********************************************************************//
template <class T /* IReturnSingle */ >
class TCOMIReturnSingleT : public TComInterface<IReturnSingle>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIReturnSingleT() {}
  TCOMIReturnSingleT(IReturnSingle *intf, bool addRef = false) : TComInterface<IReturnSingle>(intf, addRef) {}
  TCOMIReturnSingleT(const TCOMIReturnSingleT& src) : TComInterface<IReturnSingle>(src) {}
  TCOMIReturnSingleT& operator=(const TCOMIReturnSingleT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_Value(float Value/*[in]*/);
  HRESULT         __fastcall get_Value(float* Value/*[out,retval]*/);
  float           __fastcall get_Value(void);

  __property   float           Value = {read = get_Value, write = set_Value};
};
typedef TCOMIReturnSingleT<IReturnSingle> TCOMIReturnSingle;

// *********************************************************************//
// DispIntf:  IReturnSingle
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8A683C90-BA84-11CF-8110-00A0C9030074}
// *********************************************************************//
template<class T>
class IReturnSingleDispT : public TAutoDriver<IReturnSingle>
{
public:
  IReturnSingleDispT(){}

  IReturnSingleDispT(IReturnSingle *pintf)
  {
    TAutoDriver<IReturnSingle>::Bind(pintf, false);
  }

  IReturnSingleDispT(IReturnSinglePtr pintf)
  {
    TAutoDriver<IReturnSingle>::Bind(pintf, true);
  }

  IReturnSingleDispT& operator=(IReturnSingle *pintf)
  {
    TAutoDriver<IReturnSingle>::Bind(pintf, false);
    return *this;
  }

  IReturnSingleDispT& operator=(IReturnSinglePtr pintf)
  {
    TAutoDriver<IReturnSingle>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ReturnSingle));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ReturnSingle);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(float Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(float* Value/*[out,retval]*/);
  float           __fastcall get_Value(void);

  __property   float           Value = {read = get_Value, write = set_Value};
};
typedef IReturnSingleDispT<IReturnSingle> IReturnSingleDisp;

// *********************************************************************//
// SmartIntf: TCOMIReturnEffect
// Interface: IReturnEffect
// *********************************************************************//
template <class T /* IReturnEffect */ >
class TCOMIReturnEffectT : public TComInterface<IReturnEffect>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIReturnEffectT() {}
  TCOMIReturnEffectT(IReturnEffect *intf, bool addRef = false) : TComInterface<IReturnEffect>(intf, addRef) {}
  TCOMIReturnEffectT(const TCOMIReturnEffectT& src) : TComInterface<IReturnEffect>(src) {}
  TCOMIReturnEffectT& operator=(const TCOMIReturnEffectT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_Value(Msforms_97::fmDropEffect Value/*[in]*/);
  HRESULT         __fastcall get_Value(Msforms_97::fmDropEffect* Value/*[out,retval]*/);
  Msforms_97::fmDropEffect __fastcall get_Value(void);

  __property   Msforms_97::fmDropEffect Value = {read = get_Value, write = set_Value};
};
typedef TCOMIReturnEffectT<IReturnEffect> TCOMIReturnEffect;

// *********************************************************************//
// DispIntf:  IReturnEffect
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8A683C91-BA84-11CF-8110-00A0C9030074}
// *********************************************************************//
template<class T>
class IReturnEffectDispT : public TAutoDriver<IReturnEffect>
{
public:
  IReturnEffectDispT(){}

  IReturnEffectDispT(IReturnEffect *pintf)
  {
    TAutoDriver<IReturnEffect>::Bind(pintf, false);
  }

  IReturnEffectDispT(IReturnEffectPtr pintf)
  {
    TAutoDriver<IReturnEffect>::Bind(pintf, true);
  }

  IReturnEffectDispT& operator=(IReturnEffect *pintf)
  {
    TAutoDriver<IReturnEffect>::Bind(pintf, false);
    return *this;
  }

  IReturnEffectDispT& operator=(IReturnEffectPtr pintf)
  {
    TAutoDriver<IReturnEffect>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ReturnEffect));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ReturnEffect);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(Msforms_97::fmDropEffect Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(Msforms_97::fmDropEffect* Value/*[out,retval]*/);
  Msforms_97::fmDropEffect __fastcall get_Value(void);

  __property   Msforms_97::fmDropEffect Value = {read = get_Value, write = set_Value};
};
typedef IReturnEffectDispT<IReturnEffect> IReturnEffectDisp;

// *********************************************************************//
// SmartIntf: TCOMIControl
// Interface: IControl
// *********************************************************************//
template <class T /* IControl */ >
class TCOMIControlT : public TComInterface<IControl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIControlT() {}
  TCOMIControlT(IControl *intf, bool addRef = false) : TComInterface<IControl>(intf, addRef) {}
  TCOMIControlT(const TCOMIControlT& src) : TComInterface<IControl>(src) {}
  TCOMIControlT& operator=(const TCOMIControlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_Cancel(VARIANT_BOOL Cancel/*[in]*/);
  HRESULT         __fastcall set_Cancel(TOLEBOOL Cancel/*[in]*/);
  HRESULT         __fastcall get_Cancel(VARIANT_BOOL* Cancel/*[out,retval]*/);
  HRESULT         __fastcall get_Cancel(TOLEBOOL* Cancel/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Cancel(void);
  HRESULT         __fastcall set_ControlSource(BSTR ControlSource/*[in]*/);
  HRESULT         __fastcall get_ControlSource(BSTR* ControlSource/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT         __fastcall set_ControlTipText(BSTR ControlTipText/*[in]*/);
  HRESULT         __fastcall get_ControlTipText(BSTR* ControlTipText/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT         __fastcall set_Default(VARIANT_BOOL Default/*[in]*/);
  HRESULT         __fastcall set_Default(TOLEBOOL Default/*[in]*/);
  HRESULT         __fastcall get_Default(VARIANT_BOOL* Default/*[out,retval]*/);
  HRESULT         __fastcall get_Default(TOLEBOOL* Default/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Default(void);
  HRESULT         __fastcall _SetHeight(long Height/*[in]*/);
  HRESULT         __fastcall _GetHeight(long* Height/*[out]*/);
  HRESULT         __fastcall set_Height(float Height/*[in]*/);
  HRESULT         __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT         __fastcall set_HelpContextID(long HelpContextID/*[in]*/);
  HRESULT         __fastcall get_HelpContextID(long* HelpContextID/*[out,retval]*/);
  long            __fastcall get_HelpContextID(void);
  HRESULT         __fastcall set_InSelection(VARIANT_BOOL InSelection/*[in]*/);
  HRESULT         __fastcall set_InSelection(TOLEBOOL InSelection/*[in]*/);
  HRESULT         __fastcall get_InSelection(VARIANT_BOOL* InSelection/*[out,retval]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* InSelection/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall get_LayoutEffect(Msforms_97::fmLayoutEffect* LayoutEffect/*[out,retval]*/);
  Msforms_97::fmLayoutEffect __fastcall get_LayoutEffect(void);
  HRESULT         __fastcall _SetLeft(long Left/*[in]*/);
  HRESULT         __fastcall _GetLeft(long* Left/*[out]*/);
  HRESULT         __fastcall set_Left(float Left/*[in]*/);
  HRESULT         __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT         __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall _GetOldHeight(long* OldHeight/*[out]*/);
  HRESULT         __fastcall get_OldHeight(float* OldHeight/*[out,retval]*/);
  float           __fastcall get_OldHeight(void);
  HRESULT         __fastcall _GetOldLeft(long* OldLeft/*[out]*/);
  HRESULT         __fastcall get_OldLeft(float* OldLeft/*[out,retval]*/);
  float           __fastcall get_OldLeft(void);
  HRESULT         __fastcall _GetOldTop(long* OldTop/*[out]*/);
  HRESULT         __fastcall get_OldTop(float* OldTop/*[out,retval]*/);
  float           __fastcall get_OldTop(void);
  HRESULT         __fastcall _GetOldWidth(long* OldWidth/*[out]*/);
  HRESULT         __fastcall get_OldWidth(float* OldWidth/*[out,retval]*/);
  float           __fastcall get_OldWidth(void);
  HRESULT         __fastcall get_Object(LPDISPATCH* Object/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Object(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall set_RowSource(BSTR RowSource/*[in]*/);
  HRESULT         __fastcall get_RowSource(BSTR* RowSource/*[out,retval]*/);
  BSTR            __fastcall get_RowSource(void);
  HRESULT         __fastcall set_RowSourceType(short RowSourceType/*[in]*/);
  HRESULT         __fastcall get_RowSourceType(short* RowSourceType/*[out,retval]*/);
  short           __fastcall get_RowSourceType(void);
  HRESULT         __fastcall set_TabIndex(short TabIndex/*[in]*/);
  HRESULT         __fastcall get_TabIndex(short* TabIndex/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT         __fastcall set_TabStop(VARIANT_BOOL TabStop/*[in]*/);
  HRESULT         __fastcall set_TabStop(TOLEBOOL TabStop/*[in]*/);
  HRESULT         __fastcall get_TabStop(VARIANT_BOOL* TabStop/*[out,retval]*/);
  HRESULT         __fastcall get_TabStop(TOLEBOOL* TabStop/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT         __fastcall set_Tag(BSTR Tag/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* Tag/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall _SetTop(long Top/*[in]*/);
  HRESULT         __fastcall _GetTop(long* Top/*[out]*/);
  HRESULT         __fastcall set_Top(float Top/*[in]*/);
  HRESULT         __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT         __fastcall set_BoundValue(VARIANT* BoundValue/*[in]*/);
  HRESULT         __fastcall get_BoundValue(VARIANT* BoundValue/*[out,retval]*/);
  VARIANT         __fastcall get_BoundValue(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL Visible/*[in]*/);
  HRESULT         __fastcall set_Visible(TOLEBOOL Visible/*[in]*/);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* Visible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall _SetWidth(long Width/*[in]*/);
  HRESULT         __fastcall _GetWidth(long* Width/*[out]*/);
  HRESULT         __fastcall set_Width(float Width/*[in]*/);
  HRESULT         __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT         __fastcall Move(VARIANT Left/*[in,opt]*/= TNoParam(), 
                                  VARIANT Top/*[in,opt]*/= TNoParam(), 
                                  VARIANT Width/*[in,opt]*/= TNoParam(), 
                                  VARIANT Height/*[in,opt]*/= TNoParam(), 
                                  VARIANT Layout/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall ZOrder(VARIANT zPosition/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Select(VARIANT_BOOL SelectInGroup/*[in]*/);
  HRESULT         __fastcall SetFocus(void);
  HRESULT         __fastcall _GethWnd(int* hWnd/*[out,retval]*/);
  int             __fastcall _GethWnd(void);
  HRESULT         __fastcall _GetID(long* ID/*[out,retval]*/);
  long            __fastcall _GetID(void);
  HRESULT         __fastcall _Move(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                   long Height/*[in]*/);
  HRESULT         __fastcall _ZOrder(Msforms_97::fmZOrder zPosition/*[in]*/);

  __property   TOLEBOOL        Cancel = {write = set_Cancel};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   TOLEBOOL        Default = {write = set_Default};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HelpContextID = {read = get_HelpContextID, write = set_HelpContextID};
  __property   TOLEBOOL        InSelection = {write = set_InSelection};
  __property   Msforms_97::fmLayoutEffect LayoutEffect = {read = get_LayoutEffect};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   float           OldHeight = {read = get_OldHeight};
  __property   float           OldLeft = {read = get_OldLeft};
  __property   float           OldTop = {read = get_OldTop};
  __property   float           OldWidth = {read = get_OldWidth};
  __property   LPDISPATCH      Object = {read = get_Object};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            RowSource = {read = get_RowSource, write = set_RowSource};
  __property   short           RowSourceType = {read = get_RowSourceType, write = set_RowSourceType};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        TabStop = {write = set_TabStop};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   TOLEBOOL        Visible = {write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
};
typedef TCOMIControlT<IControl> TCOMIControl;

// *********************************************************************//
// DispIntf:  IControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {04598FC6-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
template<class T>
class IControlDispT : public TAutoDriver<IControl>
{
public:
  IControlDispT(){}

  IControlDispT(IControl *pintf)
  {
    TAutoDriver<IControl>::Bind(pintf, false);
  }

  IControlDispT(IControlPtr pintf)
  {
    TAutoDriver<IControl>::Bind(pintf, true);
  }

  IControlDispT& operator=(IControl *pintf)
  {
    TAutoDriver<IControl>::Bind(pintf, false);
    return *this;
  }

  IControlDispT& operator=(IControlPtr pintf)
  {
    TAutoDriver<IControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Control));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Control);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Cancel(VARIANT_BOOL Cancel/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cancel(VARIANT_BOOL* Cancel/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Cancel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlSource(BSTR ControlSource/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlSource(BSTR* ControlSource/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlTipText(BSTR ControlTipText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlTipText(BSTR* ControlTipText/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Default(VARIANT_BOOL Default/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Default(VARIANT_BOOL* Default/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Default(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetHeight(long Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetHeight(long* Height/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextID(long HelpContextID/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextID(long* HelpContextID/*[out,retval]*/);
  long            __fastcall get_HelpContextID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(VARIANT_BOOL InSelection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(VARIANT_BOOL* InSelection/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LayoutEffect(Msforms_97::fmLayoutEffect* LayoutEffect/*[out,retval]*/);
  Msforms_97::fmLayoutEffect __fastcall get_LayoutEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetLeft(long Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetLeft(long* Left/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetOldHeight(long* OldHeight/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldHeight(float* OldHeight/*[out,retval]*/);
  float           __fastcall get_OldHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetOldLeft(long* OldLeft/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldLeft(float* OldLeft/*[out,retval]*/);
  float           __fastcall get_OldLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetOldTop(long* OldTop/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldTop(float* OldTop/*[out,retval]*/);
  float           __fastcall get_OldTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetOldWidth(long* OldWidth/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldWidth(float* OldWidth/*[out,retval]*/);
  float           __fastcall get_OldWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Object(LPDISPATCH* Object/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Object(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RowSource(BSTR RowSource/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowSource(BSTR* RowSource/*[out,retval]*/);
  BSTR            __fastcall get_RowSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RowSourceType(short RowSourceType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowSourceType(short* RowSourceType/*[out,retval]*/);
  short           __fastcall get_RowSourceType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabIndex(short TabIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabIndex(short* TabIndex/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabStop(VARIANT_BOOL TabStop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabStop(VARIANT_BOOL* TabStop/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabStop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR Tag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* Tag/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetTop(long Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetTop(long* Top/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BoundValue(VARIANT* BoundValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BoundValue(VARIANT* BoundValue/*[out,retval]*/);
  VARIANT         __fastcall get_BoundValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetWidth(long Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetWidth(long* Width/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Move(VARIANT Left/*[in,opt]*/= TNoParam(), 
                                             VARIANT Top/*[in,opt]*/= TNoParam(), 
                                             VARIANT Width/*[in,opt]*/= TNoParam(), 
                                             VARIANT Height/*[in,opt]*/= TNoParam(), 
                                             VARIANT Layout/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ZOrder(VARIANT zPosition/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select(VARIANT_BOOL SelectInGroup/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GethWnd(int* hWnd/*[out,retval]*/);
  int             __fastcall _GethWnd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetID(long* ID/*[out,retval]*/);
  long            __fastcall _GetID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Move(long Left/*[in]*/, long Top/*[in]*/, 
                                              long Width/*[in]*/, long Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _ZOrder(Msforms_97::fmZOrder zPosition/*[in]*/);

  __property   VARIANT_BOOL    Cancel = {read = get_Cancel, write = set_Cancel};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   VARIANT_BOOL    Default = {read = get_Default, write = set_Default};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HelpContextID = {read = get_HelpContextID, write = set_HelpContextID};
  __property   VARIANT_BOOL    InSelection = {read = get_InSelection, write = set_InSelection};
  __property   Msforms_97::fmLayoutEffect LayoutEffect = {read = get_LayoutEffect};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   float           OldHeight = {read = get_OldHeight};
  __property   float           OldLeft = {read = get_OldLeft};
  __property   float           OldTop = {read = get_OldTop};
  __property   float           OldWidth = {read = get_OldWidth};
  __property   LPDISPATCH      Object = {read = get_Object};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            RowSource = {read = get_RowSource, write = set_RowSource};
  __property   short           RowSourceType = {read = get_RowSourceType, write = set_RowSourceType};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   VARIANT_BOOL    TabStop = {read = get_TabStop, write = set_TabStop};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
};
typedef IControlDispT<IControl> IControlDisp;

typedef TComInterface<Controls_>  TCOMControls_;

// *********************************************************************//
// DispIntf:  Controls
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {04598FC7-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
template<class T>
class Controls_DispT : public TAutoDriver<Controls_>
{
public:
  Controls_DispT(){}

  Controls_DispT(Controls_ *pintf)
  {
    TAutoDriver<Controls_>::Bind(pintf, false);
  }

  Controls_DispT(Controls_Ptr pintf)
  {
    TAutoDriver<Controls_>::Bind(pintf, true);
  }

  Controls_DispT& operator=(Controls_ *pintf)
  {
    TAutoDriver<Controls_>::Bind(pintf, false);
    return *this;
  }

  Controls_DispT& operator=(Controls_Ptr pintf)
  {
    TAutoDriver<Controls_>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT varg/*[in]*/, 
                                             LPDISPATCH* ppDispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall Item(VARIANT varg/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Move(long cx/*[in]*/, long cy/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SelectAll();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _AddByClass(long* clsid/*[in]*/, 
                                                    Msforms_97::Control** Control/*[out,retval]*/);
  Msforms_97::Control* __fastcall _AddByClass(long* clsid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AlignToGrid();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BringForward();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BringToFront();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Enum(LPUNKNOWN* ppEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall Enum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetItemByIndex(long lIndex/*[in]*/, 
                                                        Msforms_97::Control** Control/*[out,retval]*/);
  Msforms_97::Control* __fastcall _GetItemByIndex(long lIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetItemByName(BSTR pstr/*[in]*/, 
                                                       Msforms_97::Control** Control/*[out,retval]*/);
  Msforms_97::Control* __fastcall _GetItemByName(BSTR pstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetItemByID(long ID/*[in]*/, 
                                                     Msforms_97::Control** Control/*[out,retval]*/);
  Msforms_97::Control* __fastcall _GetItemByID(long ID/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SendBackward();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SendToBack();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Move(float cx/*[in]*/, float cy/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR bstrProgID/*[in]*/, VARIANT Name/*[in,opt]*/, 
                                            VARIANT Visible/*[in,opt]*/, 
                                            Msforms_97::Control** Control/*[out,retval]*/);
  Msforms_97::Control* __fastcall Add(BSTR bstrProgID/*[in]*/, VARIANT Name/*[in,opt]*/= TNoParam(), 
                                      VARIANT Visible/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(VARIANT varg/*[in]*/);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef Controls_DispT<Controls_> Controls_Disp;

// *********************************************************************//
// SmartIntf: TCOMIOptionFrame
// Interface: IOptionFrame
// *********************************************************************//
template <class T /* IOptionFrame */ >
class TCOMIOptionFrameT : public TComInterface<IOptionFrame>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOptionFrameT() {}
  TCOMIOptionFrameT(IOptionFrame *intf, bool addRef = false) : TComInterface<IOptionFrame>(intf, addRef) {}
  TCOMIOptionFrameT(const TCOMIOptionFrameT& src) : TComInterface<IOptionFrame>(src) {}
  TCOMIOptionFrameT& operator=(const TCOMIOptionFrameT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ActiveControl(Msforms_97::Control** ActiveControl/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveControl(Msforms_97::ControlPtr* ActiveControl/*[out,retval]*/);
  Msforms_97::ControlPtr __fastcall get_ActiveControl(void);
  HRESULT         __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT         __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/);
  HRESULT         __fastcall get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/);
  Msforms_97::fmBorderStyle __fastcall get_BorderStyle(void);
  HRESULT         __fastcall get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/);
  HRESULT         __fastcall get_CanPaste(TOLEBOOL* CanPaste/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanPaste(void);
  HRESULT         __fastcall get_CanRedo(VARIANT_BOOL* CanRedo/*[out,retval]*/);
  HRESULT         __fastcall get_CanRedo(TOLEBOOL* CanRedo/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanRedo(void);
  HRESULT         __fastcall get_CanUndo(VARIANT_BOOL* CanUndo/*[out,retval]*/);
  HRESULT         __fastcall get_CanUndo(TOLEBOOL* CanUndo/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanUndo(void);
  HRESULT         __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall get_Controls(Msforms_97::Controls_** Controls/*[out,retval]*/);
  HRESULT         __fastcall get_Controls(Msforms_97::Controls_Ptr* Controls/*[out,retval]*/);
  Msforms_97::Controls_Ptr __fastcall get_Controls(void);
  HRESULT         __fastcall set_Cycle(Msforms_97::fmCycle Cycle/*[in]*/);
  HRESULT         __fastcall get_Cycle(Msforms_97::fmCycle* Cycle/*[out,retval]*/);
  Msforms_97::fmCycle __fastcall get_Cycle(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL Enabled/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* Enabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT         __fastcall set__Font_Reserved(IFontDisp* Param1/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp* Font/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Font/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT         __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT         __fastcall _GetInsideHeight(long* InsideHeight/*[out]*/);
  HRESULT         __fastcall get_InsideHeight(float* InsideHeight/*[out,retval]*/);
  float           __fastcall get_InsideHeight(void);
  HRESULT         __fastcall _GetInsideWidth(long* InsideWidth/*[out]*/);
  HRESULT         __fastcall get_InsideWidth(float* InsideWidth/*[out,retval]*/);
  float           __fastcall get_InsideWidth(void);
  HRESULT         __fastcall set_KeepScrollBarsVisible(Msforms_97::fmScrollBars ScrollBars/*[in]*/);
  HRESULT         __fastcall get_KeepScrollBarsVisible(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/);
  Msforms_97::fmScrollBars __fastcall get_KeepScrollBarsVisible(void);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT         __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT         __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT         __fastcall set_PictureAlignment(Msforms_97::fmPictureAlignment PictureAlignment/*[in]*/);
  HRESULT         __fastcall get_PictureAlignment(Msforms_97::fmPictureAlignment* PictureAlignment/*[out,retval]*/);
  Msforms_97::fmPictureAlignment __fastcall get_PictureAlignment(void);
  HRESULT         __fastcall set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT         __fastcall set_Picture(IPictureDisp* Picture/*[in]*/);
  HRESULT         __fastcall _set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT         __fastcall _set_Picture(IPictureDisp* Picture/*[in]*/);
  HRESULT         __fastcall get_Picture(IPictureDisp*** Picture/*[out,retval]*/);
  HRESULT         __fastcall get_Picture(IPictureDisp** Picture/*[out,retval]*/);
  IPictureDisp*   __fastcall get_Picture(void);
  HRESULT         __fastcall set_PictureSizeMode(Msforms_97::fmPictureSizeMode PictureSizeMode/*[in]*/);
  HRESULT         __fastcall get_PictureSizeMode(Msforms_97::fmPictureSizeMode* PictureSizeMode/*[out,retval]*/);
  Msforms_97::fmPictureSizeMode __fastcall get_PictureSizeMode(void);
  HRESULT         __fastcall set_PictureTiling(VARIANT_BOOL PictureTiling/*[in]*/);
  HRESULT         __fastcall set_PictureTiling(TOLEBOOL PictureTiling/*[in]*/);
  HRESULT         __fastcall get_PictureTiling(VARIANT_BOOL* PictureTiling/*[out,retval]*/);
  HRESULT         __fastcall get_PictureTiling(TOLEBOOL* PictureTiling/*[out,retval]*/);
  TOLEBOOL        __fastcall get_PictureTiling(void);
  HRESULT         __fastcall set_ScrollBars(Msforms_97::fmScrollBars ScrollBars/*[in]*/);
  HRESULT         __fastcall get_ScrollBars(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/);
  Msforms_97::fmScrollBars __fastcall get_ScrollBars(void);
  HRESULT         __fastcall _SetScrollHeight(long ScrollHeight/*[in]*/);
  HRESULT         __fastcall _GetScrollHeight(long* ScrollHeight/*[out]*/);
  HRESULT         __fastcall set_ScrollHeight(float ScrollHeight/*[in]*/);
  HRESULT         __fastcall get_ScrollHeight(float* ScrollHeight/*[out,retval]*/);
  float           __fastcall get_ScrollHeight(void);
  HRESULT         __fastcall _SetScrollLeft(long ScrollLeft/*[in]*/);
  HRESULT         __fastcall _GetScrollLeft(long* ScrollLeft/*[out]*/);
  HRESULT         __fastcall set_ScrollLeft(float ScrollLeft/*[in]*/);
  HRESULT         __fastcall get_ScrollLeft(float* ScrollLeft/*[out,retval]*/);
  float           __fastcall get_ScrollLeft(void);
  HRESULT         __fastcall _SetScrollTop(long ScrollTop/*[in]*/);
  HRESULT         __fastcall _GetScrollTop(long* ScrollTop/*[out]*/);
  HRESULT         __fastcall set_ScrollTop(float ScrollTop/*[in]*/);
  HRESULT         __fastcall get_ScrollTop(float* ScrollTop/*[out,retval]*/);
  float           __fastcall get_ScrollTop(void);
  HRESULT         __fastcall _SetScrollWidth(long ScrollWidth/*[in]*/);
  HRESULT         __fastcall _GetScrollWidth(long* ScrollWidth/*[out]*/);
  HRESULT         __fastcall set_ScrollWidth(float ScrollWidth/*[in]*/);
  HRESULT         __fastcall get_ScrollWidth(float* ScrollWidth/*[out,retval]*/);
  float           __fastcall get_ScrollWidth(void);
  HRESULT         __fastcall get_Selected(Msforms_97::Controls_** Selected/*[out,retval]*/);
  HRESULT         __fastcall get_Selected(Msforms_97::Controls_Ptr* Selected/*[out,retval]*/);
  Msforms_97::Controls_Ptr __fastcall get_Selected(void);
  HRESULT         __fastcall set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/);
  Msforms_97::fmSpecialEffect __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide side/*[in]*/);
  HRESULT         __fastcall get_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide* side/*[out,retval]*/);
  Msforms_97::fmVerticalScrollBarSide __fastcall get_VerticalScrollBarSide(void);
  HRESULT         __fastcall set_Zoom(short Zoom/*[in]*/);
  HRESULT         __fastcall get_Zoom(short* Zoom/*[out,retval]*/);
  short           __fastcall get_Zoom(void);
  HRESULT         __fastcall Copy(void);
  HRESULT         __fastcall Cut(void);
  HRESULT         __fastcall Paste(void);
  HRESULT         __fastcall RedoAction(void);
  HRESULT         __fastcall Repaint(void);
  HRESULT         __fastcall Scroll(VARIANT xAction/*[in,opt]*/= TNoParam(), 
                                    VARIANT yAction/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall SetDefaultTabOrder(void);
  HRESULT         __fastcall UndoAction(void);
  HRESULT         __fastcall set_DesignMode(Msforms_97::fmMode DesignMode/*[in]*/);
  HRESULT         __fastcall get_DesignMode(Msforms_97::fmMode* DesignMode/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_DesignMode(void);
  HRESULT         __fastcall set_ShowToolbox(Msforms_97::fmMode ShowToolbox/*[in]*/);
  HRESULT         __fastcall get_ShowToolbox(Msforms_97::fmMode* ShowToolbox/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_ShowToolbox(void);
  HRESULT         __fastcall set_ShowGridDots(Msforms_97::fmMode ShowGridDots/*[in]*/);
  HRESULT         __fastcall get_ShowGridDots(Msforms_97::fmMode* ShowGridDots/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_ShowGridDots(void);
  HRESULT         __fastcall set_SnapToGrid(Msforms_97::fmMode SnapToGrid/*[in]*/);
  HRESULT         __fastcall get_SnapToGrid(Msforms_97::fmMode* SnapToGrid/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_SnapToGrid(void);
  HRESULT         __fastcall set_GridX(float GridX/*[in]*/);
  HRESULT         __fastcall get_GridX(float* GridX/*[out,retval]*/);
  float           __fastcall get_GridX(void);
  HRESULT         __fastcall _SetGridX(long GridX/*[in]*/);
  HRESULT         __fastcall _GetGridX(long* GridX/*[out]*/);
  HRESULT         __fastcall set_GridY(float GridY/*[in]*/);
  HRESULT         __fastcall get_GridY(float* GridY/*[out,retval]*/);
  float           __fastcall get_GridY(void);
  HRESULT         __fastcall _SetGridY(long GridY/*[in]*/);
  HRESULT         __fastcall _GetGridY(long* GridY/*[out]*/);

  __property   Msforms_97::ControlPtr ActiveControl = {read = get_ActiveControl};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::OLE_COLOR BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   Msforms_97::fmBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   TOLEBOOL        CanPaste = {read = get_CanPaste};
  __property   TOLEBOOL        CanRedo = {read = get_CanRedo};
  __property   TOLEBOOL        CanUndo = {read = get_CanUndo};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Msforms_97::Controls_Ptr Controls = {read = get_Controls};
  __property   Msforms_97::fmCycle Cycle = {read = get_Cycle, write = set_Cycle};
  __property   TOLEBOOL        Enabled = {write = set_Enabled};
  __property   IFontDisp*      _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp*      Font = {write = _set_Font};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   float           InsideHeight = {read = get_InsideHeight};
  __property   float           InsideWidth = {read = get_InsideWidth};
  __property   Msforms_97::fmScrollBars KeepScrollBarsVisible = {read = get_KeepScrollBarsVisible, write = set_KeepScrollBarsVisible};
  __property   IPictureDisp*   MouseIcon = {write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   Msforms_97::fmPictureAlignment PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   IPictureDisp*   Picture = {write = set_Picture};
  __property   Msforms_97::fmPictureSizeMode PictureSizeMode = {read = get_PictureSizeMode, write = set_PictureSizeMode};
  __property   TOLEBOOL        PictureTiling = {write = set_PictureTiling};
  __property   Msforms_97::fmScrollBars ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   float           ScrollHeight = {read = get_ScrollHeight, write = set_ScrollHeight};
  __property   float           ScrollLeft = {read = get_ScrollLeft, write = set_ScrollLeft};
  __property   float           ScrollTop = {read = get_ScrollTop, write = set_ScrollTop};
  __property   float           ScrollWidth = {read = get_ScrollWidth, write = set_ScrollWidth};
  __property   Msforms_97::Controls_Ptr Selected = {read = get_Selected};
  __property   Msforms_97::fmSpecialEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   Msforms_97::fmVerticalScrollBarSide VerticalScrollBarSide = {read = get_VerticalScrollBarSide, write = set_VerticalScrollBarSide};
  __property   short           Zoom = {read = get_Zoom, write = set_Zoom};
  __property   Msforms_97::fmMode DesignMode = {read = get_DesignMode, write = set_DesignMode};
  __property   Msforms_97::fmMode ShowToolbox = {read = get_ShowToolbox, write = set_ShowToolbox};
  __property   Msforms_97::fmMode ShowGridDots = {read = get_ShowGridDots, write = set_ShowGridDots};
  __property   Msforms_97::fmMode SnapToGrid = {read = get_SnapToGrid, write = set_SnapToGrid};
  __property   float           GridX = {read = get_GridX, write = set_GridX};
  __property   float           GridY = {read = get_GridY, write = set_GridY};
};
typedef TCOMIOptionFrameT<IOptionFrame> TCOMIOptionFrame;

// *********************************************************************//
// DispIntf:  IOptionFrame
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {29B86A70-F52E-11CE-9BCE-00AA00608E01}
// *********************************************************************//
template<class T>
class IOptionFrameDispT : public TAutoDriver<IOptionFrame>
{
public:
  IOptionFrameDispT(){}

  IOptionFrameDispT(IOptionFrame *pintf)
  {
    TAutoDriver<IOptionFrame>::Bind(pintf, false);
  }

  IOptionFrameDispT(IOptionFramePtr pintf)
  {
    TAutoDriver<IOptionFrame>::Bind(pintf, true);
  }

  IOptionFrameDispT& operator=(IOptionFrame *pintf)
  {
    TAutoDriver<IOptionFrame>::Bind(pintf, false);
    return *this;
  }

  IOptionFrameDispT& operator=(IOptionFramePtr pintf)
  {
    TAutoDriver<IOptionFrame>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Frame));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Frame);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveControl(Msforms_97::Control** ActiveControl/*[out,retval]*/);
  Msforms_97::Control* __fastcall get_ActiveControl(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/);
  Msforms_97::fmBorderStyle __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanPaste(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanRedo(VARIANT_BOOL* CanRedo/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanRedo(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanUndo(VARIANT_BOOL* CanUndo/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanUndo(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Msforms_97::Controls_** Controls/*[out,retval]*/);
  Msforms_97::Controls_* __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Cycle(Msforms_97::fmCycle Cycle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cycle(Msforms_97::fmCycle* Cycle/*[out,retval]*/);
  Msforms_97::fmCycle __fastcall get_Cycle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  IFontDisp**     __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetInsideHeight(long* InsideHeight/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InsideHeight(float* InsideHeight/*[out,retval]*/);
  float           __fastcall get_InsideHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetInsideWidth(long* InsideWidth/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InsideWidth(float* InsideWidth/*[out,retval]*/);
  float           __fastcall get_InsideWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_KeepScrollBarsVisible(Msforms_97::fmScrollBars ScrollBars/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_KeepScrollBarsVisible(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/);
  Msforms_97::fmScrollBars __fastcall get_KeepScrollBarsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  IPictureDisp**  __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureAlignment(Msforms_97::fmPictureAlignment PictureAlignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureAlignment(Msforms_97::fmPictureAlignment* PictureAlignment/*[out,retval]*/);
  Msforms_97::fmPictureAlignment __fastcall get_PictureAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Picture(IPictureDisp*** Picture/*[out,retval]*/);
  IPictureDisp**  __fastcall get_Picture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureSizeMode(Msforms_97::fmPictureSizeMode PictureSizeMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureSizeMode(Msforms_97::fmPictureSizeMode* PictureSizeMode/*[out,retval]*/);
  Msforms_97::fmPictureSizeMode __fastcall get_PictureSizeMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureTiling(VARIANT_BOOL PictureTiling/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureTiling(VARIANT_BOOL* PictureTiling/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PictureTiling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollBars(Msforms_97::fmScrollBars ScrollBars/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollBars(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/);
  Msforms_97::fmScrollBars __fastcall get_ScrollBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetScrollHeight(long ScrollHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetScrollHeight(long* ScrollHeight/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollHeight(float ScrollHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollHeight(float* ScrollHeight/*[out,retval]*/);
  float           __fastcall get_ScrollHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetScrollLeft(long ScrollLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetScrollLeft(long* ScrollLeft/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollLeft(float ScrollLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollLeft(float* ScrollLeft/*[out,retval]*/);
  float           __fastcall get_ScrollLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetScrollTop(long ScrollTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetScrollTop(long* ScrollTop/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollTop(float ScrollTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollTop(float* ScrollTop/*[out,retval]*/);
  float           __fastcall get_ScrollTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetScrollWidth(long ScrollWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetScrollWidth(long* ScrollWidth/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollWidth(float ScrollWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollWidth(float* ScrollWidth/*[out,retval]*/);
  float           __fastcall get_ScrollWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selected(Msforms_97::Controls_** Selected/*[out,retval]*/);
  Msforms_97::Controls_* __fastcall get_Selected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/);
  Msforms_97::fmSpecialEffect __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide side/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide* side/*[out,retval]*/);
  Msforms_97::fmVerticalScrollBarSide __fastcall get_VerticalScrollBarSide(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Zoom(short Zoom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Zoom(short* Zoom/*[out,retval]*/);
  short           __fastcall get_Zoom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Paste();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RedoAction();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Repaint();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Scroll(VARIANT xAction/*[in,opt]*/= TNoParam(), 
                                               VARIANT yAction/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetDefaultTabOrder();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UndoAction();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DesignMode(Msforms_97::fmMode DesignMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DesignMode(Msforms_97::fmMode* DesignMode/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_DesignMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowToolbox(Msforms_97::fmMode ShowToolbox/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowToolbox(Msforms_97::fmMode* ShowToolbox/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_ShowToolbox(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowGridDots(Msforms_97::fmMode ShowGridDots/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowGridDots(Msforms_97::fmMode* ShowGridDots/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_ShowGridDots(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SnapToGrid(Msforms_97::fmMode SnapToGrid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SnapToGrid(Msforms_97::fmMode* SnapToGrid/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_SnapToGrid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GridX(float GridX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GridX(float* GridX/*[out,retval]*/);
  float           __fastcall get_GridX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetGridX(long GridX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetGridX(long* GridX/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GridY(float GridY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GridY(float* GridY/*[out,retval]*/);
  float           __fastcall get_GridY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetGridY(long GridY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetGridY(long* GridY/*[out]*/);

  __property   Msforms_97::Control* ActiveControl = {read = get_ActiveControl};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::OLE_COLOR BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   Msforms_97::fmBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   VARIANT_BOOL    CanPaste = {read = get_CanPaste};
  __property   VARIANT_BOOL    CanRedo = {read = get_CanRedo};
  __property   VARIANT_BOOL    CanUndo = {read = get_CanUndo};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Msforms_97::Controls_* Controls = {read = get_Controls};
  __property   Msforms_97::fmCycle Cycle = {read = get_Cycle, write = set_Cycle};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   float           InsideHeight = {read = get_InsideHeight};
  __property   float           InsideWidth = {read = get_InsideWidth};
  __property   Msforms_97::fmScrollBars KeepScrollBarsVisible = {read = get_KeepScrollBarsVisible, write = set_KeepScrollBarsVisible};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   Msforms_97::fmPictureAlignment PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   IPictureDisp**  Picture = {read = get_Picture, write = set_Picture};
  __property   Msforms_97::fmPictureSizeMode PictureSizeMode = {read = get_PictureSizeMode, write = set_PictureSizeMode};
  __property   VARIANT_BOOL    PictureTiling = {read = get_PictureTiling, write = set_PictureTiling};
  __property   Msforms_97::fmScrollBars ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   float           ScrollHeight = {read = get_ScrollHeight, write = set_ScrollHeight};
  __property   float           ScrollLeft = {read = get_ScrollLeft, write = set_ScrollLeft};
  __property   float           ScrollTop = {read = get_ScrollTop, write = set_ScrollTop};
  __property   float           ScrollWidth = {read = get_ScrollWidth, write = set_ScrollWidth};
  __property   Msforms_97::Controls_* Selected = {read = get_Selected};
  __property   Msforms_97::fmSpecialEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   Msforms_97::fmVerticalScrollBarSide VerticalScrollBarSide = {read = get_VerticalScrollBarSide, write = set_VerticalScrollBarSide};
  __property   short           Zoom = {read = get_Zoom, write = set_Zoom};
  __property   Msforms_97::fmMode DesignMode = {read = get_DesignMode, write = set_DesignMode};
  __property   Msforms_97::fmMode ShowToolbox = {read = get_ShowToolbox, write = set_ShowToolbox};
  __property   Msforms_97::fmMode ShowGridDots = {read = get_ShowGridDots, write = set_ShowGridDots};
  __property   Msforms_97::fmMode SnapToGrid = {read = get_SnapToGrid, write = set_SnapToGrid};
  __property   float           GridX = {read = get_GridX, write = set_GridX};
  __property   float           GridY = {read = get_GridY, write = set_GridY};
};
typedef IOptionFrameDispT<IOptionFrame> IOptionFrameDisp;

// *********************************************************************//
// SmartIntf: TCOM_UserForm
// Interface: _UserForm
// *********************************************************************//
template <class T /* _UserForm */ >
class TCOM_UserFormT : public TComInterface<_UserForm>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_UserFormT() {}
  TCOM_UserFormT(_UserForm *intf, bool addRef = false) : TComInterface<_UserForm>(intf, addRef) {}
  TCOM_UserFormT(const TCOM_UserFormT& src) : TComInterface<_UserForm>(src) {}
  TCOM_UserFormT& operator=(const TCOM_UserFormT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_DrawBuffer(long DrawBuffer/*[in]*/);
  HRESULT         __fastcall get_DrawBuffer(long* DrawBuffer/*[out,retval]*/);
  long            __fastcall get_DrawBuffer(void);

  __property   long            DrawBuffer = {read = get_DrawBuffer, write = set_DrawBuffer};
};
typedef TCOM_UserFormT<_UserForm> TCOM_UserForm;

// *********************************************************************//
// DispIntf:  _UserForm
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04598FC8-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
template<class T>
class _UserFormDispT : public TAutoDriver<_UserForm>
{
public:
  _UserFormDispT(){}

  _UserFormDispT(_UserForm *pintf)
  {
    TAutoDriver<_UserForm>::Bind(pintf, false);
  }

  _UserFormDispT(_UserFormPtr pintf)
  {
    TAutoDriver<_UserForm>::Bind(pintf, true);
  }

  _UserFormDispT& operator=(_UserForm *pintf)
  {
    TAutoDriver<_UserForm>::Bind(pintf, false);
    return *this;
  }

  _UserFormDispT& operator=(_UserFormPtr pintf)
  {
    TAutoDriver<_UserForm>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_UserForm));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_UserForm);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DrawBuffer(long DrawBuffer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DrawBuffer(long* DrawBuffer/*[out,retval]*/);
  long            __fastcall get_DrawBuffer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveControl(Msforms_97::Control** ActiveControl/*[out,retval]*/);
  Msforms_97::Control* __fastcall get_ActiveControl(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/);
  Msforms_97::fmBorderStyle __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanPaste(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanRedo(VARIANT_BOOL* CanRedo/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanRedo(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanUndo(VARIANT_BOOL* CanUndo/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanUndo(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Msforms_97::Controls_** Controls/*[out,retval]*/);
  Msforms_97::Controls_* __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Cycle(Msforms_97::fmCycle Cycle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cycle(Msforms_97::fmCycle* Cycle/*[out,retval]*/);
  Msforms_97::fmCycle __fastcall get_Cycle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  IFontDisp**     __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetInsideHeight(long* InsideHeight/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InsideHeight(float* InsideHeight/*[out,retval]*/);
  float           __fastcall get_InsideHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetInsideWidth(long* InsideWidth/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InsideWidth(float* InsideWidth/*[out,retval]*/);
  float           __fastcall get_InsideWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_KeepScrollBarsVisible(Msforms_97::fmScrollBars ScrollBars/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_KeepScrollBarsVisible(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/);
  Msforms_97::fmScrollBars __fastcall get_KeepScrollBarsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  IPictureDisp**  __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureAlignment(Msforms_97::fmPictureAlignment PictureAlignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureAlignment(Msforms_97::fmPictureAlignment* PictureAlignment/*[out,retval]*/);
  Msforms_97::fmPictureAlignment __fastcall get_PictureAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Picture(IPictureDisp*** Picture/*[out,retval]*/);
  IPictureDisp**  __fastcall get_Picture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureSizeMode(Msforms_97::fmPictureSizeMode PictureSizeMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureSizeMode(Msforms_97::fmPictureSizeMode* PictureSizeMode/*[out,retval]*/);
  Msforms_97::fmPictureSizeMode __fastcall get_PictureSizeMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureTiling(VARIANT_BOOL PictureTiling/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureTiling(VARIANT_BOOL* PictureTiling/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PictureTiling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollBars(Msforms_97::fmScrollBars ScrollBars/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollBars(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/);
  Msforms_97::fmScrollBars __fastcall get_ScrollBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetScrollHeight(long ScrollHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetScrollHeight(long* ScrollHeight/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollHeight(float ScrollHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollHeight(float* ScrollHeight/*[out,retval]*/);
  float           __fastcall get_ScrollHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetScrollLeft(long ScrollLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetScrollLeft(long* ScrollLeft/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollLeft(float ScrollLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollLeft(float* ScrollLeft/*[out,retval]*/);
  float           __fastcall get_ScrollLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetScrollTop(long ScrollTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetScrollTop(long* ScrollTop/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollTop(float ScrollTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollTop(float* ScrollTop/*[out,retval]*/);
  float           __fastcall get_ScrollTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetScrollWidth(long ScrollWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetScrollWidth(long* ScrollWidth/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollWidth(float ScrollWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollWidth(float* ScrollWidth/*[out,retval]*/);
  float           __fastcall get_ScrollWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selected(Msforms_97::Controls_** Selected/*[out,retval]*/);
  Msforms_97::Controls_* __fastcall get_Selected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/);
  Msforms_97::fmSpecialEffect __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide side/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide* side/*[out,retval]*/);
  Msforms_97::fmVerticalScrollBarSide __fastcall get_VerticalScrollBarSide(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Zoom(short Zoom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Zoom(short* Zoom/*[out,retval]*/);
  short           __fastcall get_Zoom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Paste();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RedoAction();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Repaint();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Scroll(VARIANT xAction/*[in,opt]*/= TNoParam(), 
                                               VARIANT yAction/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetDefaultTabOrder();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UndoAction();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DesignMode(Msforms_97::fmMode DesignMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DesignMode(Msforms_97::fmMode* DesignMode/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_DesignMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowToolbox(Msforms_97::fmMode ShowToolbox/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowToolbox(Msforms_97::fmMode* ShowToolbox/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_ShowToolbox(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowGridDots(Msforms_97::fmMode ShowGridDots/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowGridDots(Msforms_97::fmMode* ShowGridDots/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_ShowGridDots(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SnapToGrid(Msforms_97::fmMode SnapToGrid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SnapToGrid(Msforms_97::fmMode* SnapToGrid/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_SnapToGrid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GridX(float GridX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GridX(float* GridX/*[out,retval]*/);
  float           __fastcall get_GridX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetGridX(long GridX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetGridX(long* GridX/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GridY(float GridY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GridY(float* GridY/*[out,retval]*/);
  float           __fastcall get_GridY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetGridY(long GridY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetGridY(long* GridY/*[out]*/);

  __property   long            DrawBuffer = {read = get_DrawBuffer, write = set_DrawBuffer};

  __property   Msforms_97::Control* ActiveControl = {read = get_ActiveControl};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::OLE_COLOR BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   Msforms_97::fmBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   VARIANT_BOOL    CanPaste = {read = get_CanPaste};
  __property   VARIANT_BOOL    CanRedo = {read = get_CanRedo};
  __property   VARIANT_BOOL    CanUndo = {read = get_CanUndo};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Msforms_97::Controls_* Controls = {read = get_Controls};
  __property   Msforms_97::fmCycle Cycle = {read = get_Cycle, write = set_Cycle};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   float           InsideHeight = {read = get_InsideHeight};
  __property   float           InsideWidth = {read = get_InsideWidth};
  __property   Msforms_97::fmScrollBars KeepScrollBarsVisible = {read = get_KeepScrollBarsVisible, write = set_KeepScrollBarsVisible};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   Msforms_97::fmPictureAlignment PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   IPictureDisp**  Picture = {read = get_Picture, write = set_Picture};
  __property   Msforms_97::fmPictureSizeMode PictureSizeMode = {read = get_PictureSizeMode, write = set_PictureSizeMode};
  __property   VARIANT_BOOL    PictureTiling = {read = get_PictureTiling, write = set_PictureTiling};
  __property   Msforms_97::fmScrollBars ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   float           ScrollHeight = {read = get_ScrollHeight, write = set_ScrollHeight};
  __property   float           ScrollLeft = {read = get_ScrollLeft, write = set_ScrollLeft};
  __property   float           ScrollTop = {read = get_ScrollTop, write = set_ScrollTop};
  __property   float           ScrollWidth = {read = get_ScrollWidth, write = set_ScrollWidth};
  __property   Msforms_97::Controls_* Selected = {read = get_Selected};
  __property   Msforms_97::fmSpecialEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   Msforms_97::fmVerticalScrollBarSide VerticalScrollBarSide = {read = get_VerticalScrollBarSide, write = set_VerticalScrollBarSide};
  __property   short           Zoom = {read = get_Zoom, write = set_Zoom};
  __property   Msforms_97::fmMode DesignMode = {read = get_DesignMode, write = set_DesignMode};
  __property   Msforms_97::fmMode ShowToolbox = {read = get_ShowToolbox, write = set_ShowToolbox};
  __property   Msforms_97::fmMode ShowGridDots = {read = get_ShowGridDots, write = set_ShowGridDots};
  __property   Msforms_97::fmMode SnapToGrid = {read = get_SnapToGrid, write = set_SnapToGrid};
  __property   float           GridX = {read = get_GridX, write = set_GridX};
  __property   float           GridY = {read = get_GridY, write = set_GridY};
};
typedef _UserFormDispT<_UserForm> _UserFormDisp;

// *********************************************************************//
// DispIntf:  ControlEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {9A4BBF53-4E46-101B-8BBD-00AA003E3B29}
// *********************************************************************//
template <class T>
class ControlEventsDispT : public TAutoDriver<ControlEvents>
{
public:
  ControlEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall Enter();
  void /*[VT_VOID:0]*/ __fastcall Exit(Msforms_97::ReturnBoolean* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeUpdate(Msforms_97::ReturnBoolean* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall AfterUpdate();

};
typedef ControlEventsDispT<ControlEvents> ControlEventsDisp;

// *********************************************************************//
// DispIntf:  FormEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {5B9D8FC8-4A71-101B-97A6-00000B65C08B}
// *********************************************************************//
template <class T>
class FormEventsDispT : public TAutoDriver<FormEvents>
{
public:
  FormEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall AddControl(Msforms_97::Control* Control/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::Control* Control/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState State/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::Control* Control/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Layout();
  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall RemoveControl(Msforms_97::Control* Control/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Scroll(Msforms_97::fmScrollAction ActionX/*[in]*/, 
                                         Msforms_97::fmScrollAction ActionY/*[in]*/, 
                                         float RequestDx/*[in]*/, float RequestDy/*[in]*/, 
                                         Msforms_97::ReturnSingle* ActualDx/*[in]*/, 
                                         Msforms_97::ReturnSingle* ActualDy/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Zoom(short* Percent/*[in,out]*/);

};
typedef FormEventsDispT<FormEvents> FormEventsDisp;

// *********************************************************************//
// DispIntf:  OptionFrameEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {CF3F94A0-F546-11CE-9BCE-00AA00608E01}
// *********************************************************************//
template <class T>
class OptionFrameEventsDispT : public TAutoDriver<OptionFrameEvents>
{
public:
  OptionFrameEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall AddControl(Msforms_97::Control* Control/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::Control* Control/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState State/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::Control* Control/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Layout();
  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall RemoveControl(Msforms_97::Control* Control/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Scroll(Msforms_97::fmScrollAction ActionX/*[in]*/, 
                                         Msforms_97::fmScrollAction ActionY/*[in]*/, 
                                         float RequestDx/*[in]*/, float RequestDy/*[in]*/, 
                                         Msforms_97::ReturnSingle* ActualDx/*[in]*/, 
                                         Msforms_97::ReturnSingle* ActualDy/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Zoom(short* Percent/*[in,out]*/);

};
typedef OptionFrameEventsDispT<OptionFrameEvents> OptionFrameEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMILabelControl
// Interface: ILabelControl
// *********************************************************************//
template <class T /* ILabelControl */ >
class TCOMILabelControlT : public TComInterface<ILabelControl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMILabelControlT() {}
  TCOMILabelControlT(ILabelControl *intf, bool addRef = false) : TComInterface<ILabelControl>(intf, addRef) {}
  TCOMILabelControlT(const TCOMILabelControlT& src) : TComInterface<ILabelControl>(src) {}
  TCOMILabelControlT& operator=(const TCOMILabelControlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL fvbAutoSize/*[in]*/);
  HRESULT         __fastcall set_AutoSize(TOLEBOOL fvbAutoSize/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* fvbAutoSize/*[out,retval]*/);
  HRESULT         __fastcall get_AutoSize(TOLEBOOL* fvbAutoSize/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT         __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/);
  HRESULT         __fastcall get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/);
  Msforms_97::fmBackStyle __fastcall get_BackStyle(void);
  HRESULT         __fastcall set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/);
  HRESULT         __fastcall get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/);
  Msforms_97::fmBorderStyle __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_Caption(BSTR bstrCaption/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* bstrCaption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL fEnabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL fEnabled/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* fEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT         __fastcall set__Font_Reserved(IFontDisp* Param1/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp* Font/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Font/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/);
  HRESULT         __fastcall set_FontItalic(TOLEBOOL FontItalic/*[in]*/);
  HRESULT         __fastcall get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/);
  HRESULT         __fastcall get_FontItalic(TOLEBOOL* FontItalic/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT         __fastcall set_FontBold(VARIANT_BOOL FontBold/*[in]*/);
  HRESULT         __fastcall set_FontBold(TOLEBOOL FontBold/*[in]*/);
  HRESULT         __fastcall get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/);
  HRESULT         __fastcall get_FontBold(TOLEBOOL* FontBold/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontBold(void);
  HRESULT         __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT         __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT         __fastcall set_FontSize(CURRENCY FontSize/*[in]*/);
  HRESULT         __fastcall get_FontSize(CURRENCY* FontSize/*[out,retval]*/);
  CURRENCY        __fastcall get_FontSize(void);
  HRESULT         __fastcall set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/);
  HRESULT         __fastcall set_FontStrikethru(TOLEBOOL FontStrikethru/*[in]*/);
  HRESULT         __fastcall get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/);
  HRESULT         __fastcall get_FontStrikethru(TOLEBOOL* FontStrikethru/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontStrikethru(void);
  HRESULT         __fastcall set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/);
  HRESULT         __fastcall set_FontUnderline(TOLEBOOL FontUnderline/*[in]*/);
  HRESULT         __fastcall get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/);
  HRESULT         __fastcall get_FontUnderline(TOLEBOOL* FontUnderline/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT         __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT         __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT         __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT         __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT         __fastcall set_Picture(IPictureDisp** pPicture/*[in]*/);
  HRESULT         __fastcall set_Picture(IPictureDisp* pPicture/*[in]*/);
  HRESULT         __fastcall _set_Picture(IPictureDisp** pPicture/*[in]*/);
  HRESULT         __fastcall _set_Picture(IPictureDisp* pPicture/*[in]*/);
  HRESULT         __fastcall get_Picture(IPictureDisp*** pPicture/*[out,retval]*/);
  HRESULT         __fastcall get_Picture(IPictureDisp** pPicture/*[out,retval]*/);
  IPictureDisp*   __fastcall get_Picture(void);
  HRESULT         __fastcall set_PicturePosition(Msforms_97::fmPicturePosition PicPos/*[in]*/);
  HRESULT         __fastcall get_PicturePosition(Msforms_97::fmPicturePosition* PicPos/*[out,retval]*/);
  Msforms_97::fmPicturePosition __fastcall get_PicturePosition(void);
  HRESULT         __fastcall set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/);
  Msforms_97::fmSpecialEffect __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/);
  HRESULT         __fastcall get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/);
  Msforms_97::fmTextAlign __fastcall get_TextAlign(void);
  HRESULT         __fastcall set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/);
  HRESULT         __fastcall set_WordWrap(TOLEBOOL WordWrap/*[in]*/);
  HRESULT         __fastcall get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/);
  HRESULT         __fastcall get_WordWrap(TOLEBOOL* WordWrap/*[out,retval]*/);
  TOLEBOOL        __fastcall get_WordWrap(void);
  HRESULT         __fastcall set_Accelerator(BSTR Accelerator/*[in]*/);
  HRESULT         __fastcall get_Accelerator(BSTR* Accelerator/*[out,retval]*/);
  BSTR            __fastcall get_Accelerator(void);
  HRESULT         __fastcall set_FontWeight(short FontWeight/*[in]*/);
  HRESULT         __fastcall get_FontWeight(short* FontWeight/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT         __fastcall set__Value(BSTR bstrCaption/*[in]*/);
  HRESULT         __fastcall get__Value(BSTR* bstrCaption/*[out,retval]*/);
  BSTR            __fastcall get__Value(void);

  __property   TOLEBOOL        AutoSize = {write = set_AutoSize};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   Msforms_97::OLE_COLOR BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   Msforms_97::fmBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   TOLEBOOL        Enabled = {write = set_Enabled};
  __property   IFontDisp*      _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp*      Font = {write = _set_Font};
  __property   TOLEBOOL        FontItalic = {write = set_FontItalic};
  __property   TOLEBOOL        FontBold = {write = set_FontBold};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   TOLEBOOL        FontStrikethru = {write = set_FontStrikethru};
  __property   TOLEBOOL        FontUnderline = {write = set_FontUnderline};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   IPictureDisp*   MouseIcon = {write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   IPictureDisp*   Picture = {write = set_Picture};
  __property   Msforms_97::fmPicturePosition PicturePosition = {read = get_PicturePosition, write = set_PicturePosition};
  __property   Msforms_97::fmSpecialEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   Msforms_97::fmTextAlign TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   TOLEBOOL        WordWrap = {write = set_WordWrap};
  __property   BSTR            Accelerator = {read = get_Accelerator, write = set_Accelerator};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   BSTR            _Value = {read = get__Value, write = set__Value};
};
typedef TCOMILabelControlT<ILabelControl> TCOMILabelControl;

// *********************************************************************//
// DispIntf:  ILabelControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04598FC1-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
template<class T>
class ILabelControlDispT : public TAutoDriver<ILabelControl>
{
public:
  ILabelControlDispT(){}

  ILabelControlDispT(ILabelControl *pintf)
  {
    TAutoDriver<ILabelControl>::Bind(pintf, false);
  }

  ILabelControlDispT(ILabelControlPtr pintf)
  {
    TAutoDriver<ILabelControl>::Bind(pintf, true);
  }

  ILabelControlDispT& operator=(ILabelControl *pintf)
  {
    TAutoDriver<ILabelControl>::Bind(pintf, false);
    return *this;
  }

  ILabelControlDispT& operator=(ILabelControlPtr pintf)
  {
    TAutoDriver<ILabelControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Label));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Label);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoSize(VARIANT_BOOL fvbAutoSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoSize(VARIANT_BOOL* fvbAutoSize/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/);
  Msforms_97::fmBackStyle __fastcall get_BackStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/);
  Msforms_97::fmBorderStyle __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR bstrCaption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* bstrCaption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL fEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  IFontDisp**     __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(VARIANT_BOOL FontBold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(CURRENCY FontSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(CURRENCY* FontSize/*[out,retval]*/);
  CURRENCY        __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontStrikethru(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontUnderline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  IPictureDisp**  __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Picture(IPictureDisp** pPicture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Picture(IPictureDisp** pPicture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Picture(IPictureDisp*** pPicture/*[out,retval]*/);
  IPictureDisp**  __fastcall get_Picture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PicturePosition(Msforms_97::fmPicturePosition PicPos/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PicturePosition(Msforms_97::fmPicturePosition* PicPos/*[out,retval]*/);
  Msforms_97::fmPicturePosition __fastcall get_PicturePosition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/);
  Msforms_97::fmSpecialEffect __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/);
  Msforms_97::fmTextAlign __fastcall get_TextAlign(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_WordWrap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Accelerator(BSTR Accelerator/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Accelerator(BSTR* Accelerator/*[out,retval]*/);
  BSTR            __fastcall get_Accelerator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontWeight(short FontWeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontWeight(short* FontWeight/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__Value(BSTR bstrCaption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__Value(BSTR* bstrCaption/*[out,retval]*/);
  BSTR            __fastcall get__Value(void);

  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   Msforms_97::OLE_COLOR BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   Msforms_97::fmBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   VARIANT_BOOL    FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   VARIANT_BOOL    FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   VARIANT_BOOL    FontStrikethru = {read = get_FontStrikethru, write = set_FontStrikethru};
  __property   VARIANT_BOOL    FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   IPictureDisp**  Picture = {read = get_Picture, write = set_Picture};
  __property   Msforms_97::fmPicturePosition PicturePosition = {read = get_PicturePosition, write = set_PicturePosition};
  __property   Msforms_97::fmSpecialEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   Msforms_97::fmTextAlign TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   VARIANT_BOOL    WordWrap = {read = get_WordWrap, write = set_WordWrap};
  __property   BSTR            Accelerator = {read = get_Accelerator, write = set_Accelerator};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   BSTR            _Value = {read = get__Value, write = set__Value};
};
typedef ILabelControlDispT<ILabelControl> ILabelControlDisp;

// *********************************************************************//
// SmartIntf: TCOMICommandButton
// Interface: ICommandButton
// *********************************************************************//
template <class T /* ICommandButton */ >
class TCOMICommandButtonT : public TComInterface<ICommandButton>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMICommandButtonT() {}
  TCOMICommandButtonT(ICommandButton *intf, bool addRef = false) : TComInterface<ICommandButton>(intf, addRef) {}
  TCOMICommandButtonT(const TCOMICommandButtonT& src) : TComInterface<ICommandButton>(src) {}
  TCOMICommandButtonT& operator=(const TCOMICommandButtonT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL fvbAutoSize/*[in]*/);
  HRESULT         __fastcall set_AutoSize(TOLEBOOL fvbAutoSize/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* fvbAutoSize/*[out,retval]*/);
  HRESULT         __fastcall get_AutoSize(TOLEBOOL* fvbAutoSize/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT         __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/);
  HRESULT         __fastcall get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/);
  Msforms_97::fmBackStyle __fastcall get_BackStyle(void);
  HRESULT         __fastcall set_Caption(BSTR bstrCaption/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* bstrCaption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL fEnabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL fEnabled/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* fEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT         __fastcall set__Font_Reserved(IFontDisp* Param1/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp* Font/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Font/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_FontBold(VARIANT_BOOL FontBold/*[in]*/);
  HRESULT         __fastcall set_FontBold(TOLEBOOL FontBold/*[in]*/);
  HRESULT         __fastcall get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/);
  HRESULT         __fastcall get_FontBold(TOLEBOOL* FontBold/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontBold(void);
  HRESULT         __fastcall set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/);
  HRESULT         __fastcall set_FontItalic(TOLEBOOL FontItalic/*[in]*/);
  HRESULT         __fastcall get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/);
  HRESULT         __fastcall get_FontItalic(TOLEBOOL* FontItalic/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT         __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT         __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT         __fastcall set_FontSize(CURRENCY FontSize/*[in]*/);
  HRESULT         __fastcall get_FontSize(CURRENCY* FontSize/*[out,retval]*/);
  CURRENCY        __fastcall get_FontSize(void);
  HRESULT         __fastcall set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/);
  HRESULT         __fastcall set_FontStrikethru(TOLEBOOL FontStrikethru/*[in]*/);
  HRESULT         __fastcall get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/);
  HRESULT         __fastcall get_FontStrikethru(TOLEBOOL* FontStrikethru/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontStrikethru(void);
  HRESULT         __fastcall set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/);
  HRESULT         __fastcall set_FontUnderline(TOLEBOOL FontUnderline/*[in]*/);
  HRESULT         __fastcall get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/);
  HRESULT         __fastcall get_FontUnderline(TOLEBOOL* FontUnderline/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT         __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT         __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_TakeFocusOnClick(VARIANT_BOOL TakeFocusOnClick/*[in]*/);
  HRESULT         __fastcall set_TakeFocusOnClick(TOLEBOOL TakeFocusOnClick/*[in]*/);
  HRESULT         __fastcall get_TakeFocusOnClick(VARIANT_BOOL* TakeFocusOnClick/*[out,retval]*/);
  HRESULT         __fastcall get_TakeFocusOnClick(TOLEBOOL* TakeFocusOnClick/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TakeFocusOnClick(void);
  HRESULT         __fastcall set_Locked(VARIANT_BOOL fLocked/*[in]*/);
  HRESULT         __fastcall set_Locked(TOLEBOOL fLocked/*[in]*/);
  HRESULT         __fastcall get_Locked(VARIANT_BOOL* fLocked/*[out,retval]*/);
  HRESULT         __fastcall get_Locked(TOLEBOOL* fLocked/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT         __fastcall set_MousePointer(Msforms_97::fmMousePointer mouseptr/*[in]*/);
  HRESULT         __fastcall get_MousePointer(Msforms_97::fmMousePointer* mouseptr/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT         __fastcall set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT         __fastcall set_Picture(IPictureDisp* Picture/*[in]*/);
  HRESULT         __fastcall _set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT         __fastcall _set_Picture(IPictureDisp* Picture/*[in]*/);
  HRESULT         __fastcall get_Picture(IPictureDisp*** Picture/*[out,retval]*/);
  HRESULT         __fastcall get_Picture(IPictureDisp** Picture/*[out,retval]*/);
  IPictureDisp*   __fastcall get_Picture(void);
  HRESULT         __fastcall set_PicturePosition(Msforms_97::fmPicturePosition PicturePosition/*[in]*/);
  HRESULT         __fastcall get_PicturePosition(Msforms_97::fmPicturePosition* PicturePosition/*[out,retval]*/);
  Msforms_97::fmPicturePosition __fastcall get_PicturePosition(void);
  HRESULT         __fastcall set_Accelerator(BSTR Accelerator/*[in]*/);
  HRESULT         __fastcall get_Accelerator(BSTR* Accelerator/*[out,retval]*/);
  BSTR            __fastcall get_Accelerator(void);
  HRESULT         __fastcall set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/);
  HRESULT         __fastcall set_WordWrap(TOLEBOOL WordWrap/*[in]*/);
  HRESULT         __fastcall get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/);
  HRESULT         __fastcall get_WordWrap(TOLEBOOL* WordWrap/*[out,retval]*/);
  TOLEBOOL        __fastcall get_WordWrap(void);
  HRESULT         __fastcall set_Value(VARIANT_BOOL fValue/*[in]*/);
  HRESULT         __fastcall set_Value(TOLEBOOL fValue/*[in]*/);
  HRESULT         __fastcall get_Value(VARIANT_BOOL* fValue/*[out,retval]*/);
  HRESULT         __fastcall get_Value(TOLEBOOL* fValue/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Value(void);
  HRESULT         __fastcall set_FontWeight(short FontWeight/*[in]*/);
  HRESULT         __fastcall get_FontWeight(short* FontWeight/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);

  __property   TOLEBOOL        AutoSize = {write = set_AutoSize};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   TOLEBOOL        Enabled = {write = set_Enabled};
  __property   IFontDisp*      _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp*      Font = {write = _set_Font};
  __property   TOLEBOOL        FontBold = {write = set_FontBold};
  __property   TOLEBOOL        FontItalic = {write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   TOLEBOOL        FontStrikethru = {write = set_FontStrikethru};
  __property   TOLEBOOL        FontUnderline = {write = set_FontUnderline};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   TOLEBOOL        TakeFocusOnClick = {write = set_TakeFocusOnClick};
  __property   TOLEBOOL        Locked = {write = set_Locked};
  __property   IPictureDisp*   MouseIcon = {write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   IPictureDisp*   Picture = {write = set_Picture};
  __property   Msforms_97::fmPicturePosition PicturePosition = {read = get_PicturePosition, write = set_PicturePosition};
  __property   BSTR            Accelerator = {read = get_Accelerator, write = set_Accelerator};
  __property   TOLEBOOL        WordWrap = {write = set_WordWrap};
  __property   TOLEBOOL        Value = {write = set_Value};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
};
typedef TCOMICommandButtonT<ICommandButton> TCOMICommandButton;

// *********************************************************************//
// DispIntf:  ICommandButton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04598FC4-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
template<class T>
class ICommandButtonDispT : public TAutoDriver<ICommandButton>
{
public:
  ICommandButtonDispT(){}

  ICommandButtonDispT(ICommandButton *pintf)
  {
    TAutoDriver<ICommandButton>::Bind(pintf, false);
  }

  ICommandButtonDispT(ICommandButtonPtr pintf)
  {
    TAutoDriver<ICommandButton>::Bind(pintf, true);
  }

  ICommandButtonDispT& operator=(ICommandButton *pintf)
  {
    TAutoDriver<ICommandButton>::Bind(pintf, false);
    return *this;
  }

  ICommandButtonDispT& operator=(ICommandButtonPtr pintf)
  {
    TAutoDriver<ICommandButton>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CommandButton));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CommandButton);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoSize(VARIANT_BOOL fvbAutoSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoSize(VARIANT_BOOL* fvbAutoSize/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/);
  Msforms_97::fmBackStyle __fastcall get_BackStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR bstrCaption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* bstrCaption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL fEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  IFontDisp**     __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(VARIANT_BOOL FontBold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(CURRENCY FontSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(CURRENCY* FontSize/*[out,retval]*/);
  CURRENCY        __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontStrikethru(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontUnderline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TakeFocusOnClick(VARIANT_BOOL TakeFocusOnClick/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TakeFocusOnClick(VARIANT_BOOL* TakeFocusOnClick/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TakeFocusOnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(VARIANT_BOOL fLocked/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(VARIANT_BOOL* fLocked/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  IPictureDisp**  __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Msforms_97::fmMousePointer mouseptr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Msforms_97::fmMousePointer* mouseptr/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Picture(IPictureDisp*** Picture/*[out,retval]*/);
  IPictureDisp**  __fastcall get_Picture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PicturePosition(Msforms_97::fmPicturePosition PicturePosition/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PicturePosition(Msforms_97::fmPicturePosition* PicturePosition/*[out,retval]*/);
  Msforms_97::fmPicturePosition __fastcall get_PicturePosition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Accelerator(BSTR Accelerator/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Accelerator(BSTR* Accelerator/*[out,retval]*/);
  BSTR            __fastcall get_Accelerator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_WordWrap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(VARIANT_BOOL fValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT_BOOL* fValue/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontWeight(short FontWeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontWeight(short* FontWeight/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);

  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   VARIANT_BOOL    FontBold = {read = get_FontBold, write = set_FontBold};
  __property   VARIANT_BOOL    FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   VARIANT_BOOL    FontStrikethru = {read = get_FontStrikethru, write = set_FontStrikethru};
  __property   VARIANT_BOOL    FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   VARIANT_BOOL    TakeFocusOnClick = {read = get_TakeFocusOnClick, write = set_TakeFocusOnClick};
  __property   VARIANT_BOOL    Locked = {read = get_Locked, write = set_Locked};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   IPictureDisp**  Picture = {read = get_Picture, write = set_Picture};
  __property   Msforms_97::fmPicturePosition PicturePosition = {read = get_PicturePosition, write = set_PicturePosition};
  __property   BSTR            Accelerator = {read = get_Accelerator, write = set_Accelerator};
  __property   VARIANT_BOOL    WordWrap = {read = get_WordWrap, write = set_WordWrap};
  __property   VARIANT_BOOL    Value = {read = get_Value, write = set_Value};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
};
typedef ICommandButtonDispT<ICommandButton> ICommandButtonDisp;

// *********************************************************************//
// SmartIntf: TCOMIMdcText
// Interface: IMdcText
// *********************************************************************//
template <class T /* IMdcText */ >
class TCOMIMdcTextT : public TComInterface<IMdcText>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMdcTextT() {}
  TCOMIMdcTextT(IMdcText *intf, bool addRef = false) : TComInterface<IMdcText>(intf, addRef) {}
  TCOMIMdcTextT(const TCOMIMdcTextT& src) : TComInterface<IMdcText>(src) {}
  TCOMIMdcTextT& operator=(const TCOMIMdcTextT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL AutoSize/*[in]*/);
  HRESULT         __fastcall set_AutoSize(TOLEBOOL AutoSize/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* AutoSize/*[out,retval]*/);
  HRESULT         __fastcall get_AutoSize(TOLEBOOL* AutoSize/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoTab(VARIANT_BOOL AutoTab/*[in]*/);
  HRESULT         __fastcall set_AutoTab(TOLEBOOL AutoTab/*[in]*/);
  HRESULT         __fastcall get_AutoTab(VARIANT_BOOL* AutoTab/*[out,retval]*/);
  HRESULT         __fastcall get_AutoTab(TOLEBOOL* AutoTab/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoTab(void);
  HRESULT         __fastcall set_AutoWordSelect(VARIANT_BOOL AutoWordSelect/*[in]*/);
  HRESULT         __fastcall set_AutoWordSelect(TOLEBOOL AutoWordSelect/*[in]*/);
  HRESULT         __fastcall get_AutoWordSelect(VARIANT_BOOL* AutoWordSelect/*[out,retval]*/);
  HRESULT         __fastcall get_AutoWordSelect(TOLEBOOL* AutoWordSelect/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoWordSelect(void);
  HRESULT         __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT         __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/);
  HRESULT         __fastcall get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/);
  Msforms_97::fmBackStyle __fastcall get_BackStyle(void);
  HRESULT         __fastcall set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/);
  HRESULT         __fastcall get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/);
  Msforms_97::fmBorderStyle __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/);
  HRESULT         __fastcall set_BordersSuppress(TOLEBOOL BordersSuppress/*[in]*/);
  HRESULT         __fastcall get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/);
  HRESULT         __fastcall get_BordersSuppress(TOLEBOOL* BordersSuppress/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BordersSuppress(void);
  HRESULT         __fastcall get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/);
  HRESULT         __fastcall get_CanPaste(TOLEBOOL* CanPaste/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanPaste(void);
  HRESULT         __fastcall set_CurLine(long CurLine/*[in]*/);
  HRESULT         __fastcall get_CurLine(long* CurLine/*[out,retval]*/);
  long            __fastcall get_CurLine(void);
  HRESULT         __fastcall get_CurTargetX(long* CurTargetX/*[out,retval]*/);
  long            __fastcall get_CurTargetX(void);
  HRESULT         __fastcall get_CurTargetY(long* CurTargetY/*[out,retval]*/);
  long            __fastcall get_CurTargetY(void);
  HRESULT         __fastcall set_CurX(long CurX/*[in]*/);
  HRESULT         __fastcall get_CurX(long* CurX/*[out,retval]*/);
  long            __fastcall get_CurX(void);
  HRESULT         __fastcall set_CurY(long CurY/*[in]*/);
  HRESULT         __fastcall get_CurY(long* CurY/*[out,retval]*/);
  long            __fastcall get_CurY(void);
  HRESULT         __fastcall set_DropButtonStyle(Msforms_97::fmDropButtonStyle DropButtonStyle/*[in]*/);
  HRESULT         __fastcall get_DropButtonStyle(Msforms_97::fmDropButtonStyle* DropButtonStyle/*[out,retval]*/);
  Msforms_97::fmDropButtonStyle __fastcall get_DropButtonStyle(void);
  HRESULT         __fastcall set_EnterKeyBehavior(VARIANT_BOOL EnterKeyBehavior/*[in]*/);
  HRESULT         __fastcall set_EnterKeyBehavior(TOLEBOOL EnterKeyBehavior/*[in]*/);
  HRESULT         __fastcall get_EnterKeyBehavior(VARIANT_BOOL* EnterKeyBehavior/*[out,retval]*/);
  HRESULT         __fastcall get_EnterKeyBehavior(TOLEBOOL* EnterKeyBehavior/*[out,retval]*/);
  TOLEBOOL        __fastcall get_EnterKeyBehavior(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL Enabled/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* Enabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT         __fastcall set__Font_Reserved(IFontDisp* Param1/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp* Font/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Font/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_FontBold(VARIANT_BOOL FontBold/*[in]*/);
  HRESULT         __fastcall set_FontBold(TOLEBOOL FontBold/*[in]*/);
  HRESULT         __fastcall get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/);
  HRESULT         __fastcall get_FontBold(TOLEBOOL* FontBold/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontBold(void);
  HRESULT         __fastcall set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/);
  HRESULT         __fastcall set_FontItalic(TOLEBOOL FontItalic/*[in]*/);
  HRESULT         __fastcall get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/);
  HRESULT         __fastcall get_FontItalic(TOLEBOOL* FontItalic/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT         __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT         __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT         __fastcall set_FontSize(CURRENCY FontSize/*[in]*/);
  HRESULT         __fastcall get_FontSize(CURRENCY* FontSize/*[out,retval]*/);
  CURRENCY        __fastcall get_FontSize(void);
  HRESULT         __fastcall set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/);
  HRESULT         __fastcall set_FontStrikethru(TOLEBOOL FontStrikethru/*[in]*/);
  HRESULT         __fastcall get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/);
  HRESULT         __fastcall get_FontStrikethru(TOLEBOOL* FontStrikethru/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontStrikethru(void);
  HRESULT         __fastcall set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/);
  HRESULT         __fastcall set_FontUnderline(TOLEBOOL FontUnderline/*[in]*/);
  HRESULT         __fastcall get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/);
  HRESULT         __fastcall get_FontUnderline(TOLEBOOL* FontUnderline/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT         __fastcall set_FontWeight(short FontWeight/*[in]*/);
  HRESULT         __fastcall get_FontWeight(short* FontWeight/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT         __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT         __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_HideSelection(VARIANT_BOOL HideSelection/*[in]*/);
  HRESULT         __fastcall set_HideSelection(TOLEBOOL HideSelection/*[in]*/);
  HRESULT         __fastcall get_HideSelection(VARIANT_BOOL* HideSelection/*[out,retval]*/);
  HRESULT         __fastcall get_HideSelection(TOLEBOOL* HideSelection/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideSelection(void);
  HRESULT         __fastcall set_IntegralHeight(VARIANT_BOOL IntegralHeight/*[in]*/);
  HRESULT         __fastcall set_IntegralHeight(TOLEBOOL IntegralHeight/*[in]*/);
  HRESULT         __fastcall get_IntegralHeight(VARIANT_BOOL* IntegralHeight/*[out,retval]*/);
  HRESULT         __fastcall get_IntegralHeight(TOLEBOOL* IntegralHeight/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IntegralHeight(void);
  HRESULT         __fastcall get_LineCount(long* LineCount/*[out,retval]*/);
  long            __fastcall get_LineCount(void);
  HRESULT         __fastcall set_Locked(VARIANT_BOOL Locked/*[in]*/);
  HRESULT         __fastcall set_Locked(TOLEBOOL Locked/*[in]*/);
  HRESULT         __fastcall get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/);
  HRESULT         __fastcall get_Locked(TOLEBOOL* Locked/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT         __fastcall set_MaxLength(long MaxLength/*[in]*/);
  HRESULT         __fastcall get_MaxLength(long* MaxLength/*[out,retval]*/);
  long            __fastcall get_MaxLength(void);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT         __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT         __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT         __fastcall set_MultiLine(VARIANT_BOOL MultiLine/*[in]*/);
  HRESULT         __fastcall set_MultiLine(TOLEBOOL MultiLine/*[in]*/);
  HRESULT         __fastcall get_MultiLine(VARIANT_BOOL* MultiLine/*[out,retval]*/);
  HRESULT         __fastcall get_MultiLine(TOLEBOOL* MultiLine/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MultiLine(void);
  HRESULT         __fastcall set_PasswordChar(BSTR PasswordChar/*[in]*/);
  HRESULT         __fastcall get_PasswordChar(BSTR* PasswordChar/*[out,retval]*/);
  BSTR            __fastcall get_PasswordChar(void);
  HRESULT         __fastcall set_ScrollBars(Msforms_97::fmScrollBars ScrollBars/*[in]*/);
  HRESULT         __fastcall get_ScrollBars(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/);
  Msforms_97::fmScrollBars __fastcall get_ScrollBars(void);
  HRESULT         __fastcall set_SelectionMargin(VARIANT_BOOL SelectionMargin/*[in]*/);
  HRESULT         __fastcall set_SelectionMargin(TOLEBOOL SelectionMargin/*[in]*/);
  HRESULT         __fastcall get_SelectionMargin(VARIANT_BOOL* SelectionMargin/*[out,retval]*/);
  HRESULT         __fastcall get_SelectionMargin(TOLEBOOL* SelectionMargin/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SelectionMargin(void);
  HRESULT         __fastcall set_SelLength(long SelLength/*[in]*/);
  HRESULT         __fastcall get_SelLength(long* SelLength/*[out,retval]*/);
  long            __fastcall get_SelLength(void);
  HRESULT         __fastcall set_SelStart(long SelStart/*[in]*/);
  HRESULT         __fastcall get_SelStart(long* SelStart/*[out,retval]*/);
  long            __fastcall get_SelStart(void);
  HRESULT         __fastcall set_SelText(BSTR SelText/*[in]*/);
  HRESULT         __fastcall get_SelText(BSTR* SelText/*[out,retval]*/);
  BSTR            __fastcall get_SelText(void);
  HRESULT         __fastcall set_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen/*[in]*/);
  HRESULT         __fastcall get_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen* ShowDropButtonWhen/*[out,retval]*/);
  Msforms_97::fmShowDropButtonWhen __fastcall get_ShowDropButtonWhen(void);
  HRESULT         __fastcall set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/);
  Msforms_97::fmSpecialEffect __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_TabKeyBehavior(VARIANT_BOOL TabKeyBehavior/*[in]*/);
  HRESULT         __fastcall set_TabKeyBehavior(TOLEBOOL TabKeyBehavior/*[in]*/);
  HRESULT         __fastcall get_TabKeyBehavior(VARIANT_BOOL* TabKeyBehavior/*[out,retval]*/);
  HRESULT         __fastcall get_TabKeyBehavior(TOLEBOOL* TabKeyBehavior/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabKeyBehavior(void);
  HRESULT         __fastcall set_Text(BSTR Text/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/);
  HRESULT         __fastcall get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/);
  Msforms_97::fmTextAlign __fastcall get_TextAlign(void);
  HRESULT         __fastcall get_TextLength(long* TextLength/*[out,retval]*/);
  long            __fastcall get_TextLength(void);
  HRESULT         __fastcall get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/);
  HRESULT         __fastcall get_Valid(TOLEBOOL* Valid/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Valid(void);
  HRESULT         __fastcall set_Value(VARIANT* Value/*[in]*/);
  HRESULT         __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT         __fastcall set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/);
  HRESULT         __fastcall set_WordWrap(TOLEBOOL WordWrap/*[in]*/);
  HRESULT         __fastcall get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/);
  HRESULT         __fastcall get_WordWrap(TOLEBOOL* WordWrap/*[out,retval]*/);
  TOLEBOOL        __fastcall get_WordWrap(void);
  HRESULT         __fastcall Copy(void);
  HRESULT         __fastcall Cut(void);
  HRESULT         __fastcall Paste(void);
  HRESULT         __fastcall set_IMEMode(Msforms_97::fmIMEMode IMEMode/*[in]*/);
  HRESULT         __fastcall get_IMEMode(Msforms_97::fmIMEMode* IMEMode/*[out,retval]*/);
  Msforms_97::fmIMEMode __fastcall get_IMEMode(void);
  HRESULT         __fastcall set_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior EnterFieldBehavior/*[in]*/);
  HRESULT         __fastcall get_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior* EnterFieldBehavior/*[out,retval]*/);
  Msforms_97::fmEnterFieldBehavior __fastcall get_EnterFieldBehavior(void);
  HRESULT         __fastcall set_DragBehavior(Msforms_97::fmDragBehavior DragBehavior/*[in]*/);
  HRESULT         __fastcall get_DragBehavior(Msforms_97::fmDragBehavior* DragBehavior/*[out,retval]*/);
  Msforms_97::fmDragBehavior __fastcall get_DragBehavior(void);
  HRESULT         __fastcall get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/);
  Msforms_97::fmDisplayStyle __fastcall get_DisplayStyle(void);

  __property   TOLEBOOL        AutoSize = {write = set_AutoSize};
  __property   TOLEBOOL        AutoTab = {write = set_AutoTab};
  __property   TOLEBOOL        AutoWordSelect = {write = set_AutoWordSelect};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   Msforms_97::OLE_COLOR BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   Msforms_97::fmBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   TOLEBOOL        BordersSuppress = {write = set_BordersSuppress};
  __property   TOLEBOOL        CanPaste = {read = get_CanPaste};
  __property   long            CurLine = {read = get_CurLine, write = set_CurLine};
  __property   long            CurTargetX = {read = get_CurTargetX};
  __property   long            CurTargetY = {read = get_CurTargetY};
  __property   long            CurX = {read = get_CurX, write = set_CurX};
  __property   long            CurY = {read = get_CurY, write = set_CurY};
  __property   Msforms_97::fmDropButtonStyle DropButtonStyle = {read = get_DropButtonStyle, write = set_DropButtonStyle};
  __property   TOLEBOOL        EnterKeyBehavior = {write = set_EnterKeyBehavior};
  __property   TOLEBOOL        Enabled = {write = set_Enabled};
  __property   IFontDisp*      _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp*      Font = {write = _set_Font};
  __property   TOLEBOOL        FontBold = {write = set_FontBold};
  __property   TOLEBOOL        FontItalic = {write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   TOLEBOOL        FontStrikethru = {write = set_FontStrikethru};
  __property   TOLEBOOL        FontUnderline = {write = set_FontUnderline};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   TOLEBOOL        HideSelection = {write = set_HideSelection};
  __property   TOLEBOOL        IntegralHeight = {write = set_IntegralHeight};
  __property   long            LineCount = {read = get_LineCount};
  __property   TOLEBOOL        Locked = {write = set_Locked};
  __property   long            MaxLength = {read = get_MaxLength, write = set_MaxLength};
  __property   IPictureDisp*   MouseIcon = {write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   TOLEBOOL        MultiLine = {write = set_MultiLine};
  __property   BSTR            PasswordChar = {read = get_PasswordChar, write = set_PasswordChar};
  __property   Msforms_97::fmScrollBars ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   TOLEBOOL        SelectionMargin = {write = set_SelectionMargin};
  __property   long            SelLength = {read = get_SelLength, write = set_SelLength};
  __property   long            SelStart = {read = get_SelStart, write = set_SelStart};
  __property   BSTR            SelText = {read = get_SelText, write = set_SelText};
  __property   Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen = {read = get_ShowDropButtonWhen, write = set_ShowDropButtonWhen};
  __property   Msforms_97::fmSpecialEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   TOLEBOOL        TabKeyBehavior = {write = set_TabKeyBehavior};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   Msforms_97::fmTextAlign TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   long            TextLength = {read = get_TextLength};
  __property   TOLEBOOL        Valid = {read = get_Valid};
  __property   TOLEBOOL        WordWrap = {write = set_WordWrap};
  __property   Msforms_97::fmIMEMode IMEMode = {read = get_IMEMode, write = set_IMEMode};
  __property   Msforms_97::fmEnterFieldBehavior EnterFieldBehavior = {read = get_EnterFieldBehavior, write = set_EnterFieldBehavior};
  __property   Msforms_97::fmDragBehavior DragBehavior = {read = get_DragBehavior, write = set_DragBehavior};
  __property   Msforms_97::fmDisplayStyle DisplayStyle = {read = get_DisplayStyle};
};
typedef TCOMIMdcTextT<IMdcText> TCOMIMdcText;

// *********************************************************************//
// DispIntf:  IMdcText
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8BD21D13-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template<class T>
class IMdcTextDispT : public TAutoDriver<IMdcText>
{
public:
  IMdcTextDispT(){}

  IMdcTextDispT(IMdcText *pintf)
  {
    TAutoDriver<IMdcText>::Bind(pintf, false);
  }

  IMdcTextDispT(IMdcTextPtr pintf)
  {
    TAutoDriver<IMdcText>::Bind(pintf, true);
  }

  IMdcTextDispT& operator=(IMdcText *pintf)
  {
    TAutoDriver<IMdcText>::Bind(pintf, false);
    return *this;
  }

  IMdcTextDispT& operator=(IMdcTextPtr pintf)
  {
    TAutoDriver<IMdcText>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TextBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TextBox);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoSize(VARIANT_BOOL AutoSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoSize(VARIANT_BOOL* AutoSize/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoTab(VARIANT_BOOL AutoTab/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoTab(VARIANT_BOOL* AutoTab/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoTab(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoWordSelect(VARIANT_BOOL AutoWordSelect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoWordSelect(VARIANT_BOOL* AutoWordSelect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoWordSelect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/);
  Msforms_97::fmBackStyle __fastcall get_BackStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/);
  Msforms_97::fmBorderStyle __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BordersSuppress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanPaste(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CurLine(long CurLine/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurLine(long* CurLine/*[out,retval]*/);
  long            __fastcall get_CurLine(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurTargetX(long* CurTargetX/*[out,retval]*/);
  long            __fastcall get_CurTargetX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurTargetY(long* CurTargetY/*[out,retval]*/);
  long            __fastcall get_CurTargetY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CurX(long CurX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurX(long* CurX/*[out,retval]*/);
  long            __fastcall get_CurX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CurY(long CurY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurY(long* CurY/*[out,retval]*/);
  long            __fastcall get_CurY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DropButtonStyle(Msforms_97::fmDropButtonStyle DropButtonStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DropButtonStyle(Msforms_97::fmDropButtonStyle* DropButtonStyle/*[out,retval]*/);
  Msforms_97::fmDropButtonStyle __fastcall get_DropButtonStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EnterKeyBehavior(VARIANT_BOOL EnterKeyBehavior/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EnterKeyBehavior(VARIANT_BOOL* EnterKeyBehavior/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnterKeyBehavior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  IFontDisp**     __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(VARIANT_BOOL FontBold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(CURRENCY FontSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(CURRENCY* FontSize/*[out,retval]*/);
  CURRENCY        __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontStrikethru(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontUnderline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontWeight(short FontWeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontWeight(short* FontWeight/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HideSelection(VARIANT_BOOL HideSelection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HideSelection(VARIANT_BOOL* HideSelection/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HideSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IntegralHeight(VARIANT_BOOL IntegralHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IntegralHeight(VARIANT_BOOL* IntegralHeight/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IntegralHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LineCount(long* LineCount/*[out,retval]*/);
  long            __fastcall get_LineCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(VARIANT_BOOL Locked/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MaxLength(long MaxLength/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MaxLength(long* MaxLength/*[out,retval]*/);
  long            __fastcall get_MaxLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  IPictureDisp**  __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MultiLine(VARIANT_BOOL MultiLine/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MultiLine(VARIANT_BOOL* MultiLine/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MultiLine(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PasswordChar(BSTR PasswordChar/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PasswordChar(BSTR* PasswordChar/*[out,retval]*/);
  BSTR            __fastcall get_PasswordChar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollBars(Msforms_97::fmScrollBars ScrollBars/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollBars(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/);
  Msforms_97::fmScrollBars __fastcall get_ScrollBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelectionMargin(VARIANT_BOOL SelectionMargin/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectionMargin(VARIANT_BOOL* SelectionMargin/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SelectionMargin(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelLength(long SelLength/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelLength(long* SelLength/*[out,retval]*/);
  long            __fastcall get_SelLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelStart(long SelStart/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelStart(long* SelStart/*[out,retval]*/);
  long            __fastcall get_SelStart(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelText(BSTR SelText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelText(BSTR* SelText/*[out,retval]*/);
  BSTR            __fastcall get_SelText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen* ShowDropButtonWhen/*[out,retval]*/);
  Msforms_97::fmShowDropButtonWhen __fastcall get_ShowDropButtonWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/);
  Msforms_97::fmSpecialEffect __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabKeyBehavior(VARIANT_BOOL TabKeyBehavior/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabKeyBehavior(VARIANT_BOOL* TabKeyBehavior/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TabKeyBehavior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/);
  Msforms_97::fmTextAlign __fastcall get_TextAlign(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextLength(long* TextLength/*[out,retval]*/);
  long            __fastcall get_TextLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Valid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(VARIANT* Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_WordWrap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Paste();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IMEMode(Msforms_97::fmIMEMode IMEMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IMEMode(Msforms_97::fmIMEMode* IMEMode/*[out,retval]*/);
  Msforms_97::fmIMEMode __fastcall get_IMEMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior EnterFieldBehavior/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior* EnterFieldBehavior/*[out,retval]*/);
  Msforms_97::fmEnterFieldBehavior __fastcall get_EnterFieldBehavior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DragBehavior(Msforms_97::fmDragBehavior DragBehavior/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DragBehavior(Msforms_97::fmDragBehavior* DragBehavior/*[out,retval]*/);
  Msforms_97::fmDragBehavior __fastcall get_DragBehavior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/);
  Msforms_97::fmDisplayStyle __fastcall get_DisplayStyle(void);

  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   VARIANT_BOOL    AutoTab = {read = get_AutoTab, write = set_AutoTab};
  __property   VARIANT_BOOL    AutoWordSelect = {read = get_AutoWordSelect, write = set_AutoWordSelect};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   Msforms_97::OLE_COLOR BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   Msforms_97::fmBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   VARIANT_BOOL    BordersSuppress = {read = get_BordersSuppress, write = set_BordersSuppress};
  __property   VARIANT_BOOL    CanPaste = {read = get_CanPaste};
  __property   long            CurLine = {read = get_CurLine, write = set_CurLine};
  __property   long            CurTargetX = {read = get_CurTargetX};
  __property   long            CurTargetY = {read = get_CurTargetY};
  __property   long            CurX = {read = get_CurX, write = set_CurX};
  __property   long            CurY = {read = get_CurY, write = set_CurY};
  __property   Msforms_97::fmDropButtonStyle DropButtonStyle = {read = get_DropButtonStyle, write = set_DropButtonStyle};
  __property   VARIANT_BOOL    EnterKeyBehavior = {read = get_EnterKeyBehavior, write = set_EnterKeyBehavior};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   VARIANT_BOOL    FontBold = {read = get_FontBold, write = set_FontBold};
  __property   VARIANT_BOOL    FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   VARIANT_BOOL    FontStrikethru = {read = get_FontStrikethru, write = set_FontStrikethru};
  __property   VARIANT_BOOL    FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   VARIANT_BOOL    HideSelection = {read = get_HideSelection, write = set_HideSelection};
  __property   VARIANT_BOOL    IntegralHeight = {read = get_IntegralHeight, write = set_IntegralHeight};
  __property   long            LineCount = {read = get_LineCount};
  __property   VARIANT_BOOL    Locked = {read = get_Locked, write = set_Locked};
  __property   long            MaxLength = {read = get_MaxLength, write = set_MaxLength};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   VARIANT_BOOL    MultiLine = {read = get_MultiLine, write = set_MultiLine};
  __property   BSTR            PasswordChar = {read = get_PasswordChar, write = set_PasswordChar};
  __property   Msforms_97::fmScrollBars ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   VARIANT_BOOL    SelectionMargin = {read = get_SelectionMargin, write = set_SelectionMargin};
  __property   long            SelLength = {read = get_SelLength, write = set_SelLength};
  __property   long            SelStart = {read = get_SelStart, write = set_SelStart};
  __property   BSTR            SelText = {read = get_SelText, write = set_SelText};
  __property   Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen = {read = get_ShowDropButtonWhen, write = set_ShowDropButtonWhen};
  __property   Msforms_97::fmSpecialEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   VARIANT_BOOL    TabKeyBehavior = {read = get_TabKeyBehavior, write = set_TabKeyBehavior};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   Msforms_97::fmTextAlign TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   long            TextLength = {read = get_TextLength};
  __property   VARIANT_BOOL    Valid = {read = get_Valid};
  __property   VARIANT_BOOL    WordWrap = {read = get_WordWrap, write = set_WordWrap};
  __property   Msforms_97::fmIMEMode IMEMode = {read = get_IMEMode, write = set_IMEMode};
  __property   Msforms_97::fmEnterFieldBehavior EnterFieldBehavior = {read = get_EnterFieldBehavior, write = set_EnterFieldBehavior};
  __property   Msforms_97::fmDragBehavior DragBehavior = {read = get_DragBehavior, write = set_DragBehavior};
  __property   Msforms_97::fmDisplayStyle DisplayStyle = {read = get_DisplayStyle};
};
typedef IMdcTextDispT<IMdcText> IMdcTextDisp;

// *********************************************************************//
// SmartIntf: TCOMIMdcList
// Interface: IMdcList
// *********************************************************************//
template <class T /* IMdcList */ >
class TCOMIMdcListT : public TComInterface<IMdcList>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMdcListT() {}
  TCOMIMdcListT(IMdcList *intf, bool addRef = false) : TComInterface<IMdcList>(intf, addRef) {}
  TCOMIMdcListT(const TCOMIMdcListT& src) : TComInterface<IMdcList>(src) {}
  TCOMIMdcListT& operator=(const TCOMIMdcListT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT         __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/);
  HRESULT         __fastcall get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/);
  Msforms_97::fmBorderStyle __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/);
  HRESULT         __fastcall set_BordersSuppress(TOLEBOOL BordersSuppress/*[in]*/);
  HRESULT         __fastcall get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/);
  HRESULT         __fastcall get_BordersSuppress(TOLEBOOL* BordersSuppress/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BordersSuppress(void);
  HRESULT         __fastcall set_BoundColumn(VARIANT* BoundColumn/*[in]*/);
  HRESULT         __fastcall get_BoundColumn(VARIANT* BoundColumn/*[out,retval]*/);
  VARIANT         __fastcall get_BoundColumn(void);
  HRESULT         __fastcall set_ColumnCount(long ColumnCount/*[in]*/);
  HRESULT         __fastcall get_ColumnCount(long* ColumnCount/*[out,retval]*/);
  long            __fastcall get_ColumnCount(void);
  HRESULT         __fastcall set_ColumnHeads(VARIANT_BOOL ColumnHeads/*[in]*/);
  HRESULT         __fastcall set_ColumnHeads(TOLEBOOL ColumnHeads/*[in]*/);
  HRESULT         __fastcall get_ColumnHeads(VARIANT_BOOL* ColumnHeads/*[out,retval]*/);
  HRESULT         __fastcall get_ColumnHeads(TOLEBOOL* ColumnHeads/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHeads(void);
  HRESULT         __fastcall set_ColumnWidths(BSTR ColumnWidths/*[in]*/);
  HRESULT         __fastcall get_ColumnWidths(BSTR* ColumnWidths/*[out,retval]*/);
  BSTR            __fastcall get_ColumnWidths(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL Enabled/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* Enabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT         __fastcall set__Font_Reserved(IFontDisp* Param1/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp* Font/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Font/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_FontBold(VARIANT_BOOL FontBold/*[in]*/);
  HRESULT         __fastcall set_FontBold(TOLEBOOL FontBold/*[in]*/);
  HRESULT         __fastcall get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/);
  HRESULT         __fastcall get_FontBold(TOLEBOOL* FontBold/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontBold(void);
  HRESULT         __fastcall set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/);
  HRESULT         __fastcall set_FontItalic(TOLEBOOL FontItalic/*[in]*/);
  HRESULT         __fastcall get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/);
  HRESULT         __fastcall get_FontItalic(TOLEBOOL* FontItalic/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT         __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT         __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT         __fastcall set_FontSize(CURRENCY FontSize/*[in]*/);
  HRESULT         __fastcall get_FontSize(CURRENCY* FontSize/*[out,retval]*/);
  CURRENCY        __fastcall get_FontSize(void);
  HRESULT         __fastcall set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/);
  HRESULT         __fastcall set_FontStrikethru(TOLEBOOL FontStrikethru/*[in]*/);
  HRESULT         __fastcall get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/);
  HRESULT         __fastcall get_FontStrikethru(TOLEBOOL* FontStrikethru/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontStrikethru(void);
  HRESULT         __fastcall set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/);
  HRESULT         __fastcall set_FontUnderline(TOLEBOOL FontUnderline/*[in]*/);
  HRESULT         __fastcall get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/);
  HRESULT         __fastcall get_FontUnderline(TOLEBOOL* FontUnderline/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT         __fastcall set_FontWeight(short FontWeight/*[in]*/);
  HRESULT         __fastcall get_FontWeight(short* FontWeight/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT         __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT         __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_IntegralHeight(VARIANT_BOOL IntegralHeight/*[in]*/);
  HRESULT         __fastcall set_IntegralHeight(TOLEBOOL IntegralHeight/*[in]*/);
  HRESULT         __fastcall get_IntegralHeight(VARIANT_BOOL* IntegralHeight/*[out,retval]*/);
  HRESULT         __fastcall get_IntegralHeight(TOLEBOOL* IntegralHeight/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IntegralHeight(void);
  HRESULT         __fastcall get_ListCount(long* ListCount/*[out,retval]*/);
  long            __fastcall get_ListCount(void);
  HRESULT         __fastcall set_ListCursor(Msforms_97::PIROWSET ListCursor/*[in]*/);
  HRESULT         __fastcall get_ListCursor(Msforms_97::PIROWSET* ListCursor/*[out,retval]*/);
  Msforms_97::PIROWSET __fastcall get_ListCursor(void);
  HRESULT         __fastcall set_ListIndex(VARIANT* ListIndex/*[in]*/);
  HRESULT         __fastcall get_ListIndex(VARIANT* ListIndex/*[out,retval]*/);
  VARIANT         __fastcall get_ListIndex(void);
  HRESULT         __fastcall set_ListStyle(Msforms_97::fmListStyle ListStyle/*[in]*/);
  HRESULT         __fastcall get_ListStyle(Msforms_97::fmListStyle* ListStyle/*[out,retval]*/);
  Msforms_97::fmListStyle __fastcall get_ListStyle(void);
  HRESULT         __fastcall set_ListWidth(VARIANT* ListWidth/*[in]*/);
  HRESULT         __fastcall get_ListWidth(VARIANT* ListWidth/*[out,retval]*/);
  VARIANT         __fastcall get_ListWidth(void);
  HRESULT         __fastcall set_Locked(VARIANT_BOOL Locked/*[in]*/);
  HRESULT         __fastcall set_Locked(TOLEBOOL Locked/*[in]*/);
  HRESULT         __fastcall get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/);
  HRESULT         __fastcall get_Locked(TOLEBOOL* Locked/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT         __fastcall set_MatchEntry(Msforms_97::fmMatchEntry MatchEntry/*[in]*/);
  HRESULT         __fastcall get_MatchEntry(Msforms_97::fmMatchEntry* MatchEntry/*[out,retval]*/);
  Msforms_97::fmMatchEntry __fastcall get_MatchEntry(void);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT         __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT         __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT         __fastcall set_MultiSelect(Msforms_97::fmMultiSelect MultiSelect/*[in]*/);
  HRESULT         __fastcall get_MultiSelect(Msforms_97::fmMultiSelect* MultiSelect/*[out,retval]*/);
  Msforms_97::fmMultiSelect __fastcall get_MultiSelect(void);
  HRESULT         __fastcall set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/);
  Msforms_97::fmSpecialEffect __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_Text(BSTR Text/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_TextColumn(VARIANT* TextColumn/*[in]*/);
  HRESULT         __fastcall get_TextColumn(VARIANT* TextColumn/*[out,retval]*/);
  VARIANT         __fastcall get_TextColumn(void);
  HRESULT         __fastcall set_TopIndex(VARIANT* TopIndex/*[in]*/);
  HRESULT         __fastcall get_TopIndex(VARIANT* TopIndex/*[out,retval]*/);
  VARIANT         __fastcall get_TopIndex(void);
  HRESULT         __fastcall get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/);
  HRESULT         __fastcall get_Valid(TOLEBOOL* Valid/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Valid(void);
  HRESULT         __fastcall set_Value(VARIANT* Value/*[in]*/);
  HRESULT         __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT         __fastcall get_Column(VARIANT* pvargColumn/*[in,opt]*/, 
                                        VARIANT* pvargIndex/*[in,opt]*/, 
                                        VARIANT* pvargValue/*[out,retval]*/);
  VARIANT         __fastcall get_Column(VARIANT* pvargColumn/*[in,opt]*/= TNoParam(), 
                                        VARIANT* pvargIndex/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall set_Column(VARIANT* pvargColumn/*[in,opt]*/, 
                                        VARIANT* pvargIndex/*[in,opt]*/, VARIANT* pvargValue/*[in]*/);
  HRESULT         __fastcall get_List(VARIANT* pvargIndex/*[in,opt]*/, 
                                      VARIANT* pvargColumn/*[in,opt]*/, 
                                      VARIANT* pvargValue/*[out,retval]*/);
  VARIANT         __fastcall get_List(VARIANT* pvargIndex/*[in,opt]*/= TNoParam(), 
                                      VARIANT* pvargColumn/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall set_List(VARIANT* pvargIndex/*[in,opt]*/, 
                                      VARIANT* pvargColumn/*[in,opt]*/, VARIANT* pvargValue/*[in]*/);
  HRESULT         __fastcall get_Selected(VARIANT* pvargIndex/*[in]*/, 
                                          VARIANT_BOOL* pfvb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Selected(VARIANT* pvargIndex/*[in]*/);
  HRESULT         __fastcall set_Selected(VARIANT* pvargIndex/*[in]*/, VARIANT_BOOL pfvb/*[in]*/);
  HRESULT         __fastcall AddItem(VARIANT* pvargItem/*[in,opt]*/= TNoParam(), 
                                     VARIANT* pvargIndex/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall RemoveItem(VARIANT* pvargIndex/*[in]*/);
  HRESULT         __fastcall set_IMEMode(Msforms_97::fmIMEMode IMEMode/*[in]*/);
  HRESULT         __fastcall get_IMEMode(Msforms_97::fmIMEMode* IMEMode/*[out,retval]*/);
  Msforms_97::fmIMEMode __fastcall get_IMEMode(void);
  HRESULT         __fastcall get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/);
  Msforms_97::fmDisplayStyle __fastcall get_DisplayStyle(void);
  HRESULT         __fastcall set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/);
  HRESULT         __fastcall get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/);
  Msforms_97::fmTextAlign __fastcall get_TextAlign(void);

  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::OLE_COLOR BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   Msforms_97::fmBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   TOLEBOOL        BordersSuppress = {write = set_BordersSuppress};
  __property   long            ColumnCount = {read = get_ColumnCount, write = set_ColumnCount};
  __property   TOLEBOOL        ColumnHeads = {write = set_ColumnHeads};
  __property   BSTR            ColumnWidths = {read = get_ColumnWidths, write = set_ColumnWidths};
  __property   TOLEBOOL        Enabled = {write = set_Enabled};
  __property   IFontDisp*      _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp*      Font = {write = _set_Font};
  __property   TOLEBOOL        FontBold = {write = set_FontBold};
  __property   TOLEBOOL        FontItalic = {write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   TOLEBOOL        FontStrikethru = {write = set_FontStrikethru};
  __property   TOLEBOOL        FontUnderline = {write = set_FontUnderline};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   TOLEBOOL        IntegralHeight = {write = set_IntegralHeight};
  __property   long            ListCount = {read = get_ListCount};
  __property   Msforms_97::PIROWSET ListCursor = {read = get_ListCursor, write = set_ListCursor};
  __property   Msforms_97::fmListStyle ListStyle = {read = get_ListStyle, write = set_ListStyle};
  __property   TOLEBOOL        Locked = {write = set_Locked};
  __property   Msforms_97::fmMatchEntry MatchEntry = {read = get_MatchEntry, write = set_MatchEntry};
  __property   IPictureDisp*   MouseIcon = {write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   Msforms_97::fmMultiSelect MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   Msforms_97::fmSpecialEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   TOLEBOOL        Valid = {read = get_Valid};
  __property   Msforms_97::fmIMEMode IMEMode = {read = get_IMEMode, write = set_IMEMode};
  __property   Msforms_97::fmDisplayStyle DisplayStyle = {read = get_DisplayStyle};
  __property   Msforms_97::fmTextAlign TextAlign = {read = get_TextAlign, write = set_TextAlign};
};
typedef TCOMIMdcListT<IMdcList> TCOMIMdcList;

// *********************************************************************//
// DispIntf:  IMdcList
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8BD21D23-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template<class T>
class IMdcListDispT : public TAutoDriver<IMdcList>
{
public:
  IMdcListDispT(){}

  IMdcListDispT(IMdcList *pintf)
  {
    TAutoDriver<IMdcList>::Bind(pintf, false);
  }

  IMdcListDispT(IMdcListPtr pintf)
  {
    TAutoDriver<IMdcList>::Bind(pintf, true);
  }

  IMdcListDispT& operator=(IMdcList *pintf)
  {
    TAutoDriver<IMdcList>::Bind(pintf, false);
    return *this;
  }

  IMdcListDispT& operator=(IMdcListPtr pintf)
  {
    TAutoDriver<IMdcList>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListBox);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/);
  Msforms_97::fmBorderStyle __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BordersSuppress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BoundColumn(VARIANT* BoundColumn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BoundColumn(VARIANT* BoundColumn/*[out,retval]*/);
  VARIANT         __fastcall get_BoundColumn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnCount(long ColumnCount/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnCount(long* ColumnCount/*[out,retval]*/);
  long            __fastcall get_ColumnCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnHeads(VARIANT_BOOL ColumnHeads/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnHeads(VARIANT_BOOL* ColumnHeads/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ColumnHeads(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnWidths(BSTR ColumnWidths/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnWidths(BSTR* ColumnWidths/*[out,retval]*/);
  BSTR            __fastcall get_ColumnWidths(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  IFontDisp**     __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(VARIANT_BOOL FontBold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(CURRENCY FontSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(CURRENCY* FontSize/*[out,retval]*/);
  CURRENCY        __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontStrikethru(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontUnderline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontWeight(short FontWeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontWeight(short* FontWeight/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IntegralHeight(VARIANT_BOOL IntegralHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IntegralHeight(VARIANT_BOOL* IntegralHeight/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IntegralHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListCount(long* ListCount/*[out,retval]*/);
  long            __fastcall get_ListCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListCursor(Msforms_97::PIROWSET ListCursor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListCursor(Msforms_97::PIROWSET* ListCursor/*[out,retval]*/);
  Msforms_97::PIROWSET __fastcall get_ListCursor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListIndex(VARIANT* ListIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListIndex(VARIANT* ListIndex/*[out,retval]*/);
  VARIANT         __fastcall get_ListIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListStyle(Msforms_97::fmListStyle ListStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListStyle(Msforms_97::fmListStyle* ListStyle/*[out,retval]*/);
  Msforms_97::fmListStyle __fastcall get_ListStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListWidth(VARIANT* ListWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListWidth(VARIANT* ListWidth/*[out,retval]*/);
  VARIANT         __fastcall get_ListWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(VARIANT_BOOL Locked/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MatchEntry(Msforms_97::fmMatchEntry MatchEntry/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MatchEntry(Msforms_97::fmMatchEntry* MatchEntry/*[out,retval]*/);
  Msforms_97::fmMatchEntry __fastcall get_MatchEntry(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  IPictureDisp**  __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MultiSelect(Msforms_97::fmMultiSelect MultiSelect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MultiSelect(Msforms_97::fmMultiSelect* MultiSelect/*[out,retval]*/);
  Msforms_97::fmMultiSelect __fastcall get_MultiSelect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/);
  Msforms_97::fmSpecialEffect __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextColumn(VARIANT* TextColumn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextColumn(VARIANT* TextColumn/*[out,retval]*/);
  VARIANT         __fastcall get_TextColumn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TopIndex(VARIANT* TopIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TopIndex(VARIANT* TopIndex/*[out,retval]*/);
  VARIANT         __fastcall get_TopIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Valid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(VARIANT* Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Column(VARIANT* pvargColumn/*[in,opt]*/, 
                                                   VARIANT* pvargIndex/*[in,opt]*/, 
                                                   VARIANT* pvargValue/*[out,retval]*/);
  VARIANT         __fastcall get_Column(VARIANT* pvargColumn/*[in,opt]*/= TNoParam(), 
                                        VARIANT* pvargIndex/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Column(VARIANT* pvargColumn/*[in,opt]*/, 
                                                   VARIANT* pvargIndex/*[in,opt]*/, 
                                                   VARIANT* pvargValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_List(VARIANT* pvargIndex/*[in,opt]*/, 
                                                 VARIANT* pvargColumn/*[in,opt]*/, 
                                                 VARIANT* pvargValue/*[out,retval]*/);
  VARIANT         __fastcall get_List(VARIANT* pvargIndex/*[in,opt]*/= TNoParam(), 
                                      VARIANT* pvargColumn/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_List(VARIANT* pvargIndex/*[in,opt]*/, 
                                                 VARIANT* pvargColumn/*[in,opt]*/, 
                                                 VARIANT* pvargValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selected(VARIANT* pvargIndex/*[in]*/, 
                                                     VARIANT_BOOL* pfvb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Selected(VARIANT* pvargIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Selected(VARIANT* pvargIndex/*[in]*/, 
                                                     VARIANT_BOOL pfvb/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddItem(VARIANT* pvargItem/*[in,opt]*/= TNoParam(), 
                                                VARIANT* pvargIndex/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemoveItem(VARIANT* pvargIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IMEMode(Msforms_97::fmIMEMode IMEMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IMEMode(Msforms_97::fmIMEMode* IMEMode/*[out,retval]*/);
  Msforms_97::fmIMEMode __fastcall get_IMEMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/);
  Msforms_97::fmDisplayStyle __fastcall get_DisplayStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/);
  Msforms_97::fmTextAlign __fastcall get_TextAlign(void);

  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::OLE_COLOR BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   Msforms_97::fmBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   VARIANT_BOOL    BordersSuppress = {read = get_BordersSuppress, write = set_BordersSuppress};
  __property   long            ColumnCount = {read = get_ColumnCount, write = set_ColumnCount};
  __property   VARIANT_BOOL    ColumnHeads = {read = get_ColumnHeads, write = set_ColumnHeads};
  __property   BSTR            ColumnWidths = {read = get_ColumnWidths, write = set_ColumnWidths};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   VARIANT_BOOL    FontBold = {read = get_FontBold, write = set_FontBold};
  __property   VARIANT_BOOL    FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   VARIANT_BOOL    FontStrikethru = {read = get_FontStrikethru, write = set_FontStrikethru};
  __property   VARIANT_BOOL    FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   VARIANT_BOOL    IntegralHeight = {read = get_IntegralHeight, write = set_IntegralHeight};
  __property   long            ListCount = {read = get_ListCount};
  __property   Msforms_97::PIROWSET ListCursor = {read = get_ListCursor, write = set_ListCursor};
  __property   Msforms_97::fmListStyle ListStyle = {read = get_ListStyle, write = set_ListStyle};
  __property   VARIANT_BOOL    Locked = {read = get_Locked, write = set_Locked};
  __property   Msforms_97::fmMatchEntry MatchEntry = {read = get_MatchEntry, write = set_MatchEntry};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   Msforms_97::fmMultiSelect MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   Msforms_97::fmSpecialEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   VARIANT_BOOL    Valid = {read = get_Valid};
  __property   Msforms_97::fmIMEMode IMEMode = {read = get_IMEMode, write = set_IMEMode};
  __property   Msforms_97::fmDisplayStyle DisplayStyle = {read = get_DisplayStyle};
  __property   Msforms_97::fmTextAlign TextAlign = {read = get_TextAlign, write = set_TextAlign};
};
typedef IMdcListDispT<IMdcList> IMdcListDisp;

// *********************************************************************//
// SmartIntf: TCOMIMdcCombo
// Interface: IMdcCombo
// *********************************************************************//
template <class T /* IMdcCombo */ >
class TCOMIMdcComboT : public TComInterface<IMdcCombo>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMdcComboT() {}
  TCOMIMdcComboT(IMdcCombo *intf, bool addRef = false) : TComInterface<IMdcCombo>(intf, addRef) {}
  TCOMIMdcComboT(const TCOMIMdcComboT& src) : TComInterface<IMdcCombo>(src) {}
  TCOMIMdcComboT& operator=(const TCOMIMdcComboT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL AutoSize/*[in]*/);
  HRESULT         __fastcall set_AutoSize(TOLEBOOL AutoSize/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* AutoSize/*[out,retval]*/);
  HRESULT         __fastcall get_AutoSize(TOLEBOOL* AutoSize/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoTab(VARIANT_BOOL AutoTab/*[in]*/);
  HRESULT         __fastcall set_AutoTab(TOLEBOOL AutoTab/*[in]*/);
  HRESULT         __fastcall get_AutoTab(VARIANT_BOOL* AutoTab/*[out,retval]*/);
  HRESULT         __fastcall get_AutoTab(TOLEBOOL* AutoTab/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoTab(void);
  HRESULT         __fastcall set_AutoWordSelect(VARIANT_BOOL AutoWordSelect/*[in]*/);
  HRESULT         __fastcall set_AutoWordSelect(TOLEBOOL AutoWordSelect/*[in]*/);
  HRESULT         __fastcall get_AutoWordSelect(VARIANT_BOOL* AutoWordSelect/*[out,retval]*/);
  HRESULT         __fastcall get_AutoWordSelect(TOLEBOOL* AutoWordSelect/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoWordSelect(void);
  HRESULT         __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT         __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/);
  HRESULT         __fastcall get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/);
  Msforms_97::fmBackStyle __fastcall get_BackStyle(void);
  HRESULT         __fastcall set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/);
  HRESULT         __fastcall get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/);
  Msforms_97::fmBorderStyle __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/);
  HRESULT         __fastcall set_BordersSuppress(TOLEBOOL BordersSuppress/*[in]*/);
  HRESULT         __fastcall get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/);
  HRESULT         __fastcall get_BordersSuppress(TOLEBOOL* BordersSuppress/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BordersSuppress(void);
  HRESULT         __fastcall set_BoundColumn(VARIANT* BoundColumn/*[in]*/);
  HRESULT         __fastcall get_BoundColumn(VARIANT* BoundColumn/*[out,retval]*/);
  VARIANT         __fastcall get_BoundColumn(void);
  HRESULT         __fastcall get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/);
  HRESULT         __fastcall get_CanPaste(TOLEBOOL* CanPaste/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanPaste(void);
  HRESULT         __fastcall set_ColumnCount(long ColumnCount/*[in]*/);
  HRESULT         __fastcall get_ColumnCount(long* ColumnCount/*[out,retval]*/);
  long            __fastcall get_ColumnCount(void);
  HRESULT         __fastcall set_ColumnHeads(VARIANT_BOOL ColumnHeads/*[in]*/);
  HRESULT         __fastcall set_ColumnHeads(TOLEBOOL ColumnHeads/*[in]*/);
  HRESULT         __fastcall get_ColumnHeads(VARIANT_BOOL* ColumnHeads/*[out,retval]*/);
  HRESULT         __fastcall get_ColumnHeads(TOLEBOOL* ColumnHeads/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHeads(void);
  HRESULT         __fastcall set_ColumnWidths(BSTR ColumnWidths/*[in]*/);
  HRESULT         __fastcall get_ColumnWidths(BSTR* ColumnWidths/*[out,retval]*/);
  BSTR            __fastcall get_ColumnWidths(void);
  HRESULT         __fastcall get_CurTargetX(long* CurTargetX/*[out,retval]*/);
  long            __fastcall get_CurTargetX(void);
  HRESULT         __fastcall get_CurTargetY(long* CurTargetY/*[out,retval]*/);
  long            __fastcall get_CurTargetY(void);
  HRESULT         __fastcall set_CurX(long CurX/*[in]*/);
  HRESULT         __fastcall get_CurX(long* CurX/*[out,retval]*/);
  long            __fastcall get_CurX(void);
  HRESULT         __fastcall set_DropButtonStyle(Msforms_97::fmDropButtonStyle DropButtonStyle/*[in]*/);
  HRESULT         __fastcall get_DropButtonStyle(Msforms_97::fmDropButtonStyle* DropButtonStyle/*[out,retval]*/);
  Msforms_97::fmDropButtonStyle __fastcall get_DropButtonStyle(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL Enabled/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* Enabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT         __fastcall set__Font_Reserved(IFontDisp* Param1/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp* Font/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Font/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_FontBold(VARIANT_BOOL FontBold/*[in]*/);
  HRESULT         __fastcall set_FontBold(TOLEBOOL FontBold/*[in]*/);
  HRESULT         __fastcall get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/);
  HRESULT         __fastcall get_FontBold(TOLEBOOL* FontBold/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontBold(void);
  HRESULT         __fastcall set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/);
  HRESULT         __fastcall set_FontItalic(TOLEBOOL FontItalic/*[in]*/);
  HRESULT         __fastcall get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/);
  HRESULT         __fastcall get_FontItalic(TOLEBOOL* FontItalic/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT         __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT         __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT         __fastcall set_FontSize(CURRENCY FontSize/*[in]*/);
  HRESULT         __fastcall get_FontSize(CURRENCY* FontSize/*[out,retval]*/);
  CURRENCY        __fastcall get_FontSize(void);
  HRESULT         __fastcall set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/);
  HRESULT         __fastcall set_FontStrikethru(TOLEBOOL FontStrikethru/*[in]*/);
  HRESULT         __fastcall get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/);
  HRESULT         __fastcall get_FontStrikethru(TOLEBOOL* FontStrikethru/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontStrikethru(void);
  HRESULT         __fastcall set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/);
  HRESULT         __fastcall set_FontUnderline(TOLEBOOL FontUnderline/*[in]*/);
  HRESULT         __fastcall get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/);
  HRESULT         __fastcall get_FontUnderline(TOLEBOOL* FontUnderline/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT         __fastcall set_FontWeight(short FontWeight/*[in]*/);
  HRESULT         __fastcall get_FontWeight(short* FontWeight/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT         __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT         __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_HideSelection(VARIANT_BOOL HideSelection/*[in]*/);
  HRESULT         __fastcall set_HideSelection(TOLEBOOL HideSelection/*[in]*/);
  HRESULT         __fastcall get_HideSelection(VARIANT_BOOL* HideSelection/*[out,retval]*/);
  HRESULT         __fastcall get_HideSelection(TOLEBOOL* HideSelection/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideSelection(void);
  HRESULT         __fastcall get_LineCount(long* LineCount/*[out,retval]*/);
  long            __fastcall get_LineCount(void);
  HRESULT         __fastcall get_ListCount(long* ListCount/*[out,retval]*/);
  long            __fastcall get_ListCount(void);
  HRESULT         __fastcall set_ListCursor(Msforms_97::PIROWSET ListCursor/*[in]*/);
  HRESULT         __fastcall get_ListCursor(Msforms_97::PIROWSET* ListCursor/*[out,retval]*/);
  Msforms_97::PIROWSET __fastcall get_ListCursor(void);
  HRESULT         __fastcall set_ListIndex(VARIANT* ListIndex/*[in]*/);
  HRESULT         __fastcall get_ListIndex(VARIANT* ListIndex/*[out,retval]*/);
  VARIANT         __fastcall get_ListIndex(void);
  HRESULT         __fastcall set_ListRows(long ListRows/*[in]*/);
  HRESULT         __fastcall get_ListRows(long* ListRows/*[out,retval]*/);
  long            __fastcall get_ListRows(void);
  HRESULT         __fastcall set_ListStyle(Msforms_97::fmListStyle ListStyle/*[in]*/);
  HRESULT         __fastcall get_ListStyle(Msforms_97::fmListStyle* ListStyle/*[out,retval]*/);
  Msforms_97::fmListStyle __fastcall get_ListStyle(void);
  HRESULT         __fastcall set_ListWidth(VARIANT* ListWidth/*[in]*/);
  HRESULT         __fastcall get_ListWidth(VARIANT* ListWidth/*[out,retval]*/);
  VARIANT         __fastcall get_ListWidth(void);
  HRESULT         __fastcall set_Locked(VARIANT_BOOL Locked/*[in]*/);
  HRESULT         __fastcall set_Locked(TOLEBOOL Locked/*[in]*/);
  HRESULT         __fastcall get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/);
  HRESULT         __fastcall get_Locked(TOLEBOOL* Locked/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT         __fastcall set_MatchEntry(Msforms_97::fmMatchEntry MatchEntry/*[in]*/);
  HRESULT         __fastcall get_MatchEntry(Msforms_97::fmMatchEntry* MatchEntry/*[out,retval]*/);
  Msforms_97::fmMatchEntry __fastcall get_MatchEntry(void);
  HRESULT         __fastcall get_MatchFound(VARIANT_BOOL* MatchFound/*[out,retval]*/);
  HRESULT         __fastcall get_MatchFound(TOLEBOOL* MatchFound/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MatchFound(void);
  HRESULT         __fastcall set_MatchRequired(VARIANT_BOOL MatchRequired/*[in]*/);
  HRESULT         __fastcall set_MatchRequired(TOLEBOOL MatchRequired/*[in]*/);
  HRESULT         __fastcall get_MatchRequired(VARIANT_BOOL* MatchRequired/*[out,retval]*/);
  HRESULT         __fastcall get_MatchRequired(TOLEBOOL* MatchRequired/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MatchRequired(void);
  HRESULT         __fastcall set_MaxLength(long MaxLength/*[in]*/);
  HRESULT         __fastcall get_MaxLength(long* MaxLength/*[out,retval]*/);
  long            __fastcall get_MaxLength(void);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT         __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT         __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT         __fastcall set_SelectionMargin(VARIANT_BOOL SelectionMargin/*[in]*/);
  HRESULT         __fastcall set_SelectionMargin(TOLEBOOL SelectionMargin/*[in]*/);
  HRESULT         __fastcall get_SelectionMargin(VARIANT_BOOL* SelectionMargin/*[out,retval]*/);
  HRESULT         __fastcall get_SelectionMargin(TOLEBOOL* SelectionMargin/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SelectionMargin(void);
  HRESULT         __fastcall set_SelLength(long SelLength/*[in]*/);
  HRESULT         __fastcall get_SelLength(long* SelLength/*[out,retval]*/);
  long            __fastcall get_SelLength(void);
  HRESULT         __fastcall set_SelStart(long SelStart/*[in]*/);
  HRESULT         __fastcall get_SelStart(long* SelStart/*[out,retval]*/);
  long            __fastcall get_SelStart(void);
  HRESULT         __fastcall set_SelText(BSTR SelText/*[in]*/);
  HRESULT         __fastcall get_SelText(BSTR* SelText/*[out,retval]*/);
  BSTR            __fastcall get_SelText(void);
  HRESULT         __fastcall set_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen/*[in]*/);
  HRESULT         __fastcall get_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen* ShowDropButtonWhen/*[out,retval]*/);
  Msforms_97::fmShowDropButtonWhen __fastcall get_ShowDropButtonWhen(void);
  HRESULT         __fastcall set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/);
  Msforms_97::fmSpecialEffect __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_Style(Msforms_97::fmStyle Style/*[in]*/);
  HRESULT         __fastcall get_Style(Msforms_97::fmStyle* Style/*[out,retval]*/);
  Msforms_97::fmStyle __fastcall get_Style(void);
  HRESULT         __fastcall set_Text(BSTR Text/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/);
  HRESULT         __fastcall get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/);
  Msforms_97::fmTextAlign __fastcall get_TextAlign(void);
  HRESULT         __fastcall set_TextColumn(VARIANT* TextColumn/*[in]*/);
  HRESULT         __fastcall get_TextColumn(VARIANT* TextColumn/*[out,retval]*/);
  VARIANT         __fastcall get_TextColumn(void);
  HRESULT         __fastcall get_TextLength(long* TextLength/*[out,retval]*/);
  long            __fastcall get_TextLength(void);
  HRESULT         __fastcall set_TopIndex(VARIANT* TopIndex/*[in]*/);
  HRESULT         __fastcall get_TopIndex(VARIANT* TopIndex/*[out,retval]*/);
  VARIANT         __fastcall get_TopIndex(void);
  HRESULT         __fastcall get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/);
  HRESULT         __fastcall get_Valid(TOLEBOOL* Valid/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Valid(void);
  HRESULT         __fastcall set_Value(VARIANT* Value/*[in]*/);
  HRESULT         __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT         __fastcall get_Column(VARIANT* pvargColumn/*[in,opt]*/, 
                                        VARIANT* pvargIndex/*[in,opt]*/, 
                                        VARIANT* pvargValue/*[out,retval]*/);
  VARIANT         __fastcall get_Column(VARIANT* pvargColumn/*[in,opt]*/= TNoParam(), 
                                        VARIANT* pvargIndex/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall set_Column(VARIANT* pvargColumn/*[in,opt]*/, 
                                        VARIANT* pvargIndex/*[in,opt]*/, VARIANT* pvargValue/*[in]*/);
  HRESULT         __fastcall get_List(VARIANT* pvargIndex/*[in,opt]*/, 
                                      VARIANT* pvargColumn/*[in,opt]*/, 
                                      VARIANT* pvargValue/*[out,retval]*/);
  VARIANT         __fastcall get_List(VARIANT* pvargIndex/*[in,opt]*/= TNoParam(), 
                                      VARIANT* pvargColumn/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall set_List(VARIANT* pvargIndex/*[in,opt]*/, 
                                      VARIANT* pvargColumn/*[in,opt]*/, VARIANT* pvargValue/*[in]*/);
  HRESULT         __fastcall AddItem(VARIANT* pvargItem/*[in,opt]*/= TNoParam(), 
                                     VARIANT* pvargIndex/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall DropDown(void);
  HRESULT         __fastcall RemoveItem(VARIANT* pvargIndex/*[in]*/);
  HRESULT         __fastcall Copy(void);
  HRESULT         __fastcall Cut(void);
  HRESULT         __fastcall Paste(void);
  HRESULT         __fastcall set_IMEMode(Msforms_97::fmIMEMode IMEMode/*[in]*/);
  HRESULT         __fastcall get_IMEMode(Msforms_97::fmIMEMode* IMEMode/*[out,retval]*/);
  Msforms_97::fmIMEMode __fastcall get_IMEMode(void);
  HRESULT         __fastcall set_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior EnterFieldBehavior/*[in]*/);
  HRESULT         __fastcall get_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior* EnterFieldBehavior/*[out,retval]*/);
  Msforms_97::fmEnterFieldBehavior __fastcall get_EnterFieldBehavior(void);
  HRESULT         __fastcall set_DragBehavior(Msforms_97::fmDragBehavior DragBehavior/*[in]*/);
  HRESULT         __fastcall get_DragBehavior(Msforms_97::fmDragBehavior* DragBehavior/*[out,retval]*/);
  Msforms_97::fmDragBehavior __fastcall get_DragBehavior(void);
  HRESULT         __fastcall get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/);
  Msforms_97::fmDisplayStyle __fastcall get_DisplayStyle(void);

  __property   TOLEBOOL        AutoSize = {write = set_AutoSize};
  __property   TOLEBOOL        AutoTab = {write = set_AutoTab};
  __property   TOLEBOOL        AutoWordSelect = {write = set_AutoWordSelect};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   Msforms_97::OLE_COLOR BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   Msforms_97::fmBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   TOLEBOOL        BordersSuppress = {write = set_BordersSuppress};
  __property   TOLEBOOL        CanPaste = {read = get_CanPaste};
  __property   long            ColumnCount = {read = get_ColumnCount, write = set_ColumnCount};
  __property   TOLEBOOL        ColumnHeads = {write = set_ColumnHeads};
  __property   BSTR            ColumnWidths = {read = get_ColumnWidths, write = set_ColumnWidths};
  __property   long            CurTargetX = {read = get_CurTargetX};
  __property   long            CurTargetY = {read = get_CurTargetY};
  __property   long            CurX = {read = get_CurX, write = set_CurX};
  __property   Msforms_97::fmDropButtonStyle DropButtonStyle = {read = get_DropButtonStyle, write = set_DropButtonStyle};
  __property   TOLEBOOL        Enabled = {write = set_Enabled};
  __property   IFontDisp*      _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp*      Font = {write = _set_Font};
  __property   TOLEBOOL        FontBold = {write = set_FontBold};
  __property   TOLEBOOL        FontItalic = {write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   TOLEBOOL        FontStrikethru = {write = set_FontStrikethru};
  __property   TOLEBOOL        FontUnderline = {write = set_FontUnderline};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   TOLEBOOL        HideSelection = {write = set_HideSelection};
  __property   long            LineCount = {read = get_LineCount};
  __property   long            ListCount = {read = get_ListCount};
  __property   Msforms_97::PIROWSET ListCursor = {read = get_ListCursor, write = set_ListCursor};
  __property   long            ListRows = {read = get_ListRows, write = set_ListRows};
  __property   Msforms_97::fmListStyle ListStyle = {read = get_ListStyle, write = set_ListStyle};
  __property   TOLEBOOL        Locked = {write = set_Locked};
  __property   Msforms_97::fmMatchEntry MatchEntry = {read = get_MatchEntry, write = set_MatchEntry};
  __property   TOLEBOOL        MatchFound = {read = get_MatchFound};
  __property   TOLEBOOL        MatchRequired = {write = set_MatchRequired};
  __property   long            MaxLength = {read = get_MaxLength, write = set_MaxLength};
  __property   IPictureDisp*   MouseIcon = {write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   TOLEBOOL        SelectionMargin = {write = set_SelectionMargin};
  __property   long            SelLength = {read = get_SelLength, write = set_SelLength};
  __property   long            SelStart = {read = get_SelStart, write = set_SelStart};
  __property   BSTR            SelText = {read = get_SelText, write = set_SelText};
  __property   Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen = {read = get_ShowDropButtonWhen, write = set_ShowDropButtonWhen};
  __property   Msforms_97::fmSpecialEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   Msforms_97::fmStyle Style = {read = get_Style, write = set_Style};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   Msforms_97::fmTextAlign TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   long            TextLength = {read = get_TextLength};
  __property   TOLEBOOL        Valid = {read = get_Valid};
  __property   Msforms_97::fmIMEMode IMEMode = {read = get_IMEMode, write = set_IMEMode};
  __property   Msforms_97::fmEnterFieldBehavior EnterFieldBehavior = {read = get_EnterFieldBehavior, write = set_EnterFieldBehavior};
  __property   Msforms_97::fmDragBehavior DragBehavior = {read = get_DragBehavior, write = set_DragBehavior};
  __property   Msforms_97::fmDisplayStyle DisplayStyle = {read = get_DisplayStyle};
};
typedef TCOMIMdcComboT<IMdcCombo> TCOMIMdcCombo;

// *********************************************************************//
// DispIntf:  IMdcCombo
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8BD21D33-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template<class T>
class IMdcComboDispT : public TAutoDriver<IMdcCombo>
{
public:
  IMdcComboDispT(){}

  IMdcComboDispT(IMdcCombo *pintf)
  {
    TAutoDriver<IMdcCombo>::Bind(pintf, false);
  }

  IMdcComboDispT(IMdcComboPtr pintf)
  {
    TAutoDriver<IMdcCombo>::Bind(pintf, true);
  }

  IMdcComboDispT& operator=(IMdcCombo *pintf)
  {
    TAutoDriver<IMdcCombo>::Bind(pintf, false);
    return *this;
  }

  IMdcComboDispT& operator=(IMdcComboPtr pintf)
  {
    TAutoDriver<IMdcCombo>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ComboBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ComboBox);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoSize(VARIANT_BOOL AutoSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoSize(VARIANT_BOOL* AutoSize/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoTab(VARIANT_BOOL AutoTab/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoTab(VARIANT_BOOL* AutoTab/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoTab(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoWordSelect(VARIANT_BOOL AutoWordSelect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoWordSelect(VARIANT_BOOL* AutoWordSelect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoWordSelect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/);
  Msforms_97::fmBackStyle __fastcall get_BackStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/);
  Msforms_97::fmBorderStyle __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BordersSuppress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BoundColumn(VARIANT* BoundColumn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BoundColumn(VARIANT* BoundColumn/*[out,retval]*/);
  VARIANT         __fastcall get_BoundColumn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanPaste(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnCount(long ColumnCount/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnCount(long* ColumnCount/*[out,retval]*/);
  long            __fastcall get_ColumnCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnHeads(VARIANT_BOOL ColumnHeads/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnHeads(VARIANT_BOOL* ColumnHeads/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ColumnHeads(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnWidths(BSTR ColumnWidths/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnWidths(BSTR* ColumnWidths/*[out,retval]*/);
  BSTR            __fastcall get_ColumnWidths(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurTargetX(long* CurTargetX/*[out,retval]*/);
  long            __fastcall get_CurTargetX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurTargetY(long* CurTargetY/*[out,retval]*/);
  long            __fastcall get_CurTargetY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CurX(long CurX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurX(long* CurX/*[out,retval]*/);
  long            __fastcall get_CurX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DropButtonStyle(Msforms_97::fmDropButtonStyle DropButtonStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DropButtonStyle(Msforms_97::fmDropButtonStyle* DropButtonStyle/*[out,retval]*/);
  Msforms_97::fmDropButtonStyle __fastcall get_DropButtonStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  IFontDisp**     __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(VARIANT_BOOL FontBold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(CURRENCY FontSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(CURRENCY* FontSize/*[out,retval]*/);
  CURRENCY        __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontStrikethru(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontUnderline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontWeight(short FontWeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontWeight(short* FontWeight/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HideSelection(VARIANT_BOOL HideSelection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HideSelection(VARIANT_BOOL* HideSelection/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HideSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LineCount(long* LineCount/*[out,retval]*/);
  long            __fastcall get_LineCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListCount(long* ListCount/*[out,retval]*/);
  long            __fastcall get_ListCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListCursor(Msforms_97::PIROWSET ListCursor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListCursor(Msforms_97::PIROWSET* ListCursor/*[out,retval]*/);
  Msforms_97::PIROWSET __fastcall get_ListCursor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListIndex(VARIANT* ListIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListIndex(VARIANT* ListIndex/*[out,retval]*/);
  VARIANT         __fastcall get_ListIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListRows(long ListRows/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListRows(long* ListRows/*[out,retval]*/);
  long            __fastcall get_ListRows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListStyle(Msforms_97::fmListStyle ListStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListStyle(Msforms_97::fmListStyle* ListStyle/*[out,retval]*/);
  Msforms_97::fmListStyle __fastcall get_ListStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListWidth(VARIANT* ListWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListWidth(VARIANT* ListWidth/*[out,retval]*/);
  VARIANT         __fastcall get_ListWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(VARIANT_BOOL Locked/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MatchEntry(Msforms_97::fmMatchEntry MatchEntry/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MatchEntry(Msforms_97::fmMatchEntry* MatchEntry/*[out,retval]*/);
  Msforms_97::fmMatchEntry __fastcall get_MatchEntry(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MatchFound(VARIANT_BOOL* MatchFound/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MatchFound(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MatchRequired(VARIANT_BOOL MatchRequired/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MatchRequired(VARIANT_BOOL* MatchRequired/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MatchRequired(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MaxLength(long MaxLength/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MaxLength(long* MaxLength/*[out,retval]*/);
  long            __fastcall get_MaxLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  IPictureDisp**  __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelectionMargin(VARIANT_BOOL SelectionMargin/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectionMargin(VARIANT_BOOL* SelectionMargin/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SelectionMargin(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelLength(long SelLength/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelLength(long* SelLength/*[out,retval]*/);
  long            __fastcall get_SelLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelStart(long SelStart/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelStart(long* SelStart/*[out,retval]*/);
  long            __fastcall get_SelStart(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelText(BSTR SelText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelText(BSTR* SelText/*[out,retval]*/);
  BSTR            __fastcall get_SelText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen* ShowDropButtonWhen/*[out,retval]*/);
  Msforms_97::fmShowDropButtonWhen __fastcall get_ShowDropButtonWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/);
  Msforms_97::fmSpecialEffect __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Msforms_97::fmStyle Style/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Msforms_97::fmStyle* Style/*[out,retval]*/);
  Msforms_97::fmStyle __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/);
  Msforms_97::fmTextAlign __fastcall get_TextAlign(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextColumn(VARIANT* TextColumn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextColumn(VARIANT* TextColumn/*[out,retval]*/);
  VARIANT         __fastcall get_TextColumn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextLength(long* TextLength/*[out,retval]*/);
  long            __fastcall get_TextLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TopIndex(VARIANT* TopIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TopIndex(VARIANT* TopIndex/*[out,retval]*/);
  VARIANT         __fastcall get_TopIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Valid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(VARIANT* Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Column(VARIANT* pvargColumn/*[in,opt]*/, 
                                                   VARIANT* pvargIndex/*[in,opt]*/, 
                                                   VARIANT* pvargValue/*[out,retval]*/);
  VARIANT         __fastcall get_Column(VARIANT* pvargColumn/*[in,opt]*/= TNoParam(), 
                                        VARIANT* pvargIndex/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Column(VARIANT* pvargColumn/*[in,opt]*/, 
                                                   VARIANT* pvargIndex/*[in,opt]*/, 
                                                   VARIANT* pvargValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_List(VARIANT* pvargIndex/*[in,opt]*/, 
                                                 VARIANT* pvargColumn/*[in,opt]*/, 
                                                 VARIANT* pvargValue/*[out,retval]*/);
  VARIANT         __fastcall get_List(VARIANT* pvargIndex/*[in,opt]*/= TNoParam(), 
                                      VARIANT* pvargColumn/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_List(VARIANT* pvargIndex/*[in,opt]*/, 
                                                 VARIANT* pvargColumn/*[in,opt]*/, 
                                                 VARIANT* pvargValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddItem(VARIANT* pvargItem/*[in,opt]*/= TNoParam(), 
                                                VARIANT* pvargIndex/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DropDown();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemoveItem(VARIANT* pvargIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Paste();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IMEMode(Msforms_97::fmIMEMode IMEMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IMEMode(Msforms_97::fmIMEMode* IMEMode/*[out,retval]*/);
  Msforms_97::fmIMEMode __fastcall get_IMEMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior EnterFieldBehavior/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior* EnterFieldBehavior/*[out,retval]*/);
  Msforms_97::fmEnterFieldBehavior __fastcall get_EnterFieldBehavior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DragBehavior(Msforms_97::fmDragBehavior DragBehavior/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DragBehavior(Msforms_97::fmDragBehavior* DragBehavior/*[out,retval]*/);
  Msforms_97::fmDragBehavior __fastcall get_DragBehavior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/);
  Msforms_97::fmDisplayStyle __fastcall get_DisplayStyle(void);

  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   VARIANT_BOOL    AutoTab = {read = get_AutoTab, write = set_AutoTab};
  __property   VARIANT_BOOL    AutoWordSelect = {read = get_AutoWordSelect, write = set_AutoWordSelect};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   Msforms_97::OLE_COLOR BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   Msforms_97::fmBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   VARIANT_BOOL    BordersSuppress = {read = get_BordersSuppress, write = set_BordersSuppress};
  __property   VARIANT_BOOL    CanPaste = {read = get_CanPaste};
  __property   long            ColumnCount = {read = get_ColumnCount, write = set_ColumnCount};
  __property   VARIANT_BOOL    ColumnHeads = {read = get_ColumnHeads, write = set_ColumnHeads};
  __property   BSTR            ColumnWidths = {read = get_ColumnWidths, write = set_ColumnWidths};
  __property   long            CurTargetX = {read = get_CurTargetX};
  __property   long            CurTargetY = {read = get_CurTargetY};
  __property   long            CurX = {read = get_CurX, write = set_CurX};
  __property   Msforms_97::fmDropButtonStyle DropButtonStyle = {read = get_DropButtonStyle, write = set_DropButtonStyle};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   VARIANT_BOOL    FontBold = {read = get_FontBold, write = set_FontBold};
  __property   VARIANT_BOOL    FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   VARIANT_BOOL    FontStrikethru = {read = get_FontStrikethru, write = set_FontStrikethru};
  __property   VARIANT_BOOL    FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   VARIANT_BOOL    HideSelection = {read = get_HideSelection, write = set_HideSelection};
  __property   long            LineCount = {read = get_LineCount};
  __property   long            ListCount = {read = get_ListCount};
  __property   Msforms_97::PIROWSET ListCursor = {read = get_ListCursor, write = set_ListCursor};
  __property   long            ListRows = {read = get_ListRows, write = set_ListRows};
  __property   Msforms_97::fmListStyle ListStyle = {read = get_ListStyle, write = set_ListStyle};
  __property   VARIANT_BOOL    Locked = {read = get_Locked, write = set_Locked};
  __property   Msforms_97::fmMatchEntry MatchEntry = {read = get_MatchEntry, write = set_MatchEntry};
  __property   VARIANT_BOOL    MatchFound = {read = get_MatchFound};
  __property   VARIANT_BOOL    MatchRequired = {read = get_MatchRequired, write = set_MatchRequired};
  __property   long            MaxLength = {read = get_MaxLength, write = set_MaxLength};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   VARIANT_BOOL    SelectionMargin = {read = get_SelectionMargin, write = set_SelectionMargin};
  __property   long            SelLength = {read = get_SelLength, write = set_SelLength};
  __property   long            SelStart = {read = get_SelStart, write = set_SelStart};
  __property   BSTR            SelText = {read = get_SelText, write = set_SelText};
  __property   Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen = {read = get_ShowDropButtonWhen, write = set_ShowDropButtonWhen};
  __property   Msforms_97::fmSpecialEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   Msforms_97::fmStyle Style = {read = get_Style, write = set_Style};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   Msforms_97::fmTextAlign TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   long            TextLength = {read = get_TextLength};
  __property   VARIANT_BOOL    Valid = {read = get_Valid};
  __property   Msforms_97::fmIMEMode IMEMode = {read = get_IMEMode, write = set_IMEMode};
  __property   Msforms_97::fmEnterFieldBehavior EnterFieldBehavior = {read = get_EnterFieldBehavior, write = set_EnterFieldBehavior};
  __property   Msforms_97::fmDragBehavior DragBehavior = {read = get_DragBehavior, write = set_DragBehavior};
  __property   Msforms_97::fmDisplayStyle DisplayStyle = {read = get_DisplayStyle};
};
typedef IMdcComboDispT<IMdcCombo> IMdcComboDisp;

// *********************************************************************//
// SmartIntf: TCOMIMdcCheckBox
// Interface: IMdcCheckBox
// *********************************************************************//
template <class T /* IMdcCheckBox */ >
class TCOMIMdcCheckBoxT : public TComInterface<IMdcCheckBox>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMdcCheckBoxT() {}
  TCOMIMdcCheckBoxT(IMdcCheckBox *intf, bool addRef = false) : TComInterface<IMdcCheckBox>(intf, addRef) {}
  TCOMIMdcCheckBoxT(const TCOMIMdcCheckBoxT& src) : TComInterface<IMdcCheckBox>(src) {}
  TCOMIMdcCheckBoxT& operator=(const TCOMIMdcCheckBoxT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_Accelerator(BSTR Accelerator/*[in]*/);
  HRESULT         __fastcall get_Accelerator(BSTR* Accelerator/*[out,retval]*/);
  BSTR            __fastcall get_Accelerator(void);
  HRESULT         __fastcall set_Alignment(Msforms_97::fmAlignment Alignment/*[in]*/);
  HRESULT         __fastcall get_Alignment(Msforms_97::fmAlignment* Alignment/*[out,retval]*/);
  Msforms_97::fmAlignment __fastcall get_Alignment(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL AutoSize/*[in]*/);
  HRESULT         __fastcall set_AutoSize(TOLEBOOL AutoSize/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* AutoSize/*[out,retval]*/);
  HRESULT         __fastcall get_AutoSize(TOLEBOOL* AutoSize/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT         __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/);
  HRESULT         __fastcall get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/);
  Msforms_97::fmBackStyle __fastcall get_BackStyle(void);
  HRESULT         __fastcall set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/);
  HRESULT         __fastcall set_BordersSuppress(TOLEBOOL BordersSuppress/*[in]*/);
  HRESULT         __fastcall get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/);
  HRESULT         __fastcall get_BordersSuppress(TOLEBOOL* BordersSuppress/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BordersSuppress(void);
  HRESULT         __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL Enabled/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* Enabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT         __fastcall set__Font_Reserved(IFontDisp* Param1/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp* Font/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Font/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_FontBold(VARIANT_BOOL FontBold/*[in]*/);
  HRESULT         __fastcall set_FontBold(TOLEBOOL FontBold/*[in]*/);
  HRESULT         __fastcall get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/);
  HRESULT         __fastcall get_FontBold(TOLEBOOL* FontBold/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontBold(void);
  HRESULT         __fastcall set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/);
  HRESULT         __fastcall set_FontItalic(TOLEBOOL FontItalic/*[in]*/);
  HRESULT         __fastcall get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/);
  HRESULT         __fastcall get_FontItalic(TOLEBOOL* FontItalic/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT         __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT         __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT         __fastcall set_FontSize(CURRENCY FontSize/*[in]*/);
  HRESULT         __fastcall get_FontSize(CURRENCY* FontSize/*[out,retval]*/);
  CURRENCY        __fastcall get_FontSize(void);
  HRESULT         __fastcall set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/);
  HRESULT         __fastcall set_FontStrikethru(TOLEBOOL FontStrikethru/*[in]*/);
  HRESULT         __fastcall get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/);
  HRESULT         __fastcall get_FontStrikethru(TOLEBOOL* FontStrikethru/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontStrikethru(void);
  HRESULT         __fastcall set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/);
  HRESULT         __fastcall set_FontUnderline(TOLEBOOL FontUnderline/*[in]*/);
  HRESULT         __fastcall get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/);
  HRESULT         __fastcall get_FontUnderline(TOLEBOOL* FontUnderline/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT         __fastcall set_FontWeight(short FontWeight/*[in]*/);
  HRESULT         __fastcall get_FontWeight(short* FontWeight/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT         __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT         __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_Locked(VARIANT_BOOL Locked/*[in]*/);
  HRESULT         __fastcall set_Locked(TOLEBOOL Locked/*[in]*/);
  HRESULT         __fastcall get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/);
  HRESULT         __fastcall get_Locked(TOLEBOOL* Locked/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT         __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT         __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT         __fastcall set_MultiSelect(Msforms_97::fmMultiSelect MultiSelect/*[in]*/);
  HRESULT         __fastcall get_MultiSelect(Msforms_97::fmMultiSelect* MultiSelect/*[out,retval]*/);
  Msforms_97::fmMultiSelect __fastcall get_MultiSelect(void);
  HRESULT         __fastcall set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT         __fastcall set_Picture(IPictureDisp* Picture/*[in]*/);
  HRESULT         __fastcall _set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT         __fastcall _set_Picture(IPictureDisp* Picture/*[in]*/);
  HRESULT         __fastcall get_Picture(IPictureDisp*** Picture/*[out,retval]*/);
  HRESULT         __fastcall get_Picture(IPictureDisp** Picture/*[out,retval]*/);
  IPictureDisp*   __fastcall get_Picture(void);
  HRESULT         __fastcall set_PicturePosition(Msforms_97::fmPicturePosition PicPos/*[in]*/);
  HRESULT         __fastcall get_PicturePosition(Msforms_97::fmPicturePosition* PicPos/*[out,retval]*/);
  Msforms_97::fmPicturePosition __fastcall get_PicturePosition(void);
  HRESULT         __fastcall set_SpecialEffect(Msforms_97::fmButtonEffect SpecialEffect/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(Msforms_97::fmButtonEffect* SpecialEffect/*[out,retval]*/);
  Msforms_97::fmButtonEffect __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_TripleState(VARIANT_BOOL TripleState/*[in]*/);
  HRESULT         __fastcall set_TripleState(TOLEBOOL TripleState/*[in]*/);
  HRESULT         __fastcall get_TripleState(VARIANT_BOOL* TripleState/*[out,retval]*/);
  HRESULT         __fastcall get_TripleState(TOLEBOOL* TripleState/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TripleState(void);
  HRESULT         __fastcall get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/);
  HRESULT         __fastcall get_Valid(TOLEBOOL* Valid/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Valid(void);
  HRESULT         __fastcall set_Value(VARIANT* Value/*[in]*/);
  HRESULT         __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT         __fastcall set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/);
  HRESULT         __fastcall set_WordWrap(TOLEBOOL WordWrap/*[in]*/);
  HRESULT         __fastcall get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/);
  HRESULT         __fastcall get_WordWrap(TOLEBOOL* WordWrap/*[out,retval]*/);
  TOLEBOOL        __fastcall get_WordWrap(void);
  HRESULT         __fastcall get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/);
  Msforms_97::fmDisplayStyle __fastcall get_DisplayStyle(void);
  HRESULT         __fastcall set_GroupName(BSTR GroupName/*[in]*/);
  HRESULT         __fastcall get_GroupName(BSTR* GroupName/*[out,retval]*/);
  BSTR            __fastcall get_GroupName(void);
  HRESULT         __fastcall set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/);
  HRESULT         __fastcall get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/);
  Msforms_97::fmTextAlign __fastcall get_TextAlign(void);

  __property   BSTR            Accelerator = {read = get_Accelerator, write = set_Accelerator};
  __property   Msforms_97::fmAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   TOLEBOOL        AutoSize = {write = set_AutoSize};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   TOLEBOOL        BordersSuppress = {write = set_BordersSuppress};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   TOLEBOOL        Enabled = {write = set_Enabled};
  __property   IFontDisp*      _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp*      Font = {write = _set_Font};
  __property   TOLEBOOL        FontBold = {write = set_FontBold};
  __property   TOLEBOOL        FontItalic = {write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   TOLEBOOL        FontStrikethru = {write = set_FontStrikethru};
  __property   TOLEBOOL        FontUnderline = {write = set_FontUnderline};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   TOLEBOOL        Locked = {write = set_Locked};
  __property   IPictureDisp*   MouseIcon = {write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   Msforms_97::fmMultiSelect MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   IPictureDisp*   Picture = {write = set_Picture};
  __property   Msforms_97::fmPicturePosition PicturePosition = {read = get_PicturePosition, write = set_PicturePosition};
  __property   Msforms_97::fmButtonEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   TOLEBOOL        TripleState = {write = set_TripleState};
  __property   TOLEBOOL        Valid = {read = get_Valid};
  __property   TOLEBOOL        WordWrap = {write = set_WordWrap};
  __property   Msforms_97::fmDisplayStyle DisplayStyle = {read = get_DisplayStyle};
  __property   BSTR            GroupName = {read = get_GroupName, write = set_GroupName};
  __property   Msforms_97::fmTextAlign TextAlign = {read = get_TextAlign, write = set_TextAlign};
};
typedef TCOMIMdcCheckBoxT<IMdcCheckBox> TCOMIMdcCheckBox;

// *********************************************************************//
// DispIntf:  IMdcCheckBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8BD21D43-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template<class T>
class IMdcCheckBoxDispT : public TAutoDriver<IMdcCheckBox>
{
public:
  IMdcCheckBoxDispT(){}

  IMdcCheckBoxDispT(IMdcCheckBox *pintf)
  {
    TAutoDriver<IMdcCheckBox>::Bind(pintf, false);
  }

  IMdcCheckBoxDispT(IMdcCheckBoxPtr pintf)
  {
    TAutoDriver<IMdcCheckBox>::Bind(pintf, true);
  }

  IMdcCheckBoxDispT& operator=(IMdcCheckBox *pintf)
  {
    TAutoDriver<IMdcCheckBox>::Bind(pintf, false);
    return *this;
  }

  IMdcCheckBoxDispT& operator=(IMdcCheckBoxPtr pintf)
  {
    TAutoDriver<IMdcCheckBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CheckBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CheckBox);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Accelerator(BSTR Accelerator/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Accelerator(BSTR* Accelerator/*[out,retval]*/);
  BSTR            __fastcall get_Accelerator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Alignment(Msforms_97::fmAlignment Alignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Alignment(Msforms_97::fmAlignment* Alignment/*[out,retval]*/);
  Msforms_97::fmAlignment __fastcall get_Alignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoSize(VARIANT_BOOL AutoSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoSize(VARIANT_BOOL* AutoSize/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/);
  Msforms_97::fmBackStyle __fastcall get_BackStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BordersSuppress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  IFontDisp**     __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(VARIANT_BOOL FontBold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(CURRENCY FontSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(CURRENCY* FontSize/*[out,retval]*/);
  CURRENCY        __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontStrikethru(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontUnderline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontWeight(short FontWeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontWeight(short* FontWeight/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(VARIANT_BOOL Locked/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  IPictureDisp**  __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MultiSelect(Msforms_97::fmMultiSelect MultiSelect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MultiSelect(Msforms_97::fmMultiSelect* MultiSelect/*[out,retval]*/);
  Msforms_97::fmMultiSelect __fastcall get_MultiSelect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Picture(IPictureDisp*** Picture/*[out,retval]*/);
  IPictureDisp**  __fastcall get_Picture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PicturePosition(Msforms_97::fmPicturePosition PicPos/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PicturePosition(Msforms_97::fmPicturePosition* PicPos/*[out,retval]*/);
  Msforms_97::fmPicturePosition __fastcall get_PicturePosition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(Msforms_97::fmButtonEffect SpecialEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(Msforms_97::fmButtonEffect* SpecialEffect/*[out,retval]*/);
  Msforms_97::fmButtonEffect __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TripleState(VARIANT_BOOL TripleState/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TripleState(VARIANT_BOOL* TripleState/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TripleState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Valid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(VARIANT* Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_WordWrap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/);
  Msforms_97::fmDisplayStyle __fastcall get_DisplayStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupName(BSTR GroupName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupName(BSTR* GroupName/*[out,retval]*/);
  BSTR            __fastcall get_GroupName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/);
  Msforms_97::fmTextAlign __fastcall get_TextAlign(void);

  __property   BSTR            Accelerator = {read = get_Accelerator, write = set_Accelerator};
  __property   Msforms_97::fmAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   VARIANT_BOOL    BordersSuppress = {read = get_BordersSuppress, write = set_BordersSuppress};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   VARIANT_BOOL    FontBold = {read = get_FontBold, write = set_FontBold};
  __property   VARIANT_BOOL    FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   VARIANT_BOOL    FontStrikethru = {read = get_FontStrikethru, write = set_FontStrikethru};
  __property   VARIANT_BOOL    FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   VARIANT_BOOL    Locked = {read = get_Locked, write = set_Locked};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   Msforms_97::fmMultiSelect MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   IPictureDisp**  Picture = {read = get_Picture, write = set_Picture};
  __property   Msforms_97::fmPicturePosition PicturePosition = {read = get_PicturePosition, write = set_PicturePosition};
  __property   Msforms_97::fmButtonEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   VARIANT_BOOL    TripleState = {read = get_TripleState, write = set_TripleState};
  __property   VARIANT_BOOL    Valid = {read = get_Valid};
  __property   VARIANT_BOOL    WordWrap = {read = get_WordWrap, write = set_WordWrap};
  __property   Msforms_97::fmDisplayStyle DisplayStyle = {read = get_DisplayStyle};
  __property   BSTR            GroupName = {read = get_GroupName, write = set_GroupName};
  __property   Msforms_97::fmTextAlign TextAlign = {read = get_TextAlign, write = set_TextAlign};
};
typedef IMdcCheckBoxDispT<IMdcCheckBox> IMdcCheckBoxDisp;

// *********************************************************************//
// SmartIntf: TCOMIMdcOptionButton
// Interface: IMdcOptionButton
// *********************************************************************//
template <class T /* IMdcOptionButton */ >
class TCOMIMdcOptionButtonT : public TComInterface<IMdcOptionButton>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMdcOptionButtonT() {}
  TCOMIMdcOptionButtonT(IMdcOptionButton *intf, bool addRef = false) : TComInterface<IMdcOptionButton>(intf, addRef) {}
  TCOMIMdcOptionButtonT(const TCOMIMdcOptionButtonT& src) : TComInterface<IMdcOptionButton>(src) {}
  TCOMIMdcOptionButtonT& operator=(const TCOMIMdcOptionButtonT& src) { Bind(src, true); return *this;}


};
typedef TCOMIMdcOptionButtonT<IMdcOptionButton> TCOMIMdcOptionButton;

// *********************************************************************//
// DispIntf:  IMdcOptionButton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8BD21D53-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template<class T>
class IMdcOptionButtonDispT : public TAutoDriver<IMdcOptionButton>
{
public:
  IMdcOptionButtonDispT(){}

  IMdcOptionButtonDispT(IMdcOptionButton *pintf)
  {
    TAutoDriver<IMdcOptionButton>::Bind(pintf, false);
  }

  IMdcOptionButtonDispT(IMdcOptionButtonPtr pintf)
  {
    TAutoDriver<IMdcOptionButton>::Bind(pintf, true);
  }

  IMdcOptionButtonDispT& operator=(IMdcOptionButton *pintf)
  {
    TAutoDriver<IMdcOptionButton>::Bind(pintf, false);
    return *this;
  }

  IMdcOptionButtonDispT& operator=(IMdcOptionButtonPtr pintf)
  {
    TAutoDriver<IMdcOptionButton>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OptionButton));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OptionButton);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Accelerator(BSTR Accelerator/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Accelerator(BSTR* Accelerator/*[out,retval]*/);
  BSTR            __fastcall get_Accelerator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Alignment(Msforms_97::fmAlignment Alignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Alignment(Msforms_97::fmAlignment* Alignment/*[out,retval]*/);
  Msforms_97::fmAlignment __fastcall get_Alignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoSize(VARIANT_BOOL AutoSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoSize(VARIANT_BOOL* AutoSize/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/);
  Msforms_97::fmBackStyle __fastcall get_BackStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BordersSuppress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  IFontDisp**     __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(VARIANT_BOOL FontBold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(CURRENCY FontSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(CURRENCY* FontSize/*[out,retval]*/);
  CURRENCY        __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontStrikethru(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontUnderline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontWeight(short FontWeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontWeight(short* FontWeight/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(VARIANT_BOOL Locked/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  IPictureDisp**  __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MultiSelect(Msforms_97::fmMultiSelect MultiSelect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MultiSelect(Msforms_97::fmMultiSelect* MultiSelect/*[out,retval]*/);
  Msforms_97::fmMultiSelect __fastcall get_MultiSelect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Picture(IPictureDisp*** Picture/*[out,retval]*/);
  IPictureDisp**  __fastcall get_Picture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PicturePosition(Msforms_97::fmPicturePosition PicPos/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PicturePosition(Msforms_97::fmPicturePosition* PicPos/*[out,retval]*/);
  Msforms_97::fmPicturePosition __fastcall get_PicturePosition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(Msforms_97::fmButtonEffect SpecialEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(Msforms_97::fmButtonEffect* SpecialEffect/*[out,retval]*/);
  Msforms_97::fmButtonEffect __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TripleState(VARIANT_BOOL TripleState/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TripleState(VARIANT_BOOL* TripleState/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TripleState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Valid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(VARIANT* Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_WordWrap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/);
  Msforms_97::fmDisplayStyle __fastcall get_DisplayStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupName(BSTR GroupName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupName(BSTR* GroupName/*[out,retval]*/);
  BSTR            __fastcall get_GroupName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/);
  Msforms_97::fmTextAlign __fastcall get_TextAlign(void);


  __property   BSTR            Accelerator = {read = get_Accelerator, write = set_Accelerator};
  __property   Msforms_97::fmAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   VARIANT_BOOL    BordersSuppress = {read = get_BordersSuppress, write = set_BordersSuppress};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   VARIANT_BOOL    FontBold = {read = get_FontBold, write = set_FontBold};
  __property   VARIANT_BOOL    FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   VARIANT_BOOL    FontStrikethru = {read = get_FontStrikethru, write = set_FontStrikethru};
  __property   VARIANT_BOOL    FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   VARIANT_BOOL    Locked = {read = get_Locked, write = set_Locked};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   Msforms_97::fmMultiSelect MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   IPictureDisp**  Picture = {read = get_Picture, write = set_Picture};
  __property   Msforms_97::fmPicturePosition PicturePosition = {read = get_PicturePosition, write = set_PicturePosition};
  __property   Msforms_97::fmButtonEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   VARIANT_BOOL    TripleState = {read = get_TripleState, write = set_TripleState};
  __property   VARIANT_BOOL    Valid = {read = get_Valid};
  __property   VARIANT_BOOL    WordWrap = {read = get_WordWrap, write = set_WordWrap};
  __property   Msforms_97::fmDisplayStyle DisplayStyle = {read = get_DisplayStyle};
  __property   BSTR            GroupName = {read = get_GroupName, write = set_GroupName};
  __property   Msforms_97::fmTextAlign TextAlign = {read = get_TextAlign, write = set_TextAlign};
};
typedef IMdcOptionButtonDispT<IMdcOptionButton> IMdcOptionButtonDisp;

// *********************************************************************//
// SmartIntf: TCOMIMdcToggleButton
// Interface: IMdcToggleButton
// *********************************************************************//
template <class T /* IMdcToggleButton */ >
class TCOMIMdcToggleButtonT : public TComInterface<IMdcToggleButton>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMdcToggleButtonT() {}
  TCOMIMdcToggleButtonT(IMdcToggleButton *intf, bool addRef = false) : TComInterface<IMdcToggleButton>(intf, addRef) {}
  TCOMIMdcToggleButtonT(const TCOMIMdcToggleButtonT& src) : TComInterface<IMdcToggleButton>(src) {}
  TCOMIMdcToggleButtonT& operator=(const TCOMIMdcToggleButtonT& src) { Bind(src, true); return *this;}


};
typedef TCOMIMdcToggleButtonT<IMdcToggleButton> TCOMIMdcToggleButton;

// *********************************************************************//
// DispIntf:  IMdcToggleButton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8BD21D63-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template<class T>
class IMdcToggleButtonDispT : public TAutoDriver<IMdcToggleButton>
{
public:
  IMdcToggleButtonDispT(){}

  IMdcToggleButtonDispT(IMdcToggleButton *pintf)
  {
    TAutoDriver<IMdcToggleButton>::Bind(pintf, false);
  }

  IMdcToggleButtonDispT(IMdcToggleButtonPtr pintf)
  {
    TAutoDriver<IMdcToggleButton>::Bind(pintf, true);
  }

  IMdcToggleButtonDispT& operator=(IMdcToggleButton *pintf)
  {
    TAutoDriver<IMdcToggleButton>::Bind(pintf, false);
    return *this;
  }

  IMdcToggleButtonDispT& operator=(IMdcToggleButtonPtr pintf)
  {
    TAutoDriver<IMdcToggleButton>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ToggleButton));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ToggleButton);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Accelerator(BSTR Accelerator/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Accelerator(BSTR* Accelerator/*[out,retval]*/);
  BSTR            __fastcall get_Accelerator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Alignment(Msforms_97::fmAlignment Alignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Alignment(Msforms_97::fmAlignment* Alignment/*[out,retval]*/);
  Msforms_97::fmAlignment __fastcall get_Alignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoSize(VARIANT_BOOL AutoSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoSize(VARIANT_BOOL* AutoSize/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/);
  Msforms_97::fmBackStyle __fastcall get_BackStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BordersSuppress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  IFontDisp**     __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(VARIANT_BOOL FontBold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(CURRENCY FontSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(CURRENCY* FontSize/*[out,retval]*/);
  CURRENCY        __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontStrikethru(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontUnderline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontWeight(short FontWeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontWeight(short* FontWeight/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(VARIANT_BOOL Locked/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  IPictureDisp**  __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MultiSelect(Msforms_97::fmMultiSelect MultiSelect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MultiSelect(Msforms_97::fmMultiSelect* MultiSelect/*[out,retval]*/);
  Msforms_97::fmMultiSelect __fastcall get_MultiSelect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Picture(IPictureDisp*** Picture/*[out,retval]*/);
  IPictureDisp**  __fastcall get_Picture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PicturePosition(Msforms_97::fmPicturePosition PicPos/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PicturePosition(Msforms_97::fmPicturePosition* PicPos/*[out,retval]*/);
  Msforms_97::fmPicturePosition __fastcall get_PicturePosition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(Msforms_97::fmButtonEffect SpecialEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(Msforms_97::fmButtonEffect* SpecialEffect/*[out,retval]*/);
  Msforms_97::fmButtonEffect __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TripleState(VARIANT_BOOL TripleState/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TripleState(VARIANT_BOOL* TripleState/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TripleState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Valid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(VARIANT* Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_WordWrap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/);
  Msforms_97::fmDisplayStyle __fastcall get_DisplayStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupName(BSTR GroupName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupName(BSTR* GroupName/*[out,retval]*/);
  BSTR            __fastcall get_GroupName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/);
  Msforms_97::fmTextAlign __fastcall get_TextAlign(void);


  __property   BSTR            Accelerator = {read = get_Accelerator, write = set_Accelerator};
  __property   Msforms_97::fmAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   VARIANT_BOOL    BordersSuppress = {read = get_BordersSuppress, write = set_BordersSuppress};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   VARIANT_BOOL    FontBold = {read = get_FontBold, write = set_FontBold};
  __property   VARIANT_BOOL    FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   VARIANT_BOOL    FontStrikethru = {read = get_FontStrikethru, write = set_FontStrikethru};
  __property   VARIANT_BOOL    FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   VARIANT_BOOL    Locked = {read = get_Locked, write = set_Locked};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   Msforms_97::fmMultiSelect MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   IPictureDisp**  Picture = {read = get_Picture, write = set_Picture};
  __property   Msforms_97::fmPicturePosition PicturePosition = {read = get_PicturePosition, write = set_PicturePosition};
  __property   Msforms_97::fmButtonEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   VARIANT_BOOL    TripleState = {read = get_TripleState, write = set_TripleState};
  __property   VARIANT_BOOL    Valid = {read = get_Valid};
  __property   VARIANT_BOOL    WordWrap = {read = get_WordWrap, write = set_WordWrap};
  __property   Msforms_97::fmDisplayStyle DisplayStyle = {read = get_DisplayStyle};
  __property   BSTR            GroupName = {read = get_GroupName, write = set_GroupName};
  __property   Msforms_97::fmTextAlign TextAlign = {read = get_TextAlign, write = set_TextAlign};
};
typedef IMdcToggleButtonDispT<IMdcToggleButton> IMdcToggleButtonDisp;

// *********************************************************************//
// SmartIntf: TCOMIScrollbar
// Interface: IScrollbar
// *********************************************************************//
template <class T /* IScrollbar */ >
class TCOMIScrollbarT : public TComInterface<IScrollbar>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIScrollbarT() {}
  TCOMIScrollbarT(IScrollbar *intf, bool addRef = false) : TComInterface<IScrollbar>(intf, addRef) {}
  TCOMIScrollbarT(const TCOMIScrollbarT& src) : TComInterface<IScrollbar>(src) {}
  TCOMIScrollbarT& operator=(const TCOMIScrollbarT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT         __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT         __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT         __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL Enabled/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* Enabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT         __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT         __fastcall set_Value(long Value/*[in]*/);
  HRESULT         __fastcall get_Value(long* Value/*[out,retval]*/);
  long            __fastcall get_Value(void);
  HRESULT         __fastcall set_Min(long Min/*[in]*/);
  HRESULT         __fastcall get_Min(long* Min/*[out,retval]*/);
  long            __fastcall get_Min(void);
  HRESULT         __fastcall set_Max(long Max/*[in]*/);
  HRESULT         __fastcall get_Max(long* Max/*[out,retval]*/);
  long            __fastcall get_Max(void);
  HRESULT         __fastcall set_SmallChange(long SmallChange/*[in]*/);
  HRESULT         __fastcall get_SmallChange(long* SmallChange/*[out,retval]*/);
  long            __fastcall get_SmallChange(void);
  HRESULT         __fastcall set_LargeChange(long LargeChange/*[in]*/);
  HRESULT         __fastcall get_LargeChange(long* LargeChange/*[out,retval]*/);
  long            __fastcall get_LargeChange(void);
  HRESULT         __fastcall set_ProportionalThumb(VARIANT_BOOL ProportionalThumb/*[in]*/);
  HRESULT         __fastcall set_ProportionalThumb(TOLEBOOL ProportionalThumb/*[in]*/);
  HRESULT         __fastcall get_ProportionalThumb(VARIANT_BOOL* ProportionalThumb/*[out,retval]*/);
  HRESULT         __fastcall get_ProportionalThumb(TOLEBOOL* ProportionalThumb/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ProportionalThumb(void);
  HRESULT         __fastcall set_Orientation(Msforms_97::fmOrientation Orientation/*[in]*/);
  HRESULT         __fastcall get_Orientation(Msforms_97::fmOrientation* Orientation/*[out,retval]*/);
  Msforms_97::fmOrientation __fastcall get_Orientation(void);
  HRESULT         __fastcall set_Delay(long Delay/*[in]*/);
  HRESULT         __fastcall get_Delay(long* Delay/*[out,retval]*/);
  long            __fastcall get_Delay(void);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);

  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   TOLEBOOL        Enabled = {write = set_Enabled};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   long            Value = {read = get_Value, write = set_Value};
  __property   long            Min = {read = get_Min, write = set_Min};
  __property   long            Max = {read = get_Max, write = set_Max};
  __property   long            SmallChange = {read = get_SmallChange, write = set_SmallChange};
  __property   long            LargeChange = {read = get_LargeChange, write = set_LargeChange};
  __property   TOLEBOOL        ProportionalThumb = {write = set_ProportionalThumb};
  __property   Msforms_97::fmOrientation Orientation = {read = get_Orientation, write = set_Orientation};
  __property   long            Delay = {read = get_Delay, write = set_Delay};
  __property   IPictureDisp*   MouseIcon = {write = set_MouseIcon};
};
typedef TCOMIScrollbarT<IScrollbar> TCOMIScrollbar;

// *********************************************************************//
// DispIntf:  IScrollbar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04598FC3-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
template<class T>
class IScrollbarDispT : public TAutoDriver<IScrollbar>
{
public:
  IScrollbarDispT(){}

  IScrollbarDispT(IScrollbar *pintf)
  {
    TAutoDriver<IScrollbar>::Bind(pintf, false);
  }

  IScrollbarDispT(IScrollbarPtr pintf)
  {
    TAutoDriver<IScrollbar>::Bind(pintf, true);
  }

  IScrollbarDispT& operator=(IScrollbar *pintf)
  {
    TAutoDriver<IScrollbar>::Bind(pintf, false);
    return *this;
  }

  IScrollbarDispT& operator=(IScrollbarPtr pintf)
  {
    TAutoDriver<IScrollbar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ScrollBar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ScrollBar);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(long Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(long* Value/*[out,retval]*/);
  long            __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Min(long Min/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Min(long* Min/*[out,retval]*/);
  long            __fastcall get_Min(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Max(long Max/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Max(long* Max/*[out,retval]*/);
  long            __fastcall get_Max(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SmallChange(long SmallChange/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SmallChange(long* SmallChange/*[out,retval]*/);
  long            __fastcall get_SmallChange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LargeChange(long LargeChange/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LargeChange(long* LargeChange/*[out,retval]*/);
  long            __fastcall get_LargeChange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ProportionalThumb(VARIANT_BOOL ProportionalThumb/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProportionalThumb(VARIANT_BOOL* ProportionalThumb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ProportionalThumb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Orientation(Msforms_97::fmOrientation Orientation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Orientation(Msforms_97::fmOrientation* Orientation/*[out,retval]*/);
  Msforms_97::fmOrientation __fastcall get_Orientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Delay(long Delay/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Delay(long* Delay/*[out,retval]*/);
  long            __fastcall get_Delay(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  IPictureDisp**  __fastcall get_MouseIcon(void);

  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   long            Value = {read = get_Value, write = set_Value};
  __property   long            Min = {read = get_Min, write = set_Min};
  __property   long            Max = {read = get_Max, write = set_Max};
  __property   long            SmallChange = {read = get_SmallChange, write = set_SmallChange};
  __property   long            LargeChange = {read = get_LargeChange, write = set_LargeChange};
  __property   VARIANT_BOOL    ProportionalThumb = {read = get_ProportionalThumb, write = set_ProportionalThumb};
  __property   Msforms_97::fmOrientation Orientation = {read = get_Orientation, write = set_Orientation};
  __property   long            Delay = {read = get_Delay, write = set_Delay};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
};
typedef IScrollbarDispT<IScrollbar> IScrollbarDisp;

typedef TComInterface<Tab>  TCOMTab;

// *********************************************************************//
// DispIntf:  Tab
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A38BFFC3-A5A0-11CE-8107-00AA00611080}
// *********************************************************************//
template<class T>
class TabDispT : public TAutoDriver<Tab>
{
public:
  TabDispT(){}

  TabDispT(Tab *pintf)
  {
    TAutoDriver<Tab>::Bind(pintf, false);
  }

  TabDispT(TabPtr pintf)
  {
    TAutoDriver<Tab>::Bind(pintf, true);
  }

  TabDispT& operator=(Tab *pintf)
  {
    TAutoDriver<Tab>::Bind(pintf, false);
    return *this;
  }

  TabDispT& operator=(TabPtr pintf)
  {
    TAutoDriver<Tab>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlTipText(BSTR ControlTipText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlTipText(BSTR* ControlTipText/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL fEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Index(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* Index/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR Tag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* Tag/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Accelerator(BSTR Accelerator/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Accelerator(BSTR* Accelerator/*[out,retval]*/);
  BSTR            __fastcall get_Accelerator(void);

  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   BSTR            Accelerator = {read = get_Accelerator, write = set_Accelerator};
};
typedef TabDispT<Tab> TabDisp;

typedef TComInterface<Tabs>  TCOMTabs;

// *********************************************************************//
// DispIntf:  Tabs
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {944ACF93-A1E6-11CE-8104-00AA00611080}
// *********************************************************************//
template<class T>
class TabsDispT : public TAutoDriver<Tabs>
{
public:
  TabsDispT(){}

  TabsDispT(Tabs *pintf)
  {
    TAutoDriver<Tabs>::Bind(pintf, false);
  }

  TabsDispT(TabsPtr pintf)
  {
    TAutoDriver<Tabs>::Bind(pintf, true);
  }

  TabsDispT& operator=(Tabs *pintf)
  {
    TAutoDriver<Tabs>::Bind(pintf, false);
    return *this;
  }

  TabsDispT& operator=(TabsPtr pintf)
  {
    TAutoDriver<Tabs>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetItemByIndex(long lIndex/*[in]*/, 
                                                        Msforms_97::Tab** ppTab/*[out,retval]*/);
  Msforms_97::Tab* __fastcall _GetItemByIndex(long lIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetItemByName(BSTR bstr/*[in]*/, 
                                                       Msforms_97::Tab** ppTab/*[out,retval]*/);
  Msforms_97::Tab* __fastcall _GetItemByName(BSTR bstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT varg/*[in]*/, 
                                             LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall Item(VARIANT varg/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Enum(LPUNKNOWN* ppEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall Enum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(VARIANT bstrName/*[in,opt]*/, 
                                            VARIANT bstrCaption/*[in,opt]*/, 
                                            VARIANT lIndex/*[in,opt]*/, 
                                            Msforms_97::Tab** ppTab/*[out,retval]*/);
  Msforms_97::Tab* __fastcall Add(VARIANT bstrName/*[in,opt]*/= TNoParam(), 
                                  VARIANT bstrCaption/*[in,opt]*/= TNoParam(), 
                                  VARIANT lIndex/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Add(BSTR bstrName/*[in]*/, BSTR bstrCaption/*[in]*/, 
                                             Msforms_97::Tab** ppTab/*[out,retval]*/);
  Msforms_97::Tab* __fastcall _Add(BSTR bstrName/*[in]*/, BSTR bstrCaption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Insert(BSTR bstrName/*[in]*/, BSTR bstrCaption/*[in]*/, 
                                                long lIndex/*[in]*/, 
                                                Msforms_97::Tab** ppTab/*[out,retval]*/);
  Msforms_97::Tab* __fastcall _Insert(BSTR bstrName/*[in]*/, BSTR bstrCaption/*[in]*/, 
                                      long lIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(VARIANT varg/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef TabsDispT<Tabs> TabsDisp;

// *********************************************************************//
// SmartIntf: TCOMITabStrip
// Interface: ITabStrip
// *********************************************************************//
template <class T /* ITabStrip */ >
class TCOMITabStripT : public TComInterface<ITabStrip>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMITabStripT() {}
  TCOMITabStripT(ITabStrip *intf, bool addRef = false) : TComInterface<ITabStrip>(intf, addRef) {}
  TCOMITabStripT(const TCOMITabStripT& src) : TComInterface<ITabStrip>(src) {}
  TCOMITabStripT& operator=(const TCOMITabStripT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT         __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT         __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT         __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT         __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT         __fastcall set__Font_Reserved(IFontDisp* Param1/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp* Font/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Font/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT         __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT         __fastcall set_FontBold(VARIANT_BOOL FontBold/*[in]*/);
  HRESULT         __fastcall set_FontBold(TOLEBOOL FontBold/*[in]*/);
  HRESULT         __fastcall get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/);
  HRESULT         __fastcall get_FontBold(TOLEBOOL* FontBold/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontBold(void);
  HRESULT         __fastcall set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/);
  HRESULT         __fastcall set_FontItalic(TOLEBOOL FontItalic/*[in]*/);
  HRESULT         __fastcall get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/);
  HRESULT         __fastcall get_FontItalic(TOLEBOOL* FontItalic/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT         __fastcall set_FontUnderline(VARIANT_BOOL FontUnder/*[in]*/);
  HRESULT         __fastcall set_FontUnderline(TOLEBOOL FontUnder/*[in]*/);
  HRESULT         __fastcall get_FontUnderline(VARIANT_BOOL* FontUnder/*[out,retval]*/);
  HRESULT         __fastcall get_FontUnderline(TOLEBOOL* FontUnder/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT         __fastcall set_FontStrikethru(VARIANT_BOOL FontStrike/*[in]*/);
  HRESULT         __fastcall set_FontStrikethru(TOLEBOOL FontStrike/*[in]*/);
  HRESULT         __fastcall get_FontStrikethru(VARIANT_BOOL* FontStrike/*[out,retval]*/);
  HRESULT         __fastcall get_FontStrikethru(TOLEBOOL* FontStrike/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontStrikethru(void);
  HRESULT         __fastcall set_FontSize(CURRENCY FontSize/*[in]*/);
  HRESULT         __fastcall get_FontSize(CURRENCY* FontSize/*[out,retval]*/);
  CURRENCY        __fastcall get_FontSize(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL fnabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL fnabled/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* fnabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* fnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT         __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT         __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT         __fastcall set_MultiRow(VARIANT_BOOL MultiRow/*[in]*/);
  HRESULT         __fastcall set_MultiRow(TOLEBOOL MultiRow/*[in]*/);
  HRESULT         __fastcall get_MultiRow(VARIANT_BOOL* MultiRow/*[out,retval]*/);
  HRESULT         __fastcall get_MultiRow(TOLEBOOL* MultiRow/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MultiRow(void);
  HRESULT         __fastcall set_Style(Msforms_97::fmTabStyle TabStyle/*[in]*/);
  HRESULT         __fastcall get_Style(Msforms_97::fmTabStyle* TabStyle/*[out,retval]*/);
  Msforms_97::fmTabStyle __fastcall get_Style(void);
  HRESULT         __fastcall set_TabOrientation(Msforms_97::fmTabOrientation TabOrientation/*[in]*/);
  HRESULT         __fastcall get_TabOrientation(Msforms_97::fmTabOrientation* TabOrientation/*[out,retval]*/);
  Msforms_97::fmTabOrientation __fastcall get_TabOrientation(void);
  HRESULT         __fastcall _SetTabFixedWidth(long TabFixedWidth/*[in]*/);
  HRESULT         __fastcall _GetTabFixedWidth(long* TabFixedWidth/*[out]*/);
  HRESULT         __fastcall _SetTabFixedHeight(long TabFixedHeight/*[in]*/);
  HRESULT         __fastcall _GetTabFixedHeight(long* TabFixedHeight/*[out]*/);
  HRESULT         __fastcall _GetClientTop(long* ClientTop/*[out]*/);
  HRESULT         __fastcall get_ClientTop(float* ClientTop/*[out,retval]*/);
  float           __fastcall get_ClientTop(void);
  HRESULT         __fastcall _GetClientLeft(long* ClientLeft/*[out]*/);
  HRESULT         __fastcall get_ClientLeft(float* ClientLeft/*[out,retval]*/);
  float           __fastcall get_ClientLeft(void);
  HRESULT         __fastcall _GetClientWidth(long* ClientWidth/*[out]*/);
  HRESULT         __fastcall get_ClientWidth(float* ClientWidth/*[out,retval]*/);
  float           __fastcall get_ClientWidth(void);
  HRESULT         __fastcall _GetClientHeight(long* ClientHeight/*[out]*/);
  HRESULT         __fastcall get_ClientHeight(float* ClientHeight/*[out,retval]*/);
  float           __fastcall get_ClientHeight(void);
  HRESULT         __fastcall get_Tabs(Msforms_97::Tabs** Tabs/*[out,retval]*/);
  HRESULT         __fastcall get_Tabs(Msforms_97::TabsPtr* Tabs/*[out,retval]*/);
  Msforms_97::TabsPtr __fastcall get_Tabs(void);
  HRESULT         __fastcall get_SelectedItem(Msforms_97::Tab** ActiveTab/*[out,retval]*/);
  HRESULT         __fastcall get_SelectedItem(Msforms_97::TabPtr* ActiveTab/*[out,retval]*/);
  Msforms_97::TabPtr __fastcall get_SelectedItem(void);
  HRESULT         __fastcall set_Value(long Index/*[in]*/);
  HRESULT         __fastcall get_Value(long* Index/*[out,retval]*/);
  long            __fastcall get_Value(void);
  HRESULT         __fastcall set_TabFixedWidth(float TabFixedWidth/*[in]*/);
  HRESULT         __fastcall get_TabFixedWidth(float* TabFixedWidth/*[out,retval]*/);
  float           __fastcall get_TabFixedWidth(void);
  HRESULT         __fastcall set_TabFixedHeight(float TabFixedHeight/*[in]*/);
  HRESULT         __fastcall get_TabFixedHeight(float* TabFixedHeight/*[out,retval]*/);
  float           __fastcall get_TabFixedHeight(void);
  HRESULT         __fastcall set_FontWeight(short FontWeight/*[in]*/);
  HRESULT         __fastcall get_FontWeight(short* FontWeight/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);

  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   IFontDisp*      _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp*      Font = {write = _set_Font};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   TOLEBOOL        FontBold = {write = set_FontBold};
  __property   TOLEBOOL        FontItalic = {write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {write = set_FontUnderline};
  __property   TOLEBOOL        FontStrikethru = {write = set_FontStrikethru};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   TOLEBOOL        Enabled = {write = set_Enabled};
  __property   IPictureDisp*   MouseIcon = {write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   TOLEBOOL        MultiRow = {write = set_MultiRow};
  __property   Msforms_97::fmTabStyle Style = {read = get_Style, write = set_Style};
  __property   Msforms_97::fmTabOrientation TabOrientation = {read = get_TabOrientation, write = set_TabOrientation};
  __property   float           ClientTop = {read = get_ClientTop};
  __property   float           ClientLeft = {read = get_ClientLeft};
  __property   float           ClientWidth = {read = get_ClientWidth};
  __property   float           ClientHeight = {read = get_ClientHeight};
  __property   Msforms_97::TabsPtr Tabs = {read = get_Tabs};
  __property   Msforms_97::TabPtr SelectedItem = {read = get_SelectedItem};
  __property   long            Value = {read = get_Value, write = set_Value};
  __property   float           TabFixedWidth = {read = get_TabFixedWidth, write = set_TabFixedWidth};
  __property   float           TabFixedHeight = {read = get_TabFixedHeight, write = set_TabFixedHeight};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
};
typedef TCOMITabStripT<ITabStrip> TCOMITabStrip;

// *********************************************************************//
// DispIntf:  ITabStrip
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04598FC2-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
template<class T>
class ITabStripDispT : public TAutoDriver<ITabStrip>
{
public:
  ITabStripDispT(){}

  ITabStripDispT(ITabStrip *pintf)
  {
    TAutoDriver<ITabStrip>::Bind(pintf, false);
  }

  ITabStripDispT(ITabStripPtr pintf)
  {
    TAutoDriver<ITabStrip>::Bind(pintf, true);
  }

  ITabStripDispT& operator=(ITabStrip *pintf)
  {
    TAutoDriver<ITabStrip>::Bind(pintf, false);
    return *this;
  }

  ITabStripDispT& operator=(ITabStripPtr pintf)
  {
    TAutoDriver<ITabStrip>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TabStrip));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TabStrip);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  IFontDisp**     __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(VARIANT_BOOL FontBold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontUnderline(VARIANT_BOOL FontUnder/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontUnderline(VARIANT_BOOL* FontUnder/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontUnderline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontStrikethru(VARIANT_BOOL FontStrike/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontStrikethru(VARIANT_BOOL* FontStrike/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontStrikethru(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(CURRENCY FontSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(CURRENCY* FontSize/*[out,retval]*/);
  CURRENCY        __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL fnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* fnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  IPictureDisp**  __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MultiRow(VARIANT_BOOL MultiRow/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MultiRow(VARIANT_BOOL* MultiRow/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MultiRow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Msforms_97::fmTabStyle TabStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Msforms_97::fmTabStyle* TabStyle/*[out,retval]*/);
  Msforms_97::fmTabStyle __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabOrientation(Msforms_97::fmTabOrientation TabOrientation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabOrientation(Msforms_97::fmTabOrientation* TabOrientation/*[out,retval]*/);
  Msforms_97::fmTabOrientation __fastcall get_TabOrientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetTabFixedWidth(long TabFixedWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetTabFixedWidth(long* TabFixedWidth/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetTabFixedHeight(long TabFixedHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetTabFixedHeight(long* TabFixedHeight/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetClientTop(long* ClientTop/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ClientTop(float* ClientTop/*[out,retval]*/);
  float           __fastcall get_ClientTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetClientLeft(long* ClientLeft/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ClientLeft(float* ClientLeft/*[out,retval]*/);
  float           __fastcall get_ClientLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetClientWidth(long* ClientWidth/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ClientWidth(float* ClientWidth/*[out,retval]*/);
  float           __fastcall get_ClientWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetClientHeight(long* ClientHeight/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ClientHeight(float* ClientHeight/*[out,retval]*/);
  float           __fastcall get_ClientHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tabs(Msforms_97::Tabs** Tabs/*[out,retval]*/);
  Msforms_97::Tabs* __fastcall get_Tabs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectedItem(Msforms_97::Tab** ActiveTab/*[out,retval]*/);
  Msforms_97::Tab* __fastcall get_SelectedItem(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(long* Index/*[out,retval]*/);
  long            __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabFixedWidth(float TabFixedWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabFixedWidth(float* TabFixedWidth/*[out,retval]*/);
  float           __fastcall get_TabFixedWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabFixedHeight(float TabFixedHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabFixedHeight(float* TabFixedHeight/*[out,retval]*/);
  float           __fastcall get_TabFixedHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontWeight(short FontWeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontWeight(short* FontWeight/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);

  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   VARIANT_BOOL    FontBold = {read = get_FontBold, write = set_FontBold};
  __property   VARIANT_BOOL    FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   VARIANT_BOOL    FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   VARIANT_BOOL    FontStrikethru = {read = get_FontStrikethru, write = set_FontStrikethru};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   VARIANT_BOOL    MultiRow = {read = get_MultiRow, write = set_MultiRow};
  __property   Msforms_97::fmTabStyle Style = {read = get_Style, write = set_Style};
  __property   Msforms_97::fmTabOrientation TabOrientation = {read = get_TabOrientation, write = set_TabOrientation};
  __property   float           ClientTop = {read = get_ClientTop};
  __property   float           ClientLeft = {read = get_ClientLeft};
  __property   float           ClientWidth = {read = get_ClientWidth};
  __property   float           ClientHeight = {read = get_ClientHeight};
  __property   Msforms_97::Tabs* Tabs = {read = get_Tabs};
  __property   Msforms_97::Tab* SelectedItem = {read = get_SelectedItem};
  __property   long            Value = {read = get_Value, write = set_Value};
  __property   float           TabFixedWidth = {read = get_TabFixedWidth, write = set_TabFixedWidth};
  __property   float           TabFixedHeight = {read = get_TabFixedHeight, write = set_TabFixedHeight};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
};
typedef ITabStripDispT<ITabStrip> ITabStripDisp;

// *********************************************************************//
// SmartIntf: TCOMISpinbutton
// Interface: ISpinbutton
// *********************************************************************//
template <class T /* ISpinbutton */ >
class TCOMISpinbuttonT : public TComInterface<ISpinbutton>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMISpinbuttonT() {}
  TCOMISpinbuttonT(ISpinbutton *intf, bool addRef = false) : TComInterface<ISpinbutton>(intf, addRef) {}
  TCOMISpinbuttonT(const TCOMISpinbuttonT& src) : TComInterface<ISpinbutton>(src) {}
  TCOMISpinbuttonT& operator=(const TCOMISpinbuttonT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT         __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT         __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT         __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL Enabled/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* Enabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT         __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT         __fastcall set_Value(long Value/*[in]*/);
  HRESULT         __fastcall get_Value(long* Value/*[out,retval]*/);
  long            __fastcall get_Value(void);
  HRESULT         __fastcall set_Min(long Min/*[in]*/);
  HRESULT         __fastcall get_Min(long* Min/*[out,retval]*/);
  long            __fastcall get_Min(void);
  HRESULT         __fastcall set_Max(long Max/*[in]*/);
  HRESULT         __fastcall get_Max(long* Max/*[out,retval]*/);
  long            __fastcall get_Max(void);
  HRESULT         __fastcall set_SmallChange(long SmallChange/*[in]*/);
  HRESULT         __fastcall get_SmallChange(long* SmallChange/*[out,retval]*/);
  long            __fastcall get_SmallChange(void);
  HRESULT         __fastcall set_Orientation(Msforms_97::fmOrientation Orientation/*[in]*/);
  HRESULT         __fastcall get_Orientation(Msforms_97::fmOrientation* Orientation/*[out,retval]*/);
  Msforms_97::fmOrientation __fastcall get_Orientation(void);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT         __fastcall set_Delay(long Delay/*[in]*/);
  HRESULT         __fastcall get_Delay(long* Delay/*[out,retval]*/);
  long            __fastcall get_Delay(void);

  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   TOLEBOOL        Enabled = {write = set_Enabled};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   long            Value = {read = get_Value, write = set_Value};
  __property   long            Min = {read = get_Min, write = set_Min};
  __property   long            Max = {read = get_Max, write = set_Max};
  __property   long            SmallChange = {read = get_SmallChange, write = set_SmallChange};
  __property   Msforms_97::fmOrientation Orientation = {read = get_Orientation, write = set_Orientation};
  __property   IPictureDisp*   MouseIcon = {write = set_MouseIcon};
  __property   long            Delay = {read = get_Delay, write = set_Delay};
};
typedef TCOMISpinbuttonT<ISpinbutton> TCOMISpinbutton;

// *********************************************************************//
// DispIntf:  ISpinbutton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {79176FB3-B7F2-11CE-97EF-00AA006D2776}
// *********************************************************************//
template<class T>
class ISpinbuttonDispT : public TAutoDriver<ISpinbutton>
{
public:
  ISpinbuttonDispT(){}

  ISpinbuttonDispT(ISpinbutton *pintf)
  {
    TAutoDriver<ISpinbutton>::Bind(pintf, false);
  }

  ISpinbuttonDispT(ISpinbuttonPtr pintf)
  {
    TAutoDriver<ISpinbutton>::Bind(pintf, true);
  }

  ISpinbuttonDispT& operator=(ISpinbutton *pintf)
  {
    TAutoDriver<ISpinbutton>::Bind(pintf, false);
    return *this;
  }

  ISpinbuttonDispT& operator=(ISpinbuttonPtr pintf)
  {
    TAutoDriver<ISpinbutton>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_SpinButton));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_SpinButton);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(long Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(long* Value/*[out,retval]*/);
  long            __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Min(long Min/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Min(long* Min/*[out,retval]*/);
  long            __fastcall get_Min(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Max(long Max/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Max(long* Max/*[out,retval]*/);
  long            __fastcall get_Max(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SmallChange(long SmallChange/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SmallChange(long* SmallChange/*[out,retval]*/);
  long            __fastcall get_SmallChange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Orientation(Msforms_97::fmOrientation Orientation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Orientation(Msforms_97::fmOrientation* Orientation/*[out,retval]*/);
  Msforms_97::fmOrientation __fastcall get_Orientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  IPictureDisp**  __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Delay(long Delay/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Delay(long* Delay/*[out,retval]*/);
  long            __fastcall get_Delay(void);

  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   long            Value = {read = get_Value, write = set_Value};
  __property   long            Min = {read = get_Min, write = set_Min};
  __property   long            Max = {read = get_Max, write = set_Max};
  __property   long            SmallChange = {read = get_SmallChange, write = set_SmallChange};
  __property   Msforms_97::fmOrientation Orientation = {read = get_Orientation, write = set_Orientation};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   long            Delay = {read = get_Delay, write = set_Delay};
};
typedef ISpinbuttonDispT<ISpinbutton> ISpinbuttonDisp;

// *********************************************************************//
// SmartIntf: TCOMIImage
// Interface: IImage
// *********************************************************************//
template <class T /* IImage */ >
class TCOMIImageT : public TComInterface<IImage>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIImageT() {}
  TCOMIImageT(IImage *intf, bool addRef = false) : TComInterface<IImage>(intf, addRef) {}
  TCOMIImageT(const TCOMIImageT& src) : TComInterface<IImage>(src) {}
  TCOMIImageT& operator=(const TCOMIImageT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_Enabled(VARIANT_BOOL fEnabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL fEnabled/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* fEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT         __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL fAutoSize/*[in]*/);
  HRESULT         __fastcall set_AutoSize(TOLEBOOL fAutoSize/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* fAutoSize/*[out,retval]*/);
  HRESULT         __fastcall get_AutoSize(TOLEBOOL* fAutoSize/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT         __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/);
  HRESULT         __fastcall get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/);
  Msforms_97::fmBackStyle __fastcall get_BackStyle(void);
  HRESULT         __fastcall set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/);
  HRESULT         __fastcall get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderStyle(Msforms_97::fmBorderStyle Style/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(Msforms_97::fmBorderStyle* Style/*[out,retval]*/);
  Msforms_97::fmBorderStyle __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT         __fastcall set_Picture(IPictureDisp* Picture/*[in]*/);
  HRESULT         __fastcall _set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT         __fastcall _set_Picture(IPictureDisp* Picture/*[in]*/);
  HRESULT         __fastcall get_Picture(IPictureDisp*** Picture/*[out,retval]*/);
  HRESULT         __fastcall get_Picture(IPictureDisp** Picture/*[out,retval]*/);
  IPictureDisp*   __fastcall get_Picture(void);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT         __fastcall set_PictureSizeMode(Msforms_97::fmPictureSizeMode PictureSizeMode/*[in]*/);
  HRESULT         __fastcall get_PictureSizeMode(Msforms_97::fmPictureSizeMode* PictureSizeMode/*[out,retval]*/);
  Msforms_97::fmPictureSizeMode __fastcall get_PictureSizeMode(void);
  HRESULT         __fastcall set_PictureAlignment(Msforms_97::fmPictureAlignment PictureAlignment/*[in]*/);
  HRESULT         __fastcall get_PictureAlignment(Msforms_97::fmPictureAlignment* PictureAlignment/*[out,retval]*/);
  Msforms_97::fmPictureAlignment __fastcall get_PictureAlignment(void);
  HRESULT         __fastcall set_PictureTiling(VARIANT_BOOL PictureTiling/*[in]*/);
  HRESULT         __fastcall set_PictureTiling(TOLEBOOL PictureTiling/*[in]*/);
  HRESULT         __fastcall get_PictureTiling(VARIANT_BOOL* PictureTiling/*[out,retval]*/);
  HRESULT         __fastcall get_PictureTiling(TOLEBOOL* PictureTiling/*[out,retval]*/);
  TOLEBOOL        __fastcall get_PictureTiling(void);
  HRESULT         __fastcall set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/);
  Msforms_97::fmSpecialEffect __fastcall get_SpecialEffect(void);

  __property   TOLEBOOL        Enabled = {write = set_Enabled};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   TOLEBOOL        AutoSize = {write = set_AutoSize};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   Msforms_97::OLE_COLOR BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   Msforms_97::fmBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   IPictureDisp*   Picture = {write = set_Picture};
  __property   IPictureDisp*   MouseIcon = {write = set_MouseIcon};
  __property   Msforms_97::fmPictureSizeMode PictureSizeMode = {read = get_PictureSizeMode, write = set_PictureSizeMode};
  __property   Msforms_97::fmPictureAlignment PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   TOLEBOOL        PictureTiling = {write = set_PictureTiling};
  __property   Msforms_97::fmSpecialEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
};
typedef TCOMIImageT<IImage> TCOMIImage;

// *********************************************************************//
// DispIntf:  IImage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4C599243-6926-101B-9992-00000B65C6F9}
// *********************************************************************//
template<class T>
class IImageDispT : public TAutoDriver<IImage>
{
public:
  IImageDispT(){}

  IImageDispT(IImage *pintf)
  {
    TAutoDriver<IImage>::Bind(pintf, false);
  }

  IImageDispT(IImagePtr pintf)
  {
    TAutoDriver<IImage>::Bind(pintf, true);
  }

  IImageDispT& operator=(IImage *pintf)
  {
    TAutoDriver<IImage>::Bind(pintf, false);
    return *this;
  }

  IImageDispT& operator=(IImagePtr pintf)
  {
    TAutoDriver<IImage>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Image));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Image);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL fEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/);
  Msforms_97::fmMousePointer __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoSize(VARIANT_BOOL fAutoSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoSize(VARIANT_BOOL* fAutoSize/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/);
  Msforms_97::fmBackStyle __fastcall get_BackStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(Msforms_97::fmBorderStyle Style/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(Msforms_97::fmBorderStyle* Style/*[out,retval]*/);
  Msforms_97::fmBorderStyle __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Picture(IPictureDisp*** Picture/*[out,retval]*/);
  IPictureDisp**  __fastcall get_Picture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/);
  IPictureDisp**  __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureSizeMode(Msforms_97::fmPictureSizeMode PictureSizeMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureSizeMode(Msforms_97::fmPictureSizeMode* PictureSizeMode/*[out,retval]*/);
  Msforms_97::fmPictureSizeMode __fastcall get_PictureSizeMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureAlignment(Msforms_97::fmPictureAlignment PictureAlignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureAlignment(Msforms_97::fmPictureAlignment* PictureAlignment/*[out,retval]*/);
  Msforms_97::fmPictureAlignment __fastcall get_PictureAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureTiling(VARIANT_BOOL PictureTiling/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureTiling(VARIANT_BOOL* PictureTiling/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PictureTiling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/);
  Msforms_97::fmSpecialEffect __fastcall get_SpecialEffect(void);

  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   Msforms_97::fmMousePointer MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::fmBackStyle BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   Msforms_97::OLE_COLOR BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   Msforms_97::fmBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   IPictureDisp**  Picture = {read = get_Picture, write = set_Picture};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Msforms_97::fmPictureSizeMode PictureSizeMode = {read = get_PictureSizeMode, write = set_PictureSizeMode};
  __property   Msforms_97::fmPictureAlignment PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   VARIANT_BOOL    PictureTiling = {read = get_PictureTiling, write = set_PictureTiling};
  __property   Msforms_97::fmSpecialEffect SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
};
typedef IImageDispT<IImage> IImageDisp;

// *********************************************************************//
// SmartIntf: TCOMIWHTMLSubmitButton
// Interface: IWHTMLSubmitButton
// *********************************************************************//
template <class T /* IWHTMLSubmitButton */ >
class TCOMIWHTMLSubmitButtonT : public TComInterface<IWHTMLSubmitButton>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWHTMLSubmitButtonT() {}
  TCOMIWHTMLSubmitButtonT(IWHTMLSubmitButton *intf, bool addRef = false) : TComInterface<IWHTMLSubmitButton>(intf, addRef) {}
  TCOMIWHTMLSubmitButtonT(const TCOMIWHTMLSubmitButtonT& src) : TComInterface<IWHTMLSubmitButton>(src) {}
  TCOMIWHTMLSubmitButtonT& operator=(const TCOMIWHTMLSubmitButtonT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_Action(BSTR Action/*[in]*/);
  HRESULT         __fastcall get_Action(BSTR* Action/*[out,retval]*/);
  BSTR            __fastcall get_Action(void);
  HRESULT         __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Encoding(BSTR Encoding/*[in]*/);
  HRESULT         __fastcall get_Encoding(BSTR* Encoding/*[out,retval]*/);
  BSTR            __fastcall get_Encoding(void);
  HRESULT         __fastcall set_Method(BSTR Method/*[in]*/);
  HRESULT         __fastcall get_Method(BSTR* Method/*[out,retval]*/);
  BSTR            __fastcall get_Method(void);
  HRESULT         __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT         __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT         __fastcall set_HTMLType(BSTR HTMLType/*[in]*/);
  HRESULT         __fastcall get_HTMLType(BSTR* HTMLType/*[out,retval]*/);
  BSTR            __fastcall get_HTMLType(void);

  __property   BSTR            Action = {read = get_Action, write = set_Action};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            Encoding = {read = get_Encoding, write = set_Encoding};
  __property   BSTR            Method = {read = get_Method, write = set_Method};
  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};
};
typedef TCOMIWHTMLSubmitButtonT<IWHTMLSubmitButton> TCOMIWHTMLSubmitButton;

// *********************************************************************//
// DispIntf:  IWHTMLSubmitButton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D111-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template<class T>
class IWHTMLSubmitButtonDispT : public TAutoDriver<IWHTMLSubmitButton>
{
public:
  IWHTMLSubmitButtonDispT(){}

  IWHTMLSubmitButtonDispT(IWHTMLSubmitButton *pintf)
  {
    TAutoDriver<IWHTMLSubmitButton>::Bind(pintf, false);
  }

  IWHTMLSubmitButtonDispT(IWHTMLSubmitButtonPtr pintf)
  {
    TAutoDriver<IWHTMLSubmitButton>::Bind(pintf, true);
  }

  IWHTMLSubmitButtonDispT& operator=(IWHTMLSubmitButton *pintf)
  {
    TAutoDriver<IWHTMLSubmitButton>::Bind(pintf, false);
    return *this;
  }

  IWHTMLSubmitButtonDispT& operator=(IWHTMLSubmitButtonPtr pintf)
  {
    TAutoDriver<IWHTMLSubmitButton>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_HTMLSubmit));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_HTMLSubmit);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Action(BSTR Action/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Action(BSTR* Action/*[out,retval]*/);
  BSTR            __fastcall get_Action(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Encoding(BSTR Encoding/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Encoding(BSTR* Encoding/*[out,retval]*/);
  BSTR            __fastcall get_Encoding(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Method(BSTR Method/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Method(BSTR* Method/*[out,retval]*/);
  BSTR            __fastcall get_Method(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLType(BSTR HTMLType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLType(BSTR* HTMLType/*[out,retval]*/);
  BSTR            __fastcall get_HTMLType(void);

  __property   BSTR            Action = {read = get_Action, write = set_Action};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            Encoding = {read = get_Encoding, write = set_Encoding};
  __property   BSTR            Method = {read = get_Method, write = set_Method};
  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};
};
typedef IWHTMLSubmitButtonDispT<IWHTMLSubmitButton> IWHTMLSubmitButtonDisp;

// *********************************************************************//
// SmartIntf: TCOMIWHTMLImage
// Interface: IWHTMLImage
// *********************************************************************//
template <class T /* IWHTMLImage */ >
class TCOMIWHTMLImageT : public TComInterface<IWHTMLImage>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWHTMLImageT() {}
  TCOMIWHTMLImageT(IWHTMLImage *intf, bool addRef = false) : TComInterface<IWHTMLImage>(intf, addRef) {}
  TCOMIWHTMLImageT(const TCOMIWHTMLImageT& src) : TComInterface<IWHTMLImage>(src) {}
  TCOMIWHTMLImageT& operator=(const TCOMIWHTMLImageT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_Action(BSTR Action/*[in]*/);
  HRESULT         __fastcall get_Action(BSTR* Action/*[out,retval]*/);
  BSTR            __fastcall get_Action(void);
  HRESULT         __fastcall set_Source(BSTR Source/*[in]*/);
  HRESULT         __fastcall get_Source(BSTR* Source/*[out,retval]*/);
  BSTR            __fastcall get_Source(void);
  HRESULT         __fastcall set_Encoding(BSTR Encoding/*[in]*/);
  HRESULT         __fastcall get_Encoding(BSTR* Encoding/*[out,retval]*/);
  BSTR            __fastcall get_Encoding(void);
  HRESULT         __fastcall set_Method(BSTR Method/*[in]*/);
  HRESULT         __fastcall get_Method(BSTR* Method/*[out,retval]*/);
  BSTR            __fastcall get_Method(void);
  HRESULT         __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT         __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT         __fastcall set_HTMLType(BSTR HTMLType/*[in]*/);
  HRESULT         __fastcall get_HTMLType(BSTR* HTMLType/*[out,retval]*/);
  BSTR            __fastcall get_HTMLType(void);

  __property   BSTR            Action = {read = get_Action, write = set_Action};
  __property   BSTR            Source = {read = get_Source, write = set_Source};
  __property   BSTR            Encoding = {read = get_Encoding, write = set_Encoding};
  __property   BSTR            Method = {read = get_Method, write = set_Method};
  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};
};
typedef TCOMIWHTMLImageT<IWHTMLImage> TCOMIWHTMLImage;

// *********************************************************************//
// DispIntf:  IWHTMLImage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D113-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template<class T>
class IWHTMLImageDispT : public TAutoDriver<IWHTMLImage>
{
public:
  IWHTMLImageDispT(){}

  IWHTMLImageDispT(IWHTMLImage *pintf)
  {
    TAutoDriver<IWHTMLImage>::Bind(pintf, false);
  }

  IWHTMLImageDispT(IWHTMLImagePtr pintf)
  {
    TAutoDriver<IWHTMLImage>::Bind(pintf, true);
  }

  IWHTMLImageDispT& operator=(IWHTMLImage *pintf)
  {
    TAutoDriver<IWHTMLImage>::Bind(pintf, false);
    return *this;
  }

  IWHTMLImageDispT& operator=(IWHTMLImagePtr pintf)
  {
    TAutoDriver<IWHTMLImage>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_HTMLImage));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_HTMLImage);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Action(BSTR Action/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Action(BSTR* Action/*[out,retval]*/);
  BSTR            __fastcall get_Action(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Source(BSTR Source/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Source(BSTR* Source/*[out,retval]*/);
  BSTR            __fastcall get_Source(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Encoding(BSTR Encoding/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Encoding(BSTR* Encoding/*[out,retval]*/);
  BSTR            __fastcall get_Encoding(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Method(BSTR Method/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Method(BSTR* Method/*[out,retval]*/);
  BSTR            __fastcall get_Method(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLType(BSTR HTMLType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLType(BSTR* HTMLType/*[out,retval]*/);
  BSTR            __fastcall get_HTMLType(void);

  __property   BSTR            Action = {read = get_Action, write = set_Action};
  __property   BSTR            Source = {read = get_Source, write = set_Source};
  __property   BSTR            Encoding = {read = get_Encoding, write = set_Encoding};
  __property   BSTR            Method = {read = get_Method, write = set_Method};
  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};
};
typedef IWHTMLImageDispT<IWHTMLImage> IWHTMLImageDisp;

// *********************************************************************//
// SmartIntf: TCOMIWHTMLReset
// Interface: IWHTMLReset
// *********************************************************************//
template <class T /* IWHTMLReset */ >
class TCOMIWHTMLResetT : public TComInterface<IWHTMLReset>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWHTMLResetT() {}
  TCOMIWHTMLResetT(IWHTMLReset *intf, bool addRef = false) : TComInterface<IWHTMLReset>(intf, addRef) {}
  TCOMIWHTMLResetT(const TCOMIWHTMLResetT& src) : TComInterface<IWHTMLReset>(src) {}
  TCOMIWHTMLResetT& operator=(const TCOMIWHTMLResetT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT         __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT         __fastcall set_HTMLType(BSTR HTMLType/*[in]*/);
  HRESULT         __fastcall get_HTMLType(BSTR* HTMLType/*[out,retval]*/);
  BSTR            __fastcall get_HTMLType(void);

  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};
};
typedef TCOMIWHTMLResetT<IWHTMLReset> TCOMIWHTMLReset;

// *********************************************************************//
// DispIntf:  IWHTMLReset
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D115-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template<class T>
class IWHTMLResetDispT : public TAutoDriver<IWHTMLReset>
{
public:
  IWHTMLResetDispT(){}

  IWHTMLResetDispT(IWHTMLReset *pintf)
  {
    TAutoDriver<IWHTMLReset>::Bind(pintf, false);
  }

  IWHTMLResetDispT(IWHTMLResetPtr pintf)
  {
    TAutoDriver<IWHTMLReset>::Bind(pintf, true);
  }

  IWHTMLResetDispT& operator=(IWHTMLReset *pintf)
  {
    TAutoDriver<IWHTMLReset>::Bind(pintf, false);
    return *this;
  }

  IWHTMLResetDispT& operator=(IWHTMLResetPtr pintf)
  {
    TAutoDriver<IWHTMLReset>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_HTMLReset));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_HTMLReset);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLType(BSTR HTMLType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLType(BSTR* HTMLType/*[out,retval]*/);
  BSTR            __fastcall get_HTMLType(void);

  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};
};
typedef IWHTMLResetDispT<IWHTMLReset> IWHTMLResetDisp;

// *********************************************************************//
// SmartIntf: TCOMIWHTMLCheckbox
// Interface: IWHTMLCheckbox
// *********************************************************************//
template <class T /* IWHTMLCheckbox */ >
class TCOMIWHTMLCheckboxT : public TComInterface<IWHTMLCheckbox>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWHTMLCheckboxT() {}
  TCOMIWHTMLCheckboxT(IWHTMLCheckbox *intf, bool addRef = false) : TComInterface<IWHTMLCheckbox>(intf, addRef) {}
  TCOMIWHTMLCheckboxT(const TCOMIWHTMLCheckboxT& src) : TComInterface<IWHTMLCheckbox>(src) {}
  TCOMIWHTMLCheckboxT& operator=(const TCOMIWHTMLCheckboxT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT         __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT         __fastcall set_Value(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Value(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Value(void);
  HRESULT         __fastcall set_Checked(VARIANT_BOOL Checked/*[in]*/);
  HRESULT         __fastcall set_Checked(TOLEBOOL Checked/*[in]*/);
  HRESULT         __fastcall get_Checked(VARIANT_BOOL* Checked/*[out,retval]*/);
  HRESULT         __fastcall get_Checked(TOLEBOOL* Checked/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Checked(void);
  HRESULT         __fastcall set_HTMLType(BSTR HTMLType/*[in]*/);
  HRESULT         __fastcall get_HTMLType(BSTR* HTMLType/*[out,retval]*/);
  BSTR            __fastcall get_HTMLType(void);

  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   TOLEBOOL        Checked = {write = set_Checked};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};
};
typedef TCOMIWHTMLCheckboxT<IWHTMLCheckbox> TCOMIWHTMLCheckbox;

// *********************************************************************//
// DispIntf:  IWHTMLCheckbox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D117-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template<class T>
class IWHTMLCheckboxDispT : public TAutoDriver<IWHTMLCheckbox>
{
public:
  IWHTMLCheckboxDispT(){}

  IWHTMLCheckboxDispT(IWHTMLCheckbox *pintf)
  {
    TAutoDriver<IWHTMLCheckbox>::Bind(pintf, false);
  }

  IWHTMLCheckboxDispT(IWHTMLCheckboxPtr pintf)
  {
    TAutoDriver<IWHTMLCheckbox>::Bind(pintf, true);
  }

  IWHTMLCheckboxDispT& operator=(IWHTMLCheckbox *pintf)
  {
    TAutoDriver<IWHTMLCheckbox>::Bind(pintf, false);
    return *this;
  }

  IWHTMLCheckboxDispT& operator=(IWHTMLCheckboxPtr pintf)
  {
    TAutoDriver<IWHTMLCheckbox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_HTMLCheckbox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_HTMLCheckbox);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(BSTR Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Checked(VARIANT_BOOL Checked/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Checked(VARIANT_BOOL* Checked/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Checked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLType(BSTR HTMLType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLType(BSTR* HTMLType/*[out,retval]*/);
  BSTR            __fastcall get_HTMLType(void);

  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   VARIANT_BOOL    Checked = {read = get_Checked, write = set_Checked};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};
};
typedef IWHTMLCheckboxDispT<IWHTMLCheckbox> IWHTMLCheckboxDisp;

// *********************************************************************//
// SmartIntf: TCOMIWHTMLOption
// Interface: IWHTMLOption
// *********************************************************************//
template <class T /* IWHTMLOption */ >
class TCOMIWHTMLOptionT : public TComInterface<IWHTMLOption>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWHTMLOptionT() {}
  TCOMIWHTMLOptionT(IWHTMLOption *intf, bool addRef = false) : TComInterface<IWHTMLOption>(intf, addRef) {}
  TCOMIWHTMLOptionT(const TCOMIWHTMLOptionT& src) : TComInterface<IWHTMLOption>(src) {}
  TCOMIWHTMLOptionT& operator=(const TCOMIWHTMLOptionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT         __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT         __fastcall set_Value(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Value(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Value(void);
  HRESULT         __fastcall set_Checked(VARIANT_BOOL Checked/*[in]*/);
  HRESULT         __fastcall set_Checked(TOLEBOOL Checked/*[in]*/);
  HRESULT         __fastcall get_Checked(VARIANT_BOOL* Checked/*[out,retval]*/);
  HRESULT         __fastcall get_Checked(TOLEBOOL* Checked/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Checked(void);
  HRESULT         __fastcall set_HTMLType(BSTR HTMLType/*[in]*/);
  HRESULT         __fastcall get_HTMLType(BSTR* HTMLType/*[out,retval]*/);
  BSTR            __fastcall get_HTMLType(void);
  HRESULT         __fastcall get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/);
  Msforms_97::fmDisplayStyle __fastcall get_DisplayStyle(void);

  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   TOLEBOOL        Checked = {write = set_Checked};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};
  __property   Msforms_97::fmDisplayStyle DisplayStyle = {read = get_DisplayStyle};
};
typedef TCOMIWHTMLOptionT<IWHTMLOption> TCOMIWHTMLOption;

// *********************************************************************//
// DispIntf:  IWHTMLOption
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D119-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template<class T>
class IWHTMLOptionDispT : public TAutoDriver<IWHTMLOption>
{
public:
  IWHTMLOptionDispT(){}

  IWHTMLOptionDispT(IWHTMLOption *pintf)
  {
    TAutoDriver<IWHTMLOption>::Bind(pintf, false);
  }

  IWHTMLOptionDispT(IWHTMLOptionPtr pintf)
  {
    TAutoDriver<IWHTMLOption>::Bind(pintf, true);
  }

  IWHTMLOptionDispT& operator=(IWHTMLOption *pintf)
  {
    TAutoDriver<IWHTMLOption>::Bind(pintf, false);
    return *this;
  }

  IWHTMLOptionDispT& operator=(IWHTMLOptionPtr pintf)
  {
    TAutoDriver<IWHTMLOption>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_HTMLOption));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_HTMLOption);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(BSTR Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Checked(VARIANT_BOOL Checked/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Checked(VARIANT_BOOL* Checked/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Checked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLType(BSTR HTMLType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLType(BSTR* HTMLType/*[out,retval]*/);
  BSTR            __fastcall get_HTMLType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/);
  Msforms_97::fmDisplayStyle __fastcall get_DisplayStyle(void);

  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   VARIANT_BOOL    Checked = {read = get_Checked, write = set_Checked};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};
  __property   Msforms_97::fmDisplayStyle DisplayStyle = {read = get_DisplayStyle};
};
typedef IWHTMLOptionDispT<IWHTMLOption> IWHTMLOptionDisp;

// *********************************************************************//
// SmartIntf: TCOMIWHTMLText
// Interface: IWHTMLText
// *********************************************************************//
template <class T /* IWHTMLText */ >
class TCOMIWHTMLTextT : public TComInterface<IWHTMLText>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWHTMLTextT() {}
  TCOMIWHTMLTextT(IWHTMLText *intf, bool addRef = false) : TComInterface<IWHTMLText>(intf, addRef) {}
  TCOMIWHTMLTextT(const TCOMIWHTMLTextT& src) : TComInterface<IWHTMLText>(src) {}
  TCOMIWHTMLTextT& operator=(const TCOMIWHTMLTextT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT         __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT         __fastcall set_Value(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Value(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Value(void);
  HRESULT         __fastcall set_MaxLength(long MaxLength/*[in]*/);
  HRESULT         __fastcall get_MaxLength(long* MaxLength/*[out,retval]*/);
  long            __fastcall get_MaxLength(void);
  HRESULT         __fastcall set_Width(long Width/*[in]*/);
  HRESULT         __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_HTMLType(BSTR HTMLType/*[in]*/);
  HRESULT         __fastcall get_HTMLType(BSTR* HTMLType/*[out,retval]*/);
  BSTR            __fastcall get_HTMLType(void);

  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   long            MaxLength = {read = get_MaxLength, write = set_MaxLength};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};
};
typedef TCOMIWHTMLTextT<IWHTMLText> TCOMIWHTMLText;

// *********************************************************************//
// DispIntf:  IWHTMLText
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D11B-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template<class T>
class IWHTMLTextDispT : public TAutoDriver<IWHTMLText>
{
public:
  IWHTMLTextDispT(){}

  IWHTMLTextDispT(IWHTMLText *pintf)
  {
    TAutoDriver<IWHTMLText>::Bind(pintf, false);
  }

  IWHTMLTextDispT(IWHTMLTextPtr pintf)
  {
    TAutoDriver<IWHTMLText>::Bind(pintf, true);
  }

  IWHTMLTextDispT& operator=(IWHTMLText *pintf)
  {
    TAutoDriver<IWHTMLText>::Bind(pintf, false);
    return *this;
  }

  IWHTMLTextDispT& operator=(IWHTMLTextPtr pintf)
  {
    TAutoDriver<IWHTMLText>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_HTMLText));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_HTMLText);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(BSTR Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MaxLength(long MaxLength/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MaxLength(long* MaxLength/*[out,retval]*/);
  long            __fastcall get_MaxLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(long Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLType(BSTR HTMLType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLType(BSTR* HTMLType/*[out,retval]*/);
  BSTR            __fastcall get_HTMLType(void);

  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   long            MaxLength = {read = get_MaxLength, write = set_MaxLength};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};
};
typedef IWHTMLTextDispT<IWHTMLText> IWHTMLTextDisp;

// *********************************************************************//
// SmartIntf: TCOMIWHTMLHidden
// Interface: IWHTMLHidden
// *********************************************************************//
template <class T /* IWHTMLHidden */ >
class TCOMIWHTMLHiddenT : public TComInterface<IWHTMLHidden>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWHTMLHiddenT() {}
  TCOMIWHTMLHiddenT(IWHTMLHidden *intf, bool addRef = false) : TComInterface<IWHTMLHidden>(intf, addRef) {}
  TCOMIWHTMLHiddenT(const TCOMIWHTMLHiddenT& src) : TComInterface<IWHTMLHidden>(src) {}
  TCOMIWHTMLHiddenT& operator=(const TCOMIWHTMLHiddenT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT         __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT         __fastcall set_Value(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Value(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Value(void);
  HRESULT         __fastcall set_HTMLType(BSTR HTMLType/*[in]*/);
  HRESULT         __fastcall get_HTMLType(BSTR* HTMLType/*[out,retval]*/);
  BSTR            __fastcall get_HTMLType(void);

  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};
};
typedef TCOMIWHTMLHiddenT<IWHTMLHidden> TCOMIWHTMLHidden;

// *********************************************************************//
// DispIntf:  IWHTMLHidden
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D11D-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template<class T>
class IWHTMLHiddenDispT : public TAutoDriver<IWHTMLHidden>
{
public:
  IWHTMLHiddenDispT(){}

  IWHTMLHiddenDispT(IWHTMLHidden *pintf)
  {
    TAutoDriver<IWHTMLHidden>::Bind(pintf, false);
  }

  IWHTMLHiddenDispT(IWHTMLHiddenPtr pintf)
  {
    TAutoDriver<IWHTMLHidden>::Bind(pintf, true);
  }

  IWHTMLHiddenDispT& operator=(IWHTMLHidden *pintf)
  {
    TAutoDriver<IWHTMLHidden>::Bind(pintf, false);
    return *this;
  }

  IWHTMLHiddenDispT& operator=(IWHTMLHiddenPtr pintf)
  {
    TAutoDriver<IWHTMLHidden>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_HTMLHidden));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_HTMLHidden);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(BSTR Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLType(BSTR HTMLType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLType(BSTR* HTMLType/*[out,retval]*/);
  BSTR            __fastcall get_HTMLType(void);

  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};
};
typedef IWHTMLHiddenDispT<IWHTMLHidden> IWHTMLHiddenDisp;

// *********************************************************************//
// SmartIntf: TCOMIWHTMLPassword
// Interface: IWHTMLPassword
// *********************************************************************//
template <class T /* IWHTMLPassword */ >
class TCOMIWHTMLPasswordT : public TComInterface<IWHTMLPassword>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWHTMLPasswordT() {}
  TCOMIWHTMLPasswordT(IWHTMLPassword *intf, bool addRef = false) : TComInterface<IWHTMLPassword>(intf, addRef) {}
  TCOMIWHTMLPasswordT(const TCOMIWHTMLPasswordT& src) : TComInterface<IWHTMLPassword>(src) {}
  TCOMIWHTMLPasswordT& operator=(const TCOMIWHTMLPasswordT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT         __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT         __fastcall set_Value(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Value(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Value(void);
  HRESULT         __fastcall set_MaxLength(long MaxLength/*[in]*/);
  HRESULT         __fastcall get_MaxLength(long* MaxLength/*[out,retval]*/);
  long            __fastcall get_MaxLength(void);
  HRESULT         __fastcall set_Width(long Width/*[in]*/);
  HRESULT         __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_HTMLType(BSTR HTMLType/*[in]*/);
  HRESULT         __fastcall get_HTMLType(BSTR* HTMLType/*[out,retval]*/);
  BSTR            __fastcall get_HTMLType(void);

  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   long            MaxLength = {read = get_MaxLength, write = set_MaxLength};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};
};
typedef TCOMIWHTMLPasswordT<IWHTMLPassword> TCOMIWHTMLPassword;

// *********************************************************************//
// DispIntf:  IWHTMLPassword
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D11F-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template<class T>
class IWHTMLPasswordDispT : public TAutoDriver<IWHTMLPassword>
{
public:
  IWHTMLPasswordDispT(){}

  IWHTMLPasswordDispT(IWHTMLPassword *pintf)
  {
    TAutoDriver<IWHTMLPassword>::Bind(pintf, false);
  }

  IWHTMLPasswordDispT(IWHTMLPasswordPtr pintf)
  {
    TAutoDriver<IWHTMLPassword>::Bind(pintf, true);
  }

  IWHTMLPasswordDispT& operator=(IWHTMLPassword *pintf)
  {
    TAutoDriver<IWHTMLPassword>::Bind(pintf, false);
    return *this;
  }

  IWHTMLPasswordDispT& operator=(IWHTMLPasswordPtr pintf)
  {
    TAutoDriver<IWHTMLPassword>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_HTMLPassword));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_HTMLPassword);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(BSTR Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MaxLength(long MaxLength/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MaxLength(long* MaxLength/*[out,retval]*/);
  long            __fastcall get_MaxLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(long Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLType(BSTR HTMLType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLType(BSTR* HTMLType/*[out,retval]*/);
  BSTR            __fastcall get_HTMLType(void);

  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   long            MaxLength = {read = get_MaxLength, write = set_MaxLength};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   BSTR            HTMLType = {read = get_HTMLType, write = set_HTMLType};
};
typedef IWHTMLPasswordDispT<IWHTMLPassword> IWHTMLPasswordDisp;

// *********************************************************************//
// SmartIntf: TCOMIWHTMLSelect
// Interface: IWHTMLSelect
// *********************************************************************//
template <class T /* IWHTMLSelect */ >
class TCOMIWHTMLSelectT : public TComInterface<IWHTMLSelect>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWHTMLSelectT() {}
  TCOMIWHTMLSelectT(IWHTMLSelect *intf, bool addRef = false) : TComInterface<IWHTMLSelect>(intf, addRef) {}
  TCOMIWHTMLSelectT(const TCOMIWHTMLSelectT& src) : TComInterface<IWHTMLSelect>(src) {}
  TCOMIWHTMLSelectT& operator=(const TCOMIWHTMLSelectT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT         __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT         __fastcall set_Values(VARIANT* Values/*[in]*/);
  HRESULT         __fastcall get_Values(VARIANT* Values/*[out,retval]*/);
  VARIANT         __fastcall get_Values(void);
  HRESULT         __fastcall set_DisplayValues(VARIANT* DisplayValues/*[in]*/);
  HRESULT         __fastcall get_DisplayValues(VARIANT* DisplayValues/*[out,retval]*/);
  VARIANT         __fastcall get_DisplayValues(void);
  HRESULT         __fastcall set_Selected(BSTR Selected/*[in]*/);
  HRESULT         __fastcall get_Selected(BSTR* Selected/*[out,retval]*/);
  BSTR            __fastcall get_Selected(void);
  HRESULT         __fastcall set_MultiSelect(VARIANT_BOOL MultiSelect/*[in]*/);
  HRESULT         __fastcall set_MultiSelect(TOLEBOOL MultiSelect/*[in]*/);
  HRESULT         __fastcall get_MultiSelect(VARIANT_BOOL* MultiSelect/*[out,retval]*/);
  HRESULT         __fastcall get_MultiSelect(TOLEBOOL* MultiSelect/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MultiSelect(void);
  HRESULT         __fastcall set_Size(long Size/*[in]*/);
  HRESULT         __fastcall get_Size(long* Size/*[out,retval]*/);
  long            __fastcall get_Size(void);

  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Selected = {read = get_Selected, write = set_Selected};
  __property   TOLEBOOL        MultiSelect = {write = set_MultiSelect};
  __property   long            Size = {read = get_Size, write = set_Size};
};
typedef TCOMIWHTMLSelectT<IWHTMLSelect> TCOMIWHTMLSelect;

// *********************************************************************//
// DispIntf:  IWHTMLSelect
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D123-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template<class T>
class IWHTMLSelectDispT : public TAutoDriver<IWHTMLSelect>
{
public:
  IWHTMLSelectDispT(){}

  IWHTMLSelectDispT(IWHTMLSelect *pintf)
  {
    TAutoDriver<IWHTMLSelect>::Bind(pintf, false);
  }

  IWHTMLSelectDispT(IWHTMLSelectPtr pintf)
  {
    TAutoDriver<IWHTMLSelect>::Bind(pintf, true);
  }

  IWHTMLSelectDispT& operator=(IWHTMLSelect *pintf)
  {
    TAutoDriver<IWHTMLSelect>::Bind(pintf, false);
    return *this;
  }

  IWHTMLSelectDispT& operator=(IWHTMLSelectPtr pintf)
  {
    TAutoDriver<IWHTMLSelect>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_HTMLSelect));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_HTMLSelect);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Values(VARIANT* Values/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Values(VARIANT* Values/*[out,retval]*/);
  VARIANT         __fastcall get_Values(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayValues(VARIANT* DisplayValues/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayValues(VARIANT* DisplayValues/*[out,retval]*/);
  VARIANT         __fastcall get_DisplayValues(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Selected(BSTR Selected/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selected(BSTR* Selected/*[out,retval]*/);
  BSTR            __fastcall get_Selected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MultiSelect(VARIANT_BOOL MultiSelect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MultiSelect(VARIANT_BOOL* MultiSelect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MultiSelect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Size(long Size/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Size(long* Size/*[out,retval]*/);
  long            __fastcall get_Size(void);

  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Selected = {read = get_Selected, write = set_Selected};
  __property   VARIANT_BOOL    MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   long            Size = {read = get_Size, write = set_Size};
};
typedef IWHTMLSelectDispT<IWHTMLSelect> IWHTMLSelectDisp;

// *********************************************************************//
// SmartIntf: TCOMIWHTMLTextArea
// Interface: IWHTMLTextArea
// *********************************************************************//
template <class T /* IWHTMLTextArea */ >
class TCOMIWHTMLTextAreaT : public TComInterface<IWHTMLTextArea>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWHTMLTextAreaT() {}
  TCOMIWHTMLTextAreaT(IWHTMLTextArea *intf, bool addRef = false) : TComInterface<IWHTMLTextArea>(intf, addRef) {}
  TCOMIWHTMLTextAreaT(const TCOMIWHTMLTextAreaT& src) : TComInterface<IWHTMLTextArea>(src) {}
  TCOMIWHTMLTextAreaT& operator=(const TCOMIWHTMLTextAreaT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT         __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT         __fastcall set_Value(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Value(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Value(void);
  HRESULT         __fastcall set_Rows(long Rows/*[in]*/);
  HRESULT         __fastcall get_Rows(long* Rows/*[out,retval]*/);
  long            __fastcall get_Rows(void);
  HRESULT         __fastcall set_Columns(long Columns/*[in]*/);
  HRESULT         __fastcall get_Columns(long* Columns/*[out,retval]*/);
  long            __fastcall get_Columns(void);
  HRESULT         __fastcall set_WordWrap(BSTR WordWrap/*[in]*/);
  HRESULT         __fastcall get_WordWrap(BSTR* WordWrap/*[out,retval]*/);
  BSTR            __fastcall get_WordWrap(void);

  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   long            Rows = {read = get_Rows, write = set_Rows};
  __property   long            Columns = {read = get_Columns, write = set_Columns};
  __property   BSTR            WordWrap = {read = get_WordWrap, write = set_WordWrap};
};
typedef TCOMIWHTMLTextAreaT<IWHTMLTextArea> TCOMIWHTMLTextArea;

// *********************************************************************//
// DispIntf:  IWHTMLTextArea
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D125-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template<class T>
class IWHTMLTextAreaDispT : public TAutoDriver<IWHTMLTextArea>
{
public:
  IWHTMLTextAreaDispT(){}

  IWHTMLTextAreaDispT(IWHTMLTextArea *pintf)
  {
    TAutoDriver<IWHTMLTextArea>::Bind(pintf, false);
  }

  IWHTMLTextAreaDispT(IWHTMLTextAreaPtr pintf)
  {
    TAutoDriver<IWHTMLTextArea>::Bind(pintf, true);
  }

  IWHTMLTextAreaDispT& operator=(IWHTMLTextArea *pintf)
  {
    TAutoDriver<IWHTMLTextArea>::Bind(pintf, false);
    return *this;
  }

  IWHTMLTextAreaDispT& operator=(IWHTMLTextAreaPtr pintf)
  {
    TAutoDriver<IWHTMLTextArea>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_HTMLTextArea));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_HTMLTextArea);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLName(BSTR HTMLName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLName(BSTR* HTMLName/*[out,retval]*/);
  BSTR            __fastcall get_HTMLName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(BSTR Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Rows(long Rows/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Rows(long* Rows/*[out,retval]*/);
  long            __fastcall get_Rows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Columns(long Columns/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Columns(long* Columns/*[out,retval]*/);
  long            __fastcall get_Columns(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WordWrap(BSTR WordWrap/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WordWrap(BSTR* WordWrap/*[out,retval]*/);
  BSTR            __fastcall get_WordWrap(void);

  __property   BSTR            HTMLName = {read = get_HTMLName, write = set_HTMLName};
  __property   BSTR            Value = {read = get_Value, write = set_Value};
  __property   long            Rows = {read = get_Rows, write = set_Rows};
  __property   long            Columns = {read = get_Columns, write = set_Columns};
  __property   BSTR            WordWrap = {read = get_WordWrap, write = set_WordWrap};
};
typedef IWHTMLTextAreaDispT<IWHTMLTextArea> IWHTMLTextAreaDisp;

// *********************************************************************//
// DispIntf:  LabelControlEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {978C9E22-D4B0-11CE-BF2D-00AA003F40D0}
// *********************************************************************//
template <class T>
class LabelControlEventsDispT : public TAutoDriver<LabelControlEvents>
{
public:
  LabelControlEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/);

};
typedef LabelControlEventsDispT<LabelControlEvents> LabelControlEventsDisp;

// *********************************************************************//
// DispIntf:  CommandButtonEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {7B020EC1-AF6C-11CE-9F46-00AA00574A4F}
// *********************************************************************//
template <class T>
class CommandButtonEventsDispT : public TAutoDriver<CommandButtonEvents>
{
public:
  CommandButtonEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/);

};
typedef CommandButtonEventsDispT<CommandButtonEvents> CommandButtonEventsDisp;

// *********************************************************************//
// DispIntf:  MdcTextEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BD21D12-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template <class T>
class MdcTextEventsDispT : public TAutoDriver<MdcTextEvents>
{
public:
  MdcTextEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Change();
  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall DropButtonClick();
  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/);

};
typedef MdcTextEventsDispT<MdcTextEvents> MdcTextEventsDisp;

// *********************************************************************//
// DispIntf:  MdcListEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BD21D22-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template <class T>
class MdcListEventsDispT : public TAutoDriver<MdcListEvents>
{
public:
  MdcListEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Change();
  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/);

};
typedef MdcListEventsDispT<MdcListEvents> MdcListEventsDisp;

// *********************************************************************//
// DispIntf:  MdcComboEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BD21D32-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template <class T>
class MdcComboEventsDispT : public TAutoDriver<MdcComboEvents>
{
public:
  MdcComboEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Change();
  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall DropButtonClick();
  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/);

};
typedef MdcComboEventsDispT<MdcComboEvents> MdcComboEventsDisp;

// *********************************************************************//
// DispIntf:  MdcCheckBoxEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BD21D42-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template <class T>
class MdcCheckBoxEventsDispT : public TAutoDriver<MdcCheckBoxEvents>
{
public:
  MdcCheckBoxEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Change();
  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/);

};
typedef MdcCheckBoxEventsDispT<MdcCheckBoxEvents> MdcCheckBoxEventsDisp;

// *********************************************************************//
// DispIntf:  MdcOptionButtonEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BD21D52-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template <class T>
class MdcOptionButtonEventsDispT : public TAutoDriver<MdcOptionButtonEvents>
{
public:
  MdcOptionButtonEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Change();
  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/);

};
typedef MdcOptionButtonEventsDispT<MdcOptionButtonEvents> MdcOptionButtonEventsDisp;

// *********************************************************************//
// DispIntf:  MdcToggleButtonEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BD21D62-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template <class T>
class MdcToggleButtonEventsDispT : public TAutoDriver<MdcToggleButtonEvents>
{
public:
  MdcToggleButtonEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Change();
  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/);

};
typedef MdcToggleButtonEventsDispT<MdcToggleButtonEvents> MdcToggleButtonEventsDisp;

// *********************************************************************//
// DispIntf:  ScrollbarEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {7B020EC2-AF6C-11CE-9F46-00AA00574A4F}
// *********************************************************************//
template <class T>
class ScrollbarEventsDispT : public TAutoDriver<ScrollbarEvents>
{
public:
  ScrollbarEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Change();
  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Scroll();

};
typedef ScrollbarEventsDispT<ScrollbarEvents> ScrollbarEventsDisp;

// *********************************************************************//
// DispIntf:  TabStripEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {7B020EC7-AF6C-11CE-9F46-00AA00574A4F}
// *********************************************************************//
template <class T>
class TabStripEventsDispT : public TAutoDriver<TabStripEvents>
{
public:
  TabStripEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(long Index/*[in]*/, 
                                                 Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(long Index/*[in]*/, 
                                                    Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Change();
  void /*[VT_VOID:0]*/ __fastcall Click(long Index/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall DblClick(long Index/*[in]*/, 
                                           Msforms_97::ReturnBoolean* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseDown(long Index/*[in]*/, short Button/*[in]*/, 
                                            short Shift/*[in]*/, float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(long Index/*[in]*/, short Button/*[in]*/, 
                                            short Shift/*[in]*/, float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(long Index/*[in]*/, short Button/*[in]*/, 
                                          short Shift/*[in]*/, float X/*[in]*/, float Y/*[in]*/);

};
typedef TabStripEventsDispT<TabStripEvents> TabStripEventsDisp;

// *********************************************************************//
// DispIntf:  SpinbuttonEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {79176FB2-B7F2-11CE-97EF-00AA006D2776}
// *********************************************************************//
template <class T>
class SpinbuttonEventsDispT : public TAutoDriver<SpinbuttonEvents>
{
public:
  SpinbuttonEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Change();
  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall SpinUp();
  void /*[VT_VOID:0]*/ __fastcall SpinDown();

};
typedef SpinbuttonEventsDispT<SpinbuttonEvents> SpinbuttonEventsDisp;

// *********************************************************************//
// DispIntf:  ImageEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {4C5992A5-6926-101B-9992-00000B65C6F9}
// *********************************************************************//
template <class T>
class ImageEventsDispT : public TAutoDriver<ImageEvents>
{
public:
  ImageEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState DragState/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Error(short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button/*[in]*/, short Shift/*[in]*/, 
                                            float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                          , float Y/*[in]*/);

};
typedef ImageEventsDispT<ImageEvents> ImageEventsDisp;

// *********************************************************************//
// DispIntf:  WHTMLControlEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {796ED650-5FE9-11CF-8D68-00AA00BDCE1D}
// *********************************************************************//
template <class T>
class WHTMLControlEventsDispT : public TAutoDriver<WHTMLControlEvents>
{
public:
  WHTMLControlEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall Click();

};
typedef WHTMLControlEventsDispT<WHTMLControlEvents> WHTMLControlEventsDisp;

// *********************************************************************//
// DispIntf:  WHTMLControlEvents1
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE0-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
template <class T>
class WHTMLControlEvents1DispT : public TAutoDriver<WHTMLControlEvents1>
{
public:
  WHTMLControlEvents1DispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall Click();

};
typedef WHTMLControlEvents1DispT<WHTMLControlEvents1> WHTMLControlEvents1Disp;

// *********************************************************************//
// DispIntf:  WHTMLControlEvents2
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE1-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
template <class T>
class WHTMLControlEvents2DispT : public TAutoDriver<WHTMLControlEvents2>
{
public:
  WHTMLControlEvents2DispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall Click();

};
typedef WHTMLControlEvents2DispT<WHTMLControlEvents2> WHTMLControlEvents2Disp;

// *********************************************************************//
// DispIntf:  WHTMLControlEvents3
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE2-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
template <class T>
class WHTMLControlEvents3DispT : public TAutoDriver<WHTMLControlEvents3>
{
public:
  WHTMLControlEvents3DispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall Click();

};
typedef WHTMLControlEvents3DispT<WHTMLControlEvents3> WHTMLControlEvents3Disp;

// *********************************************************************//
// DispIntf:  WHTMLControlEvents4
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE3-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
template <class T>
class WHTMLControlEvents4DispT : public TAutoDriver<WHTMLControlEvents4>
{
public:
  WHTMLControlEvents4DispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall Click();

};
typedef WHTMLControlEvents4DispT<WHTMLControlEvents4> WHTMLControlEvents4Disp;

// *********************************************************************//
// DispIntf:  WHTMLControlEvents5
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE4-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
template <class T>
class WHTMLControlEvents5DispT : public TAutoDriver<WHTMLControlEvents5>
{
public:
  WHTMLControlEvents5DispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall Click();

};
typedef WHTMLControlEvents5DispT<WHTMLControlEvents5> WHTMLControlEvents5Disp;

// *********************************************************************//
// DispIntf:  WHTMLControlEvents6
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE5-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
template <class T>
class WHTMLControlEvents6DispT : public TAutoDriver<WHTMLControlEvents6>
{
public:
  WHTMLControlEvents6DispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall Click();

};
typedef WHTMLControlEvents6DispT<WHTMLControlEvents6> WHTMLControlEvents6Disp;

// *********************************************************************//
// DispIntf:  WHTMLControlEvents7
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE6-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
template <class T>
class WHTMLControlEvents7DispT : public TAutoDriver<WHTMLControlEvents7>
{
public:
  WHTMLControlEvents7DispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall Click();

};
typedef WHTMLControlEvents7DispT<WHTMLControlEvents7> WHTMLControlEvents7Disp;

// *********************************************************************//
// DispIntf:  WHTMLControlEvents9
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE8-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
template <class T>
class WHTMLControlEvents9DispT : public TAutoDriver<WHTMLControlEvents9>
{
public:
  WHTMLControlEvents9DispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall Click();

};
typedef WHTMLControlEvents9DispT<WHTMLControlEvents9> WHTMLControlEvents9Disp;

// *********************************************************************//
// DispIntf:  WHTMLControlEvents10
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE9-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
template <class T>
class WHTMLControlEvents10DispT : public TAutoDriver<WHTMLControlEvents10>
{
public:
  WHTMLControlEvents10DispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall Click();

};
typedef WHTMLControlEvents10DispT<WHTMLControlEvents10> WHTMLControlEvents10Disp;

// *********************************************************************//
// SmartIntf: TCOMIPage
// Interface: IPage
// *********************************************************************//
template <class T /* IPage */ >
class TCOMIPageT : public TComInterface<IPage>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPageT() {}
  TCOMIPageT(IPage *intf, bool addRef = false) : TComInterface<IPage>(intf, addRef) {}
  TCOMIPageT(const TCOMIPageT& src) : TComInterface<IPage>(src) {}
  TCOMIPageT& operator=(const TCOMIPageT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Controls(Msforms_97::Controls_** Controls/*[out,retval]*/);
  HRESULT         __fastcall get_Controls(Msforms_97::Controls_Ptr* Controls/*[out,retval]*/);
  Msforms_97::Controls_Ptr __fastcall get_Controls(void);
  HRESULT         __fastcall get_Selected(Msforms_97::Controls_** Selected/*[out,retval]*/);
  HRESULT         __fastcall get_Selected(Msforms_97::Controls_Ptr* Selected/*[out,retval]*/);
  Msforms_97::Controls_Ptr __fastcall get_Selected(void);
  HRESULT         __fastcall get_ActiveControl(Msforms_97::Control** ActiveControl/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveControl(Msforms_97::ControlPtr* ActiveControl/*[out,retval]*/);
  Msforms_97::ControlPtr __fastcall get_ActiveControl(void);
  HRESULT         __fastcall get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/);
  HRESULT         __fastcall get_CanPaste(TOLEBOOL* CanPaste/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanPaste(void);
  HRESULT         __fastcall get_CanRedo(VARIANT_BOOL* CanRedo/*[out,retval]*/);
  HRESULT         __fastcall get_CanRedo(TOLEBOOL* CanRedo/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanRedo(void);
  HRESULT         __fastcall get_CanUndo(VARIANT_BOOL* CanUndo/*[out,retval]*/);
  HRESULT         __fastcall get_CanUndo(TOLEBOOL* CanUndo/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanUndo(void);
  HRESULT         __fastcall set_Cycle(Msforms_97::fmCycle Cycle/*[in]*/);
  HRESULT         __fastcall get_Cycle(Msforms_97::fmCycle* Cycle/*[out,retval]*/);
  Msforms_97::fmCycle __fastcall get_Cycle(void);
  HRESULT         __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_ControlTipText(BSTR tooltip/*[in]*/);
  HRESULT         __fastcall get_ControlTipText(BSTR* tooltip/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL fEnabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL fEnabled/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* fEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Index(long Index/*[in]*/);
  HRESULT         __fastcall get_Index(long* Index/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT         __fastcall _GetInsideHeight(long* InsideHeight/*[out]*/);
  HRESULT         __fastcall get_InsideHeight(float* InsideHeight/*[out,retval]*/);
  float           __fastcall get_InsideHeight(void);
  HRESULT         __fastcall _GetInsideWidth(long* InsideWidth/*[out]*/);
  HRESULT         __fastcall get_InsideWidth(float* InsideWidth/*[out,retval]*/);
  float           __fastcall get_InsideWidth(void);
  HRESULT         __fastcall set_KeepScrollBarsVisible(Msforms_97::fmScrollBars ScrollBars/*[in]*/);
  HRESULT         __fastcall get_KeepScrollBarsVisible(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/);
  Msforms_97::fmScrollBars __fastcall get_KeepScrollBarsVisible(void);
  HRESULT         __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_PictureAlignment(Msforms_97::fmPictureAlignment PictureAlignment/*[in]*/);
  HRESULT         __fastcall get_PictureAlignment(Msforms_97::fmPictureAlignment* PictureAlignment/*[out,retval]*/);
  Msforms_97::fmPictureAlignment __fastcall get_PictureAlignment(void);
  HRESULT         __fastcall set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT         __fastcall set_Picture(IPictureDisp* Picture/*[in]*/);
  HRESULT         __fastcall _set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT         __fastcall _set_Picture(IPictureDisp* Picture/*[in]*/);
  HRESULT         __fastcall get_Picture(IPictureDisp*** Picture/*[out,retval]*/);
  HRESULT         __fastcall get_Picture(IPictureDisp** Picture/*[out,retval]*/);
  IPictureDisp*   __fastcall get_Picture(void);
  HRESULT         __fastcall set_PictureSizeMode(Msforms_97::fmPictureSizeMode PictureSizeMode/*[in]*/);
  HRESULT         __fastcall get_PictureSizeMode(Msforms_97::fmPictureSizeMode* PictureSizeMode/*[out,retval]*/);
  Msforms_97::fmPictureSizeMode __fastcall get_PictureSizeMode(void);
  HRESULT         __fastcall set_PictureTiling(VARIANT_BOOL PictureTiling/*[in]*/);
  HRESULT         __fastcall set_PictureTiling(TOLEBOOL PictureTiling/*[in]*/);
  HRESULT         __fastcall get_PictureTiling(VARIANT_BOOL* PictureTiling/*[out,retval]*/);
  HRESULT         __fastcall get_PictureTiling(TOLEBOOL* PictureTiling/*[out,retval]*/);
  TOLEBOOL        __fastcall get_PictureTiling(void);
  HRESULT         __fastcall set_ScrollBars(Msforms_97::fmScrollBars ScrollBars/*[in]*/);
  HRESULT         __fastcall get_ScrollBars(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/);
  Msforms_97::fmScrollBars __fastcall get_ScrollBars(void);
  HRESULT         __fastcall _SetScrollHeight(long ScrollHeight/*[in]*/);
  HRESULT         __fastcall _GetScrollHeight(long* ScrollHeight/*[out]*/);
  HRESULT         __fastcall set_ScrollHeight(float ScrollHeight/*[in]*/);
  HRESULT         __fastcall get_ScrollHeight(float* ScrollHeight/*[out,retval]*/);
  float           __fastcall get_ScrollHeight(void);
  HRESULT         __fastcall _SetScrollLeft(long ScrollLeft/*[in]*/);
  HRESULT         __fastcall _GetScrollLeft(long* ScrollLeft/*[out]*/);
  HRESULT         __fastcall set_ScrollLeft(float ScrollLeft/*[in]*/);
  HRESULT         __fastcall get_ScrollLeft(float* ScrollLeft/*[out,retval]*/);
  float           __fastcall get_ScrollLeft(void);
  HRESULT         __fastcall _SetScrollTop(long ScrollTop/*[in]*/);
  HRESULT         __fastcall _GetScrollTop(long* ScrollTop/*[out]*/);
  HRESULT         __fastcall set_ScrollTop(float ScrollTop/*[in]*/);
  HRESULT         __fastcall get_ScrollTop(float* ScrollTop/*[out,retval]*/);
  float           __fastcall get_ScrollTop(void);
  HRESULT         __fastcall _SetScrollWidth(long ScrollWidth/*[in]*/);
  HRESULT         __fastcall _GetScrollWidth(long* ScrollWidth/*[out]*/);
  HRESULT         __fastcall set_ScrollWidth(float ScrollWidth/*[in]*/);
  HRESULT         __fastcall get_ScrollWidth(float* ScrollWidth/*[out,retval]*/);
  float           __fastcall get_ScrollWidth(void);
  HRESULT         __fastcall set_Tag(BSTR Tag/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* Tag/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_TransitionEffect(Msforms_97::fmTransitionEffect TransitionEffect/*[in]*/);
  HRESULT         __fastcall get_TransitionEffect(Msforms_97::fmTransitionEffect* TransitionEffect/*[out,retval]*/);
  Msforms_97::fmTransitionEffect __fastcall get_TransitionEffect(void);
  HRESULT         __fastcall set_TransitionPeriod(long TransitionPeriod/*[in]*/);
  HRESULT         __fastcall get_TransitionPeriod(long* TransitionPeriod/*[out,retval]*/);
  long            __fastcall get_TransitionPeriod(void);
  HRESULT         __fastcall set_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide side/*[in]*/);
  HRESULT         __fastcall get_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide* side/*[out,retval]*/);
  Msforms_97::fmVerticalScrollBarSide __fastcall get_VerticalScrollBarSide(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL fVisible/*[in]*/);
  HRESULT         __fastcall set_Visible(TOLEBOOL fVisible/*[in]*/);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* fVisible/*[out,retval]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* fVisible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Zoom(short Zoom/*[in]*/);
  HRESULT         __fastcall get_Zoom(short* Zoom/*[out,retval]*/);
  short           __fastcall get_Zoom(void);
  HRESULT         __fastcall set_DesignMode(Msforms_97::fmMode DesignMode/*[in]*/);
  HRESULT         __fastcall get_DesignMode(Msforms_97::fmMode* DesignMode/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_DesignMode(void);
  HRESULT         __fastcall set_ShowToolbox(Msforms_97::fmMode ShowToolbox/*[in]*/);
  HRESULT         __fastcall get_ShowToolbox(Msforms_97::fmMode* ShowToolbox/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_ShowToolbox(void);
  HRESULT         __fastcall set_ShowGridDots(Msforms_97::fmMode ShowGridDots/*[in]*/);
  HRESULT         __fastcall get_ShowGridDots(Msforms_97::fmMode* ShowGridDots/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_ShowGridDots(void);
  HRESULT         __fastcall set_SnapToGrid(Msforms_97::fmMode SnapToGrid/*[in]*/);
  HRESULT         __fastcall get_SnapToGrid(Msforms_97::fmMode* SnapToGrid/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_SnapToGrid(void);
  HRESULT         __fastcall set_GridX(float GridX/*[in]*/);
  HRESULT         __fastcall get_GridX(float* GridX/*[out,retval]*/);
  float           __fastcall get_GridX(void);
  HRESULT         __fastcall _SetGridX(long GridX/*[in]*/);
  HRESULT         __fastcall _GetGridX(long* GridX/*[out]*/);
  HRESULT         __fastcall set_GridY(float GridY/*[in]*/);
  HRESULT         __fastcall get_GridY(float* GridY/*[out,retval]*/);
  float           __fastcall get_GridY(void);
  HRESULT         __fastcall _SetGridY(long GridY/*[in]*/);
  HRESULT         __fastcall _GetGridY(long* GridY/*[out]*/);
  HRESULT         __fastcall Copy(void);
  HRESULT         __fastcall Cut(void);
  HRESULT         __fastcall Paste(void);
  HRESULT         __fastcall RedoAction(void);
  HRESULT         __fastcall Repaint(void);
  HRESULT         __fastcall Scroll(VARIANT xAction/*[in,opt]*/= TNoParam(), 
                                    VARIANT yAction/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall SetDefaultTabOrder(void);
  HRESULT         __fastcall UndoAction(void);
  HRESULT         __fastcall set_Accelerator(BSTR Accelerator/*[in]*/);
  HRESULT         __fastcall get_Accelerator(BSTR* Accelerator/*[out,retval]*/);
  BSTR            __fastcall get_Accelerator(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   Msforms_97::Controls_Ptr Controls = {read = get_Controls};
  __property   Msforms_97::Controls_Ptr Selected = {read = get_Selected};
  __property   Msforms_97::ControlPtr ActiveControl = {read = get_ActiveControl};
  __property   TOLEBOOL        CanPaste = {read = get_CanPaste};
  __property   TOLEBOOL        CanRedo = {read = get_CanRedo};
  __property   TOLEBOOL        CanUndo = {read = get_CanUndo};
  __property   Msforms_97::fmCycle Cycle = {read = get_Cycle, write = set_Cycle};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   TOLEBOOL        Enabled = {write = set_Enabled};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   float           InsideHeight = {read = get_InsideHeight};
  __property   float           InsideWidth = {read = get_InsideWidth};
  __property   Msforms_97::fmScrollBars KeepScrollBarsVisible = {read = get_KeepScrollBarsVisible, write = set_KeepScrollBarsVisible};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Msforms_97::fmPictureAlignment PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   IPictureDisp*   Picture = {write = set_Picture};
  __property   Msforms_97::fmPictureSizeMode PictureSizeMode = {read = get_PictureSizeMode, write = set_PictureSizeMode};
  __property   TOLEBOOL        PictureTiling = {write = set_PictureTiling};
  __property   Msforms_97::fmScrollBars ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   float           ScrollHeight = {read = get_ScrollHeight, write = set_ScrollHeight};
  __property   float           ScrollLeft = {read = get_ScrollLeft, write = set_ScrollLeft};
  __property   float           ScrollTop = {read = get_ScrollTop, write = set_ScrollTop};
  __property   float           ScrollWidth = {read = get_ScrollWidth, write = set_ScrollWidth};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   Msforms_97::fmTransitionEffect TransitionEffect = {read = get_TransitionEffect, write = set_TransitionEffect};
  __property   long            TransitionPeriod = {read = get_TransitionPeriod, write = set_TransitionPeriod};
  __property   Msforms_97::fmVerticalScrollBarSide VerticalScrollBarSide = {read = get_VerticalScrollBarSide, write = set_VerticalScrollBarSide};
  __property   TOLEBOOL        Visible = {write = set_Visible};
  __property   short           Zoom = {read = get_Zoom, write = set_Zoom};
  __property   Msforms_97::fmMode DesignMode = {read = get_DesignMode, write = set_DesignMode};
  __property   Msforms_97::fmMode ShowToolbox = {read = get_ShowToolbox, write = set_ShowToolbox};
  __property   Msforms_97::fmMode ShowGridDots = {read = get_ShowGridDots, write = set_ShowGridDots};
  __property   Msforms_97::fmMode SnapToGrid = {read = get_SnapToGrid, write = set_SnapToGrid};
  __property   float           GridX = {read = get_GridX, write = set_GridX};
  __property   float           GridY = {read = get_GridY, write = set_GridY};
  __property   BSTR            Accelerator = {read = get_Accelerator, write = set_Accelerator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef TCOMIPageT<IPage> TCOMIPage;

// *********************************************************************//
// DispIntf:  IPage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5CEF5613-713D-11CE-80C9-00AA00611080}
// *********************************************************************//
template<class T>
class IPageDispT : public TAutoDriver<IPage>
{
public:
  IPageDispT(){}

  IPageDispT(IPage *pintf)
  {
    TAutoDriver<IPage>::Bind(pintf, false);
  }

  IPageDispT(IPagePtr pintf)
  {
    TAutoDriver<IPage>::Bind(pintf, true);
  }

  IPageDispT& operator=(IPage *pintf)
  {
    TAutoDriver<IPage>::Bind(pintf, false);
    return *this;
  }

  IPageDispT& operator=(IPagePtr pintf)
  {
    TAutoDriver<IPage>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Page));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Page);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Msforms_97::Controls_** Controls/*[out,retval]*/);
  Msforms_97::Controls_* __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selected(Msforms_97::Controls_** Selected/*[out,retval]*/);
  Msforms_97::Controls_* __fastcall get_Selected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveControl(Msforms_97::Control** ActiveControl/*[out,retval]*/);
  Msforms_97::Control* __fastcall get_ActiveControl(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanPaste(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanRedo(VARIANT_BOOL* CanRedo/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanRedo(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanUndo(VARIANT_BOOL* CanUndo/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanUndo(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Cycle(Msforms_97::fmCycle Cycle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cycle(Msforms_97::fmCycle* Cycle/*[out,retval]*/);
  Msforms_97::fmCycle __fastcall get_Cycle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlTipText(BSTR tooltip/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlTipText(BSTR* tooltip/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL fEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Index(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* Index/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetInsideHeight(long* InsideHeight/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InsideHeight(float* InsideHeight/*[out,retval]*/);
  float           __fastcall get_InsideHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetInsideWidth(long* InsideWidth/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InsideWidth(float* InsideWidth/*[out,retval]*/);
  float           __fastcall get_InsideWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_KeepScrollBarsVisible(Msforms_97::fmScrollBars ScrollBars/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_KeepScrollBarsVisible(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/);
  Msforms_97::fmScrollBars __fastcall get_KeepScrollBarsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureAlignment(Msforms_97::fmPictureAlignment PictureAlignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureAlignment(Msforms_97::fmPictureAlignment* PictureAlignment/*[out,retval]*/);
  Msforms_97::fmPictureAlignment __fastcall get_PictureAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Picture(IPictureDisp** Picture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Picture(IPictureDisp*** Picture/*[out,retval]*/);
  IPictureDisp**  __fastcall get_Picture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureSizeMode(Msforms_97::fmPictureSizeMode PictureSizeMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureSizeMode(Msforms_97::fmPictureSizeMode* PictureSizeMode/*[out,retval]*/);
  Msforms_97::fmPictureSizeMode __fastcall get_PictureSizeMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureTiling(VARIANT_BOOL PictureTiling/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureTiling(VARIANT_BOOL* PictureTiling/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PictureTiling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollBars(Msforms_97::fmScrollBars ScrollBars/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollBars(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/);
  Msforms_97::fmScrollBars __fastcall get_ScrollBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetScrollHeight(long ScrollHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetScrollHeight(long* ScrollHeight/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollHeight(float ScrollHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollHeight(float* ScrollHeight/*[out,retval]*/);
  float           __fastcall get_ScrollHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetScrollLeft(long ScrollLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetScrollLeft(long* ScrollLeft/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollLeft(float ScrollLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollLeft(float* ScrollLeft/*[out,retval]*/);
  float           __fastcall get_ScrollLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetScrollTop(long ScrollTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetScrollTop(long* ScrollTop/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollTop(float ScrollTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollTop(float* ScrollTop/*[out,retval]*/);
  float           __fastcall get_ScrollTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetScrollWidth(long ScrollWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetScrollWidth(long* ScrollWidth/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollWidth(float ScrollWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollWidth(float* ScrollWidth/*[out,retval]*/);
  float           __fastcall get_ScrollWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR Tag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* Tag/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TransitionEffect(Msforms_97::fmTransitionEffect TransitionEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TransitionEffect(Msforms_97::fmTransitionEffect* TransitionEffect/*[out,retval]*/);
  Msforms_97::fmTransitionEffect __fastcall get_TransitionEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TransitionPeriod(long TransitionPeriod/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TransitionPeriod(long* TransitionPeriod/*[out,retval]*/);
  long            __fastcall get_TransitionPeriod(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide side/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide* side/*[out,retval]*/);
  Msforms_97::fmVerticalScrollBarSide __fastcall get_VerticalScrollBarSide(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL fVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* fVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Zoom(short Zoom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Zoom(short* Zoom/*[out,retval]*/);
  short           __fastcall get_Zoom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DesignMode(Msforms_97::fmMode DesignMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DesignMode(Msforms_97::fmMode* DesignMode/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_DesignMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowToolbox(Msforms_97::fmMode ShowToolbox/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowToolbox(Msforms_97::fmMode* ShowToolbox/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_ShowToolbox(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowGridDots(Msforms_97::fmMode ShowGridDots/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowGridDots(Msforms_97::fmMode* ShowGridDots/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_ShowGridDots(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SnapToGrid(Msforms_97::fmMode SnapToGrid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SnapToGrid(Msforms_97::fmMode* SnapToGrid/*[out,retval]*/);
  Msforms_97::fmMode __fastcall get_SnapToGrid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GridX(float GridX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GridX(float* GridX/*[out,retval]*/);
  float           __fastcall get_GridX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetGridX(long GridX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetGridX(long* GridX/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GridY(float GridY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GridY(float* GridY/*[out,retval]*/);
  float           __fastcall get_GridY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetGridY(long GridY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetGridY(long* GridY/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Paste();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RedoAction();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Repaint();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Scroll(VARIANT xAction/*[in,opt]*/= TNoParam(), 
                                               VARIANT yAction/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetDefaultTabOrder();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UndoAction();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Accelerator(BSTR Accelerator/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Accelerator(BSTR* Accelerator/*[out,retval]*/);
  BSTR            __fastcall get_Accelerator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   Msforms_97::Controls_* Controls = {read = get_Controls};
  __property   Msforms_97::Controls_* Selected = {read = get_Selected};
  __property   Msforms_97::Control* ActiveControl = {read = get_ActiveControl};
  __property   VARIANT_BOOL    CanPaste = {read = get_CanPaste};
  __property   VARIANT_BOOL    CanRedo = {read = get_CanRedo};
  __property   VARIANT_BOOL    CanUndo = {read = get_CanUndo};
  __property   Msforms_97::fmCycle Cycle = {read = get_Cycle, write = set_Cycle};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   float           InsideHeight = {read = get_InsideHeight};
  __property   float           InsideWidth = {read = get_InsideWidth};
  __property   Msforms_97::fmScrollBars KeepScrollBarsVisible = {read = get_KeepScrollBarsVisible, write = set_KeepScrollBarsVisible};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Msforms_97::fmPictureAlignment PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   IPictureDisp**  Picture = {read = get_Picture, write = set_Picture};
  __property   Msforms_97::fmPictureSizeMode PictureSizeMode = {read = get_PictureSizeMode, write = set_PictureSizeMode};
  __property   VARIANT_BOOL    PictureTiling = {read = get_PictureTiling, write = set_PictureTiling};
  __property   Msforms_97::fmScrollBars ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   float           ScrollHeight = {read = get_ScrollHeight, write = set_ScrollHeight};
  __property   float           ScrollLeft = {read = get_ScrollLeft, write = set_ScrollLeft};
  __property   float           ScrollTop = {read = get_ScrollTop, write = set_ScrollTop};
  __property   float           ScrollWidth = {read = get_ScrollWidth, write = set_ScrollWidth};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   Msforms_97::fmTransitionEffect TransitionEffect = {read = get_TransitionEffect, write = set_TransitionEffect};
  __property   long            TransitionPeriod = {read = get_TransitionPeriod, write = set_TransitionPeriod};
  __property   Msforms_97::fmVerticalScrollBarSide VerticalScrollBarSide = {read = get_VerticalScrollBarSide, write = set_VerticalScrollBarSide};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   short           Zoom = {read = get_Zoom, write = set_Zoom};
  __property   Msforms_97::fmMode DesignMode = {read = get_DesignMode, write = set_DesignMode};
  __property   Msforms_97::fmMode ShowToolbox = {read = get_ShowToolbox, write = set_ShowToolbox};
  __property   Msforms_97::fmMode ShowGridDots = {read = get_ShowGridDots, write = set_ShowGridDots};
  __property   Msforms_97::fmMode SnapToGrid = {read = get_SnapToGrid, write = set_SnapToGrid};
  __property   float           GridX = {read = get_GridX, write = set_GridX};
  __property   float           GridY = {read = get_GridY, write = set_GridY};
  __property   BSTR            Accelerator = {read = get_Accelerator, write = set_Accelerator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef IPageDispT<IPage> IPageDisp;

typedef TComInterface<Pages>  TCOMPages;

// *********************************************************************//
// DispIntf:  Pages
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {92E11A03-7358-11CE-80CB-00AA00611080}
// *********************************************************************//
template<class T>
class PagesDispT : public TAutoDriver<Pages>
{
public:
  PagesDispT(){}

  PagesDispT(Pages *pintf)
  {
    TAutoDriver<Pages>::Bind(pintf, false);
  }

  PagesDispT(PagesPtr pintf)
  {
    TAutoDriver<Pages>::Bind(pintf, true);
  }

  PagesDispT& operator=(Pages *pintf)
  {
    TAutoDriver<Pages>::Bind(pintf, false);
    return *this;
  }

  PagesDispT& operator=(PagesPtr pintf)
  {
    TAutoDriver<Pages>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* plCount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT varg/*[in]*/, 
                                             LPDISPATCH* ppDisap/*[out,retval]*/);
  LPDISPATCH      __fastcall Item(VARIANT varg/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Enum(LPUNKNOWN* ppEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall Enum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(VARIANT bstrName/*[in,opt]*/, 
                                            VARIANT bstrCaption/*[in,opt]*/, 
                                            VARIANT lIndex/*[in,opt]*/, 
                                            Msforms_97::Page** ppPage/*[out,retval]*/);
  Msforms_97::Page* __fastcall Add(VARIANT bstrName/*[in,opt]*/= TNoParam(), 
                                   VARIANT bstrCaption/*[in,opt]*/= TNoParam(), 
                                   VARIANT lIndex/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _AddCtrl(long* clsid/*[in]*/, BSTR bstrName/*[in]*/, 
                                                 BSTR bstrCaption/*[in]*/, 
                                                 Msforms_97::Page** ppPage/*[out,retval]*/);
  Msforms_97::Page* __fastcall _AddCtrl(long* clsid/*[in]*/, BSTR bstrName/*[in]*/, 
                                        BSTR bstrCaption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _InsertCtrl(long* clsid/*[in]*/, BSTR bstrName/*[in]*/, 
                                                    BSTR bstrCaption/*[in]*/, long lIndex/*[in]*/, 
                                                    Msforms_97::Page** ppCtrl/*[out,retval]*/);
  Msforms_97::Page* __fastcall _InsertCtrl(long* clsid/*[in]*/, BSTR bstrName/*[in]*/, 
                                           BSTR bstrCaption/*[in]*/, long lIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetItemByIndex(long lIndex/*[in]*/, 
                                                        Msforms_97::Control** ppCtrl/*[out,retval]*/);
  Msforms_97::Control* __fastcall _GetItemByIndex(long lIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetItemByName(BSTR pstrName/*[in]*/, 
                                                       Msforms_97::Control** ppCtrl/*[out,retval]*/);
  Msforms_97::Control* __fastcall _GetItemByName(BSTR pstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(VARIANT varg/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef PagesDispT<Pages> PagesDisp;

// *********************************************************************//
// SmartIntf: TCOMIMultiPage
// Interface: IMultiPage
// *********************************************************************//
template <class T /* IMultiPage */ >
class TCOMIMultiPageT : public TComInterface<IMultiPage>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMultiPageT() {}
  TCOMIMultiPageT(IMultiPage *intf, bool addRef = false) : TComInterface<IMultiPage>(intf, addRef) {}
  TCOMIMultiPageT(const TCOMIMultiPageT& src) : TComInterface<IMultiPage>(src) {}
  TCOMIMultiPageT& operator=(const TCOMIMultiPageT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_BackColor(Msforms_97::OLE_COLOR color/*[in]*/);
  HRESULT         __fastcall get_BackColor(Msforms_97::OLE_COLOR* color/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT         __fastcall set_ForeColor(Msforms_97::OLE_COLOR color/*[in]*/);
  HRESULT         __fastcall get_ForeColor(Msforms_97::OLE_COLOR* color/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT         __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT         __fastcall set__Font_Reserved(IFontDisp* Param1/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp* Font/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Font/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT         __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT         __fastcall set_FontBold(VARIANT_BOOL fBold/*[in]*/);
  HRESULT         __fastcall set_FontBold(TOLEBOOL fBold/*[in]*/);
  HRESULT         __fastcall get_FontBold(VARIANT_BOOL* fBold/*[out,retval]*/);
  HRESULT         __fastcall get_FontBold(TOLEBOOL* fBold/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontBold(void);
  HRESULT         __fastcall set_FontItalic(VARIANT_BOOL fItalic/*[in]*/);
  HRESULT         __fastcall set_FontItalic(TOLEBOOL fItalic/*[in]*/);
  HRESULT         __fastcall get_FontItalic(VARIANT_BOOL* fItalic/*[out,retval]*/);
  HRESULT         __fastcall get_FontItalic(TOLEBOOL* fItalic/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT         __fastcall set_FontUnderline(VARIANT_BOOL fUnder/*[in]*/);
  HRESULT         __fastcall set_FontUnderline(TOLEBOOL fUnder/*[in]*/);
  HRESULT         __fastcall get_FontUnderline(VARIANT_BOOL* fUnder/*[out,retval]*/);
  HRESULT         __fastcall get_FontUnderline(TOLEBOOL* fUnder/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT         __fastcall set_FontStrikethru(VARIANT_BOOL fStrike/*[in]*/);
  HRESULT         __fastcall set_FontStrikethru(TOLEBOOL fStrike/*[in]*/);
  HRESULT         __fastcall get_FontStrikethru(VARIANT_BOOL* fStrike/*[out,retval]*/);
  HRESULT         __fastcall get_FontStrikethru(TOLEBOOL* fStrike/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontStrikethru(void);
  HRESULT         __fastcall set_FontSize(CURRENCY Size/*[in]*/);
  HRESULT         __fastcall get_FontSize(CURRENCY* Size/*[out,retval]*/);
  CURRENCY        __fastcall get_FontSize(void);
  HRESULT         __fastcall set_MultiRow(VARIANT_BOOL fMultiRow/*[in]*/);
  HRESULT         __fastcall set_MultiRow(TOLEBOOL fMultiRow/*[in]*/);
  HRESULT         __fastcall get_MultiRow(VARIANT_BOOL* fMultiRow/*[out,retval]*/);
  HRESULT         __fastcall get_MultiRow(TOLEBOOL* fMultiRow/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MultiRow(void);
  HRESULT         __fastcall set_Style(Msforms_97::fmTabStyle Style/*[in]*/);
  HRESULT         __fastcall get_Style(Msforms_97::fmTabStyle* Style/*[out,retval]*/);
  Msforms_97::fmTabStyle __fastcall get_Style(void);
  HRESULT         __fastcall set_TabOrientation(Msforms_97::fmTabOrientation Layout/*[in]*/);
  HRESULT         __fastcall get_TabOrientation(Msforms_97::fmTabOrientation* Layout/*[out,retval]*/);
  Msforms_97::fmTabOrientation __fastcall get_TabOrientation(void);
  HRESULT         __fastcall _SetTabFixedWidth(long Width/*[in]*/);
  HRESULT         __fastcall _GetTabFixedWidth(long* Width/*[out]*/);
  HRESULT         __fastcall _SetTabFixedHeight(long Height/*[in]*/);
  HRESULT         __fastcall _GetTabFixedHeight(long* Height/*[out]*/);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL Enabled/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* Enabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall get_SelectedItem(Msforms_97::Page** ppPage/*[out,retval]*/);
  HRESULT         __fastcall get_SelectedItem(Msforms_97::PagePtr* ppPage/*[out,retval]*/);
  Msforms_97::PagePtr __fastcall get_SelectedItem(void);
  HRESULT         __fastcall get_Pages(Msforms_97::Pages** ppPages/*[out,retval]*/);
  HRESULT         __fastcall get_Pages(Msforms_97::PagesPtr* ppPages/*[out,retval]*/);
  Msforms_97::PagesPtr __fastcall get_Pages(void);
  HRESULT         __fastcall set_Value(long Index/*[in]*/);
  HRESULT         __fastcall get_Value(long* Index/*[out,retval]*/);
  long            __fastcall get_Value(void);
  HRESULT         __fastcall set_TabFixedWidth(float Width/*[in]*/);
  HRESULT         __fastcall get_TabFixedWidth(float* Width/*[out,retval]*/);
  float           __fastcall get_TabFixedWidth(void);
  HRESULT         __fastcall set_TabFixedHeight(float Height/*[in]*/);
  HRESULT         __fastcall get_TabFixedHeight(float* Height/*[out,retval]*/);
  float           __fastcall get_TabFixedHeight(void);
  HRESULT         __fastcall set_FontWeight(short FontWeight/*[in]*/);
  HRESULT         __fastcall get_FontWeight(short* FontWeight/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);

  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   IFontDisp*      _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp*      Font = {write = _set_Font};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   TOLEBOOL        FontBold = {write = set_FontBold};
  __property   TOLEBOOL        FontItalic = {write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {write = set_FontUnderline};
  __property   TOLEBOOL        FontStrikethru = {write = set_FontStrikethru};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   TOLEBOOL        MultiRow = {write = set_MultiRow};
  __property   Msforms_97::fmTabStyle Style = {read = get_Style, write = set_Style};
  __property   Msforms_97::fmTabOrientation TabOrientation = {read = get_TabOrientation, write = set_TabOrientation};
  __property   TOLEBOOL        Enabled = {write = set_Enabled};
  __property   Msforms_97::PagePtr SelectedItem = {read = get_SelectedItem};
  __property   Msforms_97::PagesPtr Pages = {read = get_Pages};
  __property   long            Value = {read = get_Value, write = set_Value};
  __property   float           TabFixedWidth = {read = get_TabFixedWidth, write = set_TabFixedWidth};
  __property   float           TabFixedHeight = {read = get_TabFixedHeight, write = set_TabFixedHeight};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
};
typedef TCOMIMultiPageT<IMultiPage> TCOMIMultiPage;

// *********************************************************************//
// DispIntf:  IMultiPage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04598FC9-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
template<class T>
class IMultiPageDispT : public TAutoDriver<IMultiPage>
{
public:
  IMultiPageDispT(){}

  IMultiPageDispT(IMultiPage *pintf)
  {
    TAutoDriver<IMultiPage>::Bind(pintf, false);
  }

  IMultiPageDispT(IMultiPagePtr pintf)
  {
    TAutoDriver<IMultiPage>::Bind(pintf, true);
  }

  IMultiPageDispT& operator=(IMultiPage *pintf)
  {
    TAutoDriver<IMultiPage>::Bind(pintf, false);
    return *this;
  }

  IMultiPageDispT& operator=(IMultiPagePtr pintf)
  {
    TAutoDriver<IMultiPage>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MultiPage));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MultiPage);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Msforms_97::OLE_COLOR color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Msforms_97::OLE_COLOR* color/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Msforms_97::OLE_COLOR color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Msforms_97::OLE_COLOR* color/*[out,retval]*/);
  Msforms_97::OLE_COLOR __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__Font_Reserved(IFontDisp** Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Font(IFontDisp** Font/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(IFontDisp*** Font/*[out,retval]*/);
  IFontDisp**     __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(VARIANT_BOOL fBold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(VARIANT_BOOL* fBold/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(VARIANT_BOOL fItalic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(VARIANT_BOOL* fItalic/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontUnderline(VARIANT_BOOL fUnder/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontUnderline(VARIANT_BOOL* fUnder/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontUnderline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontStrikethru(VARIANT_BOOL fStrike/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontStrikethru(VARIANT_BOOL* fStrike/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FontStrikethru(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(CURRENCY Size/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(CURRENCY* Size/*[out,retval]*/);
  CURRENCY        __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MultiRow(VARIANT_BOOL fMultiRow/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MultiRow(VARIANT_BOOL* fMultiRow/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MultiRow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Msforms_97::fmTabStyle Style/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Msforms_97::fmTabStyle* Style/*[out,retval]*/);
  Msforms_97::fmTabStyle __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabOrientation(Msforms_97::fmTabOrientation Layout/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabOrientation(Msforms_97::fmTabOrientation* Layout/*[out,retval]*/);
  Msforms_97::fmTabOrientation __fastcall get_TabOrientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetTabFixedWidth(long Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetTabFixedWidth(long* Width/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _SetTabFixedHeight(long Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _GetTabFixedHeight(long* Height/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectedItem(Msforms_97::Page** ppPage/*[out,retval]*/);
  Msforms_97::Page* __fastcall get_SelectedItem(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Pages(Msforms_97::Pages** ppPages/*[out,retval]*/);
  Msforms_97::Pages* __fastcall get_Pages(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(long* Index/*[out,retval]*/);
  long            __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabFixedWidth(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabFixedWidth(float* Width/*[out,retval]*/);
  float           __fastcall get_TabFixedWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabFixedHeight(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabFixedHeight(float* Height/*[out,retval]*/);
  float           __fastcall get_TabFixedHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontWeight(short FontWeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontWeight(short* FontWeight/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);

  __property   Msforms_97::OLE_COLOR BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Msforms_97::OLE_COLOR ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   IFontDisp**     _Font_Reserved = {write = set__Font_Reserved};
  __property   IFontDisp**     Font = {read = get_Font, write = _set_Font};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   VARIANT_BOOL    FontBold = {read = get_FontBold, write = set_FontBold};
  __property   VARIANT_BOOL    FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   VARIANT_BOOL    FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   VARIANT_BOOL    FontStrikethru = {read = get_FontStrikethru, write = set_FontStrikethru};
  __property   CURRENCY        FontSize = {read = get_FontSize, write = set_FontSize};
  __property   VARIANT_BOOL    MultiRow = {read = get_MultiRow, write = set_MultiRow};
  __property   Msforms_97::fmTabStyle Style = {read = get_Style, write = set_Style};
  __property   Msforms_97::fmTabOrientation TabOrientation = {read = get_TabOrientation, write = set_TabOrientation};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   Msforms_97::Page* SelectedItem = {read = get_SelectedItem};
  __property   Msforms_97::Pages* Pages = {read = get_Pages};
  __property   long            Value = {read = get_Value, write = set_Value};
  __property   float           TabFixedWidth = {read = get_TabFixedWidth, write = set_TabFixedWidth};
  __property   float           TabFixedHeight = {read = get_TabFixedHeight, write = set_TabFixedHeight};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
};
typedef IMultiPageDispT<IMultiPage> IMultiPageDisp;

// *********************************************************************//
// DispIntf:  MultiPageEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {7B020EC8-AF6C-11CE-9F46-00AA00574A4F}
// *********************************************************************//
template <class T>
class MultiPageEventsDispT : public TAutoDriver<MultiPageEvents>
{
public:
  MultiPageEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall AddControl(long Index/*[in]*/, 
                                             Msforms_97::Control* Control/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeDragOver(long Index/*[in]*/, 
                                                 Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::Control* Control/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::fmDragState State/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeDropOrPaste(long Index/*[in]*/, 
                                                    Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                    Msforms_97::Control* Control/*[in]*/, 
                                                    Msforms_97::fmAction Action/*[in]*/, 
                                                    Msforms_97::DataObject* Data/*[in]*/, 
                                                    float X/*[in]*/, float Y/*[in]*/, 
                                                    Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                    short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Change();
  void /*[VT_VOID:0]*/ __fastcall Click(long Index/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall DblClick(long Index/*[in]*/, 
                                           Msforms_97::ReturnBoolean* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Error(long Index/*[in]*/, short Number/*[in]*/, 
                                        Msforms_97::ReturnString* Description/*[in]*/, 
                                        long SCode/*[in]*/, BSTR Source/*[in]*/, 
                                        BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/, 
                                        Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                          short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                        short Shift/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Layout(long Index/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseDown(long Index/*[in]*/, short Button/*[in]*/, 
                                            short Shift/*[in]*/, float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(long Index/*[in]*/, short Button/*[in]*/, 
                                            short Shift/*[in]*/, float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(long Index/*[in]*/, short Button/*[in]*/, 
                                          short Shift/*[in]*/, float X/*[in]*/, float Y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall RemoveControl(long Index/*[in]*/, 
                                                Msforms_97::Control* Control/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Scroll(long Index/*[in]*/, 
                                         Msforms_97::fmScrollAction ActionX/*[in]*/, 
                                         Msforms_97::fmScrollAction ActionY/*[in]*/, 
                                         float RequestDx/*[in]*/, float RequestDy/*[in]*/, 
                                         Msforms_97::ReturnSingle* ActualDx/*[in]*/, 
                                         Msforms_97::ReturnSingle* ActualDy/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Zoom(long Index/*[in]*/, short* Percent/*[in,out]*/);

};
typedef MultiPageEventsDispT<MultiPageEvents> MultiPageEventsDisp;

// *********************************************************************//
// DispIntf:  Font
// Flags:     (4096) Dispatchable
// GUID:      {BEF6E003-A874-101A-8BBA-00AA00300CAB}
// *********************************************************************//
template <class T> void __fastcall
FontDispT<T>::set_Name(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
FontDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
FontDispT<T>::set_Size(CURRENCY /*[VT_CY:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> CURRENCY /*[VT_CY:0]*/ __fastcall
FontDispT<T>::get_Size()
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(2));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
FontDispT<T>::set_Bold(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
FontDispT<T>::get_Bold()
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(3));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
FontDispT<T>::set_Italic(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Italic"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
FontDispT<T>::get_Italic()
{
  _TDispID _dispid(*this, OLETEXT("Italic"), DISPID(4));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
FontDispT<T>::set_Underline(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Underline"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
FontDispT<T>::get_Underline()
{
  _TDispID _dispid(*this, OLETEXT("Underline"), DISPID(5));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
FontDispT<T>::set_Strikethrough(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Strikethrough"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
FontDispT<T>::get_Strikethrough()
{
  _TDispID _dispid(*this, OLETEXT("Strikethrough"), DISPID(6));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
FontDispT<T>::set_Weight(short /*[VT_I2:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> short /*[VT_I2:0]*/ __fastcall
FontDispT<T>::get_Weight()
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(7));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
FontDispT<T>::set_Charset(short /*[VT_I2:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Charset"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> short /*[VT_I2:0]*/ __fastcall
FontDispT<T>::get_Charset()
{
  _TDispID _dispid(*this, OLETEXT("Charset"), DISPID(8));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// SmartIntf: TCOMIDataAutoWrapper
// Interface: IDataAutoWrapper
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIDataAutoWrapperT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMIDataAutoWrapperT<T>::GetFormat(VARIANT Format/*[in]*/, VARIANT_BOOL* Support/*[out,retval]*/)
{
  return (*this)->GetFormat(Format, Support);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIDataAutoWrapperT<T>::GetFormat(VARIANT Format/*[in]*/)
{
  VARIANT_BOOL Support;
  OLECHECK(this->GetFormat(, (VARIANT_BOOL*)&Support));
  return Support;
}

template <class T> HRESULT __fastcall
TCOMIDataAutoWrapperT<T>::GetText(VARIANT Format/*[in,opt]*/, BSTR* Text/*[out,retval]*/)
{
  return (*this)->GetText(Format, Text);
}

template <class T> BSTR __fastcall
TCOMIDataAutoWrapperT<T>::GetText(VARIANT Format/*[in,opt]*/)
{
  BSTR Text = 0;
  OLECHECK(this->GetText(, (BSTR*)&Text));
  return Text;
}

template <class T> HRESULT __fastcall
TCOMIDataAutoWrapperT<T>::SetText(BSTR Text/*[in]*/, VARIANT Format/*[in,opt]*/)
{
  return (*this)->SetText(Text, Format);
}

template <class T> HRESULT __fastcall
TCOMIDataAutoWrapperT<T>::PutInClipboard(void)
{
  return (*this)->PutInClipboard();
}

template <class T> HRESULT __fastcall
TCOMIDataAutoWrapperT<T>::GetFromClipboard(void)
{
  return (*this)->GetFromClipboard();
}

template <class T> HRESULT __fastcall
TCOMIDataAutoWrapperT<T>::StartDrag(VARIANT OKEffect/*[in,opt]*/, 
                                    Msforms_97::fmDropEffect* Effect/*[out,retval]*/)
{
  return (*this)->StartDrag(OKEffect, Effect);
}

template <class T> Msforms_97::fmDropEffect __fastcall
TCOMIDataAutoWrapperT<T>::StartDrag(VARIANT OKEffect/*[in,opt]*/)
{
  Msforms_97::fmDropEffect Effect;
  OLECHECK(this->StartDrag(, (Msforms_97::fmDropEffect*)&Effect));
  return Effect;
}

// *********************************************************************//
// DispIntf:  IDataAutoWrapper
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EC72F590-F375-11CE-B9E8-00AA006B1A69}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataAutoWrapperDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataAutoWrapperDispT<T>::GetFormat(VARIANT Format/*[in]*/, VARIANT_BOOL* Support/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetFormat"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<1> _args;
  _args[1] = Format /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(Support /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IDataAutoWrapperDispT<T>::GetFormat(VARIANT Format/*[in]*/)
{
  VARIANT_BOOL Support;
  this->GetFormat(Format, (VARIANT_BOOL*)&Support);
  return Support;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataAutoWrapperDispT<T>::GetText(VARIANT Format/*[in,opt]*/, BSTR* Text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetText"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = Format /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(Text /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IDataAutoWrapperDispT<T>::GetText(VARIANT Format/*[in,opt]*/)
{
  BSTR Text;
  this->GetText(Format, (BSTR*)&Text);
  return Text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataAutoWrapperDispT<T>::SetText(BSTR Text/*[in]*/, VARIANT Format/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetText"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<2> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Format /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataAutoWrapperDispT<T>::PutInClipboard()
{
  _TDispID _dispid(*this, OLETEXT("PutInClipboard"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataAutoWrapperDispT<T>::GetFromClipboard()
{
  _TDispID _dispid(*this, OLETEXT("GetFromClipboard"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataAutoWrapperDispT<T>::StartDrag(VARIANT OKEffect/*[in,opt]*/, 
                                    Msforms_97::fmDropEffect* Effect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDrag"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<1> _args;
  _args[1] = OKEffect /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((int*)Effect /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msforms_97::fmDropEffect __fastcall
IDataAutoWrapperDispT<T>::StartDrag(VARIANT OKEffect/*[in,opt]*/)
{
  Msforms_97::fmDropEffect Effect;
  this->StartDrag(OKEffect, (Msforms_97::fmDropEffect*)&Effect);
  return Effect;
}

// *********************************************************************//
// SmartIntf: TCOMIReturnInteger
// Interface: IReturnInteger
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIReturnIntegerT<T>::set_Value(int Value/*[in]*/)
{
  return (*this)->set_Value(Value);
}

template <class T> HRESULT __fastcall
TCOMIReturnIntegerT<T>::get_Value(int* Value/*[out,retval]*/)
{
  return (*this)->get_Value(Value);
}

template <class T> int __fastcall
TCOMIReturnIntegerT<T>::get_Value(void)
{
  int Value;
  OLECHECK(this->get_Value((int*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  IReturnInteger
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {82B02370-B5BC-11CF-810F-00A0C9030074}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IReturnIntegerDispT<T>::set_Value(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IReturnIntegerDispT<T>::get_Value(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IReturnIntegerDispT<T>::get_Value(void)
{
  int Value;
  this->get_Value((int*)&Value);
  return Value;
}

// *********************************************************************//
// SmartIntf: TCOMIReturnBoolean
// Interface: IReturnBoolean
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIReturnBooleanT<T>::set_Value(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Value(Value);
}

template <class T> HRESULT __fastcall
TCOMIReturnBooleanT<T>::set_Value(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_Value(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIReturnBooleanT<T>::get_Value(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Value(Value);
}

template <class T> HRESULT __fastcall
TCOMIReturnBooleanT<T>::get_Value(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Value(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIReturnBooleanT<T>::get_Value(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Value((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

// *********************************************************************//
// DispIntf:  IReturnBoolean
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {82B02371-B5BC-11CF-810F-00A0C9030074}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IReturnBooleanDispT<T>::set_Value(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IReturnBooleanDispT<T>::get_Value(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IReturnBooleanDispT<T>::get_Value(void)
{
  VARIANT_BOOL Value;
  this->get_Value((VARIANT_BOOL*)&Value);
  return Value;
}

// *********************************************************************//
// SmartIntf: TCOMIReturnString
// Interface: IReturnString
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIReturnStringT<T>::set_Value(BSTR Value/*[in]*/)
{
  return (*this)->set_Value(Value);
}

template <class T> HRESULT __fastcall
TCOMIReturnStringT<T>::get_Value(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Value(Value);
}

template <class T> BSTR __fastcall
TCOMIReturnStringT<T>::get_Value(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Value((BSTR*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  IReturnString
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {82B02372-B5BC-11CF-810F-00A0C9030074}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IReturnStringDispT<T>::set_Value(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IReturnStringDispT<T>::get_Value(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IReturnStringDispT<T>::get_Value(void)
{
  BSTR Value;
  this->get_Value((BSTR*)&Value);
  return Value;
}

// *********************************************************************//
// SmartIntf: TCOMIReturnSingle
// Interface: IReturnSingle
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIReturnSingleT<T>::set_Value(float Value/*[in]*/)
{
  return (*this)->set_Value(Value);
}

template <class T> HRESULT __fastcall
TCOMIReturnSingleT<T>::get_Value(float* Value/*[out,retval]*/)
{
  return (*this)->get_Value(Value);
}

template <class T> float __fastcall
TCOMIReturnSingleT<T>::get_Value(void)
{
  float Value;
  OLECHECK(this->get_Value((float*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  IReturnSingle
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8A683C90-BA84-11CF-8110-00A0C9030074}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IReturnSingleDispT<T>::set_Value(float Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IReturnSingleDispT<T>::get_Value(float* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IReturnSingleDispT<T>::get_Value(void)
{
  float Value;
  this->get_Value((float*)&Value);
  return Value;
}

// *********************************************************************//
// SmartIntf: TCOMIReturnEffect
// Interface: IReturnEffect
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIReturnEffectT<T>::set_Value(Msforms_97::fmDropEffect Value/*[in]*/)
{
  return (*this)->set_Value(Value);
}

template <class T> HRESULT __fastcall
TCOMIReturnEffectT<T>::get_Value(Msforms_97::fmDropEffect* Value/*[out,retval]*/)
{
  return (*this)->get_Value(Value);
}

template <class T> Msforms_97::fmDropEffect __fastcall
TCOMIReturnEffectT<T>::get_Value(void)
{
  Msforms_97::fmDropEffect Value;
  OLECHECK(this->get_Value((Msforms_97::fmDropEffect*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  IReturnEffect
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8A683C91-BA84-11CF-8110-00A0C9030074}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IReturnEffectDispT<T>::set_Value(Msforms_97::fmDropEffect Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IReturnEffectDispT<T>::get_Value(Msforms_97::fmDropEffect* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmDropEffect __fastcall
IReturnEffectDispT<T>::get_Value(void)
{
  Msforms_97::fmDropEffect Value;
  this->get_Value((Msforms_97::fmDropEffect*)&Value);
  return Value;
}

// *********************************************************************//
// SmartIntf: TCOMIControl
// Interface: IControl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_Cancel(VARIANT_BOOL Cancel/*[in]*/)
{
  return (*this)->set_Cancel(Cancel);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_Cancel(TOLEBOOL Cancel/*[in]*/)
{
  return (*this)->set_Cancel(VARIANT_BOOL)Cancel);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_Cancel(VARIANT_BOOL* Cancel/*[out,retval]*/)
{
  return (*this)->get_Cancel(Cancel);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_Cancel(TOLEBOOL* Cancel/*[out,retval]*/)
{
  return (*this)->get_Cancel(VARIANT_BOOL*)Cancel);
}

template <class T> TOLEBOOL __fastcall
TCOMIControlT<T>::get_Cancel(void)
{
  VARIANT_BOOL Cancel;
  OLECHECK(this->get_Cancel((VARIANT_BOOL*)&Cancel));
  return (TOLEBOOL)Cancel;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_ControlSource(BSTR ControlSource/*[in]*/)
{
  return (*this)->set_ControlSource(ControlSource);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_ControlSource(BSTR* ControlSource/*[out,retval]*/)
{
  return (*this)->get_ControlSource(ControlSource);
}

template <class T> BSTR __fastcall
TCOMIControlT<T>::get_ControlSource(void)
{
  BSTR ControlSource = 0;
  OLECHECK(this->get_ControlSource((BSTR*)&ControlSource));
  return ControlSource;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_ControlTipText(BSTR ControlTipText/*[in]*/)
{
  return (*this)->set_ControlTipText(ControlTipText);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_ControlTipText(BSTR* ControlTipText/*[out,retval]*/)
{
  return (*this)->get_ControlTipText(ControlTipText);
}

template <class T> BSTR __fastcall
TCOMIControlT<T>::get_ControlTipText(void)
{
  BSTR ControlTipText = 0;
  OLECHECK(this->get_ControlTipText((BSTR*)&ControlTipText));
  return ControlTipText;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_Default(VARIANT_BOOL Default/*[in]*/)
{
  return (*this)->set_Default(Default);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_Default(TOLEBOOL Default/*[in]*/)
{
  return (*this)->set_Default(VARIANT_BOOL)Default);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_Default(VARIANT_BOOL* Default/*[out,retval]*/)
{
  return (*this)->get_Default(Default);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_Default(TOLEBOOL* Default/*[out,retval]*/)
{
  return (*this)->get_Default(VARIANT_BOOL*)Default);
}

template <class T> TOLEBOOL __fastcall
TCOMIControlT<T>::get_Default(void)
{
  VARIANT_BOOL Default;
  OLECHECK(this->get_Default((VARIANT_BOOL*)&Default));
  return (TOLEBOOL)Default;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::_SetHeight(long Height/*[in]*/)
{
  return (*this)->_SetHeight(Height);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::_GetHeight(long* Height/*[out]*/)
{
  return (*this)->_GetHeight(Height);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_Height(float Height/*[in]*/)
{
  return (*this)->set_Height(Height);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_Height(float* Height/*[out,retval]*/)
{
  return (*this)->get_Height(Height);
}

template <class T> float __fastcall
TCOMIControlT<T>::get_Height(void)
{
  float Height;
  OLECHECK(this->get_Height((float*)&Height));
  return Height;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_HelpContextID(long HelpContextID/*[in]*/)
{
  return (*this)->set_HelpContextID(HelpContextID);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_HelpContextID(long* HelpContextID/*[out,retval]*/)
{
  return (*this)->get_HelpContextID(HelpContextID);
}

template <class T> long __fastcall
TCOMIControlT<T>::get_HelpContextID(void)
{
  long HelpContextID;
  OLECHECK(this->get_HelpContextID((long*)&HelpContextID));
  return HelpContextID;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_InSelection(VARIANT_BOOL InSelection/*[in]*/)
{
  return (*this)->set_InSelection(InSelection);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_InSelection(TOLEBOOL InSelection/*[in]*/)
{
  return (*this)->set_InSelection(VARIANT_BOOL)InSelection);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_InSelection(VARIANT_BOOL* InSelection/*[out,retval]*/)
{
  return (*this)->get_InSelection(InSelection);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_InSelection(TOLEBOOL* InSelection/*[out,retval]*/)
{
  return (*this)->get_InSelection(VARIANT_BOOL*)InSelection);
}

template <class T> TOLEBOOL __fastcall
TCOMIControlT<T>::get_InSelection(void)
{
  VARIANT_BOOL InSelection;
  OLECHECK(this->get_InSelection((VARIANT_BOOL*)&InSelection));
  return (TOLEBOOL)InSelection;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_LayoutEffect(Msforms_97::fmLayoutEffect* LayoutEffect/*[out,retval]*/)
{
  return (*this)->get_LayoutEffect(LayoutEffect);
}

template <class T> Msforms_97::fmLayoutEffect __fastcall
TCOMIControlT<T>::get_LayoutEffect(void)
{
  Msforms_97::fmLayoutEffect LayoutEffect;
  OLECHECK(this->get_LayoutEffect((Msforms_97::fmLayoutEffect*)&LayoutEffect));
  return LayoutEffect;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::_SetLeft(long Left/*[in]*/)
{
  return (*this)->_SetLeft(Left);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::_GetLeft(long* Left/*[out]*/)
{
  return (*this)->_GetLeft(Left);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_Left(float Left/*[in]*/)
{
  return (*this)->set_Left(Left);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_Left(float* Left/*[out,retval]*/)
{
  return (*this)->get_Left(Left);
}

template <class T> float __fastcall
TCOMIControlT<T>::get_Left(void)
{
  float Left;
  OLECHECK(this->get_Left((float*)&Left));
  return Left;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_Name(BSTR Name/*[in]*/)
{
  return (*this)->set_Name(Name);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  return (*this)->get_Name(Name);
}

template <class T> BSTR __fastcall
TCOMIControlT<T>::get_Name(void)
{
  BSTR Name = 0;
  OLECHECK(this->get_Name((BSTR*)&Name));
  return Name;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::_GetOldHeight(long* OldHeight/*[out]*/)
{
  return (*this)->_GetOldHeight(OldHeight);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_OldHeight(float* OldHeight/*[out,retval]*/)
{
  return (*this)->get_OldHeight(OldHeight);
}

template <class T> float __fastcall
TCOMIControlT<T>::get_OldHeight(void)
{
  float OldHeight;
  OLECHECK(this->get_OldHeight((float*)&OldHeight));
  return OldHeight;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::_GetOldLeft(long* OldLeft/*[out]*/)
{
  return (*this)->_GetOldLeft(OldLeft);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_OldLeft(float* OldLeft/*[out,retval]*/)
{
  return (*this)->get_OldLeft(OldLeft);
}

template <class T> float __fastcall
TCOMIControlT<T>::get_OldLeft(void)
{
  float OldLeft;
  OLECHECK(this->get_OldLeft((float*)&OldLeft));
  return OldLeft;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::_GetOldTop(long* OldTop/*[out]*/)
{
  return (*this)->_GetOldTop(OldTop);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_OldTop(float* OldTop/*[out,retval]*/)
{
  return (*this)->get_OldTop(OldTop);
}

template <class T> float __fastcall
TCOMIControlT<T>::get_OldTop(void)
{
  float OldTop;
  OLECHECK(this->get_OldTop((float*)&OldTop));
  return OldTop;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::_GetOldWidth(long* OldWidth/*[out]*/)
{
  return (*this)->_GetOldWidth(OldWidth);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_OldWidth(float* OldWidth/*[out,retval]*/)
{
  return (*this)->get_OldWidth(OldWidth);
}

template <class T> float __fastcall
TCOMIControlT<T>::get_OldWidth(void)
{
  float OldWidth;
  OLECHECK(this->get_OldWidth((float*)&OldWidth));
  return OldWidth;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_Object(LPDISPATCH* Object/*[out,retval]*/)
{
  return (*this)->get_Object(Object);
}

template <class T> LPDISPATCH __fastcall
TCOMIControlT<T>::get_Object(void)
{
  LPDISPATCH Object;
  OLECHECK(this->get_Object((LPDISPATCH*)&Object));
  return Object;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  return (*this)->get_Parent(Parent);
}

template <class T> LPDISPATCH __fastcall
TCOMIControlT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
  return Parent;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_RowSource(BSTR RowSource/*[in]*/)
{
  return (*this)->set_RowSource(RowSource);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_RowSource(BSTR* RowSource/*[out,retval]*/)
{
  return (*this)->get_RowSource(RowSource);
}

template <class T> BSTR __fastcall
TCOMIControlT<T>::get_RowSource(void)
{
  BSTR RowSource = 0;
  OLECHECK(this->get_RowSource((BSTR*)&RowSource));
  return RowSource;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_RowSourceType(short RowSourceType/*[in]*/)
{
  return (*this)->set_RowSourceType(RowSourceType);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_RowSourceType(short* RowSourceType/*[out,retval]*/)
{
  return (*this)->get_RowSourceType(RowSourceType);
}

template <class T> short __fastcall
TCOMIControlT<T>::get_RowSourceType(void)
{
  short RowSourceType;
  OLECHECK(this->get_RowSourceType((short*)&RowSourceType));
  return RowSourceType;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_TabIndex(short TabIndex/*[in]*/)
{
  return (*this)->set_TabIndex(TabIndex);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_TabIndex(short* TabIndex/*[out,retval]*/)
{
  return (*this)->get_TabIndex(TabIndex);
}

template <class T> short __fastcall
TCOMIControlT<T>::get_TabIndex(void)
{
  short TabIndex;
  OLECHECK(this->get_TabIndex((short*)&TabIndex));
  return TabIndex;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_TabStop(VARIANT_BOOL TabStop/*[in]*/)
{
  return (*this)->set_TabStop(TabStop);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_TabStop(TOLEBOOL TabStop/*[in]*/)
{
  return (*this)->set_TabStop(VARIANT_BOOL)TabStop);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_TabStop(VARIANT_BOOL* TabStop/*[out,retval]*/)
{
  return (*this)->get_TabStop(TabStop);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_TabStop(TOLEBOOL* TabStop/*[out,retval]*/)
{
  return (*this)->get_TabStop(VARIANT_BOOL*)TabStop);
}

template <class T> TOLEBOOL __fastcall
TCOMIControlT<T>::get_TabStop(void)
{
  VARIANT_BOOL TabStop;
  OLECHECK(this->get_TabStop((VARIANT_BOOL*)&TabStop));
  return (TOLEBOOL)TabStop;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_Tag(BSTR Tag/*[in]*/)
{
  return (*this)->set_Tag(Tag);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_Tag(BSTR* Tag/*[out,retval]*/)
{
  return (*this)->get_Tag(Tag);
}

template <class T> BSTR __fastcall
TCOMIControlT<T>::get_Tag(void)
{
  BSTR Tag = 0;
  OLECHECK(this->get_Tag((BSTR*)&Tag));
  return Tag;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::_SetTop(long Top/*[in]*/)
{
  return (*this)->_SetTop(Top);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::_GetTop(long* Top/*[out]*/)
{
  return (*this)->_GetTop(Top);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_Top(float Top/*[in]*/)
{
  return (*this)->set_Top(Top);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_Top(float* Top/*[out,retval]*/)
{
  return (*this)->get_Top(Top);
}

template <class T> float __fastcall
TCOMIControlT<T>::get_Top(void)
{
  float Top;
  OLECHECK(this->get_Top((float*)&Top));
  return Top;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_BoundValue(VARIANT* BoundValue/*[in]*/)
{
  return (*this)->set_BoundValue(BoundValue);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_BoundValue(VARIANT* BoundValue/*[out,retval]*/)
{
  return (*this)->get_BoundValue(BoundValue);
}

template <class T> VARIANT __fastcall
TCOMIControlT<T>::get_BoundValue(void)
{
  VARIANT BoundValue;
  OLECHECK(this->get_BoundValue((VARIANT*)&BoundValue));
  return BoundValue;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_Visible(VARIANT_BOOL Visible/*[in]*/)
{
  return (*this)->set_Visible(Visible);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_Visible(TOLEBOOL Visible/*[in]*/)
{
  return (*this)->set_Visible(VARIANT_BOOL)Visible);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/)
{
  return (*this)->get_Visible(Visible);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_Visible(TOLEBOOL* Visible/*[out,retval]*/)
{
  return (*this)->get_Visible(VARIANT_BOOL*)Visible);
}

template <class T> TOLEBOOL __fastcall
TCOMIControlT<T>::get_Visible(void)
{
  VARIANT_BOOL Visible;
  OLECHECK(this->get_Visible((VARIANT_BOOL*)&Visible));
  return (TOLEBOOL)Visible;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::_SetWidth(long Width/*[in]*/)
{
  return (*this)->_SetWidth(Width);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::_GetWidth(long* Width/*[out]*/)
{
  return (*this)->_GetWidth(Width);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::set_Width(float Width/*[in]*/)
{
  return (*this)->set_Width(Width);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::get_Width(float* Width/*[out,retval]*/)
{
  return (*this)->get_Width(Width);
}

template <class T> float __fastcall
TCOMIControlT<T>::get_Width(void)
{
  float Width;
  OLECHECK(this->get_Width((float*)&Width));
  return Width;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::Move(VARIANT Left/*[in,opt]*/, VARIANT Top/*[in,opt]*/, VARIANT Width/*[in,opt]*/, 
                       VARIANT Height/*[in,opt]*/, VARIANT Layout/*[in,opt]*/)
{
  return (*this)->Move(Left, Top, Width, Height, Layout);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::ZOrder(VARIANT zPosition/*[in,opt]*/)
{
  return (*this)->ZOrder(zPosition);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::Select(VARIANT_BOOL SelectInGroup/*[in]*/)
{
  return (*this)->Select(SelectInGroup);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::SetFocus(void)
{
  return (*this)->SetFocus();
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::_GethWnd(int* hWnd/*[out,retval]*/)
{
  return (*this)->_GethWnd(hWnd);
}

template <class T> int __fastcall
TCOMIControlT<T>::_GethWnd(void)
{
  int hWnd;
  OLECHECK(this->_GethWnd((int*)&hWnd));
  return hWnd;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::_GetID(long* ID/*[out,retval]*/)
{
  return (*this)->_GetID(ID);
}

template <class T> long __fastcall
TCOMIControlT<T>::_GetID(void)
{
  long ID;
  OLECHECK(this->_GetID((long*)&ID));
  return ID;
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::_Move(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, long Height/*[in]*/)
{
  return (*this)->_Move(Left, Top, Width, Height);
}

template <class T> HRESULT __fastcall
TCOMIControlT<T>::_ZOrder(Msforms_97::fmZOrder zPosition/*[in]*/)
{
  return (*this)->_ZOrder(zPosition);
}

// *********************************************************************//
// DispIntf:  IControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {04598FC6-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::set_Cancel(VARIANT_BOOL Cancel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cancel"), DISPID(-2147418056));
  TAutoArgs<1> _args;
  _args[1] = Cancel /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_Cancel(VARIANT_BOOL* Cancel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cancel"), DISPID(-2147418056));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Cancel /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IControlDispT<T>::get_Cancel(void)
{
  VARIANT_BOOL Cancel;
  this->get_Cancel((VARIANT_BOOL*)&Cancel);
  return Cancel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::set_ControlSource(BSTR ControlSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(-2147385343));
  TAutoArgs<1> _args;
  _args[1] = ControlSource /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_ControlSource(BSTR* ControlSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(-2147385343));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ControlSource /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IControlDispT<T>::get_ControlSource(void)
{
  BSTR ControlSource;
  this->get_ControlSource((BSTR*)&ControlSource);
  return ControlSource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::set_ControlTipText(BSTR ControlTipText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(-2147418043));
  TAutoArgs<1> _args;
  _args[1] = ControlTipText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_ControlTipText(BSTR* ControlTipText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(-2147418043));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ControlTipText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IControlDispT<T>::get_ControlTipText(void)
{
  BSTR ControlTipText;
  this->get_ControlTipText((BSTR*)&ControlTipText);
  return ControlTipText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::set_Default(VARIANT_BOOL Default/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Default"), DISPID(-2147418057));
  TAutoArgs<1> _args;
  _args[1] = Default /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_Default(VARIANT_BOOL* Default/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Default"), DISPID(-2147418057));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Default /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IControlDispT<T>::get_Default(void)
{
  VARIANT_BOOL Default;
  this->get_Default((VARIANT_BOOL*)&Default);
  return Default;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::_SetHeight(long Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetHeight"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::_GetHeight(long* Height/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetHeight"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(-2147418106));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(-2147418106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IControlDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::set_HelpContextID(long HelpContextID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextID"), DISPID(-2147418062));
  TAutoArgs<1> _args;
  _args[1] = HelpContextID /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_HelpContextID(long* HelpContextID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextID"), DISPID(-2147418062));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpContextID /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IControlDispT<T>::get_HelpContextID(void)
{
  long HelpContextID;
  this->get_HelpContextID((long*)&HelpContextID);
  return HelpContextID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::set_InSelection(VARIANT_BOOL InSelection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(-2147385341));
  TAutoArgs<1> _args;
  _args[1] = InSelection /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_InSelection(VARIANT_BOOL* InSelection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(-2147385341));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(InSelection /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IControlDispT<T>::get_InSelection(void)
{
  VARIANT_BOOL InSelection;
  this->get_InSelection((VARIANT_BOOL*)&InSelection);
  return InSelection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_LayoutEffect(Msforms_97::fmLayoutEffect* LayoutEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LayoutEffect"), DISPID(-2147385340));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LayoutEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmLayoutEffect __fastcall
IControlDispT<T>::get_LayoutEffect(void)
{
  Msforms_97::fmLayoutEffect LayoutEffect;
  this->get_LayoutEffect((Msforms_97::fmLayoutEffect*)&LayoutEffect);
  return LayoutEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::_SetLeft(long Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetLeft"), DISPID(DISPID_UNKNOWN/*[1610743825]*/));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::_GetLeft(long* Left/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetLeft"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(-2147418109));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(-2147418109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IControlDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(-2147418112));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(-2147418112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IControlDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::_GetOldHeight(long* OldHeight/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetOldHeight"), DISPID(DISPID_UNKNOWN/*[1610743831]*/));
  TAutoArgs<1> _args;
  _args[1] = OldHeight /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_OldHeight(float* OldHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldHeight"), DISPID(-2147385339));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OldHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IControlDispT<T>::get_OldHeight(void)
{
  float OldHeight;
  this->get_OldHeight((float*)&OldHeight);
  return OldHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::_GetOldLeft(long* OldLeft/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetOldLeft"), DISPID(DISPID_UNKNOWN/*[1610743833]*/));
  TAutoArgs<1> _args;
  _args[1] = OldLeft /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_OldLeft(float* OldLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldLeft"), DISPID(-2147385338));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OldLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IControlDispT<T>::get_OldLeft(void)
{
  float OldLeft;
  this->get_OldLeft((float*)&OldLeft);
  return OldLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::_GetOldTop(long* OldTop/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetOldTop"), DISPID(DISPID_UNKNOWN/*[1610743835]*/));
  TAutoArgs<1> _args;
  _args[1] = OldTop /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_OldTop(float* OldTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldTop"), DISPID(-2147385337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OldTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IControlDispT<T>::get_OldTop(void)
{
  float OldTop;
  this->get_OldTop((float*)&OldTop);
  return OldTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::_GetOldWidth(long* OldWidth/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetOldWidth"), DISPID(DISPID_UNKNOWN/*[1610743837]*/));
  TAutoArgs<1> _args;
  _args[1] = OldWidth /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_OldWidth(float* OldWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldWidth"), DISPID(-2147385336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OldWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IControlDispT<T>::get_OldWidth(void)
{
  float OldWidth;
  this->get_OldWidth((float*)&OldWidth);
  return OldWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_Object(LPDISPATCH* Object/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Object"), DISPID(-2147385335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Object /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IControlDispT<T>::get_Object(void)
{
  LPDISPATCH Object;
  this->get_Object((LPDISPATCH*)&Object);
  return Object;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IControlDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::set_RowSource(BSTR RowSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowSource"), DISPID(-2147385330));
  TAutoArgs<1> _args;
  _args[1] = RowSource /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_RowSource(BSTR* RowSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowSource"), DISPID(-2147385330));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RowSource /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IControlDispT<T>::get_RowSource(void)
{
  BSTR RowSource;
  this->get_RowSource((BSTR*)&RowSource);
  return RowSource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::set_RowSourceType(short RowSourceType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowSourceType"), DISPID(-2147385329));
  TAutoArgs<1> _args;
  _args[1] = RowSourceType /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_RowSourceType(short* RowSourceType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowSourceType"), DISPID(-2147385329));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RowSourceType /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IControlDispT<T>::get_RowSourceType(void)
{
  short RowSourceType;
  this->get_RowSourceType((short*)&RowSourceType);
  return RowSourceType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::set_TabIndex(short TabIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(-2147418097));
  TAutoArgs<1> _args;
  _args[1] = TabIndex /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_TabIndex(short* TabIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(-2147418097));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TabIndex /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IControlDispT<T>::get_TabIndex(void)
{
  short TabIndex;
  this->get_TabIndex((short*)&TabIndex);
  return TabIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::set_TabStop(VARIANT_BOOL TabStop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(-2147418098));
  TAutoArgs<1> _args;
  _args[1] = TabStop /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_TabStop(VARIANT_BOOL* TabStop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(-2147418098));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TabStop /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IControlDispT<T>::get_TabStop(void)
{
  VARIANT_BOOL TabStop;
  this->get_TabStop((VARIANT_BOOL*)&TabStop);
  return TabStop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::set_Tag(BSTR Tag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(-2147418101));
  TAutoArgs<1> _args;
  _args[1] = Tag /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_Tag(BSTR* Tag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(-2147418101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Tag /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IControlDispT<T>::get_Tag(void)
{
  BSTR Tag;
  this->get_Tag((BSTR*)&Tag);
  return Tag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::_SetTop(long Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetTop"), DISPID(DISPID_UNKNOWN/*[1610743851]*/));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::_GetTop(long* Top/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetTop"), DISPID(DISPID_UNKNOWN/*[1610743852]*/));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(-2147418108));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(-2147418108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IControlDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::set_BoundValue(VARIANT* BoundValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BoundValue"), DISPID(-2147385328));
  TAutoArgs<1> _args;
  _args[1] = BoundValue /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_BoundValue(VARIANT* BoundValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BoundValue"), DISPID(-2147385328));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BoundValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IControlDispT<T>::get_BoundValue(void)
{
  VARIANT BoundValue;
  this->get_BoundValue((VARIANT*)&BoundValue);
  return BoundValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::set_Visible(VARIANT_BOOL Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(-2147418105));
  TAutoArgs<1> _args;
  _args[1] = Visible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(-2147418105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Visible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IControlDispT<T>::get_Visible(void)
{
  VARIANT_BOOL Visible;
  this->get_Visible((VARIANT_BOOL*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::_SetWidth(long Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetWidth"), DISPID(DISPID_UNKNOWN/*[1610743859]*/));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::_GetWidth(long* Width/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetWidth"), DISPID(DISPID_UNKNOWN/*[1610743860]*/));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(-2147418107));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(-2147418107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IControlDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::Move(VARIANT Left/*[in,opt]*/, VARIANT Top/*[in,opt]*/, VARIANT Width/*[in,opt]*/
                       , VARIANT Height/*[in,opt]*/, VARIANT Layout/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(-2147385088));
  TAutoArgs<5> _args;
  _args[1] = Left /*[VT_VARIANT:0]*/;
  _args[2] = Top /*[VT_VARIANT:0]*/;
  _args[3] = Width /*[VT_VARIANT:0]*/;
  _args[4] = Height /*[VT_VARIANT:0]*/;
  _args[5] = Layout /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::ZOrder(VARIANT zPosition/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrder"), DISPID(-2147385083));
  TAutoArgs<1> _args;
  _args[1] = zPosition /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::Select(VARIANT_BOOL SelectInGroup/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(-2147385086));
  TAutoArgs<1> _args;
  _args[1] = SelectInGroup /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(-2147385085));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::_GethWnd(int* hWnd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GethWnd"), DISPID(DISPID_UNKNOWN/*[1610743867]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hWnd /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IControlDispT<T>::_GethWnd(void)
{
  int hWnd;
  this->_GethWnd((int*)&hWnd);
  return hWnd;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::_GetID(long* ID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetID"), DISPID(DISPID_UNKNOWN/*[1610743868]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ID /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IControlDispT<T>::_GetID(void)
{
  long ID;
  this->_GetID((long*)&ID);
  return ID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::_Move(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, long Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Move"), DISPID(DISPID_UNKNOWN/*[1610743869]*/));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_I4:0]*/;
  _args[2] = Top /*[VT_I4:0]*/;
  _args[3] = Width /*[VT_I4:0]*/;
  _args[4] = Height /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlDispT<T>::_ZOrder(Msforms_97::fmZOrder zPosition/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_ZOrder"), DISPID(DISPID_UNKNOWN/*[1610743870]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)zPosition /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Controls
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {04598FC7-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(60));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
Controls_DispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
Controls_DispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::Item(VARIANT varg/*[in]*/, LPDISPATCH* ppDispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = varg /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppDispatch /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
Controls_DispT<T>::Item(VARIANT varg/*[in]*/)
{
  LPDISPATCH ppDispatch;
  this->Item(varg, (LPDISPATCH*)&ppDispatch);
  return ppDispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(62));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::_Move(long cx/*[in]*/, long cy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Move"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<2> _args;
  _args[1] = cx /*[VT_I4:0]*/;
  _args[2] = cy /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::SelectAll()
{
  _TDispID _dispid(*this, OLETEXT("SelectAll"), DISPID(65));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::_AddByClass(long* clsid/*[in]*/, Msforms_97::Control** Control/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_AddByClass"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<1> _args;
  _args[1] = clsid /*[VT_I4:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Control**)Control /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msforms_97::Control* __fastcall
Controls_DispT<T>::_AddByClass(long* clsid/*[in]*/)
{
  Msforms_97::Control* Control;
  this->_AddByClass(clsid, (Msforms_97::Control**)&Control);
  return Control;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::AlignToGrid()
{
  _TDispID _dispid(*this, OLETEXT("AlignToGrid"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::BringForward()
{
  _TDispID _dispid(*this, OLETEXT("BringForward"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::BringToFront()
{
  _TDispID _dispid(*this, OLETEXT("BringToFront"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::Copy()
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::Cut()
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::Enum(LPUNKNOWN* ppEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enum"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppEnum /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
Controls_DispT<T>::Enum(void)
{
  LPUNKNOWN ppEnum;
  this->Enum((LPUNKNOWN*)&ppEnum);
  return ppEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::_GetItemByIndex(long lIndex/*[in]*/, 
                                   Msforms_97::Control** Control/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetItemByIndex"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<1> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Control**)Control /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msforms_97::Control* __fastcall
Controls_DispT<T>::_GetItemByIndex(long lIndex/*[in]*/)
{
  Msforms_97::Control* Control;
  this->_GetItemByIndex(lIndex, (Msforms_97::Control**)&Control);
  return Control;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::_GetItemByName(BSTR pstr/*[in]*/, Msforms_97::Control** Control/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetItemByName"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<1> _args;
  _args[1] = pstr /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Control**)Control /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msforms_97::Control* __fastcall
Controls_DispT<T>::_GetItemByName(BSTR pstr/*[in]*/)
{
  Msforms_97::Control* Control;
  this->_GetItemByName(pstr, (Msforms_97::Control**)&Control);
  return Control;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::_GetItemByID(long ID/*[in]*/, Msforms_97::Control** Control/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetItemByID"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<1> _args;
  _args[1] = ID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Control**)Control /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msforms_97::Control* __fastcall
Controls_DispT<T>::_GetItemByID(long ID/*[in]*/)
{
  Msforms_97::Control* Control;
  this->_GetItemByID(ID, (Msforms_97::Control**)&Control);
  return Control;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::SendBackward()
{
  _TDispID _dispid(*this, OLETEXT("SendBackward"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::SendToBack()
{
  _TDispID _dispid(*this, OLETEXT("SendToBack"), DISPID(DISPID_UNKNOWN/*[1610743825]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::Move(float cx/*[in]*/, float cy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(63));
  TAutoArgs<2> _args;
  _args[1] = cx /*[VT_R4:0]*/;
  _args[2] = cy /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::Add(BSTR bstrProgID/*[in]*/, VARIANT Name/*[in,opt]*/, 
                       VARIANT Visible/*[in,opt]*/, Msforms_97::Control** Control/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(66));
  TAutoArgs<3> _args;
  _args[1] = bstrProgID /*[VT_BSTR:0]*/;
  _args[2] = Name /*[VT_VARIANT:0]*/;
  _args[3] = Visible /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Control**)Control /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msforms_97::Control* __fastcall
Controls_DispT<T>::Add(BSTR bstrProgID/*[in]*/, VARIANT Name/*[in,opt]*/, 
                       VARIANT Visible/*[in,opt]*/)
{
  Msforms_97::Control* Control;
  this->Add(bstrProgID, Name, Visible, (Msforms_97::Control**)&Control);
  return Control;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::Remove(VARIANT varg/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(67));
  TAutoArgs<1> _args;
  _args[1] = varg /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIOptionFrame
// Interface: IOptionFrame
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_ActiveControl(Msforms_97::Control** ActiveControl/*[out,retval]*/)
{
  return (*this)->get_ActiveControl(ActiveControl);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_ActiveControl(Msforms_97::ControlPtr* ActiveControl/*[out,retval]*/)
{
  return (*this)->get_ActiveControl(Control**)ActiveControl);
}

template <class T> Msforms_97::ControlPtr __fastcall
TCOMIOptionFrameT<T>::get_ActiveControl(void)
{
  Msforms_97::Control* ActiveControl;
  OLECHECK(this->get_ActiveControl((Msforms_97::Control**)&ActiveControl));
  return (Msforms_97::ControlPtr)ActiveControl;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  return (*this)->set_BackColor(BackColor);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  return (*this)->get_BackColor(BackColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIOptionFrameT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
  return BackColor;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/)
{
  return (*this)->set_BorderColor(BorderColor);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/)
{
  return (*this)->get_BorderColor(BorderColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIOptionFrameT<T>::get_BorderColor(void)
{
  Msforms_97::OLE_COLOR BorderColor;
  OLECHECK(this->get_BorderColor((Msforms_97::OLE_COLOR*)&BorderColor));
  return BorderColor;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/)
{
  return (*this)->set_BorderStyle(BorderStyle);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(BorderStyle);
}

template <class T> Msforms_97::fmBorderStyle __fastcall
TCOMIOptionFrameT<T>::get_BorderStyle(void)
{
  Msforms_97::fmBorderStyle BorderStyle;
  OLECHECK(this->get_BorderStyle((Msforms_97::fmBorderStyle*)&BorderStyle));
  return BorderStyle;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/)
{
  return (*this)->get_CanPaste(CanPaste);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_CanPaste(TOLEBOOL* CanPaste/*[out,retval]*/)
{
  return (*this)->get_CanPaste(VARIANT_BOOL*)CanPaste);
}

template <class T> TOLEBOOL __fastcall
TCOMIOptionFrameT<T>::get_CanPaste(void)
{
  VARIANT_BOOL CanPaste;
  OLECHECK(this->get_CanPaste((VARIANT_BOOL*)&CanPaste));
  return (TOLEBOOL)CanPaste;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_CanRedo(VARIANT_BOOL* CanRedo/*[out,retval]*/)
{
  return (*this)->get_CanRedo(CanRedo);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_CanRedo(TOLEBOOL* CanRedo/*[out,retval]*/)
{
  return (*this)->get_CanRedo(VARIANT_BOOL*)CanRedo);
}

template <class T> TOLEBOOL __fastcall
TCOMIOptionFrameT<T>::get_CanRedo(void)
{
  VARIANT_BOOL CanRedo;
  OLECHECK(this->get_CanRedo((VARIANT_BOOL*)&CanRedo));
  return (TOLEBOOL)CanRedo;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_CanUndo(VARIANT_BOOL* CanUndo/*[out,retval]*/)
{
  return (*this)->get_CanUndo(CanUndo);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_CanUndo(TOLEBOOL* CanUndo/*[out,retval]*/)
{
  return (*this)->get_CanUndo(VARIANT_BOOL*)CanUndo);
}

template <class T> TOLEBOOL __fastcall
TCOMIOptionFrameT<T>::get_CanUndo(void)
{
  VARIANT_BOOL CanUndo;
  OLECHECK(this->get_CanUndo((VARIANT_BOOL*)&CanUndo));
  return (TOLEBOOL)CanUndo;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  return (*this)->set_Caption(Caption);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  return (*this)->get_Caption(Caption);
}

template <class T> BSTR __fastcall
TCOMIOptionFrameT<T>::get_Caption(void)
{
  BSTR Caption = 0;
  OLECHECK(this->get_Caption((BSTR*)&Caption));
  return Caption;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_Controls(Msforms_97::Controls_** Controls/*[out,retval]*/)
{
  return (*this)->get_Controls(Controls);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_Controls(Msforms_97::Controls_Ptr* Controls/*[out,retval]*/)
{
  return (*this)->get_Controls(Controls_**)Controls);
}

template <class T> Msforms_97::Controls_Ptr __fastcall
TCOMIOptionFrameT<T>::get_Controls(void)
{
  Msforms_97::Controls_* Controls;
  OLECHECK(this->get_Controls((Msforms_97::Controls_**)&Controls));
  return (Msforms_97::Controls_Ptr)Controls;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_Cycle(Msforms_97::fmCycle Cycle/*[in]*/)
{
  return (*this)->set_Cycle(Cycle);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_Cycle(Msforms_97::fmCycle* Cycle/*[out,retval]*/)
{
  return (*this)->get_Cycle(Cycle);
}

template <class T> Msforms_97::fmCycle __fastcall
TCOMIOptionFrameT<T>::get_Cycle(void)
{
  Msforms_97::fmCycle Cycle;
  OLECHECK(this->get_Cycle((Msforms_97::fmCycle*)&Cycle));
  return Cycle;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  return (*this)->set_Enabled(Enabled);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_Enabled(TOLEBOOL Enabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)Enabled);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(Enabled);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_Enabled(TOLEBOOL* Enabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)Enabled);
}

template <class T> TOLEBOOL __fastcall
TCOMIOptionFrameT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Enabled));
  return (TOLEBOOL)Enabled;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  return (*this)->set__Font_Reserved(Param1);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set__Font_Reserved(IFontDisp* Param1/*[in]*/)
{
  return (*this)->set__Font_Reserved(IFontDisp**)Param1);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  return (*this)->_set_Font(Font);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_set_Font(IFontDisp* Font/*[in]*/)
{
  return (*this)->_set_Font(IFontDisp**)Font);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  return (*this)->get_Font(Font);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_Font(IFontDisp** Font/*[out,retval]*/)
{
  return (*this)->get_Font(IFontDisp***)Font);
}

template <class T> IFontDisp* __fastcall
TCOMIOptionFrameT<T>::get_Font(void)
{
  IFontDisp** Font;
  OLECHECK(this->get_Font((IFontDisp***)&Font));
  return (IFontDisp*)Font;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  return (*this)->set_ForeColor(ForeColor);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  return (*this)->get_ForeColor(ForeColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIOptionFrameT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
  return ForeColor;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_GetInsideHeight(long* InsideHeight/*[out]*/)
{
  return (*this)->_GetInsideHeight(InsideHeight);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_InsideHeight(float* InsideHeight/*[out,retval]*/)
{
  return (*this)->get_InsideHeight(InsideHeight);
}

template <class T> float __fastcall
TCOMIOptionFrameT<T>::get_InsideHeight(void)
{
  float InsideHeight;
  OLECHECK(this->get_InsideHeight((float*)&InsideHeight));
  return InsideHeight;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_GetInsideWidth(long* InsideWidth/*[out]*/)
{
  return (*this)->_GetInsideWidth(InsideWidth);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_InsideWidth(float* InsideWidth/*[out,retval]*/)
{
  return (*this)->get_InsideWidth(InsideWidth);
}

template <class T> float __fastcall
TCOMIOptionFrameT<T>::get_InsideWidth(void)
{
  float InsideWidth;
  OLECHECK(this->get_InsideWidth((float*)&InsideWidth));
  return InsideWidth;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_KeepScrollBarsVisible(Msforms_97::fmScrollBars ScrollBars/*[in]*/)
{
  return (*this)->set_KeepScrollBarsVisible(ScrollBars);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_KeepScrollBarsVisible(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/)
{
  return (*this)->get_KeepScrollBarsVisible(ScrollBars);
}

template <class T> Msforms_97::fmScrollBars __fastcall
TCOMIOptionFrameT<T>::get_KeepScrollBarsVisible(void)
{
  Msforms_97::fmScrollBars ScrollBars;
  OLECHECK(this->get_KeepScrollBarsVisible((Msforms_97::fmScrollBars*)&ScrollBars));
  return ScrollBars;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(IPictureDisp***)MouseIcon);
}

template <class T> IPictureDisp* __fastcall
TCOMIOptionFrameT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
  return (IPictureDisp*)MouseIcon;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  return (*this)->set_MousePointer(MousePointer);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  return (*this)->get_MousePointer(MousePointer);
}

template <class T> Msforms_97::fmMousePointer __fastcall
TCOMIOptionFrameT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
  return MousePointer;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_PictureAlignment(Msforms_97::fmPictureAlignment PictureAlignment/*[in]*/)
{
  return (*this)->set_PictureAlignment(PictureAlignment);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_PictureAlignment(Msforms_97::fmPictureAlignment* PictureAlignment/*[out,retval]*/)
{
  return (*this)->get_PictureAlignment(PictureAlignment);
}

template <class T> Msforms_97::fmPictureAlignment __fastcall
TCOMIOptionFrameT<T>::get_PictureAlignment(void)
{
  Msforms_97::fmPictureAlignment PictureAlignment;
  OLECHECK(this->get_PictureAlignment((Msforms_97::fmPictureAlignment*)&PictureAlignment));
  return PictureAlignment;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_Picture(IPictureDisp** Picture/*[in]*/)
{
  return (*this)->set_Picture(Picture);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_Picture(IPictureDisp* Picture/*[in]*/)
{
  return (*this)->set_Picture(IPictureDisp**)Picture);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_set_Picture(IPictureDisp** Picture/*[in]*/)
{
  return (*this)->_set_Picture(Picture);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_set_Picture(IPictureDisp* Picture/*[in]*/)
{
  return (*this)->_set_Picture(IPictureDisp**)Picture);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_Picture(IPictureDisp*** Picture/*[out,retval]*/)
{
  return (*this)->get_Picture(Picture);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_Picture(IPictureDisp** Picture/*[out,retval]*/)
{
  return (*this)->get_Picture(IPictureDisp***)Picture);
}

template <class T> IPictureDisp* __fastcall
TCOMIOptionFrameT<T>::get_Picture(void)
{
  IPictureDisp** Picture;
  OLECHECK(this->get_Picture((IPictureDisp***)&Picture));
  return (IPictureDisp*)Picture;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_PictureSizeMode(Msforms_97::fmPictureSizeMode PictureSizeMode/*[in]*/)
{
  return (*this)->set_PictureSizeMode(PictureSizeMode);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_PictureSizeMode(Msforms_97::fmPictureSizeMode* PictureSizeMode/*[out,retval]*/)
{
  return (*this)->get_PictureSizeMode(PictureSizeMode);
}

template <class T> Msforms_97::fmPictureSizeMode __fastcall
TCOMIOptionFrameT<T>::get_PictureSizeMode(void)
{
  Msforms_97::fmPictureSizeMode PictureSizeMode;
  OLECHECK(this->get_PictureSizeMode((Msforms_97::fmPictureSizeMode*)&PictureSizeMode));
  return PictureSizeMode;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_PictureTiling(VARIANT_BOOL PictureTiling/*[in]*/)
{
  return (*this)->set_PictureTiling(PictureTiling);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_PictureTiling(TOLEBOOL PictureTiling/*[in]*/)
{
  return (*this)->set_PictureTiling(VARIANT_BOOL)PictureTiling);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_PictureTiling(VARIANT_BOOL* PictureTiling/*[out,retval]*/)
{
  return (*this)->get_PictureTiling(PictureTiling);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_PictureTiling(TOLEBOOL* PictureTiling/*[out,retval]*/)
{
  return (*this)->get_PictureTiling(VARIANT_BOOL*)PictureTiling);
}

template <class T> TOLEBOOL __fastcall
TCOMIOptionFrameT<T>::get_PictureTiling(void)
{
  VARIANT_BOOL PictureTiling;
  OLECHECK(this->get_PictureTiling((VARIANT_BOOL*)&PictureTiling));
  return (TOLEBOOL)PictureTiling;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_ScrollBars(Msforms_97::fmScrollBars ScrollBars/*[in]*/)
{
  return (*this)->set_ScrollBars(ScrollBars);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_ScrollBars(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/)
{
  return (*this)->get_ScrollBars(ScrollBars);
}

template <class T> Msforms_97::fmScrollBars __fastcall
TCOMIOptionFrameT<T>::get_ScrollBars(void)
{
  Msforms_97::fmScrollBars ScrollBars;
  OLECHECK(this->get_ScrollBars((Msforms_97::fmScrollBars*)&ScrollBars));
  return ScrollBars;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_SetScrollHeight(long ScrollHeight/*[in]*/)
{
  return (*this)->_SetScrollHeight(ScrollHeight);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_GetScrollHeight(long* ScrollHeight/*[out]*/)
{
  return (*this)->_GetScrollHeight(ScrollHeight);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_ScrollHeight(float ScrollHeight/*[in]*/)
{
  return (*this)->set_ScrollHeight(ScrollHeight);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_ScrollHeight(float* ScrollHeight/*[out,retval]*/)
{
  return (*this)->get_ScrollHeight(ScrollHeight);
}

template <class T> float __fastcall
TCOMIOptionFrameT<T>::get_ScrollHeight(void)
{
  float ScrollHeight;
  OLECHECK(this->get_ScrollHeight((float*)&ScrollHeight));
  return ScrollHeight;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_SetScrollLeft(long ScrollLeft/*[in]*/)
{
  return (*this)->_SetScrollLeft(ScrollLeft);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_GetScrollLeft(long* ScrollLeft/*[out]*/)
{
  return (*this)->_GetScrollLeft(ScrollLeft);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_ScrollLeft(float ScrollLeft/*[in]*/)
{
  return (*this)->set_ScrollLeft(ScrollLeft);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_ScrollLeft(float* ScrollLeft/*[out,retval]*/)
{
  return (*this)->get_ScrollLeft(ScrollLeft);
}

template <class T> float __fastcall
TCOMIOptionFrameT<T>::get_ScrollLeft(void)
{
  float ScrollLeft;
  OLECHECK(this->get_ScrollLeft((float*)&ScrollLeft));
  return ScrollLeft;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_SetScrollTop(long ScrollTop/*[in]*/)
{
  return (*this)->_SetScrollTop(ScrollTop);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_GetScrollTop(long* ScrollTop/*[out]*/)
{
  return (*this)->_GetScrollTop(ScrollTop);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_ScrollTop(float ScrollTop/*[in]*/)
{
  return (*this)->set_ScrollTop(ScrollTop);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_ScrollTop(float* ScrollTop/*[out,retval]*/)
{
  return (*this)->get_ScrollTop(ScrollTop);
}

template <class T> float __fastcall
TCOMIOptionFrameT<T>::get_ScrollTop(void)
{
  float ScrollTop;
  OLECHECK(this->get_ScrollTop((float*)&ScrollTop));
  return ScrollTop;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_SetScrollWidth(long ScrollWidth/*[in]*/)
{
  return (*this)->_SetScrollWidth(ScrollWidth);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_GetScrollWidth(long* ScrollWidth/*[out]*/)
{
  return (*this)->_GetScrollWidth(ScrollWidth);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_ScrollWidth(float ScrollWidth/*[in]*/)
{
  return (*this)->set_ScrollWidth(ScrollWidth);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_ScrollWidth(float* ScrollWidth/*[out,retval]*/)
{
  return (*this)->get_ScrollWidth(ScrollWidth);
}

template <class T> float __fastcall
TCOMIOptionFrameT<T>::get_ScrollWidth(void)
{
  float ScrollWidth;
  OLECHECK(this->get_ScrollWidth((float*)&ScrollWidth));
  return ScrollWidth;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_Selected(Msforms_97::Controls_** Selected/*[out,retval]*/)
{
  return (*this)->get_Selected(Selected);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_Selected(Msforms_97::Controls_Ptr* Selected/*[out,retval]*/)
{
  return (*this)->get_Selected(Controls_**)Selected);
}

template <class T> Msforms_97::Controls_Ptr __fastcall
TCOMIOptionFrameT<T>::get_Selected(void)
{
  Msforms_97::Controls_* Selected;
  OLECHECK(this->get_Selected((Msforms_97::Controls_**)&Selected));
  return (Msforms_97::Controls_Ptr)Selected;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/)
{
  return (*this)->set_SpecialEffect(SpecialEffect);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(SpecialEffect);
}

template <class T> Msforms_97::fmSpecialEffect __fastcall
TCOMIOptionFrameT<T>::get_SpecialEffect(void)
{
  Msforms_97::fmSpecialEffect SpecialEffect;
  OLECHECK(this->get_SpecialEffect((Msforms_97::fmSpecialEffect*)&SpecialEffect));
  return SpecialEffect;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide side/*[in]*/)
{
  return (*this)->set_VerticalScrollBarSide(side);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide* side/*[out,retval]*/)
{
  return (*this)->get_VerticalScrollBarSide(side);
}

template <class T> Msforms_97::fmVerticalScrollBarSide __fastcall
TCOMIOptionFrameT<T>::get_VerticalScrollBarSide(void)
{
  Msforms_97::fmVerticalScrollBarSide side;
  OLECHECK(this->get_VerticalScrollBarSide((Msforms_97::fmVerticalScrollBarSide*)&side));
  return side;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_Zoom(short Zoom/*[in]*/)
{
  return (*this)->set_Zoom(Zoom);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_Zoom(short* Zoom/*[out,retval]*/)
{
  return (*this)->get_Zoom(Zoom);
}

template <class T> short __fastcall
TCOMIOptionFrameT<T>::get_Zoom(void)
{
  short Zoom;
  OLECHECK(this->get_Zoom((short*)&Zoom));
  return Zoom;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::Copy(void)
{
  return (*this)->Copy();
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::Cut(void)
{
  return (*this)->Cut();
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::Paste(void)
{
  return (*this)->Paste();
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::RedoAction(void)
{
  return (*this)->RedoAction();
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::Repaint(void)
{
  return (*this)->Repaint();
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::Scroll(VARIANT xAction/*[in,opt]*/, VARIANT yAction/*[in,opt]*/)
{
  return (*this)->Scroll(xAction, yAction);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::SetDefaultTabOrder(void)
{
  return (*this)->SetDefaultTabOrder();
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::UndoAction(void)
{
  return (*this)->UndoAction();
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_DesignMode(Msforms_97::fmMode DesignMode/*[in]*/)
{
  return (*this)->set_DesignMode(DesignMode);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_DesignMode(Msforms_97::fmMode* DesignMode/*[out,retval]*/)
{
  return (*this)->get_DesignMode(DesignMode);
}

template <class T> Msforms_97::fmMode __fastcall
TCOMIOptionFrameT<T>::get_DesignMode(void)
{
  Msforms_97::fmMode DesignMode;
  OLECHECK(this->get_DesignMode((Msforms_97::fmMode*)&DesignMode));
  return DesignMode;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_ShowToolbox(Msforms_97::fmMode ShowToolbox/*[in]*/)
{
  return (*this)->set_ShowToolbox(ShowToolbox);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_ShowToolbox(Msforms_97::fmMode* ShowToolbox/*[out,retval]*/)
{
  return (*this)->get_ShowToolbox(ShowToolbox);
}

template <class T> Msforms_97::fmMode __fastcall
TCOMIOptionFrameT<T>::get_ShowToolbox(void)
{
  Msforms_97::fmMode ShowToolbox;
  OLECHECK(this->get_ShowToolbox((Msforms_97::fmMode*)&ShowToolbox));
  return ShowToolbox;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_ShowGridDots(Msforms_97::fmMode ShowGridDots/*[in]*/)
{
  return (*this)->set_ShowGridDots(ShowGridDots);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_ShowGridDots(Msforms_97::fmMode* ShowGridDots/*[out,retval]*/)
{
  return (*this)->get_ShowGridDots(ShowGridDots);
}

template <class T> Msforms_97::fmMode __fastcall
TCOMIOptionFrameT<T>::get_ShowGridDots(void)
{
  Msforms_97::fmMode ShowGridDots;
  OLECHECK(this->get_ShowGridDots((Msforms_97::fmMode*)&ShowGridDots));
  return ShowGridDots;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_SnapToGrid(Msforms_97::fmMode SnapToGrid/*[in]*/)
{
  return (*this)->set_SnapToGrid(SnapToGrid);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_SnapToGrid(Msforms_97::fmMode* SnapToGrid/*[out,retval]*/)
{
  return (*this)->get_SnapToGrid(SnapToGrid);
}

template <class T> Msforms_97::fmMode __fastcall
TCOMIOptionFrameT<T>::get_SnapToGrid(void)
{
  Msforms_97::fmMode SnapToGrid;
  OLECHECK(this->get_SnapToGrid((Msforms_97::fmMode*)&SnapToGrid));
  return SnapToGrid;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_GridX(float GridX/*[in]*/)
{
  return (*this)->set_GridX(GridX);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_GridX(float* GridX/*[out,retval]*/)
{
  return (*this)->get_GridX(GridX);
}

template <class T> float __fastcall
TCOMIOptionFrameT<T>::get_GridX(void)
{
  float GridX;
  OLECHECK(this->get_GridX((float*)&GridX));
  return GridX;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_SetGridX(long GridX/*[in]*/)
{
  return (*this)->_SetGridX(GridX);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_GetGridX(long* GridX/*[out]*/)
{
  return (*this)->_GetGridX(GridX);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::set_GridY(float GridY/*[in]*/)
{
  return (*this)->set_GridY(GridY);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::get_GridY(float* GridY/*[out,retval]*/)
{
  return (*this)->get_GridY(GridY);
}

template <class T> float __fastcall
TCOMIOptionFrameT<T>::get_GridY(void)
{
  float GridY;
  OLECHECK(this->get_GridY((float*)&GridY));
  return GridY;
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_SetGridY(long GridY/*[in]*/)
{
  return (*this)->_SetGridY(GridY);
}

template <class T> HRESULT __fastcall
TCOMIOptionFrameT<T>::_GetGridY(long* GridY/*[out]*/)
{
  return (*this)->_GetGridY(GridY);
}

// *********************************************************************//
// DispIntf:  IOptionFrame
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {29B86A70-F52E-11CE-9BCE-00AA00608E01}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_ActiveControl(Msforms_97::Control** ActiveControl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveControl"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Control**)ActiveControl /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::Control* __fastcall
IOptionFrameDispT<T>::get_ActiveControl(void)
{
  Msforms_97::Control* ActiveControl;
  this->get_ActiveControl((Msforms_97::Control**)&ActiveControl);
  return ActiveControl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IOptionFrameDispT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(-503));
  TAutoArgs<1> _args;
  _args[1] = BorderColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(-503));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BorderColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IOptionFrameDispT<T>::get_BorderColor(void)
{
  Msforms_97::OLE_COLOR BorderColor;
  this->get_BorderColor((Msforms_97::OLE_COLOR*)&BorderColor);
  return BorderColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<1> _args;
  _args[1] = (int)BorderStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BorderStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmBorderStyle __fastcall
IOptionFrameDispT<T>::get_BorderStyle(void)
{
  Msforms_97::fmBorderStyle BorderStyle;
  this->get_BorderStyle((Msforms_97::fmBorderStyle*)&BorderStyle);
  return BorderStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanPaste"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CanPaste /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IOptionFrameDispT<T>::get_CanPaste(void)
{
  VARIANT_BOOL CanPaste;
  this->get_CanPaste((VARIANT_BOOL*)&CanPaste);
  return CanPaste;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_CanRedo(VARIANT_BOOL* CanRedo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanRedo"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CanRedo /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IOptionFrameDispT<T>::get_CanRedo(void)
{
  VARIANT_BOOL CanRedo;
  this->get_CanRedo((VARIANT_BOOL*)&CanRedo);
  return CanRedo;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_CanUndo(VARIANT_BOOL* CanUndo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanUndo"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CanUndo /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IOptionFrameDispT<T>::get_CanUndo(void)
{
  VARIANT_BOOL CanUndo;
  this->get_CanUndo((VARIANT_BOOL*)&CanUndo);
  return CanUndo;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOptionFrameDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_Controls(Msforms_97::Controls_** Controls/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Controls_**)Controls /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::Controls_* __fastcall
IOptionFrameDispT<T>::get_Controls(void)
{
  Msforms_97::Controls_* Controls;
  this->get_Controls((Msforms_97::Controls_**)&Controls);
  return Controls;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_Cycle(Msforms_97::fmCycle Cycle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cycle"), DISPID(260));
  TAutoArgs<1> _args;
  _args[1] = (int)Cycle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_Cycle(Msforms_97::fmCycle* Cycle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cycle"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Cycle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmCycle __fastcall
IOptionFrameDispT<T>::get_Cycle(void)
{
  Msforms_97::fmCycle Cycle;
  this->get_Cycle((Msforms_97::fmCycle*)&Cycle);
  return Cycle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Enabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IOptionFrameDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  this->get_Enabled((VARIANT_BOOL*)&Enabled);
  return Enabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Font_Reserved"), DISPID(2147483135));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Param1 /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Font /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp***)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp** __fastcall
IOptionFrameDispT<T>::get_Font(void)
{
  IFontDisp** Font;
  this->get_Font((IFontDisp***)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<1> _args;
  _args[1] = ForeColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ForeColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IOptionFrameDispT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::_GetInsideHeight(long* InsideHeight/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetInsideHeight"), DISPID(DISPID_UNKNOWN/*[1610743830]*/));
  TAutoArgs<1> _args;
  _args[1] = InsideHeight /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_InsideHeight(float* InsideHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsideHeight"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(InsideHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IOptionFrameDispT<T>::get_InsideHeight(void)
{
  float InsideHeight;
  this->get_InsideHeight((float*)&InsideHeight);
  return InsideHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::_GetInsideWidth(long* InsideWidth/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetInsideWidth"), DISPID(DISPID_UNKNOWN/*[1610743832]*/));
  TAutoArgs<1> _args;
  _args[1] = InsideWidth /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_InsideWidth(float* InsideWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsideWidth"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(InsideWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IOptionFrameDispT<T>::get_InsideWidth(void)
{
  float InsideWidth;
  this->get_InsideWidth((float*)&InsideWidth);
  return InsideWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_KeepScrollBarsVisible(Msforms_97::fmScrollBars ScrollBars/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeepScrollBarsVisible"), DISPID(264));
  TAutoArgs<1> _args;
  _args[1] = (int)ScrollBars /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_KeepScrollBarsVisible(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeepScrollBarsVisible"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ScrollBars /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmScrollBars __fastcall
IOptionFrameDispT<T>::get_KeepScrollBarsVisible(void)
{
  Msforms_97::fmScrollBars ScrollBars;
  this->get_KeepScrollBarsVisible((Msforms_97::fmScrollBars*)&ScrollBars);
  return ScrollBars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)MouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
IOptionFrameDispT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  this->get_MouseIcon((IPictureDisp***)&MouseIcon);
  return MouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<1> _args;
  _args[1] = (int)MousePointer /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MousePointer /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMousePointer __fastcall
IOptionFrameDispT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer);
  return MousePointer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_PictureAlignment(Msforms_97::fmPictureAlignment PictureAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureAlignment"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = (int)PictureAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_PictureAlignment(Msforms_97::fmPictureAlignment* PictureAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureAlignment"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PictureAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmPictureAlignment __fastcall
IOptionFrameDispT<T>::get_PictureAlignment(void)
{
  Msforms_97::fmPictureAlignment PictureAlignment;
  this->get_PictureAlignment((Msforms_97::fmPictureAlignment*)&PictureAlignment);
  return PictureAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_Picture(IPictureDisp** Picture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)Picture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::_set_Picture(IPictureDisp** Picture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)Picture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_Picture(IPictureDisp*** Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)Picture /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
IOptionFrameDispT<T>::get_Picture(void)
{
  IPictureDisp** Picture;
  this->get_Picture((IPictureDisp***)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_PictureSizeMode(Msforms_97::fmPictureSizeMode PictureSizeMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureSizeMode"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = (int)PictureSizeMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_PictureSizeMode(Msforms_97::fmPictureSizeMode* PictureSizeMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureSizeMode"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PictureSizeMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmPictureSizeMode __fastcall
IOptionFrameDispT<T>::get_PictureSizeMode(void)
{
  Msforms_97::fmPictureSizeMode PictureSizeMode;
  this->get_PictureSizeMode((Msforms_97::fmPictureSizeMode*)&PictureSizeMode);
  return PictureSizeMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_PictureTiling(VARIANT_BOOL PictureTiling/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureTiling"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = PictureTiling /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_PictureTiling(VARIANT_BOOL* PictureTiling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureTiling"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PictureTiling /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IOptionFrameDispT<T>::get_PictureTiling(void)
{
  VARIANT_BOOL PictureTiling;
  this->get_PictureTiling((VARIANT_BOOL*)&PictureTiling);
  return PictureTiling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_ScrollBars(Msforms_97::fmScrollBars ScrollBars/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollBars"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = (int)ScrollBars /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_ScrollBars(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollBars"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ScrollBars /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmScrollBars __fastcall
IOptionFrameDispT<T>::get_ScrollBars(void)
{
  Msforms_97::fmScrollBars ScrollBars;
  this->get_ScrollBars((Msforms_97::fmScrollBars*)&ScrollBars);
  return ScrollBars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::_SetScrollHeight(long ScrollHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetScrollHeight"), DISPID(DISPID_UNKNOWN/*[1610743852]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollHeight /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::_GetScrollHeight(long* ScrollHeight/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetScrollHeight"), DISPID(DISPID_UNKNOWN/*[1610743853]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollHeight /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_ScrollHeight(float ScrollHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollHeight"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = ScrollHeight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_ScrollHeight(float* ScrollHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollHeight"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ScrollHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IOptionFrameDispT<T>::get_ScrollHeight(void)
{
  float ScrollHeight;
  this->get_ScrollHeight((float*)&ScrollHeight);
  return ScrollHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::_SetScrollLeft(long ScrollLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetScrollLeft"), DISPID(DISPID_UNKNOWN/*[1610743856]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollLeft /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::_GetScrollLeft(long* ScrollLeft/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetScrollLeft"), DISPID(DISPID_UNKNOWN/*[1610743857]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollLeft /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_ScrollLeft(float ScrollLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollLeft"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = ScrollLeft /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_ScrollLeft(float* ScrollLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollLeft"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ScrollLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IOptionFrameDispT<T>::get_ScrollLeft(void)
{
  float ScrollLeft;
  this->get_ScrollLeft((float*)&ScrollLeft);
  return ScrollLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::_SetScrollTop(long ScrollTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetScrollTop"), DISPID(DISPID_UNKNOWN/*[1610743860]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollTop /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::_GetScrollTop(long* ScrollTop/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetScrollTop"), DISPID(DISPID_UNKNOWN/*[1610743861]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollTop /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_ScrollTop(float ScrollTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollTop"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = ScrollTop /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_ScrollTop(float* ScrollTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollTop"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ScrollTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IOptionFrameDispT<T>::get_ScrollTop(void)
{
  float ScrollTop;
  this->get_ScrollTop((float*)&ScrollTop);
  return ScrollTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::_SetScrollWidth(long ScrollWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetScrollWidth"), DISPID(DISPID_UNKNOWN/*[1610743864]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollWidth /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::_GetScrollWidth(long* ScrollWidth/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetScrollWidth"), DISPID(DISPID_UNKNOWN/*[1610743865]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollWidth /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_ScrollWidth(float ScrollWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollWidth"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = ScrollWidth /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_ScrollWidth(float* ScrollWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollWidth"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ScrollWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IOptionFrameDispT<T>::get_ScrollWidth(void)
{
  float ScrollWidth;
  this->get_ScrollWidth((float*)&ScrollWidth);
  return ScrollWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_Selected(Msforms_97::Controls_** Selected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(270));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Controls_**)Selected /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::Controls_* __fastcall
IOptionFrameDispT<T>::get_Selected(void)
{
  Msforms_97::Controls_* Selected;
  this->get_Selected((Msforms_97::Controls_**)&Selected);
  return Selected;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)SpecialEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SpecialEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmSpecialEffect __fastcall
IOptionFrameDispT<T>::get_SpecialEffect(void)
{
  Msforms_97::fmSpecialEffect SpecialEffect;
  this->get_SpecialEffect((Msforms_97::fmSpecialEffect*)&SpecialEffect);
  return SpecialEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide side/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalScrollBarSide"), DISPID(271));
  TAutoArgs<1> _args;
  _args[1] = (int)side /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide* side/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalScrollBarSide"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)side /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmVerticalScrollBarSide __fastcall
IOptionFrameDispT<T>::get_VerticalScrollBarSide(void)
{
  Msforms_97::fmVerticalScrollBarSide side;
  this->get_VerticalScrollBarSide((Msforms_97::fmVerticalScrollBarSide*)&side);
  return side;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_Zoom(short Zoom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Zoom"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Zoom /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_Zoom(short* Zoom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Zoom"), DISPID(272));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Zoom /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IOptionFrameDispT<T>::get_Zoom(void)
{
  short Zoom;
  this->get_Zoom((short*)&Zoom);
  return Zoom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::Copy()
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(512));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::Cut()
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(513));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::Paste()
{
  _TDispID _dispid(*this, OLETEXT("Paste"), DISPID(514));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::RedoAction()
{
  _TDispID _dispid(*this, OLETEXT("RedoAction"), DISPID(515));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::Repaint()
{
  _TDispID _dispid(*this, OLETEXT("Repaint"), DISPID(516));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::Scroll(VARIANT xAction/*[in,opt]*/, VARIANT yAction/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scroll"), DISPID(517));
  TAutoArgs<2> _args;
  _args[1] = xAction /*[VT_VARIANT:0]*/;
  _args[2] = yAction /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::SetDefaultTabOrder()
{
  _TDispID _dispid(*this, OLETEXT("SetDefaultTabOrder"), DISPID(518));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::UndoAction()
{
  _TDispID _dispid(*this, OLETEXT("UndoAction"), DISPID(519));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_DesignMode(Msforms_97::fmMode DesignMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesignMode"), DISPID(384));
  TAutoArgs<1> _args;
  _args[1] = (int)DesignMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_DesignMode(Msforms_97::fmMode* DesignMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesignMode"), DISPID(384));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DesignMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMode __fastcall
IOptionFrameDispT<T>::get_DesignMode(void)
{
  Msforms_97::fmMode DesignMode;
  this->get_DesignMode((Msforms_97::fmMode*)&DesignMode);
  return DesignMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_ShowToolbox(Msforms_97::fmMode ShowToolbox/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowToolbox"), DISPID(385));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowToolbox /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_ShowToolbox(Msforms_97::fmMode* ShowToolbox/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowToolbox"), DISPID(385));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowToolbox /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMode __fastcall
IOptionFrameDispT<T>::get_ShowToolbox(void)
{
  Msforms_97::fmMode ShowToolbox;
  this->get_ShowToolbox((Msforms_97::fmMode*)&ShowToolbox);
  return ShowToolbox;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_ShowGridDots(Msforms_97::fmMode ShowGridDots/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowGridDots"), DISPID(386));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowGridDots /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_ShowGridDots(Msforms_97::fmMode* ShowGridDots/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowGridDots"), DISPID(386));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowGridDots /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMode __fastcall
IOptionFrameDispT<T>::get_ShowGridDots(void)
{
  Msforms_97::fmMode ShowGridDots;
  this->get_ShowGridDots((Msforms_97::fmMode*)&ShowGridDots);
  return ShowGridDots;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_SnapToGrid(Msforms_97::fmMode SnapToGrid/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SnapToGrid"), DISPID(387));
  TAutoArgs<1> _args;
  _args[1] = (int)SnapToGrid /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_SnapToGrid(Msforms_97::fmMode* SnapToGrid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SnapToGrid"), DISPID(387));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SnapToGrid /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMode __fastcall
IOptionFrameDispT<T>::get_SnapToGrid(void)
{
  Msforms_97::fmMode SnapToGrid;
  this->get_SnapToGrid((Msforms_97::fmMode*)&SnapToGrid);
  return SnapToGrid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_GridX(float GridX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridX"), DISPID(388));
  TAutoArgs<1> _args;
  _args[1] = GridX /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_GridX(float* GridX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridX"), DISPID(388));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GridX /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IOptionFrameDispT<T>::get_GridX(void)
{
  float GridX;
  this->get_GridX((float*)&GridX);
  return GridX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::_SetGridX(long GridX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetGridX"), DISPID(DISPID_UNKNOWN/*[1610743893]*/));
  TAutoArgs<1> _args;
  _args[1] = GridX /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::_GetGridX(long* GridX/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetGridX"), DISPID(DISPID_UNKNOWN/*[1610743894]*/));
  TAutoArgs<1> _args;
  _args[1] = GridX /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::set_GridY(float GridY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridY"), DISPID(389));
  TAutoArgs<1> _args;
  _args[1] = GridY /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::get_GridY(float* GridY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridY"), DISPID(389));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GridY /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IOptionFrameDispT<T>::get_GridY(void)
{
  float GridY;
  this->get_GridY((float*)&GridY);
  return GridY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::_SetGridY(long GridY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetGridY"), DISPID(DISPID_UNKNOWN/*[1610743897]*/));
  TAutoArgs<1> _args;
  _args[1] = GridY /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOptionFrameDispT<T>::_GetGridY(long* GridY/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetGridY"), DISPID(DISPID_UNKNOWN/*[1610743898]*/));
  TAutoArgs<1> _args;
  _args[1] = GridY /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_UserForm
// Interface: _UserForm
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_UserFormT<T>::set_DrawBuffer(long DrawBuffer/*[in]*/)
{
  return (*this)->set_DrawBuffer(DrawBuffer);
}

template <class T> HRESULT __fastcall
TCOM_UserFormT<T>::get_DrawBuffer(long* DrawBuffer/*[out,retval]*/)
{
  return (*this)->get_DrawBuffer(DrawBuffer);
}

template <class T> long __fastcall
TCOM_UserFormT<T>::get_DrawBuffer(void)
{
  long DrawBuffer;
  OLECHECK(this->get_DrawBuffer((long*)&DrawBuffer));
  return DrawBuffer;
}

// *********************************************************************//
// DispIntf:  _UserForm
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04598FC8-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_DrawBuffer(long DrawBuffer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DrawBuffer"), DISPID(395));
  TAutoArgs<1> _args;
  _args[1] = DrawBuffer /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_DrawBuffer(long* DrawBuffer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DrawBuffer"), DISPID(395));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DrawBuffer /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_UserFormDispT<T>::get_DrawBuffer(void)
{
  long DrawBuffer;
  this->get_DrawBuffer((long*)&DrawBuffer);
  return DrawBuffer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_ActiveControl(Msforms_97::Control** ActiveControl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveControl"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Control**)ActiveControl /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::Control* __fastcall
_UserFormDispT<T>::get_ActiveControl(void)
{
  Msforms_97::Control* ActiveControl;
  this->get_ActiveControl((Msforms_97::Control**)&ActiveControl);
  return ActiveControl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
_UserFormDispT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(-503));
  TAutoArgs<1> _args;
  _args[1] = BorderColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(-503));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BorderColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
_UserFormDispT<T>::get_BorderColor(void)
{
  Msforms_97::OLE_COLOR BorderColor;
  this->get_BorderColor((Msforms_97::OLE_COLOR*)&BorderColor);
  return BorderColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<1> _args;
  _args[1] = (int)BorderStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BorderStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmBorderStyle __fastcall
_UserFormDispT<T>::get_BorderStyle(void)
{
  Msforms_97::fmBorderStyle BorderStyle;
  this->get_BorderStyle((Msforms_97::fmBorderStyle*)&BorderStyle);
  return BorderStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanPaste"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CanPaste /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_UserFormDispT<T>::get_CanPaste(void)
{
  VARIANT_BOOL CanPaste;
  this->get_CanPaste((VARIANT_BOOL*)&CanPaste);
  return CanPaste;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_CanRedo(VARIANT_BOOL* CanRedo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanRedo"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CanRedo /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_UserFormDispT<T>::get_CanRedo(void)
{
  VARIANT_BOOL CanRedo;
  this->get_CanRedo((VARIANT_BOOL*)&CanRedo);
  return CanRedo;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_CanUndo(VARIANT_BOOL* CanUndo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanUndo"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CanUndo /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_UserFormDispT<T>::get_CanUndo(void)
{
  VARIANT_BOOL CanUndo;
  this->get_CanUndo((VARIANT_BOOL*)&CanUndo);
  return CanUndo;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_UserFormDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_Controls(Msforms_97::Controls_** Controls/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Controls_**)Controls /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::Controls_* __fastcall
_UserFormDispT<T>::get_Controls(void)
{
  Msforms_97::Controls_* Controls;
  this->get_Controls((Msforms_97::Controls_**)&Controls);
  return Controls;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_Cycle(Msforms_97::fmCycle Cycle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cycle"), DISPID(260));
  TAutoArgs<1> _args;
  _args[1] = (int)Cycle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_Cycle(Msforms_97::fmCycle* Cycle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cycle"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Cycle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmCycle __fastcall
_UserFormDispT<T>::get_Cycle(void)
{
  Msforms_97::fmCycle Cycle;
  this->get_Cycle((Msforms_97::fmCycle*)&Cycle);
  return Cycle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Enabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_UserFormDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  this->get_Enabled((VARIANT_BOOL*)&Enabled);
  return Enabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Font_Reserved"), DISPID(2147483135));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Param1 /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Font /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp***)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp** __fastcall
_UserFormDispT<T>::get_Font(void)
{
  IFontDisp** Font;
  this->get_Font((IFontDisp***)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<1> _args;
  _args[1] = ForeColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ForeColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
_UserFormDispT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::_GetInsideHeight(long* InsideHeight/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetInsideHeight"), DISPID(DISPID_UNKNOWN/*[1610743830]*/));
  TAutoArgs<1> _args;
  _args[1] = InsideHeight /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_InsideHeight(float* InsideHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsideHeight"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(InsideHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_UserFormDispT<T>::get_InsideHeight(void)
{
  float InsideHeight;
  this->get_InsideHeight((float*)&InsideHeight);
  return InsideHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::_GetInsideWidth(long* InsideWidth/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetInsideWidth"), DISPID(DISPID_UNKNOWN/*[1610743832]*/));
  TAutoArgs<1> _args;
  _args[1] = InsideWidth /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_InsideWidth(float* InsideWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsideWidth"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(InsideWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_UserFormDispT<T>::get_InsideWidth(void)
{
  float InsideWidth;
  this->get_InsideWidth((float*)&InsideWidth);
  return InsideWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_KeepScrollBarsVisible(Msforms_97::fmScrollBars ScrollBars/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeepScrollBarsVisible"), DISPID(264));
  TAutoArgs<1> _args;
  _args[1] = (int)ScrollBars /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_KeepScrollBarsVisible(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeepScrollBarsVisible"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ScrollBars /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmScrollBars __fastcall
_UserFormDispT<T>::get_KeepScrollBarsVisible(void)
{
  Msforms_97::fmScrollBars ScrollBars;
  this->get_KeepScrollBarsVisible((Msforms_97::fmScrollBars*)&ScrollBars);
  return ScrollBars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)MouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
_UserFormDispT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  this->get_MouseIcon((IPictureDisp***)&MouseIcon);
  return MouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<1> _args;
  _args[1] = (int)MousePointer /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MousePointer /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMousePointer __fastcall
_UserFormDispT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer);
  return MousePointer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_PictureAlignment(Msforms_97::fmPictureAlignment PictureAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureAlignment"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = (int)PictureAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_PictureAlignment(Msforms_97::fmPictureAlignment* PictureAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureAlignment"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PictureAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmPictureAlignment __fastcall
_UserFormDispT<T>::get_PictureAlignment(void)
{
  Msforms_97::fmPictureAlignment PictureAlignment;
  this->get_PictureAlignment((Msforms_97::fmPictureAlignment*)&PictureAlignment);
  return PictureAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_Picture(IPictureDisp** Picture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)Picture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::_set_Picture(IPictureDisp** Picture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)Picture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_Picture(IPictureDisp*** Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)Picture /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
_UserFormDispT<T>::get_Picture(void)
{
  IPictureDisp** Picture;
  this->get_Picture((IPictureDisp***)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_PictureSizeMode(Msforms_97::fmPictureSizeMode PictureSizeMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureSizeMode"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = (int)PictureSizeMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_PictureSizeMode(Msforms_97::fmPictureSizeMode* PictureSizeMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureSizeMode"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PictureSizeMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmPictureSizeMode __fastcall
_UserFormDispT<T>::get_PictureSizeMode(void)
{
  Msforms_97::fmPictureSizeMode PictureSizeMode;
  this->get_PictureSizeMode((Msforms_97::fmPictureSizeMode*)&PictureSizeMode);
  return PictureSizeMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_PictureTiling(VARIANT_BOOL PictureTiling/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureTiling"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = PictureTiling /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_PictureTiling(VARIANT_BOOL* PictureTiling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureTiling"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PictureTiling /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_UserFormDispT<T>::get_PictureTiling(void)
{
  VARIANT_BOOL PictureTiling;
  this->get_PictureTiling((VARIANT_BOOL*)&PictureTiling);
  return PictureTiling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_ScrollBars(Msforms_97::fmScrollBars ScrollBars/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollBars"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = (int)ScrollBars /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_ScrollBars(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollBars"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ScrollBars /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmScrollBars __fastcall
_UserFormDispT<T>::get_ScrollBars(void)
{
  Msforms_97::fmScrollBars ScrollBars;
  this->get_ScrollBars((Msforms_97::fmScrollBars*)&ScrollBars);
  return ScrollBars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::_SetScrollHeight(long ScrollHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetScrollHeight"), DISPID(DISPID_UNKNOWN/*[1610743852]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollHeight /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::_GetScrollHeight(long* ScrollHeight/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetScrollHeight"), DISPID(DISPID_UNKNOWN/*[1610743853]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollHeight /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_ScrollHeight(float ScrollHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollHeight"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = ScrollHeight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_ScrollHeight(float* ScrollHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollHeight"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ScrollHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_UserFormDispT<T>::get_ScrollHeight(void)
{
  float ScrollHeight;
  this->get_ScrollHeight((float*)&ScrollHeight);
  return ScrollHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::_SetScrollLeft(long ScrollLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetScrollLeft"), DISPID(DISPID_UNKNOWN/*[1610743856]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollLeft /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::_GetScrollLeft(long* ScrollLeft/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetScrollLeft"), DISPID(DISPID_UNKNOWN/*[1610743857]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollLeft /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_ScrollLeft(float ScrollLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollLeft"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = ScrollLeft /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_ScrollLeft(float* ScrollLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollLeft"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ScrollLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_UserFormDispT<T>::get_ScrollLeft(void)
{
  float ScrollLeft;
  this->get_ScrollLeft((float*)&ScrollLeft);
  return ScrollLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::_SetScrollTop(long ScrollTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetScrollTop"), DISPID(DISPID_UNKNOWN/*[1610743860]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollTop /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::_GetScrollTop(long* ScrollTop/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetScrollTop"), DISPID(DISPID_UNKNOWN/*[1610743861]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollTop /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_ScrollTop(float ScrollTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollTop"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = ScrollTop /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_ScrollTop(float* ScrollTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollTop"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ScrollTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_UserFormDispT<T>::get_ScrollTop(void)
{
  float ScrollTop;
  this->get_ScrollTop((float*)&ScrollTop);
  return ScrollTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::_SetScrollWidth(long ScrollWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetScrollWidth"), DISPID(DISPID_UNKNOWN/*[1610743864]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollWidth /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::_GetScrollWidth(long* ScrollWidth/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetScrollWidth"), DISPID(DISPID_UNKNOWN/*[1610743865]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollWidth /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_ScrollWidth(float ScrollWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollWidth"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = ScrollWidth /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_ScrollWidth(float* ScrollWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollWidth"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ScrollWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_UserFormDispT<T>::get_ScrollWidth(void)
{
  float ScrollWidth;
  this->get_ScrollWidth((float*)&ScrollWidth);
  return ScrollWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_Selected(Msforms_97::Controls_** Selected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(270));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Controls_**)Selected /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::Controls_* __fastcall
_UserFormDispT<T>::get_Selected(void)
{
  Msforms_97::Controls_* Selected;
  this->get_Selected((Msforms_97::Controls_**)&Selected);
  return Selected;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)SpecialEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SpecialEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmSpecialEffect __fastcall
_UserFormDispT<T>::get_SpecialEffect(void)
{
  Msforms_97::fmSpecialEffect SpecialEffect;
  this->get_SpecialEffect((Msforms_97::fmSpecialEffect*)&SpecialEffect);
  return SpecialEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide side/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalScrollBarSide"), DISPID(271));
  TAutoArgs<1> _args;
  _args[1] = (int)side /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide* side/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalScrollBarSide"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)side /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmVerticalScrollBarSide __fastcall
_UserFormDispT<T>::get_VerticalScrollBarSide(void)
{
  Msforms_97::fmVerticalScrollBarSide side;
  this->get_VerticalScrollBarSide((Msforms_97::fmVerticalScrollBarSide*)&side);
  return side;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_Zoom(short Zoom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Zoom"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Zoom /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_Zoom(short* Zoom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Zoom"), DISPID(272));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Zoom /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_UserFormDispT<T>::get_Zoom(void)
{
  short Zoom;
  this->get_Zoom((short*)&Zoom);
  return Zoom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::Copy()
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(512));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::Cut()
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(513));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::Paste()
{
  _TDispID _dispid(*this, OLETEXT("Paste"), DISPID(514));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::RedoAction()
{
  _TDispID _dispid(*this, OLETEXT("RedoAction"), DISPID(515));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::Repaint()
{
  _TDispID _dispid(*this, OLETEXT("Repaint"), DISPID(516));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::Scroll(VARIANT xAction/*[in,opt]*/, VARIANT yAction/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scroll"), DISPID(517));
  TAutoArgs<2> _args;
  _args[1] = xAction /*[VT_VARIANT:0]*/;
  _args[2] = yAction /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::SetDefaultTabOrder()
{
  _TDispID _dispid(*this, OLETEXT("SetDefaultTabOrder"), DISPID(518));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::UndoAction()
{
  _TDispID _dispid(*this, OLETEXT("UndoAction"), DISPID(519));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_DesignMode(Msforms_97::fmMode DesignMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesignMode"), DISPID(384));
  TAutoArgs<1> _args;
  _args[1] = (int)DesignMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_DesignMode(Msforms_97::fmMode* DesignMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesignMode"), DISPID(384));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DesignMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMode __fastcall
_UserFormDispT<T>::get_DesignMode(void)
{
  Msforms_97::fmMode DesignMode;
  this->get_DesignMode((Msforms_97::fmMode*)&DesignMode);
  return DesignMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_ShowToolbox(Msforms_97::fmMode ShowToolbox/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowToolbox"), DISPID(385));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowToolbox /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_ShowToolbox(Msforms_97::fmMode* ShowToolbox/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowToolbox"), DISPID(385));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowToolbox /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMode __fastcall
_UserFormDispT<T>::get_ShowToolbox(void)
{
  Msforms_97::fmMode ShowToolbox;
  this->get_ShowToolbox((Msforms_97::fmMode*)&ShowToolbox);
  return ShowToolbox;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_ShowGridDots(Msforms_97::fmMode ShowGridDots/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowGridDots"), DISPID(386));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowGridDots /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_ShowGridDots(Msforms_97::fmMode* ShowGridDots/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowGridDots"), DISPID(386));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowGridDots /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMode __fastcall
_UserFormDispT<T>::get_ShowGridDots(void)
{
  Msforms_97::fmMode ShowGridDots;
  this->get_ShowGridDots((Msforms_97::fmMode*)&ShowGridDots);
  return ShowGridDots;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_SnapToGrid(Msforms_97::fmMode SnapToGrid/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SnapToGrid"), DISPID(387));
  TAutoArgs<1> _args;
  _args[1] = (int)SnapToGrid /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_SnapToGrid(Msforms_97::fmMode* SnapToGrid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SnapToGrid"), DISPID(387));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SnapToGrid /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMode __fastcall
_UserFormDispT<T>::get_SnapToGrid(void)
{
  Msforms_97::fmMode SnapToGrid;
  this->get_SnapToGrid((Msforms_97::fmMode*)&SnapToGrid);
  return SnapToGrid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_GridX(float GridX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridX"), DISPID(388));
  TAutoArgs<1> _args;
  _args[1] = GridX /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_GridX(float* GridX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridX"), DISPID(388));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GridX /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_UserFormDispT<T>::get_GridX(void)
{
  float GridX;
  this->get_GridX((float*)&GridX);
  return GridX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::_SetGridX(long GridX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetGridX"), DISPID(DISPID_UNKNOWN/*[1610743893]*/));
  TAutoArgs<1> _args;
  _args[1] = GridX /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::_GetGridX(long* GridX/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetGridX"), DISPID(DISPID_UNKNOWN/*[1610743894]*/));
  TAutoArgs<1> _args;
  _args[1] = GridX /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::set_GridY(float GridY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridY"), DISPID(389));
  TAutoArgs<1> _args;
  _args[1] = GridY /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::get_GridY(float* GridY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridY"), DISPID(389));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GridY /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_UserFormDispT<T>::get_GridY(void)
{
  float GridY;
  this->get_GridY((float*)&GridY);
  return GridY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::_SetGridY(long GridY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetGridY"), DISPID(DISPID_UNKNOWN/*[1610743897]*/));
  TAutoArgs<1> _args;
  _args[1] = GridY /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_UserFormDispT<T>::_GetGridY(long* GridY/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetGridY"), DISPID(DISPID_UNKNOWN/*[1610743898]*/));
  TAutoArgs<1> _args;
  _args[1] = GridY /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ControlEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {9A4BBF53-4E46-101B-8BBD-00AA003E3B29}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
ControlEventsDispT<T>::Enter()
{
  _TDispID _dispid(/* Enter */ DISPID(-2147384830));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ControlEventsDispT<T>::Exit(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
{
  _TDispID _dispid(/* Exit */ DISPID(-2147384829));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ControlEventsDispT<T>::BeforeUpdate(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
{
  _TDispID _dispid(/* BeforeUpdate */ DISPID(-2147384831));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ControlEventsDispT<T>::AfterUpdate()
{
  _TDispID _dispid(/* AfterUpdate */ DISPID(-2147384832));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  FormEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {5B9D8FC8-4A71-101B-97A6-00000B65C08B}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
FormEventsDispT<T>::AddControl(Msforms_97::Control* Control/*[in]*/)
{
  _TDispID _dispid(/* AddControl */ DISPID(768));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FormEventsDispT<T>::BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                   Msforms_97::Control* Control/*[in]*/, 
                                   Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                   float Y/*[in]*/, Msforms_97::fmDragState State/*[in]*/, 
                                   Msforms_97::ReturnEffect* Effect/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
  TAutoArgs<8> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
  _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  _args[6] = (int)State /*[VT_USERDEFINED:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[8] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FormEventsDispT<T>::BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                      Msforms_97::Control* Control/*[in]*/, 
                                      Msforms_97::fmAction Action/*[in]*/, 
                                      Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                      float Y/*[in]*/, Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                      short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
  TAutoArgs<8> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
  _args[3] = (int)Action /*[VT_USERDEFINED:0]*/;
  _args[4] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[5] = X /*[VT_R4:0]*/;
  _args[6] = Y /*[VT_R4:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[8] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FormEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FormEventsDispT<T>::DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
{
  _TDispID _dispid(/* DblClick */ DISPID(-601));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FormEventsDispT<T>::Error(short Number/*[in]*/, Msforms_97::ReturnString* Description/*[in]*/, 
                          long SCode/*[in]*/, BSTR Source/*[in]*/, BSTR HelpFile/*[in]*/, 
                          long HelpContext/*[in]*/, Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
{
  _TDispID _dispid(/* Error */ DISPID(-608));
  TAutoArgs<7> _args;
  _args[1] = Number /*[VT_I2:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
  _args[3] = SCode /*[VT_I4:0]*/;
  _args[4] = Source /*[VT_BSTR:0]*/;
  _args[5] = HelpFile /*[VT_BSTR:0]*/;
  _args[6] = HelpContext /*[VT_I4:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FormEventsDispT<T>::KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FormEventsDispT<T>::KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FormEventsDispT<T>::KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FormEventsDispT<T>::Layout()
{
  _TDispID _dispid(/* Layout */ DISPID(770));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FormEventsDispT<T>::MouseDown(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                              float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FormEventsDispT<T>::MouseMove(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                              float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FormEventsDispT<T>::MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                            float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FormEventsDispT<T>::RemoveControl(Msforms_97::Control* Control/*[in]*/)
{
  _TDispID _dispid(/* RemoveControl */ DISPID(771));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FormEventsDispT<T>::Scroll(Msforms_97::fmScrollAction ActionX/*[in]*/, 
                           Msforms_97::fmScrollAction ActionY/*[in]*/, float RequestDx/*[in]*/, 
                           float RequestDy/*[in]*/, Msforms_97::ReturnSingle* ActualDx/*[in]*/, 
                           Msforms_97::ReturnSingle* ActualDy/*[in]*/)
{
  _TDispID _dispid(/* Scroll */ DISPID(772));
  TAutoArgs<6> _args;
  _args[1] = (int)ActionX /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)ActionY /*[VT_USERDEFINED:0]*/;
  _args[3] = RequestDx /*[VT_R4:0]*/;
  _args[4] = RequestDy /*[VT_R4:0]*/;
  _args[5] = (LPDISPATCH)(Msforms_97::ReturnSingle*)ActualDx /*[VT_USERDEFINED:1]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnSingle*)ActualDy /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FormEventsDispT<T>::Zoom(short* Percent/*[in,out]*/)
{
  _TDispID _dispid(/* Zoom */ DISPID(773));
  TAutoArgs<1> _args;
  _args[1] = Percent /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  OptionFrameEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {CF3F94A0-F546-11CE-9BCE-00AA00608E01}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
OptionFrameEventsDispT<T>::AddControl(Msforms_97::Control* Control/*[in]*/)
{
  _TDispID _dispid(/* AddControl */ DISPID(768));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
OptionFrameEventsDispT<T>::BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                          Msforms_97::Control* Control/*[in]*/, 
                                          Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                          float Y/*[in]*/, Msforms_97::fmDragState State/*[in]*/, 
                                          Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                          short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
  TAutoArgs<8> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
  _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  _args[6] = (int)State /*[VT_USERDEFINED:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[8] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
OptionFrameEventsDispT<T>::BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                             Msforms_97::Control* Control/*[in]*/, 
                                             Msforms_97::fmAction Action/*[in]*/, 
                                             Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                             float Y/*[in]*/, 
                                             Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                             short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
  TAutoArgs<8> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
  _args[3] = (int)Action /*[VT_USERDEFINED:0]*/;
  _args[4] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[5] = X /*[VT_R4:0]*/;
  _args[6] = Y /*[VT_R4:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[8] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
OptionFrameEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
OptionFrameEventsDispT<T>::DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
{
  _TDispID _dispid(/* DblClick */ DISPID(-601));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
OptionFrameEventsDispT<T>::Error(short Number/*[in]*/, Msforms_97::ReturnString* Description/*[in]*/
                                 , long SCode/*[in]*/, BSTR Source/*[in]*/, BSTR HelpFile/*[in]*/, 
                                 long HelpContext/*[in]*/, 
                                 Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
{
  _TDispID _dispid(/* Error */ DISPID(-608));
  TAutoArgs<7> _args;
  _args[1] = Number /*[VT_I2:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
  _args[3] = SCode /*[VT_I4:0]*/;
  _args[4] = Source /*[VT_BSTR:0]*/;
  _args[5] = HelpFile /*[VT_BSTR:0]*/;
  _args[6] = HelpContext /*[VT_I4:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
OptionFrameEventsDispT<T>::KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
OptionFrameEventsDispT<T>::KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
OptionFrameEventsDispT<T>::KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
OptionFrameEventsDispT<T>::Layout()
{
  _TDispID _dispid(/* Layout */ DISPID(770));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
OptionFrameEventsDispT<T>::MouseDown(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                     float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
OptionFrameEventsDispT<T>::MouseMove(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                     float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
OptionFrameEventsDispT<T>::MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                   float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
OptionFrameEventsDispT<T>::RemoveControl(Msforms_97::Control* Control/*[in]*/)
{
  _TDispID _dispid(/* RemoveControl */ DISPID(771));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
OptionFrameEventsDispT<T>::Scroll(Msforms_97::fmScrollAction ActionX/*[in]*/, 
                                  Msforms_97::fmScrollAction ActionY/*[in]*/, 
                                  float RequestDx/*[in]*/, float RequestDy/*[in]*/, 
                                  Msforms_97::ReturnSingle* ActualDx/*[in]*/, 
                                  Msforms_97::ReturnSingle* ActualDy/*[in]*/)
{
  _TDispID _dispid(/* Scroll */ DISPID(772));
  TAutoArgs<6> _args;
  _args[1] = (int)ActionX /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)ActionY /*[VT_USERDEFINED:0]*/;
  _args[3] = RequestDx /*[VT_R4:0]*/;
  _args[4] = RequestDy /*[VT_R4:0]*/;
  _args[5] = (LPDISPATCH)(Msforms_97::ReturnSingle*)ActualDx /*[VT_USERDEFINED:1]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnSingle*)ActualDy /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
OptionFrameEventsDispT<T>::Zoom(short* Percent/*[in,out]*/)
{
  _TDispID _dispid(/* Zoom */ DISPID(773));
  TAutoArgs<1> _args;
  _args[1] = Percent /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMILabelControl
// Interface: ILabelControl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_AutoSize(VARIANT_BOOL fvbAutoSize/*[in]*/)
{
  return (*this)->set_AutoSize(fvbAutoSize);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_AutoSize(TOLEBOOL fvbAutoSize/*[in]*/)
{
  return (*this)->set_AutoSize(VARIANT_BOOL)fvbAutoSize);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_AutoSize(VARIANT_BOOL* fvbAutoSize/*[out,retval]*/)
{
  return (*this)->get_AutoSize(fvbAutoSize);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_AutoSize(TOLEBOOL* fvbAutoSize/*[out,retval]*/)
{
  return (*this)->get_AutoSize(VARIANT_BOOL*)fvbAutoSize);
}

template <class T> TOLEBOOL __fastcall
TCOMILabelControlT<T>::get_AutoSize(void)
{
  VARIANT_BOOL fvbAutoSize;
  OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&fvbAutoSize));
  return (TOLEBOOL)fvbAutoSize;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  return (*this)->set_BackColor(BackColor);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  return (*this)->get_BackColor(BackColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMILabelControlT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
  return BackColor;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/)
{
  return (*this)->set_BackStyle(BackStyle);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/)
{
  return (*this)->get_BackStyle(BackStyle);
}

template <class T> Msforms_97::fmBackStyle __fastcall
TCOMILabelControlT<T>::get_BackStyle(void)
{
  Msforms_97::fmBackStyle BackStyle;
  OLECHECK(this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle));
  return BackStyle;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/)
{
  return (*this)->set_BorderColor(BorderColor);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/)
{
  return (*this)->get_BorderColor(BorderColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMILabelControlT<T>::get_BorderColor(void)
{
  Msforms_97::OLE_COLOR BorderColor;
  OLECHECK(this->get_BorderColor((Msforms_97::OLE_COLOR*)&BorderColor));
  return BorderColor;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/)
{
  return (*this)->set_BorderStyle(BorderStyle);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(BorderStyle);
}

template <class T> Msforms_97::fmBorderStyle __fastcall
TCOMILabelControlT<T>::get_BorderStyle(void)
{
  Msforms_97::fmBorderStyle BorderStyle;
  OLECHECK(this->get_BorderStyle((Msforms_97::fmBorderStyle*)&BorderStyle));
  return BorderStyle;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_Caption(BSTR bstrCaption/*[in]*/)
{
  return (*this)->set_Caption(bstrCaption);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_Caption(BSTR* bstrCaption/*[out,retval]*/)
{
  return (*this)->get_Caption(bstrCaption);
}

template <class T> BSTR __fastcall
TCOMILabelControlT<T>::get_Caption(void)
{
  BSTR bstrCaption = 0;
  OLECHECK(this->get_Caption((BSTR*)&bstrCaption));
  return bstrCaption;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_Enabled(VARIANT_BOOL fEnabled/*[in]*/)
{
  return (*this)->set_Enabled(fEnabled);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_Enabled(TOLEBOOL fEnabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)fEnabled);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(fEnabled);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_Enabled(TOLEBOOL* fEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)fEnabled);
}

template <class T> TOLEBOOL __fastcall
TCOMILabelControlT<T>::get_Enabled(void)
{
  VARIANT_BOOL fEnabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&fEnabled));
  return (TOLEBOOL)fEnabled;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  return (*this)->set__Font_Reserved(Param1);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set__Font_Reserved(IFontDisp* Param1/*[in]*/)
{
  return (*this)->set__Font_Reserved(IFontDisp**)Param1);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  return (*this)->_set_Font(Font);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::_set_Font(IFontDisp* Font/*[in]*/)
{
  return (*this)->_set_Font(IFontDisp**)Font);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  return (*this)->get_Font(Font);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_Font(IFontDisp** Font/*[out,retval]*/)
{
  return (*this)->get_Font(IFontDisp***)Font);
}

template <class T> IFontDisp* __fastcall
TCOMILabelControlT<T>::get_Font(void)
{
  IFontDisp** Font;
  OLECHECK(this->get_Font((IFontDisp***)&Font));
  return (IFontDisp*)Font;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/)
{
  return (*this)->set_FontItalic(FontItalic);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_FontItalic(TOLEBOOL FontItalic/*[in]*/)
{
  return (*this)->set_FontItalic(VARIANT_BOOL)FontItalic);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/)
{
  return (*this)->get_FontItalic(FontItalic);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_FontItalic(TOLEBOOL* FontItalic/*[out,retval]*/)
{
  return (*this)->get_FontItalic(VARIANT_BOOL*)FontItalic);
}

template <class T> TOLEBOOL __fastcall
TCOMILabelControlT<T>::get_FontItalic(void)
{
  VARIANT_BOOL FontItalic;
  OLECHECK(this->get_FontItalic((VARIANT_BOOL*)&FontItalic));
  return (TOLEBOOL)FontItalic;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_FontBold(VARIANT_BOOL FontBold/*[in]*/)
{
  return (*this)->set_FontBold(FontBold);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_FontBold(TOLEBOOL FontBold/*[in]*/)
{
  return (*this)->set_FontBold(VARIANT_BOOL)FontBold);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/)
{
  return (*this)->get_FontBold(FontBold);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_FontBold(TOLEBOOL* FontBold/*[out,retval]*/)
{
  return (*this)->get_FontBold(VARIANT_BOOL*)FontBold);
}

template <class T> TOLEBOOL __fastcall
TCOMILabelControlT<T>::get_FontBold(void)
{
  VARIANT_BOOL FontBold;
  OLECHECK(this->get_FontBold((VARIANT_BOOL*)&FontBold));
  return (TOLEBOOL)FontBold;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  return (*this)->set_FontName(FontName);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  return (*this)->get_FontName(FontName);
}

template <class T> BSTR __fastcall
TCOMILabelControlT<T>::get_FontName(void)
{
  BSTR FontName = 0;
  OLECHECK(this->get_FontName((BSTR*)&FontName));
  return FontName;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_FontSize(CURRENCY FontSize/*[in]*/)
{
  return (*this)->set_FontSize(FontSize);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_FontSize(CURRENCY* FontSize/*[out,retval]*/)
{
  return (*this)->get_FontSize(FontSize);
}

template <class T> CURRENCY __fastcall
TCOMILabelControlT<T>::get_FontSize(void)
{
  CURRENCY FontSize;
  OLECHECK(this->get_FontSize((CURRENCY*)&FontSize));
  return FontSize;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/)
{
  return (*this)->set_FontStrikethru(FontStrikethru);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_FontStrikethru(TOLEBOOL FontStrikethru/*[in]*/)
{
  return (*this)->set_FontStrikethru(VARIANT_BOOL)FontStrikethru);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/)
{
  return (*this)->get_FontStrikethru(FontStrikethru);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_FontStrikethru(TOLEBOOL* FontStrikethru/*[out,retval]*/)
{
  return (*this)->get_FontStrikethru(VARIANT_BOOL*)FontStrikethru);
}

template <class T> TOLEBOOL __fastcall
TCOMILabelControlT<T>::get_FontStrikethru(void)
{
  VARIANT_BOOL FontStrikethru;
  OLECHECK(this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru));
  return (TOLEBOOL)FontStrikethru;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/)
{
  return (*this)->set_FontUnderline(FontUnderline);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_FontUnderline(TOLEBOOL FontUnderline/*[in]*/)
{
  return (*this)->set_FontUnderline(VARIANT_BOOL)FontUnderline);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(FontUnderline);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_FontUnderline(TOLEBOOL* FontUnderline/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(VARIANT_BOOL*)FontUnderline);
}

template <class T> TOLEBOOL __fastcall
TCOMILabelControlT<T>::get_FontUnderline(void)
{
  VARIANT_BOOL FontUnderline;
  OLECHECK(this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline));
  return (TOLEBOOL)FontUnderline;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  return (*this)->set_ForeColor(ForeColor);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  return (*this)->get_ForeColor(ForeColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMILabelControlT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
  return ForeColor;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::_set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(IPictureDisp***)MouseIcon);
}

template <class T> IPictureDisp* __fastcall
TCOMILabelControlT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
  return (IPictureDisp*)MouseIcon;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  return (*this)->set_MousePointer(MousePointer);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  return (*this)->get_MousePointer(MousePointer);
}

template <class T> Msforms_97::fmMousePointer __fastcall
TCOMILabelControlT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
  return MousePointer;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_Picture(IPictureDisp** pPicture/*[in]*/)
{
  return (*this)->set_Picture(pPicture);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_Picture(IPictureDisp* pPicture/*[in]*/)
{
  return (*this)->set_Picture(IPictureDisp**)pPicture);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::_set_Picture(IPictureDisp** pPicture/*[in]*/)
{
  return (*this)->_set_Picture(pPicture);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::_set_Picture(IPictureDisp* pPicture/*[in]*/)
{
  return (*this)->_set_Picture(IPictureDisp**)pPicture);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_Picture(IPictureDisp*** pPicture/*[out,retval]*/)
{
  return (*this)->get_Picture(pPicture);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_Picture(IPictureDisp** pPicture/*[out,retval]*/)
{
  return (*this)->get_Picture(IPictureDisp***)pPicture);
}

template <class T> IPictureDisp* __fastcall
TCOMILabelControlT<T>::get_Picture(void)
{
  IPictureDisp** pPicture;
  OLECHECK(this->get_Picture((IPictureDisp***)&pPicture));
  return (IPictureDisp*)pPicture;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_PicturePosition(Msforms_97::fmPicturePosition PicPos/*[in]*/)
{
  return (*this)->set_PicturePosition(PicPos);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_PicturePosition(Msforms_97::fmPicturePosition* PicPos/*[out,retval]*/)
{
  return (*this)->get_PicturePosition(PicPos);
}

template <class T> Msforms_97::fmPicturePosition __fastcall
TCOMILabelControlT<T>::get_PicturePosition(void)
{
  Msforms_97::fmPicturePosition PicPos;
  OLECHECK(this->get_PicturePosition((Msforms_97::fmPicturePosition*)&PicPos));
  return PicPos;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/)
{
  return (*this)->set_SpecialEffect(SpecialEffect);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(SpecialEffect);
}

template <class T> Msforms_97::fmSpecialEffect __fastcall
TCOMILabelControlT<T>::get_SpecialEffect(void)
{
  Msforms_97::fmSpecialEffect SpecialEffect;
  OLECHECK(this->get_SpecialEffect((Msforms_97::fmSpecialEffect*)&SpecialEffect));
  return SpecialEffect;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/)
{
  return (*this)->set_TextAlign(TextAlign);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/)
{
  return (*this)->get_TextAlign(TextAlign);
}

template <class T> Msforms_97::fmTextAlign __fastcall
TCOMILabelControlT<T>::get_TextAlign(void)
{
  Msforms_97::fmTextAlign TextAlign;
  OLECHECK(this->get_TextAlign((Msforms_97::fmTextAlign*)&TextAlign));
  return TextAlign;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/)
{
  return (*this)->set_WordWrap(WordWrap);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_WordWrap(TOLEBOOL WordWrap/*[in]*/)
{
  return (*this)->set_WordWrap(VARIANT_BOOL)WordWrap);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/)
{
  return (*this)->get_WordWrap(WordWrap);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_WordWrap(TOLEBOOL* WordWrap/*[out,retval]*/)
{
  return (*this)->get_WordWrap(VARIANT_BOOL*)WordWrap);
}

template <class T> TOLEBOOL __fastcall
TCOMILabelControlT<T>::get_WordWrap(void)
{
  VARIANT_BOOL WordWrap;
  OLECHECK(this->get_WordWrap((VARIANT_BOOL*)&WordWrap));
  return (TOLEBOOL)WordWrap;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_Accelerator(BSTR Accelerator/*[in]*/)
{
  return (*this)->set_Accelerator(Accelerator);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_Accelerator(BSTR* Accelerator/*[out,retval]*/)
{
  return (*this)->get_Accelerator(Accelerator);
}

template <class T> BSTR __fastcall
TCOMILabelControlT<T>::get_Accelerator(void)
{
  BSTR Accelerator = 0;
  OLECHECK(this->get_Accelerator((BSTR*)&Accelerator));
  return Accelerator;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set_FontWeight(short FontWeight/*[in]*/)
{
  return (*this)->set_FontWeight(FontWeight);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get_FontWeight(short* FontWeight/*[out,retval]*/)
{
  return (*this)->get_FontWeight(FontWeight);
}

template <class T> short __fastcall
TCOMILabelControlT<T>::get_FontWeight(void)
{
  short FontWeight;
  OLECHECK(this->get_FontWeight((short*)&FontWeight));
  return FontWeight;
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::set__Value(BSTR bstrCaption/*[in]*/)
{
  return (*this)->set__Value(bstrCaption);
}

template <class T> HRESULT __fastcall
TCOMILabelControlT<T>::get__Value(BSTR* bstrCaption/*[out,retval]*/)
{
  return (*this)->get__Value(bstrCaption);
}

template <class T> BSTR __fastcall
TCOMILabelControlT<T>::get__Value(void)
{
  BSTR bstrCaption = 0;
  OLECHECK(this->get__Value((BSTR*)&bstrCaption));
  return bstrCaption;
}

// *********************************************************************//
// DispIntf:  ILabelControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04598FC1-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_AutoSize(VARIANT_BOOL fvbAutoSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<1> _args;
  _args[1] = fvbAutoSize /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_AutoSize(VARIANT_BOOL* fvbAutoSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fvbAutoSize /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILabelControlDispT<T>::get_AutoSize(void)
{
  VARIANT_BOOL fvbAutoSize;
  this->get_AutoSize((VARIANT_BOOL*)&fvbAutoSize);
  return fvbAutoSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
ILabelControlDispT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(-502));
  TAutoArgs<1> _args;
  _args[1] = (int)BackStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(-502));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BackStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmBackStyle __fastcall
ILabelControlDispT<T>::get_BackStyle(void)
{
  Msforms_97::fmBackStyle BackStyle;
  this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle);
  return BackStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(-503));
  TAutoArgs<1> _args;
  _args[1] = BorderColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(-503));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BorderColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
ILabelControlDispT<T>::get_BorderColor(void)
{
  Msforms_97::OLE_COLOR BorderColor;
  this->get_BorderColor((Msforms_97::OLE_COLOR*)&BorderColor);
  return BorderColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<1> _args;
  _args[1] = (int)BorderStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BorderStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmBorderStyle __fastcall
ILabelControlDispT<T>::get_BorderStyle(void)
{
  Msforms_97::fmBorderStyle BorderStyle;
  this->get_BorderStyle((Msforms_97::fmBorderStyle*)&BorderStyle);
  return BorderStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_Caption(BSTR bstrCaption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = bstrCaption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_Caption(BSTR* bstrCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bstrCaption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ILabelControlDispT<T>::get_Caption(void)
{
  BSTR bstrCaption;
  this->get_Caption((BSTR*)&bstrCaption);
  return bstrCaption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_Enabled(VARIANT_BOOL fEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = fEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILabelControlDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL fEnabled;
  this->get_Enabled((VARIANT_BOOL*)&fEnabled);
  return fEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Font_Reserved"), DISPID(2147483135));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Param1 /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Font /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp***)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp** __fastcall
ILabelControlDispT<T>::get_Font(void)
{
  IFontDisp** Font;
  this->get_Font((IFontDisp***)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = FontItalic /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontItalic /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILabelControlDispT<T>::get_FontItalic(void)
{
  VARIANT_BOOL FontItalic;
  this->get_FontItalic((VARIANT_BOOL*)&FontItalic);
  return FontItalic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_FontBold(VARIANT_BOOL FontBold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = FontBold /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontBold /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILabelControlDispT<T>::get_FontBold(void)
{
  VARIANT_BOOL FontBold;
  this->get_FontBold((VARIANT_BOOL*)&FontBold);
  return FontBold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = FontName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ILabelControlDispT<T>::get_FontName(void)
{
  BSTR FontName;
  this->get_FontName((BSTR*)&FontName);
  return FontName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_FontSize(CURRENCY FontSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = FontSize /*[VT_CY:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_FontSize(CURRENCY* FontSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontSize /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
ILabelControlDispT<T>::get_FontSize(void)
{
  CURRENCY FontSize;
  this->get_FontSize((CURRENCY*)&FontSize);
  return FontSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = FontStrikethru /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontStrikethru /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILabelControlDispT<T>::get_FontStrikethru(void)
{
  VARIANT_BOOL FontStrikethru;
  this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru);
  return FontStrikethru;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = FontUnderline /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontUnderline /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILabelControlDispT<T>::get_FontUnderline(void)
{
  VARIANT_BOOL FontUnderline;
  this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline);
  return FontUnderline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<1> _args;
  _args[1] = ForeColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ForeColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
ILabelControlDispT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)MouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
ILabelControlDispT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  this->get_MouseIcon((IPictureDisp***)&MouseIcon);
  return MouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<1> _args;
  _args[1] = (int)MousePointer /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MousePointer /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMousePointer __fastcall
ILabelControlDispT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer);
  return MousePointer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_Picture(IPictureDisp** pPicture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)pPicture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::_set_Picture(IPictureDisp** pPicture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)pPicture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_Picture(IPictureDisp*** pPicture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)pPicture /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
ILabelControlDispT<T>::get_Picture(void)
{
  IPictureDisp** pPicture;
  this->get_Picture((IPictureDisp***)&pPicture);
  return pPicture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_PicturePosition(Msforms_97::fmPicturePosition PicPos/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PicturePosition"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = (int)PicPos /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_PicturePosition(Msforms_97::fmPicturePosition* PicPos/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PicturePosition"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PicPos /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmPicturePosition __fastcall
ILabelControlDispT<T>::get_PicturePosition(void)
{
  Msforms_97::fmPicturePosition PicPos;
  this->get_PicturePosition((Msforms_97::fmPicturePosition*)&PicPos);
  return PicPos;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)SpecialEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SpecialEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmSpecialEffect __fastcall
ILabelControlDispT<T>::get_SpecialEffect(void)
{
  Msforms_97::fmSpecialEffect SpecialEffect;
  this->get_SpecialEffect((Msforms_97::fmSpecialEffect*)&SpecialEffect);
  return SpecialEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)TextAlign /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TextAlign /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmTextAlign __fastcall
ILabelControlDispT<T>::get_TextAlign(void)
{
  Msforms_97::fmTextAlign TextAlign;
  this->get_TextAlign((Msforms_97::fmTextAlign*)&TextAlign);
  return TextAlign;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(-536));
  TAutoArgs<1> _args;
  _args[1] = WordWrap /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(-536));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(WordWrap /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILabelControlDispT<T>::get_WordWrap(void)
{
  VARIANT_BOOL WordWrap;
  this->get_WordWrap((VARIANT_BOOL*)&WordWrap);
  return WordWrap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_Accelerator(BSTR Accelerator/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accelerator"), DISPID(-543));
  TAutoArgs<1> _args;
  _args[1] = Accelerator /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_Accelerator(BSTR* Accelerator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accelerator"), DISPID(-543));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Accelerator /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ILabelControlDispT<T>::get_Accelerator(void)
{
  BSTR Accelerator;
  this->get_Accelerator((BSTR*)&Accelerator);
  return Accelerator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set_FontWeight(short FontWeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = FontWeight /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get_FontWeight(short* FontWeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontWeight /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
ILabelControlDispT<T>::get_FontWeight(void)
{
  short FontWeight;
  this->get_FontWeight((short*)&FontWeight);
  return FontWeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::set__Value(BSTR bstrCaption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Value"), DISPID(-518));
  TAutoArgs<1> _args;
  _args[1] = bstrCaption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ILabelControlDispT<T>::get__Value(BSTR* bstrCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Value"), DISPID(-518));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bstrCaption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ILabelControlDispT<T>::get__Value(void)
{
  BSTR bstrCaption;
  this->get__Value((BSTR*)&bstrCaption);
  return bstrCaption;
}

// *********************************************************************//
// SmartIntf: TCOMICommandButton
// Interface: ICommandButton
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_AutoSize(VARIANT_BOOL fvbAutoSize/*[in]*/)
{
  return (*this)->set_AutoSize(fvbAutoSize);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_AutoSize(TOLEBOOL fvbAutoSize/*[in]*/)
{
  return (*this)->set_AutoSize(VARIANT_BOOL)fvbAutoSize);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_AutoSize(VARIANT_BOOL* fvbAutoSize/*[out,retval]*/)
{
  return (*this)->get_AutoSize(fvbAutoSize);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_AutoSize(TOLEBOOL* fvbAutoSize/*[out,retval]*/)
{
  return (*this)->get_AutoSize(VARIANT_BOOL*)fvbAutoSize);
}

template <class T> TOLEBOOL __fastcall
TCOMICommandButtonT<T>::get_AutoSize(void)
{
  VARIANT_BOOL fvbAutoSize;
  OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&fvbAutoSize));
  return (TOLEBOOL)fvbAutoSize;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  return (*this)->set_BackColor(BackColor);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  return (*this)->get_BackColor(BackColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMICommandButtonT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
  return BackColor;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/)
{
  return (*this)->set_BackStyle(BackStyle);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/)
{
  return (*this)->get_BackStyle(BackStyle);
}

template <class T> Msforms_97::fmBackStyle __fastcall
TCOMICommandButtonT<T>::get_BackStyle(void)
{
  Msforms_97::fmBackStyle BackStyle;
  OLECHECK(this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle));
  return BackStyle;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_Caption(BSTR bstrCaption/*[in]*/)
{
  return (*this)->set_Caption(bstrCaption);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_Caption(BSTR* bstrCaption/*[out,retval]*/)
{
  return (*this)->get_Caption(bstrCaption);
}

template <class T> BSTR __fastcall
TCOMICommandButtonT<T>::get_Caption(void)
{
  BSTR bstrCaption = 0;
  OLECHECK(this->get_Caption((BSTR*)&bstrCaption));
  return bstrCaption;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_Enabled(VARIANT_BOOL fEnabled/*[in]*/)
{
  return (*this)->set_Enabled(fEnabled);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_Enabled(TOLEBOOL fEnabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)fEnabled);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(fEnabled);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_Enabled(TOLEBOOL* fEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)fEnabled);
}

template <class T> TOLEBOOL __fastcall
TCOMICommandButtonT<T>::get_Enabled(void)
{
  VARIANT_BOOL fEnabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&fEnabled));
  return (TOLEBOOL)fEnabled;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  return (*this)->set__Font_Reserved(Param1);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set__Font_Reserved(IFontDisp* Param1/*[in]*/)
{
  return (*this)->set__Font_Reserved(IFontDisp**)Param1);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  return (*this)->_set_Font(Font);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::_set_Font(IFontDisp* Font/*[in]*/)
{
  return (*this)->_set_Font(IFontDisp**)Font);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  return (*this)->get_Font(Font);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_Font(IFontDisp** Font/*[out,retval]*/)
{
  return (*this)->get_Font(IFontDisp***)Font);
}

template <class T> IFontDisp* __fastcall
TCOMICommandButtonT<T>::get_Font(void)
{
  IFontDisp** Font;
  OLECHECK(this->get_Font((IFontDisp***)&Font));
  return (IFontDisp*)Font;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_FontBold(VARIANT_BOOL FontBold/*[in]*/)
{
  return (*this)->set_FontBold(FontBold);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_FontBold(TOLEBOOL FontBold/*[in]*/)
{
  return (*this)->set_FontBold(VARIANT_BOOL)FontBold);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/)
{
  return (*this)->get_FontBold(FontBold);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_FontBold(TOLEBOOL* FontBold/*[out,retval]*/)
{
  return (*this)->get_FontBold(VARIANT_BOOL*)FontBold);
}

template <class T> TOLEBOOL __fastcall
TCOMICommandButtonT<T>::get_FontBold(void)
{
  VARIANT_BOOL FontBold;
  OLECHECK(this->get_FontBold((VARIANT_BOOL*)&FontBold));
  return (TOLEBOOL)FontBold;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/)
{
  return (*this)->set_FontItalic(FontItalic);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_FontItalic(TOLEBOOL FontItalic/*[in]*/)
{
  return (*this)->set_FontItalic(VARIANT_BOOL)FontItalic);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/)
{
  return (*this)->get_FontItalic(FontItalic);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_FontItalic(TOLEBOOL* FontItalic/*[out,retval]*/)
{
  return (*this)->get_FontItalic(VARIANT_BOOL*)FontItalic);
}

template <class T> TOLEBOOL __fastcall
TCOMICommandButtonT<T>::get_FontItalic(void)
{
  VARIANT_BOOL FontItalic;
  OLECHECK(this->get_FontItalic((VARIANT_BOOL*)&FontItalic));
  return (TOLEBOOL)FontItalic;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  return (*this)->set_FontName(FontName);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  return (*this)->get_FontName(FontName);
}

template <class T> BSTR __fastcall
TCOMICommandButtonT<T>::get_FontName(void)
{
  BSTR FontName = 0;
  OLECHECK(this->get_FontName((BSTR*)&FontName));
  return FontName;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_FontSize(CURRENCY FontSize/*[in]*/)
{
  return (*this)->set_FontSize(FontSize);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_FontSize(CURRENCY* FontSize/*[out,retval]*/)
{
  return (*this)->get_FontSize(FontSize);
}

template <class T> CURRENCY __fastcall
TCOMICommandButtonT<T>::get_FontSize(void)
{
  CURRENCY FontSize;
  OLECHECK(this->get_FontSize((CURRENCY*)&FontSize));
  return FontSize;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/)
{
  return (*this)->set_FontStrikethru(FontStrikethru);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_FontStrikethru(TOLEBOOL FontStrikethru/*[in]*/)
{
  return (*this)->set_FontStrikethru(VARIANT_BOOL)FontStrikethru);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/)
{
  return (*this)->get_FontStrikethru(FontStrikethru);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_FontStrikethru(TOLEBOOL* FontStrikethru/*[out,retval]*/)
{
  return (*this)->get_FontStrikethru(VARIANT_BOOL*)FontStrikethru);
}

template <class T> TOLEBOOL __fastcall
TCOMICommandButtonT<T>::get_FontStrikethru(void)
{
  VARIANT_BOOL FontStrikethru;
  OLECHECK(this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru));
  return (TOLEBOOL)FontStrikethru;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/)
{
  return (*this)->set_FontUnderline(FontUnderline);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_FontUnderline(TOLEBOOL FontUnderline/*[in]*/)
{
  return (*this)->set_FontUnderline(VARIANT_BOOL)FontUnderline);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(FontUnderline);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_FontUnderline(TOLEBOOL* FontUnderline/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(VARIANT_BOOL*)FontUnderline);
}

template <class T> TOLEBOOL __fastcall
TCOMICommandButtonT<T>::get_FontUnderline(void)
{
  VARIANT_BOOL FontUnderline;
  OLECHECK(this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline));
  return (TOLEBOOL)FontUnderline;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  return (*this)->set_ForeColor(ForeColor);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  return (*this)->get_ForeColor(ForeColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMICommandButtonT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
  return ForeColor;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_TakeFocusOnClick(VARIANT_BOOL TakeFocusOnClick/*[in]*/)
{
  return (*this)->set_TakeFocusOnClick(TakeFocusOnClick);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_TakeFocusOnClick(TOLEBOOL TakeFocusOnClick/*[in]*/)
{
  return (*this)->set_TakeFocusOnClick(VARIANT_BOOL)TakeFocusOnClick);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_TakeFocusOnClick(VARIANT_BOOL* TakeFocusOnClick/*[out,retval]*/)
{
  return (*this)->get_TakeFocusOnClick(TakeFocusOnClick);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_TakeFocusOnClick(TOLEBOOL* TakeFocusOnClick/*[out,retval]*/)
{
  return (*this)->get_TakeFocusOnClick(VARIANT_BOOL*)TakeFocusOnClick);
}

template <class T> TOLEBOOL __fastcall
TCOMICommandButtonT<T>::get_TakeFocusOnClick(void)
{
  VARIANT_BOOL TakeFocusOnClick;
  OLECHECK(this->get_TakeFocusOnClick((VARIANT_BOOL*)&TakeFocusOnClick));
  return (TOLEBOOL)TakeFocusOnClick;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_Locked(VARIANT_BOOL fLocked/*[in]*/)
{
  return (*this)->set_Locked(fLocked);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_Locked(TOLEBOOL fLocked/*[in]*/)
{
  return (*this)->set_Locked(VARIANT_BOOL)fLocked);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_Locked(VARIANT_BOOL* fLocked/*[out,retval]*/)
{
  return (*this)->get_Locked(fLocked);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_Locked(TOLEBOOL* fLocked/*[out,retval]*/)
{
  return (*this)->get_Locked(VARIANT_BOOL*)fLocked);
}

template <class T> TOLEBOOL __fastcall
TCOMICommandButtonT<T>::get_Locked(void)
{
  VARIANT_BOOL fLocked;
  OLECHECK(this->get_Locked((VARIANT_BOOL*)&fLocked));
  return (TOLEBOOL)fLocked;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::_set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(IPictureDisp***)MouseIcon);
}

template <class T> IPictureDisp* __fastcall
TCOMICommandButtonT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
  return (IPictureDisp*)MouseIcon;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_MousePointer(Msforms_97::fmMousePointer mouseptr/*[in]*/)
{
  return (*this)->set_MousePointer(mouseptr);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_MousePointer(Msforms_97::fmMousePointer* mouseptr/*[out,retval]*/)
{
  return (*this)->get_MousePointer(mouseptr);
}

template <class T> Msforms_97::fmMousePointer __fastcall
TCOMICommandButtonT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer mouseptr;
  OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&mouseptr));
  return mouseptr;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_Picture(IPictureDisp** Picture/*[in]*/)
{
  return (*this)->set_Picture(Picture);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_Picture(IPictureDisp* Picture/*[in]*/)
{
  return (*this)->set_Picture(IPictureDisp**)Picture);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::_set_Picture(IPictureDisp** Picture/*[in]*/)
{
  return (*this)->_set_Picture(Picture);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::_set_Picture(IPictureDisp* Picture/*[in]*/)
{
  return (*this)->_set_Picture(IPictureDisp**)Picture);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_Picture(IPictureDisp*** Picture/*[out,retval]*/)
{
  return (*this)->get_Picture(Picture);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_Picture(IPictureDisp** Picture/*[out,retval]*/)
{
  return (*this)->get_Picture(IPictureDisp***)Picture);
}

template <class T> IPictureDisp* __fastcall
TCOMICommandButtonT<T>::get_Picture(void)
{
  IPictureDisp** Picture;
  OLECHECK(this->get_Picture((IPictureDisp***)&Picture));
  return (IPictureDisp*)Picture;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_PicturePosition(Msforms_97::fmPicturePosition PicturePosition/*[in]*/)
{
  return (*this)->set_PicturePosition(PicturePosition);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_PicturePosition(Msforms_97::fmPicturePosition* PicturePosition/*[out,retval]*/)
{
  return (*this)->get_PicturePosition(PicturePosition);
}

template <class T> Msforms_97::fmPicturePosition __fastcall
TCOMICommandButtonT<T>::get_PicturePosition(void)
{
  Msforms_97::fmPicturePosition PicturePosition;
  OLECHECK(this->get_PicturePosition((Msforms_97::fmPicturePosition*)&PicturePosition));
  return PicturePosition;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_Accelerator(BSTR Accelerator/*[in]*/)
{
  return (*this)->set_Accelerator(Accelerator);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_Accelerator(BSTR* Accelerator/*[out,retval]*/)
{
  return (*this)->get_Accelerator(Accelerator);
}

template <class T> BSTR __fastcall
TCOMICommandButtonT<T>::get_Accelerator(void)
{
  BSTR Accelerator = 0;
  OLECHECK(this->get_Accelerator((BSTR*)&Accelerator));
  return Accelerator;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/)
{
  return (*this)->set_WordWrap(WordWrap);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_WordWrap(TOLEBOOL WordWrap/*[in]*/)
{
  return (*this)->set_WordWrap(VARIANT_BOOL)WordWrap);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/)
{
  return (*this)->get_WordWrap(WordWrap);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_WordWrap(TOLEBOOL* WordWrap/*[out,retval]*/)
{
  return (*this)->get_WordWrap(VARIANT_BOOL*)WordWrap);
}

template <class T> TOLEBOOL __fastcall
TCOMICommandButtonT<T>::get_WordWrap(void)
{
  VARIANT_BOOL WordWrap;
  OLECHECK(this->get_WordWrap((VARIANT_BOOL*)&WordWrap));
  return (TOLEBOOL)WordWrap;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_Value(VARIANT_BOOL fValue/*[in]*/)
{
  return (*this)->set_Value(fValue);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_Value(TOLEBOOL fValue/*[in]*/)
{
  return (*this)->set_Value(VARIANT_BOOL)fValue);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_Value(VARIANT_BOOL* fValue/*[out,retval]*/)
{
  return (*this)->get_Value(fValue);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_Value(TOLEBOOL* fValue/*[out,retval]*/)
{
  return (*this)->get_Value(VARIANT_BOOL*)fValue);
}

template <class T> TOLEBOOL __fastcall
TCOMICommandButtonT<T>::get_Value(void)
{
  VARIANT_BOOL fValue;
  OLECHECK(this->get_Value((VARIANT_BOOL*)&fValue));
  return (TOLEBOOL)fValue;
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::set_FontWeight(short FontWeight/*[in]*/)
{
  return (*this)->set_FontWeight(FontWeight);
}

template <class T> HRESULT __fastcall
TCOMICommandButtonT<T>::get_FontWeight(short* FontWeight/*[out,retval]*/)
{
  return (*this)->get_FontWeight(FontWeight);
}

template <class T> short __fastcall
TCOMICommandButtonT<T>::get_FontWeight(void)
{
  short FontWeight;
  OLECHECK(this->get_FontWeight((short*)&FontWeight));
  return FontWeight;
}

// *********************************************************************//
// DispIntf:  ICommandButton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04598FC4-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_AutoSize(VARIANT_BOOL fvbAutoSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<1> _args;
  _args[1] = fvbAutoSize /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_AutoSize(VARIANT_BOOL* fvbAutoSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fvbAutoSize /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommandButtonDispT<T>::get_AutoSize(void)
{
  VARIANT_BOOL fvbAutoSize;
  this->get_AutoSize((VARIANT_BOOL*)&fvbAutoSize);
  return fvbAutoSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
ICommandButtonDispT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(-502));
  TAutoArgs<1> _args;
  _args[1] = (int)BackStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(-502));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BackStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmBackStyle __fastcall
ICommandButtonDispT<T>::get_BackStyle(void)
{
  Msforms_97::fmBackStyle BackStyle;
  this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle);
  return BackStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_Caption(BSTR bstrCaption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<1> _args;
  _args[1] = bstrCaption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_Caption(BSTR* bstrCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bstrCaption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICommandButtonDispT<T>::get_Caption(void)
{
  BSTR bstrCaption;
  this->get_Caption((BSTR*)&bstrCaption);
  return bstrCaption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_Enabled(VARIANT_BOOL fEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = fEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommandButtonDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL fEnabled;
  this->get_Enabled((VARIANT_BOOL*)&fEnabled);
  return fEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Font_Reserved"), DISPID(2147483135));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Param1 /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Font /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp***)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp** __fastcall
ICommandButtonDispT<T>::get_Font(void)
{
  IFontDisp** Font;
  this->get_Font((IFontDisp***)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_FontBold(VARIANT_BOOL FontBold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = FontBold /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontBold /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommandButtonDispT<T>::get_FontBold(void)
{
  VARIANT_BOOL FontBold;
  this->get_FontBold((VARIANT_BOOL*)&FontBold);
  return FontBold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = FontItalic /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontItalic /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommandButtonDispT<T>::get_FontItalic(void)
{
  VARIANT_BOOL FontItalic;
  this->get_FontItalic((VARIANT_BOOL*)&FontItalic);
  return FontItalic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = FontName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICommandButtonDispT<T>::get_FontName(void)
{
  BSTR FontName;
  this->get_FontName((BSTR*)&FontName);
  return FontName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_FontSize(CURRENCY FontSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = FontSize /*[VT_CY:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_FontSize(CURRENCY* FontSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontSize /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
ICommandButtonDispT<T>::get_FontSize(void)
{
  CURRENCY FontSize;
  this->get_FontSize((CURRENCY*)&FontSize);
  return FontSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = FontStrikethru /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontStrikethru /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommandButtonDispT<T>::get_FontStrikethru(void)
{
  VARIANT_BOOL FontStrikethru;
  this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru);
  return FontStrikethru;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = FontUnderline /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontUnderline /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommandButtonDispT<T>::get_FontUnderline(void)
{
  VARIANT_BOOL FontUnderline;
  this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline);
  return FontUnderline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<1> _args;
  _args[1] = ForeColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ForeColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
ICommandButtonDispT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_TakeFocusOnClick(VARIANT_BOOL TakeFocusOnClick/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TakeFocusOnClick"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = TakeFocusOnClick /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_TakeFocusOnClick(VARIANT_BOOL* TakeFocusOnClick/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TakeFocusOnClick"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TakeFocusOnClick /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommandButtonDispT<T>::get_TakeFocusOnClick(void)
{
  VARIANT_BOOL TakeFocusOnClick;
  this->get_TakeFocusOnClick((VARIANT_BOOL*)&TakeFocusOnClick);
  return TakeFocusOnClick;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_Locked(VARIANT_BOOL fLocked/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = fLocked /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_Locked(VARIANT_BOOL* fLocked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fLocked /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommandButtonDispT<T>::get_Locked(void)
{
  VARIANT_BOOL fLocked;
  this->get_Locked((VARIANT_BOOL*)&fLocked);
  return fLocked;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)MouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
ICommandButtonDispT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  this->get_MouseIcon((IPictureDisp***)&MouseIcon);
  return MouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_MousePointer(Msforms_97::fmMousePointer mouseptr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<1> _args;
  _args[1] = (int)mouseptr /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_MousePointer(Msforms_97::fmMousePointer* mouseptr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)mouseptr /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMousePointer __fastcall
ICommandButtonDispT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer mouseptr;
  this->get_MousePointer((Msforms_97::fmMousePointer*)&mouseptr);
  return mouseptr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_Picture(IPictureDisp** Picture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)Picture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::_set_Picture(IPictureDisp** Picture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)Picture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_Picture(IPictureDisp*** Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)Picture /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
ICommandButtonDispT<T>::get_Picture(void)
{
  IPictureDisp** Picture;
  this->get_Picture((IPictureDisp***)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_PicturePosition(Msforms_97::fmPicturePosition PicturePosition/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PicturePosition"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = (int)PicturePosition /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_PicturePosition(Msforms_97::fmPicturePosition* PicturePosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PicturePosition"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PicturePosition /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmPicturePosition __fastcall
ICommandButtonDispT<T>::get_PicturePosition(void)
{
  Msforms_97::fmPicturePosition PicturePosition;
  this->get_PicturePosition((Msforms_97::fmPicturePosition*)&PicturePosition);
  return PicturePosition;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_Accelerator(BSTR Accelerator/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accelerator"), DISPID(-543));
  TAutoArgs<1> _args;
  _args[1] = Accelerator /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_Accelerator(BSTR* Accelerator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accelerator"), DISPID(-543));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Accelerator /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICommandButtonDispT<T>::get_Accelerator(void)
{
  BSTR Accelerator;
  this->get_Accelerator((BSTR*)&Accelerator);
  return Accelerator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(-536));
  TAutoArgs<1> _args;
  _args[1] = WordWrap /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(-536));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(WordWrap /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommandButtonDispT<T>::get_WordWrap(void)
{
  VARIANT_BOOL WordWrap;
  this->get_WordWrap((VARIANT_BOOL*)&WordWrap);
  return WordWrap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_Value(VARIANT_BOOL fValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = fValue /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_Value(VARIANT_BOOL* fValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fValue /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommandButtonDispT<T>::get_Value(void)
{
  VARIANT_BOOL fValue;
  this->get_Value((VARIANT_BOOL*)&fValue);
  return fValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::set_FontWeight(short FontWeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = FontWeight /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ICommandButtonDispT<T>::get_FontWeight(short* FontWeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontWeight /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
ICommandButtonDispT<T>::get_FontWeight(void)
{
  short FontWeight;
  this->get_FontWeight((short*)&FontWeight);
  return FontWeight;
}

// *********************************************************************//
// SmartIntf: TCOMIMdcText
// Interface: IMdcText
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_AutoSize(VARIANT_BOOL AutoSize/*[in]*/)
{
  return (*this)->set_AutoSize(AutoSize);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_AutoSize(TOLEBOOL AutoSize/*[in]*/)
{
  return (*this)->set_AutoSize(VARIANT_BOOL)AutoSize);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_AutoSize(VARIANT_BOOL* AutoSize/*[out,retval]*/)
{
  return (*this)->get_AutoSize(AutoSize);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_AutoSize(TOLEBOOL* AutoSize/*[out,retval]*/)
{
  return (*this)->get_AutoSize(VARIANT_BOOL*)AutoSize);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcTextT<T>::get_AutoSize(void)
{
  VARIANT_BOOL AutoSize;
  OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&AutoSize));
  return (TOLEBOOL)AutoSize;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_AutoTab(VARIANT_BOOL AutoTab/*[in]*/)
{
  return (*this)->set_AutoTab(AutoTab);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_AutoTab(TOLEBOOL AutoTab/*[in]*/)
{
  return (*this)->set_AutoTab(VARIANT_BOOL)AutoTab);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_AutoTab(VARIANT_BOOL* AutoTab/*[out,retval]*/)
{
  return (*this)->get_AutoTab(AutoTab);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_AutoTab(TOLEBOOL* AutoTab/*[out,retval]*/)
{
  return (*this)->get_AutoTab(VARIANT_BOOL*)AutoTab);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcTextT<T>::get_AutoTab(void)
{
  VARIANT_BOOL AutoTab;
  OLECHECK(this->get_AutoTab((VARIANT_BOOL*)&AutoTab));
  return (TOLEBOOL)AutoTab;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_AutoWordSelect(VARIANT_BOOL AutoWordSelect/*[in]*/)
{
  return (*this)->set_AutoWordSelect(AutoWordSelect);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_AutoWordSelect(TOLEBOOL AutoWordSelect/*[in]*/)
{
  return (*this)->set_AutoWordSelect(VARIANT_BOOL)AutoWordSelect);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_AutoWordSelect(VARIANT_BOOL* AutoWordSelect/*[out,retval]*/)
{
  return (*this)->get_AutoWordSelect(AutoWordSelect);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_AutoWordSelect(TOLEBOOL* AutoWordSelect/*[out,retval]*/)
{
  return (*this)->get_AutoWordSelect(VARIANT_BOOL*)AutoWordSelect);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcTextT<T>::get_AutoWordSelect(void)
{
  VARIANT_BOOL AutoWordSelect;
  OLECHECK(this->get_AutoWordSelect((VARIANT_BOOL*)&AutoWordSelect));
  return (TOLEBOOL)AutoWordSelect;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  return (*this)->set_BackColor(BackColor);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  return (*this)->get_BackColor(BackColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIMdcTextT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
  return BackColor;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/)
{
  return (*this)->set_BackStyle(BackStyle);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/)
{
  return (*this)->get_BackStyle(BackStyle);
}

template <class T> Msforms_97::fmBackStyle __fastcall
TCOMIMdcTextT<T>::get_BackStyle(void)
{
  Msforms_97::fmBackStyle BackStyle;
  OLECHECK(this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle));
  return BackStyle;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/)
{
  return (*this)->set_BorderColor(BorderColor);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/)
{
  return (*this)->get_BorderColor(BorderColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIMdcTextT<T>::get_BorderColor(void)
{
  Msforms_97::OLE_COLOR BorderColor;
  OLECHECK(this->get_BorderColor((Msforms_97::OLE_COLOR*)&BorderColor));
  return BorderColor;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/)
{
  return (*this)->set_BorderStyle(BorderStyle);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(BorderStyle);
}

template <class T> Msforms_97::fmBorderStyle __fastcall
TCOMIMdcTextT<T>::get_BorderStyle(void)
{
  Msforms_97::fmBorderStyle BorderStyle;
  OLECHECK(this->get_BorderStyle((Msforms_97::fmBorderStyle*)&BorderStyle));
  return BorderStyle;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/)
{
  return (*this)->set_BordersSuppress(BordersSuppress);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_BordersSuppress(TOLEBOOL BordersSuppress/*[in]*/)
{
  return (*this)->set_BordersSuppress(VARIANT_BOOL)BordersSuppress);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/)
{
  return (*this)->get_BordersSuppress(BordersSuppress);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_BordersSuppress(TOLEBOOL* BordersSuppress/*[out,retval]*/)
{
  return (*this)->get_BordersSuppress(VARIANT_BOOL*)BordersSuppress);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcTextT<T>::get_BordersSuppress(void)
{
  VARIANT_BOOL BordersSuppress;
  OLECHECK(this->get_BordersSuppress((VARIANT_BOOL*)&BordersSuppress));
  return (TOLEBOOL)BordersSuppress;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/)
{
  return (*this)->get_CanPaste(CanPaste);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_CanPaste(TOLEBOOL* CanPaste/*[out,retval]*/)
{
  return (*this)->get_CanPaste(VARIANT_BOOL*)CanPaste);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcTextT<T>::get_CanPaste(void)
{
  VARIANT_BOOL CanPaste;
  OLECHECK(this->get_CanPaste((VARIANT_BOOL*)&CanPaste));
  return (TOLEBOOL)CanPaste;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_CurLine(long CurLine/*[in]*/)
{
  return (*this)->set_CurLine(CurLine);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_CurLine(long* CurLine/*[out,retval]*/)
{
  return (*this)->get_CurLine(CurLine);
}

template <class T> long __fastcall
TCOMIMdcTextT<T>::get_CurLine(void)
{
  long CurLine;
  OLECHECK(this->get_CurLine((long*)&CurLine));
  return CurLine;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_CurTargetX(long* CurTargetX/*[out,retval]*/)
{
  return (*this)->get_CurTargetX(CurTargetX);
}

template <class T> long __fastcall
TCOMIMdcTextT<T>::get_CurTargetX(void)
{
  long CurTargetX;
  OLECHECK(this->get_CurTargetX((long*)&CurTargetX));
  return CurTargetX;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_CurTargetY(long* CurTargetY/*[out,retval]*/)
{
  return (*this)->get_CurTargetY(CurTargetY);
}

template <class T> long __fastcall
TCOMIMdcTextT<T>::get_CurTargetY(void)
{
  long CurTargetY;
  OLECHECK(this->get_CurTargetY((long*)&CurTargetY));
  return CurTargetY;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_CurX(long CurX/*[in]*/)
{
  return (*this)->set_CurX(CurX);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_CurX(long* CurX/*[out,retval]*/)
{
  return (*this)->get_CurX(CurX);
}

template <class T> long __fastcall
TCOMIMdcTextT<T>::get_CurX(void)
{
  long CurX;
  OLECHECK(this->get_CurX((long*)&CurX));
  return CurX;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_CurY(long CurY/*[in]*/)
{
  return (*this)->set_CurY(CurY);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_CurY(long* CurY/*[out,retval]*/)
{
  return (*this)->get_CurY(CurY);
}

template <class T> long __fastcall
TCOMIMdcTextT<T>::get_CurY(void)
{
  long CurY;
  OLECHECK(this->get_CurY((long*)&CurY));
  return CurY;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_DropButtonStyle(Msforms_97::fmDropButtonStyle DropButtonStyle/*[in]*/)
{
  return (*this)->set_DropButtonStyle(DropButtonStyle);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_DropButtonStyle(Msforms_97::fmDropButtonStyle* DropButtonStyle/*[out,retval]*/)
{
  return (*this)->get_DropButtonStyle(DropButtonStyle);
}

template <class T> Msforms_97::fmDropButtonStyle __fastcall
TCOMIMdcTextT<T>::get_DropButtonStyle(void)
{
  Msforms_97::fmDropButtonStyle DropButtonStyle;
  OLECHECK(this->get_DropButtonStyle((Msforms_97::fmDropButtonStyle*)&DropButtonStyle));
  return DropButtonStyle;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_EnterKeyBehavior(VARIANT_BOOL EnterKeyBehavior/*[in]*/)
{
  return (*this)->set_EnterKeyBehavior(EnterKeyBehavior);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_EnterKeyBehavior(TOLEBOOL EnterKeyBehavior/*[in]*/)
{
  return (*this)->set_EnterKeyBehavior(VARIANT_BOOL)EnterKeyBehavior);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_EnterKeyBehavior(VARIANT_BOOL* EnterKeyBehavior/*[out,retval]*/)
{
  return (*this)->get_EnterKeyBehavior(EnterKeyBehavior);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_EnterKeyBehavior(TOLEBOOL* EnterKeyBehavior/*[out,retval]*/)
{
  return (*this)->get_EnterKeyBehavior(VARIANT_BOOL*)EnterKeyBehavior);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcTextT<T>::get_EnterKeyBehavior(void)
{
  VARIANT_BOOL EnterKeyBehavior;
  OLECHECK(this->get_EnterKeyBehavior((VARIANT_BOOL*)&EnterKeyBehavior));
  return (TOLEBOOL)EnterKeyBehavior;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  return (*this)->set_Enabled(Enabled);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_Enabled(TOLEBOOL Enabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)Enabled);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(Enabled);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_Enabled(TOLEBOOL* Enabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)Enabled);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcTextT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Enabled));
  return (TOLEBOOL)Enabled;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  return (*this)->set__Font_Reserved(Param1);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set__Font_Reserved(IFontDisp* Param1/*[in]*/)
{
  return (*this)->set__Font_Reserved(IFontDisp**)Param1);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  return (*this)->_set_Font(Font);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::_set_Font(IFontDisp* Font/*[in]*/)
{
  return (*this)->_set_Font(IFontDisp**)Font);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  return (*this)->get_Font(Font);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_Font(IFontDisp** Font/*[out,retval]*/)
{
  return (*this)->get_Font(IFontDisp***)Font);
}

template <class T> IFontDisp* __fastcall
TCOMIMdcTextT<T>::get_Font(void)
{
  IFontDisp** Font;
  OLECHECK(this->get_Font((IFontDisp***)&Font));
  return (IFontDisp*)Font;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_FontBold(VARIANT_BOOL FontBold/*[in]*/)
{
  return (*this)->set_FontBold(FontBold);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_FontBold(TOLEBOOL FontBold/*[in]*/)
{
  return (*this)->set_FontBold(VARIANT_BOOL)FontBold);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/)
{
  return (*this)->get_FontBold(FontBold);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_FontBold(TOLEBOOL* FontBold/*[out,retval]*/)
{
  return (*this)->get_FontBold(VARIANT_BOOL*)FontBold);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcTextT<T>::get_FontBold(void)
{
  VARIANT_BOOL FontBold;
  OLECHECK(this->get_FontBold((VARIANT_BOOL*)&FontBold));
  return (TOLEBOOL)FontBold;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/)
{
  return (*this)->set_FontItalic(FontItalic);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_FontItalic(TOLEBOOL FontItalic/*[in]*/)
{
  return (*this)->set_FontItalic(VARIANT_BOOL)FontItalic);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/)
{
  return (*this)->get_FontItalic(FontItalic);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_FontItalic(TOLEBOOL* FontItalic/*[out,retval]*/)
{
  return (*this)->get_FontItalic(VARIANT_BOOL*)FontItalic);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcTextT<T>::get_FontItalic(void)
{
  VARIANT_BOOL FontItalic;
  OLECHECK(this->get_FontItalic((VARIANT_BOOL*)&FontItalic));
  return (TOLEBOOL)FontItalic;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  return (*this)->set_FontName(FontName);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  return (*this)->get_FontName(FontName);
}

template <class T> BSTR __fastcall
TCOMIMdcTextT<T>::get_FontName(void)
{
  BSTR FontName = 0;
  OLECHECK(this->get_FontName((BSTR*)&FontName));
  return FontName;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_FontSize(CURRENCY FontSize/*[in]*/)
{
  return (*this)->set_FontSize(FontSize);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_FontSize(CURRENCY* FontSize/*[out,retval]*/)
{
  return (*this)->get_FontSize(FontSize);
}

template <class T> CURRENCY __fastcall
TCOMIMdcTextT<T>::get_FontSize(void)
{
  CURRENCY FontSize;
  OLECHECK(this->get_FontSize((CURRENCY*)&FontSize));
  return FontSize;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/)
{
  return (*this)->set_FontStrikethru(FontStrikethru);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_FontStrikethru(TOLEBOOL FontStrikethru/*[in]*/)
{
  return (*this)->set_FontStrikethru(VARIANT_BOOL)FontStrikethru);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/)
{
  return (*this)->get_FontStrikethru(FontStrikethru);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_FontStrikethru(TOLEBOOL* FontStrikethru/*[out,retval]*/)
{
  return (*this)->get_FontStrikethru(VARIANT_BOOL*)FontStrikethru);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcTextT<T>::get_FontStrikethru(void)
{
  VARIANT_BOOL FontStrikethru;
  OLECHECK(this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru));
  return (TOLEBOOL)FontStrikethru;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/)
{
  return (*this)->set_FontUnderline(FontUnderline);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_FontUnderline(TOLEBOOL FontUnderline/*[in]*/)
{
  return (*this)->set_FontUnderline(VARIANT_BOOL)FontUnderline);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(FontUnderline);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_FontUnderline(TOLEBOOL* FontUnderline/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(VARIANT_BOOL*)FontUnderline);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcTextT<T>::get_FontUnderline(void)
{
  VARIANT_BOOL FontUnderline;
  OLECHECK(this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline));
  return (TOLEBOOL)FontUnderline;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_FontWeight(short FontWeight/*[in]*/)
{
  return (*this)->set_FontWeight(FontWeight);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_FontWeight(short* FontWeight/*[out,retval]*/)
{
  return (*this)->get_FontWeight(FontWeight);
}

template <class T> short __fastcall
TCOMIMdcTextT<T>::get_FontWeight(void)
{
  short FontWeight;
  OLECHECK(this->get_FontWeight((short*)&FontWeight));
  return FontWeight;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  return (*this)->set_ForeColor(ForeColor);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  return (*this)->get_ForeColor(ForeColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIMdcTextT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
  return ForeColor;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_HideSelection(VARIANT_BOOL HideSelection/*[in]*/)
{
  return (*this)->set_HideSelection(HideSelection);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_HideSelection(TOLEBOOL HideSelection/*[in]*/)
{
  return (*this)->set_HideSelection(VARIANT_BOOL)HideSelection);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_HideSelection(VARIANT_BOOL* HideSelection/*[out,retval]*/)
{
  return (*this)->get_HideSelection(HideSelection);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_HideSelection(TOLEBOOL* HideSelection/*[out,retval]*/)
{
  return (*this)->get_HideSelection(VARIANT_BOOL*)HideSelection);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcTextT<T>::get_HideSelection(void)
{
  VARIANT_BOOL HideSelection;
  OLECHECK(this->get_HideSelection((VARIANT_BOOL*)&HideSelection));
  return (TOLEBOOL)HideSelection;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_IntegralHeight(VARIANT_BOOL IntegralHeight/*[in]*/)
{
  return (*this)->set_IntegralHeight(IntegralHeight);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_IntegralHeight(TOLEBOOL IntegralHeight/*[in]*/)
{
  return (*this)->set_IntegralHeight(VARIANT_BOOL)IntegralHeight);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_IntegralHeight(VARIANT_BOOL* IntegralHeight/*[out,retval]*/)
{
  return (*this)->get_IntegralHeight(IntegralHeight);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_IntegralHeight(TOLEBOOL* IntegralHeight/*[out,retval]*/)
{
  return (*this)->get_IntegralHeight(VARIANT_BOOL*)IntegralHeight);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcTextT<T>::get_IntegralHeight(void)
{
  VARIANT_BOOL IntegralHeight;
  OLECHECK(this->get_IntegralHeight((VARIANT_BOOL*)&IntegralHeight));
  return (TOLEBOOL)IntegralHeight;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_LineCount(long* LineCount/*[out,retval]*/)
{
  return (*this)->get_LineCount(LineCount);
}

template <class T> long __fastcall
TCOMIMdcTextT<T>::get_LineCount(void)
{
  long LineCount;
  OLECHECK(this->get_LineCount((long*)&LineCount));
  return LineCount;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_Locked(VARIANT_BOOL Locked/*[in]*/)
{
  return (*this)->set_Locked(Locked);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_Locked(TOLEBOOL Locked/*[in]*/)
{
  return (*this)->set_Locked(VARIANT_BOOL)Locked);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/)
{
  return (*this)->get_Locked(Locked);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_Locked(TOLEBOOL* Locked/*[out,retval]*/)
{
  return (*this)->get_Locked(VARIANT_BOOL*)Locked);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcTextT<T>::get_Locked(void)
{
  VARIANT_BOOL Locked;
  OLECHECK(this->get_Locked((VARIANT_BOOL*)&Locked));
  return (TOLEBOOL)Locked;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_MaxLength(long MaxLength/*[in]*/)
{
  return (*this)->set_MaxLength(MaxLength);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_MaxLength(long* MaxLength/*[out,retval]*/)
{
  return (*this)->get_MaxLength(MaxLength);
}

template <class T> long __fastcall
TCOMIMdcTextT<T>::get_MaxLength(void)
{
  long MaxLength;
  OLECHECK(this->get_MaxLength((long*)&MaxLength));
  return MaxLength;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::_set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(IPictureDisp***)MouseIcon);
}

template <class T> IPictureDisp* __fastcall
TCOMIMdcTextT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
  return (IPictureDisp*)MouseIcon;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  return (*this)->set_MousePointer(MousePointer);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  return (*this)->get_MousePointer(MousePointer);
}

template <class T> Msforms_97::fmMousePointer __fastcall
TCOMIMdcTextT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
  return MousePointer;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_MultiLine(VARIANT_BOOL MultiLine/*[in]*/)
{
  return (*this)->set_MultiLine(MultiLine);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_MultiLine(TOLEBOOL MultiLine/*[in]*/)
{
  return (*this)->set_MultiLine(VARIANT_BOOL)MultiLine);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_MultiLine(VARIANT_BOOL* MultiLine/*[out,retval]*/)
{
  return (*this)->get_MultiLine(MultiLine);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_MultiLine(TOLEBOOL* MultiLine/*[out,retval]*/)
{
  return (*this)->get_MultiLine(VARIANT_BOOL*)MultiLine);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcTextT<T>::get_MultiLine(void)
{
  VARIANT_BOOL MultiLine;
  OLECHECK(this->get_MultiLine((VARIANT_BOOL*)&MultiLine));
  return (TOLEBOOL)MultiLine;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_PasswordChar(BSTR PasswordChar/*[in]*/)
{
  return (*this)->set_PasswordChar(PasswordChar);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_PasswordChar(BSTR* PasswordChar/*[out,retval]*/)
{
  return (*this)->get_PasswordChar(PasswordChar);
}

template <class T> BSTR __fastcall
TCOMIMdcTextT<T>::get_PasswordChar(void)
{
  BSTR PasswordChar = 0;
  OLECHECK(this->get_PasswordChar((BSTR*)&PasswordChar));
  return PasswordChar;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_ScrollBars(Msforms_97::fmScrollBars ScrollBars/*[in]*/)
{
  return (*this)->set_ScrollBars(ScrollBars);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_ScrollBars(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/)
{
  return (*this)->get_ScrollBars(ScrollBars);
}

template <class T> Msforms_97::fmScrollBars __fastcall
TCOMIMdcTextT<T>::get_ScrollBars(void)
{
  Msforms_97::fmScrollBars ScrollBars;
  OLECHECK(this->get_ScrollBars((Msforms_97::fmScrollBars*)&ScrollBars));
  return ScrollBars;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_SelectionMargin(VARIANT_BOOL SelectionMargin/*[in]*/)
{
  return (*this)->set_SelectionMargin(SelectionMargin);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_SelectionMargin(TOLEBOOL SelectionMargin/*[in]*/)
{
  return (*this)->set_SelectionMargin(VARIANT_BOOL)SelectionMargin);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_SelectionMargin(VARIANT_BOOL* SelectionMargin/*[out,retval]*/)
{
  return (*this)->get_SelectionMargin(SelectionMargin);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_SelectionMargin(TOLEBOOL* SelectionMargin/*[out,retval]*/)
{
  return (*this)->get_SelectionMargin(VARIANT_BOOL*)SelectionMargin);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcTextT<T>::get_SelectionMargin(void)
{
  VARIANT_BOOL SelectionMargin;
  OLECHECK(this->get_SelectionMargin((VARIANT_BOOL*)&SelectionMargin));
  return (TOLEBOOL)SelectionMargin;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_SelLength(long SelLength/*[in]*/)
{
  return (*this)->set_SelLength(SelLength);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_SelLength(long* SelLength/*[out,retval]*/)
{
  return (*this)->get_SelLength(SelLength);
}

template <class T> long __fastcall
TCOMIMdcTextT<T>::get_SelLength(void)
{
  long SelLength;
  OLECHECK(this->get_SelLength((long*)&SelLength));
  return SelLength;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_SelStart(long SelStart/*[in]*/)
{
  return (*this)->set_SelStart(SelStart);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_SelStart(long* SelStart/*[out,retval]*/)
{
  return (*this)->get_SelStart(SelStart);
}

template <class T> long __fastcall
TCOMIMdcTextT<T>::get_SelStart(void)
{
  long SelStart;
  OLECHECK(this->get_SelStart((long*)&SelStart));
  return SelStart;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_SelText(BSTR SelText/*[in]*/)
{
  return (*this)->set_SelText(SelText);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_SelText(BSTR* SelText/*[out,retval]*/)
{
  return (*this)->get_SelText(SelText);
}

template <class T> BSTR __fastcall
TCOMIMdcTextT<T>::get_SelText(void)
{
  BSTR SelText = 0;
  OLECHECK(this->get_SelText((BSTR*)&SelText));
  return SelText;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen/*[in]*/)
{
  return (*this)->set_ShowDropButtonWhen(ShowDropButtonWhen);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen* ShowDropButtonWhen/*[out,retval]*/)
{
  return (*this)->get_ShowDropButtonWhen(ShowDropButtonWhen);
}

template <class T> Msforms_97::fmShowDropButtonWhen __fastcall
TCOMIMdcTextT<T>::get_ShowDropButtonWhen(void)
{
  Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen;
  OLECHECK(this->get_ShowDropButtonWhen((Msforms_97::fmShowDropButtonWhen*)&ShowDropButtonWhen));
  return ShowDropButtonWhen;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/)
{
  return (*this)->set_SpecialEffect(SpecialEffect);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(SpecialEffect);
}

template <class T> Msforms_97::fmSpecialEffect __fastcall
TCOMIMdcTextT<T>::get_SpecialEffect(void)
{
  Msforms_97::fmSpecialEffect SpecialEffect;
  OLECHECK(this->get_SpecialEffect((Msforms_97::fmSpecialEffect*)&SpecialEffect));
  return SpecialEffect;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_TabKeyBehavior(VARIANT_BOOL TabKeyBehavior/*[in]*/)
{
  return (*this)->set_TabKeyBehavior(TabKeyBehavior);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_TabKeyBehavior(TOLEBOOL TabKeyBehavior/*[in]*/)
{
  return (*this)->set_TabKeyBehavior(VARIANT_BOOL)TabKeyBehavior);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_TabKeyBehavior(VARIANT_BOOL* TabKeyBehavior/*[out,retval]*/)
{
  return (*this)->get_TabKeyBehavior(TabKeyBehavior);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_TabKeyBehavior(TOLEBOOL* TabKeyBehavior/*[out,retval]*/)
{
  return (*this)->get_TabKeyBehavior(VARIANT_BOOL*)TabKeyBehavior);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcTextT<T>::get_TabKeyBehavior(void)
{
  VARIANT_BOOL TabKeyBehavior;
  OLECHECK(this->get_TabKeyBehavior((VARIANT_BOOL*)&TabKeyBehavior));
  return (TOLEBOOL)TabKeyBehavior;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_Text(BSTR Text/*[in]*/)
{
  return (*this)->set_Text(Text);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_Text(BSTR* Text/*[out,retval]*/)
{
  return (*this)->get_Text(Text);
}

template <class T> BSTR __fastcall
TCOMIMdcTextT<T>::get_Text(void)
{
  BSTR Text = 0;
  OLECHECK(this->get_Text((BSTR*)&Text));
  return Text;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/)
{
  return (*this)->set_TextAlign(TextAlign);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/)
{
  return (*this)->get_TextAlign(TextAlign);
}

template <class T> Msforms_97::fmTextAlign __fastcall
TCOMIMdcTextT<T>::get_TextAlign(void)
{
  Msforms_97::fmTextAlign TextAlign;
  OLECHECK(this->get_TextAlign((Msforms_97::fmTextAlign*)&TextAlign));
  return TextAlign;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_TextLength(long* TextLength/*[out,retval]*/)
{
  return (*this)->get_TextLength(TextLength);
}

template <class T> long __fastcall
TCOMIMdcTextT<T>::get_TextLength(void)
{
  long TextLength;
  OLECHECK(this->get_TextLength((long*)&TextLength));
  return TextLength;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/)
{
  return (*this)->get_Valid(Valid);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_Valid(TOLEBOOL* Valid/*[out,retval]*/)
{
  return (*this)->get_Valid(VARIANT_BOOL*)Valid);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcTextT<T>::get_Valid(void)
{
  VARIANT_BOOL Valid;
  OLECHECK(this->get_Valid((VARIANT_BOOL*)&Valid));
  return (TOLEBOOL)Valid;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_Value(VARIANT* Value/*[in]*/)
{
  return (*this)->set_Value(Value);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  return (*this)->get_Value(Value);
}

template <class T> VARIANT __fastcall
TCOMIMdcTextT<T>::get_Value(void)
{
  VARIANT Value;
  OLECHECK(this->get_Value((VARIANT*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/)
{
  return (*this)->set_WordWrap(WordWrap);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_WordWrap(TOLEBOOL WordWrap/*[in]*/)
{
  return (*this)->set_WordWrap(VARIANT_BOOL)WordWrap);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/)
{
  return (*this)->get_WordWrap(WordWrap);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_WordWrap(TOLEBOOL* WordWrap/*[out,retval]*/)
{
  return (*this)->get_WordWrap(VARIANT_BOOL*)WordWrap);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcTextT<T>::get_WordWrap(void)
{
  VARIANT_BOOL WordWrap;
  OLECHECK(this->get_WordWrap((VARIANT_BOOL*)&WordWrap));
  return (TOLEBOOL)WordWrap;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::Copy(void)
{
  return (*this)->Copy();
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::Cut(void)
{
  return (*this)->Cut();
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::Paste(void)
{
  return (*this)->Paste();
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_IMEMode(Msforms_97::fmIMEMode IMEMode/*[in]*/)
{
  return (*this)->set_IMEMode(IMEMode);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_IMEMode(Msforms_97::fmIMEMode* IMEMode/*[out,retval]*/)
{
  return (*this)->get_IMEMode(IMEMode);
}

template <class T> Msforms_97::fmIMEMode __fastcall
TCOMIMdcTextT<T>::get_IMEMode(void)
{
  Msforms_97::fmIMEMode IMEMode;
  OLECHECK(this->get_IMEMode((Msforms_97::fmIMEMode*)&IMEMode));
  return IMEMode;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior EnterFieldBehavior/*[in]*/)
{
  return (*this)->set_EnterFieldBehavior(EnterFieldBehavior);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior* EnterFieldBehavior/*[out,retval]*/)
{
  return (*this)->get_EnterFieldBehavior(EnterFieldBehavior);
}

template <class T> Msforms_97::fmEnterFieldBehavior __fastcall
TCOMIMdcTextT<T>::get_EnterFieldBehavior(void)
{
  Msforms_97::fmEnterFieldBehavior EnterFieldBehavior;
  OLECHECK(this->get_EnterFieldBehavior((Msforms_97::fmEnterFieldBehavior*)&EnterFieldBehavior));
  return EnterFieldBehavior;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::set_DragBehavior(Msforms_97::fmDragBehavior DragBehavior/*[in]*/)
{
  return (*this)->set_DragBehavior(DragBehavior);
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_DragBehavior(Msforms_97::fmDragBehavior* DragBehavior/*[out,retval]*/)
{
  return (*this)->get_DragBehavior(DragBehavior);
}

template <class T> Msforms_97::fmDragBehavior __fastcall
TCOMIMdcTextT<T>::get_DragBehavior(void)
{
  Msforms_97::fmDragBehavior DragBehavior;
  OLECHECK(this->get_DragBehavior((Msforms_97::fmDragBehavior*)&DragBehavior));
  return DragBehavior;
}

template <class T> HRESULT __fastcall
TCOMIMdcTextT<T>::get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/)
{
  return (*this)->get_DisplayStyle(DisplayStyle);
}

template <class T> Msforms_97::fmDisplayStyle __fastcall
TCOMIMdcTextT<T>::get_DisplayStyle(void)
{
  Msforms_97::fmDisplayStyle DisplayStyle;
  OLECHECK(this->get_DisplayStyle((Msforms_97::fmDisplayStyle*)&DisplayStyle));
  return DisplayStyle;
}

// *********************************************************************//
// DispIntf:  IMdcText
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8BD21D13-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_AutoSize(VARIANT_BOOL AutoSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<1> _args;
  _args[1] = AutoSize /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_AutoSize(VARIANT_BOOL* AutoSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoSize /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcTextDispT<T>::get_AutoSize(void)
{
  VARIANT_BOOL AutoSize;
  this->get_AutoSize((VARIANT_BOOL*)&AutoSize);
  return AutoSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_AutoTab(VARIANT_BOOL AutoTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoTab"), DISPID(217));
  TAutoArgs<1> _args;
  _args[1] = AutoTab /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_AutoTab(VARIANT_BOOL* AutoTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoTab"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoTab /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcTextDispT<T>::get_AutoTab(void)
{
  VARIANT_BOOL AutoTab;
  this->get_AutoTab((VARIANT_BOOL*)&AutoTab);
  return AutoTab;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_AutoWordSelect(VARIANT_BOOL AutoWordSelect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoWordSelect"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = AutoWordSelect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_AutoWordSelect(VARIANT_BOOL* AutoWordSelect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoWordSelect"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoWordSelect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcTextDispT<T>::get_AutoWordSelect(void)
{
  VARIANT_BOOL AutoWordSelect;
  this->get_AutoWordSelect((VARIANT_BOOL*)&AutoWordSelect);
  return AutoWordSelect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IMdcTextDispT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(-502));
  TAutoArgs<1> _args;
  _args[1] = (int)BackStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(-502));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BackStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmBackStyle __fastcall
IMdcTextDispT<T>::get_BackStyle(void)
{
  Msforms_97::fmBackStyle BackStyle;
  this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle);
  return BackStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(-503));
  TAutoArgs<1> _args;
  _args[1] = BorderColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(-503));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BorderColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IMdcTextDispT<T>::get_BorderColor(void)
{
  Msforms_97::OLE_COLOR BorderColor;
  this->get_BorderColor((Msforms_97::OLE_COLOR*)&BorderColor);
  return BorderColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<1> _args;
  _args[1] = (int)BorderStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BorderStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmBorderStyle __fastcall
IMdcTextDispT<T>::get_BorderStyle(void)
{
  Msforms_97::fmBorderStyle BorderStyle;
  this->get_BorderStyle((Msforms_97::fmBorderStyle*)&BorderStyle);
  return BorderStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BordersSuppress"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = BordersSuppress /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BordersSuppress"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BordersSuppress /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcTextDispT<T>::get_BordersSuppress(void)
{
  VARIANT_BOOL BordersSuppress;
  this->get_BordersSuppress((VARIANT_BOOL*)&BordersSuppress);
  return BordersSuppress;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanPaste"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CanPaste /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcTextDispT<T>::get_CanPaste(void)
{
  VARIANT_BOOL CanPaste;
  this->get_CanPaste((VARIANT_BOOL*)&CanPaste);
  return CanPaste;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_CurLine(long CurLine/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurLine"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = CurLine /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_CurLine(long* CurLine/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurLine"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CurLine /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcTextDispT<T>::get_CurLine(void)
{
  long CurLine;
  this->get_CurLine((long*)&CurLine);
  return CurLine;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_CurTargetX(long* CurTargetX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurTargetX"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CurTargetX /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcTextDispT<T>::get_CurTargetX(void)
{
  long CurTargetX;
  this->get_CurTargetX((long*)&CurTargetX);
  return CurTargetX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_CurTargetY(long* CurTargetY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurTargetY"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CurTargetY /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcTextDispT<T>::get_CurTargetY(void)
{
  long CurTargetY;
  this->get_CurTargetY((long*)&CurTargetY);
  return CurTargetY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_CurX(long CurX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurX"), DISPID(208));
  TAutoArgs<1> _args;
  _args[1] = CurX /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_CurX(long* CurX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurX"), DISPID(208));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CurX /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcTextDispT<T>::get_CurX(void)
{
  long CurX;
  this->get_CurX((long*)&CurX);
  return CurX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_CurY(long CurY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurY"), DISPID(209));
  TAutoArgs<1> _args;
  _args[1] = CurY /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_CurY(long* CurY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurY"), DISPID(209));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CurY /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcTextDispT<T>::get_CurY(void)
{
  long CurY;
  this->get_CurY((long*)&CurY);
  return CurY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_DropButtonStyle(Msforms_97::fmDropButtonStyle DropButtonStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropButtonStyle"), DISPID(305));
  TAutoArgs<1> _args;
  _args[1] = (int)DropButtonStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_DropButtonStyle(Msforms_97::fmDropButtonStyle* DropButtonStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropButtonStyle"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DropButtonStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmDropButtonStyle __fastcall
IMdcTextDispT<T>::get_DropButtonStyle(void)
{
  Msforms_97::fmDropButtonStyle DropButtonStyle;
  this->get_DropButtonStyle((Msforms_97::fmDropButtonStyle*)&DropButtonStyle);
  return DropButtonStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_EnterKeyBehavior(VARIANT_BOOL EnterKeyBehavior/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnterKeyBehavior"), DISPID(-544));
  TAutoArgs<1> _args;
  _args[1] = EnterKeyBehavior /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_EnterKeyBehavior(VARIANT_BOOL* EnterKeyBehavior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnterKeyBehavior"), DISPID(-544));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(EnterKeyBehavior /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcTextDispT<T>::get_EnterKeyBehavior(void)
{
  VARIANT_BOOL EnterKeyBehavior;
  this->get_EnterKeyBehavior((VARIANT_BOOL*)&EnterKeyBehavior);
  return EnterKeyBehavior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Enabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcTextDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  this->get_Enabled((VARIANT_BOOL*)&Enabled);
  return Enabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Font_Reserved"), DISPID(2147483135));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Param1 /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Font /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp***)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp** __fastcall
IMdcTextDispT<T>::get_Font(void)
{
  IFontDisp** Font;
  this->get_Font((IFontDisp***)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_FontBold(VARIANT_BOOL FontBold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = FontBold /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontBold /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcTextDispT<T>::get_FontBold(void)
{
  VARIANT_BOOL FontBold;
  this->get_FontBold((VARIANT_BOOL*)&FontBold);
  return FontBold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = FontItalic /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontItalic /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcTextDispT<T>::get_FontItalic(void)
{
  VARIANT_BOOL FontItalic;
  this->get_FontItalic((VARIANT_BOOL*)&FontItalic);
  return FontItalic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = FontName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcTextDispT<T>::get_FontName(void)
{
  BSTR FontName;
  this->get_FontName((BSTR*)&FontName);
  return FontName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_FontSize(CURRENCY FontSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = FontSize /*[VT_CY:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_FontSize(CURRENCY* FontSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontSize /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMdcTextDispT<T>::get_FontSize(void)
{
  CURRENCY FontSize;
  this->get_FontSize((CURRENCY*)&FontSize);
  return FontSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = FontStrikethru /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontStrikethru /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcTextDispT<T>::get_FontStrikethru(void)
{
  VARIANT_BOOL FontStrikethru;
  this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru);
  return FontStrikethru;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = FontUnderline /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontUnderline /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcTextDispT<T>::get_FontUnderline(void)
{
  VARIANT_BOOL FontUnderline;
  this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline);
  return FontUnderline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_FontWeight(short FontWeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = FontWeight /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_FontWeight(short* FontWeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontWeight /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IMdcTextDispT<T>::get_FontWeight(void)
{
  short FontWeight;
  this->get_FontWeight((short*)&FontWeight);
  return FontWeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<1> _args;
  _args[1] = ForeColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ForeColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IMdcTextDispT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_HideSelection(VARIANT_BOOL HideSelection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideSelection"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = HideSelection /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_HideSelection(VARIANT_BOOL* HideSelection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideSelection"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HideSelection /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcTextDispT<T>::get_HideSelection(void)
{
  VARIANT_BOOL HideSelection;
  this->get_HideSelection((VARIANT_BOOL*)&HideSelection);
  return HideSelection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_IntegralHeight(VARIANT_BOOL IntegralHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IntegralHeight"), DISPID(604));
  TAutoArgs<1> _args;
  _args[1] = IntegralHeight /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_IntegralHeight(VARIANT_BOOL* IntegralHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IntegralHeight"), DISPID(604));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IntegralHeight /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcTextDispT<T>::get_IntegralHeight(void)
{
  VARIANT_BOOL IntegralHeight;
  this->get_IntegralHeight((VARIANT_BOOL*)&IntegralHeight);
  return IntegralHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_LineCount(long* LineCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineCount"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LineCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcTextDispT<T>::get_LineCount(void)
{
  long LineCount;
  this->get_LineCount((long*)&LineCount);
  return LineCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_Locked(VARIANT_BOOL Locked/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Locked /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Locked /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcTextDispT<T>::get_Locked(void)
{
  VARIANT_BOOL Locked;
  this->get_Locked((VARIANT_BOOL*)&Locked);
  return Locked;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_MaxLength(long MaxLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxLength"), DISPID(-533));
  TAutoArgs<1> _args;
  _args[1] = MaxLength /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_MaxLength(long* MaxLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxLength"), DISPID(-533));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MaxLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcTextDispT<T>::get_MaxLength(void)
{
  long MaxLength;
  this->get_MaxLength((long*)&MaxLength);
  return MaxLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)MouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
IMdcTextDispT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  this->get_MouseIcon((IPictureDisp***)&MouseIcon);
  return MouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<1> _args;
  _args[1] = (int)MousePointer /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MousePointer /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMousePointer __fastcall
IMdcTextDispT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer);
  return MousePointer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_MultiLine(VARIANT_BOOL MultiLine/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiLine"), DISPID(-537));
  TAutoArgs<1> _args;
  _args[1] = MultiLine /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_MultiLine(VARIANT_BOOL* MultiLine/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiLine"), DISPID(-537));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MultiLine /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcTextDispT<T>::get_MultiLine(void)
{
  VARIANT_BOOL MultiLine;
  this->get_MultiLine((VARIANT_BOOL*)&MultiLine);
  return MultiLine;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_PasswordChar(BSTR PasswordChar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PasswordChar"), DISPID(-534));
  TAutoArgs<1> _args;
  _args[1] = PasswordChar /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_PasswordChar(BSTR* PasswordChar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PasswordChar"), DISPID(-534));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PasswordChar /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcTextDispT<T>::get_PasswordChar(void)
{
  BSTR PasswordChar;
  this->get_PasswordChar((BSTR*)&PasswordChar);
  return PasswordChar;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_ScrollBars(Msforms_97::fmScrollBars ScrollBars/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollBars"), DISPID(-535));
  TAutoArgs<1> _args;
  _args[1] = (int)ScrollBars /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_ScrollBars(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollBars"), DISPID(-535));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ScrollBars /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmScrollBars __fastcall
IMdcTextDispT<T>::get_ScrollBars(void)
{
  Msforms_97::fmScrollBars ScrollBars;
  this->get_ScrollBars((Msforms_97::fmScrollBars*)&ScrollBars);
  return ScrollBars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_SelectionMargin(VARIANT_BOOL SelectionMargin/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectionMargin"), DISPID(220));
  TAutoArgs<1> _args;
  _args[1] = SelectionMargin /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_SelectionMargin(VARIANT_BOOL* SelectionMargin/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectionMargin"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SelectionMargin /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcTextDispT<T>::get_SelectionMargin(void)
{
  VARIANT_BOOL SelectionMargin;
  this->get_SelectionMargin((VARIANT_BOOL*)&SelectionMargin);
  return SelectionMargin;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_SelLength(long SelLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelLength"), DISPID(-548));
  TAutoArgs<1> _args;
  _args[1] = SelLength /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_SelLength(long* SelLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelLength"), DISPID(-548));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SelLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcTextDispT<T>::get_SelLength(void)
{
  long SelLength;
  this->get_SelLength((long*)&SelLength);
  return SelLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_SelStart(long SelStart/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelStart"), DISPID(-547));
  TAutoArgs<1> _args;
  _args[1] = SelStart /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_SelStart(long* SelStart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelStart"), DISPID(-547));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SelStart /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcTextDispT<T>::get_SelStart(void)
{
  long SelStart;
  this->get_SelStart((long*)&SelStart);
  return SelStart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_SelText(BSTR SelText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelText"), DISPID(-546));
  TAutoArgs<1> _args;
  _args[1] = SelText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_SelText(BSTR* SelText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelText"), DISPID(-546));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SelText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcTextDispT<T>::get_SelText(void)
{
  BSTR SelText;
  this->get_SelText((BSTR*)&SelText);
  return SelText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDropButtonWhen"), DISPID(304));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowDropButtonWhen /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen* ShowDropButtonWhen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDropButtonWhen"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowDropButtonWhen /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmShowDropButtonWhen __fastcall
IMdcTextDispT<T>::get_ShowDropButtonWhen(void)
{
  Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen;
  this->get_ShowDropButtonWhen((Msforms_97::fmShowDropButtonWhen*)&ShowDropButtonWhen);
  return ShowDropButtonWhen;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)SpecialEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SpecialEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmSpecialEffect __fastcall
IMdcTextDispT<T>::get_SpecialEffect(void)
{
  Msforms_97::fmSpecialEffect SpecialEffect;
  this->get_SpecialEffect((Msforms_97::fmSpecialEffect*)&SpecialEffect);
  return SpecialEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_TabKeyBehavior(VARIANT_BOOL TabKeyBehavior/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabKeyBehavior"), DISPID(-545));
  TAutoArgs<1> _args;
  _args[1] = TabKeyBehavior /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_TabKeyBehavior(VARIANT_BOOL* TabKeyBehavior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabKeyBehavior"), DISPID(-545));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TabKeyBehavior /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcTextDispT<T>::get_TabKeyBehavior(void)
{
  VARIANT_BOOL TabKeyBehavior;
  this->get_TabKeyBehavior((VARIANT_BOOL*)&TabKeyBehavior);
  return TabKeyBehavior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_Text(BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(-517));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_Text(BSTR* Text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(-517));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcTextDispT<T>::get_Text(void)
{
  BSTR Text;
  this->get_Text((BSTR*)&Text);
  return Text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(10004));
  TAutoArgs<1> _args;
  _args[1] = (int)TextAlign /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(10004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TextAlign /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmTextAlign __fastcall
IMdcTextDispT<T>::get_TextAlign(void)
{
  Msforms_97::fmTextAlign TextAlign;
  this->get_TextAlign((Msforms_97::fmTextAlign*)&TextAlign);
  return TextAlign;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_TextLength(long* TextLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextLength"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TextLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcTextDispT<T>::get_TextLength(void)
{
  long TextLength;
  this->get_TextLength((long*)&TextLength);
  return TextLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Valid"), DISPID(-524));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Valid /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcTextDispT<T>::get_Valid(void)
{
  VARIANT_BOOL Valid;
  this->get_Valid((VARIANT_BOOL*)&Valid);
  return Valid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_Value(VARIANT* Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcTextDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(-536));
  TAutoArgs<1> _args;
  _args[1] = WordWrap /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(-536));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(WordWrap /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcTextDispT<T>::get_WordWrap(void)
{
  VARIANT_BOOL WordWrap;
  this->get_WordWrap((VARIANT_BOOL*)&WordWrap);
  return WordWrap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::Copy()
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::Cut()
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(21));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::Paste()
{
  _TDispID _dispid(*this, OLETEXT("Paste"), DISPID(24));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_IMEMode(Msforms_97::fmIMEMode IMEMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IMEMode"), DISPID(-542));
  TAutoArgs<1> _args;
  _args[1] = (int)IMEMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_IMEMode(Msforms_97::fmIMEMode* IMEMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IMEMode"), DISPID(-542));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)IMEMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmIMEMode __fastcall
IMdcTextDispT<T>::get_IMEMode(void)
{
  Msforms_97::fmIMEMode IMEMode;
  this->get_IMEMode((Msforms_97::fmIMEMode*)&IMEMode);
  return IMEMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior EnterFieldBehavior/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnterFieldBehavior"), DISPID(224));
  TAutoArgs<1> _args;
  _args[1] = (int)EnterFieldBehavior /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior* EnterFieldBehavior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnterFieldBehavior"), DISPID(224));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EnterFieldBehavior /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmEnterFieldBehavior __fastcall
IMdcTextDispT<T>::get_EnterFieldBehavior(void)
{
  Msforms_97::fmEnterFieldBehavior EnterFieldBehavior;
  this->get_EnterFieldBehavior((Msforms_97::fmEnterFieldBehavior*)&EnterFieldBehavior);
  return EnterFieldBehavior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::set_DragBehavior(Msforms_97::fmDragBehavior DragBehavior/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DragBehavior"), DISPID(225));
  TAutoArgs<1> _args;
  _args[1] = (int)DragBehavior /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_DragBehavior(Msforms_97::fmDragBehavior* DragBehavior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DragBehavior"), DISPID(225));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DragBehavior /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmDragBehavior __fastcall
IMdcTextDispT<T>::get_DragBehavior(void)
{
  Msforms_97::fmDragBehavior DragBehavior;
  this->get_DragBehavior((Msforms_97::fmDragBehavior*)&DragBehavior);
  return DragBehavior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcTextDispT<T>::get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayStyle"), DISPID(-540));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmDisplayStyle __fastcall
IMdcTextDispT<T>::get_DisplayStyle(void)
{
  Msforms_97::fmDisplayStyle DisplayStyle;
  this->get_DisplayStyle((Msforms_97::fmDisplayStyle*)&DisplayStyle);
  return DisplayStyle;
}

// *********************************************************************//
// SmartIntf: TCOMIMdcList
// Interface: IMdcList
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  return (*this)->set_BackColor(BackColor);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  return (*this)->get_BackColor(BackColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIMdcListT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
  return BackColor;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/)
{
  return (*this)->set_BorderColor(BorderColor);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/)
{
  return (*this)->get_BorderColor(BorderColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIMdcListT<T>::get_BorderColor(void)
{
  Msforms_97::OLE_COLOR BorderColor;
  OLECHECK(this->get_BorderColor((Msforms_97::OLE_COLOR*)&BorderColor));
  return BorderColor;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/)
{
  return (*this)->set_BorderStyle(BorderStyle);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(BorderStyle);
}

template <class T> Msforms_97::fmBorderStyle __fastcall
TCOMIMdcListT<T>::get_BorderStyle(void)
{
  Msforms_97::fmBorderStyle BorderStyle;
  OLECHECK(this->get_BorderStyle((Msforms_97::fmBorderStyle*)&BorderStyle));
  return BorderStyle;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/)
{
  return (*this)->set_BordersSuppress(BordersSuppress);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_BordersSuppress(TOLEBOOL BordersSuppress/*[in]*/)
{
  return (*this)->set_BordersSuppress(VARIANT_BOOL)BordersSuppress);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/)
{
  return (*this)->get_BordersSuppress(BordersSuppress);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_BordersSuppress(TOLEBOOL* BordersSuppress/*[out,retval]*/)
{
  return (*this)->get_BordersSuppress(VARIANT_BOOL*)BordersSuppress);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcListT<T>::get_BordersSuppress(void)
{
  VARIANT_BOOL BordersSuppress;
  OLECHECK(this->get_BordersSuppress((VARIANT_BOOL*)&BordersSuppress));
  return (TOLEBOOL)BordersSuppress;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_BoundColumn(VARIANT* BoundColumn/*[in]*/)
{
  return (*this)->set_BoundColumn(BoundColumn);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_BoundColumn(VARIANT* BoundColumn/*[out,retval]*/)
{
  return (*this)->get_BoundColumn(BoundColumn);
}

template <class T> VARIANT __fastcall
TCOMIMdcListT<T>::get_BoundColumn(void)
{
  VARIANT BoundColumn;
  OLECHECK(this->get_BoundColumn((VARIANT*)&BoundColumn));
  return BoundColumn;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_ColumnCount(long ColumnCount/*[in]*/)
{
  return (*this)->set_ColumnCount(ColumnCount);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_ColumnCount(long* ColumnCount/*[out,retval]*/)
{
  return (*this)->get_ColumnCount(ColumnCount);
}

template <class T> long __fastcall
TCOMIMdcListT<T>::get_ColumnCount(void)
{
  long ColumnCount;
  OLECHECK(this->get_ColumnCount((long*)&ColumnCount));
  return ColumnCount;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_ColumnHeads(VARIANT_BOOL ColumnHeads/*[in]*/)
{
  return (*this)->set_ColumnHeads(ColumnHeads);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_ColumnHeads(TOLEBOOL ColumnHeads/*[in]*/)
{
  return (*this)->set_ColumnHeads(VARIANT_BOOL)ColumnHeads);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_ColumnHeads(VARIANT_BOOL* ColumnHeads/*[out,retval]*/)
{
  return (*this)->get_ColumnHeads(ColumnHeads);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_ColumnHeads(TOLEBOOL* ColumnHeads/*[out,retval]*/)
{
  return (*this)->get_ColumnHeads(VARIANT_BOOL*)ColumnHeads);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcListT<T>::get_ColumnHeads(void)
{
  VARIANT_BOOL ColumnHeads;
  OLECHECK(this->get_ColumnHeads((VARIANT_BOOL*)&ColumnHeads));
  return (TOLEBOOL)ColumnHeads;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_ColumnWidths(BSTR ColumnWidths/*[in]*/)
{
  return (*this)->set_ColumnWidths(ColumnWidths);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_ColumnWidths(BSTR* ColumnWidths/*[out,retval]*/)
{
  return (*this)->get_ColumnWidths(ColumnWidths);
}

template <class T> BSTR __fastcall
TCOMIMdcListT<T>::get_ColumnWidths(void)
{
  BSTR ColumnWidths = 0;
  OLECHECK(this->get_ColumnWidths((BSTR*)&ColumnWidths));
  return ColumnWidths;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  return (*this)->set_Enabled(Enabled);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_Enabled(TOLEBOOL Enabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)Enabled);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(Enabled);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_Enabled(TOLEBOOL* Enabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)Enabled);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcListT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Enabled));
  return (TOLEBOOL)Enabled;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  return (*this)->set__Font_Reserved(Param1);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set__Font_Reserved(IFontDisp* Param1/*[in]*/)
{
  return (*this)->set__Font_Reserved(IFontDisp**)Param1);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  return (*this)->_set_Font(Font);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::_set_Font(IFontDisp* Font/*[in]*/)
{
  return (*this)->_set_Font(IFontDisp**)Font);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  return (*this)->get_Font(Font);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_Font(IFontDisp** Font/*[out,retval]*/)
{
  return (*this)->get_Font(IFontDisp***)Font);
}

template <class T> IFontDisp* __fastcall
TCOMIMdcListT<T>::get_Font(void)
{
  IFontDisp** Font;
  OLECHECK(this->get_Font((IFontDisp***)&Font));
  return (IFontDisp*)Font;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_FontBold(VARIANT_BOOL FontBold/*[in]*/)
{
  return (*this)->set_FontBold(FontBold);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_FontBold(TOLEBOOL FontBold/*[in]*/)
{
  return (*this)->set_FontBold(VARIANT_BOOL)FontBold);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/)
{
  return (*this)->get_FontBold(FontBold);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_FontBold(TOLEBOOL* FontBold/*[out,retval]*/)
{
  return (*this)->get_FontBold(VARIANT_BOOL*)FontBold);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcListT<T>::get_FontBold(void)
{
  VARIANT_BOOL FontBold;
  OLECHECK(this->get_FontBold((VARIANT_BOOL*)&FontBold));
  return (TOLEBOOL)FontBold;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/)
{
  return (*this)->set_FontItalic(FontItalic);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_FontItalic(TOLEBOOL FontItalic/*[in]*/)
{
  return (*this)->set_FontItalic(VARIANT_BOOL)FontItalic);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/)
{
  return (*this)->get_FontItalic(FontItalic);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_FontItalic(TOLEBOOL* FontItalic/*[out,retval]*/)
{
  return (*this)->get_FontItalic(VARIANT_BOOL*)FontItalic);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcListT<T>::get_FontItalic(void)
{
  VARIANT_BOOL FontItalic;
  OLECHECK(this->get_FontItalic((VARIANT_BOOL*)&FontItalic));
  return (TOLEBOOL)FontItalic;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  return (*this)->set_FontName(FontName);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  return (*this)->get_FontName(FontName);
}

template <class T> BSTR __fastcall
TCOMIMdcListT<T>::get_FontName(void)
{
  BSTR FontName = 0;
  OLECHECK(this->get_FontName((BSTR*)&FontName));
  return FontName;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_FontSize(CURRENCY FontSize/*[in]*/)
{
  return (*this)->set_FontSize(FontSize);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_FontSize(CURRENCY* FontSize/*[out,retval]*/)
{
  return (*this)->get_FontSize(FontSize);
}

template <class T> CURRENCY __fastcall
TCOMIMdcListT<T>::get_FontSize(void)
{
  CURRENCY FontSize;
  OLECHECK(this->get_FontSize((CURRENCY*)&FontSize));
  return FontSize;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/)
{
  return (*this)->set_FontStrikethru(FontStrikethru);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_FontStrikethru(TOLEBOOL FontStrikethru/*[in]*/)
{
  return (*this)->set_FontStrikethru(VARIANT_BOOL)FontStrikethru);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/)
{
  return (*this)->get_FontStrikethru(FontStrikethru);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_FontStrikethru(TOLEBOOL* FontStrikethru/*[out,retval]*/)
{
  return (*this)->get_FontStrikethru(VARIANT_BOOL*)FontStrikethru);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcListT<T>::get_FontStrikethru(void)
{
  VARIANT_BOOL FontStrikethru;
  OLECHECK(this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru));
  return (TOLEBOOL)FontStrikethru;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/)
{
  return (*this)->set_FontUnderline(FontUnderline);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_FontUnderline(TOLEBOOL FontUnderline/*[in]*/)
{
  return (*this)->set_FontUnderline(VARIANT_BOOL)FontUnderline);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(FontUnderline);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_FontUnderline(TOLEBOOL* FontUnderline/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(VARIANT_BOOL*)FontUnderline);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcListT<T>::get_FontUnderline(void)
{
  VARIANT_BOOL FontUnderline;
  OLECHECK(this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline));
  return (TOLEBOOL)FontUnderline;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_FontWeight(short FontWeight/*[in]*/)
{
  return (*this)->set_FontWeight(FontWeight);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_FontWeight(short* FontWeight/*[out,retval]*/)
{
  return (*this)->get_FontWeight(FontWeight);
}

template <class T> short __fastcall
TCOMIMdcListT<T>::get_FontWeight(void)
{
  short FontWeight;
  OLECHECK(this->get_FontWeight((short*)&FontWeight));
  return FontWeight;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  return (*this)->set_ForeColor(ForeColor);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  return (*this)->get_ForeColor(ForeColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIMdcListT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
  return ForeColor;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_IntegralHeight(VARIANT_BOOL IntegralHeight/*[in]*/)
{
  return (*this)->set_IntegralHeight(IntegralHeight);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_IntegralHeight(TOLEBOOL IntegralHeight/*[in]*/)
{
  return (*this)->set_IntegralHeight(VARIANT_BOOL)IntegralHeight);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_IntegralHeight(VARIANT_BOOL* IntegralHeight/*[out,retval]*/)
{
  return (*this)->get_IntegralHeight(IntegralHeight);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_IntegralHeight(TOLEBOOL* IntegralHeight/*[out,retval]*/)
{
  return (*this)->get_IntegralHeight(VARIANT_BOOL*)IntegralHeight);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcListT<T>::get_IntegralHeight(void)
{
  VARIANT_BOOL IntegralHeight;
  OLECHECK(this->get_IntegralHeight((VARIANT_BOOL*)&IntegralHeight));
  return (TOLEBOOL)IntegralHeight;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_ListCount(long* ListCount/*[out,retval]*/)
{
  return (*this)->get_ListCount(ListCount);
}

template <class T> long __fastcall
TCOMIMdcListT<T>::get_ListCount(void)
{
  long ListCount;
  OLECHECK(this->get_ListCount((long*)&ListCount));
  return ListCount;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_ListCursor(Msforms_97::PIROWSET ListCursor/*[in]*/)
{
  return (*this)->set_ListCursor(ListCursor);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_ListCursor(Msforms_97::PIROWSET* ListCursor/*[out,retval]*/)
{
  return (*this)->get_ListCursor(ListCursor);
}

template <class T> Msforms_97::PIROWSET __fastcall
TCOMIMdcListT<T>::get_ListCursor(void)
{
  Msforms_97::PIROWSET ListCursor;
  OLECHECK(this->get_ListCursor((Msforms_97::PIROWSET*)&ListCursor));
  return ListCursor;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_ListIndex(VARIANT* ListIndex/*[in]*/)
{
  return (*this)->set_ListIndex(ListIndex);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_ListIndex(VARIANT* ListIndex/*[out,retval]*/)
{
  return (*this)->get_ListIndex(ListIndex);
}

template <class T> VARIANT __fastcall
TCOMIMdcListT<T>::get_ListIndex(void)
{
  VARIANT ListIndex;
  OLECHECK(this->get_ListIndex((VARIANT*)&ListIndex));
  return ListIndex;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_ListStyle(Msforms_97::fmListStyle ListStyle/*[in]*/)
{
  return (*this)->set_ListStyle(ListStyle);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_ListStyle(Msforms_97::fmListStyle* ListStyle/*[out,retval]*/)
{
  return (*this)->get_ListStyle(ListStyle);
}

template <class T> Msforms_97::fmListStyle __fastcall
TCOMIMdcListT<T>::get_ListStyle(void)
{
  Msforms_97::fmListStyle ListStyle;
  OLECHECK(this->get_ListStyle((Msforms_97::fmListStyle*)&ListStyle));
  return ListStyle;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_ListWidth(VARIANT* ListWidth/*[in]*/)
{
  return (*this)->set_ListWidth(ListWidth);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_ListWidth(VARIANT* ListWidth/*[out,retval]*/)
{
  return (*this)->get_ListWidth(ListWidth);
}

template <class T> VARIANT __fastcall
TCOMIMdcListT<T>::get_ListWidth(void)
{
  VARIANT ListWidth;
  OLECHECK(this->get_ListWidth((VARIANT*)&ListWidth));
  return ListWidth;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_Locked(VARIANT_BOOL Locked/*[in]*/)
{
  return (*this)->set_Locked(Locked);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_Locked(TOLEBOOL Locked/*[in]*/)
{
  return (*this)->set_Locked(VARIANT_BOOL)Locked);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/)
{
  return (*this)->get_Locked(Locked);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_Locked(TOLEBOOL* Locked/*[out,retval]*/)
{
  return (*this)->get_Locked(VARIANT_BOOL*)Locked);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcListT<T>::get_Locked(void)
{
  VARIANT_BOOL Locked;
  OLECHECK(this->get_Locked((VARIANT_BOOL*)&Locked));
  return (TOLEBOOL)Locked;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_MatchEntry(Msforms_97::fmMatchEntry MatchEntry/*[in]*/)
{
  return (*this)->set_MatchEntry(MatchEntry);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_MatchEntry(Msforms_97::fmMatchEntry* MatchEntry/*[out,retval]*/)
{
  return (*this)->get_MatchEntry(MatchEntry);
}

template <class T> Msforms_97::fmMatchEntry __fastcall
TCOMIMdcListT<T>::get_MatchEntry(void)
{
  Msforms_97::fmMatchEntry MatchEntry;
  OLECHECK(this->get_MatchEntry((Msforms_97::fmMatchEntry*)&MatchEntry));
  return MatchEntry;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::_set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(IPictureDisp***)MouseIcon);
}

template <class T> IPictureDisp* __fastcall
TCOMIMdcListT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
  return (IPictureDisp*)MouseIcon;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  return (*this)->set_MousePointer(MousePointer);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  return (*this)->get_MousePointer(MousePointer);
}

template <class T> Msforms_97::fmMousePointer __fastcall
TCOMIMdcListT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
  return MousePointer;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_MultiSelect(Msforms_97::fmMultiSelect MultiSelect/*[in]*/)
{
  return (*this)->set_MultiSelect(MultiSelect);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_MultiSelect(Msforms_97::fmMultiSelect* MultiSelect/*[out,retval]*/)
{
  return (*this)->get_MultiSelect(MultiSelect);
}

template <class T> Msforms_97::fmMultiSelect __fastcall
TCOMIMdcListT<T>::get_MultiSelect(void)
{
  Msforms_97::fmMultiSelect MultiSelect;
  OLECHECK(this->get_MultiSelect((Msforms_97::fmMultiSelect*)&MultiSelect));
  return MultiSelect;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/)
{
  return (*this)->set_SpecialEffect(SpecialEffect);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(SpecialEffect);
}

template <class T> Msforms_97::fmSpecialEffect __fastcall
TCOMIMdcListT<T>::get_SpecialEffect(void)
{
  Msforms_97::fmSpecialEffect SpecialEffect;
  OLECHECK(this->get_SpecialEffect((Msforms_97::fmSpecialEffect*)&SpecialEffect));
  return SpecialEffect;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_Text(BSTR Text/*[in]*/)
{
  return (*this)->set_Text(Text);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_Text(BSTR* Text/*[out,retval]*/)
{
  return (*this)->get_Text(Text);
}

template <class T> BSTR __fastcall
TCOMIMdcListT<T>::get_Text(void)
{
  BSTR Text = 0;
  OLECHECK(this->get_Text((BSTR*)&Text));
  return Text;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_TextColumn(VARIANT* TextColumn/*[in]*/)
{
  return (*this)->set_TextColumn(TextColumn);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_TextColumn(VARIANT* TextColumn/*[out,retval]*/)
{
  return (*this)->get_TextColumn(TextColumn);
}

template <class T> VARIANT __fastcall
TCOMIMdcListT<T>::get_TextColumn(void)
{
  VARIANT TextColumn;
  OLECHECK(this->get_TextColumn((VARIANT*)&TextColumn));
  return TextColumn;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_TopIndex(VARIANT* TopIndex/*[in]*/)
{
  return (*this)->set_TopIndex(TopIndex);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_TopIndex(VARIANT* TopIndex/*[out,retval]*/)
{
  return (*this)->get_TopIndex(TopIndex);
}

template <class T> VARIANT __fastcall
TCOMIMdcListT<T>::get_TopIndex(void)
{
  VARIANT TopIndex;
  OLECHECK(this->get_TopIndex((VARIANT*)&TopIndex));
  return TopIndex;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/)
{
  return (*this)->get_Valid(Valid);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_Valid(TOLEBOOL* Valid/*[out,retval]*/)
{
  return (*this)->get_Valid(VARIANT_BOOL*)Valid);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcListT<T>::get_Valid(void)
{
  VARIANT_BOOL Valid;
  OLECHECK(this->get_Valid((VARIANT_BOOL*)&Valid));
  return (TOLEBOOL)Valid;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_Value(VARIANT* Value/*[in]*/)
{
  return (*this)->set_Value(Value);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  return (*this)->get_Value(Value);
}

template <class T> VARIANT __fastcall
TCOMIMdcListT<T>::get_Value(void)
{
  VARIANT Value;
  OLECHECK(this->get_Value((VARIANT*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_Column(VARIANT* pvargColumn/*[in,opt]*/, VARIANT* pvargIndex/*[in,opt]*/, 
                             VARIANT* pvargValue/*[out,retval]*/)
{
  return (*this)->get_Column(pvargColumn, pvargIndex, pvargValue);
}

template <class T> VARIANT __fastcall
TCOMIMdcListT<T>::get_Column(VARIANT* pvargColumn/*[in,opt]*/, VARIANT* pvargIndex/*[in,opt]*/)
{
  VARIANT pvargValue;
  OLECHECK(this->get_Column(, (VARIANT*)&pvargValue));
  return pvargValue;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_Column(VARIANT* pvargColumn/*[in,opt]*/, VARIANT* pvargIndex/*[in,opt]*/, 
                             VARIANT* pvargValue/*[in]*/)
{
  return (*this)->set_Column(pvargColumn, pvargIndex, pvargValue);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_List(VARIANT* pvargIndex/*[in,opt]*/, VARIANT* pvargColumn/*[in,opt]*/, 
                           VARIANT* pvargValue/*[out,retval]*/)
{
  return (*this)->get_List(pvargIndex, pvargColumn, pvargValue);
}

template <class T> VARIANT __fastcall
TCOMIMdcListT<T>::get_List(VARIANT* pvargIndex/*[in,opt]*/, VARIANT* pvargColumn/*[in,opt]*/)
{
  VARIANT pvargValue;
  OLECHECK(this->get_List(, (VARIANT*)&pvargValue));
  return pvargValue;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_List(VARIANT* pvargIndex/*[in,opt]*/, VARIANT* pvargColumn/*[in,opt]*/, 
                           VARIANT* pvargValue/*[in]*/)
{
  return (*this)->set_List(pvargIndex, pvargColumn, pvargValue);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_Selected(VARIANT* pvargIndex/*[in]*/, VARIANT_BOOL* pfvb/*[out,retval]*/)
{
  return (*this)->get_Selected(pvargIndex, pfvb);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIMdcListT<T>::get_Selected(VARIANT* pvargIndex/*[in]*/)
{
  VARIANT_BOOL pfvb;
  OLECHECK(this->get_Selected(, (VARIANT_BOOL*)&pfvb));
  return pfvb;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_Selected(VARIANT* pvargIndex/*[in]*/, VARIANT_BOOL pfvb/*[in]*/)
{
  return (*this)->set_Selected(pvargIndex, pfvb);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::AddItem(VARIANT* pvargItem/*[in,opt]*/, VARIANT* pvargIndex/*[in,opt]*/)
{
  return (*this)->AddItem(pvargItem, pvargIndex);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::RemoveItem(VARIANT* pvargIndex/*[in]*/)
{
  return (*this)->RemoveItem(pvargIndex);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_IMEMode(Msforms_97::fmIMEMode IMEMode/*[in]*/)
{
  return (*this)->set_IMEMode(IMEMode);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_IMEMode(Msforms_97::fmIMEMode* IMEMode/*[out,retval]*/)
{
  return (*this)->get_IMEMode(IMEMode);
}

template <class T> Msforms_97::fmIMEMode __fastcall
TCOMIMdcListT<T>::get_IMEMode(void)
{
  Msforms_97::fmIMEMode IMEMode;
  OLECHECK(this->get_IMEMode((Msforms_97::fmIMEMode*)&IMEMode));
  return IMEMode;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/)
{
  return (*this)->get_DisplayStyle(DisplayStyle);
}

template <class T> Msforms_97::fmDisplayStyle __fastcall
TCOMIMdcListT<T>::get_DisplayStyle(void)
{
  Msforms_97::fmDisplayStyle DisplayStyle;
  OLECHECK(this->get_DisplayStyle((Msforms_97::fmDisplayStyle*)&DisplayStyle));
  return DisplayStyle;
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/)
{
  return (*this)->set_TextAlign(TextAlign);
}

template <class T> HRESULT __fastcall
TCOMIMdcListT<T>::get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/)
{
  return (*this)->get_TextAlign(TextAlign);
}

template <class T> Msforms_97::fmTextAlign __fastcall
TCOMIMdcListT<T>::get_TextAlign(void)
{
  Msforms_97::fmTextAlign TextAlign;
  OLECHECK(this->get_TextAlign((Msforms_97::fmTextAlign*)&TextAlign));
  return TextAlign;
}

// *********************************************************************//
// DispIntf:  IMdcList
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8BD21D23-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IMdcListDispT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(-503));
  TAutoArgs<1> _args;
  _args[1] = BorderColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(-503));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BorderColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IMdcListDispT<T>::get_BorderColor(void)
{
  Msforms_97::OLE_COLOR BorderColor;
  this->get_BorderColor((Msforms_97::OLE_COLOR*)&BorderColor);
  return BorderColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<1> _args;
  _args[1] = (int)BorderStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BorderStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmBorderStyle __fastcall
IMdcListDispT<T>::get_BorderStyle(void)
{
  Msforms_97::fmBorderStyle BorderStyle;
  this->get_BorderStyle((Msforms_97::fmBorderStyle*)&BorderStyle);
  return BorderStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BordersSuppress"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = BordersSuppress /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BordersSuppress"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BordersSuppress /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcListDispT<T>::get_BordersSuppress(void)
{
  VARIANT_BOOL BordersSuppress;
  this->get_BordersSuppress((VARIANT_BOOL*)&BordersSuppress);
  return BordersSuppress;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_BoundColumn(VARIANT* BoundColumn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BoundColumn"), DISPID(501));
  TAutoArgs<1> _args;
  _args[1] = BoundColumn /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_BoundColumn(VARIANT* BoundColumn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BoundColumn"), DISPID(501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BoundColumn /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcListDispT<T>::get_BoundColumn(void)
{
  VARIANT BoundColumn;
  this->get_BoundColumn((VARIANT*)&BoundColumn);
  return BoundColumn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_ColumnCount(long ColumnCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnCount"), DISPID(601));
  TAutoArgs<1> _args;
  _args[1] = ColumnCount /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_ColumnCount(long* ColumnCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnCount"), DISPID(601));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ColumnCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcListDispT<T>::get_ColumnCount(void)
{
  long ColumnCount;
  this->get_ColumnCount((long*)&ColumnCount);
  return ColumnCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_ColumnHeads(VARIANT_BOOL ColumnHeads/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHeads"), DISPID(602));
  TAutoArgs<1> _args;
  _args[1] = ColumnHeads /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_ColumnHeads(VARIANT_BOOL* ColumnHeads/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHeads"), DISPID(602));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ColumnHeads /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcListDispT<T>::get_ColumnHeads(void)
{
  VARIANT_BOOL ColumnHeads;
  this->get_ColumnHeads((VARIANT_BOOL*)&ColumnHeads);
  return ColumnHeads;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_ColumnWidths(BSTR ColumnWidths/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidths"), DISPID(603));
  TAutoArgs<1> _args;
  _args[1] = ColumnWidths /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_ColumnWidths(BSTR* ColumnWidths/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidths"), DISPID(603));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ColumnWidths /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcListDispT<T>::get_ColumnWidths(void)
{
  BSTR ColumnWidths;
  this->get_ColumnWidths((BSTR*)&ColumnWidths);
  return ColumnWidths;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Enabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcListDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  this->get_Enabled((VARIANT_BOOL*)&Enabled);
  return Enabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Font_Reserved"), DISPID(2147483135));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Param1 /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Font /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp***)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp** __fastcall
IMdcListDispT<T>::get_Font(void)
{
  IFontDisp** Font;
  this->get_Font((IFontDisp***)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_FontBold(VARIANT_BOOL FontBold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = FontBold /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontBold /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcListDispT<T>::get_FontBold(void)
{
  VARIANT_BOOL FontBold;
  this->get_FontBold((VARIANT_BOOL*)&FontBold);
  return FontBold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = FontItalic /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontItalic /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcListDispT<T>::get_FontItalic(void)
{
  VARIANT_BOOL FontItalic;
  this->get_FontItalic((VARIANT_BOOL*)&FontItalic);
  return FontItalic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = FontName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcListDispT<T>::get_FontName(void)
{
  BSTR FontName;
  this->get_FontName((BSTR*)&FontName);
  return FontName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_FontSize(CURRENCY FontSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = FontSize /*[VT_CY:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_FontSize(CURRENCY* FontSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontSize /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMdcListDispT<T>::get_FontSize(void)
{
  CURRENCY FontSize;
  this->get_FontSize((CURRENCY*)&FontSize);
  return FontSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = FontStrikethru /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontStrikethru /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcListDispT<T>::get_FontStrikethru(void)
{
  VARIANT_BOOL FontStrikethru;
  this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru);
  return FontStrikethru;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = FontUnderline /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontUnderline /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcListDispT<T>::get_FontUnderline(void)
{
  VARIANT_BOOL FontUnderline;
  this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline);
  return FontUnderline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_FontWeight(short FontWeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = FontWeight /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_FontWeight(short* FontWeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontWeight /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IMdcListDispT<T>::get_FontWeight(void)
{
  short FontWeight;
  this->get_FontWeight((short*)&FontWeight);
  return FontWeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<1> _args;
  _args[1] = ForeColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ForeColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IMdcListDispT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_IntegralHeight(VARIANT_BOOL IntegralHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IntegralHeight"), DISPID(604));
  TAutoArgs<1> _args;
  _args[1] = IntegralHeight /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_IntegralHeight(VARIANT_BOOL* IntegralHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IntegralHeight"), DISPID(604));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IntegralHeight /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcListDispT<T>::get_IntegralHeight(void)
{
  VARIANT_BOOL IntegralHeight;
  this->get_IntegralHeight((VARIANT_BOOL*)&IntegralHeight);
  return IntegralHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_ListCount(long* ListCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListCount"), DISPID(-531));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ListCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcListDispT<T>::get_ListCount(void)
{
  long ListCount;
  this->get_ListCount((long*)&ListCount);
  return ListCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_ListCursor(Msforms_97::PIROWSET ListCursor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListCursor"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = ListCursor /*[VT_UNKNOWN:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_ListCursor(Msforms_97::PIROWSET* ListCursor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListCursor"), DISPID(403));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ListCursor /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::PIROWSET __fastcall
IMdcListDispT<T>::get_ListCursor(void)
{
  Msforms_97::PIROWSET ListCursor;
  this->get_ListCursor((Msforms_97::PIROWSET*)&ListCursor);
  return ListCursor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_ListIndex(VARIANT* ListIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListIndex"), DISPID(-526));
  TAutoArgs<1> _args;
  _args[1] = ListIndex /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_ListIndex(VARIANT* ListIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListIndex"), DISPID(-526));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ListIndex /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcListDispT<T>::get_ListIndex(void)
{
  VARIANT ListIndex;
  this->get_ListIndex((VARIANT*)&ListIndex);
  return ListIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_ListStyle(Msforms_97::fmListStyle ListStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListStyle"), DISPID(307));
  TAutoArgs<1> _args;
  _args[1] = (int)ListStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_ListStyle(Msforms_97::fmListStyle* ListStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListStyle"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ListStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmListStyle __fastcall
IMdcListDispT<T>::get_ListStyle(void)
{
  Msforms_97::fmListStyle ListStyle;
  this->get_ListStyle((Msforms_97::fmListStyle*)&ListStyle);
  return ListStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_ListWidth(VARIANT* ListWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListWidth"), DISPID(606));
  TAutoArgs<1> _args;
  _args[1] = ListWidth /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_ListWidth(VARIANT* ListWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListWidth"), DISPID(606));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ListWidth /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcListDispT<T>::get_ListWidth(void)
{
  VARIANT ListWidth;
  this->get_ListWidth((VARIANT*)&ListWidth);
  return ListWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_Locked(VARIANT_BOOL Locked/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Locked /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Locked /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcListDispT<T>::get_Locked(void)
{
  VARIANT_BOOL Locked;
  this->get_Locked((VARIANT_BOOL*)&Locked);
  return Locked;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_MatchEntry(Msforms_97::fmMatchEntry MatchEntry/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MatchEntry"), DISPID(504));
  TAutoArgs<1> _args;
  _args[1] = (int)MatchEntry /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_MatchEntry(Msforms_97::fmMatchEntry* MatchEntry/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MatchEntry"), DISPID(504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MatchEntry /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMatchEntry __fastcall
IMdcListDispT<T>::get_MatchEntry(void)
{
  Msforms_97::fmMatchEntry MatchEntry;
  this->get_MatchEntry((Msforms_97::fmMatchEntry*)&MatchEntry);
  return MatchEntry;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)MouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
IMdcListDispT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  this->get_MouseIcon((IPictureDisp***)&MouseIcon);
  return MouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<1> _args;
  _args[1] = (int)MousePointer /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MousePointer /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMousePointer __fastcall
IMdcListDispT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer);
  return MousePointer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_MultiSelect(Msforms_97::fmMultiSelect MultiSelect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiSelect"), DISPID(-532));
  TAutoArgs<1> _args;
  _args[1] = (int)MultiSelect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_MultiSelect(Msforms_97::fmMultiSelect* MultiSelect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiSelect"), DISPID(-532));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MultiSelect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMultiSelect __fastcall
IMdcListDispT<T>::get_MultiSelect(void)
{
  Msforms_97::fmMultiSelect MultiSelect;
  this->get_MultiSelect((Msforms_97::fmMultiSelect*)&MultiSelect);
  return MultiSelect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)SpecialEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SpecialEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmSpecialEffect __fastcall
IMdcListDispT<T>::get_SpecialEffect(void)
{
  Msforms_97::fmSpecialEffect SpecialEffect;
  this->get_SpecialEffect((Msforms_97::fmSpecialEffect*)&SpecialEffect);
  return SpecialEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_Text(BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(-517));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_Text(BSTR* Text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(-517));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcListDispT<T>::get_Text(void)
{
  BSTR Text;
  this->get_Text((BSTR*)&Text);
  return Text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_TextColumn(VARIANT* TextColumn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextColumn"), DISPID(502));
  TAutoArgs<1> _args;
  _args[1] = TextColumn /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_TextColumn(VARIANT* TextColumn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextColumn"), DISPID(502));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TextColumn /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcListDispT<T>::get_TextColumn(void)
{
  VARIANT TextColumn;
  this->get_TextColumn((VARIANT*)&TextColumn);
  return TextColumn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_TopIndex(VARIANT* TopIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopIndex"), DISPID(611));
  TAutoArgs<1> _args;
  _args[1] = TopIndex /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_TopIndex(VARIANT* TopIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopIndex"), DISPID(611));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TopIndex /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcListDispT<T>::get_TopIndex(void)
{
  VARIANT TopIndex;
  this->get_TopIndex((VARIANT*)&TopIndex);
  return TopIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Valid"), DISPID(-524));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Valid /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcListDispT<T>::get_Valid(void)
{
  VARIANT_BOOL Valid;
  this->get_Valid((VARIANT_BOOL*)&Valid);
  return Valid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_Value(VARIANT* Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcListDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_Column(VARIANT* pvargColumn/*[in,opt]*/, VARIANT* pvargIndex/*[in,opt]*/, 
                             VARIANT* pvargValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Column"), DISPID(-529));
  TAutoArgs<2> _args;
  _args[1] = pvargColumn /*[VT_VARIANT:1]*/;
  _args[2] = pvargIndex /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(pvargValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcListDispT<T>::get_Column(VARIANT* pvargColumn/*[in,opt]*/, VARIANT* pvargIndex/*[in,opt]*/)
{
  VARIANT pvargValue;
  this->get_Column(pvargColumn, pvargIndex, (VARIANT*)&pvargValue);
  return pvargValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_Column(VARIANT* pvargColumn/*[in,opt]*/, VARIANT* pvargIndex/*[in,opt]*/, 
                             VARIANT* pvargValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Column"), DISPID(-529));
  TAutoArgs<3> _args;
  _args[1] = pvargColumn /*[VT_VARIANT:1]*/;
  _args[2] = pvargIndex /*[VT_VARIANT:1]*/;
  _args[3] = pvargValue /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_List(VARIANT* pvargIndex/*[in,opt]*/, VARIANT* pvargColumn/*[in,opt]*/, 
                           VARIANT* pvargValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("List"), DISPID(-528));
  TAutoArgs<2> _args;
  _args[1] = pvargIndex /*[VT_VARIANT:1]*/;
  _args[2] = pvargColumn /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(pvargValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcListDispT<T>::get_List(VARIANT* pvargIndex/*[in,opt]*/, VARIANT* pvargColumn/*[in,opt]*/)
{
  VARIANT pvargValue;
  this->get_List(pvargIndex, pvargColumn, (VARIANT*)&pvargValue);
  return pvargValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_List(VARIANT* pvargIndex/*[in,opt]*/, VARIANT* pvargColumn/*[in,opt]*/, 
                           VARIANT* pvargValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("List"), DISPID(-528));
  TAutoArgs<3> _args;
  _args[1] = pvargIndex /*[VT_VARIANT:1]*/;
  _args[2] = pvargColumn /*[VT_VARIANT:1]*/;
  _args[3] = pvargValue /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_Selected(VARIANT* pvargIndex/*[in]*/, VARIANT_BOOL* pfvb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(-527));
  TAutoArgs<1> _args;
  _args[1] = pvargIndex /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(pfvb /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcListDispT<T>::get_Selected(VARIANT* pvargIndex/*[in]*/)
{
  VARIANT_BOOL pfvb;
  this->get_Selected(pvargIndex, (VARIANT_BOOL*)&pfvb);
  return pfvb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_Selected(VARIANT* pvargIndex/*[in]*/, VARIANT_BOOL pfvb/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(-527));
  TAutoArgs<2> _args;
  _args[1] = pvargIndex /*[VT_VARIANT:1]*/;
  _args[2] = pfvb /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::AddItem(VARIANT* pvargItem/*[in,opt]*/, VARIANT* pvargIndex/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(-553));
  TAutoArgs<2> _args;
  _args[1] = pvargItem /*[VT_VARIANT:1]*/;
  _args[2] = pvargIndex /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(-554));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::RemoveItem(VARIANT* pvargIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveItem"), DISPID(-555));
  TAutoArgs<1> _args;
  _args[1] = pvargIndex /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_IMEMode(Msforms_97::fmIMEMode IMEMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IMEMode"), DISPID(-542));
  TAutoArgs<1> _args;
  _args[1] = (int)IMEMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_IMEMode(Msforms_97::fmIMEMode* IMEMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IMEMode"), DISPID(-542));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)IMEMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmIMEMode __fastcall
IMdcListDispT<T>::get_IMEMode(void)
{
  Msforms_97::fmIMEMode IMEMode;
  this->get_IMEMode((Msforms_97::fmIMEMode*)&IMEMode);
  return IMEMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayStyle"), DISPID(-540));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmDisplayStyle __fastcall
IMdcListDispT<T>::get_DisplayStyle(void)
{
  Msforms_97::fmDisplayStyle DisplayStyle;
  this->get_DisplayStyle((Msforms_97::fmDisplayStyle*)&DisplayStyle);
  return DisplayStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(10004));
  TAutoArgs<1> _args;
  _args[1] = (int)TextAlign /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcListDispT<T>::get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(10004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TextAlign /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmTextAlign __fastcall
IMdcListDispT<T>::get_TextAlign(void)
{
  Msforms_97::fmTextAlign TextAlign;
  this->get_TextAlign((Msforms_97::fmTextAlign*)&TextAlign);
  return TextAlign;
}

// *********************************************************************//
// SmartIntf: TCOMIMdcCombo
// Interface: IMdcCombo
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_AutoSize(VARIANT_BOOL AutoSize/*[in]*/)
{
  return (*this)->set_AutoSize(AutoSize);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_AutoSize(TOLEBOOL AutoSize/*[in]*/)
{
  return (*this)->set_AutoSize(VARIANT_BOOL)AutoSize);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_AutoSize(VARIANT_BOOL* AutoSize/*[out,retval]*/)
{
  return (*this)->get_AutoSize(AutoSize);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_AutoSize(TOLEBOOL* AutoSize/*[out,retval]*/)
{
  return (*this)->get_AutoSize(VARIANT_BOOL*)AutoSize);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcComboT<T>::get_AutoSize(void)
{
  VARIANT_BOOL AutoSize;
  OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&AutoSize));
  return (TOLEBOOL)AutoSize;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_AutoTab(VARIANT_BOOL AutoTab/*[in]*/)
{
  return (*this)->set_AutoTab(AutoTab);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_AutoTab(TOLEBOOL AutoTab/*[in]*/)
{
  return (*this)->set_AutoTab(VARIANT_BOOL)AutoTab);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_AutoTab(VARIANT_BOOL* AutoTab/*[out,retval]*/)
{
  return (*this)->get_AutoTab(AutoTab);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_AutoTab(TOLEBOOL* AutoTab/*[out,retval]*/)
{
  return (*this)->get_AutoTab(VARIANT_BOOL*)AutoTab);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcComboT<T>::get_AutoTab(void)
{
  VARIANT_BOOL AutoTab;
  OLECHECK(this->get_AutoTab((VARIANT_BOOL*)&AutoTab));
  return (TOLEBOOL)AutoTab;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_AutoWordSelect(VARIANT_BOOL AutoWordSelect/*[in]*/)
{
  return (*this)->set_AutoWordSelect(AutoWordSelect);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_AutoWordSelect(TOLEBOOL AutoWordSelect/*[in]*/)
{
  return (*this)->set_AutoWordSelect(VARIANT_BOOL)AutoWordSelect);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_AutoWordSelect(VARIANT_BOOL* AutoWordSelect/*[out,retval]*/)
{
  return (*this)->get_AutoWordSelect(AutoWordSelect);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_AutoWordSelect(TOLEBOOL* AutoWordSelect/*[out,retval]*/)
{
  return (*this)->get_AutoWordSelect(VARIANT_BOOL*)AutoWordSelect);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcComboT<T>::get_AutoWordSelect(void)
{
  VARIANT_BOOL AutoWordSelect;
  OLECHECK(this->get_AutoWordSelect((VARIANT_BOOL*)&AutoWordSelect));
  return (TOLEBOOL)AutoWordSelect;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  return (*this)->set_BackColor(BackColor);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  return (*this)->get_BackColor(BackColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIMdcComboT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
  return BackColor;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/)
{
  return (*this)->set_BackStyle(BackStyle);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/)
{
  return (*this)->get_BackStyle(BackStyle);
}

template <class T> Msforms_97::fmBackStyle __fastcall
TCOMIMdcComboT<T>::get_BackStyle(void)
{
  Msforms_97::fmBackStyle BackStyle;
  OLECHECK(this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle));
  return BackStyle;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/)
{
  return (*this)->set_BorderColor(BorderColor);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/)
{
  return (*this)->get_BorderColor(BorderColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIMdcComboT<T>::get_BorderColor(void)
{
  Msforms_97::OLE_COLOR BorderColor;
  OLECHECK(this->get_BorderColor((Msforms_97::OLE_COLOR*)&BorderColor));
  return BorderColor;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/)
{
  return (*this)->set_BorderStyle(BorderStyle);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(BorderStyle);
}

template <class T> Msforms_97::fmBorderStyle __fastcall
TCOMIMdcComboT<T>::get_BorderStyle(void)
{
  Msforms_97::fmBorderStyle BorderStyle;
  OLECHECK(this->get_BorderStyle((Msforms_97::fmBorderStyle*)&BorderStyle));
  return BorderStyle;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/)
{
  return (*this)->set_BordersSuppress(BordersSuppress);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_BordersSuppress(TOLEBOOL BordersSuppress/*[in]*/)
{
  return (*this)->set_BordersSuppress(VARIANT_BOOL)BordersSuppress);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/)
{
  return (*this)->get_BordersSuppress(BordersSuppress);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_BordersSuppress(TOLEBOOL* BordersSuppress/*[out,retval]*/)
{
  return (*this)->get_BordersSuppress(VARIANT_BOOL*)BordersSuppress);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcComboT<T>::get_BordersSuppress(void)
{
  VARIANT_BOOL BordersSuppress;
  OLECHECK(this->get_BordersSuppress((VARIANT_BOOL*)&BordersSuppress));
  return (TOLEBOOL)BordersSuppress;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_BoundColumn(VARIANT* BoundColumn/*[in]*/)
{
  return (*this)->set_BoundColumn(BoundColumn);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_BoundColumn(VARIANT* BoundColumn/*[out,retval]*/)
{
  return (*this)->get_BoundColumn(BoundColumn);
}

template <class T> VARIANT __fastcall
TCOMIMdcComboT<T>::get_BoundColumn(void)
{
  VARIANT BoundColumn;
  OLECHECK(this->get_BoundColumn((VARIANT*)&BoundColumn));
  return BoundColumn;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/)
{
  return (*this)->get_CanPaste(CanPaste);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_CanPaste(TOLEBOOL* CanPaste/*[out,retval]*/)
{
  return (*this)->get_CanPaste(VARIANT_BOOL*)CanPaste);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcComboT<T>::get_CanPaste(void)
{
  VARIANT_BOOL CanPaste;
  OLECHECK(this->get_CanPaste((VARIANT_BOOL*)&CanPaste));
  return (TOLEBOOL)CanPaste;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_ColumnCount(long ColumnCount/*[in]*/)
{
  return (*this)->set_ColumnCount(ColumnCount);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_ColumnCount(long* ColumnCount/*[out,retval]*/)
{
  return (*this)->get_ColumnCount(ColumnCount);
}

template <class T> long __fastcall
TCOMIMdcComboT<T>::get_ColumnCount(void)
{
  long ColumnCount;
  OLECHECK(this->get_ColumnCount((long*)&ColumnCount));
  return ColumnCount;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_ColumnHeads(VARIANT_BOOL ColumnHeads/*[in]*/)
{
  return (*this)->set_ColumnHeads(ColumnHeads);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_ColumnHeads(TOLEBOOL ColumnHeads/*[in]*/)
{
  return (*this)->set_ColumnHeads(VARIANT_BOOL)ColumnHeads);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_ColumnHeads(VARIANT_BOOL* ColumnHeads/*[out,retval]*/)
{
  return (*this)->get_ColumnHeads(ColumnHeads);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_ColumnHeads(TOLEBOOL* ColumnHeads/*[out,retval]*/)
{
  return (*this)->get_ColumnHeads(VARIANT_BOOL*)ColumnHeads);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcComboT<T>::get_ColumnHeads(void)
{
  VARIANT_BOOL ColumnHeads;
  OLECHECK(this->get_ColumnHeads((VARIANT_BOOL*)&ColumnHeads));
  return (TOLEBOOL)ColumnHeads;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_ColumnWidths(BSTR ColumnWidths/*[in]*/)
{
  return (*this)->set_ColumnWidths(ColumnWidths);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_ColumnWidths(BSTR* ColumnWidths/*[out,retval]*/)
{
  return (*this)->get_ColumnWidths(ColumnWidths);
}

template <class T> BSTR __fastcall
TCOMIMdcComboT<T>::get_ColumnWidths(void)
{
  BSTR ColumnWidths = 0;
  OLECHECK(this->get_ColumnWidths((BSTR*)&ColumnWidths));
  return ColumnWidths;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_CurTargetX(long* CurTargetX/*[out,retval]*/)
{
  return (*this)->get_CurTargetX(CurTargetX);
}

template <class T> long __fastcall
TCOMIMdcComboT<T>::get_CurTargetX(void)
{
  long CurTargetX;
  OLECHECK(this->get_CurTargetX((long*)&CurTargetX));
  return CurTargetX;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_CurTargetY(long* CurTargetY/*[out,retval]*/)
{
  return (*this)->get_CurTargetY(CurTargetY);
}

template <class T> long __fastcall
TCOMIMdcComboT<T>::get_CurTargetY(void)
{
  long CurTargetY;
  OLECHECK(this->get_CurTargetY((long*)&CurTargetY));
  return CurTargetY;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_CurX(long CurX/*[in]*/)
{
  return (*this)->set_CurX(CurX);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_CurX(long* CurX/*[out,retval]*/)
{
  return (*this)->get_CurX(CurX);
}

template <class T> long __fastcall
TCOMIMdcComboT<T>::get_CurX(void)
{
  long CurX;
  OLECHECK(this->get_CurX((long*)&CurX));
  return CurX;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_DropButtonStyle(Msforms_97::fmDropButtonStyle DropButtonStyle/*[in]*/)
{
  return (*this)->set_DropButtonStyle(DropButtonStyle);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_DropButtonStyle(Msforms_97::fmDropButtonStyle* DropButtonStyle/*[out,retval]*/)
{
  return (*this)->get_DropButtonStyle(DropButtonStyle);
}

template <class T> Msforms_97::fmDropButtonStyle __fastcall
TCOMIMdcComboT<T>::get_DropButtonStyle(void)
{
  Msforms_97::fmDropButtonStyle DropButtonStyle;
  OLECHECK(this->get_DropButtonStyle((Msforms_97::fmDropButtonStyle*)&DropButtonStyle));
  return DropButtonStyle;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  return (*this)->set_Enabled(Enabled);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_Enabled(TOLEBOOL Enabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)Enabled);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(Enabled);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_Enabled(TOLEBOOL* Enabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)Enabled);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcComboT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Enabled));
  return (TOLEBOOL)Enabled;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  return (*this)->set__Font_Reserved(Param1);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set__Font_Reserved(IFontDisp* Param1/*[in]*/)
{
  return (*this)->set__Font_Reserved(IFontDisp**)Param1);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  return (*this)->_set_Font(Font);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::_set_Font(IFontDisp* Font/*[in]*/)
{
  return (*this)->_set_Font(IFontDisp**)Font);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  return (*this)->get_Font(Font);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_Font(IFontDisp** Font/*[out,retval]*/)
{
  return (*this)->get_Font(IFontDisp***)Font);
}

template <class T> IFontDisp* __fastcall
TCOMIMdcComboT<T>::get_Font(void)
{
  IFontDisp** Font;
  OLECHECK(this->get_Font((IFontDisp***)&Font));
  return (IFontDisp*)Font;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_FontBold(VARIANT_BOOL FontBold/*[in]*/)
{
  return (*this)->set_FontBold(FontBold);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_FontBold(TOLEBOOL FontBold/*[in]*/)
{
  return (*this)->set_FontBold(VARIANT_BOOL)FontBold);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/)
{
  return (*this)->get_FontBold(FontBold);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_FontBold(TOLEBOOL* FontBold/*[out,retval]*/)
{
  return (*this)->get_FontBold(VARIANT_BOOL*)FontBold);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcComboT<T>::get_FontBold(void)
{
  VARIANT_BOOL FontBold;
  OLECHECK(this->get_FontBold((VARIANT_BOOL*)&FontBold));
  return (TOLEBOOL)FontBold;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/)
{
  return (*this)->set_FontItalic(FontItalic);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_FontItalic(TOLEBOOL FontItalic/*[in]*/)
{
  return (*this)->set_FontItalic(VARIANT_BOOL)FontItalic);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/)
{
  return (*this)->get_FontItalic(FontItalic);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_FontItalic(TOLEBOOL* FontItalic/*[out,retval]*/)
{
  return (*this)->get_FontItalic(VARIANT_BOOL*)FontItalic);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcComboT<T>::get_FontItalic(void)
{
  VARIANT_BOOL FontItalic;
  OLECHECK(this->get_FontItalic((VARIANT_BOOL*)&FontItalic));
  return (TOLEBOOL)FontItalic;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  return (*this)->set_FontName(FontName);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  return (*this)->get_FontName(FontName);
}

template <class T> BSTR __fastcall
TCOMIMdcComboT<T>::get_FontName(void)
{
  BSTR FontName = 0;
  OLECHECK(this->get_FontName((BSTR*)&FontName));
  return FontName;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_FontSize(CURRENCY FontSize/*[in]*/)
{
  return (*this)->set_FontSize(FontSize);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_FontSize(CURRENCY* FontSize/*[out,retval]*/)
{
  return (*this)->get_FontSize(FontSize);
}

template <class T> CURRENCY __fastcall
TCOMIMdcComboT<T>::get_FontSize(void)
{
  CURRENCY FontSize;
  OLECHECK(this->get_FontSize((CURRENCY*)&FontSize));
  return FontSize;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/)
{
  return (*this)->set_FontStrikethru(FontStrikethru);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_FontStrikethru(TOLEBOOL FontStrikethru/*[in]*/)
{
  return (*this)->set_FontStrikethru(VARIANT_BOOL)FontStrikethru);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/)
{
  return (*this)->get_FontStrikethru(FontStrikethru);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_FontStrikethru(TOLEBOOL* FontStrikethru/*[out,retval]*/)
{
  return (*this)->get_FontStrikethru(VARIANT_BOOL*)FontStrikethru);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcComboT<T>::get_FontStrikethru(void)
{
  VARIANT_BOOL FontStrikethru;
  OLECHECK(this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru));
  return (TOLEBOOL)FontStrikethru;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/)
{
  return (*this)->set_FontUnderline(FontUnderline);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_FontUnderline(TOLEBOOL FontUnderline/*[in]*/)
{
  return (*this)->set_FontUnderline(VARIANT_BOOL)FontUnderline);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(FontUnderline);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_FontUnderline(TOLEBOOL* FontUnderline/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(VARIANT_BOOL*)FontUnderline);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcComboT<T>::get_FontUnderline(void)
{
  VARIANT_BOOL FontUnderline;
  OLECHECK(this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline));
  return (TOLEBOOL)FontUnderline;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_FontWeight(short FontWeight/*[in]*/)
{
  return (*this)->set_FontWeight(FontWeight);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_FontWeight(short* FontWeight/*[out,retval]*/)
{
  return (*this)->get_FontWeight(FontWeight);
}

template <class T> short __fastcall
TCOMIMdcComboT<T>::get_FontWeight(void)
{
  short FontWeight;
  OLECHECK(this->get_FontWeight((short*)&FontWeight));
  return FontWeight;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  return (*this)->set_ForeColor(ForeColor);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  return (*this)->get_ForeColor(ForeColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIMdcComboT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
  return ForeColor;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_HideSelection(VARIANT_BOOL HideSelection/*[in]*/)
{
  return (*this)->set_HideSelection(HideSelection);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_HideSelection(TOLEBOOL HideSelection/*[in]*/)
{
  return (*this)->set_HideSelection(VARIANT_BOOL)HideSelection);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_HideSelection(VARIANT_BOOL* HideSelection/*[out,retval]*/)
{
  return (*this)->get_HideSelection(HideSelection);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_HideSelection(TOLEBOOL* HideSelection/*[out,retval]*/)
{
  return (*this)->get_HideSelection(VARIANT_BOOL*)HideSelection);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcComboT<T>::get_HideSelection(void)
{
  VARIANT_BOOL HideSelection;
  OLECHECK(this->get_HideSelection((VARIANT_BOOL*)&HideSelection));
  return (TOLEBOOL)HideSelection;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_LineCount(long* LineCount/*[out,retval]*/)
{
  return (*this)->get_LineCount(LineCount);
}

template <class T> long __fastcall
TCOMIMdcComboT<T>::get_LineCount(void)
{
  long LineCount;
  OLECHECK(this->get_LineCount((long*)&LineCount));
  return LineCount;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_ListCount(long* ListCount/*[out,retval]*/)
{
  return (*this)->get_ListCount(ListCount);
}

template <class T> long __fastcall
TCOMIMdcComboT<T>::get_ListCount(void)
{
  long ListCount;
  OLECHECK(this->get_ListCount((long*)&ListCount));
  return ListCount;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_ListCursor(Msforms_97::PIROWSET ListCursor/*[in]*/)
{
  return (*this)->set_ListCursor(ListCursor);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_ListCursor(Msforms_97::PIROWSET* ListCursor/*[out,retval]*/)
{
  return (*this)->get_ListCursor(ListCursor);
}

template <class T> Msforms_97::PIROWSET __fastcall
TCOMIMdcComboT<T>::get_ListCursor(void)
{
  Msforms_97::PIROWSET ListCursor;
  OLECHECK(this->get_ListCursor((Msforms_97::PIROWSET*)&ListCursor));
  return ListCursor;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_ListIndex(VARIANT* ListIndex/*[in]*/)
{
  return (*this)->set_ListIndex(ListIndex);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_ListIndex(VARIANT* ListIndex/*[out,retval]*/)
{
  return (*this)->get_ListIndex(ListIndex);
}

template <class T> VARIANT __fastcall
TCOMIMdcComboT<T>::get_ListIndex(void)
{
  VARIANT ListIndex;
  OLECHECK(this->get_ListIndex((VARIANT*)&ListIndex));
  return ListIndex;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_ListRows(long ListRows/*[in]*/)
{
  return (*this)->set_ListRows(ListRows);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_ListRows(long* ListRows/*[out,retval]*/)
{
  return (*this)->get_ListRows(ListRows);
}

template <class T> long __fastcall
TCOMIMdcComboT<T>::get_ListRows(void)
{
  long ListRows;
  OLECHECK(this->get_ListRows((long*)&ListRows));
  return ListRows;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_ListStyle(Msforms_97::fmListStyle ListStyle/*[in]*/)
{
  return (*this)->set_ListStyle(ListStyle);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_ListStyle(Msforms_97::fmListStyle* ListStyle/*[out,retval]*/)
{
  return (*this)->get_ListStyle(ListStyle);
}

template <class T> Msforms_97::fmListStyle __fastcall
TCOMIMdcComboT<T>::get_ListStyle(void)
{
  Msforms_97::fmListStyle ListStyle;
  OLECHECK(this->get_ListStyle((Msforms_97::fmListStyle*)&ListStyle));
  return ListStyle;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_ListWidth(VARIANT* ListWidth/*[in]*/)
{
  return (*this)->set_ListWidth(ListWidth);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_ListWidth(VARIANT* ListWidth/*[out,retval]*/)
{
  return (*this)->get_ListWidth(ListWidth);
}

template <class T> VARIANT __fastcall
TCOMIMdcComboT<T>::get_ListWidth(void)
{
  VARIANT ListWidth;
  OLECHECK(this->get_ListWidth((VARIANT*)&ListWidth));
  return ListWidth;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_Locked(VARIANT_BOOL Locked/*[in]*/)
{
  return (*this)->set_Locked(Locked);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_Locked(TOLEBOOL Locked/*[in]*/)
{
  return (*this)->set_Locked(VARIANT_BOOL)Locked);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/)
{
  return (*this)->get_Locked(Locked);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_Locked(TOLEBOOL* Locked/*[out,retval]*/)
{
  return (*this)->get_Locked(VARIANT_BOOL*)Locked);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcComboT<T>::get_Locked(void)
{
  VARIANT_BOOL Locked;
  OLECHECK(this->get_Locked((VARIANT_BOOL*)&Locked));
  return (TOLEBOOL)Locked;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_MatchEntry(Msforms_97::fmMatchEntry MatchEntry/*[in]*/)
{
  return (*this)->set_MatchEntry(MatchEntry);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_MatchEntry(Msforms_97::fmMatchEntry* MatchEntry/*[out,retval]*/)
{
  return (*this)->get_MatchEntry(MatchEntry);
}

template <class T> Msforms_97::fmMatchEntry __fastcall
TCOMIMdcComboT<T>::get_MatchEntry(void)
{
  Msforms_97::fmMatchEntry MatchEntry;
  OLECHECK(this->get_MatchEntry((Msforms_97::fmMatchEntry*)&MatchEntry));
  return MatchEntry;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_MatchFound(VARIANT_BOOL* MatchFound/*[out,retval]*/)
{
  return (*this)->get_MatchFound(MatchFound);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_MatchFound(TOLEBOOL* MatchFound/*[out,retval]*/)
{
  return (*this)->get_MatchFound(VARIANT_BOOL*)MatchFound);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcComboT<T>::get_MatchFound(void)
{
  VARIANT_BOOL MatchFound;
  OLECHECK(this->get_MatchFound((VARIANT_BOOL*)&MatchFound));
  return (TOLEBOOL)MatchFound;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_MatchRequired(VARIANT_BOOL MatchRequired/*[in]*/)
{
  return (*this)->set_MatchRequired(MatchRequired);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_MatchRequired(TOLEBOOL MatchRequired/*[in]*/)
{
  return (*this)->set_MatchRequired(VARIANT_BOOL)MatchRequired);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_MatchRequired(VARIANT_BOOL* MatchRequired/*[out,retval]*/)
{
  return (*this)->get_MatchRequired(MatchRequired);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_MatchRequired(TOLEBOOL* MatchRequired/*[out,retval]*/)
{
  return (*this)->get_MatchRequired(VARIANT_BOOL*)MatchRequired);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcComboT<T>::get_MatchRequired(void)
{
  VARIANT_BOOL MatchRequired;
  OLECHECK(this->get_MatchRequired((VARIANT_BOOL*)&MatchRequired));
  return (TOLEBOOL)MatchRequired;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_MaxLength(long MaxLength/*[in]*/)
{
  return (*this)->set_MaxLength(MaxLength);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_MaxLength(long* MaxLength/*[out,retval]*/)
{
  return (*this)->get_MaxLength(MaxLength);
}

template <class T> long __fastcall
TCOMIMdcComboT<T>::get_MaxLength(void)
{
  long MaxLength;
  OLECHECK(this->get_MaxLength((long*)&MaxLength));
  return MaxLength;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::_set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(IPictureDisp***)MouseIcon);
}

template <class T> IPictureDisp* __fastcall
TCOMIMdcComboT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
  return (IPictureDisp*)MouseIcon;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  return (*this)->set_MousePointer(MousePointer);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  return (*this)->get_MousePointer(MousePointer);
}

template <class T> Msforms_97::fmMousePointer __fastcall
TCOMIMdcComboT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
  return MousePointer;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_SelectionMargin(VARIANT_BOOL SelectionMargin/*[in]*/)
{
  return (*this)->set_SelectionMargin(SelectionMargin);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_SelectionMargin(TOLEBOOL SelectionMargin/*[in]*/)
{
  return (*this)->set_SelectionMargin(VARIANT_BOOL)SelectionMargin);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_SelectionMargin(VARIANT_BOOL* SelectionMargin/*[out,retval]*/)
{
  return (*this)->get_SelectionMargin(SelectionMargin);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_SelectionMargin(TOLEBOOL* SelectionMargin/*[out,retval]*/)
{
  return (*this)->get_SelectionMargin(VARIANT_BOOL*)SelectionMargin);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcComboT<T>::get_SelectionMargin(void)
{
  VARIANT_BOOL SelectionMargin;
  OLECHECK(this->get_SelectionMargin((VARIANT_BOOL*)&SelectionMargin));
  return (TOLEBOOL)SelectionMargin;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_SelLength(long SelLength/*[in]*/)
{
  return (*this)->set_SelLength(SelLength);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_SelLength(long* SelLength/*[out,retval]*/)
{
  return (*this)->get_SelLength(SelLength);
}

template <class T> long __fastcall
TCOMIMdcComboT<T>::get_SelLength(void)
{
  long SelLength;
  OLECHECK(this->get_SelLength((long*)&SelLength));
  return SelLength;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_SelStart(long SelStart/*[in]*/)
{
  return (*this)->set_SelStart(SelStart);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_SelStart(long* SelStart/*[out,retval]*/)
{
  return (*this)->get_SelStart(SelStart);
}

template <class T> long __fastcall
TCOMIMdcComboT<T>::get_SelStart(void)
{
  long SelStart;
  OLECHECK(this->get_SelStart((long*)&SelStart));
  return SelStart;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_SelText(BSTR SelText/*[in]*/)
{
  return (*this)->set_SelText(SelText);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_SelText(BSTR* SelText/*[out,retval]*/)
{
  return (*this)->get_SelText(SelText);
}

template <class T> BSTR __fastcall
TCOMIMdcComboT<T>::get_SelText(void)
{
  BSTR SelText = 0;
  OLECHECK(this->get_SelText((BSTR*)&SelText));
  return SelText;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen/*[in]*/)
{
  return (*this)->set_ShowDropButtonWhen(ShowDropButtonWhen);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen* ShowDropButtonWhen/*[out,retval]*/)
{
  return (*this)->get_ShowDropButtonWhen(ShowDropButtonWhen);
}

template <class T> Msforms_97::fmShowDropButtonWhen __fastcall
TCOMIMdcComboT<T>::get_ShowDropButtonWhen(void)
{
  Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen;
  OLECHECK(this->get_ShowDropButtonWhen((Msforms_97::fmShowDropButtonWhen*)&ShowDropButtonWhen));
  return ShowDropButtonWhen;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/)
{
  return (*this)->set_SpecialEffect(SpecialEffect);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(SpecialEffect);
}

template <class T> Msforms_97::fmSpecialEffect __fastcall
TCOMIMdcComboT<T>::get_SpecialEffect(void)
{
  Msforms_97::fmSpecialEffect SpecialEffect;
  OLECHECK(this->get_SpecialEffect((Msforms_97::fmSpecialEffect*)&SpecialEffect));
  return SpecialEffect;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_Style(Msforms_97::fmStyle Style/*[in]*/)
{
  return (*this)->set_Style(Style);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_Style(Msforms_97::fmStyle* Style/*[out,retval]*/)
{
  return (*this)->get_Style(Style);
}

template <class T> Msforms_97::fmStyle __fastcall
TCOMIMdcComboT<T>::get_Style(void)
{
  Msforms_97::fmStyle Style;
  OLECHECK(this->get_Style((Msforms_97::fmStyle*)&Style));
  return Style;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_Text(BSTR Text/*[in]*/)
{
  return (*this)->set_Text(Text);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_Text(BSTR* Text/*[out,retval]*/)
{
  return (*this)->get_Text(Text);
}

template <class T> BSTR __fastcall
TCOMIMdcComboT<T>::get_Text(void)
{
  BSTR Text = 0;
  OLECHECK(this->get_Text((BSTR*)&Text));
  return Text;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/)
{
  return (*this)->set_TextAlign(TextAlign);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/)
{
  return (*this)->get_TextAlign(TextAlign);
}

template <class T> Msforms_97::fmTextAlign __fastcall
TCOMIMdcComboT<T>::get_TextAlign(void)
{
  Msforms_97::fmTextAlign TextAlign;
  OLECHECK(this->get_TextAlign((Msforms_97::fmTextAlign*)&TextAlign));
  return TextAlign;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_TextColumn(VARIANT* TextColumn/*[in]*/)
{
  return (*this)->set_TextColumn(TextColumn);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_TextColumn(VARIANT* TextColumn/*[out,retval]*/)
{
  return (*this)->get_TextColumn(TextColumn);
}

template <class T> VARIANT __fastcall
TCOMIMdcComboT<T>::get_TextColumn(void)
{
  VARIANT TextColumn;
  OLECHECK(this->get_TextColumn((VARIANT*)&TextColumn));
  return TextColumn;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_TextLength(long* TextLength/*[out,retval]*/)
{
  return (*this)->get_TextLength(TextLength);
}

template <class T> long __fastcall
TCOMIMdcComboT<T>::get_TextLength(void)
{
  long TextLength;
  OLECHECK(this->get_TextLength((long*)&TextLength));
  return TextLength;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_TopIndex(VARIANT* TopIndex/*[in]*/)
{
  return (*this)->set_TopIndex(TopIndex);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_TopIndex(VARIANT* TopIndex/*[out,retval]*/)
{
  return (*this)->get_TopIndex(TopIndex);
}

template <class T> VARIANT __fastcall
TCOMIMdcComboT<T>::get_TopIndex(void)
{
  VARIANT TopIndex;
  OLECHECK(this->get_TopIndex((VARIANT*)&TopIndex));
  return TopIndex;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/)
{
  return (*this)->get_Valid(Valid);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_Valid(TOLEBOOL* Valid/*[out,retval]*/)
{
  return (*this)->get_Valid(VARIANT_BOOL*)Valid);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcComboT<T>::get_Valid(void)
{
  VARIANT_BOOL Valid;
  OLECHECK(this->get_Valid((VARIANT_BOOL*)&Valid));
  return (TOLEBOOL)Valid;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_Value(VARIANT* Value/*[in]*/)
{
  return (*this)->set_Value(Value);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  return (*this)->get_Value(Value);
}

template <class T> VARIANT __fastcall
TCOMIMdcComboT<T>::get_Value(void)
{
  VARIANT Value;
  OLECHECK(this->get_Value((VARIANT*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_Column(VARIANT* pvargColumn/*[in,opt]*/, VARIANT* pvargIndex/*[in,opt]*/, 
                              VARIANT* pvargValue/*[out,retval]*/)
{
  return (*this)->get_Column(pvargColumn, pvargIndex, pvargValue);
}

template <class T> VARIANT __fastcall
TCOMIMdcComboT<T>::get_Column(VARIANT* pvargColumn/*[in,opt]*/, VARIANT* pvargIndex/*[in,opt]*/)
{
  VARIANT pvargValue;
  OLECHECK(this->get_Column(, (VARIANT*)&pvargValue));
  return pvargValue;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_Column(VARIANT* pvargColumn/*[in,opt]*/, VARIANT* pvargIndex/*[in,opt]*/, 
                              VARIANT* pvargValue/*[in]*/)
{
  return (*this)->set_Column(pvargColumn, pvargIndex, pvargValue);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_List(VARIANT* pvargIndex/*[in,opt]*/, VARIANT* pvargColumn/*[in,opt]*/, 
                            VARIANT* pvargValue/*[out,retval]*/)
{
  return (*this)->get_List(pvargIndex, pvargColumn, pvargValue);
}

template <class T> VARIANT __fastcall
TCOMIMdcComboT<T>::get_List(VARIANT* pvargIndex/*[in,opt]*/, VARIANT* pvargColumn/*[in,opt]*/)
{
  VARIANT pvargValue;
  OLECHECK(this->get_List(, (VARIANT*)&pvargValue));
  return pvargValue;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_List(VARIANT* pvargIndex/*[in,opt]*/, VARIANT* pvargColumn/*[in,opt]*/, 
                            VARIANT* pvargValue/*[in]*/)
{
  return (*this)->set_List(pvargIndex, pvargColumn, pvargValue);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::AddItem(VARIANT* pvargItem/*[in,opt]*/, VARIANT* pvargIndex/*[in,opt]*/)
{
  return (*this)->AddItem(pvargItem, pvargIndex);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::DropDown(void)
{
  return (*this)->DropDown();
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::RemoveItem(VARIANT* pvargIndex/*[in]*/)
{
  return (*this)->RemoveItem(pvargIndex);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::Copy(void)
{
  return (*this)->Copy();
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::Cut(void)
{
  return (*this)->Cut();
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::Paste(void)
{
  return (*this)->Paste();
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_IMEMode(Msforms_97::fmIMEMode IMEMode/*[in]*/)
{
  return (*this)->set_IMEMode(IMEMode);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_IMEMode(Msforms_97::fmIMEMode* IMEMode/*[out,retval]*/)
{
  return (*this)->get_IMEMode(IMEMode);
}

template <class T> Msforms_97::fmIMEMode __fastcall
TCOMIMdcComboT<T>::get_IMEMode(void)
{
  Msforms_97::fmIMEMode IMEMode;
  OLECHECK(this->get_IMEMode((Msforms_97::fmIMEMode*)&IMEMode));
  return IMEMode;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior EnterFieldBehavior/*[in]*/)
{
  return (*this)->set_EnterFieldBehavior(EnterFieldBehavior);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior* EnterFieldBehavior/*[out,retval]*/)
{
  return (*this)->get_EnterFieldBehavior(EnterFieldBehavior);
}

template <class T> Msforms_97::fmEnterFieldBehavior __fastcall
TCOMIMdcComboT<T>::get_EnterFieldBehavior(void)
{
  Msforms_97::fmEnterFieldBehavior EnterFieldBehavior;
  OLECHECK(this->get_EnterFieldBehavior((Msforms_97::fmEnterFieldBehavior*)&EnterFieldBehavior));
  return EnterFieldBehavior;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::set_DragBehavior(Msforms_97::fmDragBehavior DragBehavior/*[in]*/)
{
  return (*this)->set_DragBehavior(DragBehavior);
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_DragBehavior(Msforms_97::fmDragBehavior* DragBehavior/*[out,retval]*/)
{
  return (*this)->get_DragBehavior(DragBehavior);
}

template <class T> Msforms_97::fmDragBehavior __fastcall
TCOMIMdcComboT<T>::get_DragBehavior(void)
{
  Msforms_97::fmDragBehavior DragBehavior;
  OLECHECK(this->get_DragBehavior((Msforms_97::fmDragBehavior*)&DragBehavior));
  return DragBehavior;
}

template <class T> HRESULT __fastcall
TCOMIMdcComboT<T>::get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/)
{
  return (*this)->get_DisplayStyle(DisplayStyle);
}

template <class T> Msforms_97::fmDisplayStyle __fastcall
TCOMIMdcComboT<T>::get_DisplayStyle(void)
{
  Msforms_97::fmDisplayStyle DisplayStyle;
  OLECHECK(this->get_DisplayStyle((Msforms_97::fmDisplayStyle*)&DisplayStyle));
  return DisplayStyle;
}

// *********************************************************************//
// DispIntf:  IMdcCombo
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8BD21D33-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_AutoSize(VARIANT_BOOL AutoSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<1> _args;
  _args[1] = AutoSize /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_AutoSize(VARIANT_BOOL* AutoSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoSize /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcComboDispT<T>::get_AutoSize(void)
{
  VARIANT_BOOL AutoSize;
  this->get_AutoSize((VARIANT_BOOL*)&AutoSize);
  return AutoSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_AutoTab(VARIANT_BOOL AutoTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoTab"), DISPID(217));
  TAutoArgs<1> _args;
  _args[1] = AutoTab /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_AutoTab(VARIANT_BOOL* AutoTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoTab"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoTab /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcComboDispT<T>::get_AutoTab(void)
{
  VARIANT_BOOL AutoTab;
  this->get_AutoTab((VARIANT_BOOL*)&AutoTab);
  return AutoTab;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_AutoWordSelect(VARIANT_BOOL AutoWordSelect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoWordSelect"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = AutoWordSelect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_AutoWordSelect(VARIANT_BOOL* AutoWordSelect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoWordSelect"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoWordSelect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcComboDispT<T>::get_AutoWordSelect(void)
{
  VARIANT_BOOL AutoWordSelect;
  this->get_AutoWordSelect((VARIANT_BOOL*)&AutoWordSelect);
  return AutoWordSelect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IMdcComboDispT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(-502));
  TAutoArgs<1> _args;
  _args[1] = (int)BackStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(-502));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BackStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmBackStyle __fastcall
IMdcComboDispT<T>::get_BackStyle(void)
{
  Msforms_97::fmBackStyle BackStyle;
  this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle);
  return BackStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(-503));
  TAutoArgs<1> _args;
  _args[1] = BorderColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(-503));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BorderColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IMdcComboDispT<T>::get_BorderColor(void)
{
  Msforms_97::OLE_COLOR BorderColor;
  this->get_BorderColor((Msforms_97::OLE_COLOR*)&BorderColor);
  return BorderColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_BorderStyle(Msforms_97::fmBorderStyle BorderStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<1> _args;
  _args[1] = (int)BorderStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_BorderStyle(Msforms_97::fmBorderStyle* BorderStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BorderStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmBorderStyle __fastcall
IMdcComboDispT<T>::get_BorderStyle(void)
{
  Msforms_97::fmBorderStyle BorderStyle;
  this->get_BorderStyle((Msforms_97::fmBorderStyle*)&BorderStyle);
  return BorderStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BordersSuppress"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = BordersSuppress /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BordersSuppress"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BordersSuppress /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcComboDispT<T>::get_BordersSuppress(void)
{
  VARIANT_BOOL BordersSuppress;
  this->get_BordersSuppress((VARIANT_BOOL*)&BordersSuppress);
  return BordersSuppress;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_BoundColumn(VARIANT* BoundColumn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BoundColumn"), DISPID(501));
  TAutoArgs<1> _args;
  _args[1] = BoundColumn /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_BoundColumn(VARIANT* BoundColumn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BoundColumn"), DISPID(501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BoundColumn /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcComboDispT<T>::get_BoundColumn(void)
{
  VARIANT BoundColumn;
  this->get_BoundColumn((VARIANT*)&BoundColumn);
  return BoundColumn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanPaste"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CanPaste /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcComboDispT<T>::get_CanPaste(void)
{
  VARIANT_BOOL CanPaste;
  this->get_CanPaste((VARIANT_BOOL*)&CanPaste);
  return CanPaste;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_ColumnCount(long ColumnCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnCount"), DISPID(601));
  TAutoArgs<1> _args;
  _args[1] = ColumnCount /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_ColumnCount(long* ColumnCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnCount"), DISPID(601));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ColumnCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcComboDispT<T>::get_ColumnCount(void)
{
  long ColumnCount;
  this->get_ColumnCount((long*)&ColumnCount);
  return ColumnCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_ColumnHeads(VARIANT_BOOL ColumnHeads/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHeads"), DISPID(602));
  TAutoArgs<1> _args;
  _args[1] = ColumnHeads /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_ColumnHeads(VARIANT_BOOL* ColumnHeads/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHeads"), DISPID(602));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ColumnHeads /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcComboDispT<T>::get_ColumnHeads(void)
{
  VARIANT_BOOL ColumnHeads;
  this->get_ColumnHeads((VARIANT_BOOL*)&ColumnHeads);
  return ColumnHeads;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_ColumnWidths(BSTR ColumnWidths/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidths"), DISPID(603));
  TAutoArgs<1> _args;
  _args[1] = ColumnWidths /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_ColumnWidths(BSTR* ColumnWidths/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidths"), DISPID(603));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ColumnWidths /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcComboDispT<T>::get_ColumnWidths(void)
{
  BSTR ColumnWidths;
  this->get_ColumnWidths((BSTR*)&ColumnWidths);
  return ColumnWidths;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_CurTargetX(long* CurTargetX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurTargetX"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CurTargetX /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcComboDispT<T>::get_CurTargetX(void)
{
  long CurTargetX;
  this->get_CurTargetX((long*)&CurTargetX);
  return CurTargetX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_CurTargetY(long* CurTargetY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurTargetY"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CurTargetY /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcComboDispT<T>::get_CurTargetY(void)
{
  long CurTargetY;
  this->get_CurTargetY((long*)&CurTargetY);
  return CurTargetY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_CurX(long CurX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurX"), DISPID(208));
  TAutoArgs<1> _args;
  _args[1] = CurX /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_CurX(long* CurX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurX"), DISPID(208));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CurX /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcComboDispT<T>::get_CurX(void)
{
  long CurX;
  this->get_CurX((long*)&CurX);
  return CurX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_DropButtonStyle(Msforms_97::fmDropButtonStyle DropButtonStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropButtonStyle"), DISPID(305));
  TAutoArgs<1> _args;
  _args[1] = (int)DropButtonStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_DropButtonStyle(Msforms_97::fmDropButtonStyle* DropButtonStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropButtonStyle"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DropButtonStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmDropButtonStyle __fastcall
IMdcComboDispT<T>::get_DropButtonStyle(void)
{
  Msforms_97::fmDropButtonStyle DropButtonStyle;
  this->get_DropButtonStyle((Msforms_97::fmDropButtonStyle*)&DropButtonStyle);
  return DropButtonStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Enabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcComboDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  this->get_Enabled((VARIANT_BOOL*)&Enabled);
  return Enabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Font_Reserved"), DISPID(2147483135));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Param1 /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Font /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp***)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp** __fastcall
IMdcComboDispT<T>::get_Font(void)
{
  IFontDisp** Font;
  this->get_Font((IFontDisp***)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_FontBold(VARIANT_BOOL FontBold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = FontBold /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontBold /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcComboDispT<T>::get_FontBold(void)
{
  VARIANT_BOOL FontBold;
  this->get_FontBold((VARIANT_BOOL*)&FontBold);
  return FontBold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = FontItalic /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontItalic /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcComboDispT<T>::get_FontItalic(void)
{
  VARIANT_BOOL FontItalic;
  this->get_FontItalic((VARIANT_BOOL*)&FontItalic);
  return FontItalic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = FontName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcComboDispT<T>::get_FontName(void)
{
  BSTR FontName;
  this->get_FontName((BSTR*)&FontName);
  return FontName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_FontSize(CURRENCY FontSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = FontSize /*[VT_CY:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_FontSize(CURRENCY* FontSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontSize /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMdcComboDispT<T>::get_FontSize(void)
{
  CURRENCY FontSize;
  this->get_FontSize((CURRENCY*)&FontSize);
  return FontSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = FontStrikethru /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontStrikethru /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcComboDispT<T>::get_FontStrikethru(void)
{
  VARIANT_BOOL FontStrikethru;
  this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru);
  return FontStrikethru;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = FontUnderline /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontUnderline /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcComboDispT<T>::get_FontUnderline(void)
{
  VARIANT_BOOL FontUnderline;
  this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline);
  return FontUnderline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_FontWeight(short FontWeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = FontWeight /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_FontWeight(short* FontWeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontWeight /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IMdcComboDispT<T>::get_FontWeight(void)
{
  short FontWeight;
  this->get_FontWeight((short*)&FontWeight);
  return FontWeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<1> _args;
  _args[1] = ForeColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ForeColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IMdcComboDispT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_HideSelection(VARIANT_BOOL HideSelection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideSelection"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = HideSelection /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_HideSelection(VARIANT_BOOL* HideSelection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideSelection"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HideSelection /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcComboDispT<T>::get_HideSelection(void)
{
  VARIANT_BOOL HideSelection;
  this->get_HideSelection((VARIANT_BOOL*)&HideSelection);
  return HideSelection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_LineCount(long* LineCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineCount"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LineCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcComboDispT<T>::get_LineCount(void)
{
  long LineCount;
  this->get_LineCount((long*)&LineCount);
  return LineCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_ListCount(long* ListCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListCount"), DISPID(-531));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ListCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcComboDispT<T>::get_ListCount(void)
{
  long ListCount;
  this->get_ListCount((long*)&ListCount);
  return ListCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_ListCursor(Msforms_97::PIROWSET ListCursor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListCursor"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = ListCursor /*[VT_UNKNOWN:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_ListCursor(Msforms_97::PIROWSET* ListCursor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListCursor"), DISPID(403));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ListCursor /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::PIROWSET __fastcall
IMdcComboDispT<T>::get_ListCursor(void)
{
  Msforms_97::PIROWSET ListCursor;
  this->get_ListCursor((Msforms_97::PIROWSET*)&ListCursor);
  return ListCursor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_ListIndex(VARIANT* ListIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListIndex"), DISPID(-526));
  TAutoArgs<1> _args;
  _args[1] = ListIndex /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_ListIndex(VARIANT* ListIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListIndex"), DISPID(-526));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ListIndex /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcComboDispT<T>::get_ListIndex(void)
{
  VARIANT ListIndex;
  this->get_ListIndex((VARIANT*)&ListIndex);
  return ListIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_ListRows(long ListRows/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListRows"), DISPID(605));
  TAutoArgs<1> _args;
  _args[1] = ListRows /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_ListRows(long* ListRows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListRows"), DISPID(605));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ListRows /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcComboDispT<T>::get_ListRows(void)
{
  long ListRows;
  this->get_ListRows((long*)&ListRows);
  return ListRows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_ListStyle(Msforms_97::fmListStyle ListStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListStyle"), DISPID(307));
  TAutoArgs<1> _args;
  _args[1] = (int)ListStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_ListStyle(Msforms_97::fmListStyle* ListStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListStyle"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ListStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmListStyle __fastcall
IMdcComboDispT<T>::get_ListStyle(void)
{
  Msforms_97::fmListStyle ListStyle;
  this->get_ListStyle((Msforms_97::fmListStyle*)&ListStyle);
  return ListStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_ListWidth(VARIANT* ListWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListWidth"), DISPID(606));
  TAutoArgs<1> _args;
  _args[1] = ListWidth /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_ListWidth(VARIANT* ListWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListWidth"), DISPID(606));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ListWidth /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcComboDispT<T>::get_ListWidth(void)
{
  VARIANT ListWidth;
  this->get_ListWidth((VARIANT*)&ListWidth);
  return ListWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_Locked(VARIANT_BOOL Locked/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Locked /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Locked /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcComboDispT<T>::get_Locked(void)
{
  VARIANT_BOOL Locked;
  this->get_Locked((VARIANT_BOOL*)&Locked);
  return Locked;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_MatchEntry(Msforms_97::fmMatchEntry MatchEntry/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MatchEntry"), DISPID(504));
  TAutoArgs<1> _args;
  _args[1] = (int)MatchEntry /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_MatchEntry(Msforms_97::fmMatchEntry* MatchEntry/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MatchEntry"), DISPID(504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MatchEntry /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMatchEntry __fastcall
IMdcComboDispT<T>::get_MatchEntry(void)
{
  Msforms_97::fmMatchEntry MatchEntry;
  this->get_MatchEntry((Msforms_97::fmMatchEntry*)&MatchEntry);
  return MatchEntry;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_MatchFound(VARIANT_BOOL* MatchFound/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MatchFound"), DISPID(505));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MatchFound /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcComboDispT<T>::get_MatchFound(void)
{
  VARIANT_BOOL MatchFound;
  this->get_MatchFound((VARIANT_BOOL*)&MatchFound);
  return MatchFound;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_MatchRequired(VARIANT_BOOL MatchRequired/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MatchRequired"), DISPID(503));
  TAutoArgs<1> _args;
  _args[1] = MatchRequired /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_MatchRequired(VARIANT_BOOL* MatchRequired/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MatchRequired"), DISPID(503));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MatchRequired /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcComboDispT<T>::get_MatchRequired(void)
{
  VARIANT_BOOL MatchRequired;
  this->get_MatchRequired((VARIANT_BOOL*)&MatchRequired);
  return MatchRequired;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_MaxLength(long MaxLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxLength"), DISPID(-533));
  TAutoArgs<1> _args;
  _args[1] = MaxLength /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_MaxLength(long* MaxLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxLength"), DISPID(-533));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MaxLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcComboDispT<T>::get_MaxLength(void)
{
  long MaxLength;
  this->get_MaxLength((long*)&MaxLength);
  return MaxLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)MouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
IMdcComboDispT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  this->get_MouseIcon((IPictureDisp***)&MouseIcon);
  return MouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<1> _args;
  _args[1] = (int)MousePointer /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MousePointer /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMousePointer __fastcall
IMdcComboDispT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer);
  return MousePointer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_SelectionMargin(VARIANT_BOOL SelectionMargin/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectionMargin"), DISPID(220));
  TAutoArgs<1> _args;
  _args[1] = SelectionMargin /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_SelectionMargin(VARIANT_BOOL* SelectionMargin/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectionMargin"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SelectionMargin /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcComboDispT<T>::get_SelectionMargin(void)
{
  VARIANT_BOOL SelectionMargin;
  this->get_SelectionMargin((VARIANT_BOOL*)&SelectionMargin);
  return SelectionMargin;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_SelLength(long SelLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelLength"), DISPID(-548));
  TAutoArgs<1> _args;
  _args[1] = SelLength /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_SelLength(long* SelLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelLength"), DISPID(-548));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SelLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcComboDispT<T>::get_SelLength(void)
{
  long SelLength;
  this->get_SelLength((long*)&SelLength);
  return SelLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_SelStart(long SelStart/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelStart"), DISPID(-547));
  TAutoArgs<1> _args;
  _args[1] = SelStart /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_SelStart(long* SelStart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelStart"), DISPID(-547));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SelStart /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcComboDispT<T>::get_SelStart(void)
{
  long SelStart;
  this->get_SelStart((long*)&SelStart);
  return SelStart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_SelText(BSTR SelText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelText"), DISPID(-546));
  TAutoArgs<1> _args;
  _args[1] = SelText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_SelText(BSTR* SelText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelText"), DISPID(-546));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SelText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcComboDispT<T>::get_SelText(void)
{
  BSTR SelText;
  this->get_SelText((BSTR*)&SelText);
  return SelText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDropButtonWhen"), DISPID(304));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowDropButtonWhen /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_ShowDropButtonWhen(Msforms_97::fmShowDropButtonWhen* ShowDropButtonWhen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDropButtonWhen"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowDropButtonWhen /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmShowDropButtonWhen __fastcall
IMdcComboDispT<T>::get_ShowDropButtonWhen(void)
{
  Msforms_97::fmShowDropButtonWhen ShowDropButtonWhen;
  this->get_ShowDropButtonWhen((Msforms_97::fmShowDropButtonWhen*)&ShowDropButtonWhen);
  return ShowDropButtonWhen;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)SpecialEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SpecialEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmSpecialEffect __fastcall
IMdcComboDispT<T>::get_SpecialEffect(void)
{
  Msforms_97::fmSpecialEffect SpecialEffect;
  this->get_SpecialEffect((Msforms_97::fmSpecialEffect*)&SpecialEffect);
  return SpecialEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_Style(Msforms_97::fmStyle Style/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(308));
  TAutoArgs<1> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_Style(Msforms_97::fmStyle* Style/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Style /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmStyle __fastcall
IMdcComboDispT<T>::get_Style(void)
{
  Msforms_97::fmStyle Style;
  this->get_Style((Msforms_97::fmStyle*)&Style);
  return Style;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_Text(BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(-517));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_Text(BSTR* Text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(-517));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcComboDispT<T>::get_Text(void)
{
  BSTR Text;
  this->get_Text((BSTR*)&Text);
  return Text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(10004));
  TAutoArgs<1> _args;
  _args[1] = (int)TextAlign /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(10004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TextAlign /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmTextAlign __fastcall
IMdcComboDispT<T>::get_TextAlign(void)
{
  Msforms_97::fmTextAlign TextAlign;
  this->get_TextAlign((Msforms_97::fmTextAlign*)&TextAlign);
  return TextAlign;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_TextColumn(VARIANT* TextColumn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextColumn"), DISPID(502));
  TAutoArgs<1> _args;
  _args[1] = TextColumn /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_TextColumn(VARIANT* TextColumn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextColumn"), DISPID(502));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TextColumn /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcComboDispT<T>::get_TextColumn(void)
{
  VARIANT TextColumn;
  this->get_TextColumn((VARIANT*)&TextColumn);
  return TextColumn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_TextLength(long* TextLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextLength"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TextLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMdcComboDispT<T>::get_TextLength(void)
{
  long TextLength;
  this->get_TextLength((long*)&TextLength);
  return TextLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_TopIndex(VARIANT* TopIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopIndex"), DISPID(611));
  TAutoArgs<1> _args;
  _args[1] = TopIndex /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_TopIndex(VARIANT* TopIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopIndex"), DISPID(611));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TopIndex /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcComboDispT<T>::get_TopIndex(void)
{
  VARIANT TopIndex;
  this->get_TopIndex((VARIANT*)&TopIndex);
  return TopIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Valid"), DISPID(-524));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Valid /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcComboDispT<T>::get_Valid(void)
{
  VARIANT_BOOL Valid;
  this->get_Valid((VARIANT_BOOL*)&Valid);
  return Valid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_Value(VARIANT* Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcComboDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_Column(VARIANT* pvargColumn/*[in,opt]*/, VARIANT* pvargIndex/*[in,opt]*/, 
                              VARIANT* pvargValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Column"), DISPID(-529));
  TAutoArgs<2> _args;
  _args[1] = pvargColumn /*[VT_VARIANT:1]*/;
  _args[2] = pvargIndex /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(pvargValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcComboDispT<T>::get_Column(VARIANT* pvargColumn/*[in,opt]*/, VARIANT* pvargIndex/*[in,opt]*/)
{
  VARIANT pvargValue;
  this->get_Column(pvargColumn, pvargIndex, (VARIANT*)&pvargValue);
  return pvargValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_Column(VARIANT* pvargColumn/*[in,opt]*/, VARIANT* pvargIndex/*[in,opt]*/, 
                              VARIANT* pvargValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Column"), DISPID(-529));
  TAutoArgs<3> _args;
  _args[1] = pvargColumn /*[VT_VARIANT:1]*/;
  _args[2] = pvargIndex /*[VT_VARIANT:1]*/;
  _args[3] = pvargValue /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_List(VARIANT* pvargIndex/*[in,opt]*/, VARIANT* pvargColumn/*[in,opt]*/, 
                            VARIANT* pvargValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("List"), DISPID(-528));
  TAutoArgs<2> _args;
  _args[1] = pvargIndex /*[VT_VARIANT:1]*/;
  _args[2] = pvargColumn /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(pvargValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcComboDispT<T>::get_List(VARIANT* pvargIndex/*[in,opt]*/, VARIANT* pvargColumn/*[in,opt]*/)
{
  VARIANT pvargValue;
  this->get_List(pvargIndex, pvargColumn, (VARIANT*)&pvargValue);
  return pvargValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_List(VARIANT* pvargIndex/*[in,opt]*/, VARIANT* pvargColumn/*[in,opt]*/, 
                            VARIANT* pvargValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("List"), DISPID(-528));
  TAutoArgs<3> _args;
  _args[1] = pvargIndex /*[VT_VARIANT:1]*/;
  _args[2] = pvargColumn /*[VT_VARIANT:1]*/;
  _args[3] = pvargValue /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::AddItem(VARIANT* pvargItem/*[in,opt]*/, VARIANT* pvargIndex/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(-553));
  TAutoArgs<2> _args;
  _args[1] = pvargItem /*[VT_VARIANT:1]*/;
  _args[2] = pvargIndex /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(-554));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::DropDown()
{
  _TDispID _dispid(*this, OLETEXT("DropDown"), DISPID(1001));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::RemoveItem(VARIANT* pvargIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveItem"), DISPID(-555));
  TAutoArgs<1> _args;
  _args[1] = pvargIndex /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::Copy()
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::Cut()
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(21));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::Paste()
{
  _TDispID _dispid(*this, OLETEXT("Paste"), DISPID(24));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_IMEMode(Msforms_97::fmIMEMode IMEMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IMEMode"), DISPID(-542));
  TAutoArgs<1> _args;
  _args[1] = (int)IMEMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_IMEMode(Msforms_97::fmIMEMode* IMEMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IMEMode"), DISPID(-542));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)IMEMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmIMEMode __fastcall
IMdcComboDispT<T>::get_IMEMode(void)
{
  Msforms_97::fmIMEMode IMEMode;
  this->get_IMEMode((Msforms_97::fmIMEMode*)&IMEMode);
  return IMEMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior EnterFieldBehavior/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnterFieldBehavior"), DISPID(224));
  TAutoArgs<1> _args;
  _args[1] = (int)EnterFieldBehavior /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_EnterFieldBehavior(Msforms_97::fmEnterFieldBehavior* EnterFieldBehavior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnterFieldBehavior"), DISPID(224));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EnterFieldBehavior /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmEnterFieldBehavior __fastcall
IMdcComboDispT<T>::get_EnterFieldBehavior(void)
{
  Msforms_97::fmEnterFieldBehavior EnterFieldBehavior;
  this->get_EnterFieldBehavior((Msforms_97::fmEnterFieldBehavior*)&EnterFieldBehavior);
  return EnterFieldBehavior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::set_DragBehavior(Msforms_97::fmDragBehavior DragBehavior/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DragBehavior"), DISPID(225));
  TAutoArgs<1> _args;
  _args[1] = (int)DragBehavior /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_DragBehavior(Msforms_97::fmDragBehavior* DragBehavior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DragBehavior"), DISPID(225));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DragBehavior /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmDragBehavior __fastcall
IMdcComboDispT<T>::get_DragBehavior(void)
{
  Msforms_97::fmDragBehavior DragBehavior;
  this->get_DragBehavior((Msforms_97::fmDragBehavior*)&DragBehavior);
  return DragBehavior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcComboDispT<T>::get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayStyle"), DISPID(-540));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmDisplayStyle __fastcall
IMdcComboDispT<T>::get_DisplayStyle(void)
{
  Msforms_97::fmDisplayStyle DisplayStyle;
  this->get_DisplayStyle((Msforms_97::fmDisplayStyle*)&DisplayStyle);
  return DisplayStyle;
}

// *********************************************************************//
// SmartIntf: TCOMIMdcCheckBox
// Interface: IMdcCheckBox
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_Accelerator(BSTR Accelerator/*[in]*/)
{
  return (*this)->set_Accelerator(Accelerator);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_Accelerator(BSTR* Accelerator/*[out,retval]*/)
{
  return (*this)->get_Accelerator(Accelerator);
}

template <class T> BSTR __fastcall
TCOMIMdcCheckBoxT<T>::get_Accelerator(void)
{
  BSTR Accelerator = 0;
  OLECHECK(this->get_Accelerator((BSTR*)&Accelerator));
  return Accelerator;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_Alignment(Msforms_97::fmAlignment Alignment/*[in]*/)
{
  return (*this)->set_Alignment(Alignment);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_Alignment(Msforms_97::fmAlignment* Alignment/*[out,retval]*/)
{
  return (*this)->get_Alignment(Alignment);
}

template <class T> Msforms_97::fmAlignment __fastcall
TCOMIMdcCheckBoxT<T>::get_Alignment(void)
{
  Msforms_97::fmAlignment Alignment;
  OLECHECK(this->get_Alignment((Msforms_97::fmAlignment*)&Alignment));
  return Alignment;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_AutoSize(VARIANT_BOOL AutoSize/*[in]*/)
{
  return (*this)->set_AutoSize(AutoSize);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_AutoSize(TOLEBOOL AutoSize/*[in]*/)
{
  return (*this)->set_AutoSize(VARIANT_BOOL)AutoSize);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_AutoSize(VARIANT_BOOL* AutoSize/*[out,retval]*/)
{
  return (*this)->get_AutoSize(AutoSize);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_AutoSize(TOLEBOOL* AutoSize/*[out,retval]*/)
{
  return (*this)->get_AutoSize(VARIANT_BOOL*)AutoSize);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcCheckBoxT<T>::get_AutoSize(void)
{
  VARIANT_BOOL AutoSize;
  OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&AutoSize));
  return (TOLEBOOL)AutoSize;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  return (*this)->set_BackColor(BackColor);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  return (*this)->get_BackColor(BackColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIMdcCheckBoxT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
  return BackColor;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/)
{
  return (*this)->set_BackStyle(BackStyle);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/)
{
  return (*this)->get_BackStyle(BackStyle);
}

template <class T> Msforms_97::fmBackStyle __fastcall
TCOMIMdcCheckBoxT<T>::get_BackStyle(void)
{
  Msforms_97::fmBackStyle BackStyle;
  OLECHECK(this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle));
  return BackStyle;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/)
{
  return (*this)->set_BordersSuppress(BordersSuppress);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_BordersSuppress(TOLEBOOL BordersSuppress/*[in]*/)
{
  return (*this)->set_BordersSuppress(VARIANT_BOOL)BordersSuppress);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/)
{
  return (*this)->get_BordersSuppress(BordersSuppress);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_BordersSuppress(TOLEBOOL* BordersSuppress/*[out,retval]*/)
{
  return (*this)->get_BordersSuppress(VARIANT_BOOL*)BordersSuppress);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcCheckBoxT<T>::get_BordersSuppress(void)
{
  VARIANT_BOOL BordersSuppress;
  OLECHECK(this->get_BordersSuppress((VARIANT_BOOL*)&BordersSuppress));
  return (TOLEBOOL)BordersSuppress;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  return (*this)->set_Caption(Caption);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  return (*this)->get_Caption(Caption);
}

template <class T> BSTR __fastcall
TCOMIMdcCheckBoxT<T>::get_Caption(void)
{
  BSTR Caption = 0;
  OLECHECK(this->get_Caption((BSTR*)&Caption));
  return Caption;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  return (*this)->set_Enabled(Enabled);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_Enabled(TOLEBOOL Enabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)Enabled);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(Enabled);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_Enabled(TOLEBOOL* Enabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)Enabled);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcCheckBoxT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Enabled));
  return (TOLEBOOL)Enabled;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  return (*this)->set__Font_Reserved(Param1);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set__Font_Reserved(IFontDisp* Param1/*[in]*/)
{
  return (*this)->set__Font_Reserved(IFontDisp**)Param1);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  return (*this)->_set_Font(Font);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::_set_Font(IFontDisp* Font/*[in]*/)
{
  return (*this)->_set_Font(IFontDisp**)Font);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  return (*this)->get_Font(Font);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_Font(IFontDisp** Font/*[out,retval]*/)
{
  return (*this)->get_Font(IFontDisp***)Font);
}

template <class T> IFontDisp* __fastcall
TCOMIMdcCheckBoxT<T>::get_Font(void)
{
  IFontDisp** Font;
  OLECHECK(this->get_Font((IFontDisp***)&Font));
  return (IFontDisp*)Font;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_FontBold(VARIANT_BOOL FontBold/*[in]*/)
{
  return (*this)->set_FontBold(FontBold);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_FontBold(TOLEBOOL FontBold/*[in]*/)
{
  return (*this)->set_FontBold(VARIANT_BOOL)FontBold);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/)
{
  return (*this)->get_FontBold(FontBold);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_FontBold(TOLEBOOL* FontBold/*[out,retval]*/)
{
  return (*this)->get_FontBold(VARIANT_BOOL*)FontBold);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcCheckBoxT<T>::get_FontBold(void)
{
  VARIANT_BOOL FontBold;
  OLECHECK(this->get_FontBold((VARIANT_BOOL*)&FontBold));
  return (TOLEBOOL)FontBold;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/)
{
  return (*this)->set_FontItalic(FontItalic);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_FontItalic(TOLEBOOL FontItalic/*[in]*/)
{
  return (*this)->set_FontItalic(VARIANT_BOOL)FontItalic);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/)
{
  return (*this)->get_FontItalic(FontItalic);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_FontItalic(TOLEBOOL* FontItalic/*[out,retval]*/)
{
  return (*this)->get_FontItalic(VARIANT_BOOL*)FontItalic);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcCheckBoxT<T>::get_FontItalic(void)
{
  VARIANT_BOOL FontItalic;
  OLECHECK(this->get_FontItalic((VARIANT_BOOL*)&FontItalic));
  return (TOLEBOOL)FontItalic;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  return (*this)->set_FontName(FontName);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  return (*this)->get_FontName(FontName);
}

template <class T> BSTR __fastcall
TCOMIMdcCheckBoxT<T>::get_FontName(void)
{
  BSTR FontName = 0;
  OLECHECK(this->get_FontName((BSTR*)&FontName));
  return FontName;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_FontSize(CURRENCY FontSize/*[in]*/)
{
  return (*this)->set_FontSize(FontSize);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_FontSize(CURRENCY* FontSize/*[out,retval]*/)
{
  return (*this)->get_FontSize(FontSize);
}

template <class T> CURRENCY __fastcall
TCOMIMdcCheckBoxT<T>::get_FontSize(void)
{
  CURRENCY FontSize;
  OLECHECK(this->get_FontSize((CURRENCY*)&FontSize));
  return FontSize;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/)
{
  return (*this)->set_FontStrikethru(FontStrikethru);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_FontStrikethru(TOLEBOOL FontStrikethru/*[in]*/)
{
  return (*this)->set_FontStrikethru(VARIANT_BOOL)FontStrikethru);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/)
{
  return (*this)->get_FontStrikethru(FontStrikethru);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_FontStrikethru(TOLEBOOL* FontStrikethru/*[out,retval]*/)
{
  return (*this)->get_FontStrikethru(VARIANT_BOOL*)FontStrikethru);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcCheckBoxT<T>::get_FontStrikethru(void)
{
  VARIANT_BOOL FontStrikethru;
  OLECHECK(this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru));
  return (TOLEBOOL)FontStrikethru;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/)
{
  return (*this)->set_FontUnderline(FontUnderline);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_FontUnderline(TOLEBOOL FontUnderline/*[in]*/)
{
  return (*this)->set_FontUnderline(VARIANT_BOOL)FontUnderline);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(FontUnderline);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_FontUnderline(TOLEBOOL* FontUnderline/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(VARIANT_BOOL*)FontUnderline);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcCheckBoxT<T>::get_FontUnderline(void)
{
  VARIANT_BOOL FontUnderline;
  OLECHECK(this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline));
  return (TOLEBOOL)FontUnderline;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_FontWeight(short FontWeight/*[in]*/)
{
  return (*this)->set_FontWeight(FontWeight);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_FontWeight(short* FontWeight/*[out,retval]*/)
{
  return (*this)->get_FontWeight(FontWeight);
}

template <class T> short __fastcall
TCOMIMdcCheckBoxT<T>::get_FontWeight(void)
{
  short FontWeight;
  OLECHECK(this->get_FontWeight((short*)&FontWeight));
  return FontWeight;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  return (*this)->set_ForeColor(ForeColor);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  return (*this)->get_ForeColor(ForeColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIMdcCheckBoxT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
  return ForeColor;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_Locked(VARIANT_BOOL Locked/*[in]*/)
{
  return (*this)->set_Locked(Locked);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_Locked(TOLEBOOL Locked/*[in]*/)
{
  return (*this)->set_Locked(VARIANT_BOOL)Locked);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/)
{
  return (*this)->get_Locked(Locked);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_Locked(TOLEBOOL* Locked/*[out,retval]*/)
{
  return (*this)->get_Locked(VARIANT_BOOL*)Locked);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcCheckBoxT<T>::get_Locked(void)
{
  VARIANT_BOOL Locked;
  OLECHECK(this->get_Locked((VARIANT_BOOL*)&Locked));
  return (TOLEBOOL)Locked;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::_set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(IPictureDisp***)MouseIcon);
}

template <class T> IPictureDisp* __fastcall
TCOMIMdcCheckBoxT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
  return (IPictureDisp*)MouseIcon;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  return (*this)->set_MousePointer(MousePointer);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  return (*this)->get_MousePointer(MousePointer);
}

template <class T> Msforms_97::fmMousePointer __fastcall
TCOMIMdcCheckBoxT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
  return MousePointer;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_MultiSelect(Msforms_97::fmMultiSelect MultiSelect/*[in]*/)
{
  return (*this)->set_MultiSelect(MultiSelect);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_MultiSelect(Msforms_97::fmMultiSelect* MultiSelect/*[out,retval]*/)
{
  return (*this)->get_MultiSelect(MultiSelect);
}

template <class T> Msforms_97::fmMultiSelect __fastcall
TCOMIMdcCheckBoxT<T>::get_MultiSelect(void)
{
  Msforms_97::fmMultiSelect MultiSelect;
  OLECHECK(this->get_MultiSelect((Msforms_97::fmMultiSelect*)&MultiSelect));
  return MultiSelect;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_Picture(IPictureDisp** Picture/*[in]*/)
{
  return (*this)->set_Picture(Picture);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_Picture(IPictureDisp* Picture/*[in]*/)
{
  return (*this)->set_Picture(IPictureDisp**)Picture);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::_set_Picture(IPictureDisp** Picture/*[in]*/)
{
  return (*this)->_set_Picture(Picture);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::_set_Picture(IPictureDisp* Picture/*[in]*/)
{
  return (*this)->_set_Picture(IPictureDisp**)Picture);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_Picture(IPictureDisp*** Picture/*[out,retval]*/)
{
  return (*this)->get_Picture(Picture);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_Picture(IPictureDisp** Picture/*[out,retval]*/)
{
  return (*this)->get_Picture(IPictureDisp***)Picture);
}

template <class T> IPictureDisp* __fastcall
TCOMIMdcCheckBoxT<T>::get_Picture(void)
{
  IPictureDisp** Picture;
  OLECHECK(this->get_Picture((IPictureDisp***)&Picture));
  return (IPictureDisp*)Picture;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_PicturePosition(Msforms_97::fmPicturePosition PicPos/*[in]*/)
{
  return (*this)->set_PicturePosition(PicPos);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_PicturePosition(Msforms_97::fmPicturePosition* PicPos/*[out,retval]*/)
{
  return (*this)->get_PicturePosition(PicPos);
}

template <class T> Msforms_97::fmPicturePosition __fastcall
TCOMIMdcCheckBoxT<T>::get_PicturePosition(void)
{
  Msforms_97::fmPicturePosition PicPos;
  OLECHECK(this->get_PicturePosition((Msforms_97::fmPicturePosition*)&PicPos));
  return PicPos;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_SpecialEffect(Msforms_97::fmButtonEffect SpecialEffect/*[in]*/)
{
  return (*this)->set_SpecialEffect(SpecialEffect);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_SpecialEffect(Msforms_97::fmButtonEffect* SpecialEffect/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(SpecialEffect);
}

template <class T> Msforms_97::fmButtonEffect __fastcall
TCOMIMdcCheckBoxT<T>::get_SpecialEffect(void)
{
  Msforms_97::fmButtonEffect SpecialEffect;
  OLECHECK(this->get_SpecialEffect((Msforms_97::fmButtonEffect*)&SpecialEffect));
  return SpecialEffect;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_TripleState(VARIANT_BOOL TripleState/*[in]*/)
{
  return (*this)->set_TripleState(TripleState);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_TripleState(TOLEBOOL TripleState/*[in]*/)
{
  return (*this)->set_TripleState(VARIANT_BOOL)TripleState);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_TripleState(VARIANT_BOOL* TripleState/*[out,retval]*/)
{
  return (*this)->get_TripleState(TripleState);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_TripleState(TOLEBOOL* TripleState/*[out,retval]*/)
{
  return (*this)->get_TripleState(VARIANT_BOOL*)TripleState);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcCheckBoxT<T>::get_TripleState(void)
{
  VARIANT_BOOL TripleState;
  OLECHECK(this->get_TripleState((VARIANT_BOOL*)&TripleState));
  return (TOLEBOOL)TripleState;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/)
{
  return (*this)->get_Valid(Valid);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_Valid(TOLEBOOL* Valid/*[out,retval]*/)
{
  return (*this)->get_Valid(VARIANT_BOOL*)Valid);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcCheckBoxT<T>::get_Valid(void)
{
  VARIANT_BOOL Valid;
  OLECHECK(this->get_Valid((VARIANT_BOOL*)&Valid));
  return (TOLEBOOL)Valid;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_Value(VARIANT* Value/*[in]*/)
{
  return (*this)->set_Value(Value);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  return (*this)->get_Value(Value);
}

template <class T> VARIANT __fastcall
TCOMIMdcCheckBoxT<T>::get_Value(void)
{
  VARIANT Value;
  OLECHECK(this->get_Value((VARIANT*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/)
{
  return (*this)->set_WordWrap(WordWrap);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_WordWrap(TOLEBOOL WordWrap/*[in]*/)
{
  return (*this)->set_WordWrap(VARIANT_BOOL)WordWrap);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/)
{
  return (*this)->get_WordWrap(WordWrap);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_WordWrap(TOLEBOOL* WordWrap/*[out,retval]*/)
{
  return (*this)->get_WordWrap(VARIANT_BOOL*)WordWrap);
}

template <class T> TOLEBOOL __fastcall
TCOMIMdcCheckBoxT<T>::get_WordWrap(void)
{
  VARIANT_BOOL WordWrap;
  OLECHECK(this->get_WordWrap((VARIANT_BOOL*)&WordWrap));
  return (TOLEBOOL)WordWrap;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/)
{
  return (*this)->get_DisplayStyle(DisplayStyle);
}

template <class T> Msforms_97::fmDisplayStyle __fastcall
TCOMIMdcCheckBoxT<T>::get_DisplayStyle(void)
{
  Msforms_97::fmDisplayStyle DisplayStyle;
  OLECHECK(this->get_DisplayStyle((Msforms_97::fmDisplayStyle*)&DisplayStyle));
  return DisplayStyle;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_GroupName(BSTR GroupName/*[in]*/)
{
  return (*this)->set_GroupName(GroupName);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_GroupName(BSTR* GroupName/*[out,retval]*/)
{
  return (*this)->get_GroupName(GroupName);
}

template <class T> BSTR __fastcall
TCOMIMdcCheckBoxT<T>::get_GroupName(void)
{
  BSTR GroupName = 0;
  OLECHECK(this->get_GroupName((BSTR*)&GroupName));
  return GroupName;
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/)
{
  return (*this)->set_TextAlign(TextAlign);
}

template <class T> HRESULT __fastcall
TCOMIMdcCheckBoxT<T>::get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/)
{
  return (*this)->get_TextAlign(TextAlign);
}

template <class T> Msforms_97::fmTextAlign __fastcall
TCOMIMdcCheckBoxT<T>::get_TextAlign(void)
{
  Msforms_97::fmTextAlign TextAlign;
  OLECHECK(this->get_TextAlign((Msforms_97::fmTextAlign*)&TextAlign));
  return TextAlign;
}

// *********************************************************************//
// DispIntf:  IMdcCheckBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8BD21D43-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_Accelerator(BSTR Accelerator/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accelerator"), DISPID(-543));
  TAutoArgs<1> _args;
  _args[1] = Accelerator /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_Accelerator(BSTR* Accelerator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accelerator"), DISPID(-543));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Accelerator /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcCheckBoxDispT<T>::get_Accelerator(void)
{
  BSTR Accelerator;
  this->get_Accelerator((BSTR*)&Accelerator);
  return Accelerator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_Alignment(Msforms_97::fmAlignment Alignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(710));
  TAutoArgs<1> _args;
  _args[1] = (int)Alignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_Alignment(Msforms_97::fmAlignment* Alignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(710));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Alignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmAlignment __fastcall
IMdcCheckBoxDispT<T>::get_Alignment(void)
{
  Msforms_97::fmAlignment Alignment;
  this->get_Alignment((Msforms_97::fmAlignment*)&Alignment);
  return Alignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_AutoSize(VARIANT_BOOL AutoSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<1> _args;
  _args[1] = AutoSize /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_AutoSize(VARIANT_BOOL* AutoSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoSize /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcCheckBoxDispT<T>::get_AutoSize(void)
{
  VARIANT_BOOL AutoSize;
  this->get_AutoSize((VARIANT_BOOL*)&AutoSize);
  return AutoSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IMdcCheckBoxDispT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(-502));
  TAutoArgs<1> _args;
  _args[1] = (int)BackStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(-502));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BackStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmBackStyle __fastcall
IMdcCheckBoxDispT<T>::get_BackStyle(void)
{
  Msforms_97::fmBackStyle BackStyle;
  this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle);
  return BackStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BordersSuppress"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = BordersSuppress /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BordersSuppress"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BordersSuppress /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcCheckBoxDispT<T>::get_BordersSuppress(void)
{
  VARIANT_BOOL BordersSuppress;
  this->get_BordersSuppress((VARIANT_BOOL*)&BordersSuppress);
  return BordersSuppress;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcCheckBoxDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Enabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcCheckBoxDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  this->get_Enabled((VARIANT_BOOL*)&Enabled);
  return Enabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Font_Reserved"), DISPID(2147483135));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Param1 /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Font /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp***)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp** __fastcall
IMdcCheckBoxDispT<T>::get_Font(void)
{
  IFontDisp** Font;
  this->get_Font((IFontDisp***)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_FontBold(VARIANT_BOOL FontBold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = FontBold /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontBold /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcCheckBoxDispT<T>::get_FontBold(void)
{
  VARIANT_BOOL FontBold;
  this->get_FontBold((VARIANT_BOOL*)&FontBold);
  return FontBold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = FontItalic /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontItalic /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcCheckBoxDispT<T>::get_FontItalic(void)
{
  VARIANT_BOOL FontItalic;
  this->get_FontItalic((VARIANT_BOOL*)&FontItalic);
  return FontItalic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = FontName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcCheckBoxDispT<T>::get_FontName(void)
{
  BSTR FontName;
  this->get_FontName((BSTR*)&FontName);
  return FontName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_FontSize(CURRENCY FontSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = FontSize /*[VT_CY:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_FontSize(CURRENCY* FontSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontSize /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMdcCheckBoxDispT<T>::get_FontSize(void)
{
  CURRENCY FontSize;
  this->get_FontSize((CURRENCY*)&FontSize);
  return FontSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = FontStrikethru /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontStrikethru /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcCheckBoxDispT<T>::get_FontStrikethru(void)
{
  VARIANT_BOOL FontStrikethru;
  this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru);
  return FontStrikethru;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = FontUnderline /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontUnderline /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcCheckBoxDispT<T>::get_FontUnderline(void)
{
  VARIANT_BOOL FontUnderline;
  this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline);
  return FontUnderline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_FontWeight(short FontWeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = FontWeight /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_FontWeight(short* FontWeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontWeight /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IMdcCheckBoxDispT<T>::get_FontWeight(void)
{
  short FontWeight;
  this->get_FontWeight((short*)&FontWeight);
  return FontWeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<1> _args;
  _args[1] = ForeColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ForeColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IMdcCheckBoxDispT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_Locked(VARIANT_BOOL Locked/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Locked /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Locked /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcCheckBoxDispT<T>::get_Locked(void)
{
  VARIANT_BOOL Locked;
  this->get_Locked((VARIANT_BOOL*)&Locked);
  return Locked;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)MouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
IMdcCheckBoxDispT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  this->get_MouseIcon((IPictureDisp***)&MouseIcon);
  return MouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<1> _args;
  _args[1] = (int)MousePointer /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MousePointer /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMousePointer __fastcall
IMdcCheckBoxDispT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer);
  return MousePointer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_MultiSelect(Msforms_97::fmMultiSelect MultiSelect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiSelect"), DISPID(-532));
  TAutoArgs<1> _args;
  _args[1] = (int)MultiSelect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_MultiSelect(Msforms_97::fmMultiSelect* MultiSelect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiSelect"), DISPID(-532));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MultiSelect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMultiSelect __fastcall
IMdcCheckBoxDispT<T>::get_MultiSelect(void)
{
  Msforms_97::fmMultiSelect MultiSelect;
  this->get_MultiSelect((Msforms_97::fmMultiSelect*)&MultiSelect);
  return MultiSelect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_Picture(IPictureDisp** Picture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)Picture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::_set_Picture(IPictureDisp** Picture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)Picture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_Picture(IPictureDisp*** Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)Picture /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
IMdcCheckBoxDispT<T>::get_Picture(void)
{
  IPictureDisp** Picture;
  this->get_Picture((IPictureDisp***)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_PicturePosition(Msforms_97::fmPicturePosition PicPos/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PicturePosition"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = (int)PicPos /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_PicturePosition(Msforms_97::fmPicturePosition* PicPos/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PicturePosition"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PicPos /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmPicturePosition __fastcall
IMdcCheckBoxDispT<T>::get_PicturePosition(void)
{
  Msforms_97::fmPicturePosition PicPos;
  this->get_PicturePosition((Msforms_97::fmPicturePosition*)&PicPos);
  return PicPos;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_SpecialEffect(Msforms_97::fmButtonEffect SpecialEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)SpecialEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_SpecialEffect(Msforms_97::fmButtonEffect* SpecialEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SpecialEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmButtonEffect __fastcall
IMdcCheckBoxDispT<T>::get_SpecialEffect(void)
{
  Msforms_97::fmButtonEffect SpecialEffect;
  this->get_SpecialEffect((Msforms_97::fmButtonEffect*)&SpecialEffect);
  return SpecialEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_TripleState(VARIANT_BOOL TripleState/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TripleState"), DISPID(700));
  TAutoArgs<1> _args;
  _args[1] = TripleState /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_TripleState(VARIANT_BOOL* TripleState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TripleState"), DISPID(700));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TripleState /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcCheckBoxDispT<T>::get_TripleState(void)
{
  VARIANT_BOOL TripleState;
  this->get_TripleState((VARIANT_BOOL*)&TripleState);
  return TripleState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Valid"), DISPID(-524));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Valid /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcCheckBoxDispT<T>::get_Valid(void)
{
  VARIANT_BOOL Valid;
  this->get_Valid((VARIANT_BOOL*)&Valid);
  return Valid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_Value(VARIANT* Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcCheckBoxDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(-536));
  TAutoArgs<1> _args;
  _args[1] = WordWrap /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(-536));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(WordWrap /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcCheckBoxDispT<T>::get_WordWrap(void)
{
  VARIANT_BOOL WordWrap;
  this->get_WordWrap((VARIANT_BOOL*)&WordWrap);
  return WordWrap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayStyle"), DISPID(-540));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmDisplayStyle __fastcall
IMdcCheckBoxDispT<T>::get_DisplayStyle(void)
{
  Msforms_97::fmDisplayStyle DisplayStyle;
  this->get_DisplayStyle((Msforms_97::fmDisplayStyle*)&DisplayStyle);
  return DisplayStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_GroupName(BSTR GroupName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupName"), DISPID(-541));
  TAutoArgs<1> _args;
  _args[1] = GroupName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_GroupName(BSTR* GroupName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupName"), DISPID(-541));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GroupName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcCheckBoxDispT<T>::get_GroupName(void)
{
  BSTR GroupName;
  this->get_GroupName((BSTR*)&GroupName);
  return GroupName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(10004));
  TAutoArgs<1> _args;
  _args[1] = (int)TextAlign /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcCheckBoxDispT<T>::get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(10004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TextAlign /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmTextAlign __fastcall
IMdcCheckBoxDispT<T>::get_TextAlign(void)
{
  Msforms_97::fmTextAlign TextAlign;
  this->get_TextAlign((Msforms_97::fmTextAlign*)&TextAlign);
  return TextAlign;
}

// *********************************************************************//
// SmartIntf: TCOMIMdcOptionButton
// Interface: IMdcOptionButton
// *********************************************************************//
// *********************************************************************//
// DispIntf:  IMdcOptionButton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8BD21D53-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_Accelerator(BSTR Accelerator/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accelerator"), DISPID(-543));
  TAutoArgs<1> _args;
  _args[1] = Accelerator /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_Accelerator(BSTR* Accelerator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accelerator"), DISPID(-543));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Accelerator /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcOptionButtonDispT<T>::get_Accelerator(void)
{
  BSTR Accelerator;
  this->get_Accelerator((BSTR*)&Accelerator);
  return Accelerator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_Alignment(Msforms_97::fmAlignment Alignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(710));
  TAutoArgs<1> _args;
  _args[1] = (int)Alignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_Alignment(Msforms_97::fmAlignment* Alignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(710));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Alignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmAlignment __fastcall
IMdcOptionButtonDispT<T>::get_Alignment(void)
{
  Msforms_97::fmAlignment Alignment;
  this->get_Alignment((Msforms_97::fmAlignment*)&Alignment);
  return Alignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_AutoSize(VARIANT_BOOL AutoSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<1> _args;
  _args[1] = AutoSize /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_AutoSize(VARIANT_BOOL* AutoSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoSize /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcOptionButtonDispT<T>::get_AutoSize(void)
{
  VARIANT_BOOL AutoSize;
  this->get_AutoSize((VARIANT_BOOL*)&AutoSize);
  return AutoSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IMdcOptionButtonDispT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(-502));
  TAutoArgs<1> _args;
  _args[1] = (int)BackStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(-502));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BackStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmBackStyle __fastcall
IMdcOptionButtonDispT<T>::get_BackStyle(void)
{
  Msforms_97::fmBackStyle BackStyle;
  this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle);
  return BackStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BordersSuppress"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = BordersSuppress /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BordersSuppress"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BordersSuppress /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcOptionButtonDispT<T>::get_BordersSuppress(void)
{
  VARIANT_BOOL BordersSuppress;
  this->get_BordersSuppress((VARIANT_BOOL*)&BordersSuppress);
  return BordersSuppress;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcOptionButtonDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Enabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcOptionButtonDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  this->get_Enabled((VARIANT_BOOL*)&Enabled);
  return Enabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Font_Reserved"), DISPID(2147483135));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Param1 /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Font /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp***)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp** __fastcall
IMdcOptionButtonDispT<T>::get_Font(void)
{
  IFontDisp** Font;
  this->get_Font((IFontDisp***)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_FontBold(VARIANT_BOOL FontBold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = FontBold /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontBold /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcOptionButtonDispT<T>::get_FontBold(void)
{
  VARIANT_BOOL FontBold;
  this->get_FontBold((VARIANT_BOOL*)&FontBold);
  return FontBold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = FontItalic /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontItalic /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcOptionButtonDispT<T>::get_FontItalic(void)
{
  VARIANT_BOOL FontItalic;
  this->get_FontItalic((VARIANT_BOOL*)&FontItalic);
  return FontItalic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = FontName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcOptionButtonDispT<T>::get_FontName(void)
{
  BSTR FontName;
  this->get_FontName((BSTR*)&FontName);
  return FontName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_FontSize(CURRENCY FontSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = FontSize /*[VT_CY:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_FontSize(CURRENCY* FontSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontSize /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMdcOptionButtonDispT<T>::get_FontSize(void)
{
  CURRENCY FontSize;
  this->get_FontSize((CURRENCY*)&FontSize);
  return FontSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = FontStrikethru /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontStrikethru /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcOptionButtonDispT<T>::get_FontStrikethru(void)
{
  VARIANT_BOOL FontStrikethru;
  this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru);
  return FontStrikethru;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = FontUnderline /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontUnderline /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcOptionButtonDispT<T>::get_FontUnderline(void)
{
  VARIANT_BOOL FontUnderline;
  this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline);
  return FontUnderline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_FontWeight(short FontWeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = FontWeight /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_FontWeight(short* FontWeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontWeight /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IMdcOptionButtonDispT<T>::get_FontWeight(void)
{
  short FontWeight;
  this->get_FontWeight((short*)&FontWeight);
  return FontWeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<1> _args;
  _args[1] = ForeColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ForeColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IMdcOptionButtonDispT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_Locked(VARIANT_BOOL Locked/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Locked /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Locked /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcOptionButtonDispT<T>::get_Locked(void)
{
  VARIANT_BOOL Locked;
  this->get_Locked((VARIANT_BOOL*)&Locked);
  return Locked;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)MouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
IMdcOptionButtonDispT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  this->get_MouseIcon((IPictureDisp***)&MouseIcon);
  return MouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<1> _args;
  _args[1] = (int)MousePointer /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MousePointer /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMousePointer __fastcall
IMdcOptionButtonDispT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer);
  return MousePointer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_MultiSelect(Msforms_97::fmMultiSelect MultiSelect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiSelect"), DISPID(-532));
  TAutoArgs<1> _args;
  _args[1] = (int)MultiSelect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_MultiSelect(Msforms_97::fmMultiSelect* MultiSelect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiSelect"), DISPID(-532));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MultiSelect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMultiSelect __fastcall
IMdcOptionButtonDispT<T>::get_MultiSelect(void)
{
  Msforms_97::fmMultiSelect MultiSelect;
  this->get_MultiSelect((Msforms_97::fmMultiSelect*)&MultiSelect);
  return MultiSelect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_Picture(IPictureDisp** Picture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)Picture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::_set_Picture(IPictureDisp** Picture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)Picture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_Picture(IPictureDisp*** Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)Picture /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
IMdcOptionButtonDispT<T>::get_Picture(void)
{
  IPictureDisp** Picture;
  this->get_Picture((IPictureDisp***)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_PicturePosition(Msforms_97::fmPicturePosition PicPos/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PicturePosition"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = (int)PicPos /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_PicturePosition(Msforms_97::fmPicturePosition* PicPos/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PicturePosition"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PicPos /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmPicturePosition __fastcall
IMdcOptionButtonDispT<T>::get_PicturePosition(void)
{
  Msforms_97::fmPicturePosition PicPos;
  this->get_PicturePosition((Msforms_97::fmPicturePosition*)&PicPos);
  return PicPos;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_SpecialEffect(Msforms_97::fmButtonEffect SpecialEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)SpecialEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_SpecialEffect(Msforms_97::fmButtonEffect* SpecialEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SpecialEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmButtonEffect __fastcall
IMdcOptionButtonDispT<T>::get_SpecialEffect(void)
{
  Msforms_97::fmButtonEffect SpecialEffect;
  this->get_SpecialEffect((Msforms_97::fmButtonEffect*)&SpecialEffect);
  return SpecialEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_TripleState(VARIANT_BOOL TripleState/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TripleState"), DISPID(700));
  TAutoArgs<1> _args;
  _args[1] = TripleState /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_TripleState(VARIANT_BOOL* TripleState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TripleState"), DISPID(700));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TripleState /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcOptionButtonDispT<T>::get_TripleState(void)
{
  VARIANT_BOOL TripleState;
  this->get_TripleState((VARIANT_BOOL*)&TripleState);
  return TripleState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Valid"), DISPID(-524));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Valid /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcOptionButtonDispT<T>::get_Valid(void)
{
  VARIANT_BOOL Valid;
  this->get_Valid((VARIANT_BOOL*)&Valid);
  return Valid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_Value(VARIANT* Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcOptionButtonDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(-536));
  TAutoArgs<1> _args;
  _args[1] = WordWrap /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(-536));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(WordWrap /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcOptionButtonDispT<T>::get_WordWrap(void)
{
  VARIANT_BOOL WordWrap;
  this->get_WordWrap((VARIANT_BOOL*)&WordWrap);
  return WordWrap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayStyle"), DISPID(-540));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmDisplayStyle __fastcall
IMdcOptionButtonDispT<T>::get_DisplayStyle(void)
{
  Msforms_97::fmDisplayStyle DisplayStyle;
  this->get_DisplayStyle((Msforms_97::fmDisplayStyle*)&DisplayStyle);
  return DisplayStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_GroupName(BSTR GroupName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupName"), DISPID(-541));
  TAutoArgs<1> _args;
  _args[1] = GroupName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_GroupName(BSTR* GroupName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupName"), DISPID(-541));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GroupName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcOptionButtonDispT<T>::get_GroupName(void)
{
  BSTR GroupName;
  this->get_GroupName((BSTR*)&GroupName);
  return GroupName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(10004));
  TAutoArgs<1> _args;
  _args[1] = (int)TextAlign /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcOptionButtonDispT<T>::get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(10004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TextAlign /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmTextAlign __fastcall
IMdcOptionButtonDispT<T>::get_TextAlign(void)
{
  Msforms_97::fmTextAlign TextAlign;
  this->get_TextAlign((Msforms_97::fmTextAlign*)&TextAlign);
  return TextAlign;
}

// *********************************************************************//
// SmartIntf: TCOMIMdcToggleButton
// Interface: IMdcToggleButton
// *********************************************************************//
// *********************************************************************//
// DispIntf:  IMdcToggleButton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8BD21D63-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_Accelerator(BSTR Accelerator/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accelerator"), DISPID(-543));
  TAutoArgs<1> _args;
  _args[1] = Accelerator /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_Accelerator(BSTR* Accelerator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accelerator"), DISPID(-543));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Accelerator /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcToggleButtonDispT<T>::get_Accelerator(void)
{
  BSTR Accelerator;
  this->get_Accelerator((BSTR*)&Accelerator);
  return Accelerator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_Alignment(Msforms_97::fmAlignment Alignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(710));
  TAutoArgs<1> _args;
  _args[1] = (int)Alignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_Alignment(Msforms_97::fmAlignment* Alignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(710));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Alignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmAlignment __fastcall
IMdcToggleButtonDispT<T>::get_Alignment(void)
{
  Msforms_97::fmAlignment Alignment;
  this->get_Alignment((Msforms_97::fmAlignment*)&Alignment);
  return Alignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_AutoSize(VARIANT_BOOL AutoSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<1> _args;
  _args[1] = AutoSize /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_AutoSize(VARIANT_BOOL* AutoSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoSize /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcToggleButtonDispT<T>::get_AutoSize(void)
{
  VARIANT_BOOL AutoSize;
  this->get_AutoSize((VARIANT_BOOL*)&AutoSize);
  return AutoSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IMdcToggleButtonDispT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(-502));
  TAutoArgs<1> _args;
  _args[1] = (int)BackStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(-502));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BackStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmBackStyle __fastcall
IMdcToggleButtonDispT<T>::get_BackStyle(void)
{
  Msforms_97::fmBackStyle BackStyle;
  this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle);
  return BackStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_BordersSuppress(VARIANT_BOOL BordersSuppress/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BordersSuppress"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = BordersSuppress /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_BordersSuppress(VARIANT_BOOL* BordersSuppress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BordersSuppress"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BordersSuppress /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcToggleButtonDispT<T>::get_BordersSuppress(void)
{
  VARIANT_BOOL BordersSuppress;
  this->get_BordersSuppress((VARIANT_BOOL*)&BordersSuppress);
  return BordersSuppress;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcToggleButtonDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Enabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcToggleButtonDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  this->get_Enabled((VARIANT_BOOL*)&Enabled);
  return Enabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Font_Reserved"), DISPID(2147483135));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Param1 /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Font /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp***)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp** __fastcall
IMdcToggleButtonDispT<T>::get_Font(void)
{
  IFontDisp** Font;
  this->get_Font((IFontDisp***)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_FontBold(VARIANT_BOOL FontBold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = FontBold /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontBold /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcToggleButtonDispT<T>::get_FontBold(void)
{
  VARIANT_BOOL FontBold;
  this->get_FontBold((VARIANT_BOOL*)&FontBold);
  return FontBold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = FontItalic /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontItalic /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcToggleButtonDispT<T>::get_FontItalic(void)
{
  VARIANT_BOOL FontItalic;
  this->get_FontItalic((VARIANT_BOOL*)&FontItalic);
  return FontItalic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = FontName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcToggleButtonDispT<T>::get_FontName(void)
{
  BSTR FontName;
  this->get_FontName((BSTR*)&FontName);
  return FontName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_FontSize(CURRENCY FontSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = FontSize /*[VT_CY:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_FontSize(CURRENCY* FontSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontSize /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMdcToggleButtonDispT<T>::get_FontSize(void)
{
  CURRENCY FontSize;
  this->get_FontSize((CURRENCY*)&FontSize);
  return FontSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_FontStrikethru(VARIANT_BOOL FontStrikethru/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = FontStrikethru /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_FontStrikethru(VARIANT_BOOL* FontStrikethru/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontStrikethru /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcToggleButtonDispT<T>::get_FontStrikethru(void)
{
  VARIANT_BOOL FontStrikethru;
  this->get_FontStrikethru((VARIANT_BOOL*)&FontStrikethru);
  return FontStrikethru;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_FontUnderline(VARIANT_BOOL FontUnderline/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = FontUnderline /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_FontUnderline(VARIANT_BOOL* FontUnderline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontUnderline /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcToggleButtonDispT<T>::get_FontUnderline(void)
{
  VARIANT_BOOL FontUnderline;
  this->get_FontUnderline((VARIANT_BOOL*)&FontUnderline);
  return FontUnderline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_FontWeight(short FontWeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = FontWeight /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_FontWeight(short* FontWeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontWeight /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IMdcToggleButtonDispT<T>::get_FontWeight(void)
{
  short FontWeight;
  this->get_FontWeight((short*)&FontWeight);
  return FontWeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<1> _args;
  _args[1] = ForeColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ForeColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IMdcToggleButtonDispT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_Locked(VARIANT_BOOL Locked/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Locked /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_Locked(VARIANT_BOOL* Locked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Locked /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcToggleButtonDispT<T>::get_Locked(void)
{
  VARIANT_BOOL Locked;
  this->get_Locked((VARIANT_BOOL*)&Locked);
  return Locked;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)MouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
IMdcToggleButtonDispT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  this->get_MouseIcon((IPictureDisp***)&MouseIcon);
  return MouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<1> _args;
  _args[1] = (int)MousePointer /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MousePointer /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMousePointer __fastcall
IMdcToggleButtonDispT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer);
  return MousePointer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_MultiSelect(Msforms_97::fmMultiSelect MultiSelect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiSelect"), DISPID(-532));
  TAutoArgs<1> _args;
  _args[1] = (int)MultiSelect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_MultiSelect(Msforms_97::fmMultiSelect* MultiSelect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiSelect"), DISPID(-532));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MultiSelect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMultiSelect __fastcall
IMdcToggleButtonDispT<T>::get_MultiSelect(void)
{
  Msforms_97::fmMultiSelect MultiSelect;
  this->get_MultiSelect((Msforms_97::fmMultiSelect*)&MultiSelect);
  return MultiSelect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_Picture(IPictureDisp** Picture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)Picture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::_set_Picture(IPictureDisp** Picture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)Picture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_Picture(IPictureDisp*** Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)Picture /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
IMdcToggleButtonDispT<T>::get_Picture(void)
{
  IPictureDisp** Picture;
  this->get_Picture((IPictureDisp***)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_PicturePosition(Msforms_97::fmPicturePosition PicPos/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PicturePosition"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = (int)PicPos /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_PicturePosition(Msforms_97::fmPicturePosition* PicPos/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PicturePosition"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PicPos /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmPicturePosition __fastcall
IMdcToggleButtonDispT<T>::get_PicturePosition(void)
{
  Msforms_97::fmPicturePosition PicPos;
  this->get_PicturePosition((Msforms_97::fmPicturePosition*)&PicPos);
  return PicPos;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_SpecialEffect(Msforms_97::fmButtonEffect SpecialEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)SpecialEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_SpecialEffect(Msforms_97::fmButtonEffect* SpecialEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SpecialEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmButtonEffect __fastcall
IMdcToggleButtonDispT<T>::get_SpecialEffect(void)
{
  Msforms_97::fmButtonEffect SpecialEffect;
  this->get_SpecialEffect((Msforms_97::fmButtonEffect*)&SpecialEffect);
  return SpecialEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_TripleState(VARIANT_BOOL TripleState/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TripleState"), DISPID(700));
  TAutoArgs<1> _args;
  _args[1] = TripleState /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_TripleState(VARIANT_BOOL* TripleState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TripleState"), DISPID(700));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TripleState /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcToggleButtonDispT<T>::get_TripleState(void)
{
  VARIANT_BOOL TripleState;
  this->get_TripleState((VARIANT_BOOL*)&TripleState);
  return TripleState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_Valid(VARIANT_BOOL* Valid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Valid"), DISPID(-524));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Valid /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcToggleButtonDispT<T>::get_Valid(void)
{
  VARIANT_BOOL Valid;
  this->get_Valid((VARIANT_BOOL*)&Valid);
  return Valid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_Value(VARIANT* Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMdcToggleButtonDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_WordWrap(VARIANT_BOOL WordWrap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(-536));
  TAutoArgs<1> _args;
  _args[1] = WordWrap /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_WordWrap(VARIANT_BOOL* WordWrap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(-536));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(WordWrap /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMdcToggleButtonDispT<T>::get_WordWrap(void)
{
  VARIANT_BOOL WordWrap;
  this->get_WordWrap((VARIANT_BOOL*)&WordWrap);
  return WordWrap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayStyle"), DISPID(-540));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmDisplayStyle __fastcall
IMdcToggleButtonDispT<T>::get_DisplayStyle(void)
{
  Msforms_97::fmDisplayStyle DisplayStyle;
  this->get_DisplayStyle((Msforms_97::fmDisplayStyle*)&DisplayStyle);
  return DisplayStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_GroupName(BSTR GroupName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupName"), DISPID(-541));
  TAutoArgs<1> _args;
  _args[1] = GroupName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_GroupName(BSTR* GroupName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupName"), DISPID(-541));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GroupName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMdcToggleButtonDispT<T>::get_GroupName(void)
{
  BSTR GroupName;
  this->get_GroupName((BSTR*)&GroupName);
  return GroupName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::set_TextAlign(Msforms_97::fmTextAlign TextAlign/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(10004));
  TAutoArgs<1> _args;
  _args[1] = (int)TextAlign /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMdcToggleButtonDispT<T>::get_TextAlign(Msforms_97::fmTextAlign* TextAlign/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(10004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TextAlign /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmTextAlign __fastcall
IMdcToggleButtonDispT<T>::get_TextAlign(void)
{
  Msforms_97::fmTextAlign TextAlign;
  this->get_TextAlign((Msforms_97::fmTextAlign*)&TextAlign);
  return TextAlign;
}

// *********************************************************************//
// SmartIntf: TCOMIScrollbar
// Interface: IScrollbar
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  return (*this)->set_BackColor(BackColor);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  return (*this)->get_BackColor(BackColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIScrollbarT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
  return BackColor;
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  return (*this)->set_ForeColor(ForeColor);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  return (*this)->get_ForeColor(ForeColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIScrollbarT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
  return ForeColor;
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  return (*this)->set_Enabled(Enabled);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::set_Enabled(TOLEBOOL Enabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)Enabled);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(Enabled);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::get_Enabled(TOLEBOOL* Enabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)Enabled);
}

template <class T> TOLEBOOL __fastcall
TCOMIScrollbarT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Enabled));
  return (TOLEBOOL)Enabled;
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  return (*this)->set_MousePointer(MousePointer);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  return (*this)->get_MousePointer(MousePointer);
}

template <class T> Msforms_97::fmMousePointer __fastcall
TCOMIScrollbarT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
  return MousePointer;
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::set_Value(long Value/*[in]*/)
{
  return (*this)->set_Value(Value);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::get_Value(long* Value/*[out,retval]*/)
{
  return (*this)->get_Value(Value);
}

template <class T> long __fastcall
TCOMIScrollbarT<T>::get_Value(void)
{
  long Value;
  OLECHECK(this->get_Value((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::set_Min(long Min/*[in]*/)
{
  return (*this)->set_Min(Min);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::get_Min(long* Min/*[out,retval]*/)
{
  return (*this)->get_Min(Min);
}

template <class T> long __fastcall
TCOMIScrollbarT<T>::get_Min(void)
{
  long Min;
  OLECHECK(this->get_Min((long*)&Min));
  return Min;
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::set_Max(long Max/*[in]*/)
{
  return (*this)->set_Max(Max);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::get_Max(long* Max/*[out,retval]*/)
{
  return (*this)->get_Max(Max);
}

template <class T> long __fastcall
TCOMIScrollbarT<T>::get_Max(void)
{
  long Max;
  OLECHECK(this->get_Max((long*)&Max));
  return Max;
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::set_SmallChange(long SmallChange/*[in]*/)
{
  return (*this)->set_SmallChange(SmallChange);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::get_SmallChange(long* SmallChange/*[out,retval]*/)
{
  return (*this)->get_SmallChange(SmallChange);
}

template <class T> long __fastcall
TCOMIScrollbarT<T>::get_SmallChange(void)
{
  long SmallChange;
  OLECHECK(this->get_SmallChange((long*)&SmallChange));
  return SmallChange;
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::set_LargeChange(long LargeChange/*[in]*/)
{
  return (*this)->set_LargeChange(LargeChange);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::get_LargeChange(long* LargeChange/*[out,retval]*/)
{
  return (*this)->get_LargeChange(LargeChange);
}

template <class T> long __fastcall
TCOMIScrollbarT<T>::get_LargeChange(void)
{
  long LargeChange;
  OLECHECK(this->get_LargeChange((long*)&LargeChange));
  return LargeChange;
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::set_ProportionalThumb(VARIANT_BOOL ProportionalThumb/*[in]*/)
{
  return (*this)->set_ProportionalThumb(ProportionalThumb);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::set_ProportionalThumb(TOLEBOOL ProportionalThumb/*[in]*/)
{
  return (*this)->set_ProportionalThumb(VARIANT_BOOL)ProportionalThumb);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::get_ProportionalThumb(VARIANT_BOOL* ProportionalThumb/*[out,retval]*/)
{
  return (*this)->get_ProportionalThumb(ProportionalThumb);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::get_ProportionalThumb(TOLEBOOL* ProportionalThumb/*[out,retval]*/)
{
  return (*this)->get_ProportionalThumb(VARIANT_BOOL*)ProportionalThumb);
}

template <class T> TOLEBOOL __fastcall
TCOMIScrollbarT<T>::get_ProportionalThumb(void)
{
  VARIANT_BOOL ProportionalThumb;
  OLECHECK(this->get_ProportionalThumb((VARIANT_BOOL*)&ProportionalThumb));
  return (TOLEBOOL)ProportionalThumb;
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::set_Orientation(Msforms_97::fmOrientation Orientation/*[in]*/)
{
  return (*this)->set_Orientation(Orientation);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::get_Orientation(Msforms_97::fmOrientation* Orientation/*[out,retval]*/)
{
  return (*this)->get_Orientation(Orientation);
}

template <class T> Msforms_97::fmOrientation __fastcall
TCOMIScrollbarT<T>::get_Orientation(void)
{
  Msforms_97::fmOrientation Orientation;
  OLECHECK(this->get_Orientation((Msforms_97::fmOrientation*)&Orientation));
  return Orientation;
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::set_Delay(long Delay/*[in]*/)
{
  return (*this)->set_Delay(Delay);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::get_Delay(long* Delay/*[out,retval]*/)
{
  return (*this)->get_Delay(Delay);
}

template <class T> long __fastcall
TCOMIScrollbarT<T>::get_Delay(void)
{
  long Delay;
  OLECHECK(this->get_Delay((long*)&Delay));
  return Delay;
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::_set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIScrollbarT<T>::get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(IPictureDisp***)MouseIcon);
}

template <class T> IPictureDisp* __fastcall
TCOMIScrollbarT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
  return (IPictureDisp*)MouseIcon;
}

// *********************************************************************//
// DispIntf:  IScrollbar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04598FC3-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IScrollbarDispT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<1> _args;
  _args[1] = ForeColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ForeColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IScrollbarDispT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Enabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IScrollbarDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  this->get_Enabled((VARIANT_BOOL*)&Enabled);
  return Enabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<1> _args;
  _args[1] = (int)MousePointer /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MousePointer /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMousePointer __fastcall
IScrollbarDispT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer);
  return MousePointer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::set_Value(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::get_Value(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IScrollbarDispT<T>::get_Value(void)
{
  long Value;
  this->get_Value((long*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::set_Min(long Min/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Min"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = Min /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::get_Min(long* Min/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Min"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Min /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IScrollbarDispT<T>::get_Min(void)
{
  long Min;
  this->get_Min((long*)&Min);
  return Min;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::set_Max(long Max/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Max"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = Max /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::get_Max(long* Max/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Max"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Max /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IScrollbarDispT<T>::get_Max(void)
{
  long Max;
  this->get_Max((long*)&Max);
  return Max;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::set_SmallChange(long SmallChange/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmallChange"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = SmallChange /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::get_SmallChange(long* SmallChange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmallChange"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SmallChange /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IScrollbarDispT<T>::get_SmallChange(void)
{
  long SmallChange;
  this->get_SmallChange((long*)&SmallChange);
  return SmallChange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::set_LargeChange(long LargeChange/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LargeChange"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = LargeChange /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::get_LargeChange(long* LargeChange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LargeChange"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LargeChange /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IScrollbarDispT<T>::get_LargeChange(void)
{
  long LargeChange;
  this->get_LargeChange((long*)&LargeChange);
  return LargeChange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::set_ProportionalThumb(VARIANT_BOOL ProportionalThumb/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProportionalThumb"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = ProportionalThumb /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::get_ProportionalThumb(VARIANT_BOOL* ProportionalThumb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProportionalThumb"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ProportionalThumb /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IScrollbarDispT<T>::get_ProportionalThumb(void)
{
  VARIANT_BOOL ProportionalThumb;
  this->get_ProportionalThumb((VARIANT_BOOL*)&ProportionalThumb);
  return ProportionalThumb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::set_Orientation(Msforms_97::fmOrientation Orientation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)Orientation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::get_Orientation(Msforms_97::fmOrientation* Orientation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Orientation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmOrientation __fastcall
IScrollbarDispT<T>::get_Orientation(void)
{
  Msforms_97::fmOrientation Orientation;
  this->get_Orientation((Msforms_97::fmOrientation*)&Orientation);
  return Orientation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::set_Delay(long Delay/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delay"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = Delay /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::get_Delay(long* Delay/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delay"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Delay /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IScrollbarDispT<T>::get_Delay(void)
{
  long Delay;
  this->get_Delay((long*)&Delay);
  return Delay;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScrollbarDispT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)MouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
IScrollbarDispT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  this->get_MouseIcon((IPictureDisp***)&MouseIcon);
  return MouseIcon;
}

// *********************************************************************//
// DispIntf:  Tab
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A38BFFC3-A5A0-11CE-8107-00AA00611080}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabDispT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
TabDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabDispT<T>::set_ControlTipText(BSTR ControlTipText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(-2147418043));
  TAutoArgs<1> _args;
  _args[1] = ControlTipText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabDispT<T>::get_ControlTipText(BSTR* ControlTipText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(-2147418043));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ControlTipText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
TabDispT<T>::get_ControlTipText(void)
{
  BSTR ControlTipText;
  this->get_ControlTipText((BSTR*)&ControlTipText);
  return ControlTipText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabDispT<T>::set_Enabled(VARIANT_BOOL fEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = fEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabDispT<T>::get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
TabDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL fEnabled;
  this->get_Enabled((VARIANT_BOOL*)&fEnabled);
  return fEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabDispT<T>::set_Index(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabDispT<T>::get_Index(long* Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Index /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TabDispT<T>::get_Index(void)
{
  long Index;
  this->get_Index((long*)&Index);
  return Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(-2147418112));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(-2147418112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
TabDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabDispT<T>::set_Tag(BSTR Tag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(-2147418101));
  TAutoArgs<1> _args;
  _args[1] = Tag /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabDispT<T>::get_Tag(BSTR* Tag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(-2147418101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Tag /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
TabDispT<T>::get_Tag(void)
{
  BSTR Tag;
  this->get_Tag((BSTR*)&Tag);
  return Tag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabDispT<T>::set_Visible(VARIANT_BOOL Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(-2147418105));
  TAutoArgs<1> _args;
  _args[1] = Visible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabDispT<T>::get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(-2147418105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Visible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
TabDispT<T>::get_Visible(void)
{
  VARIANT_BOOL Visible;
  this->get_Visible((VARIANT_BOOL*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabDispT<T>::set_Accelerator(BSTR Accelerator/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accelerator"), DISPID(-543));
  TAutoArgs<1> _args;
  _args[1] = Accelerator /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabDispT<T>::get_Accelerator(BSTR* Accelerator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accelerator"), DISPID(-543));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Accelerator /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
TabDispT<T>::get_Accelerator(void)
{
  BSTR Accelerator;
  this->get_Accelerator((BSTR*)&Accelerator);
  return Accelerator;
}

// *********************************************************************//
// DispIntf:  Tabs
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {944ACF93-A1E6-11CE-8104-00AA00611080}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(60));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TabsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
TabsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabsDispT<T>::_GetItemByIndex(long lIndex/*[in]*/, Msforms_97::Tab** ppTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetItemByIndex"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Tab**)ppTab /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msforms_97::Tab* __fastcall
TabsDispT<T>::_GetItemByIndex(long lIndex/*[in]*/)
{
  Msforms_97::Tab* ppTab;
  this->_GetItemByIndex(lIndex, (Msforms_97::Tab**)&ppTab);
  return ppTab;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabsDispT<T>::_GetItemByName(BSTR bstr/*[in]*/, Msforms_97::Tab** ppTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetItemByName"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = bstr /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Tab**)ppTab /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msforms_97::Tab* __fastcall
TabsDispT<T>::_GetItemByName(BSTR bstr/*[in]*/)
{
  Msforms_97::Tab* ppTab;
  this->_GetItemByName(bstr, (Msforms_97::Tab**)&ppTab);
  return ppTab;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabsDispT<T>::Item(VARIANT varg/*[in]*/, LPDISPATCH* ppDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = varg /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppDisp /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TabsDispT<T>::Item(VARIANT varg/*[in]*/)
{
  LPDISPATCH ppDisp;
  this->Item(varg, (LPDISPATCH*)&ppDisp);
  return ppDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabsDispT<T>::Enum(LPUNKNOWN* ppEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enum"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppEnum /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
TabsDispT<T>::Enum(void)
{
  LPUNKNOWN ppEnum;
  this->Enum((LPUNKNOWN*)&ppEnum);
  return ppEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabsDispT<T>::Add(VARIANT bstrName/*[in,opt]*/, VARIANT bstrCaption/*[in,opt]*/, 
                  VARIANT lIndex/*[in,opt]*/, Msforms_97::Tab** ppTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(66));
  TAutoArgs<3> _args;
  _args[1] = bstrName /*[VT_VARIANT:0]*/;
  _args[2] = bstrCaption /*[VT_VARIANT:0]*/;
  _args[3] = lIndex /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Tab**)ppTab /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msforms_97::Tab* __fastcall
TabsDispT<T>::Add(VARIANT bstrName/*[in,opt]*/, VARIANT bstrCaption/*[in,opt]*/, 
                  VARIANT lIndex/*[in,opt]*/)
{
  Msforms_97::Tab* ppTab;
  this->Add(bstrName, bstrCaption, lIndex, (Msforms_97::Tab**)&ppTab);
  return ppTab;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabsDispT<T>::_Add(BSTR bstrName/*[in]*/, BSTR bstrCaption/*[in]*/, 
                   Msforms_97::Tab** ppTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Add"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<2> _args;
  _args[1] = bstrName /*[VT_BSTR:0]*/;
  _args[2] = bstrCaption /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Tab**)ppTab /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msforms_97::Tab* __fastcall
TabsDispT<T>::_Add(BSTR bstrName/*[in]*/, BSTR bstrCaption/*[in]*/)
{
  Msforms_97::Tab* ppTab;
  this->_Add(bstrName, bstrCaption, (Msforms_97::Tab**)&ppTab);
  return ppTab;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabsDispT<T>::_Insert(BSTR bstrName/*[in]*/, BSTR bstrCaption/*[in]*/, long lIndex/*[in]*/, 
                      Msforms_97::Tab** ppTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Insert"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<3> _args;
  _args[1] = bstrName /*[VT_BSTR:0]*/;
  _args[2] = bstrCaption /*[VT_BSTR:0]*/;
  _args[3] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Tab**)ppTab /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msforms_97::Tab* __fastcall
TabsDispT<T>::_Insert(BSTR bstrName/*[in]*/, BSTR bstrCaption/*[in]*/, long lIndex/*[in]*/)
{
  Msforms_97::Tab* ppTab;
  this->_Insert(bstrName, bstrCaption, lIndex, (Msforms_97::Tab**)&ppTab);
  return ppTab;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabsDispT<T>::Remove(VARIANT varg/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(67));
  TAutoArgs<1> _args;
  _args[1] = varg /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabsDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(62));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMITabStrip
// Interface: ITabStrip
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  return (*this)->set_BackColor(BackColor);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  return (*this)->get_BackColor(BackColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMITabStripT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
  return BackColor;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  return (*this)->set_ForeColor(ForeColor);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  return (*this)->get_ForeColor(ForeColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMITabStripT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
  return ForeColor;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  return (*this)->set__Font_Reserved(Param1);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set__Font_Reserved(IFontDisp* Param1/*[in]*/)
{
  return (*this)->set__Font_Reserved(IFontDisp**)Param1);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  return (*this)->_set_Font(Font);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::_set_Font(IFontDisp* Font/*[in]*/)
{
  return (*this)->_set_Font(IFontDisp**)Font);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  return (*this)->get_Font(Font);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_Font(IFontDisp** Font/*[out,retval]*/)
{
  return (*this)->get_Font(IFontDisp***)Font);
}

template <class T> IFontDisp* __fastcall
TCOMITabStripT<T>::get_Font(void)
{
  IFontDisp** Font;
  OLECHECK(this->get_Font((IFontDisp***)&Font));
  return (IFontDisp*)Font;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  return (*this)->set_FontName(FontName);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  return (*this)->get_FontName(FontName);
}

template <class T> BSTR __fastcall
TCOMITabStripT<T>::get_FontName(void)
{
  BSTR FontName = 0;
  OLECHECK(this->get_FontName((BSTR*)&FontName));
  return FontName;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_FontBold(VARIANT_BOOL FontBold/*[in]*/)
{
  return (*this)->set_FontBold(FontBold);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_FontBold(TOLEBOOL FontBold/*[in]*/)
{
  return (*this)->set_FontBold(VARIANT_BOOL)FontBold);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/)
{
  return (*this)->get_FontBold(FontBold);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_FontBold(TOLEBOOL* FontBold/*[out,retval]*/)
{
  return (*this)->get_FontBold(VARIANT_BOOL*)FontBold);
}

template <class T> TOLEBOOL __fastcall
TCOMITabStripT<T>::get_FontBold(void)
{
  VARIANT_BOOL FontBold;
  OLECHECK(this->get_FontBold((VARIANT_BOOL*)&FontBold));
  return (TOLEBOOL)FontBold;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/)
{
  return (*this)->set_FontItalic(FontItalic);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_FontItalic(TOLEBOOL FontItalic/*[in]*/)
{
  return (*this)->set_FontItalic(VARIANT_BOOL)FontItalic);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/)
{
  return (*this)->get_FontItalic(FontItalic);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_FontItalic(TOLEBOOL* FontItalic/*[out,retval]*/)
{
  return (*this)->get_FontItalic(VARIANT_BOOL*)FontItalic);
}

template <class T> TOLEBOOL __fastcall
TCOMITabStripT<T>::get_FontItalic(void)
{
  VARIANT_BOOL FontItalic;
  OLECHECK(this->get_FontItalic((VARIANT_BOOL*)&FontItalic));
  return (TOLEBOOL)FontItalic;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_FontUnderline(VARIANT_BOOL FontUnder/*[in]*/)
{
  return (*this)->set_FontUnderline(FontUnder);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_FontUnderline(TOLEBOOL FontUnder/*[in]*/)
{
  return (*this)->set_FontUnderline(VARIANT_BOOL)FontUnder);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_FontUnderline(VARIANT_BOOL* FontUnder/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(FontUnder);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_FontUnderline(TOLEBOOL* FontUnder/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(VARIANT_BOOL*)FontUnder);
}

template <class T> TOLEBOOL __fastcall
TCOMITabStripT<T>::get_FontUnderline(void)
{
  VARIANT_BOOL FontUnder;
  OLECHECK(this->get_FontUnderline((VARIANT_BOOL*)&FontUnder));
  return (TOLEBOOL)FontUnder;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_FontStrikethru(VARIANT_BOOL FontStrike/*[in]*/)
{
  return (*this)->set_FontStrikethru(FontStrike);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_FontStrikethru(TOLEBOOL FontStrike/*[in]*/)
{
  return (*this)->set_FontStrikethru(VARIANT_BOOL)FontStrike);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_FontStrikethru(VARIANT_BOOL* FontStrike/*[out,retval]*/)
{
  return (*this)->get_FontStrikethru(FontStrike);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_FontStrikethru(TOLEBOOL* FontStrike/*[out,retval]*/)
{
  return (*this)->get_FontStrikethru(VARIANT_BOOL*)FontStrike);
}

template <class T> TOLEBOOL __fastcall
TCOMITabStripT<T>::get_FontStrikethru(void)
{
  VARIANT_BOOL FontStrike;
  OLECHECK(this->get_FontStrikethru((VARIANT_BOOL*)&FontStrike));
  return (TOLEBOOL)FontStrike;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_FontSize(CURRENCY FontSize/*[in]*/)
{
  return (*this)->set_FontSize(FontSize);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_FontSize(CURRENCY* FontSize/*[out,retval]*/)
{
  return (*this)->get_FontSize(FontSize);
}

template <class T> CURRENCY __fastcall
TCOMITabStripT<T>::get_FontSize(void)
{
  CURRENCY FontSize;
  OLECHECK(this->get_FontSize((CURRENCY*)&FontSize));
  return FontSize;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_Enabled(VARIANT_BOOL fnabled/*[in]*/)
{
  return (*this)->set_Enabled(fnabled);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_Enabled(TOLEBOOL fnabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)fnabled);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_Enabled(VARIANT_BOOL* fnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(fnabled);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_Enabled(TOLEBOOL* fnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)fnabled);
}

template <class T> TOLEBOOL __fastcall
TCOMITabStripT<T>::get_Enabled(void)
{
  VARIANT_BOOL fnabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&fnabled));
  return (TOLEBOOL)fnabled;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::_set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(IPictureDisp***)MouseIcon);
}

template <class T> IPictureDisp* __fastcall
TCOMITabStripT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
  return (IPictureDisp*)MouseIcon;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  return (*this)->set_MousePointer(MousePointer);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  return (*this)->get_MousePointer(MousePointer);
}

template <class T> Msforms_97::fmMousePointer __fastcall
TCOMITabStripT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
  return MousePointer;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_MultiRow(VARIANT_BOOL MultiRow/*[in]*/)
{
  return (*this)->set_MultiRow(MultiRow);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_MultiRow(TOLEBOOL MultiRow/*[in]*/)
{
  return (*this)->set_MultiRow(VARIANT_BOOL)MultiRow);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_MultiRow(VARIANT_BOOL* MultiRow/*[out,retval]*/)
{
  return (*this)->get_MultiRow(MultiRow);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_MultiRow(TOLEBOOL* MultiRow/*[out,retval]*/)
{
  return (*this)->get_MultiRow(VARIANT_BOOL*)MultiRow);
}

template <class T> TOLEBOOL __fastcall
TCOMITabStripT<T>::get_MultiRow(void)
{
  VARIANT_BOOL MultiRow;
  OLECHECK(this->get_MultiRow((VARIANT_BOOL*)&MultiRow));
  return (TOLEBOOL)MultiRow;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_Style(Msforms_97::fmTabStyle TabStyle/*[in]*/)
{
  return (*this)->set_Style(TabStyle);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_Style(Msforms_97::fmTabStyle* TabStyle/*[out,retval]*/)
{
  return (*this)->get_Style(TabStyle);
}

template <class T> Msforms_97::fmTabStyle __fastcall
TCOMITabStripT<T>::get_Style(void)
{
  Msforms_97::fmTabStyle TabStyle;
  OLECHECK(this->get_Style((Msforms_97::fmTabStyle*)&TabStyle));
  return TabStyle;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_TabOrientation(Msforms_97::fmTabOrientation TabOrientation/*[in]*/)
{
  return (*this)->set_TabOrientation(TabOrientation);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_TabOrientation(Msforms_97::fmTabOrientation* TabOrientation/*[out,retval]*/)
{
  return (*this)->get_TabOrientation(TabOrientation);
}

template <class T> Msforms_97::fmTabOrientation __fastcall
TCOMITabStripT<T>::get_TabOrientation(void)
{
  Msforms_97::fmTabOrientation TabOrientation;
  OLECHECK(this->get_TabOrientation((Msforms_97::fmTabOrientation*)&TabOrientation));
  return TabOrientation;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::_SetTabFixedWidth(long TabFixedWidth/*[in]*/)
{
  return (*this)->_SetTabFixedWidth(TabFixedWidth);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::_GetTabFixedWidth(long* TabFixedWidth/*[out]*/)
{
  return (*this)->_GetTabFixedWidth(TabFixedWidth);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::_SetTabFixedHeight(long TabFixedHeight/*[in]*/)
{
  return (*this)->_SetTabFixedHeight(TabFixedHeight);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::_GetTabFixedHeight(long* TabFixedHeight/*[out]*/)
{
  return (*this)->_GetTabFixedHeight(TabFixedHeight);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::_GetClientTop(long* ClientTop/*[out]*/)
{
  return (*this)->_GetClientTop(ClientTop);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_ClientTop(float* ClientTop/*[out,retval]*/)
{
  return (*this)->get_ClientTop(ClientTop);
}

template <class T> float __fastcall
TCOMITabStripT<T>::get_ClientTop(void)
{
  float ClientTop;
  OLECHECK(this->get_ClientTop((float*)&ClientTop));
  return ClientTop;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::_GetClientLeft(long* ClientLeft/*[out]*/)
{
  return (*this)->_GetClientLeft(ClientLeft);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_ClientLeft(float* ClientLeft/*[out,retval]*/)
{
  return (*this)->get_ClientLeft(ClientLeft);
}

template <class T> float __fastcall
TCOMITabStripT<T>::get_ClientLeft(void)
{
  float ClientLeft;
  OLECHECK(this->get_ClientLeft((float*)&ClientLeft));
  return ClientLeft;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::_GetClientWidth(long* ClientWidth/*[out]*/)
{
  return (*this)->_GetClientWidth(ClientWidth);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_ClientWidth(float* ClientWidth/*[out,retval]*/)
{
  return (*this)->get_ClientWidth(ClientWidth);
}

template <class T> float __fastcall
TCOMITabStripT<T>::get_ClientWidth(void)
{
  float ClientWidth;
  OLECHECK(this->get_ClientWidth((float*)&ClientWidth));
  return ClientWidth;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::_GetClientHeight(long* ClientHeight/*[out]*/)
{
  return (*this)->_GetClientHeight(ClientHeight);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_ClientHeight(float* ClientHeight/*[out,retval]*/)
{
  return (*this)->get_ClientHeight(ClientHeight);
}

template <class T> float __fastcall
TCOMITabStripT<T>::get_ClientHeight(void)
{
  float ClientHeight;
  OLECHECK(this->get_ClientHeight((float*)&ClientHeight));
  return ClientHeight;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_Tabs(Msforms_97::Tabs** Tabs/*[out,retval]*/)
{
  return (*this)->get_Tabs(Tabs);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_Tabs(Msforms_97::TabsPtr* Tabs/*[out,retval]*/)
{
  return (*this)->get_Tabs(Tabs**)Tabs);
}

template <class T> Msforms_97::TabsPtr __fastcall
TCOMITabStripT<T>::get_Tabs(void)
{
  Msforms_97::Tabs* Tabs;
  OLECHECK(this->get_Tabs((Msforms_97::Tabs**)&Tabs));
  return (Msforms_97::TabsPtr)Tabs;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_SelectedItem(Msforms_97::Tab** ActiveTab/*[out,retval]*/)
{
  return (*this)->get_SelectedItem(ActiveTab);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_SelectedItem(Msforms_97::TabPtr* ActiveTab/*[out,retval]*/)
{
  return (*this)->get_SelectedItem(Tab**)ActiveTab);
}

template <class T> Msforms_97::TabPtr __fastcall
TCOMITabStripT<T>::get_SelectedItem(void)
{
  Msforms_97::Tab* ActiveTab;
  OLECHECK(this->get_SelectedItem((Msforms_97::Tab**)&ActiveTab));
  return (Msforms_97::TabPtr)ActiveTab;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_Value(long Index/*[in]*/)
{
  return (*this)->set_Value(Index);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_Value(long* Index/*[out,retval]*/)
{
  return (*this)->get_Value(Index);
}

template <class T> long __fastcall
TCOMITabStripT<T>::get_Value(void)
{
  long Index;
  OLECHECK(this->get_Value((long*)&Index));
  return Index;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_TabFixedWidth(float TabFixedWidth/*[in]*/)
{
  return (*this)->set_TabFixedWidth(TabFixedWidth);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_TabFixedWidth(float* TabFixedWidth/*[out,retval]*/)
{
  return (*this)->get_TabFixedWidth(TabFixedWidth);
}

template <class T> float __fastcall
TCOMITabStripT<T>::get_TabFixedWidth(void)
{
  float TabFixedWidth;
  OLECHECK(this->get_TabFixedWidth((float*)&TabFixedWidth));
  return TabFixedWidth;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_TabFixedHeight(float TabFixedHeight/*[in]*/)
{
  return (*this)->set_TabFixedHeight(TabFixedHeight);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_TabFixedHeight(float* TabFixedHeight/*[out,retval]*/)
{
  return (*this)->get_TabFixedHeight(TabFixedHeight);
}

template <class T> float __fastcall
TCOMITabStripT<T>::get_TabFixedHeight(void)
{
  float TabFixedHeight;
  OLECHECK(this->get_TabFixedHeight((float*)&TabFixedHeight));
  return TabFixedHeight;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_FontWeight(short FontWeight/*[in]*/)
{
  return (*this)->set_FontWeight(FontWeight);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_FontWeight(short* FontWeight/*[out,retval]*/)
{
  return (*this)->get_FontWeight(FontWeight);
}

template <class T> short __fastcall
TCOMITabStripT<T>::get_FontWeight(void)
{
  short FontWeight;
  OLECHECK(this->get_FontWeight((short*)&FontWeight));
  return FontWeight;
}

// *********************************************************************//
// DispIntf:  ITabStrip
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04598FC2-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
ITabStripDispT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<1> _args;
  _args[1] = ForeColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ForeColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
ITabStripDispT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Font_Reserved"), DISPID(2147483135));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Param1 /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Font /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp***)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp** __fastcall
ITabStripDispT<T>::get_Font(void)
{
  IFontDisp** Font;
  this->get_Font((IFontDisp***)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = FontName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ITabStripDispT<T>::get_FontName(void)
{
  BSTR FontName;
  this->get_FontName((BSTR*)&FontName);
  return FontName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_FontBold(VARIANT_BOOL FontBold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = FontBold /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_FontBold(VARIANT_BOOL* FontBold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontBold /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITabStripDispT<T>::get_FontBold(void)
{
  VARIANT_BOOL FontBold;
  this->get_FontBold((VARIANT_BOOL*)&FontBold);
  return FontBold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_FontItalic(VARIANT_BOOL FontItalic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = FontItalic /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_FontItalic(VARIANT_BOOL* FontItalic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontItalic /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITabStripDispT<T>::get_FontItalic(void)
{
  VARIANT_BOOL FontItalic;
  this->get_FontItalic((VARIANT_BOOL*)&FontItalic);
  return FontItalic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_FontUnderline(VARIANT_BOOL FontUnder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = FontUnder /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_FontUnderline(VARIANT_BOOL* FontUnder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontUnder /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITabStripDispT<T>::get_FontUnderline(void)
{
  VARIANT_BOOL FontUnder;
  this->get_FontUnderline((VARIANT_BOOL*)&FontUnder);
  return FontUnder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_FontStrikethru(VARIANT_BOOL FontStrike/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = FontStrike /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_FontStrikethru(VARIANT_BOOL* FontStrike/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontStrike /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITabStripDispT<T>::get_FontStrikethru(void)
{
  VARIANT_BOOL FontStrike;
  this->get_FontStrikethru((VARIANT_BOOL*)&FontStrike);
  return FontStrike;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_FontSize(CURRENCY FontSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = FontSize /*[VT_CY:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_FontSize(CURRENCY* FontSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontSize /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
ITabStripDispT<T>::get_FontSize(void)
{
  CURRENCY FontSize;
  this->get_FontSize((CURRENCY*)&FontSize);
  return FontSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_Enabled(VARIANT_BOOL fnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = fnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_Enabled(VARIANT_BOOL* fnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITabStripDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL fnabled;
  this->get_Enabled((VARIANT_BOOL*)&fnabled);
  return fnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)MouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
ITabStripDispT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  this->get_MouseIcon((IPictureDisp***)&MouseIcon);
  return MouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<1> _args;
  _args[1] = (int)MousePointer /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MousePointer /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMousePointer __fastcall
ITabStripDispT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer);
  return MousePointer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_MultiRow(VARIANT_BOOL MultiRow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiRow"), DISPID(514));
  TAutoArgs<1> _args;
  _args[1] = MultiRow /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_MultiRow(VARIANT_BOOL* MultiRow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiRow"), DISPID(514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MultiRow /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITabStripDispT<T>::get_MultiRow(void)
{
  VARIANT_BOOL MultiRow;
  this->get_MultiRow((VARIANT_BOOL*)&MultiRow);
  return MultiRow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_Style(Msforms_97::fmTabStyle TabStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(513));
  TAutoArgs<1> _args;
  _args[1] = (int)TabStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_Style(Msforms_97::fmTabStyle* TabStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TabStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmTabStyle __fastcall
ITabStripDispT<T>::get_Style(void)
{
  Msforms_97::fmTabStyle TabStyle;
  this->get_Style((Msforms_97::fmTabStyle*)&TabStyle);
  return TabStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_TabOrientation(Msforms_97::fmTabOrientation TabOrientation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabOrientation"), DISPID(512));
  TAutoArgs<1> _args;
  _args[1] = (int)TabOrientation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_TabOrientation(Msforms_97::fmTabOrientation* TabOrientation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabOrientation"), DISPID(512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TabOrientation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmTabOrientation __fastcall
ITabStripDispT<T>::get_TabOrientation(void)
{
  Msforms_97::fmTabOrientation TabOrientation;
  this->get_TabOrientation((Msforms_97::fmTabOrientation*)&TabOrientation);
  return TabOrientation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::_SetTabFixedWidth(long TabFixedWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetTabFixedWidth"), DISPID(DISPID_UNKNOWN/*[1610743840]*/));
  TAutoArgs<1> _args;
  _args[1] = TabFixedWidth /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::_GetTabFixedWidth(long* TabFixedWidth/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetTabFixedWidth"), DISPID(DISPID_UNKNOWN/*[1610743841]*/));
  TAutoArgs<1> _args;
  _args[1] = TabFixedWidth /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::_SetTabFixedHeight(long TabFixedHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetTabFixedHeight"), DISPID(DISPID_UNKNOWN/*[1610743842]*/));
  TAutoArgs<1> _args;
  _args[1] = TabFixedHeight /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::_GetTabFixedHeight(long* TabFixedHeight/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetTabFixedHeight"), DISPID(DISPID_UNKNOWN/*[1610743843]*/));
  TAutoArgs<1> _args;
  _args[1] = TabFixedHeight /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::_GetClientTop(long* ClientTop/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetClientTop"), DISPID(DISPID_UNKNOWN/*[1610743844]*/));
  TAutoArgs<1> _args;
  _args[1] = ClientTop /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_ClientTop(float* ClientTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientTop"), DISPID(548));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ClientTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ITabStripDispT<T>::get_ClientTop(void)
{
  float ClientTop;
  this->get_ClientTop((float*)&ClientTop);
  return ClientTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::_GetClientLeft(long* ClientLeft/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetClientLeft"), DISPID(DISPID_UNKNOWN/*[1610743846]*/));
  TAutoArgs<1> _args;
  _args[1] = ClientLeft /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_ClientLeft(float* ClientLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientLeft"), DISPID(547));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ClientLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ITabStripDispT<T>::get_ClientLeft(void)
{
  float ClientLeft;
  this->get_ClientLeft((float*)&ClientLeft);
  return ClientLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::_GetClientWidth(long* ClientWidth/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetClientWidth"), DISPID(DISPID_UNKNOWN/*[1610743848]*/));
  TAutoArgs<1> _args;
  _args[1] = ClientWidth /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_ClientWidth(float* ClientWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientWidth"), DISPID(549));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ClientWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ITabStripDispT<T>::get_ClientWidth(void)
{
  float ClientWidth;
  this->get_ClientWidth((float*)&ClientWidth);
  return ClientWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::_GetClientHeight(long* ClientHeight/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetClientHeight"), DISPID(DISPID_UNKNOWN/*[1610743850]*/));
  TAutoArgs<1> _args;
  _args[1] = ClientHeight /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_ClientHeight(float* ClientHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientHeight"), DISPID(546));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ClientHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ITabStripDispT<T>::get_ClientHeight(void)
{
  float ClientHeight;
  this->get_ClientHeight((float*)&ClientHeight);
  return ClientHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_Tabs(Msforms_97::Tabs** Tabs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tabs"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Tabs**)Tabs /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::Tabs* __fastcall
ITabStripDispT<T>::get_Tabs(void)
{
  Msforms_97::Tabs* Tabs;
  this->get_Tabs((Msforms_97::Tabs**)&Tabs);
  return Tabs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_SelectedItem(Msforms_97::Tab** ActiveTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedItem"), DISPID(545));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Tab**)ActiveTab /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::Tab* __fastcall
ITabStripDispT<T>::get_SelectedItem(void)
{
  Msforms_97::Tab* ActiveTab;
  this->get_SelectedItem((Msforms_97::Tab**)&ActiveTab);
  return ActiveTab;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_Value(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(528));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_Value(long* Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(528));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Index /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ITabStripDispT<T>::get_Value(void)
{
  long Index;
  this->get_Value((long*)&Index);
  return Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_TabFixedWidth(float TabFixedWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabFixedWidth"), DISPID(515));
  TAutoArgs<1> _args;
  _args[1] = TabFixedWidth /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_TabFixedWidth(float* TabFixedWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabFixedWidth"), DISPID(515));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TabFixedWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ITabStripDispT<T>::get_TabFixedWidth(void)
{
  float TabFixedWidth;
  this->get_TabFixedWidth((float*)&TabFixedWidth);
  return TabFixedWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_TabFixedHeight(float TabFixedHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabFixedHeight"), DISPID(516));
  TAutoArgs<1> _args;
  _args[1] = TabFixedHeight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_TabFixedHeight(float* TabFixedHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabFixedHeight"), DISPID(516));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TabFixedHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ITabStripDispT<T>::get_TabFixedHeight(void)
{
  float TabFixedHeight;
  this->get_TabFixedHeight((float*)&TabFixedHeight);
  return TabFixedHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_FontWeight(short FontWeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = FontWeight /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_FontWeight(short* FontWeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontWeight /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
ITabStripDispT<T>::get_FontWeight(void)
{
  short FontWeight;
  this->get_FontWeight((short*)&FontWeight);
  return FontWeight;
}

// *********************************************************************//
// SmartIntf: TCOMISpinbutton
// Interface: ISpinbutton
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  return (*this)->set_BackColor(BackColor);
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  return (*this)->get_BackColor(BackColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMISpinbuttonT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
  return BackColor;
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  return (*this)->set_ForeColor(ForeColor);
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  return (*this)->get_ForeColor(ForeColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMISpinbuttonT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor));
  return ForeColor;
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  return (*this)->set_Enabled(Enabled);
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::set_Enabled(TOLEBOOL Enabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)Enabled);
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(Enabled);
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::get_Enabled(TOLEBOOL* Enabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)Enabled);
}

template <class T> TOLEBOOL __fastcall
TCOMISpinbuttonT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Enabled));
  return (TOLEBOOL)Enabled;
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  return (*this)->set_MousePointer(MousePointer);
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  return (*this)->get_MousePointer(MousePointer);
}

template <class T> Msforms_97::fmMousePointer __fastcall
TCOMISpinbuttonT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
  return MousePointer;
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::set_Value(long Value/*[in]*/)
{
  return (*this)->set_Value(Value);
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::get_Value(long* Value/*[out,retval]*/)
{
  return (*this)->get_Value(Value);
}

template <class T> long __fastcall
TCOMISpinbuttonT<T>::get_Value(void)
{
  long Value;
  OLECHECK(this->get_Value((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::set_Min(long Min/*[in]*/)
{
  return (*this)->set_Min(Min);
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::get_Min(long* Min/*[out,retval]*/)
{
  return (*this)->get_Min(Min);
}

template <class T> long __fastcall
TCOMISpinbuttonT<T>::get_Min(void)
{
  long Min;
  OLECHECK(this->get_Min((long*)&Min));
  return Min;
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::set_Max(long Max/*[in]*/)
{
  return (*this)->set_Max(Max);
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::get_Max(long* Max/*[out,retval]*/)
{
  return (*this)->get_Max(Max);
}

template <class T> long __fastcall
TCOMISpinbuttonT<T>::get_Max(void)
{
  long Max;
  OLECHECK(this->get_Max((long*)&Max));
  return Max;
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::set_SmallChange(long SmallChange/*[in]*/)
{
  return (*this)->set_SmallChange(SmallChange);
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::get_SmallChange(long* SmallChange/*[out,retval]*/)
{
  return (*this)->get_SmallChange(SmallChange);
}

template <class T> long __fastcall
TCOMISpinbuttonT<T>::get_SmallChange(void)
{
  long SmallChange;
  OLECHECK(this->get_SmallChange((long*)&SmallChange));
  return SmallChange;
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::set_Orientation(Msforms_97::fmOrientation Orientation/*[in]*/)
{
  return (*this)->set_Orientation(Orientation);
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::get_Orientation(Msforms_97::fmOrientation* Orientation/*[out,retval]*/)
{
  return (*this)->get_Orientation(Orientation);
}

template <class T> Msforms_97::fmOrientation __fastcall
TCOMISpinbuttonT<T>::get_Orientation(void)
{
  Msforms_97::fmOrientation Orientation;
  OLECHECK(this->get_Orientation((Msforms_97::fmOrientation*)&Orientation));
  return Orientation;
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::_set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(IPictureDisp***)MouseIcon);
}

template <class T> IPictureDisp* __fastcall
TCOMISpinbuttonT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
  return (IPictureDisp*)MouseIcon;
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::set_Delay(long Delay/*[in]*/)
{
  return (*this)->set_Delay(Delay);
}

template <class T> HRESULT __fastcall
TCOMISpinbuttonT<T>::get_Delay(long* Delay/*[out,retval]*/)
{
  return (*this)->get_Delay(Delay);
}

template <class T> long __fastcall
TCOMISpinbuttonT<T>::get_Delay(void)
{
  long Delay;
  OLECHECK(this->get_Delay((long*)&Delay));
  return Delay;
}

// *********************************************************************//
// DispIntf:  ISpinbutton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {79176FB3-B7F2-11CE-97EF-00AA006D2776}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
ISpinbuttonDispT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::set_ForeColor(Msforms_97::OLE_COLOR ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<1> _args;
  _args[1] = ForeColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::get_ForeColor(Msforms_97::OLE_COLOR* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ForeColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
ISpinbuttonDispT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR ForeColor;
  this->get_ForeColor((Msforms_97::OLE_COLOR*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Enabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpinbuttonDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  this->get_Enabled((VARIANT_BOOL*)&Enabled);
  return Enabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<1> _args;
  _args[1] = (int)MousePointer /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MousePointer /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMousePointer __fastcall
ISpinbuttonDispT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer);
  return MousePointer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::set_Value(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::get_Value(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISpinbuttonDispT<T>::get_Value(void)
{
  long Value;
  this->get_Value((long*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::set_Min(long Min/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Min"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = Min /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::get_Min(long* Min/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Min"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Min /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISpinbuttonDispT<T>::get_Min(void)
{
  long Min;
  this->get_Min((long*)&Min);
  return Min;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::set_Max(long Max/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Max"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = Max /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::get_Max(long* Max/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Max"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Max /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISpinbuttonDispT<T>::get_Max(void)
{
  long Max;
  this->get_Max((long*)&Max);
  return Max;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::set_SmallChange(long SmallChange/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmallChange"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = SmallChange /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::get_SmallChange(long* SmallChange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmallChange"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SmallChange /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISpinbuttonDispT<T>::get_SmallChange(void)
{
  long SmallChange;
  this->get_SmallChange((long*)&SmallChange);
  return SmallChange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::set_Orientation(Msforms_97::fmOrientation Orientation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)Orientation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::get_Orientation(Msforms_97::fmOrientation* Orientation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Orientation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmOrientation __fastcall
ISpinbuttonDispT<T>::get_Orientation(void)
{
  Msforms_97::fmOrientation Orientation;
  this->get_Orientation((Msforms_97::fmOrientation*)&Orientation);
  return Orientation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)MouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
ISpinbuttonDispT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  this->get_MouseIcon((IPictureDisp***)&MouseIcon);
  return MouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::set_Delay(long Delay/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delay"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = Delay /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpinbuttonDispT<T>::get_Delay(long* Delay/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delay"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Delay /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISpinbuttonDispT<T>::get_Delay(void)
{
  long Delay;
  this->get_Delay((long*)&Delay);
  return Delay;
}

// *********************************************************************//
// SmartIntf: TCOMIImage
// Interface: IImage
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_Enabled(VARIANT_BOOL fEnabled/*[in]*/)
{
  return (*this)->set_Enabled(fEnabled);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_Enabled(TOLEBOOL fEnabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)fEnabled);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(fEnabled);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_Enabled(TOLEBOOL* fEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)fEnabled);
}

template <class T> TOLEBOOL __fastcall
TCOMIImageT<T>::get_Enabled(void)
{
  VARIANT_BOOL fEnabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&fEnabled));
  return (TOLEBOOL)fEnabled;
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  return (*this)->set_MousePointer(MousePointer);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  return (*this)->get_MousePointer(MousePointer);
}

template <class T> Msforms_97::fmMousePointer __fastcall
TCOMIImageT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  OLECHECK(this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer));
  return MousePointer;
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_AutoSize(VARIANT_BOOL fAutoSize/*[in]*/)
{
  return (*this)->set_AutoSize(fAutoSize);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_AutoSize(TOLEBOOL fAutoSize/*[in]*/)
{
  return (*this)->set_AutoSize(VARIANT_BOOL)fAutoSize);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_AutoSize(VARIANT_BOOL* fAutoSize/*[out,retval]*/)
{
  return (*this)->get_AutoSize(fAutoSize);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_AutoSize(TOLEBOOL* fAutoSize/*[out,retval]*/)
{
  return (*this)->get_AutoSize(VARIANT_BOOL*)fAutoSize);
}

template <class T> TOLEBOOL __fastcall
TCOMIImageT<T>::get_AutoSize(void)
{
  VARIANT_BOOL fAutoSize;
  OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&fAutoSize));
  return (TOLEBOOL)fAutoSize;
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  return (*this)->set_BackColor(BackColor);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  return (*this)->get_BackColor(BackColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIImageT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor));
  return BackColor;
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/)
{
  return (*this)->set_BackStyle(BackStyle);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/)
{
  return (*this)->get_BackStyle(BackStyle);
}

template <class T> Msforms_97::fmBackStyle __fastcall
TCOMIImageT<T>::get_BackStyle(void)
{
  Msforms_97::fmBackStyle BackStyle;
  OLECHECK(this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle));
  return BackStyle;
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/)
{
  return (*this)->set_BorderColor(BorderColor);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/)
{
  return (*this)->get_BorderColor(BorderColor);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIImageT<T>::get_BorderColor(void)
{
  Msforms_97::OLE_COLOR BorderColor;
  OLECHECK(this->get_BorderColor((Msforms_97::OLE_COLOR*)&BorderColor));
  return BorderColor;
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_BorderStyle(Msforms_97::fmBorderStyle Style/*[in]*/)
{
  return (*this)->set_BorderStyle(Style);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_BorderStyle(Msforms_97::fmBorderStyle* Style/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(Style);
}

template <class T> Msforms_97::fmBorderStyle __fastcall
TCOMIImageT<T>::get_BorderStyle(void)
{
  Msforms_97::fmBorderStyle Style;
  OLECHECK(this->get_BorderStyle((Msforms_97::fmBorderStyle*)&Style));
  return Style;
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_Picture(IPictureDisp** Picture/*[in]*/)
{
  return (*this)->set_Picture(Picture);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_Picture(IPictureDisp* Picture/*[in]*/)
{
  return (*this)->set_Picture(IPictureDisp**)Picture);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::_set_Picture(IPictureDisp** Picture/*[in]*/)
{
  return (*this)->_set_Picture(Picture);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::_set_Picture(IPictureDisp* Picture/*[in]*/)
{
  return (*this)->_set_Picture(IPictureDisp**)Picture);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_Picture(IPictureDisp*** Picture/*[out,retval]*/)
{
  return (*this)->get_Picture(Picture);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_Picture(IPictureDisp** Picture/*[out,retval]*/)
{
  return (*this)->get_Picture(IPictureDisp***)Picture);
}

template <class T> IPictureDisp* __fastcall
TCOMIImageT<T>::get_Picture(void)
{
  IPictureDisp** Picture;
  OLECHECK(this->get_Picture((IPictureDisp***)&Picture));
  return (IPictureDisp*)Picture;
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::_set_MouseIcon(IPictureDisp* MouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(IPictureDisp**)MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(MouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_MouseIcon(IPictureDisp** MouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(IPictureDisp***)MouseIcon);
}

template <class T> IPictureDisp* __fastcall
TCOMIImageT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  OLECHECK(this->get_MouseIcon((IPictureDisp***)&MouseIcon));
  return (IPictureDisp*)MouseIcon;
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_PictureSizeMode(Msforms_97::fmPictureSizeMode PictureSizeMode/*[in]*/)
{
  return (*this)->set_PictureSizeMode(PictureSizeMode);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_PictureSizeMode(Msforms_97::fmPictureSizeMode* PictureSizeMode/*[out,retval]*/)
{
  return (*this)->get_PictureSizeMode(PictureSizeMode);
}

template <class T> Msforms_97::fmPictureSizeMode __fastcall
TCOMIImageT<T>::get_PictureSizeMode(void)
{
  Msforms_97::fmPictureSizeMode PictureSizeMode;
  OLECHECK(this->get_PictureSizeMode((Msforms_97::fmPictureSizeMode*)&PictureSizeMode));
  return PictureSizeMode;
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_PictureAlignment(Msforms_97::fmPictureAlignment PictureAlignment/*[in]*/)
{
  return (*this)->set_PictureAlignment(PictureAlignment);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_PictureAlignment(Msforms_97::fmPictureAlignment* PictureAlignment/*[out,retval]*/)
{
  return (*this)->get_PictureAlignment(PictureAlignment);
}

template <class T> Msforms_97::fmPictureAlignment __fastcall
TCOMIImageT<T>::get_PictureAlignment(void)
{
  Msforms_97::fmPictureAlignment PictureAlignment;
  OLECHECK(this->get_PictureAlignment((Msforms_97::fmPictureAlignment*)&PictureAlignment));
  return PictureAlignment;
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_PictureTiling(VARIANT_BOOL PictureTiling/*[in]*/)
{
  return (*this)->set_PictureTiling(PictureTiling);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_PictureTiling(TOLEBOOL PictureTiling/*[in]*/)
{
  return (*this)->set_PictureTiling(VARIANT_BOOL)PictureTiling);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_PictureTiling(VARIANT_BOOL* PictureTiling/*[out,retval]*/)
{
  return (*this)->get_PictureTiling(PictureTiling);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_PictureTiling(TOLEBOOL* PictureTiling/*[out,retval]*/)
{
  return (*this)->get_PictureTiling(VARIANT_BOOL*)PictureTiling);
}

template <class T> TOLEBOOL __fastcall
TCOMIImageT<T>::get_PictureTiling(void)
{
  VARIANT_BOOL PictureTiling;
  OLECHECK(this->get_PictureTiling((VARIANT_BOOL*)&PictureTiling));
  return (TOLEBOOL)PictureTiling;
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/)
{
  return (*this)->set_SpecialEffect(SpecialEffect);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(SpecialEffect);
}

template <class T> Msforms_97::fmSpecialEffect __fastcall
TCOMIImageT<T>::get_SpecialEffect(void)
{
  Msforms_97::fmSpecialEffect SpecialEffect;
  OLECHECK(this->get_SpecialEffect((Msforms_97::fmSpecialEffect*)&SpecialEffect));
  return SpecialEffect;
}

// *********************************************************************//
// DispIntf:  IImage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4C599243-6926-101B-9992-00000B65C6F9}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::set_Enabled(VARIANT_BOOL fEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = fEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IImageDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL fEnabled;
  this->get_Enabled((VARIANT_BOOL*)&fEnabled);
  return fEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::set_MousePointer(Msforms_97::fmMousePointer MousePointer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<1> _args;
  _args[1] = (int)MousePointer /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::get_MousePointer(Msforms_97::fmMousePointer* MousePointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(-521));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MousePointer /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMousePointer __fastcall
IImageDispT<T>::get_MousePointer(void)
{
  Msforms_97::fmMousePointer MousePointer;
  this->get_MousePointer((Msforms_97::fmMousePointer*)&MousePointer);
  return MousePointer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::set_AutoSize(VARIANT_BOOL fAutoSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<1> _args;
  _args[1] = fAutoSize /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::get_AutoSize(VARIANT_BOOL* fAutoSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fAutoSize /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IImageDispT<T>::get_AutoSize(void)
{
  VARIANT_BOOL fAutoSize;
  this->get_AutoSize((VARIANT_BOOL*)&fAutoSize);
  return fAutoSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::set_BackColor(Msforms_97::OLE_COLOR BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::get_BackColor(Msforms_97::OLE_COLOR* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IImageDispT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR BackColor;
  this->get_BackColor((Msforms_97::OLE_COLOR*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::set_BackStyle(Msforms_97::fmBackStyle BackStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(-502));
  TAutoArgs<1> _args;
  _args[1] = (int)BackStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::get_BackStyle(Msforms_97::fmBackStyle* BackStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(-502));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BackStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmBackStyle __fastcall
IImageDispT<T>::get_BackStyle(void)
{
  Msforms_97::fmBackStyle BackStyle;
  this->get_BackStyle((Msforms_97::fmBackStyle*)&BackStyle);
  return BackStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::set_BorderColor(Msforms_97::OLE_COLOR BorderColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(-503));
  TAutoArgs<1> _args;
  _args[1] = BorderColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::get_BorderColor(Msforms_97::OLE_COLOR* BorderColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(-503));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BorderColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IImageDispT<T>::get_BorderColor(void)
{
  Msforms_97::OLE_COLOR BorderColor;
  this->get_BorderColor((Msforms_97::OLE_COLOR*)&BorderColor);
  return BorderColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::set_BorderStyle(Msforms_97::fmBorderStyle Style/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<1> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::get_BorderStyle(Msforms_97::fmBorderStyle* Style/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Style /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmBorderStyle __fastcall
IImageDispT<T>::get_BorderStyle(void)
{
  Msforms_97::fmBorderStyle Style;
  this->get_BorderStyle((Msforms_97::fmBorderStyle*)&Style);
  return Style;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::set_Picture(IPictureDisp** Picture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)Picture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::_set_Picture(IPictureDisp** Picture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)Picture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::get_Picture(IPictureDisp*** Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)Picture /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
IImageDispT<T>::get_Picture(void)
{
  IPictureDisp** Picture;
  this->get_Picture((IPictureDisp***)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::_set_MouseIcon(IPictureDisp** MouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)MouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::get_MouseIcon(IPictureDisp*** MouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(-522));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)MouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
IImageDispT<T>::get_MouseIcon(void)
{
  IPictureDisp** MouseIcon;
  this->get_MouseIcon((IPictureDisp***)&MouseIcon);
  return MouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::set_PictureSizeMode(Msforms_97::fmPictureSizeMode PictureSizeMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureSizeMode"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = (int)PictureSizeMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::get_PictureSizeMode(Msforms_97::fmPictureSizeMode* PictureSizeMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureSizeMode"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PictureSizeMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmPictureSizeMode __fastcall
IImageDispT<T>::get_PictureSizeMode(void)
{
  Msforms_97::fmPictureSizeMode PictureSizeMode;
  this->get_PictureSizeMode((Msforms_97::fmPictureSizeMode*)&PictureSizeMode);
  return PictureSizeMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::set_PictureAlignment(Msforms_97::fmPictureAlignment PictureAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureAlignment"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = (int)PictureAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::get_PictureAlignment(Msforms_97::fmPictureAlignment* PictureAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureAlignment"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PictureAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmPictureAlignment __fastcall
IImageDispT<T>::get_PictureAlignment(void)
{
  Msforms_97::fmPictureAlignment PictureAlignment;
  this->get_PictureAlignment((Msforms_97::fmPictureAlignment*)&PictureAlignment);
  return PictureAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::set_PictureTiling(VARIANT_BOOL PictureTiling/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureTiling"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = PictureTiling /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::get_PictureTiling(VARIANT_BOOL* PictureTiling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureTiling"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PictureTiling /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IImageDispT<T>::get_PictureTiling(void)
{
  VARIANT_BOOL PictureTiling;
  this->get_PictureTiling((VARIANT_BOOL*)&PictureTiling);
  return PictureTiling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::set_SpecialEffect(Msforms_97::fmSpecialEffect SpecialEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)SpecialEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::get_SpecialEffect(Msforms_97::fmSpecialEffect* SpecialEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SpecialEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmSpecialEffect __fastcall
IImageDispT<T>::get_SpecialEffect(void)
{
  Msforms_97::fmSpecialEffect SpecialEffect;
  this->get_SpecialEffect((Msforms_97::fmSpecialEffect*)&SpecialEffect);
  return SpecialEffect;
}

// *********************************************************************//
// SmartIntf: TCOMIWHTMLSubmitButton
// Interface: IWHTMLSubmitButton
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWHTMLSubmitButtonT<T>::set_Action(BSTR Action/*[in]*/)
{
  return (*this)->set_Action(Action);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSubmitButtonT<T>::get_Action(BSTR* Action/*[out,retval]*/)
{
  return (*this)->get_Action(Action);
}

template <class T> BSTR __fastcall
TCOMIWHTMLSubmitButtonT<T>::get_Action(void)
{
  BSTR Action = 0;
  OLECHECK(this->get_Action((BSTR*)&Action));
  return Action;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSubmitButtonT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  return (*this)->set_Caption(Caption);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSubmitButtonT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  return (*this)->get_Caption(Caption);
}

template <class T> BSTR __fastcall
TCOMIWHTMLSubmitButtonT<T>::get_Caption(void)
{
  BSTR Caption = 0;
  OLECHECK(this->get_Caption((BSTR*)&Caption));
  return Caption;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSubmitButtonT<T>::set_Encoding(BSTR Encoding/*[in]*/)
{
  return (*this)->set_Encoding(Encoding);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSubmitButtonT<T>::get_Encoding(BSTR* Encoding/*[out,retval]*/)
{
  return (*this)->get_Encoding(Encoding);
}

template <class T> BSTR __fastcall
TCOMIWHTMLSubmitButtonT<T>::get_Encoding(void)
{
  BSTR Encoding = 0;
  OLECHECK(this->get_Encoding((BSTR*)&Encoding));
  return Encoding;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSubmitButtonT<T>::set_Method(BSTR Method/*[in]*/)
{
  return (*this)->set_Method(Method);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSubmitButtonT<T>::get_Method(BSTR* Method/*[out,retval]*/)
{
  return (*this)->get_Method(Method);
}

template <class T> BSTR __fastcall
TCOMIWHTMLSubmitButtonT<T>::get_Method(void)
{
  BSTR Method = 0;
  OLECHECK(this->get_Method((BSTR*)&Method));
  return Method;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSubmitButtonT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  return (*this)->set_HTMLName(HTMLName);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSubmitButtonT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  return (*this)->get_HTMLName(HTMLName);
}

template <class T> BSTR __fastcall
TCOMIWHTMLSubmitButtonT<T>::get_HTMLName(void)
{
  BSTR HTMLName = 0;
  OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
  return HTMLName;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSubmitButtonT<T>::set_HTMLType(BSTR HTMLType/*[in]*/)
{
  return (*this)->set_HTMLType(HTMLType);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSubmitButtonT<T>::get_HTMLType(BSTR* HTMLType/*[out,retval]*/)
{
  return (*this)->get_HTMLType(HTMLType);
}

template <class T> BSTR __fastcall
TCOMIWHTMLSubmitButtonT<T>::get_HTMLType(void)
{
  BSTR HTMLType = 0;
  OLECHECK(this->get_HTMLType((BSTR*)&HTMLType));
  return HTMLType;
}

// *********************************************************************//
// DispIntf:  IWHTMLSubmitButton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D111-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSubmitButtonDispT<T>::set_Action(BSTR Action/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Action"), DISPID(601));
  TAutoArgs<1> _args;
  _args[1] = Action /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSubmitButtonDispT<T>::get_Action(BSTR* Action/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Action"), DISPID(601));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Action /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLSubmitButtonDispT<T>::get_Action(void)
{
  BSTR Action;
  this->get_Action((BSTR*)&Action);
  return Action;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSubmitButtonDispT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(602));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSubmitButtonDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(602));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLSubmitButtonDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSubmitButtonDispT<T>::set_Encoding(BSTR Encoding/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Encoding"), DISPID(603));
  TAutoArgs<1> _args;
  _args[1] = Encoding /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSubmitButtonDispT<T>::get_Encoding(BSTR* Encoding/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Encoding"), DISPID(603));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Encoding /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLSubmitButtonDispT<T>::get_Encoding(void)
{
  BSTR Encoding;
  this->get_Encoding((BSTR*)&Encoding);
  return Encoding;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSubmitButtonDispT<T>::set_Method(BSTR Method/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Method"), DISPID(604));
  TAutoArgs<1> _args;
  _args[1] = Method /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSubmitButtonDispT<T>::get_Method(BSTR* Method/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Method"), DISPID(604));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Method /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLSubmitButtonDispT<T>::get_Method(void)
{
  BSTR Method;
  this->get_Method((BSTR*)&Method);
  return Method;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSubmitButtonDispT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<1> _args;
  _args[1] = HTMLName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSubmitButtonDispT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLSubmitButtonDispT<T>::get_HTMLName(void)
{
  BSTR HTMLName;
  this->get_HTMLName((BSTR*)&HTMLName);
  return HTMLName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSubmitButtonDispT<T>::set_HTMLType(BSTR HTMLType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLType"), DISPID(618));
  TAutoArgs<1> _args;
  _args[1] = HTMLType /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSubmitButtonDispT<T>::get_HTMLType(BSTR* HTMLType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLType"), DISPID(618));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLSubmitButtonDispT<T>::get_HTMLType(void)
{
  BSTR HTMLType;
  this->get_HTMLType((BSTR*)&HTMLType);
  return HTMLType;
}

// *********************************************************************//
// SmartIntf: TCOMIWHTMLImage
// Interface: IWHTMLImage
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWHTMLImageT<T>::set_Action(BSTR Action/*[in]*/)
{
  return (*this)->set_Action(Action);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLImageT<T>::get_Action(BSTR* Action/*[out,retval]*/)
{
  return (*this)->get_Action(Action);
}

template <class T> BSTR __fastcall
TCOMIWHTMLImageT<T>::get_Action(void)
{
  BSTR Action = 0;
  OLECHECK(this->get_Action((BSTR*)&Action));
  return Action;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLImageT<T>::set_Source(BSTR Source/*[in]*/)
{
  return (*this)->set_Source(Source);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLImageT<T>::get_Source(BSTR* Source/*[out,retval]*/)
{
  return (*this)->get_Source(Source);
}

template <class T> BSTR __fastcall
TCOMIWHTMLImageT<T>::get_Source(void)
{
  BSTR Source = 0;
  OLECHECK(this->get_Source((BSTR*)&Source));
  return Source;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLImageT<T>::set_Encoding(BSTR Encoding/*[in]*/)
{
  return (*this)->set_Encoding(Encoding);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLImageT<T>::get_Encoding(BSTR* Encoding/*[out,retval]*/)
{
  return (*this)->get_Encoding(Encoding);
}

template <class T> BSTR __fastcall
TCOMIWHTMLImageT<T>::get_Encoding(void)
{
  BSTR Encoding = 0;
  OLECHECK(this->get_Encoding((BSTR*)&Encoding));
  return Encoding;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLImageT<T>::set_Method(BSTR Method/*[in]*/)
{
  return (*this)->set_Method(Method);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLImageT<T>::get_Method(BSTR* Method/*[out,retval]*/)
{
  return (*this)->get_Method(Method);
}

template <class T> BSTR __fastcall
TCOMIWHTMLImageT<T>::get_Method(void)
{
  BSTR Method = 0;
  OLECHECK(this->get_Method((BSTR*)&Method));
  return Method;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLImageT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  return (*this)->set_HTMLName(HTMLName);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLImageT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  return (*this)->get_HTMLName(HTMLName);
}

template <class T> BSTR __fastcall
TCOMIWHTMLImageT<T>::get_HTMLName(void)
{
  BSTR HTMLName = 0;
  OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
  return HTMLName;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLImageT<T>::set_HTMLType(BSTR HTMLType/*[in]*/)
{
  return (*this)->set_HTMLType(HTMLType);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLImageT<T>::get_HTMLType(BSTR* HTMLType/*[out,retval]*/)
{
  return (*this)->get_HTMLType(HTMLType);
}

template <class T> BSTR __fastcall
TCOMIWHTMLImageT<T>::get_HTMLType(void)
{
  BSTR HTMLType = 0;
  OLECHECK(this->get_HTMLType((BSTR*)&HTMLType));
  return HTMLType;
}

// *********************************************************************//
// DispIntf:  IWHTMLImage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D113-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLImageDispT<T>::set_Action(BSTR Action/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Action"), DISPID(601));
  TAutoArgs<1> _args;
  _args[1] = Action /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLImageDispT<T>::get_Action(BSTR* Action/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Action"), DISPID(601));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Action /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLImageDispT<T>::get_Action(void)
{
  BSTR Action;
  this->get_Action((BSTR*)&Action);
  return Action;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLImageDispT<T>::set_Source(BSTR Source/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(606));
  TAutoArgs<1> _args;
  _args[1] = Source /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLImageDispT<T>::get_Source(BSTR* Source/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(606));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Source /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLImageDispT<T>::get_Source(void)
{
  BSTR Source;
  this->get_Source((BSTR*)&Source);
  return Source;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLImageDispT<T>::set_Encoding(BSTR Encoding/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Encoding"), DISPID(603));
  TAutoArgs<1> _args;
  _args[1] = Encoding /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLImageDispT<T>::get_Encoding(BSTR* Encoding/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Encoding"), DISPID(603));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Encoding /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLImageDispT<T>::get_Encoding(void)
{
  BSTR Encoding;
  this->get_Encoding((BSTR*)&Encoding);
  return Encoding;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLImageDispT<T>::set_Method(BSTR Method/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Method"), DISPID(604));
  TAutoArgs<1> _args;
  _args[1] = Method /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLImageDispT<T>::get_Method(BSTR* Method/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Method"), DISPID(604));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Method /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLImageDispT<T>::get_Method(void)
{
  BSTR Method;
  this->get_Method((BSTR*)&Method);
  return Method;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLImageDispT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<1> _args;
  _args[1] = HTMLName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLImageDispT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLImageDispT<T>::get_HTMLName(void)
{
  BSTR HTMLName;
  this->get_HTMLName((BSTR*)&HTMLName);
  return HTMLName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLImageDispT<T>::set_HTMLType(BSTR HTMLType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLType"), DISPID(618));
  TAutoArgs<1> _args;
  _args[1] = HTMLType /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLImageDispT<T>::get_HTMLType(BSTR* HTMLType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLType"), DISPID(618));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLImageDispT<T>::get_HTMLType(void)
{
  BSTR HTMLType;
  this->get_HTMLType((BSTR*)&HTMLType);
  return HTMLType;
}

// *********************************************************************//
// SmartIntf: TCOMIWHTMLReset
// Interface: IWHTMLReset
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWHTMLResetT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  return (*this)->set_Caption(Caption);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLResetT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  return (*this)->get_Caption(Caption);
}

template <class T> BSTR __fastcall
TCOMIWHTMLResetT<T>::get_Caption(void)
{
  BSTR Caption = 0;
  OLECHECK(this->get_Caption((BSTR*)&Caption));
  return Caption;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLResetT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  return (*this)->set_HTMLName(HTMLName);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLResetT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  return (*this)->get_HTMLName(HTMLName);
}

template <class T> BSTR __fastcall
TCOMIWHTMLResetT<T>::get_HTMLName(void)
{
  BSTR HTMLName = 0;
  OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
  return HTMLName;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLResetT<T>::set_HTMLType(BSTR HTMLType/*[in]*/)
{
  return (*this)->set_HTMLType(HTMLType);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLResetT<T>::get_HTMLType(BSTR* HTMLType/*[out,retval]*/)
{
  return (*this)->get_HTMLType(HTMLType);
}

template <class T> BSTR __fastcall
TCOMIWHTMLResetT<T>::get_HTMLType(void)
{
  BSTR HTMLType = 0;
  OLECHECK(this->get_HTMLType((BSTR*)&HTMLType));
  return HTMLType;
}

// *********************************************************************//
// DispIntf:  IWHTMLReset
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D115-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLResetDispT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(602));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLResetDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(602));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLResetDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLResetDispT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<1> _args;
  _args[1] = HTMLName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLResetDispT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLResetDispT<T>::get_HTMLName(void)
{
  BSTR HTMLName;
  this->get_HTMLName((BSTR*)&HTMLName);
  return HTMLName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLResetDispT<T>::set_HTMLType(BSTR HTMLType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLType"), DISPID(618));
  TAutoArgs<1> _args;
  _args[1] = HTMLType /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLResetDispT<T>::get_HTMLType(BSTR* HTMLType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLType"), DISPID(618));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLResetDispT<T>::get_HTMLType(void)
{
  BSTR HTMLType;
  this->get_HTMLType((BSTR*)&HTMLType);
  return HTMLType;
}

// *********************************************************************//
// SmartIntf: TCOMIWHTMLCheckbox
// Interface: IWHTMLCheckbox
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWHTMLCheckboxT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  return (*this)->set_HTMLName(HTMLName);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLCheckboxT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  return (*this)->get_HTMLName(HTMLName);
}

template <class T> BSTR __fastcall
TCOMIWHTMLCheckboxT<T>::get_HTMLName(void)
{
  BSTR HTMLName = 0;
  OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
  return HTMLName;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLCheckboxT<T>::set_Value(BSTR Value/*[in]*/)
{
  return (*this)->set_Value(Value);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLCheckboxT<T>::get_Value(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Value(Value);
}

template <class T> BSTR __fastcall
TCOMIWHTMLCheckboxT<T>::get_Value(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Value((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLCheckboxT<T>::set_Checked(VARIANT_BOOL Checked/*[in]*/)
{
  return (*this)->set_Checked(Checked);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLCheckboxT<T>::set_Checked(TOLEBOOL Checked/*[in]*/)
{
  return (*this)->set_Checked(VARIANT_BOOL)Checked);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLCheckboxT<T>::get_Checked(VARIANT_BOOL* Checked/*[out,retval]*/)
{
  return (*this)->get_Checked(Checked);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLCheckboxT<T>::get_Checked(TOLEBOOL* Checked/*[out,retval]*/)
{
  return (*this)->get_Checked(VARIANT_BOOL*)Checked);
}

template <class T> TOLEBOOL __fastcall
TCOMIWHTMLCheckboxT<T>::get_Checked(void)
{
  VARIANT_BOOL Checked;
  OLECHECK(this->get_Checked((VARIANT_BOOL*)&Checked));
  return (TOLEBOOL)Checked;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLCheckboxT<T>::set_HTMLType(BSTR HTMLType/*[in]*/)
{
  return (*this)->set_HTMLType(HTMLType);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLCheckboxT<T>::get_HTMLType(BSTR* HTMLType/*[out,retval]*/)
{
  return (*this)->get_HTMLType(HTMLType);
}

template <class T> BSTR __fastcall
TCOMIWHTMLCheckboxT<T>::get_HTMLType(void)
{
  BSTR HTMLType = 0;
  OLECHECK(this->get_HTMLType((BSTR*)&HTMLType));
  return HTMLType;
}

// *********************************************************************//
// DispIntf:  IWHTMLCheckbox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D117-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLCheckboxDispT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<1> _args;
  _args[1] = HTMLName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLCheckboxDispT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLCheckboxDispT<T>::get_HTMLName(void)
{
  BSTR HTMLName;
  this->get_HTMLName((BSTR*)&HTMLName);
  return HTMLName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLCheckboxDispT<T>::set_Value(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(607));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLCheckboxDispT<T>::get_Value(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(607));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLCheckboxDispT<T>::get_Value(void)
{
  BSTR Value;
  this->get_Value((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLCheckboxDispT<T>::set_Checked(VARIANT_BOOL Checked/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checked"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Checked /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLCheckboxDispT<T>::get_Checked(VARIANT_BOOL* Checked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checked"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Checked /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWHTMLCheckboxDispT<T>::get_Checked(void)
{
  VARIANT_BOOL Checked;
  this->get_Checked((VARIANT_BOOL*)&Checked);
  return Checked;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLCheckboxDispT<T>::set_HTMLType(BSTR HTMLType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLType"), DISPID(618));
  TAutoArgs<1> _args;
  _args[1] = HTMLType /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLCheckboxDispT<T>::get_HTMLType(BSTR* HTMLType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLType"), DISPID(618));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLCheckboxDispT<T>::get_HTMLType(void)
{
  BSTR HTMLType;
  this->get_HTMLType((BSTR*)&HTMLType);
  return HTMLType;
}

// *********************************************************************//
// SmartIntf: TCOMIWHTMLOption
// Interface: IWHTMLOption
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWHTMLOptionT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  return (*this)->set_HTMLName(HTMLName);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLOptionT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  return (*this)->get_HTMLName(HTMLName);
}

template <class T> BSTR __fastcall
TCOMIWHTMLOptionT<T>::get_HTMLName(void)
{
  BSTR HTMLName = 0;
  OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
  return HTMLName;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLOptionT<T>::set_Value(BSTR Value/*[in]*/)
{
  return (*this)->set_Value(Value);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLOptionT<T>::get_Value(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Value(Value);
}

template <class T> BSTR __fastcall
TCOMIWHTMLOptionT<T>::get_Value(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Value((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLOptionT<T>::set_Checked(VARIANT_BOOL Checked/*[in]*/)
{
  return (*this)->set_Checked(Checked);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLOptionT<T>::set_Checked(TOLEBOOL Checked/*[in]*/)
{
  return (*this)->set_Checked(VARIANT_BOOL)Checked);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLOptionT<T>::get_Checked(VARIANT_BOOL* Checked/*[out,retval]*/)
{
  return (*this)->get_Checked(Checked);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLOptionT<T>::get_Checked(TOLEBOOL* Checked/*[out,retval]*/)
{
  return (*this)->get_Checked(VARIANT_BOOL*)Checked);
}

template <class T> TOLEBOOL __fastcall
TCOMIWHTMLOptionT<T>::get_Checked(void)
{
  VARIANT_BOOL Checked;
  OLECHECK(this->get_Checked((VARIANT_BOOL*)&Checked));
  return (TOLEBOOL)Checked;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLOptionT<T>::set_HTMLType(BSTR HTMLType/*[in]*/)
{
  return (*this)->set_HTMLType(HTMLType);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLOptionT<T>::get_HTMLType(BSTR* HTMLType/*[out,retval]*/)
{
  return (*this)->get_HTMLType(HTMLType);
}

template <class T> BSTR __fastcall
TCOMIWHTMLOptionT<T>::get_HTMLType(void)
{
  BSTR HTMLType = 0;
  OLECHECK(this->get_HTMLType((BSTR*)&HTMLType));
  return HTMLType;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLOptionT<T>::get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/)
{
  return (*this)->get_DisplayStyle(DisplayStyle);
}

template <class T> Msforms_97::fmDisplayStyle __fastcall
TCOMIWHTMLOptionT<T>::get_DisplayStyle(void)
{
  Msforms_97::fmDisplayStyle DisplayStyle;
  OLECHECK(this->get_DisplayStyle((Msforms_97::fmDisplayStyle*)&DisplayStyle));
  return DisplayStyle;
}

// *********************************************************************//
// DispIntf:  IWHTMLOption
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D119-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLOptionDispT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<1> _args;
  _args[1] = HTMLName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLOptionDispT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLOptionDispT<T>::get_HTMLName(void)
{
  BSTR HTMLName;
  this->get_HTMLName((BSTR*)&HTMLName);
  return HTMLName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLOptionDispT<T>::set_Value(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(607));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLOptionDispT<T>::get_Value(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(607));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLOptionDispT<T>::get_Value(void)
{
  BSTR Value;
  this->get_Value((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLOptionDispT<T>::set_Checked(VARIANT_BOOL Checked/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checked"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Checked /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLOptionDispT<T>::get_Checked(VARIANT_BOOL* Checked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checked"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Checked /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWHTMLOptionDispT<T>::get_Checked(void)
{
  VARIANT_BOOL Checked;
  this->get_Checked((VARIANT_BOOL*)&Checked);
  return Checked;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLOptionDispT<T>::set_HTMLType(BSTR HTMLType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLType"), DISPID(618));
  TAutoArgs<1> _args;
  _args[1] = HTMLType /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLOptionDispT<T>::get_HTMLType(BSTR* HTMLType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLType"), DISPID(618));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLOptionDispT<T>::get_HTMLType(void)
{
  BSTR HTMLType;
  this->get_HTMLType((BSTR*)&HTMLType);
  return HTMLType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLOptionDispT<T>::get_DisplayStyle(Msforms_97::fmDisplayStyle* DisplayStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayStyle"), DISPID(-540));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmDisplayStyle __fastcall
IWHTMLOptionDispT<T>::get_DisplayStyle(void)
{
  Msforms_97::fmDisplayStyle DisplayStyle;
  this->get_DisplayStyle((Msforms_97::fmDisplayStyle*)&DisplayStyle);
  return DisplayStyle;
}

// *********************************************************************//
// SmartIntf: TCOMIWHTMLText
// Interface: IWHTMLText
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWHTMLTextT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  return (*this)->set_HTMLName(HTMLName);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLTextT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  return (*this)->get_HTMLName(HTMLName);
}

template <class T> BSTR __fastcall
TCOMIWHTMLTextT<T>::get_HTMLName(void)
{
  BSTR HTMLName = 0;
  OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
  return HTMLName;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLTextT<T>::set_Value(BSTR Value/*[in]*/)
{
  return (*this)->set_Value(Value);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLTextT<T>::get_Value(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Value(Value);
}

template <class T> BSTR __fastcall
TCOMIWHTMLTextT<T>::get_Value(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Value((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLTextT<T>::set_MaxLength(long MaxLength/*[in]*/)
{
  return (*this)->set_MaxLength(MaxLength);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLTextT<T>::get_MaxLength(long* MaxLength/*[out,retval]*/)
{
  return (*this)->get_MaxLength(MaxLength);
}

template <class T> long __fastcall
TCOMIWHTMLTextT<T>::get_MaxLength(void)
{
  long MaxLength;
  OLECHECK(this->get_MaxLength((long*)&MaxLength));
  return MaxLength;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLTextT<T>::set_Width(long Width/*[in]*/)
{
  return (*this)->set_Width(Width);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLTextT<T>::get_Width(long* Width/*[out,retval]*/)
{
  return (*this)->get_Width(Width);
}

template <class T> long __fastcall
TCOMIWHTMLTextT<T>::get_Width(void)
{
  long Width;
  OLECHECK(this->get_Width((long*)&Width));
  return Width;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLTextT<T>::set_HTMLType(BSTR HTMLType/*[in]*/)
{
  return (*this)->set_HTMLType(HTMLType);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLTextT<T>::get_HTMLType(BSTR* HTMLType/*[out,retval]*/)
{
  return (*this)->get_HTMLType(HTMLType);
}

template <class T> BSTR __fastcall
TCOMIWHTMLTextT<T>::get_HTMLType(void)
{
  BSTR HTMLType = 0;
  OLECHECK(this->get_HTMLType((BSTR*)&HTMLType));
  return HTMLType;
}

// *********************************************************************//
// DispIntf:  IWHTMLText
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D11B-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextDispT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<1> _args;
  _args[1] = HTMLName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextDispT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLTextDispT<T>::get_HTMLName(void)
{
  BSTR HTMLName;
  this->get_HTMLName((BSTR*)&HTMLName);
  return HTMLName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextDispT<T>::set_Value(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextDispT<T>::get_Value(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLTextDispT<T>::get_Value(void)
{
  BSTR Value;
  this->get_Value((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextDispT<T>::set_MaxLength(long MaxLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxLength"), DISPID(609));
  TAutoArgs<1> _args;
  _args[1] = MaxLength /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextDispT<T>::get_MaxLength(long* MaxLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxLength"), DISPID(609));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MaxLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWHTMLTextDispT<T>::get_MaxLength(void)
{
  long MaxLength;
  this->get_MaxLength((long*)&MaxLength);
  return MaxLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextDispT<T>::set_Width(long Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(610));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(610));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWHTMLTextDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextDispT<T>::set_HTMLType(BSTR HTMLType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLType"), DISPID(618));
  TAutoArgs<1> _args;
  _args[1] = HTMLType /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextDispT<T>::get_HTMLType(BSTR* HTMLType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLType"), DISPID(618));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLTextDispT<T>::get_HTMLType(void)
{
  BSTR HTMLType;
  this->get_HTMLType((BSTR*)&HTMLType);
  return HTMLType;
}

// *********************************************************************//
// SmartIntf: TCOMIWHTMLHidden
// Interface: IWHTMLHidden
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWHTMLHiddenT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  return (*this)->set_HTMLName(HTMLName);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLHiddenT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  return (*this)->get_HTMLName(HTMLName);
}

template <class T> BSTR __fastcall
TCOMIWHTMLHiddenT<T>::get_HTMLName(void)
{
  BSTR HTMLName = 0;
  OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
  return HTMLName;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLHiddenT<T>::set_Value(BSTR Value/*[in]*/)
{
  return (*this)->set_Value(Value);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLHiddenT<T>::get_Value(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Value(Value);
}

template <class T> BSTR __fastcall
TCOMIWHTMLHiddenT<T>::get_Value(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Value((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLHiddenT<T>::set_HTMLType(BSTR HTMLType/*[in]*/)
{
  return (*this)->set_HTMLType(HTMLType);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLHiddenT<T>::get_HTMLType(BSTR* HTMLType/*[out,retval]*/)
{
  return (*this)->get_HTMLType(HTMLType);
}

template <class T> BSTR __fastcall
TCOMIWHTMLHiddenT<T>::get_HTMLType(void)
{
  BSTR HTMLType = 0;
  OLECHECK(this->get_HTMLType((BSTR*)&HTMLType));
  return HTMLType;
}

// *********************************************************************//
// DispIntf:  IWHTMLHidden
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D11D-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLHiddenDispT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<1> _args;
  _args[1] = HTMLName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLHiddenDispT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLHiddenDispT<T>::get_HTMLName(void)
{
  BSTR HTMLName;
  this->get_HTMLName((BSTR*)&HTMLName);
  return HTMLName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLHiddenDispT<T>::set_Value(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLHiddenDispT<T>::get_Value(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLHiddenDispT<T>::get_Value(void)
{
  BSTR Value;
  this->get_Value((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLHiddenDispT<T>::set_HTMLType(BSTR HTMLType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLType"), DISPID(618));
  TAutoArgs<1> _args;
  _args[1] = HTMLType /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLHiddenDispT<T>::get_HTMLType(BSTR* HTMLType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLType"), DISPID(618));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLHiddenDispT<T>::get_HTMLType(void)
{
  BSTR HTMLType;
  this->get_HTMLType((BSTR*)&HTMLType);
  return HTMLType;
}

// *********************************************************************//
// SmartIntf: TCOMIWHTMLPassword
// Interface: IWHTMLPassword
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWHTMLPasswordT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  return (*this)->set_HTMLName(HTMLName);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLPasswordT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  return (*this)->get_HTMLName(HTMLName);
}

template <class T> BSTR __fastcall
TCOMIWHTMLPasswordT<T>::get_HTMLName(void)
{
  BSTR HTMLName = 0;
  OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
  return HTMLName;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLPasswordT<T>::set_Value(BSTR Value/*[in]*/)
{
  return (*this)->set_Value(Value);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLPasswordT<T>::get_Value(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Value(Value);
}

template <class T> BSTR __fastcall
TCOMIWHTMLPasswordT<T>::get_Value(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Value((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLPasswordT<T>::set_MaxLength(long MaxLength/*[in]*/)
{
  return (*this)->set_MaxLength(MaxLength);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLPasswordT<T>::get_MaxLength(long* MaxLength/*[out,retval]*/)
{
  return (*this)->get_MaxLength(MaxLength);
}

template <class T> long __fastcall
TCOMIWHTMLPasswordT<T>::get_MaxLength(void)
{
  long MaxLength;
  OLECHECK(this->get_MaxLength((long*)&MaxLength));
  return MaxLength;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLPasswordT<T>::set_Width(long Width/*[in]*/)
{
  return (*this)->set_Width(Width);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLPasswordT<T>::get_Width(long* Width/*[out,retval]*/)
{
  return (*this)->get_Width(Width);
}

template <class T> long __fastcall
TCOMIWHTMLPasswordT<T>::get_Width(void)
{
  long Width;
  OLECHECK(this->get_Width((long*)&Width));
  return Width;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLPasswordT<T>::set_HTMLType(BSTR HTMLType/*[in]*/)
{
  return (*this)->set_HTMLType(HTMLType);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLPasswordT<T>::get_HTMLType(BSTR* HTMLType/*[out,retval]*/)
{
  return (*this)->get_HTMLType(HTMLType);
}

template <class T> BSTR __fastcall
TCOMIWHTMLPasswordT<T>::get_HTMLType(void)
{
  BSTR HTMLType = 0;
  OLECHECK(this->get_HTMLType((BSTR*)&HTMLType));
  return HTMLType;
}

// *********************************************************************//
// DispIntf:  IWHTMLPassword
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D11F-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLPasswordDispT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<1> _args;
  _args[1] = HTMLName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLPasswordDispT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLPasswordDispT<T>::get_HTMLName(void)
{
  BSTR HTMLName;
  this->get_HTMLName((BSTR*)&HTMLName);
  return HTMLName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLPasswordDispT<T>::set_Value(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLPasswordDispT<T>::get_Value(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLPasswordDispT<T>::get_Value(void)
{
  BSTR Value;
  this->get_Value((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLPasswordDispT<T>::set_MaxLength(long MaxLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxLength"), DISPID(609));
  TAutoArgs<1> _args;
  _args[1] = MaxLength /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLPasswordDispT<T>::get_MaxLength(long* MaxLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxLength"), DISPID(609));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MaxLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWHTMLPasswordDispT<T>::get_MaxLength(void)
{
  long MaxLength;
  this->get_MaxLength((long*)&MaxLength);
  return MaxLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLPasswordDispT<T>::set_Width(long Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(610));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLPasswordDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(610));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWHTMLPasswordDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLPasswordDispT<T>::set_HTMLType(BSTR HTMLType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLType"), DISPID(618));
  TAutoArgs<1> _args;
  _args[1] = HTMLType /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLPasswordDispT<T>::get_HTMLType(BSTR* HTMLType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLType"), DISPID(618));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLPasswordDispT<T>::get_HTMLType(void)
{
  BSTR HTMLType;
  this->get_HTMLType((BSTR*)&HTMLType);
  return HTMLType;
}

// *********************************************************************//
// SmartIntf: TCOMIWHTMLSelect
// Interface: IWHTMLSelect
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWHTMLSelectT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  return (*this)->set_HTMLName(HTMLName);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSelectT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  return (*this)->get_HTMLName(HTMLName);
}

template <class T> BSTR __fastcall
TCOMIWHTMLSelectT<T>::get_HTMLName(void)
{
  BSTR HTMLName = 0;
  OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
  return HTMLName;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSelectT<T>::set_Values(VARIANT* Values/*[in]*/)
{
  return (*this)->set_Values(Values);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSelectT<T>::get_Values(VARIANT* Values/*[out,retval]*/)
{
  return (*this)->get_Values(Values);
}

template <class T> VARIANT __fastcall
TCOMIWHTMLSelectT<T>::get_Values(void)
{
  VARIANT Values;
  OLECHECK(this->get_Values((VARIANT*)&Values));
  return Values;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSelectT<T>::set_DisplayValues(VARIANT* DisplayValues/*[in]*/)
{
  return (*this)->set_DisplayValues(DisplayValues);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSelectT<T>::get_DisplayValues(VARIANT* DisplayValues/*[out,retval]*/)
{
  return (*this)->get_DisplayValues(DisplayValues);
}

template <class T> VARIANT __fastcall
TCOMIWHTMLSelectT<T>::get_DisplayValues(void)
{
  VARIANT DisplayValues;
  OLECHECK(this->get_DisplayValues((VARIANT*)&DisplayValues));
  return DisplayValues;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSelectT<T>::set_Selected(BSTR Selected/*[in]*/)
{
  return (*this)->set_Selected(Selected);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSelectT<T>::get_Selected(BSTR* Selected/*[out,retval]*/)
{
  return (*this)->get_Selected(Selected);
}

template <class T> BSTR __fastcall
TCOMIWHTMLSelectT<T>::get_Selected(void)
{
  BSTR Selected = 0;
  OLECHECK(this->get_Selected((BSTR*)&Selected));
  return Selected;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSelectT<T>::set_MultiSelect(VARIANT_BOOL MultiSelect/*[in]*/)
{
  return (*this)->set_MultiSelect(MultiSelect);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSelectT<T>::set_MultiSelect(TOLEBOOL MultiSelect/*[in]*/)
{
  return (*this)->set_MultiSelect(VARIANT_BOOL)MultiSelect);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSelectT<T>::get_MultiSelect(VARIANT_BOOL* MultiSelect/*[out,retval]*/)
{
  return (*this)->get_MultiSelect(MultiSelect);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSelectT<T>::get_MultiSelect(TOLEBOOL* MultiSelect/*[out,retval]*/)
{
  return (*this)->get_MultiSelect(VARIANT_BOOL*)MultiSelect);
}

template <class T> TOLEBOOL __fastcall
TCOMIWHTMLSelectT<T>::get_MultiSelect(void)
{
  VARIANT_BOOL MultiSelect;
  OLECHECK(this->get_MultiSelect((VARIANT_BOOL*)&MultiSelect));
  return (TOLEBOOL)MultiSelect;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSelectT<T>::set_Size(long Size/*[in]*/)
{
  return (*this)->set_Size(Size);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLSelectT<T>::get_Size(long* Size/*[out,retval]*/)
{
  return (*this)->get_Size(Size);
}

template <class T> long __fastcall
TCOMIWHTMLSelectT<T>::get_Size(void)
{
  long Size;
  OLECHECK(this->get_Size((long*)&Size));
  return Size;
}

// *********************************************************************//
// DispIntf:  IWHTMLSelect
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D123-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSelectDispT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<1> _args;
  _args[1] = HTMLName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSelectDispT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLSelectDispT<T>::get_HTMLName(void)
{
  BSTR HTMLName;
  this->get_HTMLName((BSTR*)&HTMLName);
  return HTMLName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSelectDispT<T>::set_Values(VARIANT* Values/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Values"), DISPID(611));
  TAutoArgs<1> _args;
  _args[1] = Values /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSelectDispT<T>::get_Values(VARIANT* Values/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Values"), DISPID(611));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Values /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IWHTMLSelectDispT<T>::get_Values(void)
{
  VARIANT Values;
  this->get_Values((VARIANT*)&Values);
  return Values;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSelectDispT<T>::set_DisplayValues(VARIANT* DisplayValues/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayValues"), DISPID(612));
  TAutoArgs<1> _args;
  _args[1] = DisplayValues /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSelectDispT<T>::get_DisplayValues(VARIANT* DisplayValues/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayValues"), DISPID(612));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayValues /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IWHTMLSelectDispT<T>::get_DisplayValues(void)
{
  VARIANT DisplayValues;
  this->get_DisplayValues((VARIANT*)&DisplayValues);
  return DisplayValues;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSelectDispT<T>::set_Selected(BSTR Selected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(613));
  TAutoArgs<1> _args;
  _args[1] = Selected /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSelectDispT<T>::get_Selected(BSTR* Selected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(613));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Selected /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLSelectDispT<T>::get_Selected(void)
{
  BSTR Selected;
  this->get_Selected((BSTR*)&Selected);
  return Selected;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSelectDispT<T>::set_MultiSelect(VARIANT_BOOL MultiSelect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiSelect"), DISPID(614));
  TAutoArgs<1> _args;
  _args[1] = MultiSelect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSelectDispT<T>::get_MultiSelect(VARIANT_BOOL* MultiSelect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiSelect"), DISPID(614));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MultiSelect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWHTMLSelectDispT<T>::get_MultiSelect(void)
{
  VARIANT_BOOL MultiSelect;
  this->get_MultiSelect((VARIANT_BOOL*)&MultiSelect);
  return MultiSelect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSelectDispT<T>::set_Size(long Size/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(619));
  TAutoArgs<1> _args;
  _args[1] = Size /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLSelectDispT<T>::get_Size(long* Size/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(619));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Size /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWHTMLSelectDispT<T>::get_Size(void)
{
  long Size;
  this->get_Size((long*)&Size);
  return Size;
}

// *********************************************************************//
// SmartIntf: TCOMIWHTMLTextArea
// Interface: IWHTMLTextArea
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWHTMLTextAreaT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  return (*this)->set_HTMLName(HTMLName);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLTextAreaT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  return (*this)->get_HTMLName(HTMLName);
}

template <class T> BSTR __fastcall
TCOMIWHTMLTextAreaT<T>::get_HTMLName(void)
{
  BSTR HTMLName = 0;
  OLECHECK(this->get_HTMLName((BSTR*)&HTMLName));
  return HTMLName;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLTextAreaT<T>::set_Value(BSTR Value/*[in]*/)
{
  return (*this)->set_Value(Value);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLTextAreaT<T>::get_Value(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Value(Value);
}

template <class T> BSTR __fastcall
TCOMIWHTMLTextAreaT<T>::get_Value(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Value((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLTextAreaT<T>::set_Rows(long Rows/*[in]*/)
{
  return (*this)->set_Rows(Rows);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLTextAreaT<T>::get_Rows(long* Rows/*[out,retval]*/)
{
  return (*this)->get_Rows(Rows);
}

template <class T> long __fastcall
TCOMIWHTMLTextAreaT<T>::get_Rows(void)
{
  long Rows;
  OLECHECK(this->get_Rows((long*)&Rows));
  return Rows;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLTextAreaT<T>::set_Columns(long Columns/*[in]*/)
{
  return (*this)->set_Columns(Columns);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLTextAreaT<T>::get_Columns(long* Columns/*[out,retval]*/)
{
  return (*this)->get_Columns(Columns);
}

template <class T> long __fastcall
TCOMIWHTMLTextAreaT<T>::get_Columns(void)
{
  long Columns;
  OLECHECK(this->get_Columns((long*)&Columns));
  return Columns;
}

template <class T> HRESULT __fastcall
TCOMIWHTMLTextAreaT<T>::set_WordWrap(BSTR WordWrap/*[in]*/)
{
  return (*this)->set_WordWrap(WordWrap);
}

template <class T> HRESULT __fastcall
TCOMIWHTMLTextAreaT<T>::get_WordWrap(BSTR* WordWrap/*[out,retval]*/)
{
  return (*this)->get_WordWrap(WordWrap);
}

template <class T> BSTR __fastcall
TCOMIWHTMLTextAreaT<T>::get_WordWrap(void)
{
  BSTR WordWrap = 0;
  OLECHECK(this->get_WordWrap((BSTR*)&WordWrap));
  return WordWrap;
}

// *********************************************************************//
// DispIntf:  IWHTMLTextArea
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5512D125-5CC6-11CF-8D67-00AA00BDCE1D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextAreaDispT<T>::set_HTMLName(BSTR HTMLName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<1> _args;
  _args[1] = HTMLName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextAreaDispT<T>::get_HTMLName(BSTR* HTMLName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLName"), DISPID(-541));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLTextAreaDispT<T>::get_HTMLName(void)
{
  BSTR HTMLName;
  this->get_HTMLName((BSTR*)&HTMLName);
  return HTMLName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextAreaDispT<T>::set_Value(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextAreaDispT<T>::get_Value(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLTextAreaDispT<T>::get_Value(void)
{
  BSTR Value;
  this->get_Value((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextAreaDispT<T>::set_Rows(long Rows/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rows"), DISPID(615));
  TAutoArgs<1> _args;
  _args[1] = Rows /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextAreaDispT<T>::get_Rows(long* Rows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rows"), DISPID(615));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Rows /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWHTMLTextAreaDispT<T>::get_Rows(void)
{
  long Rows;
  this->get_Rows((long*)&Rows);
  return Rows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextAreaDispT<T>::set_Columns(long Columns/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Columns"), DISPID(616));
  TAutoArgs<1> _args;
  _args[1] = Columns /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextAreaDispT<T>::get_Columns(long* Columns/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Columns"), DISPID(616));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Columns /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWHTMLTextAreaDispT<T>::get_Columns(void)
{
  long Columns;
  this->get_Columns((long*)&Columns);
  return Columns;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextAreaDispT<T>::set_WordWrap(BSTR WordWrap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(617));
  TAutoArgs<1> _args;
  _args[1] = WordWrap /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWHTMLTextAreaDispT<T>::get_WordWrap(BSTR* WordWrap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(617));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(WordWrap /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWHTMLTextAreaDispT<T>::get_WordWrap(void)
{
  BSTR WordWrap;
  this->get_WordWrap((BSTR*)&WordWrap);
  return WordWrap;
}

// *********************************************************************//
// DispIntf:  LabelControlEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {978C9E22-D4B0-11CE-BF2D-00AA003F40D0}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
LabelControlEventsDispT<T>::BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                           Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                           float Y/*[in]*/, 
                                           Msforms_97::fmDragState DragState/*[in]*/, 
                                           Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                           short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LabelControlEventsDispT<T>::BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                              Msforms_97::fmAction Action/*[in]*/, 
                                              Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/
                                              , float Y/*[in]*/, 
                                              Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                              short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
  _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LabelControlEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LabelControlEventsDispT<T>::DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
{
  _TDispID _dispid(/* DblClick */ DISPID(-601));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LabelControlEventsDispT<T>::Error(short Number/*[in]*/, 
                                  Msforms_97::ReturnString* Description/*[in]*/, long SCode/*[in]*/
                                  , BSTR Source/*[in]*/, BSTR HelpFile/*[in]*/, 
                                  long HelpContext/*[in]*/, 
                                  Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
{
  _TDispID _dispid(/* Error */ DISPID(-608));
  TAutoArgs<7> _args;
  _args[1] = Number /*[VT_I2:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
  _args[3] = SCode /*[VT_I4:0]*/;
  _args[4] = Source /*[VT_BSTR:0]*/;
  _args[5] = HelpFile /*[VT_BSTR:0]*/;
  _args[6] = HelpContext /*[VT_I4:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LabelControlEventsDispT<T>::MouseDown(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                      float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LabelControlEventsDispT<T>::MouseMove(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                      float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LabelControlEventsDispT<T>::MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                    float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  CommandButtonEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {7B020EC1-AF6C-11CE-9F46-00AA00574A4F}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
CommandButtonEventsDispT<T>::BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                            Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                            float Y/*[in]*/, 
                                            Msforms_97::fmDragState DragState/*[in]*/, 
                                            Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                            short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
CommandButtonEventsDispT<T>::BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                               Msforms_97::fmAction Action/*[in]*/, 
                                               Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/
                                               , float Y/*[in]*/, 
                                               Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                               short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
  _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
CommandButtonEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
CommandButtonEventsDispT<T>::DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
{
  _TDispID _dispid(/* DblClick */ DISPID(-601));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
CommandButtonEventsDispT<T>::Error(short Number/*[in]*/, 
                                   Msforms_97::ReturnString* Description/*[in]*/, long SCode/*[in]*/
                                   , BSTR Source/*[in]*/, BSTR HelpFile/*[in]*/, 
                                   long HelpContext/*[in]*/, 
                                   Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
{
  _TDispID _dispid(/* Error */ DISPID(-608));
  TAutoArgs<7> _args;
  _args[1] = Number /*[VT_I2:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
  _args[3] = SCode /*[VT_I4:0]*/;
  _args[4] = Source /*[VT_BSTR:0]*/;
  _args[5] = HelpFile /*[VT_BSTR:0]*/;
  _args[6] = HelpContext /*[VT_I4:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
CommandButtonEventsDispT<T>::KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
CommandButtonEventsDispT<T>::KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
CommandButtonEventsDispT<T>::KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
CommandButtonEventsDispT<T>::MouseDown(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                       float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
CommandButtonEventsDispT<T>::MouseMove(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                       float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
CommandButtonEventsDispT<T>::MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                     float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  MdcTextEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BD21D12-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcTextEventsDispT<T>::BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                      Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                      float Y/*[in]*/, Msforms_97::fmDragState DragState/*[in]*/, 
                                      Msforms_97::ReturnEffect* Effect/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcTextEventsDispT<T>::BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                         Msforms_97::fmAction Action/*[in]*/, 
                                         Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                         float Y/*[in]*/, Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                         short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
  _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcTextEventsDispT<T>::Change()
{
  _TDispID _dispid(/* Change */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcTextEventsDispT<T>::DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
{
  _TDispID _dispid(/* DblClick */ DISPID(-601));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcTextEventsDispT<T>::DropButtonClick()
{
  _TDispID _dispid(/* DropButtonClick */ DISPID(2002));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcTextEventsDispT<T>::Error(short Number/*[in]*/, Msforms_97::ReturnString* Description/*[in]*/, 
                             long SCode/*[in]*/, BSTR Source/*[in]*/, BSTR HelpFile/*[in]*/, 
                             long HelpContext/*[in]*/, 
                             Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
{
  _TDispID _dispid(/* Error */ DISPID(-608));
  TAutoArgs<7> _args;
  _args[1] = Number /*[VT_I2:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
  _args[3] = SCode /*[VT_I4:0]*/;
  _args[4] = Source /*[VT_BSTR:0]*/;
  _args[5] = HelpFile /*[VT_BSTR:0]*/;
  _args[6] = HelpContext /*[VT_I4:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcTextEventsDispT<T>::KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcTextEventsDispT<T>::KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcTextEventsDispT<T>::KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcTextEventsDispT<T>::MouseDown(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                 float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcTextEventsDispT<T>::MouseMove(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                 float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcTextEventsDispT<T>::MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                               float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  MdcListEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BD21D22-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcListEventsDispT<T>::BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                      Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                      float Y/*[in]*/, Msforms_97::fmDragState DragState/*[in]*/, 
                                      Msforms_97::ReturnEffect* Effect/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcListEventsDispT<T>::BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                         Msforms_97::fmAction Action/*[in]*/, 
                                         Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                         float Y/*[in]*/, Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                         short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
  _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcListEventsDispT<T>::Change()
{
  _TDispID _dispid(/* Change */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcListEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-610));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcListEventsDispT<T>::DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
{
  _TDispID _dispid(/* DblClick */ DISPID(-601));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcListEventsDispT<T>::Error(short Number/*[in]*/, Msforms_97::ReturnString* Description/*[in]*/, 
                             long SCode/*[in]*/, BSTR Source/*[in]*/, BSTR HelpFile/*[in]*/, 
                             long HelpContext/*[in]*/, 
                             Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
{
  _TDispID _dispid(/* Error */ DISPID(-608));
  TAutoArgs<7> _args;
  _args[1] = Number /*[VT_I2:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
  _args[3] = SCode /*[VT_I4:0]*/;
  _args[4] = Source /*[VT_BSTR:0]*/;
  _args[5] = HelpFile /*[VT_BSTR:0]*/;
  _args[6] = HelpContext /*[VT_I4:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcListEventsDispT<T>::KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcListEventsDispT<T>::KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcListEventsDispT<T>::KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcListEventsDispT<T>::MouseDown(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                 float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcListEventsDispT<T>::MouseMove(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                 float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcListEventsDispT<T>::MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                               float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  MdcComboEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BD21D32-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcComboEventsDispT<T>::BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                       Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                       float Y/*[in]*/, Msforms_97::fmDragState DragState/*[in]*/, 
                                       Msforms_97::ReturnEffect* Effect/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcComboEventsDispT<T>::BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                          Msforms_97::fmAction Action/*[in]*/, 
                                          Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                          float Y/*[in]*/, Msforms_97::ReturnEffect* Effect/*[in]*/
                                          , short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
  _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcComboEventsDispT<T>::Change()
{
  _TDispID _dispid(/* Change */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcComboEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-610));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcComboEventsDispT<T>::DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
{
  _TDispID _dispid(/* DblClick */ DISPID(-601));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcComboEventsDispT<T>::DropButtonClick()
{
  _TDispID _dispid(/* DropButtonClick */ DISPID(2002));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcComboEventsDispT<T>::Error(short Number/*[in]*/, Msforms_97::ReturnString* Description/*[in]*/, 
                              long SCode/*[in]*/, BSTR Source/*[in]*/, BSTR HelpFile/*[in]*/, 
                              long HelpContext/*[in]*/, 
                              Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
{
  _TDispID _dispid(/* Error */ DISPID(-608));
  TAutoArgs<7> _args;
  _args[1] = Number /*[VT_I2:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
  _args[3] = SCode /*[VT_I4:0]*/;
  _args[4] = Source /*[VT_BSTR:0]*/;
  _args[5] = HelpFile /*[VT_BSTR:0]*/;
  _args[6] = HelpContext /*[VT_I4:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcComboEventsDispT<T>::KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcComboEventsDispT<T>::KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcComboEventsDispT<T>::KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcComboEventsDispT<T>::MouseDown(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                  float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcComboEventsDispT<T>::MouseMove(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                  float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcComboEventsDispT<T>::MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  MdcCheckBoxEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BD21D42-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcCheckBoxEventsDispT<T>::BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                          Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                          float Y/*[in]*/, Msforms_97::fmDragState DragState/*[in]*/
                                          , Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                          short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcCheckBoxEventsDispT<T>::BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                             Msforms_97::fmAction Action/*[in]*/, 
                                             Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                             float Y/*[in]*/, 
                                             Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                             short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
  _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcCheckBoxEventsDispT<T>::Change()
{
  _TDispID _dispid(/* Change */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcCheckBoxEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-610));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcCheckBoxEventsDispT<T>::DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
{
  _TDispID _dispid(/* DblClick */ DISPID(-601));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcCheckBoxEventsDispT<T>::Error(short Number/*[in]*/, Msforms_97::ReturnString* Description/*[in]*/
                                 , long SCode/*[in]*/, BSTR Source/*[in]*/, BSTR HelpFile/*[in]*/, 
                                 long HelpContext/*[in]*/, 
                                 Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
{
  _TDispID _dispid(/* Error */ DISPID(-608));
  TAutoArgs<7> _args;
  _args[1] = Number /*[VT_I2:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
  _args[3] = SCode /*[VT_I4:0]*/;
  _args[4] = Source /*[VT_BSTR:0]*/;
  _args[5] = HelpFile /*[VT_BSTR:0]*/;
  _args[6] = HelpContext /*[VT_I4:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcCheckBoxEventsDispT<T>::KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcCheckBoxEventsDispT<T>::KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcCheckBoxEventsDispT<T>::KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcCheckBoxEventsDispT<T>::MouseDown(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                     float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcCheckBoxEventsDispT<T>::MouseMove(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                     float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcCheckBoxEventsDispT<T>::MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                   float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  MdcOptionButtonEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BD21D52-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcOptionButtonEventsDispT<T>::BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                              Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/
                                              , float Y/*[in]*/, 
                                              Msforms_97::fmDragState DragState/*[in]*/, 
                                              Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                              short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcOptionButtonEventsDispT<T>::BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::fmAction Action/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
  _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcOptionButtonEventsDispT<T>::Change()
{
  _TDispID _dispid(/* Change */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcOptionButtonEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-610));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcOptionButtonEventsDispT<T>::DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
{
  _TDispID _dispid(/* DblClick */ DISPID(-601));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcOptionButtonEventsDispT<T>::Error(short Number/*[in]*/, 
                                     Msforms_97::ReturnString* Description/*[in]*/, 
                                     long SCode/*[in]*/, BSTR Source/*[in]*/, BSTR HelpFile/*[in]*/
                                     , long HelpContext/*[in]*/, 
                                     Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
{
  _TDispID _dispid(/* Error */ DISPID(-608));
  TAutoArgs<7> _args;
  _args[1] = Number /*[VT_I2:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
  _args[3] = SCode /*[VT_I4:0]*/;
  _args[4] = Source /*[VT_BSTR:0]*/;
  _args[5] = HelpFile /*[VT_BSTR:0]*/;
  _args[6] = HelpContext /*[VT_I4:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcOptionButtonEventsDispT<T>::KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                       short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcOptionButtonEventsDispT<T>::KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcOptionButtonEventsDispT<T>::KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcOptionButtonEventsDispT<T>::MouseDown(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                         , float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcOptionButtonEventsDispT<T>::MouseMove(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                         , float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcOptionButtonEventsDispT<T>::MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                       float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  MdcToggleButtonEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BD21D62-EC42-11CE-9E0D-00AA006002F3}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcToggleButtonEventsDispT<T>::BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                              Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/
                                              , float Y/*[in]*/, 
                                              Msforms_97::fmDragState DragState/*[in]*/, 
                                              Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                              short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcToggleButtonEventsDispT<T>::BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                                 Msforms_97::fmAction Action/*[in]*/, 
                                                 Msforms_97::DataObject* Data/*[in]*/, 
                                                 float X/*[in]*/, float Y/*[in]*/, 
                                                 Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                                 short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
  _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcToggleButtonEventsDispT<T>::Change()
{
  _TDispID _dispid(/* Change */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcToggleButtonEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-610));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcToggleButtonEventsDispT<T>::DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
{
  _TDispID _dispid(/* DblClick */ DISPID(-601));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcToggleButtonEventsDispT<T>::Error(short Number/*[in]*/, 
                                     Msforms_97::ReturnString* Description/*[in]*/, 
                                     long SCode/*[in]*/, BSTR Source/*[in]*/, BSTR HelpFile/*[in]*/
                                     , long HelpContext/*[in]*/, 
                                     Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
{
  _TDispID _dispid(/* Error */ DISPID(-608));
  TAutoArgs<7> _args;
  _args[1] = Number /*[VT_I2:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
  _args[3] = SCode /*[VT_I4:0]*/;
  _args[4] = Source /*[VT_BSTR:0]*/;
  _args[5] = HelpFile /*[VT_BSTR:0]*/;
  _args[6] = HelpContext /*[VT_I4:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcToggleButtonEventsDispT<T>::KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, 
                                       short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcToggleButtonEventsDispT<T>::KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcToggleButtonEventsDispT<T>::KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcToggleButtonEventsDispT<T>::MouseDown(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                         , float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcToggleButtonEventsDispT<T>::MouseMove(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/
                                         , float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MdcToggleButtonEventsDispT<T>::MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                                       float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ScrollbarEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {7B020EC2-AF6C-11CE-9F46-00AA00574A4F}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
ScrollbarEventsDispT<T>::BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                        Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                        float Y/*[in]*/, Msforms_97::fmDragState DragState/*[in]*/, 
                                        Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                        short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ScrollbarEventsDispT<T>::BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                           Msforms_97::fmAction Action/*[in]*/, 
                                           Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                           float Y/*[in]*/, Msforms_97::ReturnEffect* Effect/*[in]*/
                                           , short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
  _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ScrollbarEventsDispT<T>::Change()
{
  _TDispID _dispid(/* Change */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ScrollbarEventsDispT<T>::Error(short Number/*[in]*/, Msforms_97::ReturnString* Description/*[in]*/, 
                               long SCode/*[in]*/, BSTR Source/*[in]*/, BSTR HelpFile/*[in]*/, 
                               long HelpContext/*[in]*/, 
                               Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
{
  _TDispID _dispid(/* Error */ DISPID(-608));
  TAutoArgs<7> _args;
  _args[1] = Number /*[VT_I2:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
  _args[3] = SCode /*[VT_I4:0]*/;
  _args[4] = Source /*[VT_BSTR:0]*/;
  _args[5] = HelpFile /*[VT_BSTR:0]*/;
  _args[6] = HelpContext /*[VT_I4:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ScrollbarEventsDispT<T>::KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ScrollbarEventsDispT<T>::KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ScrollbarEventsDispT<T>::KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ScrollbarEventsDispT<T>::Scroll()
{
  _TDispID _dispid(/* Scroll */ DISPID(7));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  TabStripEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {7B020EC7-AF6C-11CE-9F46-00AA00574A4F}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
TabStripEventsDispT<T>::BeforeDragOver(long Index/*[in]*/, Msforms_97::ReturnBoolean* Cancel/*[in]*/
                                       , Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                       float Y/*[in]*/, Msforms_97::fmDragState DragState/*[in]*/, 
                                       Msforms_97::ReturnEffect* Effect/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
  TAutoArgs<8> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  _args[6] = (int)DragState /*[VT_USERDEFINED:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[8] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TabStripEventsDispT<T>::BeforeDropOrPaste(long Index/*[in]*/, 
                                          Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                          Msforms_97::fmAction Action/*[in]*/, 
                                          Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                          float Y/*[in]*/, Msforms_97::ReturnEffect* Effect/*[in]*/
                                          , short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
  TAutoArgs<8> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[3] = (int)Action /*[VT_USERDEFINED:0]*/;
  _args[4] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[5] = X /*[VT_R4:0]*/;
  _args[6] = Y /*[VT_R4:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[8] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TabStripEventsDispT<T>::Change()
{
  _TDispID _dispid(/* Change */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TabStripEventsDispT<T>::Click(long Index/*[in]*/)
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TabStripEventsDispT<T>::DblClick(long Index/*[in]*/, Msforms_97::ReturnBoolean* Cancel/*[in]*/)
{
  _TDispID _dispid(/* DblClick */ DISPID(-601));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TabStripEventsDispT<T>::Error(short Number/*[in]*/, Msforms_97::ReturnString* Description/*[in]*/, 
                              long SCode/*[in]*/, BSTR Source/*[in]*/, BSTR HelpFile/*[in]*/, 
                              long HelpContext/*[in]*/, 
                              Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
{
  _TDispID _dispid(/* Error */ DISPID(-608));
  TAutoArgs<7> _args;
  _args[1] = Number /*[VT_I2:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
  _args[3] = SCode /*[VT_I4:0]*/;
  _args[4] = Source /*[VT_BSTR:0]*/;
  _args[5] = HelpFile /*[VT_BSTR:0]*/;
  _args[6] = HelpContext /*[VT_I4:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TabStripEventsDispT<T>::KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TabStripEventsDispT<T>::KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TabStripEventsDispT<T>::KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TabStripEventsDispT<T>::MouseDown(long Index/*[in]*/, short Button/*[in]*/, short Shift/*[in]*/, 
                                  float X/*[in]*/, float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<5> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = Button /*[VT_I2:0]*/;
  _args[3] = Shift /*[VT_I2:0]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TabStripEventsDispT<T>::MouseMove(long Index/*[in]*/, short Button/*[in]*/, short Shift/*[in]*/, 
                                  float X/*[in]*/, float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<5> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = Button /*[VT_I2:0]*/;
  _args[3] = Shift /*[VT_I2:0]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TabStripEventsDispT<T>::MouseUp(long Index/*[in]*/, short Button/*[in]*/, short Shift/*[in]*/, 
                                float X/*[in]*/, float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<5> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = Button /*[VT_I2:0]*/;
  _args[3] = Shift /*[VT_I2:0]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  SpinbuttonEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {79176FB2-B7F2-11CE-97EF-00AA006D2776}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
SpinbuttonEventsDispT<T>::BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                         Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                         float Y/*[in]*/, Msforms_97::fmDragState DragState/*[in]*/
                                         , Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                         short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SpinbuttonEventsDispT<T>::BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                            Msforms_97::fmAction Action/*[in]*/, 
                                            Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                            float Y/*[in]*/, 
                                            Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                            short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
  _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SpinbuttonEventsDispT<T>::Change()
{
  _TDispID _dispid(/* Change */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SpinbuttonEventsDispT<T>::Error(short Number/*[in]*/, Msforms_97::ReturnString* Description/*[in]*/
                                , long SCode/*[in]*/, BSTR Source/*[in]*/, BSTR HelpFile/*[in]*/, 
                                long HelpContext/*[in]*/, 
                                Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
{
  _TDispID _dispid(/* Error */ DISPID(-608));
  TAutoArgs<7> _args;
  _args[1] = Number /*[VT_I2:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
  _args[3] = SCode /*[VT_I4:0]*/;
  _args[4] = Source /*[VT_BSTR:0]*/;
  _args[5] = HelpFile /*[VT_BSTR:0]*/;
  _args[6] = HelpContext /*[VT_I4:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SpinbuttonEventsDispT<T>::KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SpinbuttonEventsDispT<T>::KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SpinbuttonEventsDispT<T>::KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SpinbuttonEventsDispT<T>::SpinUp()
{
  _TDispID _dispid(/* SpinUp */ DISPID(5));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SpinbuttonEventsDispT<T>::SpinDown()
{
  _TDispID _dispid(/* SpinDown */ DISPID(6));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  ImageEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {4C5992A5-6926-101B-9992-00000B65C6F9}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
ImageEventsDispT<T>::BeforeDragOver(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                    Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                    float Y/*[in]*/, Msforms_97::fmDragState DragState/*[in]*/, 
                                    Msforms_97::ReturnEffect* Effect/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  _args[5] = (int)DragState /*[VT_USERDEFINED:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ImageEventsDispT<T>::BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                       Msforms_97::fmAction Action/*[in]*/, 
                                       Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                       float Y/*[in]*/, Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                       short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
  _args[3] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[7] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ImageEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ImageEventsDispT<T>::DblClick(Msforms_97::ReturnBoolean* Cancel/*[in]*/)
{
  _TDispID _dispid(/* DblClick */ DISPID(-601));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ImageEventsDispT<T>::Error(short Number/*[in]*/, Msforms_97::ReturnString* Description/*[in]*/, 
                           long SCode/*[in]*/, BSTR Source/*[in]*/, BSTR HelpFile/*[in]*/, 
                           long HelpContext/*[in]*/, 
                           Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
{
  _TDispID _dispid(/* Error */ DISPID(-608));
  TAutoArgs<7> _args;
  _args[1] = Number /*[VT_I2:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
  _args[3] = SCode /*[VT_I4:0]*/;
  _args[4] = Source /*[VT_BSTR:0]*/;
  _args[5] = HelpFile /*[VT_BSTR:0]*/;
  _args[6] = HelpContext /*[VT_I4:0]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ImageEventsDispT<T>::MouseDown(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                               float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ImageEventsDispT<T>::MouseMove(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                               float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ImageEventsDispT<T>::MouseUp(short Button/*[in]*/, short Shift/*[in]*/, float X/*[in]*/, 
                             float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = X /*[VT_R4:0]*/;
  _args[4] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  WHTMLControlEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {796ED650-5FE9-11CF-8D68-00AA00BDCE1D}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
WHTMLControlEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  WHTMLControlEvents1
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE0-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
WHTMLControlEvents1DispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  WHTMLControlEvents2
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE1-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
WHTMLControlEvents2DispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  WHTMLControlEvents3
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE2-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
WHTMLControlEvents3DispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  WHTMLControlEvents4
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE3-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
WHTMLControlEvents4DispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  WHTMLControlEvents5
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE4-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
WHTMLControlEvents5DispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  WHTMLControlEvents6
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE5-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
WHTMLControlEvents6DispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  WHTMLControlEvents7
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE6-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
WHTMLControlEvents7DispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  WHTMLControlEvents9
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE8-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
WHTMLControlEvents9DispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  WHTMLControlEvents10
// Flags:     (4112) Hidden Dispatchable
// GUID:      {47FF8FE9-6198-11CF-8CE8-00AA006CB389}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
WHTMLControlEvents10DispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIPage
// Interface: IPage
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_Controls(Msforms_97::Controls_** Controls/*[out,retval]*/)
{
  return (*this)->get_Controls(Controls);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_Controls(Msforms_97::Controls_Ptr* Controls/*[out,retval]*/)
{
  return (*this)->get_Controls(Controls_**)Controls);
}

template <class T> Msforms_97::Controls_Ptr __fastcall
TCOMIPageT<T>::get_Controls(void)
{
  Msforms_97::Controls_* Controls;
  OLECHECK(this->get_Controls((Msforms_97::Controls_**)&Controls));
  return (Msforms_97::Controls_Ptr)Controls;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_Selected(Msforms_97::Controls_** Selected/*[out,retval]*/)
{
  return (*this)->get_Selected(Selected);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_Selected(Msforms_97::Controls_Ptr* Selected/*[out,retval]*/)
{
  return (*this)->get_Selected(Controls_**)Selected);
}

template <class T> Msforms_97::Controls_Ptr __fastcall
TCOMIPageT<T>::get_Selected(void)
{
  Msforms_97::Controls_* Selected;
  OLECHECK(this->get_Selected((Msforms_97::Controls_**)&Selected));
  return (Msforms_97::Controls_Ptr)Selected;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_ActiveControl(Msforms_97::Control** ActiveControl/*[out,retval]*/)
{
  return (*this)->get_ActiveControl(ActiveControl);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_ActiveControl(Msforms_97::ControlPtr* ActiveControl/*[out,retval]*/)
{
  return (*this)->get_ActiveControl(Control**)ActiveControl);
}

template <class T> Msforms_97::ControlPtr __fastcall
TCOMIPageT<T>::get_ActiveControl(void)
{
  Msforms_97::Control* ActiveControl;
  OLECHECK(this->get_ActiveControl((Msforms_97::Control**)&ActiveControl));
  return (Msforms_97::ControlPtr)ActiveControl;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/)
{
  return (*this)->get_CanPaste(CanPaste);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_CanPaste(TOLEBOOL* CanPaste/*[out,retval]*/)
{
  return (*this)->get_CanPaste(VARIANT_BOOL*)CanPaste);
}

template <class T> TOLEBOOL __fastcall
TCOMIPageT<T>::get_CanPaste(void)
{
  VARIANT_BOOL CanPaste;
  OLECHECK(this->get_CanPaste((VARIANT_BOOL*)&CanPaste));
  return (TOLEBOOL)CanPaste;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_CanRedo(VARIANT_BOOL* CanRedo/*[out,retval]*/)
{
  return (*this)->get_CanRedo(CanRedo);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_CanRedo(TOLEBOOL* CanRedo/*[out,retval]*/)
{
  return (*this)->get_CanRedo(VARIANT_BOOL*)CanRedo);
}

template <class T> TOLEBOOL __fastcall
TCOMIPageT<T>::get_CanRedo(void)
{
  VARIANT_BOOL CanRedo;
  OLECHECK(this->get_CanRedo((VARIANT_BOOL*)&CanRedo));
  return (TOLEBOOL)CanRedo;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_CanUndo(VARIANT_BOOL* CanUndo/*[out,retval]*/)
{
  return (*this)->get_CanUndo(CanUndo);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_CanUndo(TOLEBOOL* CanUndo/*[out,retval]*/)
{
  return (*this)->get_CanUndo(VARIANT_BOOL*)CanUndo);
}

template <class T> TOLEBOOL __fastcall
TCOMIPageT<T>::get_CanUndo(void)
{
  VARIANT_BOOL CanUndo;
  OLECHECK(this->get_CanUndo((VARIANT_BOOL*)&CanUndo));
  return (TOLEBOOL)CanUndo;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_Cycle(Msforms_97::fmCycle Cycle/*[in]*/)
{
  return (*this)->set_Cycle(Cycle);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_Cycle(Msforms_97::fmCycle* Cycle/*[out,retval]*/)
{
  return (*this)->get_Cycle(Cycle);
}

template <class T> Msforms_97::fmCycle __fastcall
TCOMIPageT<T>::get_Cycle(void)
{
  Msforms_97::fmCycle Cycle;
  OLECHECK(this->get_Cycle((Msforms_97::fmCycle*)&Cycle));
  return Cycle;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  return (*this)->set_Caption(Caption);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  return (*this)->get_Caption(Caption);
}

template <class T> BSTR __fastcall
TCOMIPageT<T>::get_Caption(void)
{
  BSTR Caption = 0;
  OLECHECK(this->get_Caption((BSTR*)&Caption));
  return Caption;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_ControlTipText(BSTR tooltip/*[in]*/)
{
  return (*this)->set_ControlTipText(tooltip);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_ControlTipText(BSTR* tooltip/*[out,retval]*/)
{
  return (*this)->get_ControlTipText(tooltip);
}

template <class T> BSTR __fastcall
TCOMIPageT<T>::get_ControlTipText(void)
{
  BSTR tooltip = 0;
  OLECHECK(this->get_ControlTipText((BSTR*)&tooltip));
  return tooltip;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_Enabled(VARIANT_BOOL fEnabled/*[in]*/)
{
  return (*this)->set_Enabled(fEnabled);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_Enabled(TOLEBOOL fEnabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)fEnabled);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(fEnabled);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_Enabled(TOLEBOOL* fEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)fEnabled);
}

template <class T> TOLEBOOL __fastcall
TCOMIPageT<T>::get_Enabled(void)
{
  VARIANT_BOOL fEnabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&fEnabled));
  return (TOLEBOOL)fEnabled;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_Index(long Index/*[in]*/)
{
  return (*this)->set_Index(Index);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_Index(long* Index/*[out,retval]*/)
{
  return (*this)->get_Index(Index);
}

template <class T> long __fastcall
TCOMIPageT<T>::get_Index(void)
{
  long Index;
  OLECHECK(this->get_Index((long*)&Index));
  return Index;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::_GetInsideHeight(long* InsideHeight/*[out]*/)
{
  return (*this)->_GetInsideHeight(InsideHeight);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_InsideHeight(float* InsideHeight/*[out,retval]*/)
{
  return (*this)->get_InsideHeight(InsideHeight);
}

template <class T> float __fastcall
TCOMIPageT<T>::get_InsideHeight(void)
{
  float InsideHeight;
  OLECHECK(this->get_InsideHeight((float*)&InsideHeight));
  return InsideHeight;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::_GetInsideWidth(long* InsideWidth/*[out]*/)
{
  return (*this)->_GetInsideWidth(InsideWidth);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_InsideWidth(float* InsideWidth/*[out,retval]*/)
{
  return (*this)->get_InsideWidth(InsideWidth);
}

template <class T> float __fastcall
TCOMIPageT<T>::get_InsideWidth(void)
{
  float InsideWidth;
  OLECHECK(this->get_InsideWidth((float*)&InsideWidth));
  return InsideWidth;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_KeepScrollBarsVisible(Msforms_97::fmScrollBars ScrollBars/*[in]*/)
{
  return (*this)->set_KeepScrollBarsVisible(ScrollBars);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_KeepScrollBarsVisible(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/)
{
  return (*this)->get_KeepScrollBarsVisible(ScrollBars);
}

template <class T> Msforms_97::fmScrollBars __fastcall
TCOMIPageT<T>::get_KeepScrollBarsVisible(void)
{
  Msforms_97::fmScrollBars ScrollBars;
  OLECHECK(this->get_KeepScrollBarsVisible((Msforms_97::fmScrollBars*)&ScrollBars));
  return ScrollBars;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_Name(BSTR Name/*[in]*/)
{
  return (*this)->set_Name(Name);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  return (*this)->get_Name(Name);
}

template <class T> BSTR __fastcall
TCOMIPageT<T>::get_Name(void)
{
  BSTR Name = 0;
  OLECHECK(this->get_Name((BSTR*)&Name));
  return Name;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_PictureAlignment(Msforms_97::fmPictureAlignment PictureAlignment/*[in]*/)
{
  return (*this)->set_PictureAlignment(PictureAlignment);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_PictureAlignment(Msforms_97::fmPictureAlignment* PictureAlignment/*[out,retval]*/)
{
  return (*this)->get_PictureAlignment(PictureAlignment);
}

template <class T> Msforms_97::fmPictureAlignment __fastcall
TCOMIPageT<T>::get_PictureAlignment(void)
{
  Msforms_97::fmPictureAlignment PictureAlignment;
  OLECHECK(this->get_PictureAlignment((Msforms_97::fmPictureAlignment*)&PictureAlignment));
  return PictureAlignment;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_Picture(IPictureDisp** Picture/*[in]*/)
{
  return (*this)->set_Picture(Picture);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_Picture(IPictureDisp* Picture/*[in]*/)
{
  return (*this)->set_Picture(IPictureDisp**)Picture);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::_set_Picture(IPictureDisp** Picture/*[in]*/)
{
  return (*this)->_set_Picture(Picture);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::_set_Picture(IPictureDisp* Picture/*[in]*/)
{
  return (*this)->_set_Picture(IPictureDisp**)Picture);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_Picture(IPictureDisp*** Picture/*[out,retval]*/)
{
  return (*this)->get_Picture(Picture);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_Picture(IPictureDisp** Picture/*[out,retval]*/)
{
  return (*this)->get_Picture(IPictureDisp***)Picture);
}

template <class T> IPictureDisp* __fastcall
TCOMIPageT<T>::get_Picture(void)
{
  IPictureDisp** Picture;
  OLECHECK(this->get_Picture((IPictureDisp***)&Picture));
  return (IPictureDisp*)Picture;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_PictureSizeMode(Msforms_97::fmPictureSizeMode PictureSizeMode/*[in]*/)
{
  return (*this)->set_PictureSizeMode(PictureSizeMode);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_PictureSizeMode(Msforms_97::fmPictureSizeMode* PictureSizeMode/*[out,retval]*/)
{
  return (*this)->get_PictureSizeMode(PictureSizeMode);
}

template <class T> Msforms_97::fmPictureSizeMode __fastcall
TCOMIPageT<T>::get_PictureSizeMode(void)
{
  Msforms_97::fmPictureSizeMode PictureSizeMode;
  OLECHECK(this->get_PictureSizeMode((Msforms_97::fmPictureSizeMode*)&PictureSizeMode));
  return PictureSizeMode;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_PictureTiling(VARIANT_BOOL PictureTiling/*[in]*/)
{
  return (*this)->set_PictureTiling(PictureTiling);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_PictureTiling(TOLEBOOL PictureTiling/*[in]*/)
{
  return (*this)->set_PictureTiling(VARIANT_BOOL)PictureTiling);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_PictureTiling(VARIANT_BOOL* PictureTiling/*[out,retval]*/)
{
  return (*this)->get_PictureTiling(PictureTiling);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_PictureTiling(TOLEBOOL* PictureTiling/*[out,retval]*/)
{
  return (*this)->get_PictureTiling(VARIANT_BOOL*)PictureTiling);
}

template <class T> TOLEBOOL __fastcall
TCOMIPageT<T>::get_PictureTiling(void)
{
  VARIANT_BOOL PictureTiling;
  OLECHECK(this->get_PictureTiling((VARIANT_BOOL*)&PictureTiling));
  return (TOLEBOOL)PictureTiling;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_ScrollBars(Msforms_97::fmScrollBars ScrollBars/*[in]*/)
{
  return (*this)->set_ScrollBars(ScrollBars);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_ScrollBars(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/)
{
  return (*this)->get_ScrollBars(ScrollBars);
}

template <class T> Msforms_97::fmScrollBars __fastcall
TCOMIPageT<T>::get_ScrollBars(void)
{
  Msforms_97::fmScrollBars ScrollBars;
  OLECHECK(this->get_ScrollBars((Msforms_97::fmScrollBars*)&ScrollBars));
  return ScrollBars;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::_SetScrollHeight(long ScrollHeight/*[in]*/)
{
  return (*this)->_SetScrollHeight(ScrollHeight);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::_GetScrollHeight(long* ScrollHeight/*[out]*/)
{
  return (*this)->_GetScrollHeight(ScrollHeight);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_ScrollHeight(float ScrollHeight/*[in]*/)
{
  return (*this)->set_ScrollHeight(ScrollHeight);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_ScrollHeight(float* ScrollHeight/*[out,retval]*/)
{
  return (*this)->get_ScrollHeight(ScrollHeight);
}

template <class T> float __fastcall
TCOMIPageT<T>::get_ScrollHeight(void)
{
  float ScrollHeight;
  OLECHECK(this->get_ScrollHeight((float*)&ScrollHeight));
  return ScrollHeight;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::_SetScrollLeft(long ScrollLeft/*[in]*/)
{
  return (*this)->_SetScrollLeft(ScrollLeft);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::_GetScrollLeft(long* ScrollLeft/*[out]*/)
{
  return (*this)->_GetScrollLeft(ScrollLeft);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_ScrollLeft(float ScrollLeft/*[in]*/)
{
  return (*this)->set_ScrollLeft(ScrollLeft);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_ScrollLeft(float* ScrollLeft/*[out,retval]*/)
{
  return (*this)->get_ScrollLeft(ScrollLeft);
}

template <class T> float __fastcall
TCOMIPageT<T>::get_ScrollLeft(void)
{
  float ScrollLeft;
  OLECHECK(this->get_ScrollLeft((float*)&ScrollLeft));
  return ScrollLeft;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::_SetScrollTop(long ScrollTop/*[in]*/)
{
  return (*this)->_SetScrollTop(ScrollTop);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::_GetScrollTop(long* ScrollTop/*[out]*/)
{
  return (*this)->_GetScrollTop(ScrollTop);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_ScrollTop(float ScrollTop/*[in]*/)
{
  return (*this)->set_ScrollTop(ScrollTop);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_ScrollTop(float* ScrollTop/*[out,retval]*/)
{
  return (*this)->get_ScrollTop(ScrollTop);
}

template <class T> float __fastcall
TCOMIPageT<T>::get_ScrollTop(void)
{
  float ScrollTop;
  OLECHECK(this->get_ScrollTop((float*)&ScrollTop));
  return ScrollTop;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::_SetScrollWidth(long ScrollWidth/*[in]*/)
{
  return (*this)->_SetScrollWidth(ScrollWidth);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::_GetScrollWidth(long* ScrollWidth/*[out]*/)
{
  return (*this)->_GetScrollWidth(ScrollWidth);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_ScrollWidth(float ScrollWidth/*[in]*/)
{
  return (*this)->set_ScrollWidth(ScrollWidth);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_ScrollWidth(float* ScrollWidth/*[out,retval]*/)
{
  return (*this)->get_ScrollWidth(ScrollWidth);
}

template <class T> float __fastcall
TCOMIPageT<T>::get_ScrollWidth(void)
{
  float ScrollWidth;
  OLECHECK(this->get_ScrollWidth((float*)&ScrollWidth));
  return ScrollWidth;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_Tag(BSTR Tag/*[in]*/)
{
  return (*this)->set_Tag(Tag);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_Tag(BSTR* Tag/*[out,retval]*/)
{
  return (*this)->get_Tag(Tag);
}

template <class T> BSTR __fastcall
TCOMIPageT<T>::get_Tag(void)
{
  BSTR Tag = 0;
  OLECHECK(this->get_Tag((BSTR*)&Tag));
  return Tag;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_TransitionEffect(Msforms_97::fmTransitionEffect TransitionEffect/*[in]*/)
{
  return (*this)->set_TransitionEffect(TransitionEffect);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_TransitionEffect(Msforms_97::fmTransitionEffect* TransitionEffect/*[out,retval]*/)
{
  return (*this)->get_TransitionEffect(TransitionEffect);
}

template <class T> Msforms_97::fmTransitionEffect __fastcall
TCOMIPageT<T>::get_TransitionEffect(void)
{
  Msforms_97::fmTransitionEffect TransitionEffect;
  OLECHECK(this->get_TransitionEffect((Msforms_97::fmTransitionEffect*)&TransitionEffect));
  return TransitionEffect;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_TransitionPeriod(long TransitionPeriod/*[in]*/)
{
  return (*this)->set_TransitionPeriod(TransitionPeriod);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_TransitionPeriod(long* TransitionPeriod/*[out,retval]*/)
{
  return (*this)->get_TransitionPeriod(TransitionPeriod);
}

template <class T> long __fastcall
TCOMIPageT<T>::get_TransitionPeriod(void)
{
  long TransitionPeriod;
  OLECHECK(this->get_TransitionPeriod((long*)&TransitionPeriod));
  return TransitionPeriod;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide side/*[in]*/)
{
  return (*this)->set_VerticalScrollBarSide(side);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide* side/*[out,retval]*/)
{
  return (*this)->get_VerticalScrollBarSide(side);
}

template <class T> Msforms_97::fmVerticalScrollBarSide __fastcall
TCOMIPageT<T>::get_VerticalScrollBarSide(void)
{
  Msforms_97::fmVerticalScrollBarSide side;
  OLECHECK(this->get_VerticalScrollBarSide((Msforms_97::fmVerticalScrollBarSide*)&side));
  return side;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_Visible(VARIANT_BOOL fVisible/*[in]*/)
{
  return (*this)->set_Visible(fVisible);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_Visible(TOLEBOOL fVisible/*[in]*/)
{
  return (*this)->set_Visible(VARIANT_BOOL)fVisible);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_Visible(VARIANT_BOOL* fVisible/*[out,retval]*/)
{
  return (*this)->get_Visible(fVisible);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_Visible(TOLEBOOL* fVisible/*[out,retval]*/)
{
  return (*this)->get_Visible(VARIANT_BOOL*)fVisible);
}

template <class T> TOLEBOOL __fastcall
TCOMIPageT<T>::get_Visible(void)
{
  VARIANT_BOOL fVisible;
  OLECHECK(this->get_Visible((VARIANT_BOOL*)&fVisible));
  return (TOLEBOOL)fVisible;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_Zoom(short Zoom/*[in]*/)
{
  return (*this)->set_Zoom(Zoom);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_Zoom(short* Zoom/*[out,retval]*/)
{
  return (*this)->get_Zoom(Zoom);
}

template <class T> short __fastcall
TCOMIPageT<T>::get_Zoom(void)
{
  short Zoom;
  OLECHECK(this->get_Zoom((short*)&Zoom));
  return Zoom;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_DesignMode(Msforms_97::fmMode DesignMode/*[in]*/)
{
  return (*this)->set_DesignMode(DesignMode);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_DesignMode(Msforms_97::fmMode* DesignMode/*[out,retval]*/)
{
  return (*this)->get_DesignMode(DesignMode);
}

template <class T> Msforms_97::fmMode __fastcall
TCOMIPageT<T>::get_DesignMode(void)
{
  Msforms_97::fmMode DesignMode;
  OLECHECK(this->get_DesignMode((Msforms_97::fmMode*)&DesignMode));
  return DesignMode;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_ShowToolbox(Msforms_97::fmMode ShowToolbox/*[in]*/)
{
  return (*this)->set_ShowToolbox(ShowToolbox);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_ShowToolbox(Msforms_97::fmMode* ShowToolbox/*[out,retval]*/)
{
  return (*this)->get_ShowToolbox(ShowToolbox);
}

template <class T> Msforms_97::fmMode __fastcall
TCOMIPageT<T>::get_ShowToolbox(void)
{
  Msforms_97::fmMode ShowToolbox;
  OLECHECK(this->get_ShowToolbox((Msforms_97::fmMode*)&ShowToolbox));
  return ShowToolbox;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_ShowGridDots(Msforms_97::fmMode ShowGridDots/*[in]*/)
{
  return (*this)->set_ShowGridDots(ShowGridDots);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_ShowGridDots(Msforms_97::fmMode* ShowGridDots/*[out,retval]*/)
{
  return (*this)->get_ShowGridDots(ShowGridDots);
}

template <class T> Msforms_97::fmMode __fastcall
TCOMIPageT<T>::get_ShowGridDots(void)
{
  Msforms_97::fmMode ShowGridDots;
  OLECHECK(this->get_ShowGridDots((Msforms_97::fmMode*)&ShowGridDots));
  return ShowGridDots;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_SnapToGrid(Msforms_97::fmMode SnapToGrid/*[in]*/)
{
  return (*this)->set_SnapToGrid(SnapToGrid);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_SnapToGrid(Msforms_97::fmMode* SnapToGrid/*[out,retval]*/)
{
  return (*this)->get_SnapToGrid(SnapToGrid);
}

template <class T> Msforms_97::fmMode __fastcall
TCOMIPageT<T>::get_SnapToGrid(void)
{
  Msforms_97::fmMode SnapToGrid;
  OLECHECK(this->get_SnapToGrid((Msforms_97::fmMode*)&SnapToGrid));
  return SnapToGrid;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_GridX(float GridX/*[in]*/)
{
  return (*this)->set_GridX(GridX);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_GridX(float* GridX/*[out,retval]*/)
{
  return (*this)->get_GridX(GridX);
}

template <class T> float __fastcall
TCOMIPageT<T>::get_GridX(void)
{
  float GridX;
  OLECHECK(this->get_GridX((float*)&GridX));
  return GridX;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::_SetGridX(long GridX/*[in]*/)
{
  return (*this)->_SetGridX(GridX);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::_GetGridX(long* GridX/*[out]*/)
{
  return (*this)->_GetGridX(GridX);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_GridY(float GridY/*[in]*/)
{
  return (*this)->set_GridY(GridY);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_GridY(float* GridY/*[out,retval]*/)
{
  return (*this)->get_GridY(GridY);
}

template <class T> float __fastcall
TCOMIPageT<T>::get_GridY(void)
{
  float GridY;
  OLECHECK(this->get_GridY((float*)&GridY));
  return GridY;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::_SetGridY(long GridY/*[in]*/)
{
  return (*this)->_SetGridY(GridY);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::_GetGridY(long* GridY/*[out]*/)
{
  return (*this)->_GetGridY(GridY);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::Copy(void)
{
  return (*this)->Copy();
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::Cut(void)
{
  return (*this)->Cut();
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::Paste(void)
{
  return (*this)->Paste();
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::RedoAction(void)
{
  return (*this)->RedoAction();
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::Repaint(void)
{
  return (*this)->Repaint();
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::Scroll(VARIANT xAction/*[in,opt]*/, VARIANT yAction/*[in,opt]*/)
{
  return (*this)->Scroll(xAction, yAction);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::SetDefaultTabOrder(void)
{
  return (*this)->SetDefaultTabOrder();
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::UndoAction(void)
{
  return (*this)->UndoAction();
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::set_Accelerator(BSTR Accelerator/*[in]*/)
{
  return (*this)->set_Accelerator(Accelerator);
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_Accelerator(BSTR* Accelerator/*[out,retval]*/)
{
  return (*this)->get_Accelerator(Accelerator);
}

template <class T> BSTR __fastcall
TCOMIPageT<T>::get_Accelerator(void)
{
  BSTR Accelerator = 0;
  OLECHECK(this->get_Accelerator((BSTR*)&Accelerator));
  return Accelerator;
}

template <class T> HRESULT __fastcall
TCOMIPageT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  return (*this)->get_Parent(Parent);
}

template <class T> LPDISPATCH __fastcall
TCOMIPageT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
  return Parent;
}

// *********************************************************************//
// DispIntf:  IPage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5CEF5613-713D-11CE-80C9-00AA00611080}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_Controls(Msforms_97::Controls_** Controls/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Controls_**)Controls /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::Controls_* __fastcall
IPageDispT<T>::get_Controls(void)
{
  Msforms_97::Controls_* Controls;
  this->get_Controls((Msforms_97::Controls_**)&Controls);
  return Controls;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_Selected(Msforms_97::Controls_** Selected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(270));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Controls_**)Selected /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::Controls_* __fastcall
IPageDispT<T>::get_Selected(void)
{
  Msforms_97::Controls_* Selected;
  this->get_Selected((Msforms_97::Controls_**)&Selected);
  return Selected;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_ActiveControl(Msforms_97::Control** ActiveControl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveControl"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Control**)ActiveControl /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::Control* __fastcall
IPageDispT<T>::get_ActiveControl(void)
{
  Msforms_97::Control* ActiveControl;
  this->get_ActiveControl((Msforms_97::Control**)&ActiveControl);
  return ActiveControl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_CanPaste(VARIANT_BOOL* CanPaste/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanPaste"), DISPID(257));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CanPaste /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPageDispT<T>::get_CanPaste(void)
{
  VARIANT_BOOL CanPaste;
  this->get_CanPaste((VARIANT_BOOL*)&CanPaste);
  return CanPaste;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_CanRedo(VARIANT_BOOL* CanRedo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanRedo"), DISPID(258));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CanRedo /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPageDispT<T>::get_CanRedo(void)
{
  VARIANT_BOOL CanRedo;
  this->get_CanRedo((VARIANT_BOOL*)&CanRedo);
  return CanRedo;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_CanUndo(VARIANT_BOOL* CanUndo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanUndo"), DISPID(259));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CanUndo /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPageDispT<T>::get_CanUndo(void)
{
  VARIANT_BOOL CanUndo;
  this->get_CanUndo((VARIANT_BOOL*)&CanUndo);
  return CanUndo;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_Cycle(Msforms_97::fmCycle Cycle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cycle"), DISPID(260));
  TAutoArgs<1> _args;
  _args[1] = (int)Cycle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_Cycle(Msforms_97::fmCycle* Cycle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cycle"), DISPID(260));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Cycle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmCycle __fastcall
IPageDispT<T>::get_Cycle(void)
{
  Msforms_97::fmCycle Cycle;
  this->get_Cycle((Msforms_97::fmCycle*)&Cycle);
  return Cycle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPageDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_ControlTipText(BSTR tooltip/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(-2147418043));
  TAutoArgs<1> _args;
  _args[1] = tooltip /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_ControlTipText(BSTR* tooltip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(-2147418043));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(tooltip /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPageDispT<T>::get_ControlTipText(void)
{
  BSTR tooltip;
  this->get_ControlTipText((BSTR*)&tooltip);
  return tooltip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_Enabled(VARIANT_BOOL fEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = fEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPageDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL fEnabled;
  this->get_Enabled((VARIANT_BOOL*)&fEnabled);
  return fEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_Index(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(-2147356416));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_Index(long* Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(-2147356416));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Index /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPageDispT<T>::get_Index(void)
{
  long Index;
  this->get_Index((long*)&Index);
  return Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::_GetInsideHeight(long* InsideHeight/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetInsideHeight"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<1> _args;
  _args[1] = InsideHeight /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_InsideHeight(float* InsideHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsideHeight"), DISPID(262));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(InsideHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IPageDispT<T>::get_InsideHeight(void)
{
  float InsideHeight;
  this->get_InsideHeight((float*)&InsideHeight);
  return InsideHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::_GetInsideWidth(long* InsideWidth/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetInsideWidth"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<1> _args;
  _args[1] = InsideWidth /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_InsideWidth(float* InsideWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsideWidth"), DISPID(263));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(InsideWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IPageDispT<T>::get_InsideWidth(void)
{
  float InsideWidth;
  this->get_InsideWidth((float*)&InsideWidth);
  return InsideWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_KeepScrollBarsVisible(Msforms_97::fmScrollBars ScrollBars/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeepScrollBarsVisible"), DISPID(264));
  TAutoArgs<1> _args;
  _args[1] = (int)ScrollBars /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_KeepScrollBarsVisible(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeepScrollBarsVisible"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ScrollBars /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmScrollBars __fastcall
IPageDispT<T>::get_KeepScrollBarsVisible(void)
{
  Msforms_97::fmScrollBars ScrollBars;
  this->get_KeepScrollBarsVisible((Msforms_97::fmScrollBars*)&ScrollBars);
  return ScrollBars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(-2147418112));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(-2147418112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPageDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_PictureAlignment(Msforms_97::fmPictureAlignment PictureAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureAlignment"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = (int)PictureAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_PictureAlignment(Msforms_97::fmPictureAlignment* PictureAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureAlignment"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PictureAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmPictureAlignment __fastcall
IPageDispT<T>::get_PictureAlignment(void)
{
  Msforms_97::fmPictureAlignment PictureAlignment;
  this->get_PictureAlignment((Msforms_97::fmPictureAlignment*)&PictureAlignment);
  return PictureAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_Picture(IPictureDisp** Picture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)Picture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::_set_Picture(IPictureDisp** Picture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)Picture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_Picture(IPictureDisp*** Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(-523));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp***)Picture /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp** __fastcall
IPageDispT<T>::get_Picture(void)
{
  IPictureDisp** Picture;
  this->get_Picture((IPictureDisp***)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_PictureSizeMode(Msforms_97::fmPictureSizeMode PictureSizeMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureSizeMode"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = (int)PictureSizeMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_PictureSizeMode(Msforms_97::fmPictureSizeMode* PictureSizeMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureSizeMode"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PictureSizeMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmPictureSizeMode __fastcall
IPageDispT<T>::get_PictureSizeMode(void)
{
  Msforms_97::fmPictureSizeMode PictureSizeMode;
  this->get_PictureSizeMode((Msforms_97::fmPictureSizeMode*)&PictureSizeMode);
  return PictureSizeMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_PictureTiling(VARIANT_BOOL PictureTiling/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureTiling"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = PictureTiling /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_PictureTiling(VARIANT_BOOL* PictureTiling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureTiling"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PictureTiling /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPageDispT<T>::get_PictureTiling(void)
{
  VARIANT_BOOL PictureTiling;
  this->get_PictureTiling((VARIANT_BOOL*)&PictureTiling);
  return PictureTiling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_ScrollBars(Msforms_97::fmScrollBars ScrollBars/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollBars"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = (int)ScrollBars /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_ScrollBars(Msforms_97::fmScrollBars* ScrollBars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollBars"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ScrollBars /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmScrollBars __fastcall
IPageDispT<T>::get_ScrollBars(void)
{
  Msforms_97::fmScrollBars ScrollBars;
  this->get_ScrollBars((Msforms_97::fmScrollBars*)&ScrollBars);
  return ScrollBars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::_SetScrollHeight(long ScrollHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetScrollHeight"), DISPID(DISPID_UNKNOWN/*[1610743843]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollHeight /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::_GetScrollHeight(long* ScrollHeight/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetScrollHeight"), DISPID(DISPID_UNKNOWN/*[1610743844]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollHeight /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_ScrollHeight(float ScrollHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollHeight"), DISPID(266));
  TAutoArgs<1> _args;
  _args[1] = ScrollHeight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_ScrollHeight(float* ScrollHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollHeight"), DISPID(266));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ScrollHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IPageDispT<T>::get_ScrollHeight(void)
{
  float ScrollHeight;
  this->get_ScrollHeight((float*)&ScrollHeight);
  return ScrollHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::_SetScrollLeft(long ScrollLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetScrollLeft"), DISPID(DISPID_UNKNOWN/*[1610743847]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollLeft /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::_GetScrollLeft(long* ScrollLeft/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetScrollLeft"), DISPID(DISPID_UNKNOWN/*[1610743848]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollLeft /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_ScrollLeft(float ScrollLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollLeft"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = ScrollLeft /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_ScrollLeft(float* ScrollLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollLeft"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ScrollLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IPageDispT<T>::get_ScrollLeft(void)
{
  float ScrollLeft;
  this->get_ScrollLeft((float*)&ScrollLeft);
  return ScrollLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::_SetScrollTop(long ScrollTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetScrollTop"), DISPID(DISPID_UNKNOWN/*[1610743851]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollTop /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::_GetScrollTop(long* ScrollTop/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetScrollTop"), DISPID(DISPID_UNKNOWN/*[1610743852]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollTop /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_ScrollTop(float ScrollTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollTop"), DISPID(268));
  TAutoArgs<1> _args;
  _args[1] = ScrollTop /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_ScrollTop(float* ScrollTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollTop"), DISPID(268));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ScrollTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IPageDispT<T>::get_ScrollTop(void)
{
  float ScrollTop;
  this->get_ScrollTop((float*)&ScrollTop);
  return ScrollTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::_SetScrollWidth(long ScrollWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetScrollWidth"), DISPID(DISPID_UNKNOWN/*[1610743855]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollWidth /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::_GetScrollWidth(long* ScrollWidth/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetScrollWidth"), DISPID(DISPID_UNKNOWN/*[1610743856]*/));
  TAutoArgs<1> _args;
  _args[1] = ScrollWidth /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_ScrollWidth(float ScrollWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollWidth"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = ScrollWidth /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_ScrollWidth(float* ScrollWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollWidth"), DISPID(269));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ScrollWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IPageDispT<T>::get_ScrollWidth(void)
{
  float ScrollWidth;
  this->get_ScrollWidth((float*)&ScrollWidth);
  return ScrollWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_Tag(BSTR Tag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(-2147418101));
  TAutoArgs<1> _args;
  _args[1] = Tag /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_Tag(BSTR* Tag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(-2147418101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Tag /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPageDispT<T>::get_Tag(void)
{
  BSTR Tag;
  this->get_Tag((BSTR*)&Tag);
  return Tag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_TransitionEffect(Msforms_97::fmTransitionEffect TransitionEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransitionEffect"), DISPID(-2147356415));
  TAutoArgs<1> _args;
  _args[1] = (int)TransitionEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_TransitionEffect(Msforms_97::fmTransitionEffect* TransitionEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransitionEffect"), DISPID(-2147356415));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TransitionEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmTransitionEffect __fastcall
IPageDispT<T>::get_TransitionEffect(void)
{
  Msforms_97::fmTransitionEffect TransitionEffect;
  this->get_TransitionEffect((Msforms_97::fmTransitionEffect*)&TransitionEffect);
  return TransitionEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_TransitionPeriod(long TransitionPeriod/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransitionPeriod"), DISPID(-2147356414));
  TAutoArgs<1> _args;
  _args[1] = TransitionPeriod /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_TransitionPeriod(long* TransitionPeriod/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransitionPeriod"), DISPID(-2147356414));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TransitionPeriod /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPageDispT<T>::get_TransitionPeriod(void)
{
  long TransitionPeriod;
  this->get_TransitionPeriod((long*)&TransitionPeriod);
  return TransitionPeriod;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide side/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalScrollBarSide"), DISPID(271));
  TAutoArgs<1> _args;
  _args[1] = (int)side /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_VerticalScrollBarSide(Msforms_97::fmVerticalScrollBarSide* side/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalScrollBarSide"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)side /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmVerticalScrollBarSide __fastcall
IPageDispT<T>::get_VerticalScrollBarSide(void)
{
  Msforms_97::fmVerticalScrollBarSide side;
  this->get_VerticalScrollBarSide((Msforms_97::fmVerticalScrollBarSide*)&side);
  return side;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_Visible(VARIANT_BOOL fVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(-2147418105));
  TAutoArgs<1> _args;
  _args[1] = fVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_Visible(VARIANT_BOOL* fVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(-2147418105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPageDispT<T>::get_Visible(void)
{
  VARIANT_BOOL fVisible;
  this->get_Visible((VARIANT_BOOL*)&fVisible);
  return fVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_Zoom(short Zoom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Zoom"), DISPID(272));
  TAutoArgs<1> _args;
  _args[1] = Zoom /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_Zoom(short* Zoom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Zoom"), DISPID(272));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Zoom /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IPageDispT<T>::get_Zoom(void)
{
  short Zoom;
  this->get_Zoom((short*)&Zoom);
  return Zoom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_DesignMode(Msforms_97::fmMode DesignMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesignMode"), DISPID(384));
  TAutoArgs<1> _args;
  _args[1] = (int)DesignMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_DesignMode(Msforms_97::fmMode* DesignMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesignMode"), DISPID(384));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DesignMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMode __fastcall
IPageDispT<T>::get_DesignMode(void)
{
  Msforms_97::fmMode DesignMode;
  this->get_DesignMode((Msforms_97::fmMode*)&DesignMode);
  return DesignMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_ShowToolbox(Msforms_97::fmMode ShowToolbox/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowToolbox"), DISPID(385));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowToolbox /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_ShowToolbox(Msforms_97::fmMode* ShowToolbox/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowToolbox"), DISPID(385));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowToolbox /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMode __fastcall
IPageDispT<T>::get_ShowToolbox(void)
{
  Msforms_97::fmMode ShowToolbox;
  this->get_ShowToolbox((Msforms_97::fmMode*)&ShowToolbox);
  return ShowToolbox;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_ShowGridDots(Msforms_97::fmMode ShowGridDots/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowGridDots"), DISPID(386));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowGridDots /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_ShowGridDots(Msforms_97::fmMode* ShowGridDots/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowGridDots"), DISPID(386));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowGridDots /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMode __fastcall
IPageDispT<T>::get_ShowGridDots(void)
{
  Msforms_97::fmMode ShowGridDots;
  this->get_ShowGridDots((Msforms_97::fmMode*)&ShowGridDots);
  return ShowGridDots;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_SnapToGrid(Msforms_97::fmMode SnapToGrid/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SnapToGrid"), DISPID(387));
  TAutoArgs<1> _args;
  _args[1] = (int)SnapToGrid /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_SnapToGrid(Msforms_97::fmMode* SnapToGrid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SnapToGrid"), DISPID(387));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SnapToGrid /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmMode __fastcall
IPageDispT<T>::get_SnapToGrid(void)
{
  Msforms_97::fmMode SnapToGrid;
  this->get_SnapToGrid((Msforms_97::fmMode*)&SnapToGrid);
  return SnapToGrid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_GridX(float GridX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridX"), DISPID(388));
  TAutoArgs<1> _args;
  _args[1] = GridX /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_GridX(float* GridX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridX"), DISPID(388));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GridX /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IPageDispT<T>::get_GridX(void)
{
  float GridX;
  this->get_GridX((float*)&GridX);
  return GridX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::_SetGridX(long GridX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetGridX"), DISPID(DISPID_UNKNOWN/*[1610743881]*/));
  TAutoArgs<1> _args;
  _args[1] = GridX /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::_GetGridX(long* GridX/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetGridX"), DISPID(DISPID_UNKNOWN/*[1610743882]*/));
  TAutoArgs<1> _args;
  _args[1] = GridX /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_GridY(float GridY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridY"), DISPID(389));
  TAutoArgs<1> _args;
  _args[1] = GridY /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_GridY(float* GridY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridY"), DISPID(389));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GridY /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IPageDispT<T>::get_GridY(void)
{
  float GridY;
  this->get_GridY((float*)&GridY);
  return GridY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::_SetGridY(long GridY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetGridY"), DISPID(DISPID_UNKNOWN/*[1610743885]*/));
  TAutoArgs<1> _args;
  _args[1] = GridY /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::_GetGridY(long* GridY/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetGridY"), DISPID(DISPID_UNKNOWN/*[1610743886]*/));
  TAutoArgs<1> _args;
  _args[1] = GridY /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::Copy()
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(512));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::Cut()
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(513));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::Paste()
{
  _TDispID _dispid(*this, OLETEXT("Paste"), DISPID(514));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::RedoAction()
{
  _TDispID _dispid(*this, OLETEXT("RedoAction"), DISPID(515));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::Repaint()
{
  _TDispID _dispid(*this, OLETEXT("Repaint"), DISPID(516));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::Scroll(VARIANT xAction/*[in,opt]*/, VARIANT yAction/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scroll"), DISPID(517));
  TAutoArgs<2> _args;
  _args[1] = xAction /*[VT_VARIANT:0]*/;
  _args[2] = yAction /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::SetDefaultTabOrder()
{
  _TDispID _dispid(*this, OLETEXT("SetDefaultTabOrder"), DISPID(518));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::UndoAction()
{
  _TDispID _dispid(*this, OLETEXT("UndoAction"), DISPID(519));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::set_Accelerator(BSTR Accelerator/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accelerator"), DISPID(-543));
  TAutoArgs<1> _args;
  _args[1] = Accelerator /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_Accelerator(BSTR* Accelerator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accelerator"), DISPID(-543));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Accelerator /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPageDispT<T>::get_Accelerator(void)
{
  BSTR Accelerator;
  this->get_Accelerator((BSTR*)&Accelerator);
  return Accelerator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPageDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IPageDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

// *********************************************************************//
// DispIntf:  Pages
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {92E11A03-7358-11CE-80CB-00AA00611080}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PagesDispT<T>::get_Count(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(60));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PagesDispT<T>::get_Count(void)
{
  long plCount;
  this->get_Count((long*)&plCount);
  return plCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PagesDispT<T>::get__NewEnum(LPUNKNOWN* ppEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PagesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppEnum;
  this->get__NewEnum((LPUNKNOWN*)&ppEnum);
  return ppEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PagesDispT<T>::Item(VARIANT varg/*[in]*/, LPDISPATCH* ppDisap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = varg /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppDisap /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PagesDispT<T>::Item(VARIANT varg/*[in]*/)
{
  LPDISPATCH ppDisap;
  this->Item(varg, (LPDISPATCH*)&ppDisap);
  return ppDisap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PagesDispT<T>::Enum(LPUNKNOWN* ppEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enum"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppEnum /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PagesDispT<T>::Enum(void)
{
  LPUNKNOWN ppEnum;
  this->Enum((LPUNKNOWN*)&ppEnum);
  return ppEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PagesDispT<T>::Add(VARIANT bstrName/*[in,opt]*/, VARIANT bstrCaption/*[in,opt]*/, 
                   VARIANT lIndex/*[in,opt]*/, Msforms_97::Page** ppPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(66));
  TAutoArgs<3> _args;
  _args[1] = bstrName /*[VT_VARIANT:0]*/;
  _args[2] = bstrCaption /*[VT_VARIANT:0]*/;
  _args[3] = lIndex /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Page**)ppPage /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msforms_97::Page* __fastcall
PagesDispT<T>::Add(VARIANT bstrName/*[in,opt]*/, VARIANT bstrCaption/*[in,opt]*/, 
                   VARIANT lIndex/*[in,opt]*/)
{
  Msforms_97::Page* ppPage;
  this->Add(bstrName, bstrCaption, lIndex, (Msforms_97::Page**)&ppPage);
  return ppPage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PagesDispT<T>::_AddCtrl(long* clsid/*[in]*/, BSTR bstrName/*[in]*/, BSTR bstrCaption/*[in]*/, 
                        Msforms_97::Page** ppPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_AddCtrl"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<3> _args;
  _args[1] = clsid /*[VT_I4:1]*/;
  _args[2] = bstrName /*[VT_BSTR:0]*/;
  _args[3] = bstrCaption /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Page**)ppPage /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msforms_97::Page* __fastcall
PagesDispT<T>::_AddCtrl(long* clsid/*[in]*/, BSTR bstrName/*[in]*/, BSTR bstrCaption/*[in]*/)
{
  Msforms_97::Page* ppPage;
  this->_AddCtrl(clsid, bstrName, bstrCaption, (Msforms_97::Page**)&ppPage);
  return ppPage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PagesDispT<T>::_InsertCtrl(long* clsid/*[in]*/, BSTR bstrName/*[in]*/, BSTR bstrCaption/*[in]*/, 
                           long lIndex/*[in]*/, Msforms_97::Page** ppCtrl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_InsertCtrl"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<4> _args;
  _args[1] = clsid /*[VT_I4:1]*/;
  _args[2] = bstrName /*[VT_BSTR:0]*/;
  _args[3] = bstrCaption /*[VT_BSTR:0]*/;
  _args[4] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Page**)ppCtrl /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msforms_97::Page* __fastcall
PagesDispT<T>::_InsertCtrl(long* clsid/*[in]*/, BSTR bstrName/*[in]*/, BSTR bstrCaption/*[in]*/, 
                           long lIndex/*[in]*/)
{
  Msforms_97::Page* ppCtrl;
  this->_InsertCtrl(clsid, bstrName, bstrCaption, lIndex, (Msforms_97::Page**)&ppCtrl);
  return ppCtrl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PagesDispT<T>::_GetItemByIndex(long lIndex/*[in]*/, Msforms_97::Control** ppCtrl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetItemByIndex"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<1> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Control**)ppCtrl /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msforms_97::Control* __fastcall
PagesDispT<T>::_GetItemByIndex(long lIndex/*[in]*/)
{
  Msforms_97::Control* ppCtrl;
  this->_GetItemByIndex(lIndex, (Msforms_97::Control**)&ppCtrl);
  return ppCtrl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PagesDispT<T>::_GetItemByName(BSTR pstrName/*[in]*/, Msforms_97::Control** ppCtrl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetItemByName"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<1> _args;
  _args[1] = pstrName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Control**)ppCtrl /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msforms_97::Control* __fastcall
PagesDispT<T>::_GetItemByName(BSTR pstrName/*[in]*/)
{
  Msforms_97::Control* ppCtrl;
  this->_GetItemByName(pstrName, (Msforms_97::Control**)&ppCtrl);
  return ppCtrl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PagesDispT<T>::Remove(VARIANT varg/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(67));
  TAutoArgs<1> _args;
  _args[1] = varg /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PagesDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(62));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIMultiPage
// Interface: IMultiPage
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_BackColor(Msforms_97::OLE_COLOR color/*[in]*/)
{
  return (*this)->set_BackColor(color);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_BackColor(Msforms_97::OLE_COLOR* color/*[out,retval]*/)
{
  return (*this)->get_BackColor(color);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIMultiPageT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR color;
  OLECHECK(this->get_BackColor((Msforms_97::OLE_COLOR*)&color));
  return color;
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_ForeColor(Msforms_97::OLE_COLOR color/*[in]*/)
{
  return (*this)->set_ForeColor(color);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_ForeColor(Msforms_97::OLE_COLOR* color/*[out,retval]*/)
{
  return (*this)->get_ForeColor(color);
}

template <class T> Msforms_97::OLE_COLOR __fastcall
TCOMIMultiPageT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR color;
  OLECHECK(this->get_ForeColor((Msforms_97::OLE_COLOR*)&color));
  return color;
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  return (*this)->set__Font_Reserved(Param1);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set__Font_Reserved(IFontDisp* Param1/*[in]*/)
{
  return (*this)->set__Font_Reserved(IFontDisp**)Param1);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  return (*this)->_set_Font(Font);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::_set_Font(IFontDisp* Font/*[in]*/)
{
  return (*this)->_set_Font(IFontDisp**)Font);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  return (*this)->get_Font(Font);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_Font(IFontDisp** Font/*[out,retval]*/)
{
  return (*this)->get_Font(IFontDisp***)Font);
}

template <class T> IFontDisp* __fastcall
TCOMIMultiPageT<T>::get_Font(void)
{
  IFontDisp** Font;
  OLECHECK(this->get_Font((IFontDisp***)&Font));
  return (IFontDisp*)Font;
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  return (*this)->set_FontName(FontName);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  return (*this)->get_FontName(FontName);
}

template <class T> BSTR __fastcall
TCOMIMultiPageT<T>::get_FontName(void)
{
  BSTR FontName = 0;
  OLECHECK(this->get_FontName((BSTR*)&FontName));
  return FontName;
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_FontBold(VARIANT_BOOL fBold/*[in]*/)
{
  return (*this)->set_FontBold(fBold);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_FontBold(TOLEBOOL fBold/*[in]*/)
{
  return (*this)->set_FontBold(VARIANT_BOOL)fBold);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_FontBold(VARIANT_BOOL* fBold/*[out,retval]*/)
{
  return (*this)->get_FontBold(fBold);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_FontBold(TOLEBOOL* fBold/*[out,retval]*/)
{
  return (*this)->get_FontBold(VARIANT_BOOL*)fBold);
}

template <class T> TOLEBOOL __fastcall
TCOMIMultiPageT<T>::get_FontBold(void)
{
  VARIANT_BOOL fBold;
  OLECHECK(this->get_FontBold((VARIANT_BOOL*)&fBold));
  return (TOLEBOOL)fBold;
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_FontItalic(VARIANT_BOOL fItalic/*[in]*/)
{
  return (*this)->set_FontItalic(fItalic);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_FontItalic(TOLEBOOL fItalic/*[in]*/)
{
  return (*this)->set_FontItalic(VARIANT_BOOL)fItalic);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_FontItalic(VARIANT_BOOL* fItalic/*[out,retval]*/)
{
  return (*this)->get_FontItalic(fItalic);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_FontItalic(TOLEBOOL* fItalic/*[out,retval]*/)
{
  return (*this)->get_FontItalic(VARIANT_BOOL*)fItalic);
}

template <class T> TOLEBOOL __fastcall
TCOMIMultiPageT<T>::get_FontItalic(void)
{
  VARIANT_BOOL fItalic;
  OLECHECK(this->get_FontItalic((VARIANT_BOOL*)&fItalic));
  return (TOLEBOOL)fItalic;
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_FontUnderline(VARIANT_BOOL fUnder/*[in]*/)
{
  return (*this)->set_FontUnderline(fUnder);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_FontUnderline(TOLEBOOL fUnder/*[in]*/)
{
  return (*this)->set_FontUnderline(VARIANT_BOOL)fUnder);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_FontUnderline(VARIANT_BOOL* fUnder/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(fUnder);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_FontUnderline(TOLEBOOL* fUnder/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(VARIANT_BOOL*)fUnder);
}

template <class T> TOLEBOOL __fastcall
TCOMIMultiPageT<T>::get_FontUnderline(void)
{
  VARIANT_BOOL fUnder;
  OLECHECK(this->get_FontUnderline((VARIANT_BOOL*)&fUnder));
  return (TOLEBOOL)fUnder;
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_FontStrikethru(VARIANT_BOOL fStrike/*[in]*/)
{
  return (*this)->set_FontStrikethru(fStrike);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_FontStrikethru(TOLEBOOL fStrike/*[in]*/)
{
  return (*this)->set_FontStrikethru(VARIANT_BOOL)fStrike);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_FontStrikethru(VARIANT_BOOL* fStrike/*[out,retval]*/)
{
  return (*this)->get_FontStrikethru(fStrike);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_FontStrikethru(TOLEBOOL* fStrike/*[out,retval]*/)
{
  return (*this)->get_FontStrikethru(VARIANT_BOOL*)fStrike);
}

template <class T> TOLEBOOL __fastcall
TCOMIMultiPageT<T>::get_FontStrikethru(void)
{
  VARIANT_BOOL fStrike;
  OLECHECK(this->get_FontStrikethru((VARIANT_BOOL*)&fStrike));
  return (TOLEBOOL)fStrike;
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_FontSize(CURRENCY Size/*[in]*/)
{
  return (*this)->set_FontSize(Size);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_FontSize(CURRENCY* Size/*[out,retval]*/)
{
  return (*this)->get_FontSize(Size);
}

template <class T> CURRENCY __fastcall
TCOMIMultiPageT<T>::get_FontSize(void)
{
  CURRENCY Size;
  OLECHECK(this->get_FontSize((CURRENCY*)&Size));
  return Size;
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_MultiRow(VARIANT_BOOL fMultiRow/*[in]*/)
{
  return (*this)->set_MultiRow(fMultiRow);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_MultiRow(TOLEBOOL fMultiRow/*[in]*/)
{
  return (*this)->set_MultiRow(VARIANT_BOOL)fMultiRow);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_MultiRow(VARIANT_BOOL* fMultiRow/*[out,retval]*/)
{
  return (*this)->get_MultiRow(fMultiRow);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_MultiRow(TOLEBOOL* fMultiRow/*[out,retval]*/)
{
  return (*this)->get_MultiRow(VARIANT_BOOL*)fMultiRow);
}

template <class T> TOLEBOOL __fastcall
TCOMIMultiPageT<T>::get_MultiRow(void)
{
  VARIANT_BOOL fMultiRow;
  OLECHECK(this->get_MultiRow((VARIANT_BOOL*)&fMultiRow));
  return (TOLEBOOL)fMultiRow;
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_Style(Msforms_97::fmTabStyle Style/*[in]*/)
{
  return (*this)->set_Style(Style);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_Style(Msforms_97::fmTabStyle* Style/*[out,retval]*/)
{
  return (*this)->get_Style(Style);
}

template <class T> Msforms_97::fmTabStyle __fastcall
TCOMIMultiPageT<T>::get_Style(void)
{
  Msforms_97::fmTabStyle Style;
  OLECHECK(this->get_Style((Msforms_97::fmTabStyle*)&Style));
  return Style;
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_TabOrientation(Msforms_97::fmTabOrientation Layout/*[in]*/)
{
  return (*this)->set_TabOrientation(Layout);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_TabOrientation(Msforms_97::fmTabOrientation* Layout/*[out,retval]*/)
{
  return (*this)->get_TabOrientation(Layout);
}

template <class T> Msforms_97::fmTabOrientation __fastcall
TCOMIMultiPageT<T>::get_TabOrientation(void)
{
  Msforms_97::fmTabOrientation Layout;
  OLECHECK(this->get_TabOrientation((Msforms_97::fmTabOrientation*)&Layout));
  return Layout;
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::_SetTabFixedWidth(long Width/*[in]*/)
{
  return (*this)->_SetTabFixedWidth(Width);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::_GetTabFixedWidth(long* Width/*[out]*/)
{
  return (*this)->_GetTabFixedWidth(Width);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::_SetTabFixedHeight(long Height/*[in]*/)
{
  return (*this)->_SetTabFixedHeight(Height);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::_GetTabFixedHeight(long* Height/*[out]*/)
{
  return (*this)->_GetTabFixedHeight(Height);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  return (*this)->set_Enabled(Enabled);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_Enabled(TOLEBOOL Enabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)Enabled);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(Enabled);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_Enabled(TOLEBOOL* Enabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)Enabled);
}

template <class T> TOLEBOOL __fastcall
TCOMIMultiPageT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Enabled));
  return (TOLEBOOL)Enabled;
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_SelectedItem(Msforms_97::Page** ppPage/*[out,retval]*/)
{
  return (*this)->get_SelectedItem(ppPage);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_SelectedItem(Msforms_97::PagePtr* ppPage/*[out,retval]*/)
{
  return (*this)->get_SelectedItem(Page**)ppPage);
}

template <class T> Msforms_97::PagePtr __fastcall
TCOMIMultiPageT<T>::get_SelectedItem(void)
{
  Msforms_97::Page* ppPage;
  OLECHECK(this->get_SelectedItem((Msforms_97::Page**)&ppPage));
  return (Msforms_97::PagePtr)ppPage;
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_Pages(Msforms_97::Pages** ppPages/*[out,retval]*/)
{
  return (*this)->get_Pages(ppPages);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_Pages(Msforms_97::PagesPtr* ppPages/*[out,retval]*/)
{
  return (*this)->get_Pages(Pages**)ppPages);
}

template <class T> Msforms_97::PagesPtr __fastcall
TCOMIMultiPageT<T>::get_Pages(void)
{
  Msforms_97::Pages* ppPages;
  OLECHECK(this->get_Pages((Msforms_97::Pages**)&ppPages));
  return (Msforms_97::PagesPtr)ppPages;
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_Value(long Index/*[in]*/)
{
  return (*this)->set_Value(Index);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_Value(long* Index/*[out,retval]*/)
{
  return (*this)->get_Value(Index);
}

template <class T> long __fastcall
TCOMIMultiPageT<T>::get_Value(void)
{
  long Index;
  OLECHECK(this->get_Value((long*)&Index));
  return Index;
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_TabFixedWidth(float Width/*[in]*/)
{
  return (*this)->set_TabFixedWidth(Width);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_TabFixedWidth(float* Width/*[out,retval]*/)
{
  return (*this)->get_TabFixedWidth(Width);
}

template <class T> float __fastcall
TCOMIMultiPageT<T>::get_TabFixedWidth(void)
{
  float Width;
  OLECHECK(this->get_TabFixedWidth((float*)&Width));
  return Width;
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_TabFixedHeight(float Height/*[in]*/)
{
  return (*this)->set_TabFixedHeight(Height);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_TabFixedHeight(float* Height/*[out,retval]*/)
{
  return (*this)->get_TabFixedHeight(Height);
}

template <class T> float __fastcall
TCOMIMultiPageT<T>::get_TabFixedHeight(void)
{
  float Height;
  OLECHECK(this->get_TabFixedHeight((float*)&Height));
  return Height;
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::set_FontWeight(short FontWeight/*[in]*/)
{
  return (*this)->set_FontWeight(FontWeight);
}

template <class T> HRESULT __fastcall
TCOMIMultiPageT<T>::get_FontWeight(short* FontWeight/*[out,retval]*/)
{
  return (*this)->get_FontWeight(FontWeight);
}

template <class T> short __fastcall
TCOMIMultiPageT<T>::get_FontWeight(void)
{
  short FontWeight;
  OLECHECK(this->get_FontWeight((short*)&FontWeight));
  return FontWeight;
}

// *********************************************************************//
// DispIntf:  IMultiPage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04598FC9-866C-11CF-AB7C-00AA00C08FCF}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::set_BackColor(Msforms_97::OLE_COLOR color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = color /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::get_BackColor(Msforms_97::OLE_COLOR* color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(color /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IMultiPageDispT<T>::get_BackColor(void)
{
  Msforms_97::OLE_COLOR color;
  this->get_BackColor((Msforms_97::OLE_COLOR*)&color);
  return color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::set_ForeColor(Msforms_97::OLE_COLOR color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<1> _args;
  _args[1] = color /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::get_ForeColor(Msforms_97::OLE_COLOR* color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(color /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::OLE_COLOR __fastcall
IMultiPageDispT<T>::get_ForeColor(void)
{
  Msforms_97::OLE_COLOR color;
  this->get_ForeColor((Msforms_97::OLE_COLOR*)&color);
  return color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::set__Font_Reserved(IFontDisp** Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Font_Reserved"), DISPID(2147483135));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Param1 /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::_set_Font(IFontDisp** Font/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp**)Font /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::get_Font(IFontDisp*** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp***)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp** __fastcall
IMultiPageDispT<T>::get_Font(void)
{
  IFontDisp** Font;
  this->get_Font((IFontDisp***)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = FontName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMultiPageDispT<T>::get_FontName(void)
{
  BSTR FontName;
  this->get_FontName((BSTR*)&FontName);
  return FontName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::set_FontBold(VARIANT_BOOL fBold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = fBold /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::get_FontBold(VARIANT_BOOL* fBold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fBold /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMultiPageDispT<T>::get_FontBold(void)
{
  VARIANT_BOOL fBold;
  this->get_FontBold((VARIANT_BOOL*)&fBold);
  return fBold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::set_FontItalic(VARIANT_BOOL fItalic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = fItalic /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::get_FontItalic(VARIANT_BOOL* fItalic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fItalic /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMultiPageDispT<T>::get_FontItalic(void)
{
  VARIANT_BOOL fItalic;
  this->get_FontItalic((VARIANT_BOOL*)&fItalic);
  return fItalic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::set_FontUnderline(VARIANT_BOOL fUnder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = fUnder /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::get_FontUnderline(VARIANT_BOOL* fUnder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fUnder /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMultiPageDispT<T>::get_FontUnderline(void)
{
  VARIANT_BOOL fUnder;
  this->get_FontUnderline((VARIANT_BOOL*)&fUnder);
  return fUnder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::set_FontStrikethru(VARIANT_BOOL fStrike/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = fStrike /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::get_FontStrikethru(VARIANT_BOOL* fStrike/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStrikethru"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fStrike /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMultiPageDispT<T>::get_FontStrikethru(void)
{
  VARIANT_BOOL fStrike;
  this->get_FontStrikethru((VARIANT_BOOL*)&fStrike);
  return fStrike;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::set_FontSize(CURRENCY Size/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Size /*[VT_CY:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::get_FontSize(CURRENCY* Size/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Size /*[VT_CY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> CURRENCY __fastcall
IMultiPageDispT<T>::get_FontSize(void)
{
  CURRENCY Size;
  this->get_FontSize((CURRENCY*)&Size);
  return Size;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::set_MultiRow(VARIANT_BOOL fMultiRow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiRow"), DISPID(514));
  TAutoArgs<1> _args;
  _args[1] = fMultiRow /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::get_MultiRow(VARIANT_BOOL* fMultiRow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiRow"), DISPID(514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fMultiRow /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMultiPageDispT<T>::get_MultiRow(void)
{
  VARIANT_BOOL fMultiRow;
  this->get_MultiRow((VARIANT_BOOL*)&fMultiRow);
  return fMultiRow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::set_Style(Msforms_97::fmTabStyle Style/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(513));
  TAutoArgs<1> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::get_Style(Msforms_97::fmTabStyle* Style/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Style /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmTabStyle __fastcall
IMultiPageDispT<T>::get_Style(void)
{
  Msforms_97::fmTabStyle Style;
  this->get_Style((Msforms_97::fmTabStyle*)&Style);
  return Style;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::set_TabOrientation(Msforms_97::fmTabOrientation Layout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabOrientation"), DISPID(512));
  TAutoArgs<1> _args;
  _args[1] = (int)Layout /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::get_TabOrientation(Msforms_97::fmTabOrientation* Layout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabOrientation"), DISPID(512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Layout /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::fmTabOrientation __fastcall
IMultiPageDispT<T>::get_TabOrientation(void)
{
  Msforms_97::fmTabOrientation Layout;
  this->get_TabOrientation((Msforms_97::fmTabOrientation*)&Layout);
  return Layout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::_SetTabFixedWidth(long Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetTabFixedWidth"), DISPID(DISPID_UNKNOWN/*[1610743833]*/));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::_GetTabFixedWidth(long* Width/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetTabFixedWidth"), DISPID(DISPID_UNKNOWN/*[1610743834]*/));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::_SetTabFixedHeight(long Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_SetTabFixedHeight"), DISPID(DISPID_UNKNOWN/*[1610743835]*/));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::_GetTabFixedHeight(long* Height/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("_GetTabFixedHeight"), DISPID(DISPID_UNKNOWN/*[1610743836]*/));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Enabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMultiPageDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  this->get_Enabled((VARIANT_BOOL*)&Enabled);
  return Enabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::get_SelectedItem(Msforms_97::Page** ppPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedItem"), DISPID(545));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Page**)ppPage /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::Page* __fastcall
IMultiPageDispT<T>::get_SelectedItem(void)
{
  Msforms_97::Page* ppPage;
  this->get_SelectedItem((Msforms_97::Page**)&ppPage);
  return ppPage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::get_Pages(Msforms_97::Pages** ppPages/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pages"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msforms_97::Pages**)ppPages /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msforms_97::Pages* __fastcall
IMultiPageDispT<T>::get_Pages(void)
{
  Msforms_97::Pages* ppPages;
  this->get_Pages((Msforms_97::Pages**)&ppPages);
  return ppPages;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::set_Value(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(528));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::get_Value(long* Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(528));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Index /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMultiPageDispT<T>::get_Value(void)
{
  long Index;
  this->get_Value((long*)&Index);
  return Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::set_TabFixedWidth(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabFixedWidth"), DISPID(515));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::get_TabFixedWidth(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabFixedWidth"), DISPID(515));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IMultiPageDispT<T>::get_TabFixedWidth(void)
{
  float Width;
  this->get_TabFixedWidth((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::set_TabFixedHeight(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabFixedHeight"), DISPID(516));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::get_TabFixedHeight(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabFixedHeight"), DISPID(516));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IMultiPageDispT<T>::get_TabFixedHeight(void)
{
  float Height;
  this->get_TabFixedHeight((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::set_FontWeight(short FontWeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = FontWeight /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMultiPageDispT<T>::get_FontWeight(short* FontWeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontWeight /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IMultiPageDispT<T>::get_FontWeight(void)
{
  short FontWeight;
  this->get_FontWeight((short*)&FontWeight);
  return FontWeight;
}

// *********************************************************************//
// DispIntf:  MultiPageEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {7B020EC8-AF6C-11CE-9F46-00AA00574A4F}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
MultiPageEventsDispT<T>::AddControl(long Index/*[in]*/, Msforms_97::Control* Control/*[in]*/)
{
  _TDispID _dispid(/* AddControl */ DISPID(768));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MultiPageEventsDispT<T>::BeforeDragOver(long Index/*[in]*/, 
                                        Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                        Msforms_97::Control* Control/*[in]*/, 
                                        Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                        float Y/*[in]*/, Msforms_97::fmDragState State/*[in]*/, 
                                        Msforms_97::ReturnEffect* Effect/*[in]*/, 
                                        short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDragOver */ DISPID(3));
  TAutoArgs<9> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[3] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
  _args[4] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[5] = X /*[VT_R4:0]*/;
  _args[6] = Y /*[VT_R4:0]*/;
  _args[7] = (int)State /*[VT_USERDEFINED:0]*/;
  _args[8] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[9] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MultiPageEventsDispT<T>::BeforeDropOrPaste(long Index/*[in]*/, 
                                           Msforms_97::ReturnBoolean* Cancel/*[in]*/, 
                                           Msforms_97::Control* Control/*[in]*/, 
                                           Msforms_97::fmAction Action/*[in]*/, 
                                           Msforms_97::DataObject* Data/*[in]*/, float X/*[in]*/, 
                                           float Y/*[in]*/, Msforms_97::ReturnEffect* Effect/*[in]*/
                                           , short Shift/*[in]*/)
{
  _TDispID _dispid(/* BeforeDropOrPaste */ DISPID(4));
  TAutoArgs<9> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[3] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
  _args[4] = (int)Action /*[VT_USERDEFINED:0]*/;
  _args[5] = (LPDISPATCH)(Msforms_97::DataObject*)Data /*[VT_USERDEFINED:1]*/;
  _args[6] = X /*[VT_R4:0]*/;
  _args[7] = Y /*[VT_R4:0]*/;
  _args[8] = (LPDISPATCH)(Msforms_97::ReturnEffect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[9] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MultiPageEventsDispT<T>::Change()
{
  _TDispID _dispid(/* Change */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MultiPageEventsDispT<T>::Click(long Index/*[in]*/)
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MultiPageEventsDispT<T>::DblClick(long Index/*[in]*/, Msforms_97::ReturnBoolean* Cancel/*[in]*/)
{
  _TDispID _dispid(/* DblClick */ DISPID(-601));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MultiPageEventsDispT<T>::Error(long Index/*[in]*/, short Number/*[in]*/, 
                               Msforms_97::ReturnString* Description/*[in]*/, long SCode/*[in]*/, 
                               BSTR Source/*[in]*/, BSTR HelpFile/*[in]*/, long HelpContext/*[in]*/
                               , Msforms_97::ReturnBoolean* CancelDisplay/*[in]*/)
{
  _TDispID _dispid(/* Error */ DISPID(-608));
  TAutoArgs<8> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = Number /*[VT_I2:0]*/;
  _args[3] = (LPDISPATCH)(Msforms_97::ReturnString*)Description /*[VT_USERDEFINED:1]*/;
  _args[4] = SCode /*[VT_I4:0]*/;
  _args[5] = Source /*[VT_BSTR:0]*/;
  _args[6] = HelpFile /*[VT_BSTR:0]*/;
  _args[7] = HelpContext /*[VT_I4:0]*/;
  _args[8] = (LPDISPATCH)(Msforms_97::ReturnBoolean*)CancelDisplay /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MultiPageEventsDispT<T>::KeyDown(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MultiPageEventsDispT<T>::KeyPress(Msforms_97::ReturnInteger* KeyAscii/*[in]*/)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyAscii /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MultiPageEventsDispT<T>::KeyUp(Msforms_97::ReturnInteger* KeyCode/*[in]*/, short Shift/*[in]*/)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msforms_97::ReturnInteger*)KeyCode /*[VT_USERDEFINED:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MultiPageEventsDispT<T>::Layout(long Index/*[in]*/)
{
  _TDispID _dispid(/* Layout */ DISPID(770));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MultiPageEventsDispT<T>::MouseDown(long Index/*[in]*/, short Button/*[in]*/, short Shift/*[in]*/, 
                                   float X/*[in]*/, float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<5> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = Button /*[VT_I2:0]*/;
  _args[3] = Shift /*[VT_I2:0]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MultiPageEventsDispT<T>::MouseMove(long Index/*[in]*/, short Button/*[in]*/, short Shift/*[in]*/, 
                                   float X/*[in]*/, float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<5> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = Button /*[VT_I2:0]*/;
  _args[3] = Shift /*[VT_I2:0]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MultiPageEventsDispT<T>::MouseUp(long Index/*[in]*/, short Button/*[in]*/, short Shift/*[in]*/, 
                                 float X/*[in]*/, float Y/*[in]*/)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<5> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = Button /*[VT_I2:0]*/;
  _args[3] = Shift /*[VT_I2:0]*/;
  _args[4] = X /*[VT_R4:0]*/;
  _args[5] = Y /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MultiPageEventsDispT<T>::RemoveControl(long Index/*[in]*/, Msforms_97::Control* Control/*[in]*/)
{
  _TDispID _dispid(/* RemoveControl */ DISPID(771));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Msforms_97::Control*)Control /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MultiPageEventsDispT<T>::Scroll(long Index/*[in]*/, Msforms_97::fmScrollAction ActionX/*[in]*/, 
                                Msforms_97::fmScrollAction ActionY/*[in]*/, float RequestDx/*[in]*/
                                , float RequestDy/*[in]*/, 
                                Msforms_97::ReturnSingle* ActualDx/*[in]*/, 
                                Msforms_97::ReturnSingle* ActualDy/*[in]*/)
{
  _TDispID _dispid(/* Scroll */ DISPID(772));
  TAutoArgs<7> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = (int)ActionX /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)ActionY /*[VT_USERDEFINED:0]*/;
  _args[4] = RequestDx /*[VT_R4:0]*/;
  _args[5] = RequestDy /*[VT_R4:0]*/;
  _args[6] = (LPDISPATCH)(Msforms_97::ReturnSingle*)ActualDx /*[VT_USERDEFINED:1]*/;
  _args[7] = (LPDISPATCH)(Msforms_97::ReturnSingle*)ActualDy /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
MultiPageEventsDispT<T>::Zoom(long Index/*[in]*/, short* Percent/*[in,out]*/)
{
  _TDispID _dispid(/* Zoom */ DISPID(773));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = Percent /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ReturnInteger
// Interface: TCOMIReturnInteger
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIReturnInteger, IReturnInteger, &CLSID_ReturnInteger, &IID_IReturnInteger> CoReturnInteger;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ReturnBoolean
// Interface: TCOMIReturnBoolean
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIReturnBoolean, IReturnBoolean, &CLSID_ReturnBoolean, &IID_IReturnBoolean> CoReturnBoolean;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ReturnString
// Interface: TCOMIReturnString
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIReturnString, IReturnString, &CLSID_ReturnString, &IID_IReturnString> CoReturnString;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ReturnSingle
// Interface: TCOMIReturnSingle
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIReturnSingle, IReturnSingle, &CLSID_ReturnSingle, &IID_IReturnSingle> CoReturnSingle;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ReturnEffect
// Interface: TCOMIReturnEffect
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIReturnEffect, IReturnEffect, &CLSID_ReturnEffect, &IID_IReturnEffect> CoReturnEffect;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DataObject
// Interface: TCOMIDataAutoWrapper
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIDataAutoWrapper, IDataAutoWrapper, &CLSID_DataObject, &IID_IDataAutoWrapper> CoDataObject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Control
// Interface: TCOMIControl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIControl, IControl, &CLSID_Control, &IID_IControl> CoControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Page
// Interface: TCOMIPage
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPage, IPage, &CLSID_Page, &IID_IPage> CoPage;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Control
// Event Interface : ControlEvents
// *********************************************************************//
template <class T>
class TEvents_Control : public IConnectionPointImpl<T,
                                                 &DIID_ControlEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_Enter(void);
  void            Fire_Exit(Msforms_97::ReturnBoolean* Cancel);
  void            Fire_BeforeUpdate(Msforms_97::ReturnBoolean* Cancel);
  void            Fire_AfterUpdate(void);
protected:
  ControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Control<T>::Fire_Enter(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Enter();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_Exit(Msforms_97::ReturnBoolean* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Exit(Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_BeforeUpdate(Msforms_97::ReturnBoolean* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeUpdate(Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Control<T>::Fire_AfterUpdate(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AfterUpdate();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : UserForm
// Event Interface : FormEvents
// *********************************************************************//
template <class T>
class TEvents_UserForm : public IConnectionPointImpl<T,
                                                 &DIID_FormEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_AddControl(Msforms_97::Control* Control);
  void            Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                      Msforms_97::Control* Control, Msforms_97::DataObject* Data, 
                                      float X, float Y, Msforms_97::fmDragState State, 
                                      Msforms_97::ReturnEffect* Effect, short Shift);
  void            Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::Control* Control, Msforms_97::fmAction Action, 
                                         Msforms_97::DataObject* Data, float X, float Y, 
                                         Msforms_97::ReturnEffect* Effect, short Shift);
  void            Fire_Click(void);
  void            Fire_DblClick(Msforms_97::ReturnBoolean* Cancel);
  void            Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                             BSTR Source, BSTR HelpFile, long HelpContext, 
                             Msforms_97::ReturnBoolean* CancelDisplay);
  void            Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii);
  void            Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_Layout(void);
  void            Fire_MouseDown(short Button, short Shift, float X, float Y);
  void            Fire_MouseMove(short Button, short Shift, float X, float Y);
  void            Fire_MouseUp(short Button, short Shift, float X, float Y);
  void            Fire_RemoveControl(Msforms_97::Control* Control);
  void            Fire_Scroll(Msforms_97::fmScrollAction ActionX, Msforms_97::fmScrollAction ActionY, 
                              float RequestDx, float RequestDy, Msforms_97::ReturnSingle* ActualDx, 
                              Msforms_97::ReturnSingle* ActualDy);
  void            Fire_Zoom(short* Percent);
protected:
  FormEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_UserForm<T>::Fire_AddControl(Msforms_97::Control* Control)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddControl(Control);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UserForm<T>::Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::Control* Control, Msforms_97::DataObject* Data, 
                                         float X, float Y, Msforms_97::fmDragState State, 
                                         Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDragOver(Cancel, Control, Data, X, Y, State, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UserForm<T>::Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                            Msforms_97::Control* Control, 
                                            Msforms_97::fmAction Action, 
                                            Msforms_97::DataObject* Data, float X, float Y, 
                                            Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDropOrPaste(Cancel, Control, Action, Data, X, Y, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UserForm<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UserForm<T>::Fire_DblClick(Msforms_97::ReturnBoolean* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick(Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UserForm<T>::Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                                BSTR Source, BSTR HelpFile, long HelpContext, 
                                Msforms_97::ReturnBoolean* CancelDisplay)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(Number, Description, SCode, Source, HelpFile, HelpContext, CancelDisplay);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UserForm<T>::Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UserForm<T>::Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UserForm<T>::Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UserForm<T>::Fire_Layout(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Layout();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UserForm<T>::Fire_MouseDown(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UserForm<T>::Fire_MouseMove(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UserForm<T>::Fire_MouseUp(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UserForm<T>::Fire_RemoveControl(Msforms_97::Control* Control)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.RemoveControl(Control);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UserForm<T>::Fire_Scroll(Msforms_97::fmScrollAction ActionX, 
                                 Msforms_97::fmScrollAction ActionY, float RequestDx, 
                                 float RequestDy, Msforms_97::ReturnSingle* ActualDx, 
                                 Msforms_97::ReturnSingle* ActualDy)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Scroll(ActionX, ActionY, RequestDx, RequestDy, ActualDx, ActualDy);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_UserForm<T>::Fire_Zoom(short* Percent)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Zoom(Percent);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Frame
// Event Interface : OptionFrameEvents
// *********************************************************************//
template <class T>
class TEvents_Frame : public IConnectionPointImpl<T,
                                                 &DIID_OptionFrameEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_AddControl(Msforms_97::Control* Control);
  void            Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                      Msforms_97::Control* Control, Msforms_97::DataObject* Data, 
                                      float X, float Y, Msforms_97::fmDragState State, 
                                      Msforms_97::ReturnEffect* Effect, short Shift);
  void            Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::Control* Control, Msforms_97::fmAction Action, 
                                         Msforms_97::DataObject* Data, float X, float Y, 
                                         Msforms_97::ReturnEffect* Effect, short Shift);
  void            Fire_Click(void);
  void            Fire_DblClick(Msforms_97::ReturnBoolean* Cancel);
  void            Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                             BSTR Source, BSTR HelpFile, long HelpContext, 
                             Msforms_97::ReturnBoolean* CancelDisplay);
  void            Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii);
  void            Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_Layout(void);
  void            Fire_MouseDown(short Button, short Shift, float X, float Y);
  void            Fire_MouseMove(short Button, short Shift, float X, float Y);
  void            Fire_MouseUp(short Button, short Shift, float X, float Y);
  void            Fire_RemoveControl(Msforms_97::Control* Control);
  void            Fire_Scroll(Msforms_97::fmScrollAction ActionX, Msforms_97::fmScrollAction ActionY, 
                              float RequestDx, float RequestDy, Msforms_97::ReturnSingle* ActualDx, 
                              Msforms_97::ReturnSingle* ActualDy);
  void            Fire_Zoom(short* Percent);
protected:
  OptionFrameEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Frame<T>::Fire_AddControl(Msforms_97::Control* Control)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddControl(Control);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                      Msforms_97::Control* Control, Msforms_97::DataObject* Data, 
                                      float X, float Y, Msforms_97::fmDragState State, 
                                      Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDragOver(Cancel, Control, Data, X, Y, State, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::Control* Control, Msforms_97::fmAction Action, 
                                         Msforms_97::DataObject* Data, float X, float Y, 
                                         Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDropOrPaste(Cancel, Control, Action, Data, X, Y, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_DblClick(Msforms_97::ReturnBoolean* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick(Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                             BSTR Source, BSTR HelpFile, long HelpContext, 
                             Msforms_97::ReturnBoolean* CancelDisplay)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(Number, Description, SCode, Source, HelpFile, HelpContext, CancelDisplay);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_Layout(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Layout();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_MouseDown(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_MouseMove(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_MouseUp(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_RemoveControl(Msforms_97::Control* Control)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.RemoveControl(Control);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_Scroll(Msforms_97::fmScrollAction ActionX, Msforms_97::fmScrollAction ActionY, 
                              float RequestDx, float RequestDy, Msforms_97::ReturnSingle* ActualDx, 
                              Msforms_97::ReturnSingle* ActualDy)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Scroll(ActionX, ActionY, RequestDx, RequestDy, ActualDx, ActualDy);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Frame<T>::Fire_Zoom(short* Percent)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Zoom(Percent);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Label
// Event Interface : LabelControlEvents
// *********************************************************************//
template <class T>
class TEvents_Label : public IConnectionPointImpl<T,
                                                 &DIID_LabelControlEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                      Msforms_97::DataObject* Data, float X, float Y, 
                                      Msforms_97::fmDragState DragState, 
                                      Msforms_97::ReturnEffect* Effect, short Shift);
  void            Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::fmAction Action, Msforms_97::DataObject* Data, 
                                         float X, float Y, Msforms_97::ReturnEffect* Effect, 
                                         short Shift);
  void            Fire_Click(void);
  void            Fire_DblClick(Msforms_97::ReturnBoolean* Cancel);
  void            Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                             BSTR Source, BSTR HelpFile, long HelpContext, 
                             Msforms_97::ReturnBoolean* CancelDisplay);
  void            Fire_MouseDown(short Button, short Shift, float X, float Y);
  void            Fire_MouseMove(short Button, short Shift, float X, float Y);
  void            Fire_MouseUp(short Button, short Shift, float X, float Y);
protected:
  LabelControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Label<T>::Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                      Msforms_97::DataObject* Data, float X, float Y, 
                                      Msforms_97::fmDragState DragState, 
                                      Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDragOver(Cancel, Data, X, Y, DragState, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Label<T>::Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::fmAction Action, Msforms_97::DataObject* Data, 
                                         float X, float Y, Msforms_97::ReturnEffect* Effect, 
                                         short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDropOrPaste(Cancel, Action, Data, X, Y, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Label<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Label<T>::Fire_DblClick(Msforms_97::ReturnBoolean* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick(Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Label<T>::Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                             BSTR Source, BSTR HelpFile, long HelpContext, 
                             Msforms_97::ReturnBoolean* CancelDisplay)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(Number, Description, SCode, Source, HelpFile, HelpContext, CancelDisplay);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Label<T>::Fire_MouseDown(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Label<T>::Fire_MouseMove(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Label<T>::Fire_MouseUp(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : CommandButton
// Event Interface : CommandButtonEvents
// *********************************************************************//
template <class T>
class TEvents_CommandButton : public IConnectionPointImpl<T,
                                                 &DIID_CommandButtonEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                      Msforms_97::DataObject* Data, float X, float Y, 
                                      Msforms_97::fmDragState DragState, 
                                      Msforms_97::ReturnEffect* Effect, short Shift);
  void            Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::fmAction Action, Msforms_97::DataObject* Data, 
                                         float X, float Y, Msforms_97::ReturnEffect* Effect, 
                                         short Shift);
  void            Fire_Click(void);
  void            Fire_DblClick(Msforms_97::ReturnBoolean* Cancel);
  void            Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                             BSTR Source, BSTR HelpFile, long HelpContext, 
                             Msforms_97::ReturnBoolean* CancelDisplay);
  void            Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii);
  void            Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_MouseDown(short Button, short Shift, float X, float Y);
  void            Fire_MouseMove(short Button, short Shift, float X, float Y);
  void            Fire_MouseUp(short Button, short Shift, float X, float Y);
protected:
  CommandButtonEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_CommandButton<T>::Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                              Msforms_97::DataObject* Data, float X, float Y, 
                                              Msforms_97::fmDragState DragState, 
                                              Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDragOver(Cancel, Data, X, Y, DragState, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CommandButton<T>::Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                                 Msforms_97::fmAction Action, 
                                                 Msforms_97::DataObject* Data, float X, float Y, 
                                                 Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDropOrPaste(Cancel, Action, Data, X, Y, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CommandButton<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CommandButton<T>::Fire_DblClick(Msforms_97::ReturnBoolean* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick(Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CommandButton<T>::Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                                     BSTR Source, BSTR HelpFile, long HelpContext, 
                                     Msforms_97::ReturnBoolean* CancelDisplay)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(Number, Description, SCode, Source, HelpFile, HelpContext, CancelDisplay);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CommandButton<T>::Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CommandButton<T>::Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CommandButton<T>::Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CommandButton<T>::Fire_MouseDown(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CommandButton<T>::Fire_MouseMove(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CommandButton<T>::Fire_MouseUp(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : TextBox
// Event Interface : MdcTextEvents
// *********************************************************************//
template <class T>
class TEvents_TextBox : public IConnectionPointImpl<T,
                                                 &DIID_MdcTextEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                      Msforms_97::DataObject* Data, float X, float Y, 
                                      Msforms_97::fmDragState DragState, 
                                      Msforms_97::ReturnEffect* Effect, short Shift);
  void            Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::fmAction Action, Msforms_97::DataObject* Data, 
                                         float X, float Y, Msforms_97::ReturnEffect* Effect, 
                                         short Shift);
  void            Fire_Change(void);
  void            Fire_DblClick(Msforms_97::ReturnBoolean* Cancel);
  void            Fire_DropButtonClick(void);
  void            Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                             BSTR Source, BSTR HelpFile, long HelpContext, 
                             Msforms_97::ReturnBoolean* CancelDisplay);
  void            Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii);
  void            Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_MouseDown(short Button, short Shift, float X, float Y);
  void            Fire_MouseMove(short Button, short Shift, float X, float Y);
  void            Fire_MouseUp(short Button, short Shift, float X, float Y);
protected:
  MdcTextEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_TextBox<T>::Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                        Msforms_97::DataObject* Data, float X, float Y, 
                                        Msforms_97::fmDragState DragState, 
                                        Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDragOver(Cancel, Data, X, Y, DragState, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TextBox<T>::Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                           Msforms_97::fmAction Action, Msforms_97::DataObject* Data, 
                                           float X, float Y, Msforms_97::ReturnEffect* Effect, 
                                           short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDropOrPaste(Cancel, Action, Data, X, Y, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TextBox<T>::Fire_Change(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Change();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TextBox<T>::Fire_DblClick(Msforms_97::ReturnBoolean* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick(Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TextBox<T>::Fire_DropButtonClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DropButtonClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TextBox<T>::Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                               BSTR Source, BSTR HelpFile, long HelpContext, 
                               Msforms_97::ReturnBoolean* CancelDisplay)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(Number, Description, SCode, Source, HelpFile, HelpContext, CancelDisplay);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TextBox<T>::Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TextBox<T>::Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TextBox<T>::Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TextBox<T>::Fire_MouseDown(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TextBox<T>::Fire_MouseMove(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TextBox<T>::Fire_MouseUp(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ListBox
// Event Interface : MdcListEvents
// *********************************************************************//
template <class T>
class TEvents_ListBox : public IConnectionPointImpl<T,
                                                 &DIID_MdcListEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                      Msforms_97::DataObject* Data, float X, float Y, 
                                      Msforms_97::fmDragState DragState, 
                                      Msforms_97::ReturnEffect* Effect, short Shift);
  void            Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::fmAction Action, Msforms_97::DataObject* Data, 
                                         float X, float Y, Msforms_97::ReturnEffect* Effect, 
                                         short Shift);
  void            Fire_Change(void);
  void            Fire_Click(void);
  void            Fire_DblClick(Msforms_97::ReturnBoolean* Cancel);
  void            Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                             BSTR Source, BSTR HelpFile, long HelpContext, 
                             Msforms_97::ReturnBoolean* CancelDisplay);
  void            Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii);
  void            Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_MouseDown(short Button, short Shift, float X, float Y);
  void            Fire_MouseMove(short Button, short Shift, float X, float Y);
  void            Fire_MouseUp(short Button, short Shift, float X, float Y);
protected:
  MdcListEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ListBox<T>::Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                        Msforms_97::DataObject* Data, float X, float Y, 
                                        Msforms_97::fmDragState DragState, 
                                        Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDragOver(Cancel, Data, X, Y, DragState, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                           Msforms_97::fmAction Action, Msforms_97::DataObject* Data, 
                                           float X, float Y, Msforms_97::ReturnEffect* Effect, 
                                           short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDropOrPaste(Cancel, Action, Data, X, Y, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_Change(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Change();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_DblClick(Msforms_97::ReturnBoolean* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick(Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                               BSTR Source, BSTR HelpFile, long HelpContext, 
                               Msforms_97::ReturnBoolean* CancelDisplay)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(Number, Description, SCode, Source, HelpFile, HelpContext, CancelDisplay);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_MouseDown(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_MouseMove(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListBox<T>::Fire_MouseUp(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ComboBox
// Event Interface : MdcComboEvents
// *********************************************************************//
template <class T>
class TEvents_ComboBox : public IConnectionPointImpl<T,
                                                 &DIID_MdcComboEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                      Msforms_97::DataObject* Data, float X, float Y, 
                                      Msforms_97::fmDragState DragState, 
                                      Msforms_97::ReturnEffect* Effect, short Shift);
  void            Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::fmAction Action, Msforms_97::DataObject* Data, 
                                         float X, float Y, Msforms_97::ReturnEffect* Effect, 
                                         short Shift);
  void            Fire_Change(void);
  void            Fire_Click(void);
  void            Fire_DblClick(Msforms_97::ReturnBoolean* Cancel);
  void            Fire_DropButtonClick(void);
  void            Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                             BSTR Source, BSTR HelpFile, long HelpContext, 
                             Msforms_97::ReturnBoolean* CancelDisplay);
  void            Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii);
  void            Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_MouseDown(short Button, short Shift, float X, float Y);
  void            Fire_MouseMove(short Button, short Shift, float X, float Y);
  void            Fire_MouseUp(short Button, short Shift, float X, float Y);
protected:
  MdcComboEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ComboBox<T>::Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::DataObject* Data, float X, float Y, 
                                         Msforms_97::fmDragState DragState, 
                                         Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDragOver(Cancel, Data, X, Y, DragState, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                            Msforms_97::fmAction Action, 
                                            Msforms_97::DataObject* Data, float X, float Y, 
                                            Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDropOrPaste(Cancel, Action, Data, X, Y, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_Change(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Change();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_DblClick(Msforms_97::ReturnBoolean* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick(Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_DropButtonClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DropButtonClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                                BSTR Source, BSTR HelpFile, long HelpContext, 
                                Msforms_97::ReturnBoolean* CancelDisplay)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(Number, Description, SCode, Source, HelpFile, HelpContext, CancelDisplay);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_MouseDown(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_MouseMove(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ComboBox<T>::Fire_MouseUp(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : CheckBox
// Event Interface : MdcCheckBoxEvents
// *********************************************************************//
template <class T>
class TEvents_CheckBox : public IConnectionPointImpl<T,
                                                 &DIID_MdcCheckBoxEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                      Msforms_97::DataObject* Data, float X, float Y, 
                                      Msforms_97::fmDragState DragState, 
                                      Msforms_97::ReturnEffect* Effect, short Shift);
  void            Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::fmAction Action, Msforms_97::DataObject* Data, 
                                         float X, float Y, Msforms_97::ReturnEffect* Effect, 
                                         short Shift);
  void            Fire_Change(void);
  void            Fire_Click(void);
  void            Fire_DblClick(Msforms_97::ReturnBoolean* Cancel);
  void            Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                             BSTR Source, BSTR HelpFile, long HelpContext, 
                             Msforms_97::ReturnBoolean* CancelDisplay);
  void            Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii);
  void            Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_MouseDown(short Button, short Shift, float X, float Y);
  void            Fire_MouseMove(short Button, short Shift, float X, float Y);
  void            Fire_MouseUp(short Button, short Shift, float X, float Y);
protected:
  MdcCheckBoxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_CheckBox<T>::Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::DataObject* Data, float X, float Y, 
                                         Msforms_97::fmDragState DragState, 
                                         Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDragOver(Cancel, Data, X, Y, DragState, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                            Msforms_97::fmAction Action, 
                                            Msforms_97::DataObject* Data, float X, float Y, 
                                            Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDropOrPaste(Cancel, Action, Data, X, Y, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_Change(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Change();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_DblClick(Msforms_97::ReturnBoolean* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick(Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                                BSTR Source, BSTR HelpFile, long HelpContext, 
                                Msforms_97::ReturnBoolean* CancelDisplay)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(Number, Description, SCode, Source, HelpFile, HelpContext, CancelDisplay);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_MouseDown(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_MouseMove(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CheckBox<T>::Fire_MouseUp(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : OptionButton
// Event Interface : MdcOptionButtonEvents
// *********************************************************************//
template <class T>
class TEvents_OptionButton : public IConnectionPointImpl<T,
                                                 &DIID_MdcOptionButtonEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                      Msforms_97::DataObject* Data, float X, float Y, 
                                      Msforms_97::fmDragState DragState, 
                                      Msforms_97::ReturnEffect* Effect, short Shift);
  void            Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::fmAction Action, Msforms_97::DataObject* Data, 
                                         float X, float Y, Msforms_97::ReturnEffect* Effect, 
                                         short Shift);
  void            Fire_Change(void);
  void            Fire_Click(void);
  void            Fire_DblClick(Msforms_97::ReturnBoolean* Cancel);
  void            Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                             BSTR Source, BSTR HelpFile, long HelpContext, 
                             Msforms_97::ReturnBoolean* CancelDisplay);
  void            Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii);
  void            Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_MouseDown(short Button, short Shift, float X, float Y);
  void            Fire_MouseMove(short Button, short Shift, float X, float Y);
  void            Fire_MouseUp(short Button, short Shift, float X, float Y);
protected:
  MdcOptionButtonEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_OptionButton<T>::Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                             Msforms_97::DataObject* Data, float X, float Y, 
                                             Msforms_97::fmDragState DragState, 
                                             Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDragOver(Cancel, Data, X, Y, DragState, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_OptionButton<T>::Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                                Msforms_97::fmAction Action, 
                                                Msforms_97::DataObject* Data, float X, float Y, 
                                                Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDropOrPaste(Cancel, Action, Data, X, Y, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_OptionButton<T>::Fire_Change(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Change();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_OptionButton<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_OptionButton<T>::Fire_DblClick(Msforms_97::ReturnBoolean* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick(Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_OptionButton<T>::Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                                    BSTR Source, BSTR HelpFile, long HelpContext, 
                                    Msforms_97::ReturnBoolean* CancelDisplay)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(Number, Description, SCode, Source, HelpFile, HelpContext, CancelDisplay);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_OptionButton<T>::Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_OptionButton<T>::Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_OptionButton<T>::Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_OptionButton<T>::Fire_MouseDown(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_OptionButton<T>::Fire_MouseMove(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_OptionButton<T>::Fire_MouseUp(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ToggleButton
// Event Interface : MdcToggleButtonEvents
// *********************************************************************//
template <class T>
class TEvents_ToggleButton : public IConnectionPointImpl<T,
                                                 &DIID_MdcToggleButtonEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                      Msforms_97::DataObject* Data, float X, float Y, 
                                      Msforms_97::fmDragState DragState, 
                                      Msforms_97::ReturnEffect* Effect, short Shift);
  void            Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::fmAction Action, Msforms_97::DataObject* Data, 
                                         float X, float Y, Msforms_97::ReturnEffect* Effect, 
                                         short Shift);
  void            Fire_Change(void);
  void            Fire_Click(void);
  void            Fire_DblClick(Msforms_97::ReturnBoolean* Cancel);
  void            Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                             BSTR Source, BSTR HelpFile, long HelpContext, 
                             Msforms_97::ReturnBoolean* CancelDisplay);
  void            Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii);
  void            Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_MouseDown(short Button, short Shift, float X, float Y);
  void            Fire_MouseMove(short Button, short Shift, float X, float Y);
  void            Fire_MouseUp(short Button, short Shift, float X, float Y);
protected:
  MdcToggleButtonEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ToggleButton<T>::Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                             Msforms_97::DataObject* Data, float X, float Y, 
                                             Msforms_97::fmDragState DragState, 
                                             Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDragOver(Cancel, Data, X, Y, DragState, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToggleButton<T>::Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                                Msforms_97::fmAction Action, 
                                                Msforms_97::DataObject* Data, float X, float Y, 
                                                Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDropOrPaste(Cancel, Action, Data, X, Y, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToggleButton<T>::Fire_Change(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Change();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToggleButton<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToggleButton<T>::Fire_DblClick(Msforms_97::ReturnBoolean* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick(Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToggleButton<T>::Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                                    BSTR Source, BSTR HelpFile, long HelpContext, 
                                    Msforms_97::ReturnBoolean* CancelDisplay)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(Number, Description, SCode, Source, HelpFile, HelpContext, CancelDisplay);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToggleButton<T>::Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToggleButton<T>::Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToggleButton<T>::Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToggleButton<T>::Fire_MouseDown(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToggleButton<T>::Fire_MouseMove(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ToggleButton<T>::Fire_MouseUp(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ScrollBar
// Event Interface : ScrollbarEvents
// *********************************************************************//
template <class T>
class TEvents_ScrollBar : public IConnectionPointImpl<T,
                                                 &DIID_ScrollbarEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                      Msforms_97::DataObject* Data, float X, float Y, 
                                      Msforms_97::fmDragState DragState, 
                                      Msforms_97::ReturnEffect* Effect, short Shift);
  void            Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::fmAction Action, Msforms_97::DataObject* Data, 
                                         float X, float Y, Msforms_97::ReturnEffect* Effect, 
                                         short Shift);
  void            Fire_Change(void);
  void            Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                             BSTR Source, BSTR HelpFile, long HelpContext, 
                             Msforms_97::ReturnBoolean* CancelDisplay);
  void            Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii);
  void            Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_Scroll(void);
protected:
  ScrollbarEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ScrollBar<T>::Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                          Msforms_97::DataObject* Data, float X, float Y, 
                                          Msforms_97::fmDragState DragState, 
                                          Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDragOver(Cancel, Data, X, Y, DragState, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                             Msforms_97::fmAction Action, 
                                             Msforms_97::DataObject* Data, float X, float Y, 
                                             Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDropOrPaste(Cancel, Action, Data, X, Y, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_Change(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Change();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                                 BSTR Source, BSTR HelpFile, long HelpContext, 
                                 Msforms_97::ReturnBoolean* CancelDisplay)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(Number, Description, SCode, Source, HelpFile, HelpContext, CancelDisplay);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ScrollBar<T>::Fire_Scroll(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Scroll();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : TabStrip
// Event Interface : TabStripEvents
// *********************************************************************//
template <class T>
class TEvents_TabStrip : public IConnectionPointImpl<T,
                                                 &DIID_TabStripEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_BeforeDragOver(long Index, Msforms_97::ReturnBoolean* Cancel, 
                                      Msforms_97::DataObject* Data, float X, float Y, 
                                      Msforms_97::fmDragState DragState, 
                                      Msforms_97::ReturnEffect* Effect, short Shift);
  void            Fire_BeforeDropOrPaste(long Index, Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::fmAction Action, Msforms_97::DataObject* Data, 
                                         float X, float Y, Msforms_97::ReturnEffect* Effect, 
                                         short Shift);
  void            Fire_Change(void);
  void            Fire_Click(long Index);
  void            Fire_DblClick(long Index, Msforms_97::ReturnBoolean* Cancel);
  void            Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                             BSTR Source, BSTR HelpFile, long HelpContext, 
                             Msforms_97::ReturnBoolean* CancelDisplay);
  void            Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii);
  void            Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_MouseDown(long Index, short Button, short Shift, float X, float Y);
  void            Fire_MouseMove(long Index, short Button, short Shift, float X, float Y);
  void            Fire_MouseUp(long Index, short Button, short Shift, float X, float Y);
protected:
  TabStripEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_TabStrip<T>::Fire_BeforeDragOver(long Index, Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::DataObject* Data, float X, float Y, 
                                         Msforms_97::fmDragState DragState, 
                                         Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDragOver(Index, Cancel, Data, X, Y, DragState, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_BeforeDropOrPaste(long Index, Msforms_97::ReturnBoolean* Cancel, 
                                            Msforms_97::fmAction Action, 
                                            Msforms_97::DataObject* Data, float X, float Y, 
                                            Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDropOrPaste(Index, Cancel, Action, Data, X, Y, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_Change(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Change();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_Click(long Index)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click(Index);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_DblClick(long Index, Msforms_97::ReturnBoolean* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick(Index, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                                BSTR Source, BSTR HelpFile, long HelpContext, 
                                Msforms_97::ReturnBoolean* CancelDisplay)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(Number, Description, SCode, Source, HelpFile, HelpContext, CancelDisplay);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_MouseDown(long Index, short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Index, Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_MouseMove(long Index, short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Index, Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_MouseUp(long Index, short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Index, Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : SpinButton
// Event Interface : SpinbuttonEvents
// *********************************************************************//
template <class T>
class TEvents_SpinButton : public IConnectionPointImpl<T,
                                                 &DIID_SpinbuttonEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                      Msforms_97::DataObject* Data, float X, float Y, 
                                      Msforms_97::fmDragState DragState, 
                                      Msforms_97::ReturnEffect* Effect, short Shift);
  void            Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::fmAction Action, Msforms_97::DataObject* Data, 
                                         float X, float Y, Msforms_97::ReturnEffect* Effect, 
                                         short Shift);
  void            Fire_Change(void);
  void            Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                             BSTR Source, BSTR HelpFile, long HelpContext, 
                             Msforms_97::ReturnBoolean* CancelDisplay);
  void            Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii);
  void            Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_SpinUp(void);
  void            Fire_SpinDown(void);
protected:
  SpinbuttonEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_SpinButton<T>::Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                           Msforms_97::DataObject* Data, float X, float Y, 
                                           Msforms_97::fmDragState DragState, 
                                           Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDragOver(Cancel, Data, X, Y, DragState, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SpinButton<T>::Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                              Msforms_97::fmAction Action, 
                                              Msforms_97::DataObject* Data, float X, float Y, 
                                              Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDropOrPaste(Cancel, Action, Data, X, Y, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SpinButton<T>::Fire_Change(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Change();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SpinButton<T>::Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                                  BSTR Source, BSTR HelpFile, long HelpContext, 
                                  Msforms_97::ReturnBoolean* CancelDisplay)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(Number, Description, SCode, Source, HelpFile, HelpContext, CancelDisplay);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SpinButton<T>::Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SpinButton<T>::Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SpinButton<T>::Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SpinButton<T>::Fire_SpinUp(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SpinUp();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_SpinButton<T>::Fire_SpinDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SpinDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Image
// Event Interface : ImageEvents
// *********************************************************************//
template <class T>
class TEvents_Image : public IConnectionPointImpl<T,
                                                 &DIID_ImageEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                      Msforms_97::DataObject* Data, float X, float Y, 
                                      Msforms_97::fmDragState DragState, 
                                      Msforms_97::ReturnEffect* Effect, short Shift);
  void            Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::fmAction Action, Msforms_97::DataObject* Data, 
                                         float X, float Y, Msforms_97::ReturnEffect* Effect, 
                                         short Shift);
  void            Fire_Click(void);
  void            Fire_DblClick(Msforms_97::ReturnBoolean* Cancel);
  void            Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                             BSTR Source, BSTR HelpFile, long HelpContext, 
                             Msforms_97::ReturnBoolean* CancelDisplay);
  void            Fire_MouseDown(short Button, short Shift, float X, float Y);
  void            Fire_MouseMove(short Button, short Shift, float X, float Y);
  void            Fire_MouseUp(short Button, short Shift, float X, float Y);
protected:
  ImageEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Image<T>::Fire_BeforeDragOver(Msforms_97::ReturnBoolean* Cancel, 
                                      Msforms_97::DataObject* Data, float X, float Y, 
                                      Msforms_97::fmDragState DragState, 
                                      Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDragOver(Cancel, Data, X, Y, DragState, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Image<T>::Fire_BeforeDropOrPaste(Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::fmAction Action, Msforms_97::DataObject* Data, 
                                         float X, float Y, Msforms_97::ReturnEffect* Effect, 
                                         short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDropOrPaste(Cancel, Action, Data, X, Y, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Image<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Image<T>::Fire_DblClick(Msforms_97::ReturnBoolean* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick(Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Image<T>::Fire_Error(short Number, Msforms_97::ReturnString* Description, long SCode, 
                             BSTR Source, BSTR HelpFile, long HelpContext, 
                             Msforms_97::ReturnBoolean* CancelDisplay)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(Number, Description, SCode, Source, HelpFile, HelpContext, CancelDisplay);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Image<T>::Fire_MouseDown(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Image<T>::Fire_MouseMove(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Image<T>::Fire_MouseUp(short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : HTMLSubmit
// Event Interface : WHTMLControlEvents
// *********************************************************************//
template <class T>
class TEvents_HTMLSubmit : public IConnectionPointImpl<T,
                                                 &DIID_WHTMLControlEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_Click(void);
protected:
  WHTMLControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_HTMLSubmit<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : HTMLImage
// Event Interface : WHTMLControlEvents1
// *********************************************************************//
template <class T>
class TEvents_HTMLImage : public IConnectionPointImpl<T,
                                                 &DIID_WHTMLControlEvents1,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_Click(void);
protected:
  WHTMLControlEvents1Disp m_EventIntfObj;
};

template <class T> void
TEvents_HTMLImage<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : HTMLReset
// Event Interface : WHTMLControlEvents2
// *********************************************************************//
template <class T>
class TEvents_HTMLReset : public IConnectionPointImpl<T,
                                                 &DIID_WHTMLControlEvents2,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_Click(void);
protected:
  WHTMLControlEvents2Disp m_EventIntfObj;
};

template <class T> void
TEvents_HTMLReset<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : HTMLCheckbox
// Event Interface : WHTMLControlEvents3
// *********************************************************************//
template <class T>
class TEvents_HTMLCheckbox : public IConnectionPointImpl<T,
                                                 &DIID_WHTMLControlEvents3,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_Click(void);
protected:
  WHTMLControlEvents3Disp m_EventIntfObj;
};

template <class T> void
TEvents_HTMLCheckbox<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : HTMLOption
// Event Interface : WHTMLControlEvents4
// *********************************************************************//
template <class T>
class TEvents_HTMLOption : public IConnectionPointImpl<T,
                                                 &DIID_WHTMLControlEvents4,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_Click(void);
protected:
  WHTMLControlEvents4Disp m_EventIntfObj;
};

template <class T> void
TEvents_HTMLOption<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : HTMLText
// Event Interface : WHTMLControlEvents5
// *********************************************************************//
template <class T>
class TEvents_HTMLText : public IConnectionPointImpl<T,
                                                 &DIID_WHTMLControlEvents5,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_Click(void);
protected:
  WHTMLControlEvents5Disp m_EventIntfObj;
};

template <class T> void
TEvents_HTMLText<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : HTMLHidden
// Event Interface : WHTMLControlEvents6
// *********************************************************************//
template <class T>
class TEvents_HTMLHidden : public IConnectionPointImpl<T,
                                                 &DIID_WHTMLControlEvents6,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_Click(void);
protected:
  WHTMLControlEvents6Disp m_EventIntfObj;
};

template <class T> void
TEvents_HTMLHidden<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : HTMLPassword
// Event Interface : WHTMLControlEvents7
// *********************************************************************//
template <class T>
class TEvents_HTMLPassword : public IConnectionPointImpl<T,
                                                 &DIID_WHTMLControlEvents7,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_Click(void);
protected:
  WHTMLControlEvents7Disp m_EventIntfObj;
};

template <class T> void
TEvents_HTMLPassword<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : HTMLSelect
// Event Interface : WHTMLControlEvents9
// *********************************************************************//
template <class T>
class TEvents_HTMLSelect : public IConnectionPointImpl<T,
                                                 &DIID_WHTMLControlEvents9,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_Click(void);
protected:
  WHTMLControlEvents9Disp m_EventIntfObj;
};

template <class T> void
TEvents_HTMLSelect<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : HTMLTextArea
// Event Interface : WHTMLControlEvents10
// *********************************************************************//
template <class T>
class TEvents_HTMLTextArea : public IConnectionPointImpl<T,
                                                 &DIID_WHTMLControlEvents10,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_Click(void);
protected:
  WHTMLControlEvents10Disp m_EventIntfObj;
};

template <class T> void
TEvents_HTMLTextArea<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MultiPage
// Event Interface : MultiPageEvents
// *********************************************************************//
template <class T>
class TEvents_MultiPage : public IConnectionPointImpl<T,
                                                 &DIID_MultiPageEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_AddControl(long Index, Msforms_97::Control* Control);
  void            Fire_BeforeDragOver(long Index, Msforms_97::ReturnBoolean* Cancel, 
                                      Msforms_97::Control* Control, Msforms_97::DataObject* Data, 
                                      float X, float Y, Msforms_97::fmDragState State, 
                                      Msforms_97::ReturnEffect* Effect, short Shift);
  void            Fire_BeforeDropOrPaste(long Index, Msforms_97::ReturnBoolean* Cancel, 
                                         Msforms_97::Control* Control, Msforms_97::fmAction Action, 
                                         Msforms_97::DataObject* Data, float X, float Y, 
                                         Msforms_97::ReturnEffect* Effect, short Shift);
  void            Fire_Change(void);
  void            Fire_Click(long Index);
  void            Fire_DblClick(long Index, Msforms_97::ReturnBoolean* Cancel);
  void            Fire_Error(long Index, short Number, Msforms_97::ReturnString* Description, 
                             long SCode, BSTR Source, BSTR HelpFile, long HelpContext, 
                             Msforms_97::ReturnBoolean* CancelDisplay);
  void            Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii);
  void            Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift);
  void            Fire_Layout(long Index);
  void            Fire_MouseDown(long Index, short Button, short Shift, float X, float Y);
  void            Fire_MouseMove(long Index, short Button, short Shift, float X, float Y);
  void            Fire_MouseUp(long Index, short Button, short Shift, float X, float Y);
  void            Fire_RemoveControl(long Index, Msforms_97::Control* Control);
  void            Fire_Scroll(long Index, Msforms_97::fmScrollAction ActionX, 
                              Msforms_97::fmScrollAction ActionY, float RequestDx, float RequestDy, 
                              Msforms_97::ReturnSingle* ActualDx, Msforms_97::ReturnSingle* ActualDy);
  void            Fire_Zoom(long Index, short* Percent);
protected:
  MultiPageEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MultiPage<T>::Fire_AddControl(long Index, Msforms_97::Control* Control)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AddControl(Index, Control);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MultiPage<T>::Fire_BeforeDragOver(long Index, Msforms_97::ReturnBoolean* Cancel, 
                                          Msforms_97::Control* Control, Msforms_97::DataObject* Data, 
                                          float X, float Y, Msforms_97::fmDragState State, 
                                          Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDragOver(Index, Cancel, Control, Data, X, Y, State, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MultiPage<T>::Fire_BeforeDropOrPaste(long Index, Msforms_97::ReturnBoolean* Cancel, 
                                             Msforms_97::Control* Control, 
                                             Msforms_97::fmAction Action, 
                                             Msforms_97::DataObject* Data, float X, float Y, 
                                             Msforms_97::ReturnEffect* Effect, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDropOrPaste(Index, Cancel, Control, Action, Data, X, Y, Effect, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MultiPage<T>::Fire_Change(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Change();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MultiPage<T>::Fire_Click(long Index)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click(Index);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MultiPage<T>::Fire_DblClick(long Index, Msforms_97::ReturnBoolean* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick(Index, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MultiPage<T>::Fire_Error(long Index, short Number, Msforms_97::ReturnString* Description, 
                                 long SCode, BSTR Source, BSTR HelpFile, long HelpContext, 
                                 Msforms_97::ReturnBoolean* CancelDisplay)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(Index, Number, Description, SCode, Source, HelpFile, HelpContext, 
                           CancelDisplay);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MultiPage<T>::Fire_KeyDown(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MultiPage<T>::Fire_KeyPress(Msforms_97::ReturnInteger* KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MultiPage<T>::Fire_KeyUp(Msforms_97::ReturnInteger* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MultiPage<T>::Fire_Layout(long Index)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Layout(Index);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MultiPage<T>::Fire_MouseDown(long Index, short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Index, Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MultiPage<T>::Fire_MouseMove(long Index, short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Index, Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MultiPage<T>::Fire_MouseUp(long Index, short Button, short Shift, float X, float Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Index, Button, Shift, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MultiPage<T>::Fire_RemoveControl(long Index, Msforms_97::Control* Control)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.RemoveControl(Index, Control);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MultiPage<T>::Fire_Scroll(long Index, Msforms_97::fmScrollAction ActionX, 
                                  Msforms_97::fmScrollAction ActionY, float RequestDx, 
                                  float RequestDy, Msforms_97::ReturnSingle* ActualDx, 
                                  Msforms_97::ReturnSingle* ActualDy)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Scroll(Index, ActionX, ActionY, RequestDx, RequestDy, ActualDx, ActualDy);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MultiPage<T>::Fire_Zoom(long Index, short* Percent)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Zoom(Index, Percent);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Msforms_97

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Msforms_97;
#endif

#pragma option pop

#endif // MSForms_97H
