// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.0.1.0.1.2  $
// File generated on 1/29/2002 1:28:10 PM from Type Library described below.

// ************************************************************************  //
// Type Lib: c:\program files\microsoft office\office10\msppt.olb (1)
// LIBID: {91493440-5A91-11CF-8700-00AA0060263B}
// LCID: 0
// Helpfile: c:\program files\microsoft office\office10\VBAPP10.CHM
// HelpString: Microsoft PowerPoint 10.0 Object Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\stdole2.tlb)
//   (2) v2.2 Office, (C:\Program Files\Common Files\Microsoft Shared\Office10\MSO.DLL)
//   (3) v5.3 VBIDE, (C:\Program Files\Common Files\Microsoft Shared\VBA\VBA6\VBE6EXT.OLB)
// ************************************************************************ //
#ifndef   PowerPoint_XPH
#define   PowerPoint_XPH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif
#include "Office_XP.h"
#include "VBIDE_XP.h"


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Powerpoint_xp
{

// *********************************************************************//
// HelpString: Microsoft PowerPoint 10.0 Object Library
// Version:    2.7
// *********************************************************************//

/*   **********************************************************

  Type Library Options: 
  Generate C++ Import file
  Expose namespace with 'using'.
  Generate files for dependant type libraries
  Map HRESULT to safecall on dual interfaces
  Place warnings in imported files
  Generate IDE registration for component wrappers
  Generate dispinterfaces
  Generate CoClassCreator wrappers
  Generate C++Builder 4.0 event wrappers for servers
  Generate VCL component wrappers for servers
  Force use of a _TLB file
  Ignore [PreDefined] flag
  Ignore Standard Type Libraries
  Show Debug Output
  Place comments in imported files
   ******************************************************** */

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_PowerPoint;
extern __declspec (package) const GUID GUID_PpWindowState;
extern __declspec (package) const GUID GUID_PpArrangeStyle;
extern __declspec (package) const GUID GUID_PpViewType;
extern __declspec (package) const GUID GUID_PpColorSchemeIndex;
extern __declspec (package) const GUID GUID_PpSlideSizeType;
extern __declspec (package) const GUID GUID_PpSaveAsFileType;
extern __declspec (package) const GUID GUID_PpTextStyleType;
extern __declspec (package) const GUID GUID_PpSlideLayout;
extern __declspec (package) const GUID GUID_PpEntryEffect;
extern __declspec (package) const GUID GUID_PpTextLevelEffect;
extern __declspec (package) const GUID GUID_PpTextUnitEffect;
extern __declspec (package) const GUID GUID_PpChartUnitEffect;
extern __declspec (package) const GUID GUID_PpAfterEffect;
extern __declspec (package) const GUID GUID_PpAdvanceMode;
extern __declspec (package) const GUID GUID_PpSoundEffectType;
extern __declspec (package) const GUID GUID_PpFollowColors;
extern __declspec (package) const GUID GUID_PpUpdateOption;
extern __declspec (package) const GUID GUID_PpParagraphAlignment;
extern __declspec (package) const GUID GUID_PpBaselineAlignment;
extern __declspec (package) const GUID GUID_PpTabStopType;
extern __declspec (package) const GUID GUID_PpIndentControl;
extern __declspec (package) const GUID GUID_PpChangeCase;
extern __declspec (package) const GUID GUID_PpSlideShowPointerType;
extern __declspec (package) const GUID GUID_PpSlideShowState;
extern __declspec (package) const GUID GUID_PpSlideShowAdvanceMode;
extern __declspec (package) const GUID GUID_PpFileDialogType;
extern __declspec (package) const GUID GUID_PpPrintOutputType;
extern __declspec (package) const GUID GUID_PpPrintHandoutOrder;
extern __declspec (package) const GUID GUID_PpPrintColorType;
extern __declspec (package) const GUID GUID_PpSelectionType;
extern __declspec (package) const GUID GUID_PpDirection;
extern __declspec (package) const GUID GUID_PpDateTimeFormat;
extern __declspec (package) const GUID GUID_PpTransitionSpeed;
extern __declspec (package) const GUID GUID_PpMouseActivation;
extern __declspec (package) const GUID GUID_PpActionType;
extern __declspec (package) const GUID GUID_PpPlaceholderType;
extern __declspec (package) const GUID GUID_PpSlideShowType;
extern __declspec (package) const GUID GUID_PpPrintRangeType;
extern __declspec (package) const GUID GUID_PpAutoSize;
extern __declspec (package) const GUID GUID_PpMediaType;
extern __declspec (package) const GUID GUID_PpSoundFormatType;
extern __declspec (package) const GUID GUID_PpFarEastLineBreakLevel;
extern __declspec (package) const GUID GUID_PpSlideShowRangeType;
extern __declspec (package) const GUID GUID_PpFrameColors;
extern __declspec (package) const GUID IID_Collection;
extern __declspec (package) const GUID IID__Application;
extern __declspec (package) const GUID IID__Global;
extern __declspec (package) const GUID IID_EApplication;
extern __declspec (package) const GUID CLSID_PowerPointGlobal;
extern __declspec (package) const GUID IID_ColorFormat;
extern __declspec (package) const GUID IID_SlideShowWindow;
extern __declspec (package) const GUID IID_Selection;
extern __declspec (package) const GUID IID_DocumentWindows;
extern __declspec (package) const GUID IID_SlideShowWindows;
extern __declspec (package) const GUID IID_DocumentWindow;
extern __declspec (package) const GUID IID_View;
extern __declspec (package) const GUID IID_SlideShowView;
extern __declspec (package) const GUID IID_SlideShowSettings;
extern __declspec (package) const GUID IID_NamedSlideShows;
extern __declspec (package) const GUID IID_NamedSlideShow;
extern __declspec (package) const GUID IID_PrintOptions;
extern __declspec (package) const GUID IID_PrintRanges;
extern __declspec (package) const GUID IID_PrintRange;
extern __declspec (package) const GUID IID_AddIns;
extern __declspec (package) const GUID IID_AddIn;
extern __declspec (package) const GUID IID_Presentations;
extern __declspec (package) const GUID IID_PresEvents;
extern __declspec (package) const GUID IID__Presentation;
extern __declspec (package) const GUID IID_Hyperlinks;
extern __declspec (package) const GUID IID_Hyperlink;
extern __declspec (package) const GUID IID_PageSetup;
extern __declspec (package) const GUID IID_Fonts;
extern __declspec (package) const GUID IID_ExtraColors;
extern __declspec (package) const GUID IID_Slides;
extern __declspec (package) const GUID IID__Slide;
extern __declspec (package) const GUID IID_SlideRange;
extern __declspec (package) const GUID IID__Master;
extern __declspec (package) const GUID IID_SldEvents;
extern __declspec (package) const GUID CLSID_PowerPointSlide;
extern __declspec (package) const GUID IID_ColorSchemes;
extern __declspec (package) const GUID IID_ColorScheme;
extern __declspec (package) const GUID IID_RGBColor;
extern __declspec (package) const GUID IID_SlideShowTransition;
extern __declspec (package) const GUID IID_SoundEffect;
extern __declspec (package) const GUID IID_SoundFormat;
extern __declspec (package) const GUID IID_HeadersFooters;
extern __declspec (package) const GUID IID_Shapes;
extern __declspec (package) const GUID IID_Placeholders;
extern __declspec (package) const GUID IID_PlaceholderFormat;
extern __declspec (package) const GUID IID_FreeformBuilder;
extern __declspec (package) const GUID IID_Shape;
extern __declspec (package) const GUID IID_ShapeRange;
extern __declspec (package) const GUID IID_GroupShapes;
extern __declspec (package) const GUID IID_Adjustments;
extern __declspec (package) const GUID IID_PictureFormat;
extern __declspec (package) const GUID IID_FillFormat;
extern __declspec (package) const GUID IID_LineFormat;
extern __declspec (package) const GUID IID_ShadowFormat;
extern __declspec (package) const GUID IID_ConnectorFormat;
extern __declspec (package) const GUID IID_TextEffectFormat;
extern __declspec (package) const GUID IID_ThreeDFormat;
extern __declspec (package) const GUID IID_TextFrame;
extern __declspec (package) const GUID IID_CalloutFormat;
extern __declspec (package) const GUID IID_ShapeNodes;
extern __declspec (package) const GUID IID_ShapeNode;
extern __declspec (package) const GUID IID_OLEFormat;
extern __declspec (package) const GUID IID_LinkFormat;
extern __declspec (package) const GUID IID_ObjectVerbs;
extern __declspec (package) const GUID IID_AnimationSettings;
extern __declspec (package) const GUID IID_ActionSettings;
extern __declspec (package) const GUID IID_ActionSetting;
extern __declspec (package) const GUID IID_PlaySettings;
extern __declspec (package) const GUID IID_TextRange;
extern __declspec (package) const GUID IID_Ruler;
extern __declspec (package) const GUID IID_RulerLevels;
extern __declspec (package) const GUID IID_RulerLevel;
extern __declspec (package) const GUID IID_TabStops;
extern __declspec (package) const GUID IID_TabStop;
extern __declspec (package) const GUID IID_Font;
extern __declspec (package) const GUID IID_ParagraphFormat;
extern __declspec (package) const GUID IID_BulletFormat;
extern __declspec (package) const GUID IID_TextStyles;
extern __declspec (package) const GUID IID_TextStyle;
extern __declspec (package) const GUID IID_TextStyleLevels;
extern __declspec (package) const GUID IID_TextStyleLevel;
extern __declspec (package) const GUID IID_HeaderFooter;
extern __declspec (package) const GUID CLSID_PowerPointPresentation;
extern __declspec (package) const GUID IID_Tags;
extern __declspec (package) const GUID IID_MouseTracker;
extern __declspec (package) const GUID IID_MouseDownHandler;
extern __declspec (package) const GUID IID_OCXExtender;
extern __declspec (package) const GUID IID_OCXExtenderEvents;
extern __declspec (package) const GUID CLSID_OLEControl;
extern __declspec (package) const GUID GUID_PpBorderType;
extern __declspec (package) const GUID GUID_PpHTMLVersion;
extern __declspec (package) const GUID GUID_PpPublishSourceType;
extern __declspec (package) const GUID GUID_PpBulletType;
extern __declspec (package) const GUID GUID_PpNumberedBulletStyle;
extern __declspec (package) const GUID GUID_PpShapeFormat;
extern __declspec (package) const GUID GUID_PpExportMode;
extern __declspec (package) const GUID CLSID_PowerPointApplication;
extern __declspec (package) const GUID IID_Table;
extern __declspec (package) const GUID IID_Columns;
extern __declspec (package) const GUID IID_Column;
extern __declspec (package) const GUID IID_Rows;
extern __declspec (package) const GUID IID_Row;
extern __declspec (package) const GUID IID_CellRange;
extern __declspec (package) const GUID IID_Cell;
extern __declspec (package) const GUID IID_Borders;
extern __declspec (package) const GUID IID_Panes;
extern __declspec (package) const GUID IID_Pane;
extern __declspec (package) const GUID IID_DefaultWebOptions;
extern __declspec (package) const GUID IID_WebOptions;
extern __declspec (package) const GUID IID_PublishObjects;
extern __declspec (package) const GUID IID_PublishObject;
extern __declspec (package) const GUID IID_MasterEvents;
extern __declspec (package) const GUID CLSID_Master;
extern __declspec (package) const GUID GUID_PpPasteDataType;
extern __declspec (package) const GUID IID__PowerRex;
extern __declspec (package) const GUID CLSID_PowerRex;
extern __declspec (package) const GUID IID_Comments;
extern __declspec (package) const GUID IID_Comment;
extern __declspec (package) const GUID IID_Designs;
extern __declspec (package) const GUID IID_Design;
extern __declspec (package) const GUID IID_DiagramNode;
extern __declspec (package) const GUID IID_DiagramNodeChildren;
extern __declspec (package) const GUID IID_DiagramNodes;
extern __declspec (package) const GUID IID_Diagram;
extern __declspec (package) const GUID IID_TimeLine;
extern __declspec (package) const GUID IID_Sequences;
extern __declspec (package) const GUID GUID_MsoAnimEffect;
extern __declspec (package) const GUID GUID_MsoAnimateByLevel;
extern __declspec (package) const GUID GUID_MsoAnimTriggerType;
extern __declspec (package) const GUID GUID_MsoAnimAfterEffect;
extern __declspec (package) const GUID GUID_MsoAnimTextUnitEffect;
extern __declspec (package) const GUID IID_Sequence;
extern __declspec (package) const GUID GUID_MsoAnimEffectRestart;
extern __declspec (package) const GUID GUID_MsoAnimEffectAfter;
extern __declspec (package) const GUID IID_Effect;
extern __declspec (package) const GUID IID_Timing;
extern __declspec (package) const GUID GUID_MsoAnimDirection;
extern __declspec (package) const GUID IID_EffectParameters;
extern __declspec (package) const GUID IID_EffectInformation;
extern __declspec (package) const GUID GUID_MsoAnimType;
extern __declspec (package) const GUID IID_AnimationBehaviors;
extern __declspec (package) const GUID GUID_MsoAnimAdditive;
extern __declspec (package) const GUID GUID_MsoAnimAccumulate;
extern __declspec (package) const GUID IID_AnimationBehavior;
extern __declspec (package) const GUID IID_MotionEffect;
extern __declspec (package) const GUID IID_ColorEffect;
extern __declspec (package) const GUID IID_ScaleEffect;
extern __declspec (package) const GUID IID_RotationEffect;
extern __declspec (package) const GUID GUID_MsoAnimProperty;
extern __declspec (package) const GUID IID_PropertyEffect;
extern __declspec (package) const GUID IID_AnimationPoints;
extern __declspec (package) const GUID IID_AnimationPoint;
extern __declspec (package) const GUID GUID_PpAlertLevel;
extern __declspec (package) const GUID IID_CanvasShapes;
extern __declspec (package) const GUID GUID_PpRevisionInfo;
extern __declspec (package) const GUID IID_AutoCorrect;
extern __declspec (package) const GUID IID_Options;
extern __declspec (package) const GUID GUID_MsoAnimCommandType;
extern __declspec (package) const GUID IID_CommandEffect;
extern __declspec (package) const GUID GUID_MsoAnimFilterEffectType;
extern __declspec (package) const GUID GUID_MsoAnimFilterEffectSubtype;
extern __declspec (package) const GUID IID_FilterEffect;
extern __declspec (package) const GUID IID_SetEffect;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      PpWindowState;
enum      PpArrangeStyle;
enum      PpViewType;
enum      PpColorSchemeIndex;
enum      PpSlideSizeType;
enum      PpSaveAsFileType;
enum      PpTextStyleType;
enum      PpSlideLayout;
enum      PpEntryEffect;
enum      PpTextLevelEffect;
enum      PpTextUnitEffect;
enum      PpChartUnitEffect;
enum      PpAfterEffect;
enum      PpAdvanceMode;
enum      PpSoundEffectType;
enum      PpFollowColors;
enum      PpUpdateOption;
enum      PpParagraphAlignment;
enum      PpBaselineAlignment;
enum      PpTabStopType;
enum      PpIndentControl;
enum      PpChangeCase;
enum      PpSlideShowPointerType;
enum      PpSlideShowState;
enum      PpSlideShowAdvanceMode;
enum      PpFileDialogType;
enum      PpPrintOutputType;
enum      PpPrintHandoutOrder;
enum      PpPrintColorType;
enum      PpSelectionType;
enum      PpDirection;
enum      PpDateTimeFormat;
enum      PpTransitionSpeed;
enum      PpMouseActivation;
enum      PpActionType;
enum      PpPlaceholderType;
enum      PpSlideShowType;
enum      PpPrintRangeType;
enum      PpAutoSize;
enum      PpMediaType;
enum      PpSoundFormatType;
enum      PpFarEastLineBreakLevel;
enum      PpSlideShowRangeType;
enum      PpFrameColors;
enum      PpBorderType;
enum      PpHTMLVersion;
enum      PpPublishSourceType;
enum      PpBulletType;
enum      PpNumberedBulletStyle;
enum      PpShapeFormat;
enum      PpExportMode;
enum      PpPasteDataType;
enum      MsoAnimEffect;
enum      MsoAnimateByLevel;
enum      MsoAnimTriggerType;
enum      MsoAnimAfterEffect;
enum      MsoAnimTextUnitEffect;
enum      MsoAnimEffectRestart;
enum      MsoAnimEffectAfter;
enum      MsoAnimDirection;
enum      MsoAnimType;
enum      MsoAnimAdditive;
enum      MsoAnimAccumulate;
enum      MsoAnimProperty;
enum      PpAlertLevel;
enum      PpRevisionInfo;
enum      MsoAnimCommandType;
enum      MsoAnimFilterEffectType;
enum      MsoAnimFilterEffectSubtype;
interface DECLSPEC_UUID("{91493450-5A91-11CF-8700-00AA0060263B}") Collection;
typedef TComInterface<Collection, &IID_Collection> CollectionPtr;

interface DECLSPEC_UUID("{91493442-5A91-11CF-8700-00AA0060263B}") _Application;
typedef TComInterface<_Application, &IID__Application> _ApplicationPtr;

interface DECLSPEC_UUID("{91493451-5A91-11CF-8700-00AA0060263B}") _Global;
typedef TComInterface<_Global, &IID__Global> _GlobalPtr;

interface DECLSPEC_UUID("{914934C2-5A91-11CF-8700-00AA0060263B}") EApplication;
typedef TComInterface<EApplication, &IID_EApplication> EApplicationPtr;

interface DECLSPEC_UUID("{91493452-5A91-11CF-8700-00AA0060263B}") ColorFormat;
typedef TComInterface<ColorFormat, &IID_ColorFormat> ColorFormatPtr;

interface DECLSPEC_UUID("{91493453-5A91-11CF-8700-00AA0060263B}") SlideShowWindow;
typedef TComInterface<SlideShowWindow, &IID_SlideShowWindow> SlideShowWindowPtr;

interface DECLSPEC_UUID("{91493454-5A91-11CF-8700-00AA0060263B}") Selection;
typedef TComInterface<Selection, &IID_Selection> SelectionPtr;

interface DECLSPEC_UUID("{91493455-5A91-11CF-8700-00AA0060263B}") DocumentWindows;
typedef TComInterface<DocumentWindows, &IID_DocumentWindows> DocumentWindowsPtr;

interface DECLSPEC_UUID("{91493456-5A91-11CF-8700-00AA0060263B}") SlideShowWindows;
typedef TComInterface<SlideShowWindows, &IID_SlideShowWindows> SlideShowWindowsPtr;

interface DECLSPEC_UUID("{91493457-5A91-11CF-8700-00AA0060263B}") DocumentWindow;
typedef TComInterface<DocumentWindow, &IID_DocumentWindow> DocumentWindowPtr;

interface DECLSPEC_UUID("{91493458-5A91-11CF-8700-00AA0060263B}") View;
typedef TComInterface<View, &IID_View> ViewPtr;

interface DECLSPEC_UUID("{91493459-5A91-11CF-8700-00AA0060263B}") SlideShowView;
typedef TComInterface<SlideShowView, &IID_SlideShowView> SlideShowViewPtr;

interface DECLSPEC_UUID("{9149345A-5A91-11CF-8700-00AA0060263B}") SlideShowSettings;
typedef TComInterface<SlideShowSettings, &IID_SlideShowSettings> SlideShowSettingsPtr;

interface DECLSPEC_UUID("{9149345B-5A91-11CF-8700-00AA0060263B}") NamedSlideShows;
typedef TComInterface<NamedSlideShows, &IID_NamedSlideShows> NamedSlideShowsPtr;

interface DECLSPEC_UUID("{9149345C-5A91-11CF-8700-00AA0060263B}") NamedSlideShow;
typedef TComInterface<NamedSlideShow, &IID_NamedSlideShow> NamedSlideShowPtr;

interface DECLSPEC_UUID("{9149345D-5A91-11CF-8700-00AA0060263B}") PrintOptions;
typedef TComInterface<PrintOptions, &IID_PrintOptions> PrintOptionsPtr;

interface DECLSPEC_UUID("{9149345E-5A91-11CF-8700-00AA0060263B}") PrintRanges;
typedef TComInterface<PrintRanges, &IID_PrintRanges> PrintRangesPtr;

interface DECLSPEC_UUID("{9149345F-5A91-11CF-8700-00AA0060263B}") PrintRange;
typedef TComInterface<PrintRange, &IID_PrintRange> PrintRangePtr;

interface DECLSPEC_UUID("{91493460-5A91-11CF-8700-00AA0060263B}") AddIns;
typedef TComInterface<AddIns, &IID_AddIns> AddInsPtr;

interface DECLSPEC_UUID("{91493461-5A91-11CF-8700-00AA0060263B}") AddIn;
typedef TComInterface<AddIn, &IID_AddIn> AddInPtr;

interface DECLSPEC_UUID("{91493462-5A91-11CF-8700-00AA0060263B}") Presentations;
typedef TComInterface<Presentations, &IID_Presentations> PresentationsPtr;

interface DECLSPEC_UUID("{91493463-5A91-11CF-8700-00AA0060263B}") PresEvents;
typedef TComInterface<PresEvents, &IID_PresEvents> PresEventsPtr;

interface DECLSPEC_UUID("{9149349D-5A91-11CF-8700-00AA0060263B}") _Presentation;
typedef TComInterface<_Presentation, &IID__Presentation> _PresentationPtr;

interface DECLSPEC_UUID("{91493464-5A91-11CF-8700-00AA0060263B}") Hyperlinks;
typedef TComInterface<Hyperlinks, &IID_Hyperlinks> HyperlinksPtr;

interface DECLSPEC_UUID("{91493465-5A91-11CF-8700-00AA0060263B}") Hyperlink;
typedef TComInterface<Hyperlink, &IID_Hyperlink> HyperlinkPtr;

interface DECLSPEC_UUID("{91493466-5A91-11CF-8700-00AA0060263B}") PageSetup;
typedef TComInterface<PageSetup, &IID_PageSetup> PageSetupPtr;

interface DECLSPEC_UUID("{91493467-5A91-11CF-8700-00AA0060263B}") Fonts;
typedef TComInterface<Fonts, &IID_Fonts> FontsPtr;

interface DECLSPEC_UUID("{91493468-5A91-11CF-8700-00AA0060263B}") ExtraColors;
typedef TComInterface<ExtraColors, &IID_ExtraColors> ExtraColorsPtr;

interface DECLSPEC_UUID("{91493469-5A91-11CF-8700-00AA0060263B}") Slides;
typedef TComInterface<Slides, &IID_Slides> SlidesPtr;

interface DECLSPEC_UUID("{9149346A-5A91-11CF-8700-00AA0060263B}") _Slide;
typedef TComInterface<_Slide, &IID__Slide> _SlidePtr;

interface DECLSPEC_UUID("{9149346B-5A91-11CF-8700-00AA0060263B}") SlideRange;
typedef TComInterface<SlideRange, &IID_SlideRange> SlideRangePtr;

interface DECLSPEC_UUID("{9149346C-5A91-11CF-8700-00AA0060263B}") _Master;
typedef TComInterface<_Master, &IID__Master> _MasterPtr;

interface DECLSPEC_UUID("{9149346D-5A91-11CF-8700-00AA0060263B}") SldEvents;
typedef TComInterface<SldEvents, &IID_SldEvents> SldEventsPtr;

interface DECLSPEC_UUID("{9149346E-5A91-11CF-8700-00AA0060263B}") ColorSchemes;
typedef TComInterface<ColorSchemes, &IID_ColorSchemes> ColorSchemesPtr;

interface DECLSPEC_UUID("{9149346F-5A91-11CF-8700-00AA0060263B}") ColorScheme;
typedef TComInterface<ColorScheme, &IID_ColorScheme> ColorSchemePtr;

interface DECLSPEC_UUID("{91493470-5A91-11CF-8700-00AA0060263B}") RGBColor;
typedef TComInterface<RGBColor, &IID_RGBColor> RGBColorPtr;

interface DECLSPEC_UUID("{91493471-5A91-11CF-8700-00AA0060263B}") SlideShowTransition;
typedef TComInterface<SlideShowTransition, &IID_SlideShowTransition> SlideShowTransitionPtr;

interface DECLSPEC_UUID("{91493472-5A91-11CF-8700-00AA0060263B}") SoundEffect;
typedef TComInterface<SoundEffect, &IID_SoundEffect> SoundEffectPtr;

interface DECLSPEC_UUID("{91493473-5A91-11CF-8700-00AA0060263B}") SoundFormat;
typedef TComInterface<SoundFormat, &IID_SoundFormat> SoundFormatPtr;

interface DECLSPEC_UUID("{91493474-5A91-11CF-8700-00AA0060263B}") HeadersFooters;
typedef TComInterface<HeadersFooters, &IID_HeadersFooters> HeadersFootersPtr;

interface DECLSPEC_UUID("{91493475-5A91-11CF-8700-00AA0060263B}") Shapes;
typedef TComInterface<Shapes, &IID_Shapes> ShapesPtr;

interface DECLSPEC_UUID("{91493476-5A91-11CF-8700-00AA0060263B}") Placeholders;
typedef TComInterface<Placeholders, &IID_Placeholders> PlaceholdersPtr;

interface DECLSPEC_UUID("{91493477-5A91-11CF-8700-00AA0060263B}") PlaceholderFormat;
typedef TComInterface<PlaceholderFormat, &IID_PlaceholderFormat> PlaceholderFormatPtr;

interface DECLSPEC_UUID("{91493478-5A91-11CF-8700-00AA0060263B}") FreeformBuilder;
typedef TComInterface<FreeformBuilder, &IID_FreeformBuilder> FreeformBuilderPtr;

interface DECLSPEC_UUID("{91493479-5A91-11CF-8700-00AA0060263B}") Shape;
typedef TComInterface<Shape, &IID_Shape> ShapePtr;

interface DECLSPEC_UUID("{9149347A-5A91-11CF-8700-00AA0060263B}") ShapeRange;
typedef TComInterface<ShapeRange, &IID_ShapeRange> ShapeRangePtr;

interface DECLSPEC_UUID("{9149347B-5A91-11CF-8700-00AA0060263B}") GroupShapes;
typedef TComInterface<GroupShapes, &IID_GroupShapes> GroupShapesPtr;

interface DECLSPEC_UUID("{9149347C-5A91-11CF-8700-00AA0060263B}") Adjustments;
typedef TComInterface<Adjustments, &IID_Adjustments> AdjustmentsPtr;

interface DECLSPEC_UUID("{9149347D-5A91-11CF-8700-00AA0060263B}") PictureFormat;
typedef TComInterface<PictureFormat, &IID_PictureFormat> PictureFormatPtr;

interface DECLSPEC_UUID("{9149347E-5A91-11CF-8700-00AA0060263B}") FillFormat;
typedef TComInterface<FillFormat, &IID_FillFormat> FillFormatPtr;

interface DECLSPEC_UUID("{9149347F-5A91-11CF-8700-00AA0060263B}") LineFormat;
typedef TComInterface<LineFormat, &IID_LineFormat> LineFormatPtr;

interface DECLSPEC_UUID("{91493480-5A91-11CF-8700-00AA0060263B}") ShadowFormat;
typedef TComInterface<ShadowFormat, &IID_ShadowFormat> ShadowFormatPtr;

interface DECLSPEC_UUID("{91493481-5A91-11CF-8700-00AA0060263B}") ConnectorFormat;
typedef TComInterface<ConnectorFormat, &IID_ConnectorFormat> ConnectorFormatPtr;

interface DECLSPEC_UUID("{91493482-5A91-11CF-8700-00AA0060263B}") TextEffectFormat;
typedef TComInterface<TextEffectFormat, &IID_TextEffectFormat> TextEffectFormatPtr;

interface DECLSPEC_UUID("{91493483-5A91-11CF-8700-00AA0060263B}") ThreeDFormat;
typedef TComInterface<ThreeDFormat, &IID_ThreeDFormat> ThreeDFormatPtr;

interface DECLSPEC_UUID("{91493484-5A91-11CF-8700-00AA0060263B}") TextFrame;
typedef TComInterface<TextFrame, &IID_TextFrame> TextFramePtr;

interface DECLSPEC_UUID("{91493485-5A91-11CF-8700-00AA0060263B}") CalloutFormat;
typedef TComInterface<CalloutFormat, &IID_CalloutFormat> CalloutFormatPtr;

interface DECLSPEC_UUID("{91493486-5A91-11CF-8700-00AA0060263B}") ShapeNodes;
typedef TComInterface<ShapeNodes, &IID_ShapeNodes> ShapeNodesPtr;

interface DECLSPEC_UUID("{91493487-5A91-11CF-8700-00AA0060263B}") ShapeNode;
typedef TComInterface<ShapeNode, &IID_ShapeNode> ShapeNodePtr;

interface DECLSPEC_UUID("{91493488-5A91-11CF-8700-00AA0060263B}") OLEFormat;
typedef TComInterface<OLEFormat, &IID_OLEFormat> OLEFormatPtr;

interface DECLSPEC_UUID("{91493489-5A91-11CF-8700-00AA0060263B}") LinkFormat;
typedef TComInterface<LinkFormat, &IID_LinkFormat> LinkFormatPtr;

interface DECLSPEC_UUID("{9149348A-5A91-11CF-8700-00AA0060263B}") ObjectVerbs;
typedef TComInterface<ObjectVerbs, &IID_ObjectVerbs> ObjectVerbsPtr;

interface DECLSPEC_UUID("{9149348B-5A91-11CF-8700-00AA0060263B}") AnimationSettings;
typedef TComInterface<AnimationSettings, &IID_AnimationSettings> AnimationSettingsPtr;

interface DECLSPEC_UUID("{9149348C-5A91-11CF-8700-00AA0060263B}") ActionSettings;
typedef TComInterface<ActionSettings, &IID_ActionSettings> ActionSettingsPtr;

interface DECLSPEC_UUID("{9149348D-5A91-11CF-8700-00AA0060263B}") ActionSetting;
typedef TComInterface<ActionSetting, &IID_ActionSetting> ActionSettingPtr;

interface DECLSPEC_UUID("{9149348E-5A91-11CF-8700-00AA0060263B}") PlaySettings;
typedef TComInterface<PlaySettings, &IID_PlaySettings> PlaySettingsPtr;

interface DECLSPEC_UUID("{9149348F-5A91-11CF-8700-00AA0060263B}") TextRange;
typedef TComInterface<TextRange, &IID_TextRange> TextRangePtr;

interface DECLSPEC_UUID("{91493490-5A91-11CF-8700-00AA0060263B}") Ruler;
typedef TComInterface<Ruler, &IID_Ruler> RulerPtr;

interface DECLSPEC_UUID("{91493491-5A91-11CF-8700-00AA0060263B}") RulerLevels;
typedef TComInterface<RulerLevels, &IID_RulerLevels> RulerLevelsPtr;

interface DECLSPEC_UUID("{91493492-5A91-11CF-8700-00AA0060263B}") RulerLevel;
typedef TComInterface<RulerLevel, &IID_RulerLevel> RulerLevelPtr;

interface DECLSPEC_UUID("{91493493-5A91-11CF-8700-00AA0060263B}") TabStops;
typedef TComInterface<TabStops, &IID_TabStops> TabStopsPtr;

interface DECLSPEC_UUID("{91493494-5A91-11CF-8700-00AA0060263B}") TabStop;
typedef TComInterface<TabStop, &IID_TabStop> TabStopPtr;

interface DECLSPEC_UUID("{91493495-5A91-11CF-8700-00AA0060263B}") Font;
typedef TComInterface<Font, &IID_Font> FontPtr;

interface DECLSPEC_UUID("{91493496-5A91-11CF-8700-00AA0060263B}") ParagraphFormat;
typedef TComInterface<ParagraphFormat, &IID_ParagraphFormat> ParagraphFormatPtr;

interface DECLSPEC_UUID("{91493497-5A91-11CF-8700-00AA0060263B}") BulletFormat;
typedef TComInterface<BulletFormat, &IID_BulletFormat> BulletFormatPtr;

interface DECLSPEC_UUID("{91493498-5A91-11CF-8700-00AA0060263B}") TextStyles;
typedef TComInterface<TextStyles, &IID_TextStyles> TextStylesPtr;

interface DECLSPEC_UUID("{91493499-5A91-11CF-8700-00AA0060263B}") TextStyle;
typedef TComInterface<TextStyle, &IID_TextStyle> TextStylePtr;

interface DECLSPEC_UUID("{9149349A-5A91-11CF-8700-00AA0060263B}") TextStyleLevels;
typedef TComInterface<TextStyleLevels, &IID_TextStyleLevels> TextStyleLevelsPtr;

interface DECLSPEC_UUID("{9149349B-5A91-11CF-8700-00AA0060263B}") TextStyleLevel;
typedef TComInterface<TextStyleLevel, &IID_TextStyleLevel> TextStyleLevelPtr;

interface DECLSPEC_UUID("{9149349C-5A91-11CF-8700-00AA0060263B}") HeaderFooter;
typedef TComInterface<HeaderFooter, &IID_HeaderFooter> HeaderFooterPtr;

interface DECLSPEC_UUID("{914934B9-5A91-11CF-8700-00AA0060263B}") Tags;
typedef TComInterface<Tags, &IID_Tags> TagsPtr;

interface DECLSPEC_UUID("{914934BE-5A91-11CF-8700-00AA0060263B}") MouseTracker;
typedef TComInterface<MouseTracker, &IID_MouseTracker> MouseTrackerPtr;

interface DECLSPEC_UUID("{914934BF-5A91-11CF-8700-00AA0060263B}") MouseDownHandler;
typedef TComInterface<MouseDownHandler, &IID_MouseDownHandler> MouseDownHandlerPtr;

interface DECLSPEC_UUID("{914934C0-5A91-11CF-8700-00AA0060263B}") OCXExtender;
typedef TComInterface<OCXExtender, &IID_OCXExtender> OCXExtenderPtr;

interface DECLSPEC_UUID("{914934C1-5A91-11CF-8700-00AA0060263B}") OCXExtenderEvents;
typedef TComInterface<OCXExtenderEvents, &IID_OCXExtenderEvents> OCXExtenderEventsPtr;

interface DECLSPEC_UUID("{914934C3-5A91-11CF-8700-00AA0060263B}") Table;
typedef TComInterface<Table, &IID_Table> TablePtr;

interface DECLSPEC_UUID("{914934C4-5A91-11CF-8700-00AA0060263B}") Columns;
typedef TComInterface<Columns, &IID_Columns> ColumnsPtr;

interface DECLSPEC_UUID("{914934C5-5A91-11CF-8700-00AA0060263B}") Column;
typedef TComInterface<Column, &IID_Column> ColumnPtr;

interface DECLSPEC_UUID("{914934C6-5A91-11CF-8700-00AA0060263B}") Rows;
typedef TComInterface<Rows, &IID_Rows> RowsPtr;

interface DECLSPEC_UUID("{914934C7-5A91-11CF-8700-00AA0060263B}") Row;
typedef TComInterface<Row, &IID_Row> RowPtr;

interface DECLSPEC_UUID("{914934C8-5A91-11CF-8700-00AA0060263B}") CellRange;
typedef TComInterface<CellRange, &IID_CellRange> CellRangePtr;

interface DECLSPEC_UUID("{914934C9-5A91-11CF-8700-00AA0060263B}") Cell;
typedef TComInterface<Cell, &IID_Cell> CellPtr;

interface DECLSPEC_UUID("{914934CA-5A91-11CF-8700-00AA0060263B}") Borders;
typedef TComInterface<Borders, &IID_Borders> BordersPtr;

interface DECLSPEC_UUID("{914934CB-5A91-11CF-8700-00AA0060263B}") Panes;
typedef TComInterface<Panes, &IID_Panes> PanesPtr;

interface DECLSPEC_UUID("{914934CC-5A91-11CF-8700-00AA0060263B}") Pane;
typedef TComInterface<Pane, &IID_Pane> PanePtr;

interface DECLSPEC_UUID("{914934CD-5A91-11CF-8700-00AA0060263B}") DefaultWebOptions;
typedef TComInterface<DefaultWebOptions, &IID_DefaultWebOptions> DefaultWebOptionsPtr;

interface DECLSPEC_UUID("{914934CE-5A91-11CF-8700-00AA0060263B}") WebOptions;
typedef TComInterface<WebOptions, &IID_WebOptions> WebOptionsPtr;

interface DECLSPEC_UUID("{914934CF-5A91-11CF-8700-00AA0060263B}") PublishObjects;
typedef TComInterface<PublishObjects, &IID_PublishObjects> PublishObjectsPtr;

interface DECLSPEC_UUID("{914934D0-5A91-11CF-8700-00AA0060263B}") PublishObject;
typedef TComInterface<PublishObject, &IID_PublishObject> PublishObjectPtr;

interface DECLSPEC_UUID("{914934D2-5A91-11CF-8700-00AA0060263B}") MasterEvents;
typedef TComInterface<MasterEvents, &IID_MasterEvents> MasterEventsPtr;

interface DECLSPEC_UUID("{914934D3-5A91-11CF-8700-00AA0060263B}") _PowerRex;
typedef TComInterface<_PowerRex, &IID__PowerRex> _PowerRexPtr;

interface DECLSPEC_UUID("{914934D4-5A91-11CF-8700-00AA0060263B}") Comments;
typedef TComInterface<Comments, &IID_Comments> CommentsPtr;

interface DECLSPEC_UUID("{914934D5-5A91-11CF-8700-00AA0060263B}") Comment;
typedef TComInterface<Comment, &IID_Comment> CommentPtr;

interface DECLSPEC_UUID("{914934D6-5A91-11CF-8700-00AA0060263B}") Designs;
typedef TComInterface<Designs, &IID_Designs> DesignsPtr;

interface DECLSPEC_UUID("{914934D7-5A91-11CF-8700-00AA0060263B}") Design;
typedef TComInterface<Design, &IID_Design> DesignPtr;

interface DECLSPEC_UUID("{914934D8-5A91-11CF-8700-00AA0060263B}") DiagramNode;
typedef TComInterface<DiagramNode, &IID_DiagramNode> DiagramNodePtr;

interface DECLSPEC_UUID("{914934D9-5A91-11CF-8700-00AA0060263B}") DiagramNodeChildren;
typedef TComInterface<DiagramNodeChildren, &IID_DiagramNodeChildren> DiagramNodeChildrenPtr;

interface DECLSPEC_UUID("{914934DA-5A91-11CF-8700-00AA0060263B}") DiagramNodes;
typedef TComInterface<DiagramNodes, &IID_DiagramNodes> DiagramNodesPtr;

interface DECLSPEC_UUID("{914934DB-5A91-11CF-8700-00AA0060263B}") Diagram;
typedef TComInterface<Diagram, &IID_Diagram> DiagramPtr;

interface DECLSPEC_UUID("{914934DC-5A91-11CF-8700-00AA0060263B}") TimeLine;
typedef TComInterface<TimeLine, &IID_TimeLine> TimeLinePtr;

interface DECLSPEC_UUID("{914934DD-5A91-11CF-8700-00AA0060263B}") Sequences;
typedef TComInterface<Sequences, &IID_Sequences> SequencesPtr;

interface DECLSPEC_UUID("{914934DE-5A91-11CF-8700-00AA0060263B}") Sequence;
typedef TComInterface<Sequence, &IID_Sequence> SequencePtr;

interface DECLSPEC_UUID("{914934DF-5A91-11CF-8700-00AA0060263B}") Effect;
typedef TComInterface<Effect, &IID_Effect> EffectPtr;

interface DECLSPEC_UUID("{914934E0-5A91-11CF-8700-00AA0060263B}") Timing;
typedef TComInterface<Timing, &IID_Timing> TimingPtr;

interface DECLSPEC_UUID("{914934E1-5A91-11CF-8700-00AA0060263B}") EffectParameters;
typedef TComInterface<EffectParameters, &IID_EffectParameters> EffectParametersPtr;

interface DECLSPEC_UUID("{914934E2-5A91-11CF-8700-00AA0060263B}") EffectInformation;
typedef TComInterface<EffectInformation, &IID_EffectInformation> EffectInformationPtr;

interface DECLSPEC_UUID("{914934E3-5A91-11CF-8700-00AA0060263B}") AnimationBehaviors;
typedef TComInterface<AnimationBehaviors, &IID_AnimationBehaviors> AnimationBehaviorsPtr;

interface DECLSPEC_UUID("{914934E4-5A91-11CF-8700-00AA0060263B}") AnimationBehavior;
typedef TComInterface<AnimationBehavior, &IID_AnimationBehavior> AnimationBehaviorPtr;

interface DECLSPEC_UUID("{914934E5-5A91-11CF-8700-00AA0060263B}") MotionEffect;
typedef TComInterface<MotionEffect, &IID_MotionEffect> MotionEffectPtr;

interface DECLSPEC_UUID("{914934E6-5A91-11CF-8700-00AA0060263B}") ColorEffect;
typedef TComInterface<ColorEffect, &IID_ColorEffect> ColorEffectPtr;

interface DECLSPEC_UUID("{914934E7-5A91-11CF-8700-00AA0060263B}") ScaleEffect;
typedef TComInterface<ScaleEffect, &IID_ScaleEffect> ScaleEffectPtr;

interface DECLSPEC_UUID("{914934E8-5A91-11CF-8700-00AA0060263B}") RotationEffect;
typedef TComInterface<RotationEffect, &IID_RotationEffect> RotationEffectPtr;

interface DECLSPEC_UUID("{914934E9-5A91-11CF-8700-00AA0060263B}") PropertyEffect;
typedef TComInterface<PropertyEffect, &IID_PropertyEffect> PropertyEffectPtr;

interface DECLSPEC_UUID("{914934EA-5A91-11CF-8700-00AA0060263B}") AnimationPoints;
typedef TComInterface<AnimationPoints, &IID_AnimationPoints> AnimationPointsPtr;

interface DECLSPEC_UUID("{914934EB-5A91-11CF-8700-00AA0060263B}") AnimationPoint;
typedef TComInterface<AnimationPoint, &IID_AnimationPoint> AnimationPointPtr;

interface DECLSPEC_UUID("{914934EC-5A91-11CF-8700-00AA0060263B}") CanvasShapes;
typedef TComInterface<CanvasShapes, &IID_CanvasShapes> CanvasShapesPtr;

interface DECLSPEC_UUID("{914934ED-5A91-11CF-8700-00AA0060263B}") AutoCorrect;
typedef TComInterface<AutoCorrect, &IID_AutoCorrect> AutoCorrectPtr;

interface DECLSPEC_UUID("{914934EE-5A91-11CF-8700-00AA0060263B}") Options;
typedef TComInterface<Options, &IID_Options> OptionsPtr;

interface DECLSPEC_UUID("{914934EF-5A91-11CF-8700-00AA0060263B}") CommandEffect;
typedef TComInterface<CommandEffect, &IID_CommandEffect> CommandEffectPtr;

interface DECLSPEC_UUID("{914934F0-5A91-11CF-8700-00AA0060263B}") FilterEffect;
typedef TComInterface<FilterEffect, &IID_FilterEffect> FilterEffectPtr;

interface DECLSPEC_UUID("{914934F1-5A91-11CF-8700-00AA0060263B}") SetEffect;
typedef TComInterface<SetEffect, &IID_SetEffect> SetEffectPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef _Global PowerPointGlobal;
typedef _GlobalPtr PowerPointGlobalPtr;
typedef _Slide PowerPointSlide;
typedef _SlidePtr PowerPointSlidePtr;
typedef _Presentation PowerPointPresentation;
typedef _PresentationPtr PowerPointPresentationPtr;
typedef OCXExtender OLEControl;
typedef OCXExtenderPtr OLEControlPtr;
typedef _Application PowerPointApplication;
typedef _ApplicationPtr PowerPointApplicationPtr;
typedef _Master Master;
typedef _MasterPtr MasterPtr;
typedef _PowerRex PowerRex;
typedef _PowerRexPtr PowerRexPtr;

#define LIBID_OF_PowerPointGlobal (&LIBID_PowerPoint)
#define LIBID_OF_PowerPointSlide (&LIBID_PowerPoint)
#define LIBID_OF_PowerPointPresentation (&LIBID_PowerPoint)
#define LIBID_OF_OLEControl (&LIBID_PowerPoint)
#define LIBID_OF_PowerPointApplication (&LIBID_PowerPoint)
#define LIBID_OF_Master (&LIBID_PowerPoint)
#define LIBID_OF_PowerRex (&LIBID_PowerPoint)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum PpWindowState
{
  ppWindowNormal = 1, 
  ppWindowMinimized = 2, 
  ppWindowMaximized = 3
} PpWindowState;

typedef enum PpArrangeStyle
{
  ppArrangeTiled = 1, 
  ppArrangeCascade = 2
} PpArrangeStyle;

typedef enum PpViewType
{
  ppViewSlide = 1, 
  ppViewSlideMaster = 2, 
  ppViewNotesPage = 3, 
  ppViewHandoutMaster = 4, 
  ppViewNotesMaster = 5, 
  ppViewOutline = 6, 
  ppViewSlideSorter = 7, 
  ppViewTitleMaster = 8, 
  ppViewNormal = 9, 
  ppViewPrintPreview = 10, 
  ppViewThumbnails = 11, 
  ppViewMasterThumbnails = 12
} PpViewType;

typedef enum PpColorSchemeIndex
{
  ppSchemeColorMixed = 0xFFFFFFFE, 
  ppNotSchemeColor = 0, 
  ppBackground = 1, 
  ppForeground = 2, 
  ppShadow = 3, 
  ppTitle = 4, 
  ppFill = 5, 
  ppAccent1 = 6, 
  ppAccent2 = 7, 
  ppAccent3 = 8
} PpColorSchemeIndex;

typedef enum PpSlideSizeType
{
  ppSlideSizeOnScreen = 1, 
  ppSlideSizeLetterPaper = 2, 
  ppSlideSizeA4Paper = 3, 
  ppSlideSize35MM = 4, 
  ppSlideSizeOverhead = 5, 
  ppSlideSizeBanner = 6, 
  ppSlideSizeCustom = 7, 
  ppSlideSizeLedgerPaper = 8, 
  ppSlideSizeA3Paper = 9, 
  ppSlideSizeB4ISOPaper = 10, 
  ppSlideSizeB5ISOPaper = 11, 
  ppSlideSizeB4JISPaper = 12, 
  ppSlideSizeB5JISPaper = 13, 
  ppSlideSizeHagakiCard = 14
} PpSlideSizeType;

typedef enum PpSaveAsFileType
{
  ppSaveAsPresentation = 1, 
  ppSaveAsPowerPoint7 = 2, 
  ppSaveAsPowerPoint4 = 3, 
  ppSaveAsPowerPoint3 = 4, 
  ppSaveAsTemplate = 5, 
  ppSaveAsRTF = 6, 
  ppSaveAsShow = 7, 
  ppSaveAsAddIn = 8, 
  ppSaveAsPowerPoint4FarEast = 10, 
  ppSaveAsDefault = 11, 
  ppSaveAsHTML = 12, 
  ppSaveAsHTMLv3 = 13, 
  ppSaveAsHTMLDual = 14, 
  ppSaveAsMetaFile = 15, 
  ppSaveAsGIF = 16, 
  ppSaveAsJPG = 17, 
  ppSaveAsPNG = 18, 
  ppSaveAsBMP = 19, 
  ppSaveAsWebArchive = 20, 
  ppSaveAsTIF = 21, 
  ppSaveAsPresForReview = 22, 
  ppSaveAsEMF = 23
} PpSaveAsFileType;

typedef enum PpTextStyleType
{
  ppDefaultStyle = 1, 
  ppTitleStyle = 2, 
  ppBodyStyle = 3
} PpTextStyleType;

typedef enum PpSlideLayout
{
  ppLayoutMixed = 0xFFFFFFFE, 
  ppLayoutTitle = 1, 
  ppLayoutText = 2, 
  ppLayoutTwoColumnText = 3, 
  ppLayoutTable = 4, 
  ppLayoutTextAndChart = 5, 
  ppLayoutChartAndText = 6, 
  ppLayoutOrgchart = 7, 
  ppLayoutChart = 8, 
  ppLayoutTextAndClipart = 9, 
  ppLayoutClipartAndText = 10, 
  ppLayoutTitleOnly = 11, 
  ppLayoutBlank = 12, 
  ppLayoutTextAndObject = 13, 
  ppLayoutObjectAndText = 14, 
  ppLayoutLargeObject = 15, 
  ppLayoutObject = 16, 
  ppLayoutTextAndMediaClip = 17, 
  ppLayoutMediaClipAndText = 18, 
  ppLayoutObjectOverText = 19, 
  ppLayoutTextOverObject = 20, 
  ppLayoutTextAndTwoObjects = 21, 
  ppLayoutTwoObjectsAndText = 22, 
  ppLayoutTwoObjectsOverText = 23, 
  ppLayoutFourObjects = 24, 
  ppLayoutVerticalText = 25, 
  ppLayoutClipArtAndVerticalText = 26, 
  ppLayoutVerticalTitleAndText = 27, 
  ppLayoutVerticalTitleAndTextOverChart = 28, 
  ppLayoutTwoObjects = 29, 
  ppLayoutObjectAndTwoObjects = 30, 
  ppLayoutTwoObjectsAndObject = 31
} PpSlideLayout;

typedef enum PpEntryEffect
{
  ppEffectMixed = 0xFFFFFFFE, 
  ppEffectNone = 0, 
  ppEffectCut = 257, 
  ppEffectCutThroughBlack = 258, 
  ppEffectRandom = 513, 
  ppEffectBlindsHorizontal = 769, 
  ppEffectBlindsVertical = 770, 
  ppEffectCheckerboardAcross = 1025, 
  ppEffectCheckerboardDown = 1026, 
  ppEffectCoverLeft = 1281, 
  ppEffectCoverUp = 1282, 
  ppEffectCoverRight = 1283, 
  ppEffectCoverDown = 1284, 
  ppEffectCoverLeftUp = 1285, 
  ppEffectCoverRightUp = 1286, 
  ppEffectCoverLeftDown = 1287, 
  ppEffectCoverRightDown = 1288, 
  ppEffectDissolve = 1537, 
  ppEffectFade = 1793, 
  ppEffectUncoverLeft = 2049, 
  ppEffectUncoverUp = 2050, 
  ppEffectUncoverRight = 2051, 
  ppEffectUncoverDown = 2052, 
  ppEffectUncoverLeftUp = 2053, 
  ppEffectUncoverRightUp = 2054, 
  ppEffectUncoverLeftDown = 2055, 
  ppEffectUncoverRightDown = 2056, 
  ppEffectRandomBarsHorizontal = 2305, 
  ppEffectRandomBarsVertical = 2306, 
  ppEffectStripsUpLeft = 2561, 
  ppEffectStripsUpRight = 2562, 
  ppEffectStripsDownLeft = 2563, 
  ppEffectStripsDownRight = 2564, 
  ppEffectStripsLeftUp = 2565, 
  ppEffectStripsRightUp = 2566, 
  ppEffectStripsLeftDown = 2567, 
  ppEffectStripsRightDown = 2568, 
  ppEffectWipeLeft = 2817, 
  ppEffectWipeUp = 2818, 
  ppEffectWipeRight = 2819, 
  ppEffectWipeDown = 2820, 
  ppEffectBoxOut = 3073, 
  ppEffectBoxIn = 3074, 
  ppEffectFlyFromLeft = 3329, 
  ppEffectFlyFromTop = 3330, 
  ppEffectFlyFromRight = 3331, 
  ppEffectFlyFromBottom = 3332, 
  ppEffectFlyFromTopLeft = 3333, 
  ppEffectFlyFromTopRight = 3334, 
  ppEffectFlyFromBottomLeft = 3335, 
  ppEffectFlyFromBottomRight = 3336, 
  ppEffectPeekFromLeft = 3337, 
  ppEffectPeekFromDown = 3338, 
  ppEffectPeekFromRight = 3339, 
  ppEffectPeekFromUp = 3340, 
  ppEffectCrawlFromLeft = 3341, 
  ppEffectCrawlFromUp = 3342, 
  ppEffectCrawlFromRight = 3343, 
  ppEffectCrawlFromDown = 3344, 
  ppEffectZoomIn = 3345, 
  ppEffectZoomInSlightly = 3346, 
  ppEffectZoomOut = 3347, 
  ppEffectZoomOutSlightly = 3348, 
  ppEffectZoomCenter = 3349, 
  ppEffectZoomBottom = 3350, 
  ppEffectStretchAcross = 3351, 
  ppEffectStretchLeft = 3352, 
  ppEffectStretchUp = 3353, 
  ppEffectStretchRight = 3354, 
  ppEffectStretchDown = 3355, 
  ppEffectSwivel = 3356, 
  ppEffectSpiral = 3357, 
  ppEffectSplitHorizontalOut = 3585, 
  ppEffectSplitHorizontalIn = 3586, 
  ppEffectSplitVerticalOut = 3587, 
  ppEffectSplitVerticalIn = 3588, 
  ppEffectFlashOnceFast = 3841, 
  ppEffectFlashOnceMedium = 3842, 
  ppEffectFlashOnceSlow = 3843, 
  ppEffectAppear = 3844, 
  ppEffectCircleOut = 3845, 
  ppEffectDiamondOut = 3846, 
  ppEffectCombHorizontal = 3847, 
  ppEffectCombVertical = 3848, 
  ppEffectFadeSmoothly = 3849, 
  ppEffectNewsflash = 3850, 
  ppEffectPlusOut = 3851, 
  ppEffectPushDown = 3852, 
  ppEffectPushLeft = 3853, 
  ppEffectPushRight = 3854, 
  ppEffectPushUp = 3855, 
  ppEffectWedge = 3856, 
  ppEffectWheel1Spoke = 3857, 
  ppEffectWheel2Spokes = 3858, 
  ppEffectWheel3Spokes = 3859, 
  ppEffectWheel4Spokes = 3860, 
  ppEffectWheel8Spokes = 3861
} PpEntryEffect;

typedef enum PpTextLevelEffect
{
  ppAnimateLevelMixed = 0xFFFFFFFE, 
  ppAnimateLevelNone = 0, 
  ppAnimateByFirstLevel = 1, 
  ppAnimateBySecondLevel = 2, 
  ppAnimateByThirdLevel = 3, 
  ppAnimateByFourthLevel = 4, 
  ppAnimateByFifthLevel = 5, 
  ppAnimateByAllLevels = 16
} PpTextLevelEffect;

typedef enum PpTextUnitEffect
{
  ppAnimateUnitMixed = 0xFFFFFFFE, 
  ppAnimateByParagraph = 0, 
  ppAnimateByWord = 1, 
  ppAnimateByCharacter = 2
} PpTextUnitEffect;

typedef enum PpChartUnitEffect
{
  ppAnimateChartMixed = 0xFFFFFFFE, 
  ppAnimateBySeries = 1, 
  ppAnimateByCategory = 2, 
  ppAnimateBySeriesElements = 3, 
  ppAnimateByCategoryElements = 4, 
  ppAnimateChartAllAtOnce = 5
} PpChartUnitEffect;

typedef enum PpAfterEffect
{
  ppAfterEffectMixed = 0xFFFFFFFE, 
  ppAfterEffectNothing = 0, 
  ppAfterEffectHide = 1, 
  ppAfterEffectDim = 2, 
  ppAfterEffectHideOnClick = 3
} PpAfterEffect;

typedef enum PpAdvanceMode
{
  ppAdvanceModeMixed = 0xFFFFFFFE, 
  ppAdvanceOnClick = 1, 
  ppAdvanceOnTime = 2
} PpAdvanceMode;

typedef enum PpSoundEffectType
{
  ppSoundEffectsMixed = 0xFFFFFFFE, 
  ppSoundNone = 0, 
  ppSoundStopPrevious = 1, 
  ppSoundFile = 2
} PpSoundEffectType;

typedef enum PpFollowColors
{
  ppFollowColorsMixed = 0xFFFFFFFE, 
  ppFollowColorsNone = 0, 
  ppFollowColorsScheme = 1, 
  ppFollowColorsTextAndBackground = 2
} PpFollowColors;

typedef enum PpUpdateOption
{
  ppUpdateOptionMixed = 0xFFFFFFFE, 
  ppUpdateOptionManual = 1, 
  ppUpdateOptionAutomatic = 2
} PpUpdateOption;

typedef enum PpParagraphAlignment
{
  ppAlignmentMixed = 0xFFFFFFFE, 
  ppAlignLeft = 1, 
  ppAlignCenter = 2, 
  ppAlignRight = 3, 
  ppAlignJustify = 4, 
  ppAlignDistribute = 5, 
  ppAlignThaiDistribute = 6, 
  ppAlignJustifyLow = 7
} PpParagraphAlignment;

typedef enum PpBaselineAlignment
{
  ppBaselineAlignMixed = 0xFFFFFFFE, 
  ppBaselineAlignBaseline = 1, 
  ppBaselineAlignTop = 2, 
  ppBaselineAlignCenter = 3, 
  ppBaselineAlignFarEast50 = 4
} PpBaselineAlignment;

typedef enum PpTabStopType
{
  ppTabStopMixed = 0xFFFFFFFE, 
  ppTabStopLeft = 1, 
  ppTabStopCenter = 2, 
  ppTabStopRight = 3, 
  ppTabStopDecimal = 4
} PpTabStopType;

typedef enum PpIndentControl
{
  ppIndentControlMixed = 0xFFFFFFFE, 
  ppIndentReplaceAttr = 1, 
  ppIndentKeepAttr = 2
} PpIndentControl;

typedef enum PpChangeCase
{
  ppCaseSentence = 1, 
  ppCaseLower = 2, 
  ppCaseUpper = 3, 
  ppCaseTitle = 4, 
  ppCaseToggle = 5
} PpChangeCase;

typedef enum PpSlideShowPointerType
{
  ppSlideShowPointerNone = 0, 
  ppSlideShowPointerArrow = 1, 
  ppSlideShowPointerPen = 2, 
  ppSlideShowPointerAlwaysHidden = 3, 
  ppSlideShowPointerAutoArrow = 4
} PpSlideShowPointerType;

typedef enum PpSlideShowState
{
  ppSlideShowRunning = 1, 
  ppSlideShowPaused = 2, 
  ppSlideShowBlackScreen = 3, 
  ppSlideShowWhiteScreen = 4, 
  ppSlideShowDone = 5
} PpSlideShowState;

typedef enum PpSlideShowAdvanceMode
{
  ppSlideShowManualAdvance = 1, 
  ppSlideShowUseSlideTimings = 2, 
  ppSlideShowRehearseNewTimings = 3
} PpSlideShowAdvanceMode;

typedef enum PpFileDialogType
{
  ppFileDialogOpen = 1, 
  ppFileDialogSave = 2
} PpFileDialogType;

typedef enum PpPrintOutputType
{
  ppPrintOutputSlides = 1, 
  ppPrintOutputTwoSlideHandouts = 2, 
  ppPrintOutputThreeSlideHandouts = 3, 
  ppPrintOutputSixSlideHandouts = 4, 
  ppPrintOutputNotesPages = 5, 
  ppPrintOutputOutline = 6, 
  ppPrintOutputBuildSlides = 7, 
  ppPrintOutputFourSlideHandouts = 8, 
  ppPrintOutputNineSlideHandouts = 9, 
  ppPrintOutputOneSlideHandouts = 10
} PpPrintOutputType;

typedef enum PpPrintHandoutOrder
{
  ppPrintHandoutVerticalFirst = 1, 
  ppPrintHandoutHorizontalFirst = 2
} PpPrintHandoutOrder;

typedef enum PpPrintColorType
{
  ppPrintColor = 1, 
  ppPrintBlackAndWhite = 2, 
  ppPrintPureBlackAndWhite = 3
} PpPrintColorType;

typedef enum PpSelectionType
{
  ppSelectionNone = 0, 
  ppSelectionSlides = 1, 
  ppSelectionShapes = 2, 
  ppSelectionText = 3
} PpSelectionType;

typedef enum PpDirection
{
  ppDirectionMixed = 0xFFFFFFFE, 
  ppDirectionLeftToRight = 1, 
  ppDirectionRightToLeft = 2
} PpDirection;

typedef enum PpDateTimeFormat
{
  ppDateTimeFormatMixed = 0xFFFFFFFE, 
  ppDateTimeMdyy = 1, 
  ppDateTimeddddMMMMddyyyy = 2, 
  ppDateTimedMMMMyyyy = 3, 
  ppDateTimeMMMMdyyyy = 4, 
  ppDateTimedMMMyy = 5, 
  ppDateTimeMMMMyy = 6, 
  ppDateTimeMMyy = 7, 
  ppDateTimeMMddyyHmm = 8, 
  ppDateTimeMMddyyhmmAMPM = 9, 
  ppDateTimeHmm = 10, 
  ppDateTimeHmmss = 11, 
  ppDateTimehmmAMPM = 12, 
  ppDateTimehmmssAMPM = 13, 
  ppDateTimeFigureOut = 14
} PpDateTimeFormat;

typedef enum PpTransitionSpeed
{
  ppTransitionSpeedMixed = 0xFFFFFFFE, 
  ppTransitionSpeedSlow = 1, 
  ppTransitionSpeedMedium = 2, 
  ppTransitionSpeedFast = 3
} PpTransitionSpeed;

typedef enum PpMouseActivation
{
  ppMouseClick = 1, 
  ppMouseOver = 2
} PpMouseActivation;

typedef enum PpActionType
{
  ppActionMixed = 0xFFFFFFFE, 
  ppActionNone = 0, 
  ppActionNextSlide = 1, 
  ppActionPreviousSlide = 2, 
  ppActionFirstSlide = 3, 
  ppActionLastSlide = 4, 
  ppActionLastSlideViewed = 5, 
  ppActionEndShow = 6, 
  ppActionHyperlink = 7, 
  ppActionRunMacro = 8, 
  ppActionRunProgram = 9, 
  ppActionNamedSlideShow = 10, 
  ppActionOLEVerb = 11, 
  ppActionPlay = 12
} PpActionType;

typedef enum PpPlaceholderType
{
  ppPlaceholderMixed = 0xFFFFFFFE, 
  ppPlaceholderTitle = 1, 
  ppPlaceholderBody = 2, 
  ppPlaceholderCenterTitle = 3, 
  ppPlaceholderSubtitle = 4, 
  ppPlaceholderVerticalTitle = 5, 
  ppPlaceholderVerticalBody = 6, 
  ppPlaceholderObject = 7, 
  ppPlaceholderChart = 8, 
  ppPlaceholderBitmap = 9, 
  ppPlaceholderMediaClip = 10, 
  ppPlaceholderOrgChart = 11, 
  ppPlaceholderTable = 12, 
  ppPlaceholderSlideNumber = 13, 
  ppPlaceholderHeader = 14, 
  ppPlaceholderFooter = 15, 
  ppPlaceholderDate = 16
} PpPlaceholderType;

typedef enum PpSlideShowType
{
  ppShowTypeSpeaker = 1, 
  ppShowTypeWindow = 2, 
  ppShowTypeKiosk = 3
} PpSlideShowType;

typedef enum PpPrintRangeType
{
  ppPrintAll = 1, 
  ppPrintSelection = 2, 
  ppPrintCurrent = 3, 
  ppPrintSlideRange = 4, 
  ppPrintNamedSlideShow = 5
} PpPrintRangeType;

typedef enum PpAutoSize
{
  ppAutoSizeMixed = 0xFFFFFFFE, 
  ppAutoSizeNone = 0, 
  ppAutoSizeShapeToFitText = 1
} PpAutoSize;

typedef enum PpMediaType
{
  ppMediaTypeMixed = 0xFFFFFFFE, 
  ppMediaTypeOther = 1, 
  ppMediaTypeSound = 2, 
  ppMediaTypeMovie = 3
} PpMediaType;

typedef enum PpSoundFormatType
{
  ppSoundFormatMixed = 0xFFFFFFFE, 
  ppSoundFormatNone = 0, 
  ppSoundFormatWAV = 1, 
  ppSoundFormatMIDI = 2, 
  ppSoundFormatCDAudio = 3
} PpSoundFormatType;

typedef enum PpFarEastLineBreakLevel
{
  ppFarEastLineBreakLevelNormal = 1, 
  ppFarEastLineBreakLevelStrict = 2, 
  ppFarEastLineBreakLevelCustom = 3
} PpFarEastLineBreakLevel;

typedef enum PpSlideShowRangeType
{
  ppShowAll = 1, 
  ppShowSlideRange = 2, 
  ppShowNamedSlideShow = 3
} PpSlideShowRangeType;

typedef enum PpFrameColors
{
  ppFrameColorsBrowserColors = 1, 
  ppFrameColorsPresentationSchemeTextColor = 2, 
  ppFrameColorsPresentationSchemeAccentColor = 3, 
  ppFrameColorsWhiteTextOnBlack = 4, 
  ppFrameColorsBlackTextOnWhite = 5
} PpFrameColors;

typedef enum PpBorderType
{
  ppBorderTop = 1, 
  ppBorderLeft = 2, 
  ppBorderBottom = 3, 
  ppBorderRight = 4, 
  ppBorderDiagonalDown = 5, 
  ppBorderDiagonalUp = 6
} PpBorderType;

typedef enum PpHTMLVersion
{
  ppHTMLv3 = 1, 
  ppHTMLv4 = 2, 
  ppHTMLDual = 3, 
  ppHTMLAutodetect = 4
} PpHTMLVersion;

typedef enum PpPublishSourceType
{
  ppPublishAll = 1, 
  ppPublishSlideRange = 2, 
  ppPublishNamedSlideShow = 3
} PpPublishSourceType;

typedef enum PpBulletType
{
  ppBulletMixed = 0xFFFFFFFE, 
  ppBulletNone = 0, 
  ppBulletUnnumbered = 1, 
  ppBulletNumbered = 2, 
  ppBulletPicture = 3
} PpBulletType;

typedef enum PpNumberedBulletStyle
{
  ppBulletStyleMixed = 0xFFFFFFFE, 
  ppBulletAlphaLCPeriod = 0, 
  ppBulletAlphaUCPeriod = 1, 
  ppBulletArabicParenRight = 2, 
  ppBulletArabicPeriod = 3, 
  ppBulletRomanLCParenBoth = 4, 
  ppBulletRomanLCParenRight = 5, 
  ppBulletRomanLCPeriod = 6, 
  ppBulletRomanUCPeriod = 7, 
  ppBulletAlphaLCParenBoth = 8, 
  ppBulletAlphaLCParenRight = 9, 
  ppBulletAlphaUCParenBoth = 10, 
  ppBulletAlphaUCParenRight = 11, 
  ppBulletArabicParenBoth = 12, 
  ppBulletArabicPlain = 13, 
  ppBulletRomanUCParenBoth = 14, 
  ppBulletRomanUCParenRight = 15, 
  ppBulletSimpChinPlain = 16, 
  ppBulletSimpChinPeriod = 17, 
  ppBulletCircleNumDBPlain = 18, 
  ppBulletCircleNumWDWhitePlain = 19, 
  ppBulletCircleNumWDBlackPlain = 20, 
  ppBulletTradChinPlain = 21, 
  ppBulletTradChinPeriod = 22, 
  ppBulletArabicAlphaDash = 23, 
  ppBulletArabicAbjadDash = 24, 
  ppBulletHebrewAlphaDash = 25, 
  ppBulletKanjiKoreanPlain = 26, 
  ppBulletKanjiKoreanPeriod = 27, 
  ppBulletArabicDBPlain = 28, 
  ppBulletArabicDBPeriod = 29, 
  ppBulletThaiAlphaPeriod = 30, 
  ppBulletThaiAlphaParenRight = 31, 
  ppBulletThaiAlphaParenBoth = 32, 
  ppBulletThaiNumPeriod = 33, 
  ppBulletThaiNumParenRight = 34, 
  ppBulletThaiNumParenBoth = 35, 
  ppBulletHindiAlphaPeriod = 36, 
  ppBulletHindiNumPeriod = 37, 
  ppBulletKanjiSimpChinDBPeriod = 38, 
  ppBulletHindiNumParenRight = 39, 
  ppBulletHindiAlpha1Period = 40
} PpNumberedBulletStyle;

typedef enum PpShapeFormat
{
  ppShapeFormatGIF = 0, 
  ppShapeFormatJPG = 1, 
  ppShapeFormatPNG = 2, 
  ppShapeFormatBMP = 3, 
  ppShapeFormatWMF = 4, 
  ppShapeFormatEMF = 5
} PpShapeFormat;

typedef enum PpExportMode
{
  ppRelativeToSlide = 1, 
  ppClipRelativeToSlide = 2, 
  ppScaleToFit = 3, 
  ppScaleXY = 4
} PpExportMode;

typedef enum PpPasteDataType
{
  ppPasteDefault = 0, 
  ppPasteBitmap = 1, 
  ppPasteEnhancedMetafile = 2, 
  ppPasteMetafilePicture = 3, 
  ppPasteGIF = 4, 
  ppPasteJPG = 5, 
  ppPastePNG = 6, 
  ppPasteText = 7, 
  ppPasteHTML = 8, 
  ppPasteRTF = 9, 
  ppPasteOLEObject = 10, 
  ppPasteShape = 11
} PpPasteDataType;

typedef enum MsoAnimEffect
{
  msoAnimEffectCustom = 0, 
  msoAnimEffectAppear = 1, 
  msoAnimEffectFly = 2, 
  msoAnimEffectBlinds = 3, 
  msoAnimEffectBox = 4, 
  msoAnimEffectCheckerboard = 5, 
  msoAnimEffectCircle = 6, 
  msoAnimEffectCrawl = 7, 
  msoAnimEffectDiamond = 8, 
  msoAnimEffectDissolve = 9, 
  msoAnimEffectFade = 10, 
  msoAnimEffectFlashOnce = 11, 
  msoAnimEffectPeek = 12, 
  msoAnimEffectPlus = 13, 
  msoAnimEffectRandomBars = 14, 
  msoAnimEffectSpiral = 15, 
  msoAnimEffectSplit = 16, 
  msoAnimEffectStretch = 17, 
  msoAnimEffectStrips = 18, 
  msoAnimEffectSwivel = 19, 
  msoAnimEffectWedge = 20, 
  msoAnimEffectWheel = 21, 
  msoAnimEffectWipe = 22, 
  msoAnimEffectZoom = 23, 
  msoAnimEffectRandomEffects = 24, 
  msoAnimEffectBoomerang = 25, 
  msoAnimEffectBounce = 26, 
  msoAnimEffectColorReveal = 27, 
  msoAnimEffectCredits = 28, 
  msoAnimEffectEaseIn = 29, 
  msoAnimEffectFloat = 30, 
  msoAnimEffectGrowAndTurn = 31, 
  msoAnimEffectLightSpeed = 32, 
  msoAnimEffectPinwheel = 33, 
  msoAnimEffectRiseUp = 34, 
  msoAnimEffectSwish = 35, 
  msoAnimEffectThinLine = 36, 
  msoAnimEffectUnfold = 37, 
  msoAnimEffectWhip = 38, 
  msoAnimEffectAscend = 39, 
  msoAnimEffectCenterRevolve = 40, 
  msoAnimEffectFadedSwivel = 41, 
  msoAnimEffectDescend = 42, 
  msoAnimEffectSling = 43, 
  msoAnimEffectSpinner = 44, 
  msoAnimEffectStretchy = 45, 
  msoAnimEffectZip = 46, 
  msoAnimEffectArcUp = 47, 
  msoAnimEffectFadedZoom = 48, 
  msoAnimEffectGlide = 49, 
  msoAnimEffectExpand = 50, 
  msoAnimEffectFlip = 51, 
  msoAnimEffectShimmer = 52, 
  msoAnimEffectFold = 53, 
  msoAnimEffectChangeFillColor = 54, 
  msoAnimEffectChangeFont = 55, 
  msoAnimEffectChangeFontColor = 56, 
  msoAnimEffectChangeFontSize = 57, 
  msoAnimEffectChangeFontStyle = 58, 
  msoAnimEffectGrowShrink = 59, 
  msoAnimEffectChangeLineColor = 60, 
  msoAnimEffectSpin = 61, 
  msoAnimEffectTransparency = 62, 
  msoAnimEffectBoldFlash = 63, 
  msoAnimEffectBlast = 64, 
  msoAnimEffectBoldReveal = 65, 
  msoAnimEffectBrushOnColor = 66, 
  msoAnimEffectBrushOnUnderline = 67, 
  msoAnimEffectColorBlend = 68, 
  msoAnimEffectColorWave = 69, 
  msoAnimEffectComplementaryColor = 70, 
  msoAnimEffectComplementaryColor2 = 71, 
  msoAnimEffectContrastingColor = 72, 
  msoAnimEffectDarken = 73, 
  msoAnimEffectDesaturate = 74, 
  msoAnimEffectFlashBulb = 75, 
  msoAnimEffectFlicker = 76, 
  msoAnimEffectGrowWithColor = 77, 
  msoAnimEffectLighten = 78, 
  msoAnimEffectStyleEmphasis = 79, 
  msoAnimEffectTeeter = 80, 
  msoAnimEffectVerticalGrow = 81, 
  msoAnimEffectWave = 82, 
  msoAnimEffectMediaPlay = 83, 
  msoAnimEffectMediaPause = 84, 
  msoAnimEffectMediaStop = 85, 
  msoAnimEffectPathCircle = 86, 
  msoAnimEffectPathRightTriangle = 87, 
  msoAnimEffectPathDiamond = 88, 
  msoAnimEffectPathHexagon = 89, 
  msoAnimEffectPath5PointStar = 90, 
  msoAnimEffectPathCrescentMoon = 91, 
  msoAnimEffectPathSquare = 92, 
  msoAnimEffectPathTrapezoid = 93, 
  msoAnimEffectPathHeart = 94, 
  msoAnimEffectPathOctagon = 95, 
  msoAnimEffectPath6PointStar = 96, 
  msoAnimEffectPathFootball = 97, 
  msoAnimEffectPathEqualTriangle = 98, 
  msoAnimEffectPathParallelogram = 99, 
  msoAnimEffectPathPentagon = 100, 
  msoAnimEffectPath4PointStar = 101, 
  msoAnimEffectPath8PointStar = 102, 
  msoAnimEffectPathTeardrop = 103, 
  msoAnimEffectPathPointyStar = 104, 
  msoAnimEffectPathCurvedSquare = 105, 
  msoAnimEffectPathCurvedX = 106, 
  msoAnimEffectPathVerticalFigure8 = 107, 
  msoAnimEffectPathCurvyStar = 108, 
  msoAnimEffectPathLoopdeLoop = 109, 
  msoAnimEffectPathBuzzsaw = 110, 
  msoAnimEffectPathHorizontalFigure8 = 111, 
  msoAnimEffectPathPeanut = 112, 
  msoAnimEffectPathFigure8Four = 113, 
  msoAnimEffectPathNeutron = 114, 
  msoAnimEffectPathSwoosh = 115, 
  msoAnimEffectPathBean = 116, 
  msoAnimEffectPathPlus = 117, 
  msoAnimEffectPathInvertedTriangle = 118, 
  msoAnimEffectPathInvertedSquare = 119, 
  msoAnimEffectPathLeft = 120, 
  msoAnimEffectPathTurnRight = 121, 
  msoAnimEffectPathArcDown = 122, 
  msoAnimEffectPathZigzag = 123, 
  msoAnimEffectPathSCurve2 = 124, 
  msoAnimEffectPathSineWave = 125, 
  msoAnimEffectPathBounceLeft = 126, 
  msoAnimEffectPathDown = 127, 
  msoAnimEffectPathTurnUp = 128, 
  msoAnimEffectPathArcUp = 129, 
  msoAnimEffectPathHeartbeat = 130, 
  msoAnimEffectPathSpiralRight = 131, 
  msoAnimEffectPathWave = 132, 
  msoAnimEffectPathCurvyLeft = 133, 
  msoAnimEffectPathDiagonalDownRight = 134, 
  msoAnimEffectPathTurnDown = 135, 
  msoAnimEffectPathArcLeft = 136, 
  msoAnimEffectPathFunnel = 137, 
  msoAnimEffectPathSpring = 138, 
  msoAnimEffectPathBounceRight = 139, 
  msoAnimEffectPathSpiralLeft = 140, 
  msoAnimEffectPathDiagonalUpRight = 141, 
  msoAnimEffectPathTurnUpRight = 142, 
  msoAnimEffectPathArcRight = 143, 
  msoAnimEffectPathSCurve1 = 144, 
  msoAnimEffectPathDecayingWave = 145, 
  msoAnimEffectPathCurvyRight = 146, 
  msoAnimEffectPathStairsDown = 147, 
  msoAnimEffectPathUp = 148, 
  msoAnimEffectPathRight = 149
} MsoAnimEffect;

typedef enum MsoAnimateByLevel
{
  msoAnimateLevelMixed = 0xFFFFFFFF, 
  msoAnimateLevelNone = 0, 
  msoAnimateTextByAllLevels = 1, 
  msoAnimateTextByFirstLevel = 2, 
  msoAnimateTextBySecondLevel = 3, 
  msoAnimateTextByThirdLevel = 4, 
  msoAnimateTextByFourthLevel = 5, 
  msoAnimateTextByFifthLevel = 6, 
  msoAnimateChartAllAtOnce = 7, 
  msoAnimateChartByCategory = 8, 
  msoAnimateChartByCategoryElements = 9, 
  msoAnimateChartBySeries = 10, 
  msoAnimateChartBySeriesElements = 11, 
  msoAnimateDiagramAllAtOnce = 12, 
  msoAnimateDiagramDepthByNode = 13, 
  msoAnimateDiagramDepthByBranch = 14, 
  msoAnimateDiagramBreadthByNode = 15, 
  msoAnimateDiagramBreadthByLevel = 16, 
  msoAnimateDiagramClockwise = 17, 
  msoAnimateDiagramClockwiseIn = 18, 
  msoAnimateDiagramClockwiseOut = 19, 
  msoAnimateDiagramCounterClockwise = 20, 
  msoAnimateDiagramCounterClockwiseIn = 21, 
  msoAnimateDiagramCounterClockwiseOut = 22, 
  msoAnimateDiagramInByRing = 23, 
  msoAnimateDiagramOutByRing = 24, 
  msoAnimateDiagramUp = 25, 
  msoAnimateDiagramDown = 26
} MsoAnimateByLevel;

typedef enum MsoAnimTriggerType
{
  msoAnimTriggerMixed = 0xFFFFFFFF, 
  msoAnimTriggerNone = 0, 
  msoAnimTriggerOnPageClick = 1, 
  msoAnimTriggerWithPrevious = 2, 
  msoAnimTriggerAfterPrevious = 3, 
  msoAnimTriggerOnShapeClick = 4
} MsoAnimTriggerType;

typedef enum MsoAnimAfterEffect
{
  msoAnimAfterEffectMixed = 0xFFFFFFFF, 
  msoAnimAfterEffectNone = 0, 
  msoAnimAfterEffectDim = 1, 
  msoAnimAfterEffectHide = 2, 
  msoAnimAfterEffectHideOnNextClick = 3
} MsoAnimAfterEffect;

typedef enum MsoAnimTextUnitEffect
{
  msoAnimTextUnitEffectMixed = 0xFFFFFFFF, 
  msoAnimTextUnitEffectByParagraph = 0, 
  msoAnimTextUnitEffectByCharacter = 1, 
  msoAnimTextUnitEffectByWord = 2
} MsoAnimTextUnitEffect;

typedef enum MsoAnimEffectRestart
{
  msoAnimEffectRestartAlways = 1, 
  msoAnimEffectRestartWhenOff = 2, 
  msoAnimEffectRestartNever = 3
} MsoAnimEffectRestart;

typedef enum MsoAnimEffectAfter
{
  msoAnimEffectAfterFreeze = 1, 
  msoAnimEffectAfterRemove = 2, 
  msoAnimEffectAfterHold = 3, 
  msoAnimEffectAfterTransition = 4
} MsoAnimEffectAfter;

typedef enum MsoAnimDirection
{
  msoAnimDirectionNone = 0, 
  msoAnimDirectionUp = 1, 
  msoAnimDirectionRight = 2, 
  msoAnimDirectionDown = 3, 
  msoAnimDirectionLeft = 4, 
  msoAnimDirectionOrdinalMask = 5, 
  msoAnimDirectionUpLeft = 6, 
  msoAnimDirectionUpRight = 7, 
  msoAnimDirectionDownRight = 8, 
  msoAnimDirectionDownLeft = 9, 
  msoAnimDirectionTop = 10, 
  msoAnimDirectionBottom = 11, 
  msoAnimDirectionTopLeft = 12, 
  msoAnimDirectionTopRight = 13, 
  msoAnimDirectionBottomRight = 14, 
  msoAnimDirectionBottomLeft = 15, 
  msoAnimDirectionHorizontal = 16, 
  msoAnimDirectionVertical = 17, 
  msoAnimDirectionAcross = 18, 
  msoAnimDirectionIn = 19, 
  msoAnimDirectionOut = 20, 
  msoAnimDirectionClockwise = 21, 
  msoAnimDirectionCounterclockwise = 22, 
  msoAnimDirectionHorizontalIn = 23, 
  msoAnimDirectionHorizontalOut = 24, 
  msoAnimDirectionVerticalIn = 25, 
  msoAnimDirectionVerticalOut = 26, 
  msoAnimDirectionSlightly = 27, 
  msoAnimDirectionCenter = 28, 
  msoAnimDirectionInSlightly = 29, 
  msoAnimDirectionInCenter = 30, 
  msoAnimDirectionInBottom = 31, 
  msoAnimDirectionOutSlightly = 32, 
  msoAnimDirectionOutCenter = 33, 
  msoAnimDirectionOutBottom = 34, 
  msoAnimDirectionFontBold = 35, 
  msoAnimDirectionFontItalic = 36, 
  msoAnimDirectionFontUnderline = 37, 
  msoAnimDirectionFontStrikethrough = 38, 
  msoAnimDirectionFontShadow = 39, 
  msoAnimDirectionFontAllCaps = 40, 
  msoAnimDirectionInstant = 41, 
  msoAnimDirectionGradual = 42, 
  msoAnimDirectionCycleClockwise = 43, 
  msoAnimDirectionCycleCounterclockwise = 44
} MsoAnimDirection;

typedef enum MsoAnimType
{
  msoAnimTypeMixed = 0xFFFFFFFE, 
  msoAnimTypeNone = 0, 
  msoAnimTypeMotion = 1, 
  msoAnimTypeColor = 2, 
  msoAnimTypeScale = 3, 
  msoAnimTypeRotation = 4, 
  msoAnimTypeProperty = 5, 
  msoAnimTypeCommand = 6, 
  msoAnimTypeFilter = 7, 
  msoAnimTypeSet = 8
} MsoAnimType;

typedef enum MsoAnimAdditive
{
  msoAnimAdditiveAddBase = 1, 
  msoAnimAdditiveAddSum = 2
} MsoAnimAdditive;

typedef enum MsoAnimAccumulate
{
  msoAnimAccumulateNone = 1, 
  msoAnimAccumulateAlways = 2
} MsoAnimAccumulate;

typedef enum MsoAnimProperty
{
  msoAnimNone = 0, 
  msoAnimX = 1, 
  msoAnimY = 2, 
  msoAnimWidth = 3, 
  msoAnimHeight = 4, 
  msoAnimOpacity = 5, 
  msoAnimRotation = 6, 
  msoAnimColor = 7, 
  msoAnimVisibility = 8, 
  msoAnimTextFontBold = 100, 
  msoAnimTextFontColor = 101, 
  msoAnimTextFontEmboss = 102, 
  msoAnimTextFontItalic = 103, 
  msoAnimTextFontName = 104, 
  msoAnimTextFontShadow = 105, 
  msoAnimTextFontSize = 106, 
  msoAnimTextFontSubscript = 107, 
  msoAnimTextFontSuperscript = 108, 
  msoAnimTextFontUnderline = 109, 
  msoAnimTextFontStrikeThrough = 110, 
  msoAnimTextBulletCharacter = 111, 
  msoAnimTextBulletFontName = 112, 
  msoAnimTextBulletNumber = 113, 
  msoAnimTextBulletColor = 114, 
  msoAnimTextBulletRelativeSize = 115, 
  msoAnimTextBulletStyle = 116, 
  msoAnimTextBulletType = 117, 
  msoAnimShapePictureContrast = 1000, 
  msoAnimShapePictureBrightness = 1001, 
  msoAnimShapePictureGamma = 1002, 
  msoAnimShapePictureGrayscale = 1003, 
  msoAnimShapeFillOn = 1004, 
  msoAnimShapeFillColor = 1005, 
  msoAnimShapeFillOpacity = 1006, 
  msoAnimShapeFillBackColor = 1007, 
  msoAnimShapeLineOn = 1008, 
  msoAnimShapeLineColor = 1009, 
  msoAnimShapeShadowOn = 1010, 
  msoAnimShapeShadowType = 1011, 
  msoAnimShapeShadowColor = 1012, 
  msoAnimShapeShadowOpacity = 1013, 
  msoAnimShapeShadowOffsetX = 1014, 
  msoAnimShapeShadowOffsetY = 1015
} MsoAnimProperty;

typedef enum PpAlertLevel
{
  ppAlertsNone = 1, 
  ppAlertsAll = 2
} PpAlertLevel;

typedef enum PpRevisionInfo
{
  ppRevisionInfoNone = 0, 
  ppRevisionInfoBaseline = 1, 
  ppRevisionInfoMerged = 2
} PpRevisionInfo;

typedef enum MsoAnimCommandType
{
  msoAnimCommandTypeEvent = 0, 
  msoAnimCommandTypeCall = 1, 
  msoAnimCommandTypeVerb = 2
} MsoAnimCommandType;

typedef enum MsoAnimFilterEffectType
{
  msoAnimFilterEffectTypeNone = 0, 
  msoAnimFilterEffectTypeBarn = 1, 
  msoAnimFilterEffectTypeBlinds = 2, 
  msoAnimFilterEffectTypeBox = 3, 
  msoAnimFilterEffectTypeCheckerboard = 4, 
  msoAnimFilterEffectTypeCircle = 5, 
  msoAnimFilterEffectTypeDiamond = 6, 
  msoAnimFilterEffectTypeDissolve = 7, 
  msoAnimFilterEffectTypeFade = 8, 
  msoAnimFilterEffectTypeImage = 9, 
  msoAnimFilterEffectTypePixelate = 10, 
  msoAnimFilterEffectTypePlus = 11, 
  msoAnimFilterEffectTypeRandomBar = 12, 
  msoAnimFilterEffectTypeSlide = 13, 
  msoAnimFilterEffectTypeStretch = 14, 
  msoAnimFilterEffectTypeStrips = 15, 
  msoAnimFilterEffectTypeWedge = 16, 
  msoAnimFilterEffectTypeWheel = 17, 
  msoAnimFilterEffectTypeWipe = 18
} MsoAnimFilterEffectType;

typedef enum MsoAnimFilterEffectSubtype
{
  msoAnimFilterEffectSubtypeNone = 0, 
  msoAnimFilterEffectSubtypeInVertical = 1, 
  msoAnimFilterEffectSubtypeOutVertical = 2, 
  msoAnimFilterEffectSubtypeInHorizontal = 3, 
  msoAnimFilterEffectSubtypeOutHorizontal = 4, 
  msoAnimFilterEffectSubtypeHorizontal = 5, 
  msoAnimFilterEffectSubtypeVertical = 6, 
  msoAnimFilterEffectSubtypeIn = 7, 
  msoAnimFilterEffectSubtypeOut = 8, 
  msoAnimFilterEffectSubtypeAcross = 9, 
  msoAnimFilterEffectSubtypeFromLeft = 10, 
  msoAnimFilterEffectSubtypeFromRight = 11, 
  msoAnimFilterEffectSubtypeFromTop = 12, 
  msoAnimFilterEffectSubtypeFromBottom = 13, 
  msoAnimFilterEffectSubtypeDownLeft = 14, 
  msoAnimFilterEffectSubtypeUpLeft = 15, 
  msoAnimFilterEffectSubtypeDownRight = 16, 
  msoAnimFilterEffectSubtypeUpRight = 17, 
  msoAnimFilterEffectSubtypeSpokes1 = 18, 
  msoAnimFilterEffectSubtypeSpokes2 = 19, 
  msoAnimFilterEffectSubtypeSpokes3 = 20, 
  msoAnimFilterEffectSubtypeSpokes4 = 21, 
  msoAnimFilterEffectSubtypeSpokes8 = 22, 
  msoAnimFilterEffectSubtypeLeft = 23, 
  msoAnimFilterEffectSubtypeRight = 24, 
  msoAnimFilterEffectSubtypeDown = 25, 
  msoAnimFilterEffectSubtypeUp = 26
} MsoAnimFilterEffectSubtype;

// *********************************************************************//
// Interface: Collection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {91493450-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Collection  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [11]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }

  VARIANT __fastcall _Index(int Index/*[in]*/)
  {
    VARIANT _Index;
    OLECHECK(this->_Index(Index, (VARIANT*)&_Index));
    return _Index;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Application
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493442-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface _Application  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Presentations(Powerpoint_xp::Presentations** Presentations/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Windows(Powerpoint_xp::DocumentWindows** Windows/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Dialogs(LPUNKNOWN* Dialogs/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveWindow(Powerpoint_xp::DocumentWindow** ActiveWindow/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_ActivePresentation(Powerpoint_xp::PowerPointPresentation** ActivePresentation/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowWindows(Powerpoint_xp::SlideShowWindows** SlideShowWindows/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_CommandBars(Office_xp::CommandBars** CommandBars/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Path(BSTR* Path/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Caption/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_Assistant(Office_xp::Assistant** Assistant/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_FileSearch(Office_xp::FileSearch** FileSearch/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_FileFind(Office_xp::IFind** FileFind/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_Build(BSTR* Build/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_Version(BSTR* Version/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_OperatingSystem(BSTR* OperatingSystem/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE get_ActivePrinter(BSTR* ActivePrinter/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* Creator/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE get_AddIns(Powerpoint_xp::AddIns** AddIns/*[out,retval]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE get_VBE(Vbide_xp::VBE** VBE/*[out,retval]*/) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE Help(BSTR HelpFile/*[in,def,opt]*/, 
                                         int ContextID/*[in,def,opt]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE Quit(void) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE Run(BSTR MacroName/*[in]*/, 
                                        LPSAFEARRAY* safeArrayOfParams/*[in]*/, 
                                        VARIANT* Run/*[out,retval]*/) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE PPFileDialog(Powerpoint_xp::PpFileDialogType Type/*[in]*/, 
                                                 LPUNKNOWN* PPFileDialog/*[out,retval]*/) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE LaunchSpelling(Powerpoint_xp::DocumentWindow* pWindow/*[in]*/) = 0; // [2024]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [2025]
  virtual HRESULT STDMETHODCALLTYPE set_Left(float Left/*[in]*/) = 0; // [2025]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [2026]
  virtual HRESULT STDMETHODCALLTYPE set_Top(float Top/*[in]*/) = 0; // [2026]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [2027]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [2027]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [2028]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [2028]
  virtual HRESULT STDMETHODCALLTYPE get_WindowState(Powerpoint_xp::PpWindowState* WindowState/*[out,retval]*/) = 0; // [2029]
  virtual HRESULT STDMETHODCALLTYPE set_WindowState(Powerpoint_xp::PpWindowState WindowState/*[in]*/) = 0; // [2029]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/) = 0; // [2030]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_xp::MsoTriState Visible/*[in]*/) = 0; // [2030]
  virtual HRESULT STDMETHODCALLTYPE get_HWND(long* HWND/*[out,retval]*/) = 0; // [2031]
  virtual HRESULT STDMETHODCALLTYPE get_Active(Office_xp::MsoTriState* Active/*[out,retval]*/) = 0; // [2032]
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [2033]
  virtual HRESULT STDMETHODCALLTYPE get_AnswerWizard(Office_xp::AnswerWizard** AnswerWizard/*[out,retval]*/) = 0; // [2034]
  virtual HRESULT STDMETHODCALLTYPE get_COMAddIns(Office_xp::COMAddIns** COMAddIns/*[out,retval]*/) = 0; // [2035]
  virtual HRESULT STDMETHODCALLTYPE get_ProductCode(BSTR* ProductCode/*[out,retval]*/) = 0; // [2036]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultWebOptions(Powerpoint_xp::DefaultWebOptions** DefaultWebOptions/*[out,retval]*/) = 0; // [2037]
  virtual HRESULT STDMETHODCALLTYPE get_LanguageSettings(Office_xp::LanguageSettings** LanguageSettings/*[out,retval]*/) = 0; // [2038]
  virtual HRESULT STDMETHODCALLTYPE get_MsoDebugOptions(Office_xp::MsoDebugOptions** MsoDebugOptions/*[out,retval]*/) = 0; // [2039]
  virtual HRESULT STDMETHODCALLTYPE get_ShowWindowsInTaskbar(Office_xp::MsoTriState* ShowWindowsInTaskbar/*[out,retval]*/) = 0; // [2040]
  virtual HRESULT STDMETHODCALLTYPE set_ShowWindowsInTaskbar(Office_xp::MsoTriState ShowWindowsInTaskbar/*[in]*/) = 0; // [2040]
  virtual HRESULT STDMETHODCALLTYPE get_Marker(LPUNKNOWN* Marker/*[out,retval]*/) = 0; // [2041]
  virtual HRESULT STDMETHODCALLTYPE get_FeatureInstall(Office_xp::MsoFeatureInstall* FeatureInstall/*[out,retval]*/) = 0; // [2042]
  virtual HRESULT STDMETHODCALLTYPE set_FeatureInstall(Office_xp::MsoFeatureInstall FeatureInstall/*[in]*/) = 0; // [2042]
  virtual HRESULT STDMETHODCALLTYPE GetOptionFlag(long Option/*[in]*/, 
                                                  VARIANT_BOOL Persist/*[in,def,opt]*/, 
                                                  VARIANT_BOOL* GetOptionFlag/*[out,retval]*/) = 0; // [2043]
  virtual HRESULT STDMETHODCALLTYPE SetOptionFlag(long Option/*[in]*/, VARIANT_BOOL State/*[in]*/, 
                                                  VARIANT_BOOL Persist/*[in,def,opt]*/) = 0; // [2044]
  virtual HRESULT STDMETHODCALLTYPE get_FileDialog(Office_xp::MsoFileDialogType Type/*[in]*/, 
                                                   Office_xp::FileDialog** FileDialog/*[out,retval]*/) = 0; // [2045]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayGridLines(Office_xp::MsoTriState* DisplayGridLines/*[out,retval]*/) = 0; // [2046]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayGridLines(Office_xp::MsoTriState DisplayGridLines/*[in]*/) = 0; // [2046]
  virtual HRESULT STDMETHODCALLTYPE get_AutomationSecurity(Office_xp::MsoAutomationSecurity* AutomationSecurity/*[out,retval]*/) = 0; // [2047]
  virtual HRESULT STDMETHODCALLTYPE set_AutomationSecurity(Office_xp::MsoAutomationSecurity AutomationSecurity/*[in]*/) = 0; // [2047]
  virtual HRESULT STDMETHODCALLTYPE get_NewPresentation(Office_xp::NewFile** NewPresentation/*[out,retval]*/) = 0; // [2048]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayAlerts(Powerpoint_xp::PpAlertLevel* DisplayAlerts/*[out,retval]*/) = 0; // [2049]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayAlerts(Powerpoint_xp::PpAlertLevel DisplayAlerts/*[in]*/) = 0; // [2049]
  virtual HRESULT STDMETHODCALLTYPE get_ShowStartupDialog(Office_xp::MsoTriState* ShowStartupDialog/*[out,retval]*/) = 0; // [2050]
  virtual HRESULT STDMETHODCALLTYPE set_ShowStartupDialog(Office_xp::MsoTriState ShowStartupDialog/*[in]*/) = 0; // [2050]
  virtual HRESULT STDMETHODCALLTYPE SetPerfMarker(int Marker/*[in]*/) = 0; // [2051]
  virtual HRESULT STDMETHODCALLTYPE get_AutoCorrect(Powerpoint_xp::AutoCorrect** AutoCorrect/*[out,retval]*/) = 0; // [2052]
  virtual HRESULT STDMETHODCALLTYPE get_Options(Powerpoint_xp::Options** Options/*[out,retval]*/) = 0; // [2053]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::Presentations* __fastcall get_Presentations(void)
  {
    Powerpoint_xp::Presentations* Presentations;
    OLECHECK(this->get_Presentations((Powerpoint_xp::Presentations**)&Presentations));
    return Presentations;
  }

  Powerpoint_xp::DocumentWindows* __fastcall get_Windows(void)
  {
    Powerpoint_xp::DocumentWindows* Windows;
    OLECHECK(this->get_Windows((Powerpoint_xp::DocumentWindows**)&Windows));
    return Windows;
  }

  LPUNKNOWN __fastcall get_Dialogs(void)
  {
    LPUNKNOWN Dialogs;
    OLECHECK(this->get_Dialogs((LPUNKNOWN*)&Dialogs));
    return Dialogs;
  }

  Powerpoint_xp::DocumentWindow* __fastcall get_ActiveWindow(void)
  {
    Powerpoint_xp::DocumentWindow* ActiveWindow;
    OLECHECK(this->get_ActiveWindow((Powerpoint_xp::DocumentWindow**)&ActiveWindow));
    return ActiveWindow;
  }

  Powerpoint_xp::PowerPointPresentation* __fastcall get_ActivePresentation(void)
  {
    Powerpoint_xp::PowerPointPresentation* ActivePresentation;
    OLECHECK(this->get_ActivePresentation((Powerpoint_xp::PowerPointPresentation**)&ActivePresentation));
    return ActivePresentation;
  }

  Powerpoint_xp::SlideShowWindows* __fastcall get_SlideShowWindows(void)
  {
    Powerpoint_xp::SlideShowWindows* SlideShowWindows;
    OLECHECK(this->get_SlideShowWindows((Powerpoint_xp::SlideShowWindows**)&SlideShowWindows));
    return SlideShowWindows;
  }

  Office_xp::CommandBars* __fastcall get_CommandBars(void)
  {
    Office_xp::CommandBars* CommandBars;
    OLECHECK(this->get_CommandBars((Office_xp::CommandBars**)&CommandBars));
    return CommandBars;
  }

  BSTR __fastcall get_Path(void)
  {
    BSTR Path = 0;
    OLECHECK(this->get_Path((BSTR*)&Path));
    return Path;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  Office_xp::Assistant* __fastcall get_Assistant(void)
  {
    Office_xp::Assistant* Assistant;
    OLECHECK(this->get_Assistant((Office_xp::Assistant**)&Assistant));
    return Assistant;
  }

  Office_xp::FileSearch* __fastcall get_FileSearch(void)
  {
    Office_xp::FileSearch* FileSearch;
    OLECHECK(this->get_FileSearch((Office_xp::FileSearch**)&FileSearch));
    return FileSearch;
  }

  Office_xp::IFind* __fastcall get_FileFind(void)
  {
    Office_xp::IFind* FileFind;
    OLECHECK(this->get_FileFind((Office_xp::IFind**)&FileFind));
    return FileFind;
  }

  BSTR __fastcall get_Build(void)
  {
    BSTR Build = 0;
    OLECHECK(this->get_Build((BSTR*)&Build));
    return Build;
  }

  BSTR __fastcall get_Version(void)
  {
    BSTR Version = 0;
    OLECHECK(this->get_Version((BSTR*)&Version));
    return Version;
  }

  BSTR __fastcall get_OperatingSystem(void)
  {
    BSTR OperatingSystem = 0;
    OLECHECK(this->get_OperatingSystem((BSTR*)&OperatingSystem));
    return OperatingSystem;
  }

  BSTR __fastcall get_ActivePrinter(void)
  {
    BSTR ActivePrinter = 0;
    OLECHECK(this->get_ActivePrinter((BSTR*)&ActivePrinter));
    return ActivePrinter;
  }

  long __fastcall get_Creator(void)
  {
    long Creator;
    OLECHECK(this->get_Creator((long*)&Creator));
    return Creator;
  }

  Powerpoint_xp::AddIns* __fastcall get_AddIns(void)
  {
    Powerpoint_xp::AddIns* AddIns;
    OLECHECK(this->get_AddIns((Powerpoint_xp::AddIns**)&AddIns));
    return AddIns;
  }

  Vbide_xp::VBE* __fastcall get_VBE(void)
  {
    Vbide_xp::VBE* VBE;
    OLECHECK(this->get_VBE((Vbide_xp::VBE**)&VBE));
    return VBE;
  }

  VARIANT __fastcall Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/)
  {
    VARIANT Run;
    OLECHECK(this->Run(MacroName, safeArrayOfParams, (VARIANT*)&Run));
    return Run;
  }

  LPUNKNOWN __fastcall PPFileDialog(Powerpoint_xp::PpFileDialogType Type/*[in]*/)
  {
    LPUNKNOWN PPFileDialog;
    OLECHECK(this->PPFileDialog(Type, (LPUNKNOWN*)&PPFileDialog));
    return PPFileDialog;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  Powerpoint_xp::PpWindowState __fastcall get_WindowState(void)
  {
    Powerpoint_xp::PpWindowState WindowState;
    OLECHECK(this->get_WindowState((Powerpoint_xp::PpWindowState*)&WindowState));
    return WindowState;
  }

  Office_xp::MsoTriState __fastcall get_Visible(void)
  {
    Office_xp::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_xp::MsoTriState*)&Visible));
    return Visible;
  }

  long __fastcall get_HWND(void)
  {
    long HWND;
    OLECHECK(this->get_HWND((long*)&HWND));
    return HWND;
  }

  Office_xp::MsoTriState __fastcall get_Active(void)
  {
    Office_xp::MsoTriState Active;
    OLECHECK(this->get_Active((Office_xp::MsoTriState*)&Active));
    return Active;
  }

  Office_xp::AnswerWizard* __fastcall get_AnswerWizard(void)
  {
    Office_xp::AnswerWizard* AnswerWizard;
    OLECHECK(this->get_AnswerWizard((Office_xp::AnswerWizard**)&AnswerWizard));
    return AnswerWizard;
  }

  Office_xp::COMAddIns* __fastcall get_COMAddIns(void)
  {
    Office_xp::COMAddIns* COMAddIns;
    OLECHECK(this->get_COMAddIns((Office_xp::COMAddIns**)&COMAddIns));
    return COMAddIns;
  }

  BSTR __fastcall get_ProductCode(void)
  {
    BSTR ProductCode = 0;
    OLECHECK(this->get_ProductCode((BSTR*)&ProductCode));
    return ProductCode;
  }

  Powerpoint_xp::DefaultWebOptions* __fastcall get_DefaultWebOptions(void)
  {
    Powerpoint_xp::DefaultWebOptions* DefaultWebOptions;
    OLECHECK(this->get_DefaultWebOptions((Powerpoint_xp::DefaultWebOptions**)&DefaultWebOptions));
    return DefaultWebOptions;
  }

  Office_xp::LanguageSettings* __fastcall get_LanguageSettings(void)
  {
    Office_xp::LanguageSettings* LanguageSettings;
    OLECHECK(this->get_LanguageSettings((Office_xp::LanguageSettings**)&LanguageSettings));
    return LanguageSettings;
  }

  Office_xp::MsoDebugOptions* __fastcall get_MsoDebugOptions(void)
  {
    Office_xp::MsoDebugOptions* MsoDebugOptions;
    OLECHECK(this->get_MsoDebugOptions((Office_xp::MsoDebugOptions**)&MsoDebugOptions));
    return MsoDebugOptions;
  }

  Office_xp::MsoTriState __fastcall get_ShowWindowsInTaskbar(void)
  {
    Office_xp::MsoTriState ShowWindowsInTaskbar;
    OLECHECK(this->get_ShowWindowsInTaskbar((Office_xp::MsoTriState*)&ShowWindowsInTaskbar));
    return ShowWindowsInTaskbar;
  }

  LPUNKNOWN __fastcall get_Marker(void)
  {
    LPUNKNOWN Marker;
    OLECHECK(this->get_Marker((LPUNKNOWN*)&Marker));
    return Marker;
  }

  Office_xp::MsoFeatureInstall __fastcall get_FeatureInstall(void)
  {
    Office_xp::MsoFeatureInstall FeatureInstall;
    OLECHECK(this->get_FeatureInstall((Office_xp::MsoFeatureInstall*)&FeatureInstall));
    return FeatureInstall;
  }

  VARIANT_BOOL __fastcall GetOptionFlag(long Option/*[in]*/, VARIANT_BOOL Persist/*[in,def,opt]*/)
  {
    VARIANT_BOOL GetOptionFlag;
    OLECHECK(this->GetOptionFlag(Option, Persist, (VARIANT_BOOL*)&GetOptionFlag));
    return GetOptionFlag;
  }

  Office_xp::FileDialog* __fastcall get_FileDialog(Office_xp::MsoFileDialogType Type/*[in]*/)
  {
    Office_xp::FileDialog* FileDialog;
    OLECHECK(this->get_FileDialog(Type, (Office_xp::FileDialog**)&FileDialog));
    return FileDialog;
  }

  Office_xp::MsoTriState __fastcall get_DisplayGridLines(void)
  {
    Office_xp::MsoTriState DisplayGridLines;
    OLECHECK(this->get_DisplayGridLines((Office_xp::MsoTriState*)&DisplayGridLines));
    return DisplayGridLines;
  }

  Office_xp::MsoAutomationSecurity __fastcall get_AutomationSecurity(void)
  {
    Office_xp::MsoAutomationSecurity AutomationSecurity;
    OLECHECK(this->get_AutomationSecurity((Office_xp::MsoAutomationSecurity*)&AutomationSecurity));
    return AutomationSecurity;
  }

  Office_xp::NewFile* __fastcall get_NewPresentation(void)
  {
    Office_xp::NewFile* NewPresentation;
    OLECHECK(this->get_NewPresentation((Office_xp::NewFile**)&NewPresentation));
    return NewPresentation;
  }

  Powerpoint_xp::PpAlertLevel __fastcall get_DisplayAlerts(void)
  {
    Powerpoint_xp::PpAlertLevel DisplayAlerts;
    OLECHECK(this->get_DisplayAlerts((Powerpoint_xp::PpAlertLevel*)&DisplayAlerts));
    return DisplayAlerts;
  }

  Office_xp::MsoTriState __fastcall get_ShowStartupDialog(void)
  {
    Office_xp::MsoTriState ShowStartupDialog;
    OLECHECK(this->get_ShowStartupDialog((Office_xp::MsoTriState*)&ShowStartupDialog));
    return ShowStartupDialog;
  }

  Powerpoint_xp::AutoCorrect* __fastcall get_AutoCorrect(void)
  {
    Powerpoint_xp::AutoCorrect* AutoCorrect;
    OLECHECK(this->get_AutoCorrect((Powerpoint_xp::AutoCorrect**)&AutoCorrect));
    return AutoCorrect;
  }

  Powerpoint_xp::Options* __fastcall get_Options(void)
  {
    Powerpoint_xp::Options* Options;
    OLECHECK(this->get_Options((Powerpoint_xp::Options**)&Options));
    return Options;
  }


  __property   Powerpoint_xp::Presentations* Presentations = {read = get_Presentations};
  __property   Powerpoint_xp::DocumentWindows* Windows = {read = get_Windows};
  __property   LPUNKNOWN       Dialogs = {read = get_Dialogs};
  __property   Powerpoint_xp::DocumentWindow* ActiveWindow = {read = get_ActiveWindow};
  __property   Powerpoint_xp::PowerPointPresentation* ActivePresentation = {read = get_ActivePresentation};
  __property   Powerpoint_xp::SlideShowWindows* SlideShowWindows = {read = get_SlideShowWindows};
  __property   Office_xp::CommandBars* CommandBars = {read = get_CommandBars};
  __property   BSTR            Path = {read = get_Path};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Caption = {read = get_Caption};
  __property   Office_xp::Assistant* Assistant = {read = get_Assistant};
  __property   Office_xp::FileSearch* FileSearch = {read = get_FileSearch};
  __property   Office_xp::IFind* FileFind = {read = get_FileFind};
  __property   BSTR            Build = {read = get_Build};
  __property   BSTR            Version = {read = get_Version};
  __property   BSTR            OperatingSystem = {read = get_OperatingSystem};
  __property   BSTR            ActivePrinter = {read = get_ActivePrinter};
  __property   long            Creator = {read = get_Creator};
  __property   Powerpoint_xp::AddIns* AddIns = {read = get_AddIns};
  __property   Vbide_xp::VBE*  VBE = {read = get_VBE};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Powerpoint_xp::PpWindowState WindowState = {read = get_WindowState, write = set_WindowState};
  __property   Office_xp::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   long            HWND = {read = get_HWND};
  __property   Office_xp::MsoTriState Active = {read = get_Active};
  __property   Office_xp::AnswerWizard* AnswerWizard = {read = get_AnswerWizard};
  __property   Office_xp::COMAddIns* COMAddIns = {read = get_COMAddIns};
  __property   BSTR            ProductCode = {read = get_ProductCode};
  __property   Powerpoint_xp::DefaultWebOptions* DefaultWebOptions = {read = get_DefaultWebOptions};
  __property   Office_xp::LanguageSettings* LanguageSettings = {read = get_LanguageSettings};
  __property   Office_xp::MsoDebugOptions* MsoDebugOptions = {read = get_MsoDebugOptions};
  __property   Office_xp::MsoTriState ShowWindowsInTaskbar = {read = get_ShowWindowsInTaskbar, write = set_ShowWindowsInTaskbar};
  __property   LPUNKNOWN       Marker = {read = get_Marker};
  __property   Office_xp::MsoFeatureInstall FeatureInstall = {read = get_FeatureInstall, write = set_FeatureInstall};
  __property   Office_xp::MsoTriState DisplayGridLines = {read = get_DisplayGridLines, write = set_DisplayGridLines};
  __property   Office_xp::MsoAutomationSecurity AutomationSecurity = {read = get_AutomationSecurity, write = set_AutomationSecurity};
  __property   Office_xp::NewFile* NewPresentation = {read = get_NewPresentation};
  __property   Powerpoint_xp::PpAlertLevel DisplayAlerts = {read = get_DisplayAlerts, write = set_DisplayAlerts};
  __property   Office_xp::MsoTriState ShowStartupDialog = {read = get_ShowStartupDialog, write = set_ShowStartupDialog};
  __property   Powerpoint_xp::AutoCorrect* AutoCorrect = {read = get_AutoCorrect};
  __property   Powerpoint_xp::Options* Options = {read = get_Options};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Global
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493451-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface _Global  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ActivePresentation(Powerpoint_xp::PowerPointPresentation** ActivePresentation/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveWindow(Powerpoint_xp::DocumentWindow** ActiveWindow/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_AddIns(Powerpoint_xp::AddIns** AddIns/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Assistant(Office_xp::Assistant** Assistant/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Dialogs(LPUNKNOWN* Dialogs/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Presentations(Powerpoint_xp::Presentations** Presentations/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowWindows(Powerpoint_xp::SlideShowWindows** SlideShowWindows/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_Windows(Powerpoint_xp::DocumentWindows** Windows/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_CommandBars(Office_xp::CommandBars** CommandBars/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_AnswerWizard(Office_xp::AnswerWizard** AnswerWizard/*[out,retval]*/) = 0; // [2011]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointPresentation* __fastcall get_ActivePresentation(void)
  {
    Powerpoint_xp::PowerPointPresentation* ActivePresentation;
    OLECHECK(this->get_ActivePresentation((Powerpoint_xp::PowerPointPresentation**)&ActivePresentation));
    return ActivePresentation;
  }

  Powerpoint_xp::DocumentWindow* __fastcall get_ActiveWindow(void)
  {
    Powerpoint_xp::DocumentWindow* ActiveWindow;
    OLECHECK(this->get_ActiveWindow((Powerpoint_xp::DocumentWindow**)&ActiveWindow));
    return ActiveWindow;
  }

  Powerpoint_xp::AddIns* __fastcall get_AddIns(void)
  {
    Powerpoint_xp::AddIns* AddIns;
    OLECHECK(this->get_AddIns((Powerpoint_xp::AddIns**)&AddIns));
    return AddIns;
  }

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  Office_xp::Assistant* __fastcall get_Assistant(void)
  {
    Office_xp::Assistant* Assistant;
    OLECHECK(this->get_Assistant((Office_xp::Assistant**)&Assistant));
    return Assistant;
  }

  LPUNKNOWN __fastcall get_Dialogs(void)
  {
    LPUNKNOWN Dialogs;
    OLECHECK(this->get_Dialogs((LPUNKNOWN*)&Dialogs));
    return Dialogs;
  }

  Powerpoint_xp::Presentations* __fastcall get_Presentations(void)
  {
    Powerpoint_xp::Presentations* Presentations;
    OLECHECK(this->get_Presentations((Powerpoint_xp::Presentations**)&Presentations));
    return Presentations;
  }

  Powerpoint_xp::SlideShowWindows* __fastcall get_SlideShowWindows(void)
  {
    Powerpoint_xp::SlideShowWindows* SlideShowWindows;
    OLECHECK(this->get_SlideShowWindows((Powerpoint_xp::SlideShowWindows**)&SlideShowWindows));
    return SlideShowWindows;
  }

  Powerpoint_xp::DocumentWindows* __fastcall get_Windows(void)
  {
    Powerpoint_xp::DocumentWindows* Windows;
    OLECHECK(this->get_Windows((Powerpoint_xp::DocumentWindows**)&Windows));
    return Windows;
  }

  Office_xp::CommandBars* __fastcall get_CommandBars(void)
  {
    Office_xp::CommandBars* CommandBars;
    OLECHECK(this->get_CommandBars((Office_xp::CommandBars**)&CommandBars));
    return CommandBars;
  }

  Office_xp::AnswerWizard* __fastcall get_AnswerWizard(void)
  {
    Office_xp::AnswerWizard* AnswerWizard;
    OLECHECK(this->get_AnswerWizard((Office_xp::AnswerWizard**)&AnswerWizard));
    return AnswerWizard;
  }


  __property   Powerpoint_xp::PowerPointPresentation* ActivePresentation = {read = get_ActivePresentation};
  __property   Powerpoint_xp::DocumentWindow* ActiveWindow = {read = get_ActiveWindow};
  __property   Powerpoint_xp::AddIns* AddIns = {read = get_AddIns};
  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   Office_xp::Assistant* Assistant = {read = get_Assistant};
  __property   LPUNKNOWN       Dialogs = {read = get_Dialogs};
  __property   Powerpoint_xp::Presentations* Presentations = {read = get_Presentations};
  __property   Powerpoint_xp::SlideShowWindows* SlideShowWindows = {read = get_SlideShowWindows};
  __property   Powerpoint_xp::DocumentWindows* Windows = {read = get_Windows};
  __property   Office_xp::CommandBars* CommandBars = {read = get_CommandBars};
  __property   Office_xp::AnswerWizard* AnswerWizard = {read = get_AnswerWizard};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: EApplication
// Flags:     (4096) Dispatchable
// GUID:      {914934C2-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface EApplication  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE WindowSelectionChange(Powerpoint_xp::Selection* Sel/*[in]*/); // [2001]
   HRESULT STDMETHODCALLTYPE WindowBeforeRightClick(Powerpoint_xp::Selection* Sel/*[in]*/, 
                                                    VARIANT_BOOL* Cancel/*[in,out]*/); // [2002]
   HRESULT STDMETHODCALLTYPE WindowBeforeDoubleClick(Powerpoint_xp::Selection* Sel/*[in]*/, 
                                                     VARIANT_BOOL* Cancel/*[in,out]*/); // [2003]
   HRESULT STDMETHODCALLTYPE PresentationClose(Powerpoint_xp::PowerPointPresentation* Pres/*[in]*/); // [2004]
   HRESULT STDMETHODCALLTYPE PresentationSave(Powerpoint_xp::PowerPointPresentation* Pres/*[in]*/); // [2005]
   HRESULT STDMETHODCALLTYPE PresentationOpen(Powerpoint_xp::PowerPointPresentation* Pres/*[in]*/); // [2006]
   HRESULT STDMETHODCALLTYPE NewPresentation(Powerpoint_xp::PowerPointPresentation* Pres/*[in]*/); // [2007]
   HRESULT STDMETHODCALLTYPE PresentationNewSlide(Powerpoint_xp::PowerPointSlide* Sld/*[in]*/); // [2008]
   HRESULT STDMETHODCALLTYPE WindowActivate(Powerpoint_xp::PowerPointPresentation* Pres/*[in]*/, 
                                            Powerpoint_xp::DocumentWindow* Wn/*[in]*/); // [2009]
   HRESULT STDMETHODCALLTYPE WindowDeactivate(Powerpoint_xp::PowerPointPresentation* Pres/*[in]*/, 
                                              Powerpoint_xp::DocumentWindow* Wn/*[in]*/); // [2010]
   HRESULT STDMETHODCALLTYPE SlideShowBegin(Powerpoint_xp::SlideShowWindow* Wn/*[in]*/); // [2011]
   HRESULT STDMETHODCALLTYPE SlideShowNextBuild(Powerpoint_xp::SlideShowWindow* Wn/*[in]*/); // [2012]
   HRESULT STDMETHODCALLTYPE SlideShowNextSlide(Powerpoint_xp::SlideShowWindow* Wn/*[in]*/); // [2013]
   HRESULT STDMETHODCALLTYPE SlideShowEnd(Powerpoint_xp::PowerPointPresentation* Pres/*[in]*/); // [2014]
   HRESULT STDMETHODCALLTYPE PresentationPrint(Powerpoint_xp::PowerPointPresentation* Pres/*[in]*/); // [2015]
   HRESULT STDMETHODCALLTYPE SlideSelectionChanged(Powerpoint_xp::SlideRange* SldRange/*[in]*/); // [2016]
   HRESULT STDMETHODCALLTYPE ColorSchemeChanged(Powerpoint_xp::SlideRange* SldRange/*[in]*/); // [2017]
   HRESULT STDMETHODCALLTYPE PresentationBeforeSave(Powerpoint_xp::PowerPointPresentation* Pres/*[in]*/, 
                                                    VARIANT_BOOL* Cancel/*[in,out]*/); // [2018]
   HRESULT STDMETHODCALLTYPE SlideShowNextClick(Powerpoint_xp::SlideShowWindow* Wn/*[in]*/, 
                                                Powerpoint_xp::Effect* nEffect/*[in]*/); // [2019]
};

// *********************************************************************//
// Interface: ColorFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493452-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ColorFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_rgb(Office_xp::MsoRGBType* rgb/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_rgb(Office_xp::MsoRGBType rgb/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_xp::MsoColorType* Type/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_SchemeColor(Powerpoint_xp::PpColorSchemeIndex* SchemeColor/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_SchemeColor(Powerpoint_xp::PpColorSchemeIndex SchemeColor/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_TintAndShade(float* pValue/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_TintAndShade(float pValue/*[in]*/) = 0; // [103]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_xp::MsoRGBType __fastcall get_rgb(void)
  {
    Office_xp::MsoRGBType rgb;
    OLECHECK(this->get_rgb((Office_xp::MsoRGBType*)&rgb));
    return rgb;
  }

  Office_xp::MsoColorType __fastcall get_Type(void)
  {
    Office_xp::MsoColorType Type;
    OLECHECK(this->get_Type((Office_xp::MsoColorType*)&Type));
    return Type;
  }

  Powerpoint_xp::PpColorSchemeIndex __fastcall get_SchemeColor(void)
  {
    Powerpoint_xp::PpColorSchemeIndex SchemeColor;
    OLECHECK(this->get_SchemeColor((Powerpoint_xp::PpColorSchemeIndex*)&SchemeColor));
    return SchemeColor;
  }

  float __fastcall get_TintAndShade(void)
  {
    float pValue;
    OLECHECK(this->get_TintAndShade((float*)&pValue));
    return pValue;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoRGBType rgb = {read = get_rgb, write = set_rgb};
  __property   Office_xp::MsoColorType Type = {read = get_Type};
  __property   Powerpoint_xp::PpColorSchemeIndex SchemeColor = {read = get_SchemeColor, write = set_SchemeColor};
  __property   float           TintAndShade = {read = get_TintAndShade, write = set_TintAndShade};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SlideShowWindow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493453-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface SlideShowWindow  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_View(Powerpoint_xp::SlideShowView** View/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Presentation(Powerpoint_xp::PowerPointPresentation** Presentation/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_IsFullScreen(Office_xp::MsoTriState* IsFullScreen/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_Left(float Left/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_Top(float Top/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_HWND(long* HWND/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_Active(Office_xp::MsoTriState* Active/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [2012]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::SlideShowView* __fastcall get_View(void)
  {
    Powerpoint_xp::SlideShowView* View;
    OLECHECK(this->get_View((Powerpoint_xp::SlideShowView**)&View));
    return View;
  }

  Powerpoint_xp::PowerPointPresentation* __fastcall get_Presentation(void)
  {
    Powerpoint_xp::PowerPointPresentation* Presentation;
    OLECHECK(this->get_Presentation((Powerpoint_xp::PowerPointPresentation**)&Presentation));
    return Presentation;
  }

  Office_xp::MsoTriState __fastcall get_IsFullScreen(void)
  {
    Office_xp::MsoTriState IsFullScreen;
    OLECHECK(this->get_IsFullScreen((Office_xp::MsoTriState*)&IsFullScreen));
    return IsFullScreen;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  long __fastcall get_HWND(void)
  {
    long HWND;
    OLECHECK(this->get_HWND((long*)&HWND));
    return HWND;
  }

  Office_xp::MsoTriState __fastcall get_Active(void)
  {
    Office_xp::MsoTriState Active;
    OLECHECK(this->get_Active((Office_xp::MsoTriState*)&Active));
    return Active;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::SlideShowView* View = {read = get_View};
  __property   Powerpoint_xp::PowerPointPresentation* Presentation = {read = get_Presentation};
  __property   Office_xp::MsoTriState IsFullScreen = {read = get_IsFullScreen};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   Office_xp::MsoTriState Active = {read = get_Active};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Selection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493454-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Selection  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Cut(void) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Copy(void) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE Unselect(void) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Powerpoint_xp::PpSelectionType* Type/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_SlideRange(Powerpoint_xp::SlideRange** SlideRange/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_ShapeRange(Powerpoint_xp::ShapeRange** ShapeRange/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_TextRange(Powerpoint_xp::TextRange** TextRange/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_ChildShapeRange(Powerpoint_xp::ShapeRange** ChildShapeRange/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_HasChildShapeRange(VARIANT_BOOL* HasChildShapeRange/*[out,retval]*/) = 0; // [2012]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::PpSelectionType __fastcall get_Type(void)
  {
    Powerpoint_xp::PpSelectionType Type;
    OLECHECK(this->get_Type((Powerpoint_xp::PpSelectionType*)&Type));
    return Type;
  }

  Powerpoint_xp::SlideRange* __fastcall get_SlideRange(void)
  {
    Powerpoint_xp::SlideRange* SlideRange;
    OLECHECK(this->get_SlideRange((Powerpoint_xp::SlideRange**)&SlideRange));
    return SlideRange;
  }

  Powerpoint_xp::ShapeRange* __fastcall get_ShapeRange(void)
  {
    Powerpoint_xp::ShapeRange* ShapeRange;
    OLECHECK(this->get_ShapeRange((Powerpoint_xp::ShapeRange**)&ShapeRange));
    return ShapeRange;
  }

  Powerpoint_xp::TextRange* __fastcall get_TextRange(void)
  {
    Powerpoint_xp::TextRange* TextRange;
    OLECHECK(this->get_TextRange((Powerpoint_xp::TextRange**)&TextRange));
    return TextRange;
  }

  Powerpoint_xp::ShapeRange* __fastcall get_ChildShapeRange(void)
  {
    Powerpoint_xp::ShapeRange* ChildShapeRange;
    OLECHECK(this->get_ChildShapeRange((Powerpoint_xp::ShapeRange**)&ChildShapeRange));
    return ChildShapeRange;
  }

  VARIANT_BOOL __fastcall get_HasChildShapeRange(void)
  {
    VARIANT_BOOL HasChildShapeRange;
    OLECHECK(this->get_HasChildShapeRange((VARIANT_BOOL*)&HasChildShapeRange));
    return HasChildShapeRange;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::PpSelectionType Type = {read = get_Type};
  __property   Powerpoint_xp::SlideRange* SlideRange = {read = get_SlideRange};
  __property   Powerpoint_xp::ShapeRange* ShapeRange = {read = get_ShapeRange};
  __property   Powerpoint_xp::TextRange* TextRange = {read = get_TextRange};
  __property   Powerpoint_xp::ShapeRange* ChildShapeRange = {read = get_ChildShapeRange};
  __property   VARIANT_BOOL    HasChildShapeRange = {read = get_HasChildShapeRange};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DocumentWindows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493455-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface DocumentWindows  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, 
                                         Powerpoint_xp::DocumentWindow** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Arrange(Powerpoint_xp::PpArrangeStyle arrangeStyle/*[in,def,opt]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::DocumentWindow* __fastcall Item(int Index/*[in]*/)
  {
    Powerpoint_xp::DocumentWindow* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::DocumentWindow**)&Item));
    return Item;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SlideShowWindows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493456-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface SlideShowWindows  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, 
                                         Powerpoint_xp::SlideShowWindow** Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::SlideShowWindow* __fastcall Item(int Index/*[in]*/)
  {
    Powerpoint_xp::SlideShowWindow* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::SlideShowWindow**)&Item));
    return Item;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DocumentWindow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493457-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface DocumentWindow  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Selection(Powerpoint_xp::Selection** Selection/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_View(Powerpoint_xp::View** View/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Presentation(Powerpoint_xp::PowerPointPresentation** Presentation/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_ViewType(Powerpoint_xp::PpViewType* ViewType/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_ViewType(Powerpoint_xp::PpViewType ViewType/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_BlackAndWhite(Office_xp::MsoTriState* BlackAndWhite/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_BlackAndWhite(Office_xp::MsoTriState BlackAndWhite/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Active(Office_xp::MsoTriState* Active/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_WindowState(Powerpoint_xp::PpWindowState* WindowState/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_WindowState(Powerpoint_xp::PpWindowState WindowState/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_Left(float Left/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE set_Top(float Top/*[in]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE FitToPage(void) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE LargeScroll(int Down/*[in,def,opt]*/, int Up/*[in,def,opt]*/, 
                                                int ToRight/*[in,def,opt]*/, 
                                                int ToLeft/*[in,def,opt]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE SmallScroll(int Down/*[in,def,opt]*/, int Up/*[in,def,opt]*/, 
                                                int ToRight/*[in,def,opt]*/, 
                                                int ToLeft/*[in,def,opt]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE NewWindow(Powerpoint_xp::DocumentWindow** NewWindow/*[out,retval]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Close(void) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE get_HWND(long* HWND/*[out,retval]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE get_ActivePane(Powerpoint_xp::Pane** ActivePane/*[out,retval]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE get_Panes(Powerpoint_xp::Panes** Panes/*[out,retval]*/) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_SplitVertical(long* SplitVertical/*[out,retval]*/) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE set_SplitVertical(long SplitVertical/*[in]*/) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE get_SplitHorizontal(long* SplitHorizontal/*[out,retval]*/) = 0; // [2024]
  virtual HRESULT STDMETHODCALLTYPE set_SplitHorizontal(long SplitHorizontal/*[in]*/) = 0; // [2024]
  virtual HRESULT STDMETHODCALLTYPE RangeFromPoint(int X/*[in]*/, int Y/*[in]*/, 
                                                   LPDISPATCH* RangeFromPoint/*[out,retval]*/) = 0; // [2025]
  virtual HRESULT STDMETHODCALLTYPE PointsToScreenPixelsX(float Points/*[in]*/, 
                                                          int* PointsToScreenPixelsX/*[out,retval]*/) = 0; // [2026]
  virtual HRESULT STDMETHODCALLTYPE PointsToScreenPixelsY(float Points/*[in]*/, 
                                                          int* PointsToScreenPixelsY/*[out,retval]*/) = 0; // [2027]
  virtual HRESULT STDMETHODCALLTYPE ScrollIntoView(float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in]*/, float Height/*[in]*/, 
                                                   Office_xp::MsoTriState Start/*[in,def,opt]*/) = 0; // [2028]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Selection* __fastcall get_Selection(void)
  {
    Powerpoint_xp::Selection* Selection;
    OLECHECK(this->get_Selection((Powerpoint_xp::Selection**)&Selection));
    return Selection;
  }

  Powerpoint_xp::View* __fastcall get_View(void)
  {
    Powerpoint_xp::View* View;
    OLECHECK(this->get_View((Powerpoint_xp::View**)&View));
    return View;
  }

  Powerpoint_xp::PowerPointPresentation* __fastcall get_Presentation(void)
  {
    Powerpoint_xp::PowerPointPresentation* Presentation;
    OLECHECK(this->get_Presentation((Powerpoint_xp::PowerPointPresentation**)&Presentation));
    return Presentation;
  }

  Powerpoint_xp::PpViewType __fastcall get_ViewType(void)
  {
    Powerpoint_xp::PpViewType ViewType;
    OLECHECK(this->get_ViewType((Powerpoint_xp::PpViewType*)&ViewType));
    return ViewType;
  }

  Office_xp::MsoTriState __fastcall get_BlackAndWhite(void)
  {
    Office_xp::MsoTriState BlackAndWhite;
    OLECHECK(this->get_BlackAndWhite((Office_xp::MsoTriState*)&BlackAndWhite));
    return BlackAndWhite;
  }

  Office_xp::MsoTriState __fastcall get_Active(void)
  {
    Office_xp::MsoTriState Active;
    OLECHECK(this->get_Active((Office_xp::MsoTriState*)&Active));
    return Active;
  }

  Powerpoint_xp::PpWindowState __fastcall get_WindowState(void)
  {
    Powerpoint_xp::PpWindowState WindowState;
    OLECHECK(this->get_WindowState((Powerpoint_xp::PpWindowState*)&WindowState));
    return WindowState;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  Powerpoint_xp::DocumentWindow* __fastcall NewWindow(void)
  {
    Powerpoint_xp::DocumentWindow* NewWindow;
    OLECHECK(this->NewWindow((Powerpoint_xp::DocumentWindow**)&NewWindow));
    return NewWindow;
  }

  long __fastcall get_HWND(void)
  {
    long HWND;
    OLECHECK(this->get_HWND((long*)&HWND));
    return HWND;
  }

  Powerpoint_xp::Pane* __fastcall get_ActivePane(void)
  {
    Powerpoint_xp::Pane* ActivePane;
    OLECHECK(this->get_ActivePane((Powerpoint_xp::Pane**)&ActivePane));
    return ActivePane;
  }

  Powerpoint_xp::Panes* __fastcall get_Panes(void)
  {
    Powerpoint_xp::Panes* Panes;
    OLECHECK(this->get_Panes((Powerpoint_xp::Panes**)&Panes));
    return Panes;
  }

  long __fastcall get_SplitVertical(void)
  {
    long SplitVertical;
    OLECHECK(this->get_SplitVertical((long*)&SplitVertical));
    return SplitVertical;
  }

  long __fastcall get_SplitHorizontal(void)
  {
    long SplitHorizontal;
    OLECHECK(this->get_SplitHorizontal((long*)&SplitHorizontal));
    return SplitHorizontal;
  }

  LPDISPATCH __fastcall RangeFromPoint(int X/*[in]*/, int Y/*[in]*/)
  {
    LPDISPATCH RangeFromPoint;
    OLECHECK(this->RangeFromPoint(X, Y, (LPDISPATCH*)&RangeFromPoint));
    return RangeFromPoint;
  }

  int __fastcall PointsToScreenPixelsX(float Points/*[in]*/)
  {
    int PointsToScreenPixelsX;
    OLECHECK(this->PointsToScreenPixelsX(Points, (int*)&PointsToScreenPixelsX));
    return PointsToScreenPixelsX;
  }

  int __fastcall PointsToScreenPixelsY(float Points/*[in]*/)
  {
    int PointsToScreenPixelsY;
    OLECHECK(this->PointsToScreenPixelsY(Points, (int*)&PointsToScreenPixelsY));
    return PointsToScreenPixelsY;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Selection* Selection = {read = get_Selection};
  __property   Powerpoint_xp::View* View = {read = get_View};
  __property   Powerpoint_xp::PowerPointPresentation* Presentation = {read = get_Presentation};
  __property   Powerpoint_xp::PpViewType ViewType = {read = get_ViewType, write = set_ViewType};
  __property   Office_xp::MsoTriState BlackAndWhite = {read = get_BlackAndWhite, write = set_BlackAndWhite};
  __property   Office_xp::MsoTriState Active = {read = get_Active};
  __property   Powerpoint_xp::PpWindowState WindowState = {read = get_WindowState, write = set_WindowState};
  __property   BSTR            Caption = {read = get_Caption};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   Powerpoint_xp::Pane* ActivePane = {read = get_ActivePane};
  __property   Powerpoint_xp::Panes* Panes = {read = get_Panes};
  __property   long            SplitVertical = {read = get_SplitVertical, write = set_SplitVertical};
  __property   long            SplitHorizontal = {read = get_SplitHorizontal, write = set_SplitHorizontal};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: View
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493458-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface View  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Powerpoint_xp::PpViewType* Type/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Zoom(int* Zoom/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Zoom(int Zoom/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE Paste(void) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Slide(LPDISPATCH* Slide/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_Slide(LPDISPATCH Slide/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE GotoSlide(int Index/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_DisplaySlideMiniature(Office_xp::MsoTriState* DisplaySlideMiniature/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_DisplaySlideMiniature(Office_xp::MsoTriState DisplaySlideMiniature/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_ZoomToFit(Office_xp::MsoTriState* ZoomToFit/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_ZoomToFit(Office_xp::MsoTriState ZoomToFit/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE PasteSpecial(Powerpoint_xp::PpPasteDataType DataType/*[in,def,opt]*/, 
                                                 Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                                                 BSTR IconFileName/*[in,def,opt]*/, 
                                                 int IconIndex/*[in,def,opt]*/, 
                                                 BSTR IconLabel/*[in,def,opt]*/, 
                                                 Office_xp::MsoTriState Link/*[in,def,opt]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_PrintOptions(Powerpoint_xp::PrintOptions** PrintOptions/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE PrintOut(int From/*[in,def,opt]*/, int To/*[in,def,opt]*/, 
                                             BSTR PrintToFile/*[in,def,opt]*/, 
                                             int Copies/*[in,def,opt]*/, 
                                             Office_xp::MsoTriState Collate/*[in,def,opt]*/) = 0; // [2012]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::PpViewType __fastcall get_Type(void)
  {
    Powerpoint_xp::PpViewType Type;
    OLECHECK(this->get_Type((Powerpoint_xp::PpViewType*)&Type));
    return Type;
  }

  int __fastcall get_Zoom(void)
  {
    int Zoom;
    OLECHECK(this->get_Zoom((int*)&Zoom));
    return Zoom;
  }

  LPDISPATCH __fastcall get_Slide(void)
  {
    LPDISPATCH Slide;
    OLECHECK(this->get_Slide((LPDISPATCH*)&Slide));
    return Slide;
  }

  Office_xp::MsoTriState __fastcall get_DisplaySlideMiniature(void)
  {
    Office_xp::MsoTriState DisplaySlideMiniature;
    OLECHECK(this->get_DisplaySlideMiniature((Office_xp::MsoTriState*)&DisplaySlideMiniature));
    return DisplaySlideMiniature;
  }

  Office_xp::MsoTriState __fastcall get_ZoomToFit(void)
  {
    Office_xp::MsoTriState ZoomToFit;
    OLECHECK(this->get_ZoomToFit((Office_xp::MsoTriState*)&ZoomToFit));
    return ZoomToFit;
  }

  Powerpoint_xp::PrintOptions* __fastcall get_PrintOptions(void)
  {
    Powerpoint_xp::PrintOptions* PrintOptions;
    OLECHECK(this->get_PrintOptions((Powerpoint_xp::PrintOptions**)&PrintOptions));
    return PrintOptions;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::PpViewType Type = {read = get_Type};
  __property   int             Zoom = {read = get_Zoom, write = set_Zoom};
  __property   LPDISPATCH      Slide = {read = get_Slide, write = set_Slide};
  __property   Office_xp::MsoTriState DisplaySlideMiniature = {read = get_DisplaySlideMiniature, write = set_DisplaySlideMiniature};
  __property   Office_xp::MsoTriState ZoomToFit = {read = get_ZoomToFit, write = set_ZoomToFit};
  __property   Powerpoint_xp::PrintOptions* PrintOptions = {read = get_PrintOptions};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SlideShowView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493459-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface SlideShowView  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Zoom(int* Zoom/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Slide(Powerpoint_xp::PowerPointSlide** Slide/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_PointerType(Powerpoint_xp::PpSlideShowPointerType* PointerType/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_PointerType(Powerpoint_xp::PpSlideShowPointerType PointerType/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_State(Powerpoint_xp::PpSlideShowState* State/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_State(Powerpoint_xp::PpSlideShowState State/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_AcceleratorsEnabled(Office_xp::MsoTriState* AcceleratorsEnabled/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_AcceleratorsEnabled(Office_xp::MsoTriState AcceleratorsEnabled/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_PresentationElapsedTime(float* PresentationElapsedTime/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_SlideElapsedTime(float* SlideElapsedTime/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_SlideElapsedTime(float SlideElapsedTime/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_LastSlideViewed(Powerpoint_xp::PowerPointSlide** LastSlideViewed/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_AdvanceMode(Powerpoint_xp::PpSlideShowAdvanceMode* AdvanceMode/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_PointerColor(Powerpoint_xp::ColorFormat** PointerColor/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_IsNamedShow(Office_xp::MsoTriState* IsNamedShow/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE DrawLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                             float EndX/*[in]*/, float EndY/*[in]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE EraseDrawing(void) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE First(void) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE Last(void) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Next(void) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE Previous(void) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE GotoSlide(int Index/*[in]*/, 
                                              Office_xp::MsoTriState ResetSlide/*[in,def,opt]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE GotoNamedShow(BSTR SlideShowName/*[in]*/) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE EndNamedShow(void) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE ResetSlideTime(void) = 0; // [2024]
  virtual HRESULT STDMETHODCALLTYPE Exit(void) = 0; // [2025]
  virtual HRESULT STDMETHODCALLTYPE InstallTracker(Powerpoint_xp::MouseTracker* pTracker/*[in]*/, 
                                                   Office_xp::MsoTriState Presenter/*[in]*/) = 0; // [2026]
  virtual HRESULT STDMETHODCALLTYPE get_CurrentShowPosition(int* CurrentShowPosition/*[out,retval]*/) = 0; // [2027]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Zoom(void)
  {
    int Zoom;
    OLECHECK(this->get_Zoom((int*)&Zoom));
    return Zoom;
  }

  Powerpoint_xp::PowerPointSlide* __fastcall get_Slide(void)
  {
    Powerpoint_xp::PowerPointSlide* Slide;
    OLECHECK(this->get_Slide((Powerpoint_xp::PowerPointSlide**)&Slide));
    return Slide;
  }

  Powerpoint_xp::PpSlideShowPointerType __fastcall get_PointerType(void)
  {
    Powerpoint_xp::PpSlideShowPointerType PointerType;
    OLECHECK(this->get_PointerType((Powerpoint_xp::PpSlideShowPointerType*)&PointerType));
    return PointerType;
  }

  Powerpoint_xp::PpSlideShowState __fastcall get_State(void)
  {
    Powerpoint_xp::PpSlideShowState State;
    OLECHECK(this->get_State((Powerpoint_xp::PpSlideShowState*)&State));
    return State;
  }

  Office_xp::MsoTriState __fastcall get_AcceleratorsEnabled(void)
  {
    Office_xp::MsoTriState AcceleratorsEnabled;
    OLECHECK(this->get_AcceleratorsEnabled((Office_xp::MsoTriState*)&AcceleratorsEnabled));
    return AcceleratorsEnabled;
  }

  float __fastcall get_PresentationElapsedTime(void)
  {
    float PresentationElapsedTime;
    OLECHECK(this->get_PresentationElapsedTime((float*)&PresentationElapsedTime));
    return PresentationElapsedTime;
  }

  float __fastcall get_SlideElapsedTime(void)
  {
    float SlideElapsedTime;
    OLECHECK(this->get_SlideElapsedTime((float*)&SlideElapsedTime));
    return SlideElapsedTime;
  }

  Powerpoint_xp::PowerPointSlide* __fastcall get_LastSlideViewed(void)
  {
    Powerpoint_xp::PowerPointSlide* LastSlideViewed;
    OLECHECK(this->get_LastSlideViewed((Powerpoint_xp::PowerPointSlide**)&LastSlideViewed));
    return LastSlideViewed;
  }

  Powerpoint_xp::PpSlideShowAdvanceMode __fastcall get_AdvanceMode(void)
  {
    Powerpoint_xp::PpSlideShowAdvanceMode AdvanceMode;
    OLECHECK(this->get_AdvanceMode((Powerpoint_xp::PpSlideShowAdvanceMode*)&AdvanceMode));
    return AdvanceMode;
  }

  Powerpoint_xp::ColorFormat* __fastcall get_PointerColor(void)
  {
    Powerpoint_xp::ColorFormat* PointerColor;
    OLECHECK(this->get_PointerColor((Powerpoint_xp::ColorFormat**)&PointerColor));
    return PointerColor;
  }

  Office_xp::MsoTriState __fastcall get_IsNamedShow(void)
  {
    Office_xp::MsoTriState IsNamedShow;
    OLECHECK(this->get_IsNamedShow((Office_xp::MsoTriState*)&IsNamedShow));
    return IsNamedShow;
  }

  BSTR __fastcall get_SlideShowName(void)
  {
    BSTR SlideShowName = 0;
    OLECHECK(this->get_SlideShowName((BSTR*)&SlideShowName));
    return SlideShowName;
  }

  int __fastcall get_CurrentShowPosition(void)
  {
    int CurrentShowPosition;
    OLECHECK(this->get_CurrentShowPosition((int*)&CurrentShowPosition));
    return CurrentShowPosition;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Zoom = {read = get_Zoom};
  __property   Powerpoint_xp::PowerPointSlide* Slide = {read = get_Slide};
  __property   Powerpoint_xp::PpSlideShowPointerType PointerType = {read = get_PointerType, write = set_PointerType};
  __property   Powerpoint_xp::PpSlideShowState State = {read = get_State, write = set_State};
  __property   Office_xp::MsoTriState AcceleratorsEnabled = {read = get_AcceleratorsEnabled, write = set_AcceleratorsEnabled};
  __property   float           PresentationElapsedTime = {read = get_PresentationElapsedTime};
  __property   float           SlideElapsedTime = {read = get_SlideElapsedTime, write = set_SlideElapsedTime};
  __property   Powerpoint_xp::PowerPointSlide* LastSlideViewed = {read = get_LastSlideViewed};
  __property   Powerpoint_xp::PpSlideShowAdvanceMode AdvanceMode = {read = get_AdvanceMode};
  __property   Powerpoint_xp::ColorFormat* PointerColor = {read = get_PointerColor};
  __property   Office_xp::MsoTriState IsNamedShow = {read = get_IsNamedShow};
  __property   BSTR            SlideShowName = {read = get_SlideShowName};
  __property   int             CurrentShowPosition = {read = get_CurrentShowPosition};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SlideShowSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface SlideShowSettings  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_PointerColor(Powerpoint_xp::ColorFormat** PointerColor/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_NamedSlideShows(Powerpoint_xp::NamedSlideShows** NamedSlideShows/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_StartingSlide(int* StartingSlide/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_StartingSlide(int StartingSlide/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_EndingSlide(int* EndingSlide/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_EndingSlide(int EndingSlide/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_AdvanceMode(Powerpoint_xp::PpSlideShowAdvanceMode* AdvanceMode/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_AdvanceMode(Powerpoint_xp::PpSlideShowAdvanceMode AdvanceMode/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE Run(Powerpoint_xp::SlideShowWindow** Run/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_LoopUntilStopped(Office_xp::MsoTriState* LoopUntilStopped/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_LoopUntilStopped(Office_xp::MsoTriState LoopUntilStopped/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_ShowType(Powerpoint_xp::PpSlideShowType* ShowType/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_ShowType(Powerpoint_xp::PpSlideShowType ShowType/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_ShowWithNarration(Office_xp::MsoTriState* ShowWithNarration/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE set_ShowWithNarration(Office_xp::MsoTriState ShowWithNarration/*[in]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_ShowWithAnimation(Office_xp::MsoTriState* ShowWithAnimation/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE set_ShowWithAnimation(Office_xp::MsoTriState ShowWithAnimation/*[in]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE set_SlideShowName(BSTR SlideShowName/*[in]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_RangeType(Powerpoint_xp::PpSlideShowRangeType* RangeType/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE set_RangeType(Powerpoint_xp::PpSlideShowRangeType RangeType/*[in]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_ShowScrollbar(Office_xp::MsoTriState* ShowScrollbar/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE set_ShowScrollbar(Office_xp::MsoTriState ShowScrollbar/*[in]*/) = 0; // [2015]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::ColorFormat* __fastcall get_PointerColor(void)
  {
    Powerpoint_xp::ColorFormat* PointerColor;
    OLECHECK(this->get_PointerColor((Powerpoint_xp::ColorFormat**)&PointerColor));
    return PointerColor;
  }

  Powerpoint_xp::NamedSlideShows* __fastcall get_NamedSlideShows(void)
  {
    Powerpoint_xp::NamedSlideShows* NamedSlideShows;
    OLECHECK(this->get_NamedSlideShows((Powerpoint_xp::NamedSlideShows**)&NamedSlideShows));
    return NamedSlideShows;
  }

  int __fastcall get_StartingSlide(void)
  {
    int StartingSlide;
    OLECHECK(this->get_StartingSlide((int*)&StartingSlide));
    return StartingSlide;
  }

  int __fastcall get_EndingSlide(void)
  {
    int EndingSlide;
    OLECHECK(this->get_EndingSlide((int*)&EndingSlide));
    return EndingSlide;
  }

  Powerpoint_xp::PpSlideShowAdvanceMode __fastcall get_AdvanceMode(void)
  {
    Powerpoint_xp::PpSlideShowAdvanceMode AdvanceMode;
    OLECHECK(this->get_AdvanceMode((Powerpoint_xp::PpSlideShowAdvanceMode*)&AdvanceMode));
    return AdvanceMode;
  }

  Powerpoint_xp::SlideShowWindow* __fastcall Run(void)
  {
    Powerpoint_xp::SlideShowWindow* Run;
    OLECHECK(this->Run((Powerpoint_xp::SlideShowWindow**)&Run));
    return Run;
  }

  Office_xp::MsoTriState __fastcall get_LoopUntilStopped(void)
  {
    Office_xp::MsoTriState LoopUntilStopped;
    OLECHECK(this->get_LoopUntilStopped((Office_xp::MsoTriState*)&LoopUntilStopped));
    return LoopUntilStopped;
  }

  Powerpoint_xp::PpSlideShowType __fastcall get_ShowType(void)
  {
    Powerpoint_xp::PpSlideShowType ShowType;
    OLECHECK(this->get_ShowType((Powerpoint_xp::PpSlideShowType*)&ShowType));
    return ShowType;
  }

  Office_xp::MsoTriState __fastcall get_ShowWithNarration(void)
  {
    Office_xp::MsoTriState ShowWithNarration;
    OLECHECK(this->get_ShowWithNarration((Office_xp::MsoTriState*)&ShowWithNarration));
    return ShowWithNarration;
  }

  Office_xp::MsoTriState __fastcall get_ShowWithAnimation(void)
  {
    Office_xp::MsoTriState ShowWithAnimation;
    OLECHECK(this->get_ShowWithAnimation((Office_xp::MsoTriState*)&ShowWithAnimation));
    return ShowWithAnimation;
  }

  BSTR __fastcall get_SlideShowName(void)
  {
    BSTR SlideShowName = 0;
    OLECHECK(this->get_SlideShowName((BSTR*)&SlideShowName));
    return SlideShowName;
  }

  Powerpoint_xp::PpSlideShowRangeType __fastcall get_RangeType(void)
  {
    Powerpoint_xp::PpSlideShowRangeType RangeType;
    OLECHECK(this->get_RangeType((Powerpoint_xp::PpSlideShowRangeType*)&RangeType));
    return RangeType;
  }

  Office_xp::MsoTriState __fastcall get_ShowScrollbar(void)
  {
    Office_xp::MsoTriState ShowScrollbar;
    OLECHECK(this->get_ShowScrollbar((Office_xp::MsoTriState*)&ShowScrollbar));
    return ShowScrollbar;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ColorFormat* PointerColor = {read = get_PointerColor};
  __property   Powerpoint_xp::NamedSlideShows* NamedSlideShows = {read = get_NamedSlideShows};
  __property   int             StartingSlide = {read = get_StartingSlide, write = set_StartingSlide};
  __property   int             EndingSlide = {read = get_EndingSlide, write = set_EndingSlide};
  __property   Powerpoint_xp::PpSlideShowAdvanceMode AdvanceMode = {read = get_AdvanceMode, write = set_AdvanceMode};
  __property   Office_xp::MsoTriState LoopUntilStopped = {read = get_LoopUntilStopped, write = set_LoopUntilStopped};
  __property   Powerpoint_xp::PpSlideShowType ShowType = {read = get_ShowType, write = set_ShowType};
  __property   Office_xp::MsoTriState ShowWithNarration = {read = get_ShowWithNarration, write = set_ShowWithNarration};
  __property   Office_xp::MsoTriState ShowWithAnimation = {read = get_ShowWithAnimation, write = set_ShowWithAnimation};
  __property   BSTR            SlideShowName = {read = get_SlideShowName};
  __property   Powerpoint_xp::PpSlideShowRangeType RangeType = {read = get_RangeType, write = set_RangeType};
  __property   Office_xp::MsoTriState ShowScrollbar = {read = get_ShowScrollbar, write = set_ShowScrollbar};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: NamedSlideShows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface NamedSlideShows  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT Index/*[in]*/, 
                                         Powerpoint_xp::NamedSlideShow** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, VARIANT safeArrayOfSlideIDs/*[in]*/, 
                                        Powerpoint_xp::NamedSlideShow** Add/*[out,retval]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::NamedSlideShow* __fastcall Item(VARIANT Index/*[in]*/)
  {
    Powerpoint_xp::NamedSlideShow* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::NamedSlideShow**)&Item));
    return Item;
  }

  Powerpoint_xp::NamedSlideShow* __fastcall Add(BSTR Name/*[in]*/, 
                                                VARIANT safeArrayOfSlideIDs/*[in]*/)
  {
    Powerpoint_xp::NamedSlideShow* Add;
    OLECHECK(this->Add(Name, safeArrayOfSlideIDs, (Powerpoint_xp::NamedSlideShow**)&Add));
    return Add;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: NamedSlideShow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface NamedSlideShow  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_SlideIDs(VARIANT* SlideIDs/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [2006]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  VARIANT __fastcall get_SlideIDs(void)
  {
    VARIANT SlideIDs;
    OLECHECK(this->get_SlideIDs((VARIANT*)&SlideIDs));
    return SlideIDs;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PrintOptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PrintOptions  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_PrintColorType(Powerpoint_xp::PpPrintColorType* PrintColorType/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE set_PrintColorType(Powerpoint_xp::PpPrintColorType PrintColorType/*[in]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Collate(Office_xp::MsoTriState* Collate/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Collate(Office_xp::MsoTriState Collate/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_FitToPage(Office_xp::MsoTriState* FitToPage/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_FitToPage(Office_xp::MsoTriState FitToPage/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_FrameSlides(Office_xp::MsoTriState* FrameSlides/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_FrameSlides(Office_xp::MsoTriState FrameSlides/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_NumberOfCopies(int* NumberOfCopies/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_NumberOfCopies(int NumberOfCopies/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_OutputType(Powerpoint_xp::PpPrintOutputType* OutputType/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_OutputType(Powerpoint_xp::PpPrintOutputType OutputType/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_PrintHiddenSlides(Office_xp::MsoTriState* PrintHiddenSlides/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_PrintHiddenSlides(Office_xp::MsoTriState PrintHiddenSlides/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_PrintInBackground(Office_xp::MsoTriState* PrintInBackground/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_PrintInBackground(Office_xp::MsoTriState PrintInBackground/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_RangeType(Powerpoint_xp::PpPrintRangeType* RangeType/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE set_RangeType(Powerpoint_xp::PpPrintRangeType RangeType/*[in]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_Ranges(Powerpoint_xp::PrintRanges** Ranges/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_PrintFontsAsGraphics(Office_xp::MsoTriState* PrintFontsAsGraphics/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE set_PrintFontsAsGraphics(Office_xp::MsoTriState PrintFontsAsGraphics/*[in]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE set_SlideShowName(BSTR SlideShowName/*[in]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_ActivePrinter(BSTR* ActivePrinter/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE set_ActivePrinter(BSTR ActivePrinter/*[in]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE get_HandoutOrder(Powerpoint_xp::PpPrintHandoutOrder* HandoutOrder/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE set_HandoutOrder(Powerpoint_xp::PpPrintHandoutOrder HandoutOrder/*[in]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE get_PrintComments(Office_xp::MsoTriState* PrintComments/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE set_PrintComments(Office_xp::MsoTriState PrintComments/*[in]*/) = 0; // [2017]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  Powerpoint_xp::PpPrintColorType __fastcall get_PrintColorType(void)
  {
    Powerpoint_xp::PpPrintColorType PrintColorType;
    OLECHECK(this->get_PrintColorType((Powerpoint_xp::PpPrintColorType*)&PrintColorType));
    return PrintColorType;
  }

  Office_xp::MsoTriState __fastcall get_Collate(void)
  {
    Office_xp::MsoTriState Collate;
    OLECHECK(this->get_Collate((Office_xp::MsoTriState*)&Collate));
    return Collate;
  }

  Office_xp::MsoTriState __fastcall get_FitToPage(void)
  {
    Office_xp::MsoTriState FitToPage;
    OLECHECK(this->get_FitToPage((Office_xp::MsoTriState*)&FitToPage));
    return FitToPage;
  }

  Office_xp::MsoTriState __fastcall get_FrameSlides(void)
  {
    Office_xp::MsoTriState FrameSlides;
    OLECHECK(this->get_FrameSlides((Office_xp::MsoTriState*)&FrameSlides));
    return FrameSlides;
  }

  int __fastcall get_NumberOfCopies(void)
  {
    int NumberOfCopies;
    OLECHECK(this->get_NumberOfCopies((int*)&NumberOfCopies));
    return NumberOfCopies;
  }

  Powerpoint_xp::PpPrintOutputType __fastcall get_OutputType(void)
  {
    Powerpoint_xp::PpPrintOutputType OutputType;
    OLECHECK(this->get_OutputType((Powerpoint_xp::PpPrintOutputType*)&OutputType));
    return OutputType;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_xp::MsoTriState __fastcall get_PrintHiddenSlides(void)
  {
    Office_xp::MsoTriState PrintHiddenSlides;
    OLECHECK(this->get_PrintHiddenSlides((Office_xp::MsoTriState*)&PrintHiddenSlides));
    return PrintHiddenSlides;
  }

  Office_xp::MsoTriState __fastcall get_PrintInBackground(void)
  {
    Office_xp::MsoTriState PrintInBackground;
    OLECHECK(this->get_PrintInBackground((Office_xp::MsoTriState*)&PrintInBackground));
    return PrintInBackground;
  }

  Powerpoint_xp::PpPrintRangeType __fastcall get_RangeType(void)
  {
    Powerpoint_xp::PpPrintRangeType RangeType;
    OLECHECK(this->get_RangeType((Powerpoint_xp::PpPrintRangeType*)&RangeType));
    return RangeType;
  }

  Powerpoint_xp::PrintRanges* __fastcall get_Ranges(void)
  {
    Powerpoint_xp::PrintRanges* Ranges;
    OLECHECK(this->get_Ranges((Powerpoint_xp::PrintRanges**)&Ranges));
    return Ranges;
  }

  Office_xp::MsoTriState __fastcall get_PrintFontsAsGraphics(void)
  {
    Office_xp::MsoTriState PrintFontsAsGraphics;
    OLECHECK(this->get_PrintFontsAsGraphics((Office_xp::MsoTriState*)&PrintFontsAsGraphics));
    return PrintFontsAsGraphics;
  }

  BSTR __fastcall get_SlideShowName(void)
  {
    BSTR SlideShowName = 0;
    OLECHECK(this->get_SlideShowName((BSTR*)&SlideShowName));
    return SlideShowName;
  }

  BSTR __fastcall get_ActivePrinter(void)
  {
    BSTR ActivePrinter = 0;
    OLECHECK(this->get_ActivePrinter((BSTR*)&ActivePrinter));
    return ActivePrinter;
  }

  Powerpoint_xp::PpPrintHandoutOrder __fastcall get_HandoutOrder(void)
  {
    Powerpoint_xp::PpPrintHandoutOrder HandoutOrder;
    OLECHECK(this->get_HandoutOrder((Powerpoint_xp::PpPrintHandoutOrder*)&HandoutOrder));
    return HandoutOrder;
  }

  Office_xp::MsoTriState __fastcall get_PrintComments(void)
  {
    Office_xp::MsoTriState PrintComments;
    OLECHECK(this->get_PrintComments((Office_xp::MsoTriState*)&PrintComments));
    return PrintComments;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   Powerpoint_xp::PpPrintColorType PrintColorType = {read = get_PrintColorType, write = set_PrintColorType};
  __property   Office_xp::MsoTriState Collate = {read = get_Collate, write = set_Collate};
  __property   Office_xp::MsoTriState FitToPage = {read = get_FitToPage, write = set_FitToPage};
  __property   Office_xp::MsoTriState FrameSlides = {read = get_FrameSlides, write = set_FrameSlides};
  __property   int             NumberOfCopies = {read = get_NumberOfCopies, write = set_NumberOfCopies};
  __property   Powerpoint_xp::PpPrintOutputType OutputType = {read = get_OutputType, write = set_OutputType};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoTriState PrintHiddenSlides = {read = get_PrintHiddenSlides, write = set_PrintHiddenSlides};
  __property   Office_xp::MsoTriState PrintInBackground = {read = get_PrintInBackground, write = set_PrintInBackground};
  __property   Powerpoint_xp::PpPrintRangeType RangeType = {read = get_RangeType, write = set_RangeType};
  __property   Powerpoint_xp::PrintRanges* Ranges = {read = get_Ranges};
  __property   Office_xp::MsoTriState PrintFontsAsGraphics = {read = get_PrintFontsAsGraphics, write = set_PrintFontsAsGraphics};
  __property   BSTR            SlideShowName = {read = get_SlideShowName};
  __property   BSTR            ActivePrinter = {read = get_ActivePrinter};
  __property   Powerpoint_xp::PpPrintHandoutOrder HandoutOrder = {read = get_HandoutOrder, write = set_HandoutOrder};
  __property   Office_xp::MsoTriState PrintComments = {read = get_PrintComments, write = set_PrintComments};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PrintRanges
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PrintRanges  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE Add(int Start/*[in]*/, int End/*[in]*/, 
                                        Powerpoint_xp::PrintRange** Add/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE ClearAll(void) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, 
                                         Powerpoint_xp::PrintRange** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PrintRange* __fastcall Add(int Start/*[in]*/, int End/*[in]*/)
  {
    Powerpoint_xp::PrintRange* Add;
    OLECHECK(this->Add(Start, End, (Powerpoint_xp::PrintRange**)&Add));
    return Add;
  }

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  Powerpoint_xp::PrintRange* __fastcall Item(int Index/*[in]*/)
  {
    Powerpoint_xp::PrintRange* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::PrintRange**)&Item));
    return Item;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PrintRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PrintRange  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Start(int* Start/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_End(int* End/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2005]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Start(void)
  {
    int Start;
    OLECHECK(this->get_Start((int*)&Start));
    return Start;
  }

  int __fastcall get_End(void)
  {
    int End;
    OLECHECK(this->get_End((int*)&End));
    return End;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Start = {read = get_Start};
  __property   int             End = {read = get_End};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: AddIns
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493460-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface AddIns  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT* Index/*[in]*/, 
                                         Powerpoint_xp::AddIn** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR FileName/*[in]*/, 
                                        Powerpoint_xp::AddIn** Add/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Remove(VARIANT* Index/*[in]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::AddIn* __fastcall Item(VARIANT* Index/*[in]*/)
  {
    Powerpoint_xp::AddIn* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::AddIn**)&Item));
    return Item;
  }

  Powerpoint_xp::AddIn* __fastcall Add(BSTR FileName/*[in]*/)
  {
    Powerpoint_xp::AddIn* Add;
    OLECHECK(this->Add(FileName, (Powerpoint_xp::AddIn**)&Add));
    return Add;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: AddIn
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493461-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface AddIn  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_FullName(BSTR* FullName/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Path(BSTR* Path/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Registered(Office_xp::MsoTriState* Registered/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_Registered(Office_xp::MsoTriState Registered/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_AutoLoad(Office_xp::MsoTriState* AutoLoad/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_AutoLoad(Office_xp::MsoTriState AutoLoad/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Loaded(Office_xp::MsoTriState* Loaded/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_Loaded(Office_xp::MsoTriState Loaded/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayAlerts(Office_xp::MsoTriState* DisplayAlerts/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayAlerts(Office_xp::MsoTriState DisplayAlerts/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_RegisteredInHKLM(Office_xp::MsoTriState* RegisteredInHKLM/*[out,retval]*/) = 0; // [2010]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall get_FullName(void)
  {
    BSTR FullName = 0;
    OLECHECK(this->get_FullName((BSTR*)&FullName));
    return FullName;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_Path(void)
  {
    BSTR Path = 0;
    OLECHECK(this->get_Path((BSTR*)&Path));
    return Path;
  }

  Office_xp::MsoTriState __fastcall get_Registered(void)
  {
    Office_xp::MsoTriState Registered;
    OLECHECK(this->get_Registered((Office_xp::MsoTriState*)&Registered));
    return Registered;
  }

  Office_xp::MsoTriState __fastcall get_AutoLoad(void)
  {
    Office_xp::MsoTriState AutoLoad;
    OLECHECK(this->get_AutoLoad((Office_xp::MsoTriState*)&AutoLoad));
    return AutoLoad;
  }

  Office_xp::MsoTriState __fastcall get_Loaded(void)
  {
    Office_xp::MsoTriState Loaded;
    OLECHECK(this->get_Loaded((Office_xp::MsoTriState*)&Loaded));
    return Loaded;
  }

  Office_xp::MsoTriState __fastcall get_DisplayAlerts(void)
  {
    Office_xp::MsoTriState DisplayAlerts;
    OLECHECK(this->get_DisplayAlerts((Office_xp::MsoTriState*)&DisplayAlerts));
    return DisplayAlerts;
  }

  Office_xp::MsoTriState __fastcall get_RegisteredInHKLM(void)
  {
    Office_xp::MsoTriState RegisteredInHKLM;
    OLECHECK(this->get_RegisteredInHKLM((Office_xp::MsoTriState*)&RegisteredInHKLM));
    return RegisteredInHKLM;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            FullName = {read = get_FullName};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Path = {read = get_Path};
  __property   Office_xp::MsoTriState Registered = {read = get_Registered, write = set_Registered};
  __property   Office_xp::MsoTriState AutoLoad = {read = get_AutoLoad, write = set_AutoLoad};
  __property   Office_xp::MsoTriState Loaded = {read = get_Loaded, write = set_Loaded};
  __property   Office_xp::MsoTriState DisplayAlerts = {read = get_DisplayAlerts, write = set_DisplayAlerts};
  __property   Office_xp::MsoTriState RegisteredInHKLM = {read = get_RegisteredInHKLM};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Presentations
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493462-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Presentations  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT Index/*[in]*/, 
                                         Powerpoint_xp::PowerPointPresentation** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(Office_xp::MsoTriState WithWindow/*[in,def,opt]*/, 
                                        Powerpoint_xp::PowerPointPresentation** Add/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE OpenOld(BSTR FileName/*[in]*/, 
                                            Office_xp::MsoTriState ReadOnly/*[in,def,opt]*/, 
                                            Office_xp::MsoTriState Untitled/*[in,def,opt]*/, 
                                            Office_xp::MsoTriState WithWindow/*[in,def,opt]*/, 
                                            Powerpoint_xp::PowerPointPresentation** OpenOld/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE Open(BSTR FileName/*[in]*/, 
                                         Office_xp::MsoTriState ReadOnly/*[in,def,opt]*/, 
                                         Office_xp::MsoTriState Untitled/*[in,def,opt]*/, 
                                         Office_xp::MsoTriState WithWindow/*[in,def,opt]*/, 
                                         Powerpoint_xp::PowerPointPresentation** Open/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE CheckOut(BSTR FileName/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE CanCheckOut(BSTR FileName/*[in]*/, 
                                                VARIANT_BOOL* CanCheckOut/*[out,retval]*/) = 0; // [2007]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::PowerPointPresentation* __fastcall Item(VARIANT Index/*[in]*/)
  {
    Powerpoint_xp::PowerPointPresentation* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::PowerPointPresentation**)&Item));
    return Item;
  }

  Powerpoint_xp::PowerPointPresentation* __fastcall Add(Office_xp::MsoTriState WithWindow/*[in,def,opt]*/)
  {
    Powerpoint_xp::PowerPointPresentation* Add;
    OLECHECK(this->Add(WithWindow, (Powerpoint_xp::PowerPointPresentation**)&Add));
    return Add;
  }

  Powerpoint_xp::PowerPointPresentation* __fastcall OpenOld(BSTR FileName/*[in]*/, 
                                                            Office_xp::MsoTriState ReadOnly/*[in,def,opt]*/, 
                                                            Office_xp::MsoTriState Untitled/*[in,def,opt]*/, 
                                                            Office_xp::MsoTriState WithWindow/*[in,def,opt]*/)
  {
    Powerpoint_xp::PowerPointPresentation* OpenOld;
    OLECHECK(this->OpenOld(FileName, ReadOnly, Untitled, WithWindow, (Powerpoint_xp::PowerPointPresentation**)&OpenOld));
    return OpenOld;
  }

  Powerpoint_xp::PowerPointPresentation* __fastcall Open(BSTR FileName/*[in]*/, 
                                                         Office_xp::MsoTriState ReadOnly/*[in,def,opt]*/, 
                                                         Office_xp::MsoTriState Untitled/*[in,def,opt]*/, 
                                                         Office_xp::MsoTriState WithWindow/*[in,def,opt]*/)
  {
    Powerpoint_xp::PowerPointPresentation* Open;
    OLECHECK(this->Open(FileName, ReadOnly, Untitled, WithWindow, (Powerpoint_xp::PowerPointPresentation**)&Open));
    return Open;
  }

  VARIANT_BOOL __fastcall CanCheckOut(BSTR FileName/*[in]*/)
  {
    VARIANT_BOOL CanCheckOut;
    OLECHECK(this->CanCheckOut(FileName, (VARIANT_BOOL*)&CanCheckOut));
    return CanCheckOut;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PresEvents
// Flags:     (16) Hidden
// GUID:      {91493463-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PresEvents  : public IUnknown
{
public:
};

// *********************************************************************//
// Interface: _Presentation
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface _Presentation  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_SlideMaster(Powerpoint_xp::_Master** SlideMaster/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_TitleMaster(Powerpoint_xp::_Master** TitleMaster/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_HasTitleMaster(Office_xp::MsoTriState* HasTitleMaster/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE AddTitleMaster(Powerpoint_xp::_Master** TitleMaster/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE ApplyTemplate(BSTR FileName/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_TemplateName(BSTR* TemplateName/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_NotesMaster(Powerpoint_xp::_Master** NotesMaster/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_HandoutMaster(Powerpoint_xp::_Master** HandoutMaster/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_Slides(Powerpoint_xp::Slides** Slides/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_PageSetup(Powerpoint_xp::PageSetup** PageSetup/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_ColorSchemes(Powerpoint_xp::ColorSchemes** ColorSchemes/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_ExtraColors(Powerpoint_xp::ExtraColors** ExtraColors/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowSettings(Powerpoint_xp::SlideShowSettings** SlideShowSettings/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE get_Fonts(Powerpoint_xp::Fonts** Fonts/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE get_Windows(Powerpoint_xp::DocumentWindows** Windows/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE get_Tags(Powerpoint_xp::Tags** Tags/*[out,retval]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultShape(Powerpoint_xp::Shape** DefaultShape/*[out,retval]*/) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE get_BuiltInDocumentProperties(LPDISPATCH* BuiltInDocumentProperties/*[out,retval]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE get_CustomDocumentProperties(LPDISPATCH* CustomDocumentProperties/*[out,retval]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE get_VBProject(Vbide_xp::VBProject** VBProject/*[out,retval]*/) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_ReadOnly(Office_xp::MsoTriState* ReadOnly/*[out,retval]*/) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE get_FullName(BSTR* FullName/*[out,retval]*/) = 0; // [2024]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2025]
  virtual HRESULT STDMETHODCALLTYPE get_Path(BSTR* Path/*[out,retval]*/) = 0; // [2026]
  virtual HRESULT STDMETHODCALLTYPE get_Saved(Office_xp::MsoTriState* Saved/*[out,retval]*/) = 0; // [2027]
  virtual HRESULT STDMETHODCALLTYPE set_Saved(Office_xp::MsoTriState Saved/*[in]*/) = 0; // [2027]
  virtual HRESULT STDMETHODCALLTYPE get_LayoutDirection(Powerpoint_xp::PpDirection* LayoutDirection/*[out,retval]*/) = 0; // [2028]
  virtual HRESULT STDMETHODCALLTYPE set_LayoutDirection(Powerpoint_xp::PpDirection LayoutDirection/*[in]*/) = 0; // [2028]
  virtual HRESULT STDMETHODCALLTYPE NewWindow(Powerpoint_xp::DocumentWindow** NewWindow/*[out,retval]*/) = 0; // [2029]
  virtual HRESULT STDMETHODCALLTYPE FollowHyperlink(BSTR Address/*[in]*/, 
                                                    BSTR SubAddress/*[in,def,opt]*/, 
                                                    VARIANT_BOOL NewWindow/*[in,def,opt]*/, 
                                                    VARIANT_BOOL AddHistory/*[in,def,opt]*/, 
                                                    BSTR ExtraInfo/*[in,def,opt]*/, 
                                                    Office_xp::MsoExtraInfoMethod Method/*[in,def,opt]*/, 
                                                    BSTR HeaderInfo/*[in,def,opt]*/) = 0; // [2030]
  virtual HRESULT STDMETHODCALLTYPE AddToFavorites(void) = 0; // [2031]
  virtual HRESULT STDMETHODCALLTYPE Unused(void) = 0; // [2032]
  virtual HRESULT STDMETHODCALLTYPE get_PrintOptions(Powerpoint_xp::PrintOptions** PrintOptions/*[out,retval]*/) = 0; // [2033]
  virtual HRESULT STDMETHODCALLTYPE PrintOut(int From/*[in,def,opt]*/, int To/*[in,def,opt]*/, 
                                             BSTR PrintToFile/*[in,def,opt]*/, 
                                             int Copies/*[in,def,opt]*/, 
                                             Office_xp::MsoTriState Collate/*[in,def,opt]*/) = 0; // [2034]
  virtual HRESULT STDMETHODCALLTYPE Save(void) = 0; // [2035]
  virtual HRESULT STDMETHODCALLTYPE SaveAs(BSTR FileName/*[in]*/, 
                                           Powerpoint_xp::PpSaveAsFileType FileFormat/*[in,def,opt]*/, 
                                           Office_xp::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/) = 0; // [2036]
  virtual HRESULT STDMETHODCALLTYPE SaveCopyAs(BSTR FileName/*[in]*/, 
                                               Powerpoint_xp::PpSaveAsFileType FileFormat/*[in,def,opt]*/, 
                                               Office_xp::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/) = 0; // [2037]
  virtual HRESULT STDMETHODCALLTYPE Export(BSTR Path/*[in]*/, BSTR FilterName/*[in]*/, 
                                           int ScaleWidth/*[in,def,opt]*/, 
                                           int ScaleHeight/*[in,def,opt]*/) = 0; // [2038]
  virtual HRESULT STDMETHODCALLTYPE Close(void) = 0; // [2039]
  virtual HRESULT STDMETHODCALLTYPE SetUndoText(BSTR Text/*[in]*/) = 0; // [2040]
  virtual HRESULT STDMETHODCALLTYPE get_Container(LPDISPATCH* Container/*[out,retval]*/) = 0; // [2041]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayComments(Office_xp::MsoTriState* DisplayComments/*[out,retval]*/) = 0; // [2042]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayComments(Office_xp::MsoTriState DisplayComments/*[in]*/) = 0; // [2042]
  virtual HRESULT STDMETHODCALLTYPE get_FarEastLineBreakLevel(Powerpoint_xp::PpFarEastLineBreakLevel* FarEastLineBreakLevel/*[out,retval]*/) = 0; // [2043]
  virtual HRESULT STDMETHODCALLTYPE set_FarEastLineBreakLevel(Powerpoint_xp::PpFarEastLineBreakLevel FarEastLineBreakLevel/*[in]*/) = 0; // [2043]
  virtual HRESULT STDMETHODCALLTYPE get_NoLineBreakBefore(BSTR* NoLineBreakBefore/*[out,retval]*/) = 0; // [2044]
  virtual HRESULT STDMETHODCALLTYPE set_NoLineBreakBefore(BSTR NoLineBreakBefore/*[in]*/) = 0; // [2044]
  virtual HRESULT STDMETHODCALLTYPE get_NoLineBreakAfter(BSTR* NoLineBreakAfter/*[out,retval]*/) = 0; // [2045]
  virtual HRESULT STDMETHODCALLTYPE set_NoLineBreakAfter(BSTR NoLineBreakAfter/*[in]*/) = 0; // [2045]
  virtual HRESULT STDMETHODCALLTYPE UpdateLinks(void) = 0; // [2046]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowWindow(Powerpoint_xp::SlideShowWindow** SlideShowWindow/*[out,retval]*/) = 0; // [2047]
  virtual HRESULT STDMETHODCALLTYPE get_FarEastLineBreakLanguage(Office_xp::MsoFarEastLineBreakLanguageID* FarEastLineBreakLanguage/*[out,retval]*/) = 0; // [2048]
  virtual HRESULT STDMETHODCALLTYPE set_FarEastLineBreakLanguage(Office_xp::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage/*[in]*/) = 0; // [2048]
  virtual HRESULT STDMETHODCALLTYPE WebPagePreview(void) = 0; // [2049]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultLanguageID(Office_xp::MsoLanguageID* DefaultLanguageID/*[out,retval]*/) = 0; // [2050]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultLanguageID(Office_xp::MsoLanguageID DefaultLanguageID/*[in]*/) = 0; // [2050]
  virtual HRESULT STDMETHODCALLTYPE get_CommandBars(Office_xp::CommandBars** CommandBars/*[out,retval]*/) = 0; // [2051]
  virtual HRESULT STDMETHODCALLTYPE get_PublishObjects(Powerpoint_xp::PublishObjects** PublishObjects/*[out,retval]*/) = 0; // [2052]
  virtual HRESULT STDMETHODCALLTYPE get_WebOptions(Powerpoint_xp::WebOptions** WebOptions/*[out,retval]*/) = 0; // [2053]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLProject(Office_xp::HTMLProject** HTMLProject/*[out,retval]*/) = 0; // [2054]
  virtual HRESULT STDMETHODCALLTYPE ReloadAs(Office_xp::MsoEncoding cp/*[in]*/) = 0; // [2055]
  virtual HRESULT STDMETHODCALLTYPE MakeIntoTemplate(Office_xp::MsoTriState IsDesignTemplate/*[in]*/) = 0; // [2056]
  virtual HRESULT STDMETHODCALLTYPE get_EnvelopeVisible(Office_xp::MsoTriState* EnvelopeVisible/*[out,retval]*/) = 0; // [2057]
  virtual HRESULT STDMETHODCALLTYPE set_EnvelopeVisible(Office_xp::MsoTriState EnvelopeVisible/*[in]*/) = 0; // [2057]
  virtual HRESULT STDMETHODCALLTYPE sblt(BSTR s/*[in]*/) = 0; // [2058]
  virtual HRESULT STDMETHODCALLTYPE get_VBASigned(Office_xp::MsoTriState* VBASigned/*[out,retval]*/) = 0; // [2059]
  virtual HRESULT STDMETHODCALLTYPE get_SnapToGrid(Office_xp::MsoTriState* SnapToGrid/*[out,retval]*/) = 0; // [2061]
  virtual HRESULT STDMETHODCALLTYPE set_SnapToGrid(Office_xp::MsoTriState SnapToGrid/*[in]*/) = 0; // [2061]
  virtual HRESULT STDMETHODCALLTYPE get_GridDistance(float* GridDistance/*[out,retval]*/) = 0; // [2062]
  virtual HRESULT STDMETHODCALLTYPE set_GridDistance(float GridDistance/*[in]*/) = 0; // [2062]
  virtual HRESULT STDMETHODCALLTYPE get_Designs(Powerpoint_xp::Designs** Designs/*[out,retval]*/) = 0; // [2063]
  virtual HRESULT STDMETHODCALLTYPE Merge(BSTR Path/*[in]*/) = 0; // [2064]
  virtual HRESULT STDMETHODCALLTYPE CheckIn(VARIANT_BOOL SaveChanges/*[in,def,opt]*/, 
                                            VARIANT Comments/*[in,opt]*/= TNoParam(), 
                                            VARIANT MakePublic/*[in,opt]*/= TNoParam()) = 0; // [2065]
  virtual HRESULT STDMETHODCALLTYPE CanCheckIn(VARIANT_BOOL* CanCheckIn/*[out,retval]*/) = 0; // [2066]
  virtual HRESULT STDMETHODCALLTYPE get_Signatures(Office_xp::SignatureSet** Signatures/*[out,retval]*/) = 0; // [2067]
  virtual HRESULT STDMETHODCALLTYPE get_RemovePersonalInformation(Office_xp::MsoTriState* RemovePersonalInformation/*[out,retval]*/) = 0; // [2068]
  virtual HRESULT STDMETHODCALLTYPE set_RemovePersonalInformation(Office_xp::MsoTriState RemovePersonalInformation/*[in]*/) = 0; // [2068]
  virtual HRESULT STDMETHODCALLTYPE SendForReview(BSTR Recipients/*[in,def,opt]*/, 
                                                  BSTR Subject/*[in,def,opt]*/, 
                                                  VARIANT_BOOL ShowMessage/*[in,def,opt]*/, 
                                                  VARIANT IncludeAttachment/*[in,opt]*/= TNoParam()) = 0; // [2069]
  virtual HRESULT STDMETHODCALLTYPE ReplyWithChanges(VARIANT_BOOL ShowMessage/*[in,def,opt]*/) = 0; // [2070]
  virtual HRESULT STDMETHODCALLTYPE EndReview(void) = 0; // [2071]
  virtual HRESULT STDMETHODCALLTYPE get_HasRevisionInfo(Powerpoint_xp::PpRevisionInfo* HasRevisionInfo/*[out,retval]*/) = 0; // [2072]
  virtual HRESULT STDMETHODCALLTYPE AddBaseline(BSTR FileName/*[in,def,opt]*/) = 0; // [2073]
  virtual HRESULT STDMETHODCALLTYPE RemoveBaseline(void) = 0; // [2074]
  virtual HRESULT STDMETHODCALLTYPE get_PasswordEncryptionProvider(BSTR* PasswordEncryptionProvider/*[out,retval]*/) = 0; // [2075]
  virtual HRESULT STDMETHODCALLTYPE get_PasswordEncryptionAlgorithm(BSTR* PasswordEncryptionAlgorithm/*[out,retval]*/) = 0; // [2076]
  virtual HRESULT STDMETHODCALLTYPE get_PasswordEncryptionKeyLength(int* PasswordEncryptionKeyLength/*[out,retval]*/) = 0; // [2077]
  virtual HRESULT STDMETHODCALLTYPE get_PasswordEncryptionFileProperties(VARIANT_BOOL* PasswordEncryptionFileProperties/*[out,retval]*/) = 0; // [2078]
  virtual HRESULT STDMETHODCALLTYPE SetPasswordEncryptionOptions(BSTR PasswordEncryptionProvider/*[in]*/, 
                                                                 BSTR PasswordEncryptionAlgorithm/*[in]*/, 
                                                                 int PasswordEncryptionKeyLength/*[in]*/, 
                                                                 VARIANT_BOOL PasswordEncryptionFileProperties/*[in]*/) = 0; // [2079]
  virtual HRESULT STDMETHODCALLTYPE get_Password(BSTR* Password/*[out,retval]*/) = 0; // [2080]
  virtual HRESULT STDMETHODCALLTYPE set_Password(BSTR Password/*[in]*/) = 0; // [2080]
  virtual HRESULT STDMETHODCALLTYPE get_WritePassword(BSTR* WritePassword/*[out,retval]*/) = 0; // [2081]
  virtual HRESULT STDMETHODCALLTYPE set_WritePassword(BSTR WritePassword/*[in]*/) = 0; // [2081]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::_Master* __fastcall get_SlideMaster(void)
  {
    Powerpoint_xp::_Master* SlideMaster;
    OLECHECK(this->get_SlideMaster((Powerpoint_xp::_Master**)&SlideMaster));
    return SlideMaster;
  }

  Powerpoint_xp::_Master* __fastcall get_TitleMaster(void)
  {
    Powerpoint_xp::_Master* TitleMaster;
    OLECHECK(this->get_TitleMaster((Powerpoint_xp::_Master**)&TitleMaster));
    return TitleMaster;
  }

  Office_xp::MsoTriState __fastcall get_HasTitleMaster(void)
  {
    Office_xp::MsoTriState HasTitleMaster;
    OLECHECK(this->get_HasTitleMaster((Office_xp::MsoTriState*)&HasTitleMaster));
    return HasTitleMaster;
  }

  Powerpoint_xp::_Master* __fastcall AddTitleMaster(void)
  {
    Powerpoint_xp::_Master* TitleMaster;
    OLECHECK(this->AddTitleMaster((Powerpoint_xp::_Master**)&TitleMaster));
    return TitleMaster;
  }

  BSTR __fastcall get_TemplateName(void)
  {
    BSTR TemplateName = 0;
    OLECHECK(this->get_TemplateName((BSTR*)&TemplateName));
    return TemplateName;
  }

  Powerpoint_xp::_Master* __fastcall get_NotesMaster(void)
  {
    Powerpoint_xp::_Master* NotesMaster;
    OLECHECK(this->get_NotesMaster((Powerpoint_xp::_Master**)&NotesMaster));
    return NotesMaster;
  }

  Powerpoint_xp::_Master* __fastcall get_HandoutMaster(void)
  {
    Powerpoint_xp::_Master* HandoutMaster;
    OLECHECK(this->get_HandoutMaster((Powerpoint_xp::_Master**)&HandoutMaster));
    return HandoutMaster;
  }

  Powerpoint_xp::Slides* __fastcall get_Slides(void)
  {
    Powerpoint_xp::Slides* Slides;
    OLECHECK(this->get_Slides((Powerpoint_xp::Slides**)&Slides));
    return Slides;
  }

  Powerpoint_xp::PageSetup* __fastcall get_PageSetup(void)
  {
    Powerpoint_xp::PageSetup* PageSetup;
    OLECHECK(this->get_PageSetup((Powerpoint_xp::PageSetup**)&PageSetup));
    return PageSetup;
  }

  Powerpoint_xp::ColorSchemes* __fastcall get_ColorSchemes(void)
  {
    Powerpoint_xp::ColorSchemes* ColorSchemes;
    OLECHECK(this->get_ColorSchemes((Powerpoint_xp::ColorSchemes**)&ColorSchemes));
    return ColorSchemes;
  }

  Powerpoint_xp::ExtraColors* __fastcall get_ExtraColors(void)
  {
    Powerpoint_xp::ExtraColors* ExtraColors;
    OLECHECK(this->get_ExtraColors((Powerpoint_xp::ExtraColors**)&ExtraColors));
    return ExtraColors;
  }

  Powerpoint_xp::SlideShowSettings* __fastcall get_SlideShowSettings(void)
  {
    Powerpoint_xp::SlideShowSettings* SlideShowSettings;
    OLECHECK(this->get_SlideShowSettings((Powerpoint_xp::SlideShowSettings**)&SlideShowSettings));
    return SlideShowSettings;
  }

  Powerpoint_xp::Fonts* __fastcall get_Fonts(void)
  {
    Powerpoint_xp::Fonts* Fonts;
    OLECHECK(this->get_Fonts((Powerpoint_xp::Fonts**)&Fonts));
    return Fonts;
  }

  Powerpoint_xp::DocumentWindows* __fastcall get_Windows(void)
  {
    Powerpoint_xp::DocumentWindows* Windows;
    OLECHECK(this->get_Windows((Powerpoint_xp::DocumentWindows**)&Windows));
    return Windows;
  }

  Powerpoint_xp::Tags* __fastcall get_Tags(void)
  {
    Powerpoint_xp::Tags* Tags;
    OLECHECK(this->get_Tags((Powerpoint_xp::Tags**)&Tags));
    return Tags;
  }

  Powerpoint_xp::Shape* __fastcall get_DefaultShape(void)
  {
    Powerpoint_xp::Shape* DefaultShape;
    OLECHECK(this->get_DefaultShape((Powerpoint_xp::Shape**)&DefaultShape));
    return DefaultShape;
  }

  LPDISPATCH __fastcall get_BuiltInDocumentProperties(void)
  {
    LPDISPATCH BuiltInDocumentProperties;
    OLECHECK(this->get_BuiltInDocumentProperties((LPDISPATCH*)&BuiltInDocumentProperties));
    return BuiltInDocumentProperties;
  }

  LPDISPATCH __fastcall get_CustomDocumentProperties(void)
  {
    LPDISPATCH CustomDocumentProperties;
    OLECHECK(this->get_CustomDocumentProperties((LPDISPATCH*)&CustomDocumentProperties));
    return CustomDocumentProperties;
  }

  Vbide_xp::VBProject* __fastcall get_VBProject(void)
  {
    Vbide_xp::VBProject* VBProject;
    OLECHECK(this->get_VBProject((Vbide_xp::VBProject**)&VBProject));
    return VBProject;
  }

  Office_xp::MsoTriState __fastcall get_ReadOnly(void)
  {
    Office_xp::MsoTriState ReadOnly;
    OLECHECK(this->get_ReadOnly((Office_xp::MsoTriState*)&ReadOnly));
    return ReadOnly;
  }

  BSTR __fastcall get_FullName(void)
  {
    BSTR FullName = 0;
    OLECHECK(this->get_FullName((BSTR*)&FullName));
    return FullName;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_Path(void)
  {
    BSTR Path = 0;
    OLECHECK(this->get_Path((BSTR*)&Path));
    return Path;
  }

  Office_xp::MsoTriState __fastcall get_Saved(void)
  {
    Office_xp::MsoTriState Saved;
    OLECHECK(this->get_Saved((Office_xp::MsoTriState*)&Saved));
    return Saved;
  }

  Powerpoint_xp::PpDirection __fastcall get_LayoutDirection(void)
  {
    Powerpoint_xp::PpDirection LayoutDirection;
    OLECHECK(this->get_LayoutDirection((Powerpoint_xp::PpDirection*)&LayoutDirection));
    return LayoutDirection;
  }

  Powerpoint_xp::DocumentWindow* __fastcall NewWindow(void)
  {
    Powerpoint_xp::DocumentWindow* NewWindow;
    OLECHECK(this->NewWindow((Powerpoint_xp::DocumentWindow**)&NewWindow));
    return NewWindow;
  }

  Powerpoint_xp::PrintOptions* __fastcall get_PrintOptions(void)
  {
    Powerpoint_xp::PrintOptions* PrintOptions;
    OLECHECK(this->get_PrintOptions((Powerpoint_xp::PrintOptions**)&PrintOptions));
    return PrintOptions;
  }

  LPDISPATCH __fastcall get_Container(void)
  {
    LPDISPATCH Container;
    OLECHECK(this->get_Container((LPDISPATCH*)&Container));
    return Container;
  }

  Office_xp::MsoTriState __fastcall get_DisplayComments(void)
  {
    Office_xp::MsoTriState DisplayComments;
    OLECHECK(this->get_DisplayComments((Office_xp::MsoTriState*)&DisplayComments));
    return DisplayComments;
  }

  Powerpoint_xp::PpFarEastLineBreakLevel __fastcall get_FarEastLineBreakLevel(void)
  {
    Powerpoint_xp::PpFarEastLineBreakLevel FarEastLineBreakLevel;
    OLECHECK(this->get_FarEastLineBreakLevel((Powerpoint_xp::PpFarEastLineBreakLevel*)&FarEastLineBreakLevel));
    return FarEastLineBreakLevel;
  }

  BSTR __fastcall get_NoLineBreakBefore(void)
  {
    BSTR NoLineBreakBefore = 0;
    OLECHECK(this->get_NoLineBreakBefore((BSTR*)&NoLineBreakBefore));
    return NoLineBreakBefore;
  }

  BSTR __fastcall get_NoLineBreakAfter(void)
  {
    BSTR NoLineBreakAfter = 0;
    OLECHECK(this->get_NoLineBreakAfter((BSTR*)&NoLineBreakAfter));
    return NoLineBreakAfter;
  }

  Powerpoint_xp::SlideShowWindow* __fastcall get_SlideShowWindow(void)
  {
    Powerpoint_xp::SlideShowWindow* SlideShowWindow;
    OLECHECK(this->get_SlideShowWindow((Powerpoint_xp::SlideShowWindow**)&SlideShowWindow));
    return SlideShowWindow;
  }

  Office_xp::MsoFarEastLineBreakLanguageID __fastcall get_FarEastLineBreakLanguage(void)
  {
    Office_xp::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage;
    OLECHECK(this->get_FarEastLineBreakLanguage((Office_xp::MsoFarEastLineBreakLanguageID*)&FarEastLineBreakLanguage));
    return FarEastLineBreakLanguage;
  }

  Office_xp::MsoLanguageID __fastcall get_DefaultLanguageID(void)
  {
    Office_xp::MsoLanguageID DefaultLanguageID;
    OLECHECK(this->get_DefaultLanguageID((Office_xp::MsoLanguageID*)&DefaultLanguageID));
    return DefaultLanguageID;
  }

  Office_xp::CommandBars* __fastcall get_CommandBars(void)
  {
    Office_xp::CommandBars* CommandBars;
    OLECHECK(this->get_CommandBars((Office_xp::CommandBars**)&CommandBars));
    return CommandBars;
  }

  Powerpoint_xp::PublishObjects* __fastcall get_PublishObjects(void)
  {
    Powerpoint_xp::PublishObjects* PublishObjects;
    OLECHECK(this->get_PublishObjects((Powerpoint_xp::PublishObjects**)&PublishObjects));
    return PublishObjects;
  }

  Powerpoint_xp::WebOptions* __fastcall get_WebOptions(void)
  {
    Powerpoint_xp::WebOptions* WebOptions;
    OLECHECK(this->get_WebOptions((Powerpoint_xp::WebOptions**)&WebOptions));
    return WebOptions;
  }

  Office_xp::HTMLProject* __fastcall get_HTMLProject(void)
  {
    Office_xp::HTMLProject* HTMLProject;
    OLECHECK(this->get_HTMLProject((Office_xp::HTMLProject**)&HTMLProject));
    return HTMLProject;
  }

  Office_xp::MsoTriState __fastcall get_EnvelopeVisible(void)
  {
    Office_xp::MsoTriState EnvelopeVisible;
    OLECHECK(this->get_EnvelopeVisible((Office_xp::MsoTriState*)&EnvelopeVisible));
    return EnvelopeVisible;
  }

  Office_xp::MsoTriState __fastcall get_VBASigned(void)
  {
    Office_xp::MsoTriState VBASigned;
    OLECHECK(this->get_VBASigned((Office_xp::MsoTriState*)&VBASigned));
    return VBASigned;
  }

  Office_xp::MsoTriState __fastcall get_SnapToGrid(void)
  {
    Office_xp::MsoTriState SnapToGrid;
    OLECHECK(this->get_SnapToGrid((Office_xp::MsoTriState*)&SnapToGrid));
    return SnapToGrid;
  }

  float __fastcall get_GridDistance(void)
  {
    float GridDistance;
    OLECHECK(this->get_GridDistance((float*)&GridDistance));
    return GridDistance;
  }

  Powerpoint_xp::Designs* __fastcall get_Designs(void)
  {
    Powerpoint_xp::Designs* Designs;
    OLECHECK(this->get_Designs((Powerpoint_xp::Designs**)&Designs));
    return Designs;
  }

  VARIANT_BOOL __fastcall CanCheckIn(void)
  {
    VARIANT_BOOL CanCheckIn;
    OLECHECK(this->CanCheckIn((VARIANT_BOOL*)&CanCheckIn));
    return CanCheckIn;
  }

  Office_xp::SignatureSet* __fastcall get_Signatures(void)
  {
    Office_xp::SignatureSet* Signatures;
    OLECHECK(this->get_Signatures((Office_xp::SignatureSet**)&Signatures));
    return Signatures;
  }

  Office_xp::MsoTriState __fastcall get_RemovePersonalInformation(void)
  {
    Office_xp::MsoTriState RemovePersonalInformation;
    OLECHECK(this->get_RemovePersonalInformation((Office_xp::MsoTriState*)&RemovePersonalInformation));
    return RemovePersonalInformation;
  }

  Powerpoint_xp::PpRevisionInfo __fastcall get_HasRevisionInfo(void)
  {
    Powerpoint_xp::PpRevisionInfo HasRevisionInfo;
    OLECHECK(this->get_HasRevisionInfo((Powerpoint_xp::PpRevisionInfo*)&HasRevisionInfo));
    return HasRevisionInfo;
  }

  BSTR __fastcall get_PasswordEncryptionProvider(void)
  {
    BSTR PasswordEncryptionProvider = 0;
    OLECHECK(this->get_PasswordEncryptionProvider((BSTR*)&PasswordEncryptionProvider));
    return PasswordEncryptionProvider;
  }

  BSTR __fastcall get_PasswordEncryptionAlgorithm(void)
  {
    BSTR PasswordEncryptionAlgorithm = 0;
    OLECHECK(this->get_PasswordEncryptionAlgorithm((BSTR*)&PasswordEncryptionAlgorithm));
    return PasswordEncryptionAlgorithm;
  }

  int __fastcall get_PasswordEncryptionKeyLength(void)
  {
    int PasswordEncryptionKeyLength;
    OLECHECK(this->get_PasswordEncryptionKeyLength((int*)&PasswordEncryptionKeyLength));
    return PasswordEncryptionKeyLength;
  }

  VARIANT_BOOL __fastcall get_PasswordEncryptionFileProperties(void)
  {
    VARIANT_BOOL PasswordEncryptionFileProperties;
    OLECHECK(this->get_PasswordEncryptionFileProperties((VARIANT_BOOL*)&PasswordEncryptionFileProperties));
    return PasswordEncryptionFileProperties;
  }

  BSTR __fastcall get_Password(void)
  {
    BSTR Password = 0;
    OLECHECK(this->get_Password((BSTR*)&Password));
    return Password;
  }

  BSTR __fastcall get_WritePassword(void)
  {
    BSTR WritePassword = 0;
    OLECHECK(this->get_WritePassword((BSTR*)&WritePassword));
    return WritePassword;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::_Master* SlideMaster = {read = get_SlideMaster};
  __property   Powerpoint_xp::_Master* TitleMaster = {read = get_TitleMaster};
  __property   Office_xp::MsoTriState HasTitleMaster = {read = get_HasTitleMaster};
  __property   BSTR            TemplateName = {read = get_TemplateName};
  __property   Powerpoint_xp::_Master* NotesMaster = {read = get_NotesMaster};
  __property   Powerpoint_xp::_Master* HandoutMaster = {read = get_HandoutMaster};
  __property   Powerpoint_xp::Slides* Slides = {read = get_Slides};
  __property   Powerpoint_xp::PageSetup* PageSetup = {read = get_PageSetup};
  __property   Powerpoint_xp::ColorSchemes* ColorSchemes = {read = get_ColorSchemes};
  __property   Powerpoint_xp::ExtraColors* ExtraColors = {read = get_ExtraColors};
  __property   Powerpoint_xp::SlideShowSettings* SlideShowSettings = {read = get_SlideShowSettings};
  __property   Powerpoint_xp::Fonts* Fonts = {read = get_Fonts};
  __property   Powerpoint_xp::DocumentWindows* Windows = {read = get_Windows};
  __property   Powerpoint_xp::Tags* Tags = {read = get_Tags};
  __property   Powerpoint_xp::Shape* DefaultShape = {read = get_DefaultShape};
  __property   LPDISPATCH      BuiltInDocumentProperties = {read = get_BuiltInDocumentProperties};
  __property   LPDISPATCH      CustomDocumentProperties = {read = get_CustomDocumentProperties};
  __property   Vbide_xp::VBProject* VBProject = {read = get_VBProject};
  __property   Office_xp::MsoTriState ReadOnly = {read = get_ReadOnly};
  __property   BSTR            FullName = {read = get_FullName};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Path = {read = get_Path};
  __property   Office_xp::MsoTriState Saved = {read = get_Saved, write = set_Saved};
  __property   Powerpoint_xp::PpDirection LayoutDirection = {read = get_LayoutDirection, write = set_LayoutDirection};
  __property   Powerpoint_xp::PrintOptions* PrintOptions = {read = get_PrintOptions};
  __property   LPDISPATCH      Container = {read = get_Container};
  __property   Office_xp::MsoTriState DisplayComments = {read = get_DisplayComments, write = set_DisplayComments};
  __property   Powerpoint_xp::PpFarEastLineBreakLevel FarEastLineBreakLevel = {read = get_FarEastLineBreakLevel, write = set_FarEastLineBreakLevel};
  __property   BSTR            NoLineBreakBefore = {read = get_NoLineBreakBefore};
  __property   BSTR            NoLineBreakAfter = {read = get_NoLineBreakAfter};
  __property   Powerpoint_xp::SlideShowWindow* SlideShowWindow = {read = get_SlideShowWindow};
  __property   Office_xp::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage = {read = get_FarEastLineBreakLanguage, write = set_FarEastLineBreakLanguage};
  __property   Office_xp::MsoLanguageID DefaultLanguageID = {read = get_DefaultLanguageID, write = set_DefaultLanguageID};
  __property   Office_xp::CommandBars* CommandBars = {read = get_CommandBars};
  __property   Powerpoint_xp::PublishObjects* PublishObjects = {read = get_PublishObjects};
  __property   Powerpoint_xp::WebOptions* WebOptions = {read = get_WebOptions};
  __property   Office_xp::HTMLProject* HTMLProject = {read = get_HTMLProject};
  __property   Office_xp::MsoTriState EnvelopeVisible = {read = get_EnvelopeVisible, write = set_EnvelopeVisible};
  __property   Office_xp::MsoTriState VBASigned = {read = get_VBASigned};
  __property   Office_xp::MsoTriState SnapToGrid = {read = get_SnapToGrid, write = set_SnapToGrid};
  __property   float           GridDistance = {read = get_GridDistance, write = set_GridDistance};
  __property   Powerpoint_xp::Designs* Designs = {read = get_Designs};
  __property   Office_xp::SignatureSet* Signatures = {read = get_Signatures};
  __property   Office_xp::MsoTriState RemovePersonalInformation = {read = get_RemovePersonalInformation, write = set_RemovePersonalInformation};
  __property   Powerpoint_xp::PpRevisionInfo HasRevisionInfo = {read = get_HasRevisionInfo};
  __property   BSTR            PasswordEncryptionProvider = {read = get_PasswordEncryptionProvider};
  __property   BSTR            PasswordEncryptionAlgorithm = {read = get_PasswordEncryptionAlgorithm};
  __property   int             PasswordEncryptionKeyLength = {read = get_PasswordEncryptionKeyLength};
  __property   VARIANT_BOOL    PasswordEncryptionFileProperties = {read = get_PasswordEncryptionFileProperties};
  __property   BSTR            Password = {read = get_Password};
  __property   BSTR            WritePassword = {read = get_WritePassword};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Hyperlinks
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493464-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Hyperlinks  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, 
                                         Powerpoint_xp::Hyperlink** Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Hyperlink* __fastcall Item(int Index/*[in]*/)
  {
    Powerpoint_xp::Hyperlink* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::Hyperlink**)&Item));
    return Item;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Hyperlink
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493465-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Hyperlink  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_xp::MsoHyperlinkType* Type/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Address(BSTR* Address/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Address(BSTR Address/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_SubAddress(BSTR* SubAddress/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_SubAddress(BSTR SubAddress/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE AddToFavorites(void) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_EmailSubject(BSTR* EmailSubject/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_EmailSubject(BSTR EmailSubject/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_ScreenTip(BSTR* ScreenTip/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_ScreenTip(BSTR ScreenTip/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_TextToDisplay(BSTR* TextToDisplay/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_TextToDisplay(BSTR TextToDisplay/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_ShowAndReturn(Office_xp::MsoTriState* ShowAndReturn/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_ShowAndReturn(Office_xp::MsoTriState ShowAndReturn/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE Follow(void) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE CreateNewDocument(BSTR FileName/*[in]*/, 
                                                      Office_xp::MsoTriState EditNow/*[in]*/, 
                                                      Office_xp::MsoTriState Overwrite/*[in]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2013]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_xp::MsoHyperlinkType __fastcall get_Type(void)
  {
    Office_xp::MsoHyperlinkType Type;
    OLECHECK(this->get_Type((Office_xp::MsoHyperlinkType*)&Type));
    return Type;
  }

  BSTR __fastcall get_Address(void)
  {
    BSTR Address = 0;
    OLECHECK(this->get_Address((BSTR*)&Address));
    return Address;
  }

  BSTR __fastcall get_SubAddress(void)
  {
    BSTR SubAddress = 0;
    OLECHECK(this->get_SubAddress((BSTR*)&SubAddress));
    return SubAddress;
  }

  BSTR __fastcall get_EmailSubject(void)
  {
    BSTR EmailSubject = 0;
    OLECHECK(this->get_EmailSubject((BSTR*)&EmailSubject));
    return EmailSubject;
  }

  BSTR __fastcall get_ScreenTip(void)
  {
    BSTR ScreenTip = 0;
    OLECHECK(this->get_ScreenTip((BSTR*)&ScreenTip));
    return ScreenTip;
  }

  BSTR __fastcall get_TextToDisplay(void)
  {
    BSTR TextToDisplay = 0;
    OLECHECK(this->get_TextToDisplay((BSTR*)&TextToDisplay));
    return TextToDisplay;
  }

  Office_xp::MsoTriState __fastcall get_ShowAndReturn(void)
  {
    Office_xp::MsoTriState ShowAndReturn;
    OLECHECK(this->get_ShowAndReturn((Office_xp::MsoTriState*)&ShowAndReturn));
    return ShowAndReturn;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoHyperlinkType Type = {read = get_Type};
  __property   BSTR            Address = {read = get_Address};
  __property   BSTR            SubAddress = {read = get_SubAddress};
  __property   BSTR            EmailSubject = {read = get_EmailSubject};
  __property   BSTR            ScreenTip = {read = get_ScreenTip};
  __property   BSTR            TextToDisplay = {read = get_TextToDisplay};
  __property   Office_xp::MsoTriState ShowAndReturn = {read = get_ShowAndReturn, write = set_ShowAndReturn};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PageSetup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493466-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PageSetup  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_FirstSlideNumber(int* FirstSlideNumber/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_FirstSlideNumber(int FirstSlideNumber/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_SlideHeight(float* SlideHeight/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_SlideHeight(float SlideHeight/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_SlideWidth(float* SlideWidth/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_SlideWidth(float SlideWidth/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_SlideSize(Powerpoint_xp::PpSlideSizeType* SlideSize/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_SlideSize(Powerpoint_xp::PpSlideSizeType SlideSize/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_NotesOrientation(Office_xp::MsoOrientation* NotesOrientation/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_NotesOrientation(Office_xp::MsoOrientation NotesOrientation/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_SlideOrientation(Office_xp::MsoOrientation* SlideOrientation/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_SlideOrientation(Office_xp::MsoOrientation SlideOrientation/*[in]*/) = 0; // [2008]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_FirstSlideNumber(void)
  {
    int FirstSlideNumber;
    OLECHECK(this->get_FirstSlideNumber((int*)&FirstSlideNumber));
    return FirstSlideNumber;
  }

  float __fastcall get_SlideHeight(void)
  {
    float SlideHeight;
    OLECHECK(this->get_SlideHeight((float*)&SlideHeight));
    return SlideHeight;
  }

  float __fastcall get_SlideWidth(void)
  {
    float SlideWidth;
    OLECHECK(this->get_SlideWidth((float*)&SlideWidth));
    return SlideWidth;
  }

  Powerpoint_xp::PpSlideSizeType __fastcall get_SlideSize(void)
  {
    Powerpoint_xp::PpSlideSizeType SlideSize;
    OLECHECK(this->get_SlideSize((Powerpoint_xp::PpSlideSizeType*)&SlideSize));
    return SlideSize;
  }

  Office_xp::MsoOrientation __fastcall get_NotesOrientation(void)
  {
    Office_xp::MsoOrientation NotesOrientation;
    OLECHECK(this->get_NotesOrientation((Office_xp::MsoOrientation*)&NotesOrientation));
    return NotesOrientation;
  }

  Office_xp::MsoOrientation __fastcall get_SlideOrientation(void)
  {
    Office_xp::MsoOrientation SlideOrientation;
    OLECHECK(this->get_SlideOrientation((Office_xp::MsoOrientation*)&SlideOrientation));
    return SlideOrientation;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             FirstSlideNumber = {read = get_FirstSlideNumber, write = set_FirstSlideNumber};
  __property   float           SlideHeight = {read = get_SlideHeight, write = set_SlideHeight};
  __property   float           SlideWidth = {read = get_SlideWidth, write = set_SlideWidth};
  __property   Powerpoint_xp::PpSlideSizeType SlideSize = {read = get_SlideSize, write = set_SlideSize};
  __property   Office_xp::MsoOrientation NotesOrientation = {read = get_NotesOrientation, write = set_NotesOrientation};
  __property   Office_xp::MsoOrientation SlideOrientation = {read = get_SlideOrientation, write = set_SlideOrientation};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Fonts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493467-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Fonts  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT Index/*[in]*/, 
                                         Powerpoint_xp::Font** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Replace(BSTR Original/*[in]*/, BSTR Replacement/*[in]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Font* __fastcall Item(VARIANT Index/*[in]*/)
  {
    Powerpoint_xp::Font* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::Font**)&Item));
    return Item;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ExtraColors
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493468-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ExtraColors  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, 
                                         Office_xp::MsoRGBType* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(Office_xp::MsoRGBType Type/*[in]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_xp::MsoRGBType __fastcall Item(int Index/*[in]*/)
  {
    Office_xp::MsoRGBType Item;
    OLECHECK(this->Item(Index, (Office_xp::MsoRGBType*)&Item));
    return Item;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Slides
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493469-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Slides  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT Index/*[in]*/, 
                                         Powerpoint_xp::PowerPointSlide** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE FindBySlideID(long SlideID/*[in]*/, 
                                                  Powerpoint_xp::PowerPointSlide** FindBySlideID/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Add(int Index/*[in]*/, 
                                        Powerpoint_xp::PpSlideLayout Layout/*[in]*/, 
                                        Powerpoint_xp::PowerPointSlide** Add/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE InsertFromFile(BSTR FileName/*[in]*/, int Index/*[in]*/, 
                                                   int SlideStart/*[in,def,opt]*/, 
                                                   int SlideEnd/*[in,def,opt]*/, 
                                                   int* FromFile/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE Range(VARIANT Index/*[in,opt]*/, 
                                          Powerpoint_xp::SlideRange** Range/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE Paste(int Index/*[in,def,opt]*/, 
                                          Powerpoint_xp::SlideRange** Paste/*[out,retval]*/) = 0; // [2007]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::PowerPointSlide* __fastcall Item(VARIANT Index/*[in]*/)
  {
    Powerpoint_xp::PowerPointSlide* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::PowerPointSlide**)&Item));
    return Item;
  }

  Powerpoint_xp::PowerPointSlide* __fastcall FindBySlideID(long SlideID/*[in]*/)
  {
    Powerpoint_xp::PowerPointSlide* FindBySlideID;
    OLECHECK(this->FindBySlideID(SlideID, (Powerpoint_xp::PowerPointSlide**)&FindBySlideID));
    return FindBySlideID;
  }

  Powerpoint_xp::PowerPointSlide* __fastcall Add(int Index/*[in]*/, 
                                                 Powerpoint_xp::PpSlideLayout Layout/*[in]*/)
  {
    Powerpoint_xp::PowerPointSlide* Add;
    OLECHECK(this->Add(Index, Layout, (Powerpoint_xp::PowerPointSlide**)&Add));
    return Add;
  }

  int __fastcall InsertFromFile(BSTR FileName/*[in]*/, int Index/*[in]*/, 
                                int SlideStart/*[in,def,opt]*/, int SlideEnd/*[in,def,opt]*/)
  {
    int FromFile;
    OLECHECK(this->InsertFromFile(FileName, Index, SlideStart, SlideEnd, (int*)&FromFile));
    return FromFile;
  }

  Powerpoint_xp::SlideRange* __fastcall Range(VARIANT Index/*[in,opt]*/= TNoParam())
  {
    Powerpoint_xp::SlideRange* Range;
    OLECHECK(this->Range(Index, (Powerpoint_xp::SlideRange**)&Range));
    return Range;
  }

  Powerpoint_xp::SlideRange* __fastcall Paste(int Index/*[in,def,opt]*/)
  {
    Powerpoint_xp::SlideRange* Paste;
    OLECHECK(this->Paste(Index, (Powerpoint_xp::SlideRange**)&Paste));
    return Paste;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Slide
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface _Slide  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Shapes(Powerpoint_xp::Shapes** Shapes/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_HeadersFooters(Powerpoint_xp::HeadersFooters** HeadersFooters/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowTransition(Powerpoint_xp::SlideShowTransition** SlideShowTransition/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_ColorScheme(Powerpoint_xp::ColorScheme** ColorScheme/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_ColorScheme(Powerpoint_xp::ColorScheme* ColorScheme/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Background(Powerpoint_xp::ShapeRange** Background/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_SlideID(long* SlideID/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_PrintSteps(int* PrintSteps/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE Cut(void) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE Copy(void) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_Layout(Powerpoint_xp::PpSlideLayout* Layout/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE set_Layout(Powerpoint_xp::PpSlideLayout Layout/*[in]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE Duplicate(Powerpoint_xp::SlideRange** Duplicate/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE get_Tags(Powerpoint_xp::Tags** Tags/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE get_SlideIndex(int* SlideIndex/*[out,retval]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE get_SlideNumber(int* SlideNumber/*[out,retval]*/) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayMasterShapes(Office_xp::MsoTriState* DisplayMasterShapes/*[out,retval]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayMasterShapes(Office_xp::MsoTriState DisplayMasterShapes/*[in]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE get_FollowMasterBackground(Office_xp::MsoTriState* FollowMasterBackground/*[out,retval]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE set_FollowMasterBackground(Office_xp::MsoTriState FollowMasterBackground/*[in]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE get_NotesPage(Powerpoint_xp::SlideRange** NotesPage/*[out,retval]*/) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_Master(Powerpoint_xp::_Master** Master/*[out,retval]*/) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE get_Hyperlinks(Powerpoint_xp::Hyperlinks** Hyperlinks/*[out,retval]*/) = 0; // [2024]
  virtual HRESULT STDMETHODCALLTYPE Export(BSTR FileName/*[in]*/, BSTR FilterName/*[in]*/, 
                                           int ScaleWidth/*[in,def,opt]*/, 
                                           int ScaleHeight/*[in,def,opt]*/) = 0; // [2025]
  virtual HRESULT STDMETHODCALLTYPE get_Scripts(Office_xp::Scripts** Scripts/*[out,retval]*/) = 0; // [2026]
  virtual HRESULT STDMETHODCALLTYPE get_Comments(Powerpoint_xp::Comments** Comments/*[out,retval]*/) = 0; // [2028]
  virtual HRESULT STDMETHODCALLTYPE get_Design(Powerpoint_xp::Design** Design/*[out,retval]*/) = 0; // [2029]
  virtual HRESULT STDMETHODCALLTYPE set_Design(Powerpoint_xp::Design* Design/*[in]*/) = 0; // [2029]
  virtual HRESULT STDMETHODCALLTYPE MoveTo(int toPos/*[in]*/) = 0; // [2030]
  virtual HRESULT STDMETHODCALLTYPE get_TimeLine(Powerpoint_xp::TimeLine** TimeLine/*[out,retval]*/) = 0; // [2031]
  virtual HRESULT STDMETHODCALLTYPE ApplyTemplate(BSTR FileName/*[in]*/) = 0; // [2032]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Shapes* __fastcall get_Shapes(void)
  {
    Powerpoint_xp::Shapes* Shapes;
    OLECHECK(this->get_Shapes((Powerpoint_xp::Shapes**)&Shapes));
    return Shapes;
  }

  Powerpoint_xp::HeadersFooters* __fastcall get_HeadersFooters(void)
  {
    Powerpoint_xp::HeadersFooters* HeadersFooters;
    OLECHECK(this->get_HeadersFooters((Powerpoint_xp::HeadersFooters**)&HeadersFooters));
    return HeadersFooters;
  }

  Powerpoint_xp::SlideShowTransition* __fastcall get_SlideShowTransition(void)
  {
    Powerpoint_xp::SlideShowTransition* SlideShowTransition;
    OLECHECK(this->get_SlideShowTransition((Powerpoint_xp::SlideShowTransition**)&SlideShowTransition));
    return SlideShowTransition;
  }

  Powerpoint_xp::ColorScheme* __fastcall get_ColorScheme(void)
  {
    Powerpoint_xp::ColorScheme* ColorScheme;
    OLECHECK(this->get_ColorScheme((Powerpoint_xp::ColorScheme**)&ColorScheme));
    return ColorScheme;
  }

  Powerpoint_xp::ShapeRange* __fastcall get_Background(void)
  {
    Powerpoint_xp::ShapeRange* Background;
    OLECHECK(this->get_Background((Powerpoint_xp::ShapeRange**)&Background));
    return Background;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  long __fastcall get_SlideID(void)
  {
    long SlideID;
    OLECHECK(this->get_SlideID((long*)&SlideID));
    return SlideID;
  }

  int __fastcall get_PrintSteps(void)
  {
    int PrintSteps;
    OLECHECK(this->get_PrintSteps((int*)&PrintSteps));
    return PrintSteps;
  }

  Powerpoint_xp::PpSlideLayout __fastcall get_Layout(void)
  {
    Powerpoint_xp::PpSlideLayout Layout;
    OLECHECK(this->get_Layout((Powerpoint_xp::PpSlideLayout*)&Layout));
    return Layout;
  }

  Powerpoint_xp::SlideRange* __fastcall Duplicate(void)
  {
    Powerpoint_xp::SlideRange* Duplicate;
    OLECHECK(this->Duplicate((Powerpoint_xp::SlideRange**)&Duplicate));
    return Duplicate;
  }

  Powerpoint_xp::Tags* __fastcall get_Tags(void)
  {
    Powerpoint_xp::Tags* Tags;
    OLECHECK(this->get_Tags((Powerpoint_xp::Tags**)&Tags));
    return Tags;
  }

  int __fastcall get_SlideIndex(void)
  {
    int SlideIndex;
    OLECHECK(this->get_SlideIndex((int*)&SlideIndex));
    return SlideIndex;
  }

  int __fastcall get_SlideNumber(void)
  {
    int SlideNumber;
    OLECHECK(this->get_SlideNumber((int*)&SlideNumber));
    return SlideNumber;
  }

  Office_xp::MsoTriState __fastcall get_DisplayMasterShapes(void)
  {
    Office_xp::MsoTriState DisplayMasterShapes;
    OLECHECK(this->get_DisplayMasterShapes((Office_xp::MsoTriState*)&DisplayMasterShapes));
    return DisplayMasterShapes;
  }

  Office_xp::MsoTriState __fastcall get_FollowMasterBackground(void)
  {
    Office_xp::MsoTriState FollowMasterBackground;
    OLECHECK(this->get_FollowMasterBackground((Office_xp::MsoTriState*)&FollowMasterBackground));
    return FollowMasterBackground;
  }

  Powerpoint_xp::SlideRange* __fastcall get_NotesPage(void)
  {
    Powerpoint_xp::SlideRange* NotesPage;
    OLECHECK(this->get_NotesPage((Powerpoint_xp::SlideRange**)&NotesPage));
    return NotesPage;
  }

  Powerpoint_xp::_Master* __fastcall get_Master(void)
  {
    Powerpoint_xp::_Master* Master;
    OLECHECK(this->get_Master((Powerpoint_xp::_Master**)&Master));
    return Master;
  }

  Powerpoint_xp::Hyperlinks* __fastcall get_Hyperlinks(void)
  {
    Powerpoint_xp::Hyperlinks* Hyperlinks;
    OLECHECK(this->get_Hyperlinks((Powerpoint_xp::Hyperlinks**)&Hyperlinks));
    return Hyperlinks;
  }

  Office_xp::Scripts* __fastcall get_Scripts(void)
  {
    Office_xp::Scripts* Scripts;
    OLECHECK(this->get_Scripts((Office_xp::Scripts**)&Scripts));
    return Scripts;
  }

  Powerpoint_xp::Comments* __fastcall get_Comments(void)
  {
    Powerpoint_xp::Comments* Comments;
    OLECHECK(this->get_Comments((Powerpoint_xp::Comments**)&Comments));
    return Comments;
  }

  Powerpoint_xp::Design* __fastcall get_Design(void)
  {
    Powerpoint_xp::Design* Design;
    OLECHECK(this->get_Design((Powerpoint_xp::Design**)&Design));
    return Design;
  }

  Powerpoint_xp::TimeLine* __fastcall get_TimeLine(void)
  {
    Powerpoint_xp::TimeLine* TimeLine;
    OLECHECK(this->get_TimeLine((Powerpoint_xp::TimeLine**)&TimeLine));
    return TimeLine;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Shapes* Shapes = {read = get_Shapes};
  __property   Powerpoint_xp::HeadersFooters* HeadersFooters = {read = get_HeadersFooters};
  __property   Powerpoint_xp::SlideShowTransition* SlideShowTransition = {read = get_SlideShowTransition};
  __property   Powerpoint_xp::ColorScheme* ColorScheme = {read = get_ColorScheme, write = set_ColorScheme};
  __property   Powerpoint_xp::ShapeRange* Background = {read = get_Background};
  __property   BSTR            Name = {read = get_Name};
  __property   long            SlideID = {read = get_SlideID};
  __property   int             PrintSteps = {read = get_PrintSteps};
  __property   Powerpoint_xp::PpSlideLayout Layout = {read = get_Layout, write = set_Layout};
  __property   Powerpoint_xp::Tags* Tags = {read = get_Tags};
  __property   int             SlideIndex = {read = get_SlideIndex};
  __property   int             SlideNumber = {read = get_SlideNumber};
  __property   Office_xp::MsoTriState DisplayMasterShapes = {read = get_DisplayMasterShapes, write = set_DisplayMasterShapes};
  __property   Office_xp::MsoTriState FollowMasterBackground = {read = get_FollowMasterBackground, write = set_FollowMasterBackground};
  __property   Powerpoint_xp::SlideRange* NotesPage = {read = get_NotesPage};
  __property   Powerpoint_xp::_Master* Master = {read = get_Master};
  __property   Powerpoint_xp::Hyperlinks* Hyperlinks = {read = get_Hyperlinks};
  __property   Office_xp::Scripts* Scripts = {read = get_Scripts};
  __property   Powerpoint_xp::Comments* Comments = {read = get_Comments};
  __property   Powerpoint_xp::Design* Design = {read = get_Design, write = set_Design};
  __property   Powerpoint_xp::TimeLine* TimeLine = {read = get_TimeLine};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SlideRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface SlideRange  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Shapes(Powerpoint_xp::Shapes** Shapes/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_HeadersFooters(Powerpoint_xp::HeadersFooters** HeadersFooters/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowTransition(Powerpoint_xp::SlideShowTransition** SlideShowTransition/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_ColorScheme(Powerpoint_xp::ColorScheme** ColorScheme/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_ColorScheme(Powerpoint_xp::ColorScheme* ColorScheme/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Background(Powerpoint_xp::ShapeRange** Background/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_SlideID(long* SlideID/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_PrintSteps(int* PrintSteps/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE Cut(void) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE Copy(void) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_Layout(Powerpoint_xp::PpSlideLayout* Layout/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE set_Layout(Powerpoint_xp::PpSlideLayout Layout/*[in]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE Duplicate(Powerpoint_xp::SlideRange** Duplicate/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE get_Tags(Powerpoint_xp::Tags** Tags/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE get_SlideIndex(int* SlideIndex/*[out,retval]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE get_SlideNumber(int* SlideNumber/*[out,retval]*/) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayMasterShapes(Office_xp::MsoTriState* DisplayMasterShapes/*[out,retval]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayMasterShapes(Office_xp::MsoTriState DisplayMasterShapes/*[in]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE get_FollowMasterBackground(Office_xp::MsoTriState* FollowMasterBackground/*[out,retval]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE set_FollowMasterBackground(Office_xp::MsoTriState FollowMasterBackground/*[in]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE get_NotesPage(Powerpoint_xp::SlideRange** NotesPage/*[out,retval]*/) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_Master(Powerpoint_xp::_Master** Master/*[out,retval]*/) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE get_Hyperlinks(Powerpoint_xp::Hyperlinks** Hyperlinks/*[out,retval]*/) = 0; // [2024]
  virtual HRESULT STDMETHODCALLTYPE Export(BSTR FileName/*[in]*/, BSTR FilterName/*[in]*/, 
                                           int ScaleWidth/*[in,def,opt]*/, 
                                           int ScaleHeight/*[in,def,opt]*/) = 0; // [2025]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT Index/*[in]*/, 
                                         Powerpoint_xp::PowerPointSlide** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_Scripts(Office_xp::Scripts** Scripts/*[out,retval]*/) = 0; // [2026]
  virtual HRESULT STDMETHODCALLTYPE get_Comments(Powerpoint_xp::Comments** Comments/*[out,retval]*/) = 0; // [2028]
  virtual HRESULT STDMETHODCALLTYPE get_Design(Powerpoint_xp::Design** Design/*[out,retval]*/) = 0; // [2029]
  virtual HRESULT STDMETHODCALLTYPE set_Design(Powerpoint_xp::Design* Design/*[in]*/) = 0; // [2029]
  virtual HRESULT STDMETHODCALLTYPE MoveTo(int toPos/*[in]*/) = 0; // [2030]
  virtual HRESULT STDMETHODCALLTYPE get_TimeLine(Powerpoint_xp::TimeLine** TimeLine/*[out,retval]*/) = 0; // [2031]
  virtual HRESULT STDMETHODCALLTYPE ApplyTemplate(BSTR FileName/*[in]*/) = 0; // [2032]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Shapes* __fastcall get_Shapes(void)
  {
    Powerpoint_xp::Shapes* Shapes;
    OLECHECK(this->get_Shapes((Powerpoint_xp::Shapes**)&Shapes));
    return Shapes;
  }

  Powerpoint_xp::HeadersFooters* __fastcall get_HeadersFooters(void)
  {
    Powerpoint_xp::HeadersFooters* HeadersFooters;
    OLECHECK(this->get_HeadersFooters((Powerpoint_xp::HeadersFooters**)&HeadersFooters));
    return HeadersFooters;
  }

  Powerpoint_xp::SlideShowTransition* __fastcall get_SlideShowTransition(void)
  {
    Powerpoint_xp::SlideShowTransition* SlideShowTransition;
    OLECHECK(this->get_SlideShowTransition((Powerpoint_xp::SlideShowTransition**)&SlideShowTransition));
    return SlideShowTransition;
  }

  Powerpoint_xp::ColorScheme* __fastcall get_ColorScheme(void)
  {
    Powerpoint_xp::ColorScheme* ColorScheme;
    OLECHECK(this->get_ColorScheme((Powerpoint_xp::ColorScheme**)&ColorScheme));
    return ColorScheme;
  }

  Powerpoint_xp::ShapeRange* __fastcall get_Background(void)
  {
    Powerpoint_xp::ShapeRange* Background;
    OLECHECK(this->get_Background((Powerpoint_xp::ShapeRange**)&Background));
    return Background;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  long __fastcall get_SlideID(void)
  {
    long SlideID;
    OLECHECK(this->get_SlideID((long*)&SlideID));
    return SlideID;
  }

  int __fastcall get_PrintSteps(void)
  {
    int PrintSteps;
    OLECHECK(this->get_PrintSteps((int*)&PrintSteps));
    return PrintSteps;
  }

  Powerpoint_xp::PpSlideLayout __fastcall get_Layout(void)
  {
    Powerpoint_xp::PpSlideLayout Layout;
    OLECHECK(this->get_Layout((Powerpoint_xp::PpSlideLayout*)&Layout));
    return Layout;
  }

  Powerpoint_xp::SlideRange* __fastcall Duplicate(void)
  {
    Powerpoint_xp::SlideRange* Duplicate;
    OLECHECK(this->Duplicate((Powerpoint_xp::SlideRange**)&Duplicate));
    return Duplicate;
  }

  Powerpoint_xp::Tags* __fastcall get_Tags(void)
  {
    Powerpoint_xp::Tags* Tags;
    OLECHECK(this->get_Tags((Powerpoint_xp::Tags**)&Tags));
    return Tags;
  }

  int __fastcall get_SlideIndex(void)
  {
    int SlideIndex;
    OLECHECK(this->get_SlideIndex((int*)&SlideIndex));
    return SlideIndex;
  }

  int __fastcall get_SlideNumber(void)
  {
    int SlideNumber;
    OLECHECK(this->get_SlideNumber((int*)&SlideNumber));
    return SlideNumber;
  }

  Office_xp::MsoTriState __fastcall get_DisplayMasterShapes(void)
  {
    Office_xp::MsoTriState DisplayMasterShapes;
    OLECHECK(this->get_DisplayMasterShapes((Office_xp::MsoTriState*)&DisplayMasterShapes));
    return DisplayMasterShapes;
  }

  Office_xp::MsoTriState __fastcall get_FollowMasterBackground(void)
  {
    Office_xp::MsoTriState FollowMasterBackground;
    OLECHECK(this->get_FollowMasterBackground((Office_xp::MsoTriState*)&FollowMasterBackground));
    return FollowMasterBackground;
  }

  Powerpoint_xp::SlideRange* __fastcall get_NotesPage(void)
  {
    Powerpoint_xp::SlideRange* NotesPage;
    OLECHECK(this->get_NotesPage((Powerpoint_xp::SlideRange**)&NotesPage));
    return NotesPage;
  }

  Powerpoint_xp::_Master* __fastcall get_Master(void)
  {
    Powerpoint_xp::_Master* Master;
    OLECHECK(this->get_Master((Powerpoint_xp::_Master**)&Master));
    return Master;
  }

  Powerpoint_xp::Hyperlinks* __fastcall get_Hyperlinks(void)
  {
    Powerpoint_xp::Hyperlinks* Hyperlinks;
    OLECHECK(this->get_Hyperlinks((Powerpoint_xp::Hyperlinks**)&Hyperlinks));
    return Hyperlinks;
  }

  Powerpoint_xp::PowerPointSlide* __fastcall Item(VARIANT Index/*[in]*/)
  {
    Powerpoint_xp::PowerPointSlide* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::PowerPointSlide**)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }

  VARIANT __fastcall _Index(int Index/*[in]*/)
  {
    VARIANT _Index;
    OLECHECK(this->_Index(Index, (VARIANT*)&_Index));
    return _Index;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Office_xp::Scripts* __fastcall get_Scripts(void)
  {
    Office_xp::Scripts* Scripts;
    OLECHECK(this->get_Scripts((Office_xp::Scripts**)&Scripts));
    return Scripts;
  }

  Powerpoint_xp::Comments* __fastcall get_Comments(void)
  {
    Powerpoint_xp::Comments* Comments;
    OLECHECK(this->get_Comments((Powerpoint_xp::Comments**)&Comments));
    return Comments;
  }

  Powerpoint_xp::Design* __fastcall get_Design(void)
  {
    Powerpoint_xp::Design* Design;
    OLECHECK(this->get_Design((Powerpoint_xp::Design**)&Design));
    return Design;
  }

  Powerpoint_xp::TimeLine* __fastcall get_TimeLine(void)
  {
    Powerpoint_xp::TimeLine* TimeLine;
    OLECHECK(this->get_TimeLine((Powerpoint_xp::TimeLine**)&TimeLine));
    return TimeLine;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Shapes* Shapes = {read = get_Shapes};
  __property   Powerpoint_xp::HeadersFooters* HeadersFooters = {read = get_HeadersFooters};
  __property   Powerpoint_xp::SlideShowTransition* SlideShowTransition = {read = get_SlideShowTransition};
  __property   Powerpoint_xp::ColorScheme* ColorScheme = {read = get_ColorScheme, write = set_ColorScheme};
  __property   Powerpoint_xp::ShapeRange* Background = {read = get_Background};
  __property   BSTR            Name = {read = get_Name};
  __property   long            SlideID = {read = get_SlideID};
  __property   int             PrintSteps = {read = get_PrintSteps};
  __property   Powerpoint_xp::PpSlideLayout Layout = {read = get_Layout, write = set_Layout};
  __property   Powerpoint_xp::Tags* Tags = {read = get_Tags};
  __property   int             SlideIndex = {read = get_SlideIndex};
  __property   int             SlideNumber = {read = get_SlideNumber};
  __property   Office_xp::MsoTriState DisplayMasterShapes = {read = get_DisplayMasterShapes, write = set_DisplayMasterShapes};
  __property   Office_xp::MsoTriState FollowMasterBackground = {read = get_FollowMasterBackground, write = set_FollowMasterBackground};
  __property   Powerpoint_xp::SlideRange* NotesPage = {read = get_NotesPage};
  __property   Powerpoint_xp::_Master* Master = {read = get_Master};
  __property   Powerpoint_xp::Hyperlinks* Hyperlinks = {read = get_Hyperlinks};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
  __property   Office_xp::Scripts* Scripts = {read = get_Scripts};
  __property   Powerpoint_xp::Comments* Comments = {read = get_Comments};
  __property   Powerpoint_xp::Design* Design = {read = get_Design, write = set_Design};
  __property   Powerpoint_xp::TimeLine* TimeLine = {read = get_TimeLine};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Master
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface _Master  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Shapes(Powerpoint_xp::Shapes** Shapes/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_HeadersFooters(Powerpoint_xp::HeadersFooters** HeadersFooters/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_ColorScheme(Powerpoint_xp::ColorScheme** ColorScheme/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_ColorScheme(Powerpoint_xp::ColorScheme* ColorScheme/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Background(Powerpoint_xp::ShapeRange** Background/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_TextStyles(Powerpoint_xp::TextStyles** TextStyles/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_Hyperlinks(Powerpoint_xp::Hyperlinks** Hyperlinks/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_Scripts(Office_xp::Scripts** Scripts/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_Design(Powerpoint_xp::Design** Design/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_TimeLine(Powerpoint_xp::TimeLine** TimeLine/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowTransition(Powerpoint_xp::SlideShowTransition** SlideShowTransition/*[out,retval]*/) = 0; // [2016]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Shapes* __fastcall get_Shapes(void)
  {
    Powerpoint_xp::Shapes* Shapes;
    OLECHECK(this->get_Shapes((Powerpoint_xp::Shapes**)&Shapes));
    return Shapes;
  }

  Powerpoint_xp::HeadersFooters* __fastcall get_HeadersFooters(void)
  {
    Powerpoint_xp::HeadersFooters* HeadersFooters;
    OLECHECK(this->get_HeadersFooters((Powerpoint_xp::HeadersFooters**)&HeadersFooters));
    return HeadersFooters;
  }

  Powerpoint_xp::ColorScheme* __fastcall get_ColorScheme(void)
  {
    Powerpoint_xp::ColorScheme* ColorScheme;
    OLECHECK(this->get_ColorScheme((Powerpoint_xp::ColorScheme**)&ColorScheme));
    return ColorScheme;
  }

  Powerpoint_xp::ShapeRange* __fastcall get_Background(void)
  {
    Powerpoint_xp::ShapeRange* Background;
    OLECHECK(this->get_Background((Powerpoint_xp::ShapeRange**)&Background));
    return Background;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  Powerpoint_xp::TextStyles* __fastcall get_TextStyles(void)
  {
    Powerpoint_xp::TextStyles* TextStyles;
    OLECHECK(this->get_TextStyles((Powerpoint_xp::TextStyles**)&TextStyles));
    return TextStyles;
  }

  Powerpoint_xp::Hyperlinks* __fastcall get_Hyperlinks(void)
  {
    Powerpoint_xp::Hyperlinks* Hyperlinks;
    OLECHECK(this->get_Hyperlinks((Powerpoint_xp::Hyperlinks**)&Hyperlinks));
    return Hyperlinks;
  }

  Office_xp::Scripts* __fastcall get_Scripts(void)
  {
    Office_xp::Scripts* Scripts;
    OLECHECK(this->get_Scripts((Office_xp::Scripts**)&Scripts));
    return Scripts;
  }

  Powerpoint_xp::Design* __fastcall get_Design(void)
  {
    Powerpoint_xp::Design* Design;
    OLECHECK(this->get_Design((Powerpoint_xp::Design**)&Design));
    return Design;
  }

  Powerpoint_xp::TimeLine* __fastcall get_TimeLine(void)
  {
    Powerpoint_xp::TimeLine* TimeLine;
    OLECHECK(this->get_TimeLine((Powerpoint_xp::TimeLine**)&TimeLine));
    return TimeLine;
  }

  Powerpoint_xp::SlideShowTransition* __fastcall get_SlideShowTransition(void)
  {
    Powerpoint_xp::SlideShowTransition* SlideShowTransition;
    OLECHECK(this->get_SlideShowTransition((Powerpoint_xp::SlideShowTransition**)&SlideShowTransition));
    return SlideShowTransition;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Shapes* Shapes = {read = get_Shapes};
  __property   Powerpoint_xp::HeadersFooters* HeadersFooters = {read = get_HeadersFooters};
  __property   Powerpoint_xp::ColorScheme* ColorScheme = {read = get_ColorScheme, write = set_ColorScheme};
  __property   Powerpoint_xp::ShapeRange* Background = {read = get_Background};
  __property   BSTR            Name = {read = get_Name};
  __property   float           Height = {read = get_Height};
  __property   float           Width = {read = get_Width};
  __property   Powerpoint_xp::TextStyles* TextStyles = {read = get_TextStyles};
  __property   Powerpoint_xp::Hyperlinks* Hyperlinks = {read = get_Hyperlinks};
  __property   Office_xp::Scripts* Scripts = {read = get_Scripts};
  __property   Powerpoint_xp::Design* Design = {read = get_Design};
  __property   Powerpoint_xp::TimeLine* TimeLine = {read = get_TimeLine};
  __property   Powerpoint_xp::SlideShowTransition* SlideShowTransition = {read = get_SlideShowTransition};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SldEvents
// Flags:     (16) Hidden
// GUID:      {9149346D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface SldEvents  : public IUnknown
{
public:
};

// *********************************************************************//
// Interface: ColorSchemes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ColorSchemes  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, 
                                         Powerpoint_xp::ColorScheme** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(Powerpoint_xp::ColorScheme* Scheme/*[in,def,opt]*/, 
                                        Powerpoint_xp::ColorScheme** Add/*[out,retval]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::ColorScheme* __fastcall Item(int Index/*[in]*/)
  {
    Powerpoint_xp::ColorScheme* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::ColorScheme**)&Item));
    return Item;
  }

  Powerpoint_xp::ColorScheme* __fastcall Add(Powerpoint_xp::ColorScheme* Scheme/*[in,def,opt]*/)
  {
    Powerpoint_xp::ColorScheme* Add;
    OLECHECK(this->Add(Scheme, (Powerpoint_xp::ColorScheme**)&Add));
    return Add;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ColorScheme
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ColorScheme  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Colors(Powerpoint_xp::PpColorSchemeIndex SchemeColor/*[in]*/, 
                                           Powerpoint_xp::RGBColor** Colors/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::RGBColor* __fastcall Colors(Powerpoint_xp::PpColorSchemeIndex SchemeColor/*[in]*/)
  {
    Powerpoint_xp::RGBColor* Colors;
    OLECHECK(this->Colors(SchemeColor, (Powerpoint_xp::RGBColor**)&Colors));
    return Colors;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: RGBColor
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493470-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface RGBColor  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_rgb(Office_xp::MsoRGBType* rgb/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_rgb(Office_xp::MsoRGBType rgb/*[in]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_xp::MsoRGBType __fastcall get_rgb(void)
  {
    Office_xp::MsoRGBType rgb;
    OLECHECK(this->get_rgb((Office_xp::MsoRGBType*)&rgb));
    return rgb;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoRGBType rgb = {read = get_rgb, write = set_rgb};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SlideShowTransition
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493471-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface SlideShowTransition  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_AdvanceOnClick(Office_xp::MsoTriState* AdvanceOnClick/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_AdvanceOnClick(Office_xp::MsoTriState AdvanceOnClick/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_AdvanceOnTime(Office_xp::MsoTriState* AdvanceOnTime/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_AdvanceOnTime(Office_xp::MsoTriState AdvanceOnTime/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_AdvanceTime(float* AdvanceTime/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_AdvanceTime(float AdvanceTime/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_EntryEffect(Powerpoint_xp::PpEntryEffect* EntryEffect/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_EntryEffect(Powerpoint_xp::PpEntryEffect EntryEffect/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Hidden(Office_xp::MsoTriState* Hidden/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_Hidden(Office_xp::MsoTriState Hidden/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_LoopSoundUntilNext(Office_xp::MsoTriState* LoopSoundUntilNext/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_LoopSoundUntilNext(Office_xp::MsoTriState LoopSoundUntilNext/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_SoundEffect(Powerpoint_xp::SoundEffect** SoundEffect/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_Speed(Powerpoint_xp::PpTransitionSpeed* Speed/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_Speed(Powerpoint_xp::PpTransitionSpeed Speed/*[in]*/) = 0; // [2010]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_xp::MsoTriState __fastcall get_AdvanceOnClick(void)
  {
    Office_xp::MsoTriState AdvanceOnClick;
    OLECHECK(this->get_AdvanceOnClick((Office_xp::MsoTriState*)&AdvanceOnClick));
    return AdvanceOnClick;
  }

  Office_xp::MsoTriState __fastcall get_AdvanceOnTime(void)
  {
    Office_xp::MsoTriState AdvanceOnTime;
    OLECHECK(this->get_AdvanceOnTime((Office_xp::MsoTriState*)&AdvanceOnTime));
    return AdvanceOnTime;
  }

  float __fastcall get_AdvanceTime(void)
  {
    float AdvanceTime;
    OLECHECK(this->get_AdvanceTime((float*)&AdvanceTime));
    return AdvanceTime;
  }

  Powerpoint_xp::PpEntryEffect __fastcall get_EntryEffect(void)
  {
    Powerpoint_xp::PpEntryEffect EntryEffect;
    OLECHECK(this->get_EntryEffect((Powerpoint_xp::PpEntryEffect*)&EntryEffect));
    return EntryEffect;
  }

  Office_xp::MsoTriState __fastcall get_Hidden(void)
  {
    Office_xp::MsoTriState Hidden;
    OLECHECK(this->get_Hidden((Office_xp::MsoTriState*)&Hidden));
    return Hidden;
  }

  Office_xp::MsoTriState __fastcall get_LoopSoundUntilNext(void)
  {
    Office_xp::MsoTriState LoopSoundUntilNext;
    OLECHECK(this->get_LoopSoundUntilNext((Office_xp::MsoTriState*)&LoopSoundUntilNext));
    return LoopSoundUntilNext;
  }

  Powerpoint_xp::SoundEffect* __fastcall get_SoundEffect(void)
  {
    Powerpoint_xp::SoundEffect* SoundEffect;
    OLECHECK(this->get_SoundEffect((Powerpoint_xp::SoundEffect**)&SoundEffect));
    return SoundEffect;
  }

  Powerpoint_xp::PpTransitionSpeed __fastcall get_Speed(void)
  {
    Powerpoint_xp::PpTransitionSpeed Speed;
    OLECHECK(this->get_Speed((Powerpoint_xp::PpTransitionSpeed*)&Speed));
    return Speed;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoTriState AdvanceOnClick = {read = get_AdvanceOnClick, write = set_AdvanceOnClick};
  __property   Office_xp::MsoTriState AdvanceOnTime = {read = get_AdvanceOnTime, write = set_AdvanceOnTime};
  __property   float           AdvanceTime = {read = get_AdvanceTime, write = set_AdvanceTime};
  __property   Powerpoint_xp::PpEntryEffect EntryEffect = {read = get_EntryEffect, write = set_EntryEffect};
  __property   Office_xp::MsoTriState Hidden = {read = get_Hidden, write = set_Hidden};
  __property   Office_xp::MsoTriState LoopSoundUntilNext = {read = get_LoopSoundUntilNext, write = set_LoopSoundUntilNext};
  __property   Powerpoint_xp::SoundEffect* SoundEffect = {read = get_SoundEffect};
  __property   Powerpoint_xp::PpTransitionSpeed Speed = {read = get_Speed, write = set_Speed};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SoundEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493472-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface SoundEffect  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Powerpoint_xp::PpSoundEffectType* Type/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Powerpoint_xp::PpSoundEffectType Type/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE ImportFromFile(BSTR FileName/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE Play(void) = 0; // [2006]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Powerpoint_xp::PpSoundEffectType __fastcall get_Type(void)
  {
    Powerpoint_xp::PpSoundEffectType Type;
    OLECHECK(this->get_Type((Powerpoint_xp::PpSoundEffectType*)&Type));
    return Type;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Powerpoint_xp::PpSoundEffectType Type = {read = get_Type, write = set_Type};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SoundFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493473-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface SoundFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Play(void) = 0; // [2000]
  virtual HRESULT STDMETHODCALLTYPE Import(BSTR FileName/*[in]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE Export(BSTR FileName/*[in]*/, 
                                           Powerpoint_xp::PpSoundFormatType* Export/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Powerpoint_xp::PpSoundFormatType* Type/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_SourceFullName(BSTR* SourceFullName/*[out,retval]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PpSoundFormatType __fastcall Export(BSTR FileName/*[in]*/)
  {
    Powerpoint_xp::PpSoundFormatType Export;
    OLECHECK(this->Export(FileName, (Powerpoint_xp::PpSoundFormatType*)&Export));
    return Export;
  }

  Powerpoint_xp::PpSoundFormatType __fastcall get_Type(void)
  {
    Powerpoint_xp::PpSoundFormatType Type;
    OLECHECK(this->get_Type((Powerpoint_xp::PpSoundFormatType*)&Type));
    return Type;
  }

  BSTR __fastcall get_SourceFullName(void)
  {
    BSTR SourceFullName = 0;
    OLECHECK(this->get_SourceFullName((BSTR*)&SourceFullName));
    return SourceFullName;
  }


  __property   Powerpoint_xp::PpSoundFormatType Type = {read = get_Type};
  __property   BSTR            SourceFullName = {read = get_SourceFullName};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: HeadersFooters
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493474-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface HeadersFooters  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_DateAndTime(Powerpoint_xp::HeaderFooter** DateAndTime/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_SlideNumber(Powerpoint_xp::HeaderFooter** SlideNumber/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Header(Powerpoint_xp::HeaderFooter** Header/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Footer(Powerpoint_xp::HeaderFooter** Footer/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayOnTitleSlide(Office_xp::MsoTriState* DisplayOnTitleSlide/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayOnTitleSlide(Office_xp::MsoTriState DisplayOnTitleSlide/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0; // [2008]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::HeaderFooter* __fastcall get_DateAndTime(void)
  {
    Powerpoint_xp::HeaderFooter* DateAndTime;
    OLECHECK(this->get_DateAndTime((Powerpoint_xp::HeaderFooter**)&DateAndTime));
    return DateAndTime;
  }

  Powerpoint_xp::HeaderFooter* __fastcall get_SlideNumber(void)
  {
    Powerpoint_xp::HeaderFooter* SlideNumber;
    OLECHECK(this->get_SlideNumber((Powerpoint_xp::HeaderFooter**)&SlideNumber));
    return SlideNumber;
  }

  Powerpoint_xp::HeaderFooter* __fastcall get_Header(void)
  {
    Powerpoint_xp::HeaderFooter* Header;
    OLECHECK(this->get_Header((Powerpoint_xp::HeaderFooter**)&Header));
    return Header;
  }

  Powerpoint_xp::HeaderFooter* __fastcall get_Footer(void)
  {
    Powerpoint_xp::HeaderFooter* Footer;
    OLECHECK(this->get_Footer((Powerpoint_xp::HeaderFooter**)&Footer));
    return Footer;
  }

  Office_xp::MsoTriState __fastcall get_DisplayOnTitleSlide(void)
  {
    Office_xp::MsoTriState DisplayOnTitleSlide;
    OLECHECK(this->get_DisplayOnTitleSlide((Office_xp::MsoTriState*)&DisplayOnTitleSlide));
    return DisplayOnTitleSlide;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::HeaderFooter* DateAndTime = {read = get_DateAndTime};
  __property   Powerpoint_xp::HeaderFooter* SlideNumber = {read = get_SlideNumber};
  __property   Powerpoint_xp::HeaderFooter* Header = {read = get_Header};
  __property   Powerpoint_xp::HeaderFooter* Footer = {read = get_Footer};
  __property   Office_xp::MsoTriState DisplayOnTitleSlide = {read = get_DisplayOnTitleSlide, write = set_DisplayOnTitleSlide};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Shapes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493475-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Shapes  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* Count/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT Index/*[in]*/, 
                                         Powerpoint_xp::Shape** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE AddCallout(Office_xp::MsoCalloutType Type/*[in]*/, 
                                               float Left/*[in]*/, float Top/*[in]*/, 
                                               float Width/*[in]*/, float Height/*[in]*/, 
                                               Powerpoint_xp::Shape** Callout/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE AddConnector(Office_xp::MsoConnectorType Type/*[in]*/, 
                                                 float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                 float EndX/*[in]*/, float EndY/*[in]*/, 
                                                 Powerpoint_xp::Shape** Connector/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE AddCurve(VARIANT SafeArrayOfPoints/*[in]*/, 
                                             Powerpoint_xp::Shape** Curve/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE AddLabel(Office_xp::MsoTextOrientation Orientation/*[in]*/, 
                                             float Left/*[in]*/, float Top/*[in]*/, 
                                             float Width/*[in]*/, float Height/*[in]*/, 
                                             Powerpoint_xp::Shape** Label/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                            float EndX/*[in]*/, float EndY/*[in]*/, 
                                            Powerpoint_xp::Shape** Line/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE AddPicture(BSTR FileName/*[in]*/, 
                                               Office_xp::MsoTriState LinkToFile/*[in]*/, 
                                               Office_xp::MsoTriState SaveWithDocument/*[in]*/, 
                                               float Left/*[in]*/, float Top/*[in]*/, 
                                               float Width/*[in,def,opt]*/, 
                                               float Height/*[in,def,opt]*/, 
                                               Powerpoint_xp::Shape** Picture/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE AddPolyline(VARIANT SafeArrayOfPoints/*[in]*/, 
                                                Powerpoint_xp::Shape** Polyline/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE AddShape(Office_xp::MsoAutoShapeType Type/*[in]*/, 
                                             float Left/*[in]*/, float Top/*[in]*/, 
                                             float Width/*[in]*/, float Height/*[in]*/, 
                                             Powerpoint_xp::Shape** Shape/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE AddTextEffect(Office_xp::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                                                  BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                                  float FontSize/*[in]*/, 
                                                  Office_xp::MsoTriState FontBold/*[in]*/, 
                                                  Office_xp::MsoTriState FontItalic/*[in]*/, 
                                                  float Left/*[in]*/, float Top/*[in]*/, 
                                                  Powerpoint_xp::Shape** TextEffect/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE AddTextbox(Office_xp::MsoTextOrientation Orientation/*[in]*/, 
                                               float Left/*[in]*/, float Top/*[in]*/, 
                                               float Width/*[in]*/, float Height/*[in]*/, 
                                               Powerpoint_xp::Shape** Textbox/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE BuildFreeform(Office_xp::MsoEditingType EditingType/*[in]*/, 
                                                  float X1/*[in]*/, float Y1/*[in]*/, 
                                                  Powerpoint_xp::FreeformBuilder** FreeformBuilder/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE SelectAll(void) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE Range(VARIANT Index/*[in,opt]*/, 
                                          Powerpoint_xp::ShapeRange** Range/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_HasTitle(Office_xp::MsoTriState* HasTitle/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE AddTitle(Powerpoint_xp::Shape** Title/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Title(Powerpoint_xp::Shape** Title/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Placeholders(Powerpoint_xp::Placeholders** Placeholders/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE AddOLEObject(float Left/*[in,def,opt]*/, 
                                                 float Top/*[in,def,opt]*/, 
                                                 float Width/*[in,def,opt]*/, 
                                                 float Height/*[in,def,opt]*/, 
                                                 BSTR ClassName/*[in,def,opt]*/, 
                                                 BSTR FileName/*[in,def,opt]*/, 
                                                 Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                                                 BSTR IconFileName/*[in,def,opt]*/, 
                                                 int IconIndex/*[in,def,opt]*/, 
                                                 BSTR IconLabel/*[in,def,opt]*/, 
                                                 Office_xp::MsoTriState Link/*[in,def,opt]*/, 
                                                 Powerpoint_xp::Shape** OLEObject/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE AddComment(float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                                               float Width/*[in,def,opt]*/, 
                                               float Height/*[in,def,opt]*/, 
                                               Powerpoint_xp::Shape** Comment/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE AddPlaceholder(Powerpoint_xp::PpPlaceholderType Type/*[in]*/, 
                                                   float Left/*[in,def,opt]*/, 
                                                   float Top/*[in,def,opt]*/, 
                                                   float Width/*[in,def,opt]*/, 
                                                   float Height/*[in,def,opt]*/, 
                                                   Powerpoint_xp::Shape** Placeholder/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE AddMediaObject(BSTR FileName/*[in]*/, float Left/*[in,def,opt]*/, 
                                                   float Top/*[in,def,opt]*/, 
                                                   float Width/*[in,def,opt]*/, 
                                                   float Height/*[in,def,opt]*/, 
                                                   Powerpoint_xp::Shape** MediaObject/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE Paste(Powerpoint_xp::ShapeRange** Paste/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE AddTable(int NumRows/*[in]*/, int NumColumns/*[in]*/, 
                                             float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                                             float Width/*[in,def,opt]*/, 
                                             float Height/*[in,def,opt]*/, 
                                             Powerpoint_xp::Shape** Table/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE PasteSpecial(Powerpoint_xp::PpPasteDataType DataType/*[in,def,opt]*/, 
                                                 Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                                                 BSTR IconFileName/*[in,def,opt]*/, 
                                                 int IconIndex/*[in,def,opt]*/, 
                                                 BSTR IconLabel/*[in,def,opt]*/, 
                                                 Office_xp::MsoTriState Link/*[in,def,opt]*/, 
                                                 Powerpoint_xp::ShapeRange** PasteSpecial/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE AddDiagram(Office_xp::MsoDiagramType Type/*[in]*/, 
                                               float Left/*[in]*/, float Top/*[in]*/, 
                                               float Width/*[in]*/, float Height/*[in]*/, 
                                               Powerpoint_xp::Shape** Diagram/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE AddCanvas(float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in]*/, float Height/*[in]*/, 
                                              Powerpoint_xp::Shape** Shape/*[out,retval]*/) = 0; // [25]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Count(void)
  {
    int Count;
    OLECHECK(this->get_Count((int*)&Count));
    return Count;
  }

  Powerpoint_xp::Shape* __fastcall Item(VARIANT Index/*[in]*/)
  {
    Powerpoint_xp::Shape* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::Shape**)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }

  Powerpoint_xp::Shape* __fastcall AddCallout(Office_xp::MsoCalloutType Type/*[in]*/, 
                                              float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_xp::Shape* Callout;
    OLECHECK(this->AddCallout(Type, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Callout));
    return Callout;
  }

  Powerpoint_xp::Shape* __fastcall AddConnector(Office_xp::MsoConnectorType Type/*[in]*/, 
                                                float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                float EndX/*[in]*/, float EndY/*[in]*/)
  {
    Powerpoint_xp::Shape* Connector;
    OLECHECK(this->AddConnector(Type, BeginX, BeginY, EndX, EndY, (Powerpoint_xp::Shape**)&Connector));
    return Connector;
  }

  Powerpoint_xp::Shape* __fastcall AddCurve(VARIANT SafeArrayOfPoints/*[in]*/)
  {
    Powerpoint_xp::Shape* Curve;
    OLECHECK(this->AddCurve(SafeArrayOfPoints, (Powerpoint_xp::Shape**)&Curve));
    return Curve;
  }

  Powerpoint_xp::Shape* __fastcall AddLabel(Office_xp::MsoTextOrientation Orientation/*[in]*/, 
                                            float Left/*[in]*/, float Top/*[in]*/, 
                                            float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_xp::Shape* Label;
    OLECHECK(this->AddLabel(Orientation, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Label));
    return Label;
  }

  Powerpoint_xp::Shape* __fastcall AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                           float EndX/*[in]*/, float EndY/*[in]*/)
  {
    Powerpoint_xp::Shape* Line;
    OLECHECK(this->AddLine(BeginX, BeginY, EndX, EndY, (Powerpoint_xp::Shape**)&Line));
    return Line;
  }

  Powerpoint_xp::Shape* __fastcall AddPicture(BSTR FileName/*[in]*/, 
                                              Office_xp::MsoTriState LinkToFile/*[in]*/, 
                                              Office_xp::MsoTriState SaveWithDocument/*[in]*/, 
                                              float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in,def,opt]*/, 
                                              float Height/*[in,def,opt]*/)
  {
    Powerpoint_xp::Shape* Picture;
    OLECHECK(this->AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Picture));
    return Picture;
  }

  Powerpoint_xp::Shape* __fastcall AddPolyline(VARIANT SafeArrayOfPoints/*[in]*/)
  {
    Powerpoint_xp::Shape* Polyline;
    OLECHECK(this->AddPolyline(SafeArrayOfPoints, (Powerpoint_xp::Shape**)&Polyline));
    return Polyline;
  }

  Powerpoint_xp::Shape* __fastcall AddShape(Office_xp::MsoAutoShapeType Type/*[in]*/, 
                                            float Left/*[in]*/, float Top/*[in]*/, 
                                            float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_xp::Shape* Shape;
    OLECHECK(this->AddShape(Type, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Shape));
    return Shape;
  }

  Powerpoint_xp::Shape* __fastcall AddTextEffect(Office_xp::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                                                 BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                                 float FontSize/*[in]*/, 
                                                 Office_xp::MsoTriState FontBold/*[in]*/, 
                                                 Office_xp::MsoTriState FontItalic/*[in]*/, 
                                                 float Left/*[in]*/, float Top/*[in]*/)
  {
    Powerpoint_xp::Shape* TextEffect;
    OLECHECK(this->AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, 
                                 Left, Top, (Powerpoint_xp::Shape**)&TextEffect));
    return TextEffect;
  }

  Powerpoint_xp::Shape* __fastcall AddTextbox(Office_xp::MsoTextOrientation Orientation/*[in]*/, 
                                              float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_xp::Shape* Textbox;
    OLECHECK(this->AddTextbox(Orientation, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Textbox));
    return Textbox;
  }

  Powerpoint_xp::FreeformBuilder* __fastcall BuildFreeform(Office_xp::MsoEditingType EditingType/*[in]*/, 
                                                           float X1/*[in]*/, float Y1/*[in]*/)
  {
    Powerpoint_xp::FreeformBuilder* FreeformBuilder;
    OLECHECK(this->BuildFreeform(EditingType, X1, Y1, (Powerpoint_xp::FreeformBuilder**)&FreeformBuilder));
    return FreeformBuilder;
  }

  Powerpoint_xp::ShapeRange* __fastcall Range(VARIANT Index/*[in,opt]*/= TNoParam())
  {
    Powerpoint_xp::ShapeRange* Range;
    OLECHECK(this->Range(Index, (Powerpoint_xp::ShapeRange**)&Range));
    return Range;
  }

  Office_xp::MsoTriState __fastcall get_HasTitle(void)
  {
    Office_xp::MsoTriState HasTitle;
    OLECHECK(this->get_HasTitle((Office_xp::MsoTriState*)&HasTitle));
    return HasTitle;
  }

  Powerpoint_xp::Shape* __fastcall AddTitle(void)
  {
    Powerpoint_xp::Shape* Title;
    OLECHECK(this->AddTitle((Powerpoint_xp::Shape**)&Title));
    return Title;
  }

  Powerpoint_xp::Shape* __fastcall get_Title(void)
  {
    Powerpoint_xp::Shape* Title;
    OLECHECK(this->get_Title((Powerpoint_xp::Shape**)&Title));
    return Title;
  }

  Powerpoint_xp::Placeholders* __fastcall get_Placeholders(void)
  {
    Powerpoint_xp::Placeholders* Placeholders;
    OLECHECK(this->get_Placeholders((Powerpoint_xp::Placeholders**)&Placeholders));
    return Placeholders;
  }

  Powerpoint_xp::Shape* __fastcall AddOLEObject(float Left/*[in,def,opt]*/, 
                                                float Top/*[in,def,opt]*/, 
                                                float Width/*[in,def,opt]*/, 
                                                float Height/*[in,def,opt]*/, 
                                                BSTR ClassName/*[in,def,opt]*/, 
                                                BSTR FileName/*[in,def,opt]*/, 
                                                Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                                                BSTR IconFileName/*[in,def,opt]*/, 
                                                int IconIndex/*[in,def,opt]*/, 
                                                BSTR IconLabel/*[in,def,opt]*/, 
                                                Office_xp::MsoTriState Link/*[in,def,opt]*/)
  {
    Powerpoint_xp::Shape* OLEObject;
    OLECHECK(this->AddOLEObject(Left, Top, Width, Height, ClassName, FileName, DisplayAsIcon, 
                                IconFileName, IconIndex, IconLabel, Link, (Powerpoint_xp::Shape**)&OLEObject));
    return OLEObject;
  }

  Powerpoint_xp::Shape* __fastcall AddComment(float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                                              float Width/*[in,def,opt]*/, 
                                              float Height/*[in,def,opt]*/)
  {
    Powerpoint_xp::Shape* Comment;
    OLECHECK(this->AddComment(Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Comment));
    return Comment;
  }

  Powerpoint_xp::Shape* __fastcall AddPlaceholder(Powerpoint_xp::PpPlaceholderType Type/*[in]*/, 
                                                  float Left/*[in,def,opt]*/, 
                                                  float Top/*[in,def,opt]*/, 
                                                  float Width/*[in,def,opt]*/, 
                                                  float Height/*[in,def,opt]*/)
  {
    Powerpoint_xp::Shape* Placeholder;
    OLECHECK(this->AddPlaceholder(Type, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Placeholder));
    return Placeholder;
  }

  Powerpoint_xp::Shape* __fastcall AddMediaObject(BSTR FileName/*[in]*/, float Left/*[in,def,opt]*/, 
                                                  float Top/*[in,def,opt]*/, 
                                                  float Width/*[in,def,opt]*/, 
                                                  float Height/*[in,def,opt]*/)
  {
    Powerpoint_xp::Shape* MediaObject;
    OLECHECK(this->AddMediaObject(FileName, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&MediaObject));
    return MediaObject;
  }

  Powerpoint_xp::ShapeRange* __fastcall Paste(void)
  {
    Powerpoint_xp::ShapeRange* Paste;
    OLECHECK(this->Paste((Powerpoint_xp::ShapeRange**)&Paste));
    return Paste;
  }

  Powerpoint_xp::Shape* __fastcall AddTable(int NumRows/*[in]*/, int NumColumns/*[in]*/, 
                                            float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                                            float Width/*[in,def,opt]*/, 
                                            float Height/*[in,def,opt]*/)
  {
    Powerpoint_xp::Shape* Table;
    OLECHECK(this->AddTable(NumRows, NumColumns, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Table));
    return Table;
  }

  Powerpoint_xp::ShapeRange* __fastcall PasteSpecial(Powerpoint_xp::PpPasteDataType DataType/*[in,def,opt]*/, 
                                                     Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                                                     BSTR IconFileName/*[in,def,opt]*/, 
                                                     int IconIndex/*[in,def,opt]*/, 
                                                     BSTR IconLabel/*[in,def,opt]*/, 
                                                     Office_xp::MsoTriState Link/*[in,def,opt]*/)
  {
    Powerpoint_xp::ShapeRange* PasteSpecial;
    OLECHECK(this->PasteSpecial(DataType, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link, (Powerpoint_xp::ShapeRange**)&PasteSpecial));
    return PasteSpecial;
  }

  Powerpoint_xp::Shape* __fastcall AddDiagram(Office_xp::MsoDiagramType Type/*[in]*/, 
                                              float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_xp::Shape* Diagram;
    OLECHECK(this->AddDiagram(Type, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Diagram));
    return Diagram;
  }

  Powerpoint_xp::Shape* __fastcall AddCanvas(float Left/*[in]*/, float Top/*[in]*/, 
                                             float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_xp::Shape* Shape;
    OLECHECK(this->AddCanvas(Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Shape));
    return Shape;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Office_xp::MsoTriState HasTitle = {read = get_HasTitle};
  __property   Powerpoint_xp::Shape* Title = {read = get_Title};
  __property   Powerpoint_xp::Placeholders* Placeholders = {read = get_Placeholders};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Placeholders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493476-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Placeholders  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, 
                                         Powerpoint_xp::Shape** Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Shape* __fastcall Item(int Index/*[in]*/)
  {
    Powerpoint_xp::Shape* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::Shape**)&Item));
    return Item;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PlaceholderFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493477-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PlaceholderFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Powerpoint_xp::PpPlaceholderType* Type/*[out,retval]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::PpPlaceholderType __fastcall get_Type(void)
  {
    Powerpoint_xp::PpPlaceholderType Type;
    OLECHECK(this->get_Type((Powerpoint_xp::PpPlaceholderType*)&Type));
    return Type;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::PpPlaceholderType Type = {read = get_Type};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FreeformBuilder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493478-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface FreeformBuilder  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE AddNodes(Office_xp::MsoSegmentType SegmentType/*[in]*/, 
                                             Office_xp::MsoEditingType EditingType/*[in]*/, 
                                             float X1/*[in]*/, float Y1/*[in]*/, 
                                             float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/, 
                                             float X3/*[in,def,opt]*/, float Y3/*[in,def,opt]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE ConvertToShape(Powerpoint_xp::Shape** Freeform/*[out,retval]*/) = 0; // [11]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Shape* __fastcall ConvertToShape(void)
  {
    Powerpoint_xp::Shape* Freeform;
    OLECHECK(this->ConvertToShape((Powerpoint_xp::Shape**)&Freeform));
    return Freeform;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Shape
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493479-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Shape  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Apply(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Flip(Office_xp::MsoFlipCmd FlipCmd/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE IncrementLeft(float Increment/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE IncrementRotation(float Increment/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE IncrementTop(float Increment/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE PickUp(void) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE RerouteConnections(void) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE ScaleHeight(float Factor/*[in]*/, 
                                                Office_xp::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                                Office_xp::MsoScaleFrom fScale/*[in,def,opt]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE ScaleWidth(float Factor/*[in]*/, 
                                               Office_xp::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                               Office_xp::MsoScaleFrom fScale/*[in,def,opt]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE SetShapesDefaultProperties(void) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE Ungroup(Powerpoint_xp::ShapeRange** Ungroup/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE ZOrder(Office_xp::MsoZOrderCmd ZOrderCmd/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_Adjustments(Powerpoint_xp::Adjustments** Adjustments/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_AutoShapeType(Office_xp::MsoAutoShapeType* AutoShapeType/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_AutoShapeType(Office_xp::MsoAutoShapeType AutoShapeType/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_BlackWhiteMode(Office_xp::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_BlackWhiteMode(Office_xp::MsoBlackWhiteMode BlackWhiteMode/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_Callout(Powerpoint_xp::CalloutFormat** Callout/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_Connector(Office_xp::MsoTriState* Connector/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectorFormat(Powerpoint_xp::ConnectorFormat** ConnectorFormat/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_Fill(Powerpoint_xp::FillFormat** Fill/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_GroupItems(Powerpoint_xp::GroupShapes** GroupItems/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_HorizontalFlip(Office_xp::MsoTriState* HorizontalFlip/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Left(float Left/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_Line(Powerpoint_xp::LineFormat** Line/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_LockAspectRatio(Office_xp::MsoTriState* LockAspectRatio/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_LockAspectRatio(Office_xp::MsoTriState LockAspectRatio/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE get_Nodes(Powerpoint_xp::ShapeNodes** Nodes/*[out,retval]*/) = 0; // [116]
  virtual HRESULT STDMETHODCALLTYPE get_Rotation(float* Rotation/*[out,retval]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE set_Rotation(float Rotation/*[in]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE get_PictureFormat(Powerpoint_xp::PictureFormat** Picture/*[out,retval]*/) = 0; // [118]
  virtual HRESULT STDMETHODCALLTYPE get_Shadow(Powerpoint_xp::ShadowFormat** Shadow/*[out,retval]*/) = 0; // [119]
  virtual HRESULT STDMETHODCALLTYPE get_TextEffect(Powerpoint_xp::TextEffectFormat** TextEffect/*[out,retval]*/) = 0; // [120]
  virtual HRESULT STDMETHODCALLTYPE get_TextFrame(Powerpoint_xp::TextFrame** TextFrame/*[out,retval]*/) = 0; // [121]
  virtual HRESULT STDMETHODCALLTYPE get_ThreeD(Powerpoint_xp::ThreeDFormat** ThreeD/*[out,retval]*/) = 0; // [122]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_Top(float Top/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_xp::MsoShapeType* Type/*[out,retval]*/) = 0; // [124]
  virtual HRESULT STDMETHODCALLTYPE get_VerticalFlip(Office_xp::MsoTriState* VerticalFlip/*[out,retval]*/) = 0; // [125]
  virtual HRESULT STDMETHODCALLTYPE get_Vertices(VARIANT* Vertices/*[out,retval]*/) = 0; // [126]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_xp::MsoTriState Visible/*[in]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/) = 0; // [129]
  virtual HRESULT STDMETHODCALLTYPE get_OLEFormat(Powerpoint_xp::OLEFormat** OLEFormat/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_LinkFormat(Powerpoint_xp::LinkFormat** LinkFormat/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_PlaceholderFormat(Powerpoint_xp::PlaceholderFormat** PlaceholderFormat/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_AnimationSettings(Powerpoint_xp::AnimationSettings** AnimationSettings/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_ActionSettings(Powerpoint_xp::ActionSettings** ActionSettings/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Tags(Powerpoint_xp::Tags** Tags/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE Cut(void) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE Copy(void) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE Select(Office_xp::MsoTriState Replace/*[in,def,opt]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE Duplicate(Powerpoint_xp::ShapeRange** Duplicate/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_MediaType(Powerpoint_xp::PpMediaType* MediaType/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_HasTextFrame(Office_xp::MsoTriState* HasTextFrame/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_SoundFormat(Powerpoint_xp::SoundFormat** SoundFormat/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE get_Script(Office_xp::Script** Script/*[out,retval]*/) = 0; // [130]
  virtual HRESULT STDMETHODCALLTYPE get_AlternativeText(BSTR* AlternativeText/*[out,retval]*/) = 0; // [131]
  virtual HRESULT STDMETHODCALLTYPE set_AlternativeText(BSTR AlternativeText/*[in]*/) = 0; // [131]
  virtual HRESULT STDMETHODCALLTYPE get_HasTable(Office_xp::MsoTriState* HasTable/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE get_Table(Powerpoint_xp::Table** Table/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE Export(BSTR PathName/*[in]*/, 
                                           Powerpoint_xp::PpShapeFormat Filter/*[in]*/, 
                                           int ScaleWidth/*[in,def,opt]*/, 
                                           int ScaleHeight/*[in,def,opt]*/, 
                                           Powerpoint_xp::PpExportMode ExportMode/*[in,def,opt]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE get_HasDiagram(Office_xp::MsoTriState* pHasDiagram/*[out,retval]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE get_Diagram(Powerpoint_xp::Diagram** Diagram/*[out,retval]*/) = 0; // [133]
  virtual HRESULT STDMETHODCALLTYPE get_HasDiagramNode(Office_xp::MsoTriState* pHasDiagram/*[out,retval]*/) = 0; // [134]
  virtual HRESULT STDMETHODCALLTYPE get_DiagramNode(Powerpoint_xp::DiagramNode** DiagramNode/*[out,retval]*/) = 0; // [135]
  virtual HRESULT STDMETHODCALLTYPE get_Child(Office_xp::MsoTriState* Child/*[out,retval]*/) = 0; // [136]
  virtual HRESULT STDMETHODCALLTYPE get_ParentGroup(Powerpoint_xp::Shape** Parent/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_CanvasItems(Powerpoint_xp::CanvasShapes** CanvasShapes/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Id(int* pid/*[out,retval]*/) = 0; // [139]
  virtual HRESULT STDMETHODCALLTYPE CanvasCropLeft(float Increment/*[in]*/) = 0; // [140]
  virtual HRESULT STDMETHODCALLTYPE CanvasCropTop(float Increment/*[in]*/) = 0; // [141]
  virtual HRESULT STDMETHODCALLTYPE CanvasCropRight(float Increment/*[in]*/) = 0; // [142]
  virtual HRESULT STDMETHODCALLTYPE CanvasCropBottom(float Increment/*[in]*/) = 0; // [143]
  virtual HRESULT STDMETHODCALLTYPE set_RTF(BSTR Param1/*[in]*/) = 0; // [144]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::ShapeRange* __fastcall Ungroup(void)
  {
    Powerpoint_xp::ShapeRange* Ungroup;
    OLECHECK(this->Ungroup((Powerpoint_xp::ShapeRange**)&Ungroup));
    return Ungroup;
  }

  Powerpoint_xp::Adjustments* __fastcall get_Adjustments(void)
  {
    Powerpoint_xp::Adjustments* Adjustments;
    OLECHECK(this->get_Adjustments((Powerpoint_xp::Adjustments**)&Adjustments));
    return Adjustments;
  }

  Office_xp::MsoAutoShapeType __fastcall get_AutoShapeType(void)
  {
    Office_xp::MsoAutoShapeType AutoShapeType;
    OLECHECK(this->get_AutoShapeType((Office_xp::MsoAutoShapeType*)&AutoShapeType));
    return AutoShapeType;
  }

  Office_xp::MsoBlackWhiteMode __fastcall get_BlackWhiteMode(void)
  {
    Office_xp::MsoBlackWhiteMode BlackWhiteMode;
    OLECHECK(this->get_BlackWhiteMode((Office_xp::MsoBlackWhiteMode*)&BlackWhiteMode));
    return BlackWhiteMode;
  }

  Powerpoint_xp::CalloutFormat* __fastcall get_Callout(void)
  {
    Powerpoint_xp::CalloutFormat* Callout;
    OLECHECK(this->get_Callout((Powerpoint_xp::CalloutFormat**)&Callout));
    return Callout;
  }

  int __fastcall get_ConnectionSiteCount(void)
  {
    int ConnectionSiteCount;
    OLECHECK(this->get_ConnectionSiteCount((int*)&ConnectionSiteCount));
    return ConnectionSiteCount;
  }

  Office_xp::MsoTriState __fastcall get_Connector(void)
  {
    Office_xp::MsoTriState Connector;
    OLECHECK(this->get_Connector((Office_xp::MsoTriState*)&Connector));
    return Connector;
  }

  Powerpoint_xp::ConnectorFormat* __fastcall get_ConnectorFormat(void)
  {
    Powerpoint_xp::ConnectorFormat* ConnectorFormat;
    OLECHECK(this->get_ConnectorFormat((Powerpoint_xp::ConnectorFormat**)&ConnectorFormat));
    return ConnectorFormat;
  }

  Powerpoint_xp::FillFormat* __fastcall get_Fill(void)
  {
    Powerpoint_xp::FillFormat* Fill;
    OLECHECK(this->get_Fill((Powerpoint_xp::FillFormat**)&Fill));
    return Fill;
  }

  Powerpoint_xp::GroupShapes* __fastcall get_GroupItems(void)
  {
    Powerpoint_xp::GroupShapes* GroupItems;
    OLECHECK(this->get_GroupItems((Powerpoint_xp::GroupShapes**)&GroupItems));
    return GroupItems;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  Office_xp::MsoTriState __fastcall get_HorizontalFlip(void)
  {
    Office_xp::MsoTriState HorizontalFlip;
    OLECHECK(this->get_HorizontalFlip((Office_xp::MsoTriState*)&HorizontalFlip));
    return HorizontalFlip;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  Powerpoint_xp::LineFormat* __fastcall get_Line(void)
  {
    Powerpoint_xp::LineFormat* Line;
    OLECHECK(this->get_Line((Powerpoint_xp::LineFormat**)&Line));
    return Line;
  }

  Office_xp::MsoTriState __fastcall get_LockAspectRatio(void)
  {
    Office_xp::MsoTriState LockAspectRatio;
    OLECHECK(this->get_LockAspectRatio((Office_xp::MsoTriState*)&LockAspectRatio));
    return LockAspectRatio;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Powerpoint_xp::ShapeNodes* __fastcall get_Nodes(void)
  {
    Powerpoint_xp::ShapeNodes* Nodes;
    OLECHECK(this->get_Nodes((Powerpoint_xp::ShapeNodes**)&Nodes));
    return Nodes;
  }

  float __fastcall get_Rotation(void)
  {
    float Rotation;
    OLECHECK(this->get_Rotation((float*)&Rotation));
    return Rotation;
  }

  Powerpoint_xp::PictureFormat* __fastcall get_PictureFormat(void)
  {
    Powerpoint_xp::PictureFormat* Picture;
    OLECHECK(this->get_PictureFormat((Powerpoint_xp::PictureFormat**)&Picture));
    return Picture;
  }

  Powerpoint_xp::ShadowFormat* __fastcall get_Shadow(void)
  {
    Powerpoint_xp::ShadowFormat* Shadow;
    OLECHECK(this->get_Shadow((Powerpoint_xp::ShadowFormat**)&Shadow));
    return Shadow;
  }

  Powerpoint_xp::TextEffectFormat* __fastcall get_TextEffect(void)
  {
    Powerpoint_xp::TextEffectFormat* TextEffect;
    OLECHECK(this->get_TextEffect((Powerpoint_xp::TextEffectFormat**)&TextEffect));
    return TextEffect;
  }

  Powerpoint_xp::TextFrame* __fastcall get_TextFrame(void)
  {
    Powerpoint_xp::TextFrame* TextFrame;
    OLECHECK(this->get_TextFrame((Powerpoint_xp::TextFrame**)&TextFrame));
    return TextFrame;
  }

  Powerpoint_xp::ThreeDFormat* __fastcall get_ThreeD(void)
  {
    Powerpoint_xp::ThreeDFormat* ThreeD;
    OLECHECK(this->get_ThreeD((Powerpoint_xp::ThreeDFormat**)&ThreeD));
    return ThreeD;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }

  Office_xp::MsoShapeType __fastcall get_Type(void)
  {
    Office_xp::MsoShapeType Type;
    OLECHECK(this->get_Type((Office_xp::MsoShapeType*)&Type));
    return Type;
  }

  Office_xp::MsoTriState __fastcall get_VerticalFlip(void)
  {
    Office_xp::MsoTriState VerticalFlip;
    OLECHECK(this->get_VerticalFlip((Office_xp::MsoTriState*)&VerticalFlip));
    return VerticalFlip;
  }

  VARIANT __fastcall get_Vertices(void)
  {
    VARIANT Vertices;
    OLECHECK(this->get_Vertices((VARIANT*)&Vertices));
    return Vertices;
  }

  Office_xp::MsoTriState __fastcall get_Visible(void)
  {
    Office_xp::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_xp::MsoTriState*)&Visible));
    return Visible;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  int __fastcall get_ZOrderPosition(void)
  {
    int ZOrderPosition;
    OLECHECK(this->get_ZOrderPosition((int*)&ZOrderPosition));
    return ZOrderPosition;
  }

  Powerpoint_xp::OLEFormat* __fastcall get_OLEFormat(void)
  {
    Powerpoint_xp::OLEFormat* OLEFormat;
    OLECHECK(this->get_OLEFormat((Powerpoint_xp::OLEFormat**)&OLEFormat));
    return OLEFormat;
  }

  Powerpoint_xp::LinkFormat* __fastcall get_LinkFormat(void)
  {
    Powerpoint_xp::LinkFormat* LinkFormat;
    OLECHECK(this->get_LinkFormat((Powerpoint_xp::LinkFormat**)&LinkFormat));
    return LinkFormat;
  }

  Powerpoint_xp::PlaceholderFormat* __fastcall get_PlaceholderFormat(void)
  {
    Powerpoint_xp::PlaceholderFormat* PlaceholderFormat;
    OLECHECK(this->get_PlaceholderFormat((Powerpoint_xp::PlaceholderFormat**)&PlaceholderFormat));
    return PlaceholderFormat;
  }

  Powerpoint_xp::AnimationSettings* __fastcall get_AnimationSettings(void)
  {
    Powerpoint_xp::AnimationSettings* AnimationSettings;
    OLECHECK(this->get_AnimationSettings((Powerpoint_xp::AnimationSettings**)&AnimationSettings));
    return AnimationSettings;
  }

  Powerpoint_xp::ActionSettings* __fastcall get_ActionSettings(void)
  {
    Powerpoint_xp::ActionSettings* ActionSettings;
    OLECHECK(this->get_ActionSettings((Powerpoint_xp::ActionSettings**)&ActionSettings));
    return ActionSettings;
  }

  Powerpoint_xp::Tags* __fastcall get_Tags(void)
  {
    Powerpoint_xp::Tags* Tags;
    OLECHECK(this->get_Tags((Powerpoint_xp::Tags**)&Tags));
    return Tags;
  }

  Powerpoint_xp::ShapeRange* __fastcall Duplicate(void)
  {
    Powerpoint_xp::ShapeRange* Duplicate;
    OLECHECK(this->Duplicate((Powerpoint_xp::ShapeRange**)&Duplicate));
    return Duplicate;
  }

  Powerpoint_xp::PpMediaType __fastcall get_MediaType(void)
  {
    Powerpoint_xp::PpMediaType MediaType;
    OLECHECK(this->get_MediaType((Powerpoint_xp::PpMediaType*)&MediaType));
    return MediaType;
  }

  Office_xp::MsoTriState __fastcall get_HasTextFrame(void)
  {
    Office_xp::MsoTriState HasTextFrame;
    OLECHECK(this->get_HasTextFrame((Office_xp::MsoTriState*)&HasTextFrame));
    return HasTextFrame;
  }

  Powerpoint_xp::SoundFormat* __fastcall get_SoundFormat(void)
  {
    Powerpoint_xp::SoundFormat* SoundFormat;
    OLECHECK(this->get_SoundFormat((Powerpoint_xp::SoundFormat**)&SoundFormat));
    return SoundFormat;
  }

  Office_xp::Script* __fastcall get_Script(void)
  {
    Office_xp::Script* Script;
    OLECHECK(this->get_Script((Office_xp::Script**)&Script));
    return Script;
  }

  BSTR __fastcall get_AlternativeText(void)
  {
    BSTR AlternativeText = 0;
    OLECHECK(this->get_AlternativeText((BSTR*)&AlternativeText));
    return AlternativeText;
  }

  Office_xp::MsoTriState __fastcall get_HasTable(void)
  {
    Office_xp::MsoTriState HasTable;
    OLECHECK(this->get_HasTable((Office_xp::MsoTriState*)&HasTable));
    return HasTable;
  }

  Powerpoint_xp::Table* __fastcall get_Table(void)
  {
    Powerpoint_xp::Table* Table;
    OLECHECK(this->get_Table((Powerpoint_xp::Table**)&Table));
    return Table;
  }

  Office_xp::MsoTriState __fastcall get_HasDiagram(void)
  {
    Office_xp::MsoTriState pHasDiagram;
    OLECHECK(this->get_HasDiagram((Office_xp::MsoTriState*)&pHasDiagram));
    return pHasDiagram;
  }

  Powerpoint_xp::Diagram* __fastcall get_Diagram(void)
  {
    Powerpoint_xp::Diagram* Diagram;
    OLECHECK(this->get_Diagram((Powerpoint_xp::Diagram**)&Diagram));
    return Diagram;
  }

  Office_xp::MsoTriState __fastcall get_HasDiagramNode(void)
  {
    Office_xp::MsoTriState pHasDiagram;
    OLECHECK(this->get_HasDiagramNode((Office_xp::MsoTriState*)&pHasDiagram));
    return pHasDiagram;
  }

  Powerpoint_xp::DiagramNode* __fastcall get_DiagramNode(void)
  {
    Powerpoint_xp::DiagramNode* DiagramNode;
    OLECHECK(this->get_DiagramNode((Powerpoint_xp::DiagramNode**)&DiagramNode));
    return DiagramNode;
  }

  Office_xp::MsoTriState __fastcall get_Child(void)
  {
    Office_xp::MsoTriState Child;
    OLECHECK(this->get_Child((Office_xp::MsoTriState*)&Child));
    return Child;
  }

  Powerpoint_xp::Shape* __fastcall get_ParentGroup(void)
  {
    Powerpoint_xp::Shape* Parent;
    OLECHECK(this->get_ParentGroup((Powerpoint_xp::Shape**)&Parent));
    return Parent;
  }

  Powerpoint_xp::CanvasShapes* __fastcall get_CanvasItems(void)
  {
    Powerpoint_xp::CanvasShapes* CanvasShapes;
    OLECHECK(this->get_CanvasItems((Powerpoint_xp::CanvasShapes**)&CanvasShapes));
    return CanvasShapes;
  }

  int __fastcall get_Id(void)
  {
    int pid;
    OLECHECK(this->get_Id((int*)&pid));
    return pid;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Adjustments* Adjustments = {read = get_Adjustments};
  __property   Office_xp::MsoAutoShapeType AutoShapeType = {read = get_AutoShapeType, write = set_AutoShapeType};
  __property   Office_xp::MsoBlackWhiteMode BlackWhiteMode = {read = get_BlackWhiteMode, write = set_BlackWhiteMode};
  __property   Powerpoint_xp::CalloutFormat* Callout = {read = get_Callout};
  __property   int             ConnectionSiteCount = {read = get_ConnectionSiteCount};
  __property   Office_xp::MsoTriState Connector = {read = get_Connector};
  __property   Powerpoint_xp::ConnectorFormat* ConnectorFormat = {read = get_ConnectorFormat};
  __property   Powerpoint_xp::FillFormat* Fill = {read = get_Fill};
  __property   Powerpoint_xp::GroupShapes* GroupItems = {read = get_GroupItems};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Office_xp::MsoTriState HorizontalFlip = {read = get_HorizontalFlip};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   Powerpoint_xp::LineFormat* Line = {read = get_Line};
  __property   Office_xp::MsoTriState LockAspectRatio = {read = get_LockAspectRatio, write = set_LockAspectRatio};
  __property   BSTR            Name = {read = get_Name};
  __property   Powerpoint_xp::ShapeNodes* Nodes = {read = get_Nodes};
  __property   float           Rotation = {read = get_Rotation, write = set_Rotation};
  __property   Powerpoint_xp::PictureFormat* PictureFormat = {read = get_PictureFormat};
  __property   Powerpoint_xp::ShadowFormat* Shadow = {read = get_Shadow};
  __property   Powerpoint_xp::TextEffectFormat* TextEffect = {read = get_TextEffect};
  __property   Powerpoint_xp::TextFrame* TextFrame = {read = get_TextFrame};
  __property   Powerpoint_xp::ThreeDFormat* ThreeD = {read = get_ThreeD};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   Office_xp::MsoShapeType Type = {read = get_Type};
  __property   Office_xp::MsoTriState VerticalFlip = {read = get_VerticalFlip};
  __property   Office_xp::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};
  __property   Powerpoint_xp::OLEFormat* OLEFormat = {read = get_OLEFormat};
  __property   Powerpoint_xp::LinkFormat* LinkFormat = {read = get_LinkFormat};
  __property   Powerpoint_xp::PlaceholderFormat* PlaceholderFormat = {read = get_PlaceholderFormat};
  __property   Powerpoint_xp::AnimationSettings* AnimationSettings = {read = get_AnimationSettings};
  __property   Powerpoint_xp::ActionSettings* ActionSettings = {read = get_ActionSettings};
  __property   Powerpoint_xp::Tags* Tags = {read = get_Tags};
  __property   Powerpoint_xp::PpMediaType MediaType = {read = get_MediaType};
  __property   Office_xp::MsoTriState HasTextFrame = {read = get_HasTextFrame};
  __property   Powerpoint_xp::SoundFormat* SoundFormat = {read = get_SoundFormat};
  __property   Office_xp::Script* Script = {read = get_Script};
  __property   BSTR            AlternativeText = {read = get_AlternativeText};
  __property   Office_xp::MsoTriState HasTable = {read = get_HasTable};
  __property   Powerpoint_xp::Table* Table = {read = get_Table};
  __property   Office_xp::MsoTriState HasDiagram = {read = get_HasDiagram};
  __property   Powerpoint_xp::Diagram* Diagram = {read = get_Diagram};
  __property   Office_xp::MsoTriState HasDiagramNode = {read = get_HasDiagramNode};
  __property   Powerpoint_xp::DiagramNode* DiagramNode = {read = get_DiagramNode};
  __property   Office_xp::MsoTriState Child = {read = get_Child};
  __property   Powerpoint_xp::Shape* ParentGroup = {read = get_ParentGroup};
  __property   Powerpoint_xp::CanvasShapes* CanvasItems = {read = get_CanvasItems};
  __property   int             Id = {read = get_Id};
  __property   BSTR            RTF = {write = set_RTF};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ShapeRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ShapeRange  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Apply(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Flip(Office_xp::MsoFlipCmd FlipCmd/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE IncrementLeft(float Increment/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE IncrementRotation(float Increment/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE IncrementTop(float Increment/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE PickUp(void) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE RerouteConnections(void) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE ScaleHeight(float Factor/*[in]*/, 
                                                Office_xp::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                                Office_xp::MsoScaleFrom fScale/*[in,def,opt]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE ScaleWidth(float Factor/*[in]*/, 
                                               Office_xp::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                               Office_xp::MsoScaleFrom fScale/*[in,def,opt]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE SetShapesDefaultProperties(void) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE Ungroup(Powerpoint_xp::ShapeRange** Ungroup/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE ZOrder(Office_xp::MsoZOrderCmd ZOrderCmd/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_Adjustments(Powerpoint_xp::Adjustments** Adjustments/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_AutoShapeType(Office_xp::MsoAutoShapeType* AutoShapeType/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_AutoShapeType(Office_xp::MsoAutoShapeType AutoShapeType/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_BlackWhiteMode(Office_xp::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_BlackWhiteMode(Office_xp::MsoBlackWhiteMode BlackWhiteMode/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_Callout(Powerpoint_xp::CalloutFormat** Callout/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_Connector(Office_xp::MsoTriState* Connector/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectorFormat(Powerpoint_xp::ConnectorFormat** ConnectorFormat/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_Fill(Powerpoint_xp::FillFormat** Fill/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_GroupItems(Powerpoint_xp::GroupShapes** GroupItems/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_HorizontalFlip(Office_xp::MsoTriState* HorizontalFlip/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Left(float Left/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_Line(Powerpoint_xp::LineFormat** Line/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_LockAspectRatio(Office_xp::MsoTriState* LockAspectRatio/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_LockAspectRatio(Office_xp::MsoTriState LockAspectRatio/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE get_Nodes(Powerpoint_xp::ShapeNodes** Nodes/*[out,retval]*/) = 0; // [116]
  virtual HRESULT STDMETHODCALLTYPE get_Rotation(float* Rotation/*[out,retval]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE set_Rotation(float Rotation/*[in]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE get_PictureFormat(Powerpoint_xp::PictureFormat** Picture/*[out,retval]*/) = 0; // [118]
  virtual HRESULT STDMETHODCALLTYPE get_Shadow(Powerpoint_xp::ShadowFormat** Shadow/*[out,retval]*/) = 0; // [119]
  virtual HRESULT STDMETHODCALLTYPE get_TextEffect(Powerpoint_xp::TextEffectFormat** TextEffect/*[out,retval]*/) = 0; // [120]
  virtual HRESULT STDMETHODCALLTYPE get_TextFrame(Powerpoint_xp::TextFrame** TextFrame/*[out,retval]*/) = 0; // [121]
  virtual HRESULT STDMETHODCALLTYPE get_ThreeD(Powerpoint_xp::ThreeDFormat** ThreeD/*[out,retval]*/) = 0; // [122]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_Top(float Top/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_xp::MsoShapeType* Type/*[out,retval]*/) = 0; // [124]
  virtual HRESULT STDMETHODCALLTYPE get_VerticalFlip(Office_xp::MsoTriState* VerticalFlip/*[out,retval]*/) = 0; // [125]
  virtual HRESULT STDMETHODCALLTYPE get_Vertices(VARIANT* Vertices/*[out,retval]*/) = 0; // [126]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_xp::MsoTriState Visible/*[in]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/) = 0; // [129]
  virtual HRESULT STDMETHODCALLTYPE get_OLEFormat(Powerpoint_xp::OLEFormat** OLEFormat/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_LinkFormat(Powerpoint_xp::LinkFormat** LinkFormat/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_PlaceholderFormat(Powerpoint_xp::PlaceholderFormat** PlaceholderFormat/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_AnimationSettings(Powerpoint_xp::AnimationSettings** AnimationSettings/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_ActionSettings(Powerpoint_xp::ActionSettings** ActionSettings/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Tags(Powerpoint_xp::Tags** Tags/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE Cut(void) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE Copy(void) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE Select(Office_xp::MsoTriState Replace/*[in,def,opt]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE Duplicate(Powerpoint_xp::ShapeRange** Duplicate/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_MediaType(Powerpoint_xp::PpMediaType* MediaType/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_HasTextFrame(Office_xp::MsoTriState* HasTextFrame/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_SoundFormat(Powerpoint_xp::SoundFormat** SoundFormat/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT Index/*[in]*/, 
                                         Powerpoint_xp::Shape** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE Group(Powerpoint_xp::Shape** Group/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE Regroup(Powerpoint_xp::Shape** Regroup/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE Align(Office_xp::MsoAlignCmd AlignCmd/*[in]*/, 
                                          Office_xp::MsoTriState RelativeTo/*[in]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Distribute(Office_xp::MsoDistributeCmd DistributeCmd/*[in]*/, 
                                               Office_xp::MsoTriState RelativeTo/*[in]*/) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE GetPolygonalRepresentation(unsigned_long maxPointsInBuffer/*[in]*/, 
                                                               float* pPoints/*[in]*/, 
                                                               unsigned_long* numPointsInPolygon/*[out]*/, 
                                                               Office_xp::MsoTriState* IsOpen/*[out]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE get_Script(Office_xp::Script** Script/*[out,retval]*/) = 0; // [130]
  virtual HRESULT STDMETHODCALLTYPE get_AlternativeText(BSTR* AlternativeText/*[out,retval]*/) = 0; // [131]
  virtual HRESULT STDMETHODCALLTYPE set_AlternativeText(BSTR AlternativeText/*[in]*/) = 0; // [131]
  virtual HRESULT STDMETHODCALLTYPE get_HasTable(Office_xp::MsoTriState* HasTable/*[out,retval]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE get_Table(Powerpoint_xp::Table** Table/*[out,retval]*/) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE Export(BSTR PathName/*[in]*/, 
                                           Powerpoint_xp::PpShapeFormat Filter/*[in]*/, 
                                           int ScaleWidth/*[in,def,opt]*/, 
                                           int ScaleHeight/*[in,def,opt]*/, 
                                           Powerpoint_xp::PpExportMode ExportMode/*[in,def,opt]*/) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE get_HasDiagram(Office_xp::MsoTriState* pHasDiagram/*[out,retval]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE get_Diagram(Powerpoint_xp::Diagram** Diagram/*[out,retval]*/) = 0; // [133]
  virtual HRESULT STDMETHODCALLTYPE get_HasDiagramNode(Office_xp::MsoTriState* pHasDiagram/*[out,retval]*/) = 0; // [134]
  virtual HRESULT STDMETHODCALLTYPE get_DiagramNode(Powerpoint_xp::DiagramNode** DiagramNode/*[out,retval]*/) = 0; // [135]
  virtual HRESULT STDMETHODCALLTYPE get_Child(Office_xp::MsoTriState* Child/*[out,retval]*/) = 0; // [136]
  virtual HRESULT STDMETHODCALLTYPE get_ParentGroup(Powerpoint_xp::Shape** Parent/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_CanvasItems(Powerpoint_xp::CanvasShapes** CanvasShapes/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Id(int* pid/*[out,retval]*/) = 0; // [139]
  virtual HRESULT STDMETHODCALLTYPE CanvasCropLeft(float Increment/*[in]*/) = 0; // [140]
  virtual HRESULT STDMETHODCALLTYPE CanvasCropTop(float Increment/*[in]*/) = 0; // [141]
  virtual HRESULT STDMETHODCALLTYPE CanvasCropRight(float Increment/*[in]*/) = 0; // [142]
  virtual HRESULT STDMETHODCALLTYPE CanvasCropBottom(float Increment/*[in]*/) = 0; // [143]
  virtual HRESULT STDMETHODCALLTYPE set_RTF(BSTR Param1/*[in]*/) = 0; // [144]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::ShapeRange* __fastcall Ungroup(void)
  {
    Powerpoint_xp::ShapeRange* Ungroup;
    OLECHECK(this->Ungroup((Powerpoint_xp::ShapeRange**)&Ungroup));
    return Ungroup;
  }

  Powerpoint_xp::Adjustments* __fastcall get_Adjustments(void)
  {
    Powerpoint_xp::Adjustments* Adjustments;
    OLECHECK(this->get_Adjustments((Powerpoint_xp::Adjustments**)&Adjustments));
    return Adjustments;
  }

  Office_xp::MsoAutoShapeType __fastcall get_AutoShapeType(void)
  {
    Office_xp::MsoAutoShapeType AutoShapeType;
    OLECHECK(this->get_AutoShapeType((Office_xp::MsoAutoShapeType*)&AutoShapeType));
    return AutoShapeType;
  }

  Office_xp::MsoBlackWhiteMode __fastcall get_BlackWhiteMode(void)
  {
    Office_xp::MsoBlackWhiteMode BlackWhiteMode;
    OLECHECK(this->get_BlackWhiteMode((Office_xp::MsoBlackWhiteMode*)&BlackWhiteMode));
    return BlackWhiteMode;
  }

  Powerpoint_xp::CalloutFormat* __fastcall get_Callout(void)
  {
    Powerpoint_xp::CalloutFormat* Callout;
    OLECHECK(this->get_Callout((Powerpoint_xp::CalloutFormat**)&Callout));
    return Callout;
  }

  int __fastcall get_ConnectionSiteCount(void)
  {
    int ConnectionSiteCount;
    OLECHECK(this->get_ConnectionSiteCount((int*)&ConnectionSiteCount));
    return ConnectionSiteCount;
  }

  Office_xp::MsoTriState __fastcall get_Connector(void)
  {
    Office_xp::MsoTriState Connector;
    OLECHECK(this->get_Connector((Office_xp::MsoTriState*)&Connector));
    return Connector;
  }

  Powerpoint_xp::ConnectorFormat* __fastcall get_ConnectorFormat(void)
  {
    Powerpoint_xp::ConnectorFormat* ConnectorFormat;
    OLECHECK(this->get_ConnectorFormat((Powerpoint_xp::ConnectorFormat**)&ConnectorFormat));
    return ConnectorFormat;
  }

  Powerpoint_xp::FillFormat* __fastcall get_Fill(void)
  {
    Powerpoint_xp::FillFormat* Fill;
    OLECHECK(this->get_Fill((Powerpoint_xp::FillFormat**)&Fill));
    return Fill;
  }

  Powerpoint_xp::GroupShapes* __fastcall get_GroupItems(void)
  {
    Powerpoint_xp::GroupShapes* GroupItems;
    OLECHECK(this->get_GroupItems((Powerpoint_xp::GroupShapes**)&GroupItems));
    return GroupItems;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  Office_xp::MsoTriState __fastcall get_HorizontalFlip(void)
  {
    Office_xp::MsoTriState HorizontalFlip;
    OLECHECK(this->get_HorizontalFlip((Office_xp::MsoTriState*)&HorizontalFlip));
    return HorizontalFlip;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  Powerpoint_xp::LineFormat* __fastcall get_Line(void)
  {
    Powerpoint_xp::LineFormat* Line;
    OLECHECK(this->get_Line((Powerpoint_xp::LineFormat**)&Line));
    return Line;
  }

  Office_xp::MsoTriState __fastcall get_LockAspectRatio(void)
  {
    Office_xp::MsoTriState LockAspectRatio;
    OLECHECK(this->get_LockAspectRatio((Office_xp::MsoTriState*)&LockAspectRatio));
    return LockAspectRatio;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Powerpoint_xp::ShapeNodes* __fastcall get_Nodes(void)
  {
    Powerpoint_xp::ShapeNodes* Nodes;
    OLECHECK(this->get_Nodes((Powerpoint_xp::ShapeNodes**)&Nodes));
    return Nodes;
  }

  float __fastcall get_Rotation(void)
  {
    float Rotation;
    OLECHECK(this->get_Rotation((float*)&Rotation));
    return Rotation;
  }

  Powerpoint_xp::PictureFormat* __fastcall get_PictureFormat(void)
  {
    Powerpoint_xp::PictureFormat* Picture;
    OLECHECK(this->get_PictureFormat((Powerpoint_xp::PictureFormat**)&Picture));
    return Picture;
  }

  Powerpoint_xp::ShadowFormat* __fastcall get_Shadow(void)
  {
    Powerpoint_xp::ShadowFormat* Shadow;
    OLECHECK(this->get_Shadow((Powerpoint_xp::ShadowFormat**)&Shadow));
    return Shadow;
  }

  Powerpoint_xp::TextEffectFormat* __fastcall get_TextEffect(void)
  {
    Powerpoint_xp::TextEffectFormat* TextEffect;
    OLECHECK(this->get_TextEffect((Powerpoint_xp::TextEffectFormat**)&TextEffect));
    return TextEffect;
  }

  Powerpoint_xp::TextFrame* __fastcall get_TextFrame(void)
  {
    Powerpoint_xp::TextFrame* TextFrame;
    OLECHECK(this->get_TextFrame((Powerpoint_xp::TextFrame**)&TextFrame));
    return TextFrame;
  }

  Powerpoint_xp::ThreeDFormat* __fastcall get_ThreeD(void)
  {
    Powerpoint_xp::ThreeDFormat* ThreeD;
    OLECHECK(this->get_ThreeD((Powerpoint_xp::ThreeDFormat**)&ThreeD));
    return ThreeD;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }

  Office_xp::MsoShapeType __fastcall get_Type(void)
  {
    Office_xp::MsoShapeType Type;
    OLECHECK(this->get_Type((Office_xp::MsoShapeType*)&Type));
    return Type;
  }

  Office_xp::MsoTriState __fastcall get_VerticalFlip(void)
  {
    Office_xp::MsoTriState VerticalFlip;
    OLECHECK(this->get_VerticalFlip((Office_xp::MsoTriState*)&VerticalFlip));
    return VerticalFlip;
  }

  VARIANT __fastcall get_Vertices(void)
  {
    VARIANT Vertices;
    OLECHECK(this->get_Vertices((VARIANT*)&Vertices));
    return Vertices;
  }

  Office_xp::MsoTriState __fastcall get_Visible(void)
  {
    Office_xp::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_xp::MsoTriState*)&Visible));
    return Visible;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  int __fastcall get_ZOrderPosition(void)
  {
    int ZOrderPosition;
    OLECHECK(this->get_ZOrderPosition((int*)&ZOrderPosition));
    return ZOrderPosition;
  }

  Powerpoint_xp::OLEFormat* __fastcall get_OLEFormat(void)
  {
    Powerpoint_xp::OLEFormat* OLEFormat;
    OLECHECK(this->get_OLEFormat((Powerpoint_xp::OLEFormat**)&OLEFormat));
    return OLEFormat;
  }

  Powerpoint_xp::LinkFormat* __fastcall get_LinkFormat(void)
  {
    Powerpoint_xp::LinkFormat* LinkFormat;
    OLECHECK(this->get_LinkFormat((Powerpoint_xp::LinkFormat**)&LinkFormat));
    return LinkFormat;
  }

  Powerpoint_xp::PlaceholderFormat* __fastcall get_PlaceholderFormat(void)
  {
    Powerpoint_xp::PlaceholderFormat* PlaceholderFormat;
    OLECHECK(this->get_PlaceholderFormat((Powerpoint_xp::PlaceholderFormat**)&PlaceholderFormat));
    return PlaceholderFormat;
  }

  Powerpoint_xp::AnimationSettings* __fastcall get_AnimationSettings(void)
  {
    Powerpoint_xp::AnimationSettings* AnimationSettings;
    OLECHECK(this->get_AnimationSettings((Powerpoint_xp::AnimationSettings**)&AnimationSettings));
    return AnimationSettings;
  }

  Powerpoint_xp::ActionSettings* __fastcall get_ActionSettings(void)
  {
    Powerpoint_xp::ActionSettings* ActionSettings;
    OLECHECK(this->get_ActionSettings((Powerpoint_xp::ActionSettings**)&ActionSettings));
    return ActionSettings;
  }

  Powerpoint_xp::Tags* __fastcall get_Tags(void)
  {
    Powerpoint_xp::Tags* Tags;
    OLECHECK(this->get_Tags((Powerpoint_xp::Tags**)&Tags));
    return Tags;
  }

  Powerpoint_xp::ShapeRange* __fastcall Duplicate(void)
  {
    Powerpoint_xp::ShapeRange* Duplicate;
    OLECHECK(this->Duplicate((Powerpoint_xp::ShapeRange**)&Duplicate));
    return Duplicate;
  }

  Powerpoint_xp::PpMediaType __fastcall get_MediaType(void)
  {
    Powerpoint_xp::PpMediaType MediaType;
    OLECHECK(this->get_MediaType((Powerpoint_xp::PpMediaType*)&MediaType));
    return MediaType;
  }

  Office_xp::MsoTriState __fastcall get_HasTextFrame(void)
  {
    Office_xp::MsoTriState HasTextFrame;
    OLECHECK(this->get_HasTextFrame((Office_xp::MsoTriState*)&HasTextFrame));
    return HasTextFrame;
  }

  Powerpoint_xp::SoundFormat* __fastcall get_SoundFormat(void)
  {
    Powerpoint_xp::SoundFormat* SoundFormat;
    OLECHECK(this->get_SoundFormat((Powerpoint_xp::SoundFormat**)&SoundFormat));
    return SoundFormat;
  }

  Powerpoint_xp::Shape* __fastcall Item(VARIANT Index/*[in]*/)
  {
    Powerpoint_xp::Shape* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::Shape**)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }

  VARIANT __fastcall _Index(int Index/*[in]*/)
  {
    VARIANT _Index;
    OLECHECK(this->_Index(Index, (VARIANT*)&_Index));
    return _Index;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Powerpoint_xp::Shape* __fastcall Group(void)
  {
    Powerpoint_xp::Shape* Group;
    OLECHECK(this->Group((Powerpoint_xp::Shape**)&Group));
    return Group;
  }

  Powerpoint_xp::Shape* __fastcall Regroup(void)
  {
    Powerpoint_xp::Shape* Regroup;
    OLECHECK(this->Regroup((Powerpoint_xp::Shape**)&Regroup));
    return Regroup;
  }

  Office_xp::Script* __fastcall get_Script(void)
  {
    Office_xp::Script* Script;
    OLECHECK(this->get_Script((Office_xp::Script**)&Script));
    return Script;
  }

  BSTR __fastcall get_AlternativeText(void)
  {
    BSTR AlternativeText = 0;
    OLECHECK(this->get_AlternativeText((BSTR*)&AlternativeText));
    return AlternativeText;
  }

  Office_xp::MsoTriState __fastcall get_HasTable(void)
  {
    Office_xp::MsoTriState HasTable;
    OLECHECK(this->get_HasTable((Office_xp::MsoTriState*)&HasTable));
    return HasTable;
  }

  Powerpoint_xp::Table* __fastcall get_Table(void)
  {
    Powerpoint_xp::Table* Table;
    OLECHECK(this->get_Table((Powerpoint_xp::Table**)&Table));
    return Table;
  }

  Office_xp::MsoTriState __fastcall get_HasDiagram(void)
  {
    Office_xp::MsoTriState pHasDiagram;
    OLECHECK(this->get_HasDiagram((Office_xp::MsoTriState*)&pHasDiagram));
    return pHasDiagram;
  }

  Powerpoint_xp::Diagram* __fastcall get_Diagram(void)
  {
    Powerpoint_xp::Diagram* Diagram;
    OLECHECK(this->get_Diagram((Powerpoint_xp::Diagram**)&Diagram));
    return Diagram;
  }

  Office_xp::MsoTriState __fastcall get_HasDiagramNode(void)
  {
    Office_xp::MsoTriState pHasDiagram;
    OLECHECK(this->get_HasDiagramNode((Office_xp::MsoTriState*)&pHasDiagram));
    return pHasDiagram;
  }

  Powerpoint_xp::DiagramNode* __fastcall get_DiagramNode(void)
  {
    Powerpoint_xp::DiagramNode* DiagramNode;
    OLECHECK(this->get_DiagramNode((Powerpoint_xp::DiagramNode**)&DiagramNode));
    return DiagramNode;
  }

  Office_xp::MsoTriState __fastcall get_Child(void)
  {
    Office_xp::MsoTriState Child;
    OLECHECK(this->get_Child((Office_xp::MsoTriState*)&Child));
    return Child;
  }

  Powerpoint_xp::Shape* __fastcall get_ParentGroup(void)
  {
    Powerpoint_xp::Shape* Parent;
    OLECHECK(this->get_ParentGroup((Powerpoint_xp::Shape**)&Parent));
    return Parent;
  }

  Powerpoint_xp::CanvasShapes* __fastcall get_CanvasItems(void)
  {
    Powerpoint_xp::CanvasShapes* CanvasShapes;
    OLECHECK(this->get_CanvasItems((Powerpoint_xp::CanvasShapes**)&CanvasShapes));
    return CanvasShapes;
  }

  int __fastcall get_Id(void)
  {
    int pid;
    OLECHECK(this->get_Id((int*)&pid));
    return pid;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Adjustments* Adjustments = {read = get_Adjustments};
  __property   Office_xp::MsoAutoShapeType AutoShapeType = {read = get_AutoShapeType, write = set_AutoShapeType};
  __property   Office_xp::MsoBlackWhiteMode BlackWhiteMode = {read = get_BlackWhiteMode, write = set_BlackWhiteMode};
  __property   Powerpoint_xp::CalloutFormat* Callout = {read = get_Callout};
  __property   int             ConnectionSiteCount = {read = get_ConnectionSiteCount};
  __property   Office_xp::MsoTriState Connector = {read = get_Connector};
  __property   Powerpoint_xp::ConnectorFormat* ConnectorFormat = {read = get_ConnectorFormat};
  __property   Powerpoint_xp::FillFormat* Fill = {read = get_Fill};
  __property   Powerpoint_xp::GroupShapes* GroupItems = {read = get_GroupItems};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Office_xp::MsoTriState HorizontalFlip = {read = get_HorizontalFlip};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   Powerpoint_xp::LineFormat* Line = {read = get_Line};
  __property   Office_xp::MsoTriState LockAspectRatio = {read = get_LockAspectRatio, write = set_LockAspectRatio};
  __property   BSTR            Name = {read = get_Name};
  __property   Powerpoint_xp::ShapeNodes* Nodes = {read = get_Nodes};
  __property   float           Rotation = {read = get_Rotation, write = set_Rotation};
  __property   Powerpoint_xp::PictureFormat* PictureFormat = {read = get_PictureFormat};
  __property   Powerpoint_xp::ShadowFormat* Shadow = {read = get_Shadow};
  __property   Powerpoint_xp::TextEffectFormat* TextEffect = {read = get_TextEffect};
  __property   Powerpoint_xp::TextFrame* TextFrame = {read = get_TextFrame};
  __property   Powerpoint_xp::ThreeDFormat* ThreeD = {read = get_ThreeD};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   Office_xp::MsoShapeType Type = {read = get_Type};
  __property   Office_xp::MsoTriState VerticalFlip = {read = get_VerticalFlip};
  __property   Office_xp::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};
  __property   Powerpoint_xp::OLEFormat* OLEFormat = {read = get_OLEFormat};
  __property   Powerpoint_xp::LinkFormat* LinkFormat = {read = get_LinkFormat};
  __property   Powerpoint_xp::PlaceholderFormat* PlaceholderFormat = {read = get_PlaceholderFormat};
  __property   Powerpoint_xp::AnimationSettings* AnimationSettings = {read = get_AnimationSettings};
  __property   Powerpoint_xp::ActionSettings* ActionSettings = {read = get_ActionSettings};
  __property   Powerpoint_xp::Tags* Tags = {read = get_Tags};
  __property   Powerpoint_xp::PpMediaType MediaType = {read = get_MediaType};
  __property   Office_xp::MsoTriState HasTextFrame = {read = get_HasTextFrame};
  __property   Powerpoint_xp::SoundFormat* SoundFormat = {read = get_SoundFormat};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
  __property   Office_xp::Script* Script = {read = get_Script};
  __property   BSTR            AlternativeText = {read = get_AlternativeText};
  __property   Office_xp::MsoTriState HasTable = {read = get_HasTable};
  __property   Powerpoint_xp::Table* Table = {read = get_Table};
  __property   Office_xp::MsoTriState HasDiagram = {read = get_HasDiagram};
  __property   Powerpoint_xp::Diagram* Diagram = {read = get_Diagram};
  __property   Office_xp::MsoTriState HasDiagramNode = {read = get_HasDiagramNode};
  __property   Powerpoint_xp::DiagramNode* DiagramNode = {read = get_DiagramNode};
  __property   Office_xp::MsoTriState Child = {read = get_Child};
  __property   Powerpoint_xp::Shape* ParentGroup = {read = get_ParentGroup};
  __property   Powerpoint_xp::CanvasShapes* CanvasItems = {read = get_CanvasItems};
  __property   int             Id = {read = get_Id};
  __property   BSTR            RTF = {write = set_RTF};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: GroupShapes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface GroupShapes  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* pnShapes/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT Index/*[in]*/, 
                                         Powerpoint_xp::Shape** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Range(VARIANT Index/*[in]*/, 
                                          Powerpoint_xp::ShapeRange** Range/*[out,retval]*/) = 0; // [10]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  int __fastcall get_Count(void)
  {
    int pnShapes;
    OLECHECK(this->get_Count((int*)&pnShapes));
    return pnShapes;
  }

  Powerpoint_xp::Shape* __fastcall Item(VARIANT Index/*[in]*/)
  {
    Powerpoint_xp::Shape* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::Shape**)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppienum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppienum));
    return ppienum;
  }

  Powerpoint_xp::ShapeRange* __fastcall Range(VARIANT Index/*[in]*/)
  {
    Powerpoint_xp::ShapeRange* Range;
    OLECHECK(this->Range(Index, (Powerpoint_xp::ShapeRange**)&Range));
    return Range;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Adjustments
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Adjustments  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* Count/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Item(int Index/*[in]*/, float* Val/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Item(int Index/*[in]*/, float Val/*[in]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Count(void)
  {
    int Count;
    OLECHECK(this->get_Count((int*)&Count));
    return Count;
  }

  float __fastcall get_Item(int Index/*[in]*/)
  {
    float Val;
    OLECHECK(this->get_Item(Index, (float*)&Val));
    return Val;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PictureFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PictureFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE IncrementBrightness(float Increment/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE IncrementContrast(float Increment/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_Brightness(float* Brightness/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_Brightness(float Brightness/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_ColorType(Office_xp::MsoPictureColorType* ColorType/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_ColorType(Office_xp::MsoPictureColorType ColorType/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_Contrast(float* Contrast/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_Contrast(float Contrast/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_CropBottom(float* CropBottom/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_CropBottom(float CropBottom/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_CropLeft(float* CropLeft/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_CropLeft(float CropLeft/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_CropRight(float* CropRight/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_CropRight(float CropRight/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_CropTop(float* CropTop/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_CropTop(float CropTop/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_TransparencyColor(Office_xp::MsoRGBType* TransparencyColor/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_TransparencyColor(Office_xp::MsoRGBType TransparencyColor/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_TransparentBackground(Office_xp::MsoTriState* TransparentBackground/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE set_TransparentBackground(Office_xp::MsoTriState TransparentBackground/*[in]*/) = 0; // [108]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  float __fastcall get_Brightness(void)
  {
    float Brightness;
    OLECHECK(this->get_Brightness((float*)&Brightness));
    return Brightness;
  }

  Office_xp::MsoPictureColorType __fastcall get_ColorType(void)
  {
    Office_xp::MsoPictureColorType ColorType;
    OLECHECK(this->get_ColorType((Office_xp::MsoPictureColorType*)&ColorType));
    return ColorType;
  }

  float __fastcall get_Contrast(void)
  {
    float Contrast;
    OLECHECK(this->get_Contrast((float*)&Contrast));
    return Contrast;
  }

  float __fastcall get_CropBottom(void)
  {
    float CropBottom;
    OLECHECK(this->get_CropBottom((float*)&CropBottom));
    return CropBottom;
  }

  float __fastcall get_CropLeft(void)
  {
    float CropLeft;
    OLECHECK(this->get_CropLeft((float*)&CropLeft));
    return CropLeft;
  }

  float __fastcall get_CropRight(void)
  {
    float CropRight;
    OLECHECK(this->get_CropRight((float*)&CropRight));
    return CropRight;
  }

  float __fastcall get_CropTop(void)
  {
    float CropTop;
    OLECHECK(this->get_CropTop((float*)&CropTop));
    return CropTop;
  }

  Office_xp::MsoRGBType __fastcall get_TransparencyColor(void)
  {
    Office_xp::MsoRGBType TransparencyColor;
    OLECHECK(this->get_TransparencyColor((Office_xp::MsoRGBType*)&TransparencyColor));
    return TransparencyColor;
  }

  Office_xp::MsoTriState __fastcall get_TransparentBackground(void)
  {
    Office_xp::MsoTriState TransparentBackground;
    OLECHECK(this->get_TransparentBackground((Office_xp::MsoTriState*)&TransparentBackground));
    return TransparentBackground;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Brightness = {read = get_Brightness, write = set_Brightness};
  __property   Office_xp::MsoPictureColorType ColorType = {read = get_ColorType, write = set_ColorType};
  __property   float           Contrast = {read = get_Contrast, write = set_Contrast};
  __property   float           CropBottom = {read = get_CropBottom, write = set_CropBottom};
  __property   float           CropLeft = {read = get_CropLeft, write = set_CropLeft};
  __property   float           CropRight = {read = get_CropRight, write = set_CropRight};
  __property   float           CropTop = {read = get_CropTop, write = set_CropTop};
  __property   Office_xp::MsoRGBType TransparencyColor = {read = get_TransparencyColor, write = set_TransparencyColor};
  __property   Office_xp::MsoTriState TransparentBackground = {read = get_TransparentBackground, write = set_TransparentBackground};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FillFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface FillFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Background(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE OneColorGradient(Office_xp::MsoGradientStyle Style/*[in]*/, 
                                                     int Variant/*[in]*/, float Degree/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Patterned(Office_xp::MsoPatternType Pattern/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE PresetGradient(Office_xp::MsoGradientStyle Style/*[in]*/, 
                                                   int Variant/*[in]*/, 
                                                   Office_xp::MsoPresetGradientType PresetGradientType/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE PresetTextured(Office_xp::MsoPresetTexture PresetTexture/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE Solid(void) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE TwoColorGradient(Office_xp::MsoGradientStyle Style/*[in]*/, 
                                                     int Variant/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE UserPicture(BSTR PictureFile/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE UserTextured(BSTR TextureFile/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Powerpoint_xp::ColorFormat** BackColor/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Powerpoint_xp::ColorFormat* BackColor/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Powerpoint_xp::ColorFormat** ForeColor/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Powerpoint_xp::ColorFormat* ForeColor/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_GradientColorType(Office_xp::MsoGradientColorType* GradientColorType/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_GradientDegree(float* GradientDegree/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_GradientStyle(Office_xp::MsoGradientStyle* GradientStyle/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_GradientVariant(int* GradientVariant/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_Pattern(Office_xp::MsoPatternType* Pattern/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_PresetGradientType(Office_xp::MsoPresetGradientType* PresetGradientType/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_PresetTexture(Office_xp::MsoPresetTexture* PresetTexture/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_TextureName(BSTR* TextureName/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_TextureType(Office_xp::MsoTextureType* TextureType/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Transparency(float* Transparency/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Transparency(float Transparency/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_xp::MsoFillType* Type/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_xp::MsoTriState Visible/*[in]*/) = 0; // [113]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::ColorFormat* __fastcall get_BackColor(void)
  {
    Powerpoint_xp::ColorFormat* BackColor;
    OLECHECK(this->get_BackColor((Powerpoint_xp::ColorFormat**)&BackColor));
    return BackColor;
  }

  Powerpoint_xp::ColorFormat* __fastcall get_ForeColor(void)
  {
    Powerpoint_xp::ColorFormat* ForeColor;
    OLECHECK(this->get_ForeColor((Powerpoint_xp::ColorFormat**)&ForeColor));
    return ForeColor;
  }

  Office_xp::MsoGradientColorType __fastcall get_GradientColorType(void)
  {
    Office_xp::MsoGradientColorType GradientColorType;
    OLECHECK(this->get_GradientColorType((Office_xp::MsoGradientColorType*)&GradientColorType));
    return GradientColorType;
  }

  float __fastcall get_GradientDegree(void)
  {
    float GradientDegree;
    OLECHECK(this->get_GradientDegree((float*)&GradientDegree));
    return GradientDegree;
  }

  Office_xp::MsoGradientStyle __fastcall get_GradientStyle(void)
  {
    Office_xp::MsoGradientStyle GradientStyle;
    OLECHECK(this->get_GradientStyle((Office_xp::MsoGradientStyle*)&GradientStyle));
    return GradientStyle;
  }

  int __fastcall get_GradientVariant(void)
  {
    int GradientVariant;
    OLECHECK(this->get_GradientVariant((int*)&GradientVariant));
    return GradientVariant;
  }

  Office_xp::MsoPatternType __fastcall get_Pattern(void)
  {
    Office_xp::MsoPatternType Pattern;
    OLECHECK(this->get_Pattern((Office_xp::MsoPatternType*)&Pattern));
    return Pattern;
  }

  Office_xp::MsoPresetGradientType __fastcall get_PresetGradientType(void)
  {
    Office_xp::MsoPresetGradientType PresetGradientType;
    OLECHECK(this->get_PresetGradientType((Office_xp::MsoPresetGradientType*)&PresetGradientType));
    return PresetGradientType;
  }

  Office_xp::MsoPresetTexture __fastcall get_PresetTexture(void)
  {
    Office_xp::MsoPresetTexture PresetTexture;
    OLECHECK(this->get_PresetTexture((Office_xp::MsoPresetTexture*)&PresetTexture));
    return PresetTexture;
  }

  BSTR __fastcall get_TextureName(void)
  {
    BSTR TextureName = 0;
    OLECHECK(this->get_TextureName((BSTR*)&TextureName));
    return TextureName;
  }

  Office_xp::MsoTextureType __fastcall get_TextureType(void)
  {
    Office_xp::MsoTextureType TextureType;
    OLECHECK(this->get_TextureType((Office_xp::MsoTextureType*)&TextureType));
    return TextureType;
  }

  float __fastcall get_Transparency(void)
  {
    float Transparency;
    OLECHECK(this->get_Transparency((float*)&Transparency));
    return Transparency;
  }

  Office_xp::MsoFillType __fastcall get_Type(void)
  {
    Office_xp::MsoFillType Type;
    OLECHECK(this->get_Type((Office_xp::MsoFillType*)&Type));
    return Type;
  }

  Office_xp::MsoTriState __fastcall get_Visible(void)
  {
    Office_xp::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_xp::MsoTriState*)&Visible));
    return Visible;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ColorFormat* BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Powerpoint_xp::ColorFormat* ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_xp::MsoGradientColorType GradientColorType = {read = get_GradientColorType};
  __property   float           GradientDegree = {read = get_GradientDegree};
  __property   Office_xp::MsoGradientStyle GradientStyle = {read = get_GradientStyle};
  __property   int             GradientVariant = {read = get_GradientVariant};
  __property   Office_xp::MsoPatternType Pattern = {read = get_Pattern};
  __property   Office_xp::MsoPresetGradientType PresetGradientType = {read = get_PresetGradientType};
  __property   Office_xp::MsoPresetTexture PresetTexture = {read = get_PresetTexture};
  __property   BSTR            TextureName = {read = get_TextureName};
  __property   Office_xp::MsoTextureType TextureType = {read = get_TextureType};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_xp::MsoFillType Type = {read = get_Type};
  __property   Office_xp::MsoTriState Visible = {read = get_Visible, write = set_Visible};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: LineFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface LineFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Powerpoint_xp::ColorFormat** BackColor/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Powerpoint_xp::ColorFormat* BackColor/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_BeginArrowheadLength(Office_xp::MsoArrowheadLength* BeginArrowheadLength/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_BeginArrowheadLength(Office_xp::MsoArrowheadLength BeginArrowheadLength/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_BeginArrowheadStyle(Office_xp::MsoArrowheadStyle* BeginArrowheadStyle/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_BeginArrowheadStyle(Office_xp::MsoArrowheadStyle BeginArrowheadStyle/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_BeginArrowheadWidth(Office_xp::MsoArrowheadWidth* BeginArrowheadWidth/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_BeginArrowheadWidth(Office_xp::MsoArrowheadWidth BeginArrowheadWidth/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_DashStyle(Office_xp::MsoLineDashStyle* DashStyle/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_DashStyle(Office_xp::MsoLineDashStyle DashStyle/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_EndArrowheadLength(Office_xp::MsoArrowheadLength* EndArrowheadLength/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_EndArrowheadLength(Office_xp::MsoArrowheadLength EndArrowheadLength/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_EndArrowheadStyle(Office_xp::MsoArrowheadStyle* EndArrowheadStyle/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_EndArrowheadStyle(Office_xp::MsoArrowheadStyle EndArrowheadStyle/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_EndArrowheadWidth(Office_xp::MsoArrowheadWidth* EndArrowheadWidth/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_EndArrowheadWidth(Office_xp::MsoArrowheadWidth EndArrowheadWidth/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Powerpoint_xp::ColorFormat** ForeColor/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Powerpoint_xp::ColorFormat* ForeColor/*[in]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_Pattern(Office_xp::MsoPatternType* Pattern/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_Pattern(Office_xp::MsoPatternType Pattern/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_Style(Office_xp::MsoLineStyle* Style/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE set_Style(Office_xp::MsoLineStyle Style/*[in]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Transparency(float* Transparency/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Transparency(float Transparency/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_xp::MsoTriState Visible/*[in]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_Weight(float* Weight/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_Weight(float Weight/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_InsetPen(Office_xp::MsoTriState* InsetPen/*[out,retval]*/) = 0; // [114]
  virtual HRESULT STDMETHODCALLTYPE set_InsetPen(Office_xp::MsoTriState InsetPen/*[in]*/) = 0; // [114]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::ColorFormat* __fastcall get_BackColor(void)
  {
    Powerpoint_xp::ColorFormat* BackColor;
    OLECHECK(this->get_BackColor((Powerpoint_xp::ColorFormat**)&BackColor));
    return BackColor;
  }

  Office_xp::MsoArrowheadLength __fastcall get_BeginArrowheadLength(void)
  {
    Office_xp::MsoArrowheadLength BeginArrowheadLength;
    OLECHECK(this->get_BeginArrowheadLength((Office_xp::MsoArrowheadLength*)&BeginArrowheadLength));
    return BeginArrowheadLength;
  }

  Office_xp::MsoArrowheadStyle __fastcall get_BeginArrowheadStyle(void)
  {
    Office_xp::MsoArrowheadStyle BeginArrowheadStyle;
    OLECHECK(this->get_BeginArrowheadStyle((Office_xp::MsoArrowheadStyle*)&BeginArrowheadStyle));
    return BeginArrowheadStyle;
  }

  Office_xp::MsoArrowheadWidth __fastcall get_BeginArrowheadWidth(void)
  {
    Office_xp::MsoArrowheadWidth BeginArrowheadWidth;
    OLECHECK(this->get_BeginArrowheadWidth((Office_xp::MsoArrowheadWidth*)&BeginArrowheadWidth));
    return BeginArrowheadWidth;
  }

  Office_xp::MsoLineDashStyle __fastcall get_DashStyle(void)
  {
    Office_xp::MsoLineDashStyle DashStyle;
    OLECHECK(this->get_DashStyle((Office_xp::MsoLineDashStyle*)&DashStyle));
    return DashStyle;
  }

  Office_xp::MsoArrowheadLength __fastcall get_EndArrowheadLength(void)
  {
    Office_xp::MsoArrowheadLength EndArrowheadLength;
    OLECHECK(this->get_EndArrowheadLength((Office_xp::MsoArrowheadLength*)&EndArrowheadLength));
    return EndArrowheadLength;
  }

  Office_xp::MsoArrowheadStyle __fastcall get_EndArrowheadStyle(void)
  {
    Office_xp::MsoArrowheadStyle EndArrowheadStyle;
    OLECHECK(this->get_EndArrowheadStyle((Office_xp::MsoArrowheadStyle*)&EndArrowheadStyle));
    return EndArrowheadStyle;
  }

  Office_xp::MsoArrowheadWidth __fastcall get_EndArrowheadWidth(void)
  {
    Office_xp::MsoArrowheadWidth EndArrowheadWidth;
    OLECHECK(this->get_EndArrowheadWidth((Office_xp::MsoArrowheadWidth*)&EndArrowheadWidth));
    return EndArrowheadWidth;
  }

  Powerpoint_xp::ColorFormat* __fastcall get_ForeColor(void)
  {
    Powerpoint_xp::ColorFormat* ForeColor;
    OLECHECK(this->get_ForeColor((Powerpoint_xp::ColorFormat**)&ForeColor));
    return ForeColor;
  }

  Office_xp::MsoPatternType __fastcall get_Pattern(void)
  {
    Office_xp::MsoPatternType Pattern;
    OLECHECK(this->get_Pattern((Office_xp::MsoPatternType*)&Pattern));
    return Pattern;
  }

  Office_xp::MsoLineStyle __fastcall get_Style(void)
  {
    Office_xp::MsoLineStyle Style;
    OLECHECK(this->get_Style((Office_xp::MsoLineStyle*)&Style));
    return Style;
  }

  float __fastcall get_Transparency(void)
  {
    float Transparency;
    OLECHECK(this->get_Transparency((float*)&Transparency));
    return Transparency;
  }

  Office_xp::MsoTriState __fastcall get_Visible(void)
  {
    Office_xp::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_xp::MsoTriState*)&Visible));
    return Visible;
  }

  float __fastcall get_Weight(void)
  {
    float Weight;
    OLECHECK(this->get_Weight((float*)&Weight));
    return Weight;
  }

  Office_xp::MsoTriState __fastcall get_InsetPen(void)
  {
    Office_xp::MsoTriState InsetPen;
    OLECHECK(this->get_InsetPen((Office_xp::MsoTriState*)&InsetPen));
    return InsetPen;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ColorFormat* BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Office_xp::MsoArrowheadLength BeginArrowheadLength = {read = get_BeginArrowheadLength, write = set_BeginArrowheadLength};
  __property   Office_xp::MsoArrowheadStyle BeginArrowheadStyle = {read = get_BeginArrowheadStyle, write = set_BeginArrowheadStyle};
  __property   Office_xp::MsoArrowheadWidth BeginArrowheadWidth = {read = get_BeginArrowheadWidth, write = set_BeginArrowheadWidth};
  __property   Office_xp::MsoLineDashStyle DashStyle = {read = get_DashStyle, write = set_DashStyle};
  __property   Office_xp::MsoArrowheadLength EndArrowheadLength = {read = get_EndArrowheadLength, write = set_EndArrowheadLength};
  __property   Office_xp::MsoArrowheadStyle EndArrowheadStyle = {read = get_EndArrowheadStyle, write = set_EndArrowheadStyle};
  __property   Office_xp::MsoArrowheadWidth EndArrowheadWidth = {read = get_EndArrowheadWidth, write = set_EndArrowheadWidth};
  __property   Powerpoint_xp::ColorFormat* ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_xp::MsoPatternType Pattern = {read = get_Pattern, write = set_Pattern};
  __property   Office_xp::MsoLineStyle Style = {read = get_Style, write = set_Style};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_xp::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Weight = {read = get_Weight, write = set_Weight};
  __property   Office_xp::MsoTriState InsetPen = {read = get_InsetPen, write = set_InsetPen};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ShadowFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493480-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ShadowFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE IncrementOffsetX(float Increment/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE IncrementOffsetY(float Increment/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Powerpoint_xp::ColorFormat** ForeColor/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Powerpoint_xp::ColorFormat* ForeColor/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Obscured(Office_xp::MsoTriState* Obscured/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_Obscured(Office_xp::MsoTriState Obscured/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_OffsetX(float* OffsetX/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_OffsetX(float OffsetX/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_OffsetY(float* OffsetY/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_OffsetY(float OffsetY/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_Transparency(float* Transparency/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_Transparency(float Transparency/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_xp::MsoShadowType* Type/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Office_xp::MsoShadowType Type/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_xp::MsoTriState Visible/*[in]*/) = 0; // [106]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::ColorFormat* __fastcall get_ForeColor(void)
  {
    Powerpoint_xp::ColorFormat* ForeColor;
    OLECHECK(this->get_ForeColor((Powerpoint_xp::ColorFormat**)&ForeColor));
    return ForeColor;
  }

  Office_xp::MsoTriState __fastcall get_Obscured(void)
  {
    Office_xp::MsoTriState Obscured;
    OLECHECK(this->get_Obscured((Office_xp::MsoTriState*)&Obscured));
    return Obscured;
  }

  float __fastcall get_OffsetX(void)
  {
    float OffsetX;
    OLECHECK(this->get_OffsetX((float*)&OffsetX));
    return OffsetX;
  }

  float __fastcall get_OffsetY(void)
  {
    float OffsetY;
    OLECHECK(this->get_OffsetY((float*)&OffsetY));
    return OffsetY;
  }

  float __fastcall get_Transparency(void)
  {
    float Transparency;
    OLECHECK(this->get_Transparency((float*)&Transparency));
    return Transparency;
  }

  Office_xp::MsoShadowType __fastcall get_Type(void)
  {
    Office_xp::MsoShadowType Type;
    OLECHECK(this->get_Type((Office_xp::MsoShadowType*)&Type));
    return Type;
  }

  Office_xp::MsoTriState __fastcall get_Visible(void)
  {
    Office_xp::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_xp::MsoTriState*)&Visible));
    return Visible;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ColorFormat* ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_xp::MsoTriState Obscured = {read = get_Obscured, write = set_Obscured};
  __property   float           OffsetX = {read = get_OffsetX, write = set_OffsetX};
  __property   float           OffsetY = {read = get_OffsetY, write = set_OffsetY};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_xp::MsoShadowType Type = {read = get_Type, write = set_Type};
  __property   Office_xp::MsoTriState Visible = {read = get_Visible, write = set_Visible};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ConnectorFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493481-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ConnectorFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE BeginConnect(Powerpoint_xp::Shape* ConnectedShape/*[in]*/, 
                                                 int ConnectionSite/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE BeginDisconnect(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE EndConnect(Powerpoint_xp::Shape* ConnectedShape/*[in]*/, 
                                               int ConnectionSite/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE EndDisconnect(void) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_BeginConnected(Office_xp::MsoTriState* BeginConnected/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_BeginConnectedShape(Powerpoint_xp::Shape** BeginConnectedShape/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_BeginConnectionSite(int* BeginConnectionSite/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_EndConnected(Office_xp::MsoTriState* EndConnected/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_EndConnectedShape(Powerpoint_xp::Shape** EndConnectedShape/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_EndConnectionSite(int* EndConnectionSite/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_xp::MsoConnectorType* Type/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Office_xp::MsoConnectorType Type/*[in]*/) = 0; // [106]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_xp::MsoTriState __fastcall get_BeginConnected(void)
  {
    Office_xp::MsoTriState BeginConnected;
    OLECHECK(this->get_BeginConnected((Office_xp::MsoTriState*)&BeginConnected));
    return BeginConnected;
  }

  Powerpoint_xp::Shape* __fastcall get_BeginConnectedShape(void)
  {
    Powerpoint_xp::Shape* BeginConnectedShape;
    OLECHECK(this->get_BeginConnectedShape((Powerpoint_xp::Shape**)&BeginConnectedShape));
    return BeginConnectedShape;
  }

  int __fastcall get_BeginConnectionSite(void)
  {
    int BeginConnectionSite;
    OLECHECK(this->get_BeginConnectionSite((int*)&BeginConnectionSite));
    return BeginConnectionSite;
  }

  Office_xp::MsoTriState __fastcall get_EndConnected(void)
  {
    Office_xp::MsoTriState EndConnected;
    OLECHECK(this->get_EndConnected((Office_xp::MsoTriState*)&EndConnected));
    return EndConnected;
  }

  Powerpoint_xp::Shape* __fastcall get_EndConnectedShape(void)
  {
    Powerpoint_xp::Shape* EndConnectedShape;
    OLECHECK(this->get_EndConnectedShape((Powerpoint_xp::Shape**)&EndConnectedShape));
    return EndConnectedShape;
  }

  int __fastcall get_EndConnectionSite(void)
  {
    int EndConnectionSite;
    OLECHECK(this->get_EndConnectionSite((int*)&EndConnectionSite));
    return EndConnectionSite;
  }

  Office_xp::MsoConnectorType __fastcall get_Type(void)
  {
    Office_xp::MsoConnectorType Type;
    OLECHECK(this->get_Type((Office_xp::MsoConnectorType*)&Type));
    return Type;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoTriState BeginConnected = {read = get_BeginConnected};
  __property   Powerpoint_xp::Shape* BeginConnectedShape = {read = get_BeginConnectedShape};
  __property   int             BeginConnectionSite = {read = get_BeginConnectionSite};
  __property   Office_xp::MsoTriState EndConnected = {read = get_EndConnected};
  __property   Powerpoint_xp::Shape* EndConnectedShape = {read = get_EndConnectedShape};
  __property   int             EndConnectionSite = {read = get_EndConnectionSite};
  __property   Office_xp::MsoConnectorType Type = {read = get_Type, write = set_Type};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TextEffectFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493482-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface TextEffectFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE ToggleVerticalText(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Alignment(Office_xp::MsoTextEffectAlignment* Alignment/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_Alignment(Office_xp::MsoTextEffectAlignment Alignment/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(Office_xp::MsoTriState* FontBold/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(Office_xp::MsoTriState FontBold/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(Office_xp::MsoTriState* FontItalic/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(Office_xp::MsoTriState FontItalic/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* FontName/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR FontName/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(float* FontSize/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(float FontSize/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_KernedPairs(Office_xp::MsoTriState* KernedPairs/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_KernedPairs(Office_xp::MsoTriState KernedPairs/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_NormalizedHeight(Office_xp::MsoTriState* NormalizedHeight/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_NormalizedHeight(Office_xp::MsoTriState NormalizedHeight/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_PresetShape(Office_xp::MsoPresetTextEffectShape* PresetShape/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_PresetShape(Office_xp::MsoPresetTextEffectShape PresetShape/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_PresetTextEffect(Office_xp::MsoPresetTextEffect* Preset/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE set_PresetTextEffect(Office_xp::MsoPresetTextEffect Preset/*[in]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_RotatedChars(Office_xp::MsoTriState* RotatedChars/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_RotatedChars(Office_xp::MsoTriState RotatedChars/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* Text/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR Text/*[in]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Tracking(float* Tracking/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Tracking(float Tracking/*[in]*/) = 0; // [111]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_xp::MsoTextEffectAlignment __fastcall get_Alignment(void)
  {
    Office_xp::MsoTextEffectAlignment Alignment;
    OLECHECK(this->get_Alignment((Office_xp::MsoTextEffectAlignment*)&Alignment));
    return Alignment;
  }

  Office_xp::MsoTriState __fastcall get_FontBold(void)
  {
    Office_xp::MsoTriState FontBold;
    OLECHECK(this->get_FontBold((Office_xp::MsoTriState*)&FontBold));
    return FontBold;
  }

  Office_xp::MsoTriState __fastcall get_FontItalic(void)
  {
    Office_xp::MsoTriState FontItalic;
    OLECHECK(this->get_FontItalic((Office_xp::MsoTriState*)&FontItalic));
    return FontItalic;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR FontName = 0;
    OLECHECK(this->get_FontName((BSTR*)&FontName));
    return FontName;
  }

  float __fastcall get_FontSize(void)
  {
    float FontSize;
    OLECHECK(this->get_FontSize((float*)&FontSize));
    return FontSize;
  }

  Office_xp::MsoTriState __fastcall get_KernedPairs(void)
  {
    Office_xp::MsoTriState KernedPairs;
    OLECHECK(this->get_KernedPairs((Office_xp::MsoTriState*)&KernedPairs));
    return KernedPairs;
  }

  Office_xp::MsoTriState __fastcall get_NormalizedHeight(void)
  {
    Office_xp::MsoTriState NormalizedHeight;
    OLECHECK(this->get_NormalizedHeight((Office_xp::MsoTriState*)&NormalizedHeight));
    return NormalizedHeight;
  }

  Office_xp::MsoPresetTextEffectShape __fastcall get_PresetShape(void)
  {
    Office_xp::MsoPresetTextEffectShape PresetShape;
    OLECHECK(this->get_PresetShape((Office_xp::MsoPresetTextEffectShape*)&PresetShape));
    return PresetShape;
  }

  Office_xp::MsoPresetTextEffect __fastcall get_PresetTextEffect(void)
  {
    Office_xp::MsoPresetTextEffect Preset;
    OLECHECK(this->get_PresetTextEffect((Office_xp::MsoPresetTextEffect*)&Preset));
    return Preset;
  }

  Office_xp::MsoTriState __fastcall get_RotatedChars(void)
  {
    Office_xp::MsoTriState RotatedChars;
    OLECHECK(this->get_RotatedChars((Office_xp::MsoTriState*)&RotatedChars));
    return RotatedChars;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR Text = 0;
    OLECHECK(this->get_Text((BSTR*)&Text));
    return Text;
  }

  float __fastcall get_Tracking(void)
  {
    float Tracking;
    OLECHECK(this->get_Tracking((float*)&Tracking));
    return Tracking;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoTextEffectAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   Office_xp::MsoTriState FontBold = {read = get_FontBold, write = set_FontBold};
  __property   Office_xp::MsoTriState FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName};
  __property   float           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   Office_xp::MsoTriState KernedPairs = {read = get_KernedPairs, write = set_KernedPairs};
  __property   Office_xp::MsoTriState NormalizedHeight = {read = get_NormalizedHeight, write = set_NormalizedHeight};
  __property   Office_xp::MsoPresetTextEffectShape PresetShape = {read = get_PresetShape, write = set_PresetShape};
  __property   Office_xp::MsoPresetTextEffect PresetTextEffect = {read = get_PresetTextEffect, write = set_PresetTextEffect};
  __property   Office_xp::MsoTriState RotatedChars = {read = get_RotatedChars, write = set_RotatedChars};
  __property   BSTR            Text = {read = get_Text};
  __property   float           Tracking = {read = get_Tracking, write = set_Tracking};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ThreeDFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493483-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ThreeDFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE IncrementRotationX(float Increment/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE IncrementRotationY(float Increment/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE ResetRotation(void) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE SetThreeDFormat(Office_xp::MsoPresetThreeDFormat PresetThreeDFormat/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE SetExtrusionDirection(Office_xp::MsoPresetExtrusionDirection PresetExtrusionDirection/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_Depth(float* Depth/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_Depth(float Depth/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_ExtrusionColor(Powerpoint_xp::ColorFormat** ExtrusionColor/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_ExtrusionColorType(Office_xp::MsoExtrusionColorType* ExtrusionColorType/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_ExtrusionColorType(Office_xp::MsoExtrusionColorType ExtrusionColorType/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_Perspective(Office_xp::MsoTriState* Perspective/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_Perspective(Office_xp::MsoTriState Perspective/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_PresetExtrusionDirection(Office_xp::MsoPresetExtrusionDirection* PresetExtrusionDirection/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_PresetLightingDirection(Office_xp::MsoPresetLightingDirection* PresetLightingDirection/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_PresetLightingDirection(Office_xp::MsoPresetLightingDirection PresetLightingDirection/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_PresetLightingSoftness(Office_xp::MsoPresetLightingSoftness* PresetLightingSoftness/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_PresetLightingSoftness(Office_xp::MsoPresetLightingSoftness PresetLightingSoftness/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_PresetMaterial(Office_xp::MsoPresetMaterial* PresetMaterial/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_PresetMaterial(Office_xp::MsoPresetMaterial PresetMaterial/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_PresetThreeDFormat(Office_xp::MsoPresetThreeDFormat* PresetThreeDFormat/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_RotationX(float* RotationX/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_RotationX(float RotationX/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_RotationY(float* RotationY/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE set_RotationY(float RotationY/*[in]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_xp::MsoTriState Visible/*[in]*/) = 0; // [111]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  float __fastcall get_Depth(void)
  {
    float Depth;
    OLECHECK(this->get_Depth((float*)&Depth));
    return Depth;
  }

  Powerpoint_xp::ColorFormat* __fastcall get_ExtrusionColor(void)
  {
    Powerpoint_xp::ColorFormat* ExtrusionColor;
    OLECHECK(this->get_ExtrusionColor((Powerpoint_xp::ColorFormat**)&ExtrusionColor));
    return ExtrusionColor;
  }

  Office_xp::MsoExtrusionColorType __fastcall get_ExtrusionColorType(void)
  {
    Office_xp::MsoExtrusionColorType ExtrusionColorType;
    OLECHECK(this->get_ExtrusionColorType((Office_xp::MsoExtrusionColorType*)&ExtrusionColorType));
    return ExtrusionColorType;
  }

  Office_xp::MsoTriState __fastcall get_Perspective(void)
  {
    Office_xp::MsoTriState Perspective;
    OLECHECK(this->get_Perspective((Office_xp::MsoTriState*)&Perspective));
    return Perspective;
  }

  Office_xp::MsoPresetExtrusionDirection __fastcall get_PresetExtrusionDirection(void)
  {
    Office_xp::MsoPresetExtrusionDirection PresetExtrusionDirection;
    OLECHECK(this->get_PresetExtrusionDirection((Office_xp::MsoPresetExtrusionDirection*)&PresetExtrusionDirection));
    return PresetExtrusionDirection;
  }

  Office_xp::MsoPresetLightingDirection __fastcall get_PresetLightingDirection(void)
  {
    Office_xp::MsoPresetLightingDirection PresetLightingDirection;
    OLECHECK(this->get_PresetLightingDirection((Office_xp::MsoPresetLightingDirection*)&PresetLightingDirection));
    return PresetLightingDirection;
  }

  Office_xp::MsoPresetLightingSoftness __fastcall get_PresetLightingSoftness(void)
  {
    Office_xp::MsoPresetLightingSoftness PresetLightingSoftness;
    OLECHECK(this->get_PresetLightingSoftness((Office_xp::MsoPresetLightingSoftness*)&PresetLightingSoftness));
    return PresetLightingSoftness;
  }

  Office_xp::MsoPresetMaterial __fastcall get_PresetMaterial(void)
  {
    Office_xp::MsoPresetMaterial PresetMaterial;
    OLECHECK(this->get_PresetMaterial((Office_xp::MsoPresetMaterial*)&PresetMaterial));
    return PresetMaterial;
  }

  Office_xp::MsoPresetThreeDFormat __fastcall get_PresetThreeDFormat(void)
  {
    Office_xp::MsoPresetThreeDFormat PresetThreeDFormat;
    OLECHECK(this->get_PresetThreeDFormat((Office_xp::MsoPresetThreeDFormat*)&PresetThreeDFormat));
    return PresetThreeDFormat;
  }

  float __fastcall get_RotationX(void)
  {
    float RotationX;
    OLECHECK(this->get_RotationX((float*)&RotationX));
    return RotationX;
  }

  float __fastcall get_RotationY(void)
  {
    float RotationY;
    OLECHECK(this->get_RotationY((float*)&RotationY));
    return RotationY;
  }

  Office_xp::MsoTriState __fastcall get_Visible(void)
  {
    Office_xp::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_xp::MsoTriState*)&Visible));
    return Visible;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Depth = {read = get_Depth, write = set_Depth};
  __property   Powerpoint_xp::ColorFormat* ExtrusionColor = {read = get_ExtrusionColor};
  __property   Office_xp::MsoExtrusionColorType ExtrusionColorType = {read = get_ExtrusionColorType, write = set_ExtrusionColorType};
  __property   Office_xp::MsoTriState Perspective = {read = get_Perspective, write = set_Perspective};
  __property   Office_xp::MsoPresetExtrusionDirection PresetExtrusionDirection = {read = get_PresetExtrusionDirection};
  __property   Office_xp::MsoPresetLightingDirection PresetLightingDirection = {read = get_PresetLightingDirection, write = set_PresetLightingDirection};
  __property   Office_xp::MsoPresetLightingSoftness PresetLightingSoftness = {read = get_PresetLightingSoftness, write = set_PresetLightingSoftness};
  __property   Office_xp::MsoPresetMaterial PresetMaterial = {read = get_PresetMaterial, write = set_PresetMaterial};
  __property   Office_xp::MsoPresetThreeDFormat PresetThreeDFormat = {read = get_PresetThreeDFormat};
  __property   float           RotationX = {read = get_RotationX, write = set_RotationX};
  __property   float           RotationY = {read = get_RotationY, write = set_RotationY};
  __property   Office_xp::MsoTriState Visible = {read = get_Visible, write = set_Visible};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TextFrame
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493484-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface TextFrame  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_MarginBottom(float* MarginBottom/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_MarginBottom(float MarginBottom/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_MarginLeft(float* MarginLeft/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_MarginLeft(float MarginLeft/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_MarginRight(float* MarginRight/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_MarginRight(float MarginRight/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_MarginTop(float* MarginTop/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_MarginTop(float MarginTop/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_Orientation(Office_xp::MsoTextOrientation* Orientation/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_Orientation(Office_xp::MsoTextOrientation Orientation/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_HasText(Office_xp::MsoTriState* HasText/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_TextRange(Powerpoint_xp::TextRange** TextRange/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Ruler(Powerpoint_xp::Ruler** Ruler/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_HorizontalAnchor(Office_xp::MsoHorizontalAnchor* HorizontalAnchor/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_HorizontalAnchor(Office_xp::MsoHorizontalAnchor HorizontalAnchor/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_VerticalAnchor(Office_xp::MsoVerticalAnchor* VerticalAnchor/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_VerticalAnchor(Office_xp::MsoVerticalAnchor VerticalAnchor/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_AutoSize(Powerpoint_xp::PpAutoSize* AutoSize/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_AutoSize(Powerpoint_xp::PpAutoSize AutoSize/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_WordWrap(Office_xp::MsoTriState* WordWrap/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_WordWrap(Office_xp::MsoTriState WordWrap/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE DeleteText(void) = 0; // [2010]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  float __fastcall get_MarginBottom(void)
  {
    float MarginBottom;
    OLECHECK(this->get_MarginBottom((float*)&MarginBottom));
    return MarginBottom;
  }

  float __fastcall get_MarginLeft(void)
  {
    float MarginLeft;
    OLECHECK(this->get_MarginLeft((float*)&MarginLeft));
    return MarginLeft;
  }

  float __fastcall get_MarginRight(void)
  {
    float MarginRight;
    OLECHECK(this->get_MarginRight((float*)&MarginRight));
    return MarginRight;
  }

  float __fastcall get_MarginTop(void)
  {
    float MarginTop;
    OLECHECK(this->get_MarginTop((float*)&MarginTop));
    return MarginTop;
  }

  Office_xp::MsoTextOrientation __fastcall get_Orientation(void)
  {
    Office_xp::MsoTextOrientation Orientation;
    OLECHECK(this->get_Orientation((Office_xp::MsoTextOrientation*)&Orientation));
    return Orientation;
  }

  Office_xp::MsoTriState __fastcall get_HasText(void)
  {
    Office_xp::MsoTriState HasText;
    OLECHECK(this->get_HasText((Office_xp::MsoTriState*)&HasText));
    return HasText;
  }

  Powerpoint_xp::TextRange* __fastcall get_TextRange(void)
  {
    Powerpoint_xp::TextRange* TextRange;
    OLECHECK(this->get_TextRange((Powerpoint_xp::TextRange**)&TextRange));
    return TextRange;
  }

  Powerpoint_xp::Ruler* __fastcall get_Ruler(void)
  {
    Powerpoint_xp::Ruler* Ruler;
    OLECHECK(this->get_Ruler((Powerpoint_xp::Ruler**)&Ruler));
    return Ruler;
  }

  Office_xp::MsoHorizontalAnchor __fastcall get_HorizontalAnchor(void)
  {
    Office_xp::MsoHorizontalAnchor HorizontalAnchor;
    OLECHECK(this->get_HorizontalAnchor((Office_xp::MsoHorizontalAnchor*)&HorizontalAnchor));
    return HorizontalAnchor;
  }

  Office_xp::MsoVerticalAnchor __fastcall get_VerticalAnchor(void)
  {
    Office_xp::MsoVerticalAnchor VerticalAnchor;
    OLECHECK(this->get_VerticalAnchor((Office_xp::MsoVerticalAnchor*)&VerticalAnchor));
    return VerticalAnchor;
  }

  Powerpoint_xp::PpAutoSize __fastcall get_AutoSize(void)
  {
    Powerpoint_xp::PpAutoSize AutoSize;
    OLECHECK(this->get_AutoSize((Powerpoint_xp::PpAutoSize*)&AutoSize));
    return AutoSize;
  }

  Office_xp::MsoTriState __fastcall get_WordWrap(void)
  {
    Office_xp::MsoTriState WordWrap;
    OLECHECK(this->get_WordWrap((Office_xp::MsoTriState*)&WordWrap));
    return WordWrap;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           MarginBottom = {read = get_MarginBottom, write = set_MarginBottom};
  __property   float           MarginLeft = {read = get_MarginLeft, write = set_MarginLeft};
  __property   float           MarginRight = {read = get_MarginRight, write = set_MarginRight};
  __property   float           MarginTop = {read = get_MarginTop, write = set_MarginTop};
  __property   Office_xp::MsoTextOrientation Orientation = {read = get_Orientation, write = set_Orientation};
  __property   Office_xp::MsoTriState HasText = {read = get_HasText};
  __property   Powerpoint_xp::TextRange* TextRange = {read = get_TextRange};
  __property   Powerpoint_xp::Ruler* Ruler = {read = get_Ruler};
  __property   Office_xp::MsoHorizontalAnchor HorizontalAnchor = {read = get_HorizontalAnchor, write = set_HorizontalAnchor};
  __property   Office_xp::MsoVerticalAnchor VerticalAnchor = {read = get_VerticalAnchor, write = set_VerticalAnchor};
  __property   Powerpoint_xp::PpAutoSize AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Office_xp::MsoTriState WordWrap = {read = get_WordWrap, write = set_WordWrap};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: CalloutFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493485-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface CalloutFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE AutomaticLength(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE CustomDrop(float Drop/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE CustomLength(float Length/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE PresetDrop(Office_xp::MsoCalloutDropType DropType/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_Accent(Office_xp::MsoTriState* Accent/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_Accent(Office_xp::MsoTriState Accent/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Angle(Office_xp::MsoCalloutAngleType* Angle/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_Angle(Office_xp::MsoCalloutAngleType Angle/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_AutoAttach(Office_xp::MsoTriState* AutoAttach/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_AutoAttach(Office_xp::MsoTriState AutoAttach/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_AutoLength(Office_xp::MsoTriState* AutoLength/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_Border(Office_xp::MsoTriState* Border/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_Border(Office_xp::MsoTriState Border/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_Drop(float* Drop/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_DropType(Office_xp::MsoCalloutDropType* DropType/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_Gap(float* Gap/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_Gap(float Gap/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_Length(float* Length/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_xp::MsoCalloutType* Type/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Office_xp::MsoCalloutType Type/*[in]*/) = 0; // [109]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_xp::MsoTriState __fastcall get_Accent(void)
  {
    Office_xp::MsoTriState Accent;
    OLECHECK(this->get_Accent((Office_xp::MsoTriState*)&Accent));
    return Accent;
  }

  Office_xp::MsoCalloutAngleType __fastcall get_Angle(void)
  {
    Office_xp::MsoCalloutAngleType Angle;
    OLECHECK(this->get_Angle((Office_xp::MsoCalloutAngleType*)&Angle));
    return Angle;
  }

  Office_xp::MsoTriState __fastcall get_AutoAttach(void)
  {
    Office_xp::MsoTriState AutoAttach;
    OLECHECK(this->get_AutoAttach((Office_xp::MsoTriState*)&AutoAttach));
    return AutoAttach;
  }

  Office_xp::MsoTriState __fastcall get_AutoLength(void)
  {
    Office_xp::MsoTriState AutoLength;
    OLECHECK(this->get_AutoLength((Office_xp::MsoTriState*)&AutoLength));
    return AutoLength;
  }

  Office_xp::MsoTriState __fastcall get_Border(void)
  {
    Office_xp::MsoTriState Border;
    OLECHECK(this->get_Border((Office_xp::MsoTriState*)&Border));
    return Border;
  }

  float __fastcall get_Drop(void)
  {
    float Drop;
    OLECHECK(this->get_Drop((float*)&Drop));
    return Drop;
  }

  Office_xp::MsoCalloutDropType __fastcall get_DropType(void)
  {
    Office_xp::MsoCalloutDropType DropType;
    OLECHECK(this->get_DropType((Office_xp::MsoCalloutDropType*)&DropType));
    return DropType;
  }

  float __fastcall get_Gap(void)
  {
    float Gap;
    OLECHECK(this->get_Gap((float*)&Gap));
    return Gap;
  }

  float __fastcall get_Length(void)
  {
    float Length;
    OLECHECK(this->get_Length((float*)&Length));
    return Length;
  }

  Office_xp::MsoCalloutType __fastcall get_Type(void)
  {
    Office_xp::MsoCalloutType Type;
    OLECHECK(this->get_Type((Office_xp::MsoCalloutType*)&Type));
    return Type;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoTriState Accent = {read = get_Accent, write = set_Accent};
  __property   Office_xp::MsoCalloutAngleType Angle = {read = get_Angle, write = set_Angle};
  __property   Office_xp::MsoTriState AutoAttach = {read = get_AutoAttach, write = set_AutoAttach};
  __property   Office_xp::MsoTriState AutoLength = {read = get_AutoLength};
  __property   Office_xp::MsoTriState Border = {read = get_Border, write = set_Border};
  __property   float           Drop = {read = get_Drop};
  __property   Office_xp::MsoCalloutDropType DropType = {read = get_DropType};
  __property   float           Gap = {read = get_Gap, write = set_Gap};
  __property   float           Length = {read = get_Length};
  __property   Office_xp::MsoCalloutType Type = {read = get_Type, write = set_Type};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ShapeNodes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493486-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ShapeNodes  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* Count/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT Index/*[in]*/, 
                                         Powerpoint_xp::ShapeNode** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Delete(int Index/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Insert(int Index/*[in]*/, 
                                           Office_xp::MsoSegmentType SegmentType/*[in]*/, 
                                           Office_xp::MsoEditingType EditingType/*[in]*/, 
                                           float X1/*[in]*/, float Y1/*[in]*/, 
                                           float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/, 
                                           float X3/*[in,def,opt]*/, float Y3/*[in,def,opt]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE SetEditingType(int Index/*[in]*/, 
                                                   Office_xp::MsoEditingType EditingType/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE SetPosition(int Index/*[in]*/, float X1/*[in]*/, 
                                                float Y1/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE SetSegmentType(int Index/*[in]*/, 
                                                   Office_xp::MsoSegmentType SegmentType/*[in]*/) = 0; // [15]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Count(void)
  {
    int Count;
    OLECHECK(this->get_Count((int*)&Count));
    return Count;
  }

  Powerpoint_xp::ShapeNode* __fastcall Item(VARIANT Index/*[in]*/)
  {
    Powerpoint_xp::ShapeNode* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::ShapeNode**)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ShapeNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493487-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ShapeNode  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_EditingType(Office_xp::MsoEditingType* EditingType/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Points(VARIANT* Points/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_SegmentType(Office_xp::MsoSegmentType* SegmentType/*[out,retval]*/) = 0; // [102]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_xp::MsoEditingType __fastcall get_EditingType(void)
  {
    Office_xp::MsoEditingType EditingType;
    OLECHECK(this->get_EditingType((Office_xp::MsoEditingType*)&EditingType));
    return EditingType;
  }

  VARIANT __fastcall get_Points(void)
  {
    VARIANT Points;
    OLECHECK(this->get_Points((VARIANT*)&Points));
    return Points;
  }

  Office_xp::MsoSegmentType __fastcall get_SegmentType(void)
  {
    Office_xp::MsoSegmentType SegmentType;
    OLECHECK(this->get_SegmentType((Office_xp::MsoSegmentType*)&SegmentType));
    return SegmentType;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoEditingType EditingType = {read = get_EditingType};
  __property   Office_xp::MsoSegmentType SegmentType = {read = get_SegmentType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: OLEFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493488-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface OLEFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectVerbs(Powerpoint_xp::ObjectVerbs** ObjectVerbs/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Object(LPDISPATCH* Object/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_ProgID(BSTR* ProgID/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_FollowColors(Powerpoint_xp::PpFollowColors* FollowColors/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_FollowColors(Powerpoint_xp::PpFollowColors FollowColors/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE DoVerb(int Index/*[in,def,opt]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [2008]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::ObjectVerbs* __fastcall get_ObjectVerbs(void)
  {
    Powerpoint_xp::ObjectVerbs* ObjectVerbs;
    OLECHECK(this->get_ObjectVerbs((Powerpoint_xp::ObjectVerbs**)&ObjectVerbs));
    return ObjectVerbs;
  }

  LPDISPATCH __fastcall get_Object(void)
  {
    LPDISPATCH Object;
    OLECHECK(this->get_Object((LPDISPATCH*)&Object));
    return Object;
  }

  BSTR __fastcall get_ProgID(void)
  {
    BSTR ProgID = 0;
    OLECHECK(this->get_ProgID((BSTR*)&ProgID));
    return ProgID;
  }

  Powerpoint_xp::PpFollowColors __fastcall get_FollowColors(void)
  {
    Powerpoint_xp::PpFollowColors FollowColors;
    OLECHECK(this->get_FollowColors((Powerpoint_xp::PpFollowColors*)&FollowColors));
    return FollowColors;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ObjectVerbs* ObjectVerbs = {read = get_ObjectVerbs};
  __property   LPDISPATCH      Object = {read = get_Object};
  __property   BSTR            ProgID = {read = get_ProgID};
  __property   Powerpoint_xp::PpFollowColors FollowColors = {read = get_FollowColors, write = set_FollowColors};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: LinkFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493489-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface LinkFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_SourceFullName(BSTR* SourceFullName/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_SourceFullName(BSTR SourceFullName/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_AutoUpdate(Powerpoint_xp::PpUpdateOption* AutoUpdate/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_AutoUpdate(Powerpoint_xp::PpUpdateOption AutoUpdate/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE Update(void) = 0; // [2005]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall get_SourceFullName(void)
  {
    BSTR SourceFullName = 0;
    OLECHECK(this->get_SourceFullName((BSTR*)&SourceFullName));
    return SourceFullName;
  }

  Powerpoint_xp::PpUpdateOption __fastcall get_AutoUpdate(void)
  {
    Powerpoint_xp::PpUpdateOption AutoUpdate;
    OLECHECK(this->get_AutoUpdate((Powerpoint_xp::PpUpdateOption*)&AutoUpdate));
    return AutoUpdate;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            SourceFullName = {read = get_SourceFullName};
  __property   Powerpoint_xp::PpUpdateOption AutoUpdate = {read = get_AutoUpdate, write = set_AutoUpdate};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ObjectVerbs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ObjectVerbs  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, BSTR* Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall Item(int Index/*[in]*/)
  {
    BSTR Item = 0;
    OLECHECK(this->Item(Index, (BSTR*)&Item));
    return Item;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: AnimationSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface AnimationSettings  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_DimColor(Powerpoint_xp::ColorFormat** DimColor/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_SoundEffect(Powerpoint_xp::SoundEffect** SoundEffect/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_EntryEffect(Powerpoint_xp::PpEntryEffect* EntryEffect/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_EntryEffect(Powerpoint_xp::PpEntryEffect EntryEffect/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_AfterEffect(Powerpoint_xp::PpAfterEffect* AfterEffect/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_AfterEffect(Powerpoint_xp::PpAfterEffect AfterEffect/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_AnimationOrder(int* AnimationOrder/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_AnimationOrder(int AnimationOrder/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_AdvanceMode(Powerpoint_xp::PpAdvanceMode* AdvanceMode/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_AdvanceMode(Powerpoint_xp::PpAdvanceMode AdvanceMode/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_AdvanceTime(float* AdvanceTime/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_AdvanceTime(float AdvanceTime/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_PlaySettings(Powerpoint_xp::PlaySettings** PlaySettings/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_TextLevelEffect(Powerpoint_xp::PpTextLevelEffect* TextLevelEffect/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE set_TextLevelEffect(Powerpoint_xp::PpTextLevelEffect TextLevelEffect/*[in]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_TextUnitEffect(Powerpoint_xp::PpTextUnitEffect* TextUnitEffect/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE set_TextUnitEffect(Powerpoint_xp::PpTextUnitEffect TextUnitEffect/*[in]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_Animate(Office_xp::MsoTriState* Animate/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE set_Animate(Office_xp::MsoTriState Animate/*[in]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_AnimateBackground(Office_xp::MsoTriState* AnimateBackground/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE set_AnimateBackground(Office_xp::MsoTriState AnimateBackground/*[in]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_AnimateTextInReverse(Office_xp::MsoTriState* AnimateTextInReverse/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE set_AnimateTextInReverse(Office_xp::MsoTriState AnimateTextInReverse/*[in]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE get_ChartUnitEffect(Powerpoint_xp::PpChartUnitEffect* ChartUnitEffect/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE set_ChartUnitEffect(Powerpoint_xp::PpChartUnitEffect ChartUnitEffect/*[in]*/) = 0; // [2016]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::ColorFormat* __fastcall get_DimColor(void)
  {
    Powerpoint_xp::ColorFormat* DimColor;
    OLECHECK(this->get_DimColor((Powerpoint_xp::ColorFormat**)&DimColor));
    return DimColor;
  }

  Powerpoint_xp::SoundEffect* __fastcall get_SoundEffect(void)
  {
    Powerpoint_xp::SoundEffect* SoundEffect;
    OLECHECK(this->get_SoundEffect((Powerpoint_xp::SoundEffect**)&SoundEffect));
    return SoundEffect;
  }

  Powerpoint_xp::PpEntryEffect __fastcall get_EntryEffect(void)
  {
    Powerpoint_xp::PpEntryEffect EntryEffect;
    OLECHECK(this->get_EntryEffect((Powerpoint_xp::PpEntryEffect*)&EntryEffect));
    return EntryEffect;
  }

  Powerpoint_xp::PpAfterEffect __fastcall get_AfterEffect(void)
  {
    Powerpoint_xp::PpAfterEffect AfterEffect;
    OLECHECK(this->get_AfterEffect((Powerpoint_xp::PpAfterEffect*)&AfterEffect));
    return AfterEffect;
  }

  int __fastcall get_AnimationOrder(void)
  {
    int AnimationOrder;
    OLECHECK(this->get_AnimationOrder((int*)&AnimationOrder));
    return AnimationOrder;
  }

  Powerpoint_xp::PpAdvanceMode __fastcall get_AdvanceMode(void)
  {
    Powerpoint_xp::PpAdvanceMode AdvanceMode;
    OLECHECK(this->get_AdvanceMode((Powerpoint_xp::PpAdvanceMode*)&AdvanceMode));
    return AdvanceMode;
  }

  float __fastcall get_AdvanceTime(void)
  {
    float AdvanceTime;
    OLECHECK(this->get_AdvanceTime((float*)&AdvanceTime));
    return AdvanceTime;
  }

  Powerpoint_xp::PlaySettings* __fastcall get_PlaySettings(void)
  {
    Powerpoint_xp::PlaySettings* PlaySettings;
    OLECHECK(this->get_PlaySettings((Powerpoint_xp::PlaySettings**)&PlaySettings));
    return PlaySettings;
  }

  Powerpoint_xp::PpTextLevelEffect __fastcall get_TextLevelEffect(void)
  {
    Powerpoint_xp::PpTextLevelEffect TextLevelEffect;
    OLECHECK(this->get_TextLevelEffect((Powerpoint_xp::PpTextLevelEffect*)&TextLevelEffect));
    return TextLevelEffect;
  }

  Powerpoint_xp::PpTextUnitEffect __fastcall get_TextUnitEffect(void)
  {
    Powerpoint_xp::PpTextUnitEffect TextUnitEffect;
    OLECHECK(this->get_TextUnitEffect((Powerpoint_xp::PpTextUnitEffect*)&TextUnitEffect));
    return TextUnitEffect;
  }

  Office_xp::MsoTriState __fastcall get_Animate(void)
  {
    Office_xp::MsoTriState Animate;
    OLECHECK(this->get_Animate((Office_xp::MsoTriState*)&Animate));
    return Animate;
  }

  Office_xp::MsoTriState __fastcall get_AnimateBackground(void)
  {
    Office_xp::MsoTriState AnimateBackground;
    OLECHECK(this->get_AnimateBackground((Office_xp::MsoTriState*)&AnimateBackground));
    return AnimateBackground;
  }

  Office_xp::MsoTriState __fastcall get_AnimateTextInReverse(void)
  {
    Office_xp::MsoTriState AnimateTextInReverse;
    OLECHECK(this->get_AnimateTextInReverse((Office_xp::MsoTriState*)&AnimateTextInReverse));
    return AnimateTextInReverse;
  }

  Powerpoint_xp::PpChartUnitEffect __fastcall get_ChartUnitEffect(void)
  {
    Powerpoint_xp::PpChartUnitEffect ChartUnitEffect;
    OLECHECK(this->get_ChartUnitEffect((Powerpoint_xp::PpChartUnitEffect*)&ChartUnitEffect));
    return ChartUnitEffect;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ColorFormat* DimColor = {read = get_DimColor};
  __property   Powerpoint_xp::SoundEffect* SoundEffect = {read = get_SoundEffect};
  __property   Powerpoint_xp::PpEntryEffect EntryEffect = {read = get_EntryEffect, write = set_EntryEffect};
  __property   Powerpoint_xp::PpAfterEffect AfterEffect = {read = get_AfterEffect, write = set_AfterEffect};
  __property   int             AnimationOrder = {read = get_AnimationOrder, write = set_AnimationOrder};
  __property   Powerpoint_xp::PpAdvanceMode AdvanceMode = {read = get_AdvanceMode, write = set_AdvanceMode};
  __property   float           AdvanceTime = {read = get_AdvanceTime, write = set_AdvanceTime};
  __property   Powerpoint_xp::PlaySettings* PlaySettings = {read = get_PlaySettings};
  __property   Powerpoint_xp::PpTextLevelEffect TextLevelEffect = {read = get_TextLevelEffect, write = set_TextLevelEffect};
  __property   Powerpoint_xp::PpTextUnitEffect TextUnitEffect = {read = get_TextUnitEffect, write = set_TextUnitEffect};
  __property   Office_xp::MsoTriState Animate = {read = get_Animate, write = set_Animate};
  __property   Office_xp::MsoTriState AnimateBackground = {read = get_AnimateBackground, write = set_AnimateBackground};
  __property   Office_xp::MsoTriState AnimateTextInReverse = {read = get_AnimateTextInReverse, write = set_AnimateTextInReverse};
  __property   Powerpoint_xp::PpChartUnitEffect ChartUnitEffect = {read = get_ChartUnitEffect, write = set_ChartUnitEffect};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ActionSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ActionSettings  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(Powerpoint_xp::PpMouseActivation Index/*[in]*/, 
                                         Powerpoint_xp::ActionSetting** Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::ActionSetting* __fastcall Item(Powerpoint_xp::PpMouseActivation Index/*[in]*/)
  {
    Powerpoint_xp::ActionSetting* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::ActionSetting**)&Item));
    return Item;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ActionSetting
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ActionSetting  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Action(Powerpoint_xp::PpActionType* Action/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Action(Powerpoint_xp::PpActionType Action/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_ActionVerb(BSTR* ActionVerb/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_ActionVerb(BSTR ActionVerb/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_AnimateAction(Office_xp::MsoTriState* AnimateAction/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_AnimateAction(Office_xp::MsoTriState AnimateAction/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Run(BSTR* Run/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_Run(BSTR Run/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_SlideShowName(BSTR SlideShowName/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Hyperlink(Powerpoint_xp::Hyperlink** Hyperlink/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_SoundEffect(Powerpoint_xp::SoundEffect** SoundEffect/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_ShowAndReturn(Office_xp::MsoTriState* ShowAndReturn/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_ShowAndReturn(Office_xp::MsoTriState ShowAndReturn/*[in]*/) = 0; // [2010]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::PpActionType __fastcall get_Action(void)
  {
    Powerpoint_xp::PpActionType Action;
    OLECHECK(this->get_Action((Powerpoint_xp::PpActionType*)&Action));
    return Action;
  }

  BSTR __fastcall get_ActionVerb(void)
  {
    BSTR ActionVerb = 0;
    OLECHECK(this->get_ActionVerb((BSTR*)&ActionVerb));
    return ActionVerb;
  }

  Office_xp::MsoTriState __fastcall get_AnimateAction(void)
  {
    Office_xp::MsoTriState AnimateAction;
    OLECHECK(this->get_AnimateAction((Office_xp::MsoTriState*)&AnimateAction));
    return AnimateAction;
  }

  BSTR __fastcall get_Run(void)
  {
    BSTR Run = 0;
    OLECHECK(this->get_Run((BSTR*)&Run));
    return Run;
  }

  BSTR __fastcall get_SlideShowName(void)
  {
    BSTR SlideShowName = 0;
    OLECHECK(this->get_SlideShowName((BSTR*)&SlideShowName));
    return SlideShowName;
  }

  Powerpoint_xp::Hyperlink* __fastcall get_Hyperlink(void)
  {
    Powerpoint_xp::Hyperlink* Hyperlink;
    OLECHECK(this->get_Hyperlink((Powerpoint_xp::Hyperlink**)&Hyperlink));
    return Hyperlink;
  }

  Powerpoint_xp::SoundEffect* __fastcall get_SoundEffect(void)
  {
    Powerpoint_xp::SoundEffect* SoundEffect;
    OLECHECK(this->get_SoundEffect((Powerpoint_xp::SoundEffect**)&SoundEffect));
    return SoundEffect;
  }

  Office_xp::MsoTriState __fastcall get_ShowAndReturn(void)
  {
    Office_xp::MsoTriState ShowAndReturn;
    OLECHECK(this->get_ShowAndReturn((Office_xp::MsoTriState*)&ShowAndReturn));
    return ShowAndReturn;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::PpActionType Action = {read = get_Action, write = set_Action};
  __property   BSTR            ActionVerb = {read = get_ActionVerb};
  __property   Office_xp::MsoTriState AnimateAction = {read = get_AnimateAction, write = set_AnimateAction};
  __property   BSTR            Run = {read = get_Run};
  __property   BSTR            SlideShowName = {read = get_SlideShowName};
  __property   Powerpoint_xp::Hyperlink* Hyperlink = {read = get_Hyperlink};
  __property   Powerpoint_xp::SoundEffect* SoundEffect = {read = get_SoundEffect};
  __property   Office_xp::MsoTriState ShowAndReturn = {read = get_ShowAndReturn, write = set_ShowAndReturn};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PlaySettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PlaySettings  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_ActionVerb(BSTR* ActionVerb/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_ActionVerb(BSTR ActionVerb/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_HideWhileNotPlaying(Office_xp::MsoTriState* HideWhileNotPlaying/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_HideWhileNotPlaying(Office_xp::MsoTriState HideWhileNotPlaying/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_LoopUntilStopped(Office_xp::MsoTriState* LoopUntilStopped/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_LoopUntilStopped(Office_xp::MsoTriState LoopUntilStopped/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_PlayOnEntry(Office_xp::MsoTriState* PlayOnEntry/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_PlayOnEntry(Office_xp::MsoTriState PlayOnEntry/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_RewindMovie(Office_xp::MsoTriState* RewindMovie/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_RewindMovie(Office_xp::MsoTriState RewindMovie/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_PauseAnimation(Office_xp::MsoTriState* PauseAnimation/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_PauseAnimation(Office_xp::MsoTriState PauseAnimation/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_StopAfterSlides(int* StopAfterSlides/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_StopAfterSlides(int StopAfterSlides/*[in]*/) = 0; // [2009]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall get_ActionVerb(void)
  {
    BSTR ActionVerb = 0;
    OLECHECK(this->get_ActionVerb((BSTR*)&ActionVerb));
    return ActionVerb;
  }

  Office_xp::MsoTriState __fastcall get_HideWhileNotPlaying(void)
  {
    Office_xp::MsoTriState HideWhileNotPlaying;
    OLECHECK(this->get_HideWhileNotPlaying((Office_xp::MsoTriState*)&HideWhileNotPlaying));
    return HideWhileNotPlaying;
  }

  Office_xp::MsoTriState __fastcall get_LoopUntilStopped(void)
  {
    Office_xp::MsoTriState LoopUntilStopped;
    OLECHECK(this->get_LoopUntilStopped((Office_xp::MsoTriState*)&LoopUntilStopped));
    return LoopUntilStopped;
  }

  Office_xp::MsoTriState __fastcall get_PlayOnEntry(void)
  {
    Office_xp::MsoTriState PlayOnEntry;
    OLECHECK(this->get_PlayOnEntry((Office_xp::MsoTriState*)&PlayOnEntry));
    return PlayOnEntry;
  }

  Office_xp::MsoTriState __fastcall get_RewindMovie(void)
  {
    Office_xp::MsoTriState RewindMovie;
    OLECHECK(this->get_RewindMovie((Office_xp::MsoTriState*)&RewindMovie));
    return RewindMovie;
  }

  Office_xp::MsoTriState __fastcall get_PauseAnimation(void)
  {
    Office_xp::MsoTriState PauseAnimation;
    OLECHECK(this->get_PauseAnimation((Office_xp::MsoTriState*)&PauseAnimation));
    return PauseAnimation;
  }

  int __fastcall get_StopAfterSlides(void)
  {
    int StopAfterSlides;
    OLECHECK(this->get_StopAfterSlides((int*)&StopAfterSlides));
    return StopAfterSlides;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            ActionVerb = {read = get_ActionVerb};
  __property   Office_xp::MsoTriState HideWhileNotPlaying = {read = get_HideWhileNotPlaying, write = set_HideWhileNotPlaying};
  __property   Office_xp::MsoTriState LoopUntilStopped = {read = get_LoopUntilStopped, write = set_LoopUntilStopped};
  __property   Office_xp::MsoTriState PlayOnEntry = {read = get_PlayOnEntry, write = set_PlayOnEntry};
  __property   Office_xp::MsoTriState RewindMovie = {read = get_RewindMovie, write = set_RewindMovie};
  __property   Office_xp::MsoTriState PauseAnimation = {read = get_PauseAnimation, write = set_PauseAnimation};
  __property   int             StopAfterSlides = {read = get_StopAfterSlides, write = set_StopAfterSlides};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TextRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface TextRange  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_ActionSettings(Powerpoint_xp::ActionSettings** ActionSettings/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Start(long* Start/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Length(long* Length/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_BoundLeft(float* BoundLeft/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_BoundTop(float* BoundTop/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_BoundWidth(float* BoundWidth/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_BoundHeight(float* BoundHeight/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE Paragraphs(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                                               Powerpoint_xp::TextRange** Paragraphs/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE Sentences(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                                              Powerpoint_xp::TextRange** Sentences/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE Words(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                                          Powerpoint_xp::TextRange** Words/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE Characters(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                                               Powerpoint_xp::TextRange** Characters/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE Lines(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                                          Powerpoint_xp::TextRange** Lines/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE Runs(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                                         Powerpoint_xp::TextRange** Runs/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE TrimText(Powerpoint_xp::TextRange** TrimText/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* Text/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR Text/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE InsertAfter(BSTR NewText/*[in,def,opt]*/, 
                                                Powerpoint_xp::TextRange** After/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE InsertBefore(BSTR NewText/*[in,def,opt]*/, 
                                                 Powerpoint_xp::TextRange** Before/*[out,retval]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE InsertDateTime(Powerpoint_xp::PpDateTimeFormat DateTimeFormat/*[in]*/, 
                                                   Office_xp::MsoTriState InsertAsField/*[in,def,opt]*/, 
                                                   Powerpoint_xp::TextRange** DateTime/*[out,retval]*/) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE InsertSlideNumber(Powerpoint_xp::TextRange** SlideNumber/*[out,retval]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE InsertSymbol(BSTR FontName/*[in]*/, int CharNumber/*[in]*/, 
                                                 Office_xp::MsoTriState Unicode/*[in,def,opt]*/, 
                                                 Powerpoint_xp::TextRange** Symbol/*[out,retval]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE get_Font(Powerpoint_xp::Font** Font/*[out,retval]*/) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_ParagraphFormat(Powerpoint_xp::ParagraphFormat** ParagraphFormat/*[out,retval]*/) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE get_IndentLevel(int* IndentLevel/*[out,retval]*/) = 0; // [2024]
  virtual HRESULT STDMETHODCALLTYPE set_IndentLevel(int IndentLevel/*[in]*/) = 0; // [2024]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [2025]
  virtual HRESULT STDMETHODCALLTYPE Cut(void) = 0; // [2026]
  virtual HRESULT STDMETHODCALLTYPE Copy(void) = 0; // [2027]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2028]
  virtual HRESULT STDMETHODCALLTYPE Paste(Powerpoint_xp::TextRange** Paste/*[out,retval]*/) = 0; // [2029]
  virtual HRESULT STDMETHODCALLTYPE ChangeCase(Powerpoint_xp::PpChangeCase Type/*[in]*/) = 0; // [2030]
  virtual HRESULT STDMETHODCALLTYPE AddPeriods(void) = 0; // [2031]
  virtual HRESULT STDMETHODCALLTYPE RemovePeriods(void) = 0; // [2032]
  virtual HRESULT STDMETHODCALLTYPE Find(BSTR FindWhat/*[in]*/, int After/*[in,def,opt]*/, 
                                         Office_xp::MsoTriState MatchCase/*[in,def,opt]*/, 
                                         Office_xp::MsoTriState WholeWords/*[in,def,opt]*/, 
                                         Powerpoint_xp::TextRange** Find/*[out,retval]*/) = 0; // [2033]
  virtual HRESULT STDMETHODCALLTYPE Replace(BSTR FindWhat/*[in]*/, BSTR ReplaceWhat/*[in]*/, 
                                            int After/*[in,def,opt]*/, 
                                            Office_xp::MsoTriState MatchCase/*[in,def,opt]*/, 
                                            Office_xp::MsoTriState WholeWords/*[in,def,opt]*/, 
                                            Powerpoint_xp::TextRange** Replace/*[out,retval]*/) = 0; // [2034]
  virtual HRESULT STDMETHODCALLTYPE RotatedBounds(float* X1/*[out]*/, float* Y1/*[out]*/, 
                                                  float* X2/*[out]*/, float* Y2/*[out]*/, 
                                                  float* X3/*[out]*/, float* Y3/*[out]*/, 
                                                  float* x4/*[out]*/, float* y4/*[out]*/) = 0; // [2035]
  virtual HRESULT STDMETHODCALLTYPE get_LanguageID(Office_xp::MsoLanguageID* LanguageID/*[out,retval]*/) = 0; // [2036]
  virtual HRESULT STDMETHODCALLTYPE set_LanguageID(Office_xp::MsoLanguageID LanguageID/*[in]*/) = 0; // [2036]
  virtual HRESULT STDMETHODCALLTYPE RtlRun(void) = 0; // [2037]
  virtual HRESULT STDMETHODCALLTYPE LtrRun(void) = 0; // [2038]
  virtual HRESULT STDMETHODCALLTYPE PasteSpecial(Powerpoint_xp::PpPasteDataType DataType/*[in,def,opt]*/, 
                                                 Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                                                 BSTR IconFileName/*[in,def,opt]*/, 
                                                 int IconIndex/*[in,def,opt]*/, 
                                                 BSTR IconLabel/*[in,def,opt]*/, 
                                                 Office_xp::MsoTriState Link/*[in,def,opt]*/, 
                                                 Powerpoint_xp::TextRange** PasteSpecial/*[out,retval]*/) = 0; // [2039]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::ActionSettings* __fastcall get_ActionSettings(void)
  {
    Powerpoint_xp::ActionSettings* ActionSettings;
    OLECHECK(this->get_ActionSettings((Powerpoint_xp::ActionSettings**)&ActionSettings));
    return ActionSettings;
  }

  long __fastcall get_Start(void)
  {
    long Start;
    OLECHECK(this->get_Start((long*)&Start));
    return Start;
  }

  long __fastcall get_Length(void)
  {
    long Length;
    OLECHECK(this->get_Length((long*)&Length));
    return Length;
  }

  float __fastcall get_BoundLeft(void)
  {
    float BoundLeft;
    OLECHECK(this->get_BoundLeft((float*)&BoundLeft));
    return BoundLeft;
  }

  float __fastcall get_BoundTop(void)
  {
    float BoundTop;
    OLECHECK(this->get_BoundTop((float*)&BoundTop));
    return BoundTop;
  }

  float __fastcall get_BoundWidth(void)
  {
    float BoundWidth;
    OLECHECK(this->get_BoundWidth((float*)&BoundWidth));
    return BoundWidth;
  }

  float __fastcall get_BoundHeight(void)
  {
    float BoundHeight;
    OLECHECK(this->get_BoundHeight((float*)&BoundHeight));
    return BoundHeight;
  }

  Powerpoint_xp::TextRange* __fastcall Paragraphs(int Start/*[in,def,opt]*/, 
                                                  int Length/*[in,def,opt]*/)
  {
    Powerpoint_xp::TextRange* Paragraphs;
    OLECHECK(this->Paragraphs(Start, Length, (Powerpoint_xp::TextRange**)&Paragraphs));
    return Paragraphs;
  }

  Powerpoint_xp::TextRange* __fastcall Sentences(int Start/*[in,def,opt]*/, 
                                                 int Length/*[in,def,opt]*/)
  {
    Powerpoint_xp::TextRange* Sentences;
    OLECHECK(this->Sentences(Start, Length, (Powerpoint_xp::TextRange**)&Sentences));
    return Sentences;
  }

  Powerpoint_xp::TextRange* __fastcall Words(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/)
  {
    Powerpoint_xp::TextRange* Words;
    OLECHECK(this->Words(Start, Length, (Powerpoint_xp::TextRange**)&Words));
    return Words;
  }

  Powerpoint_xp::TextRange* __fastcall Characters(int Start/*[in,def,opt]*/, 
                                                  int Length/*[in,def,opt]*/)
  {
    Powerpoint_xp::TextRange* Characters;
    OLECHECK(this->Characters(Start, Length, (Powerpoint_xp::TextRange**)&Characters));
    return Characters;
  }

  Powerpoint_xp::TextRange* __fastcall Lines(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/)
  {
    Powerpoint_xp::TextRange* Lines;
    OLECHECK(this->Lines(Start, Length, (Powerpoint_xp::TextRange**)&Lines));
    return Lines;
  }

  Powerpoint_xp::TextRange* __fastcall Runs(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/)
  {
    Powerpoint_xp::TextRange* Runs;
    OLECHECK(this->Runs(Start, Length, (Powerpoint_xp::TextRange**)&Runs));
    return Runs;
  }

  Powerpoint_xp::TextRange* __fastcall TrimText(void)
  {
    Powerpoint_xp::TextRange* TrimText;
    OLECHECK(this->TrimText((Powerpoint_xp::TextRange**)&TrimText));
    return TrimText;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR Text = 0;
    OLECHECK(this->get_Text((BSTR*)&Text));
    return Text;
  }

  Powerpoint_xp::TextRange* __fastcall InsertAfter(BSTR NewText/*[in,def,opt]*/)
  {
    Powerpoint_xp::TextRange* After;
    OLECHECK(this->InsertAfter(NewText, (Powerpoint_xp::TextRange**)&After));
    return After;
  }

  Powerpoint_xp::TextRange* __fastcall InsertBefore(BSTR NewText/*[in,def,opt]*/)
  {
    Powerpoint_xp::TextRange* Before;
    OLECHECK(this->InsertBefore(NewText, (Powerpoint_xp::TextRange**)&Before));
    return Before;
  }

  Powerpoint_xp::TextRange* __fastcall InsertDateTime(Powerpoint_xp::PpDateTimeFormat DateTimeFormat/*[in]*/, 
                                                      Office_xp::MsoTriState InsertAsField/*[in,def,opt]*/)
  {
    Powerpoint_xp::TextRange* DateTime;
    OLECHECK(this->InsertDateTime(DateTimeFormat, InsertAsField, (Powerpoint_xp::TextRange**)&DateTime));
    return DateTime;
  }

  Powerpoint_xp::TextRange* __fastcall InsertSlideNumber(void)
  {
    Powerpoint_xp::TextRange* SlideNumber;
    OLECHECK(this->InsertSlideNumber((Powerpoint_xp::TextRange**)&SlideNumber));
    return SlideNumber;
  }

  Powerpoint_xp::TextRange* __fastcall InsertSymbol(BSTR FontName/*[in]*/, int CharNumber/*[in]*/, 
                                                    Office_xp::MsoTriState Unicode/*[in,def,opt]*/)
  {
    Powerpoint_xp::TextRange* Symbol;
    OLECHECK(this->InsertSymbol(FontName, CharNumber, Unicode, (Powerpoint_xp::TextRange**)&Symbol));
    return Symbol;
  }

  Powerpoint_xp::Font* __fastcall get_Font(void)
  {
    Powerpoint_xp::Font* Font;
    OLECHECK(this->get_Font((Powerpoint_xp::Font**)&Font));
    return Font;
  }

  Powerpoint_xp::ParagraphFormat* __fastcall get_ParagraphFormat(void)
  {
    Powerpoint_xp::ParagraphFormat* ParagraphFormat;
    OLECHECK(this->get_ParagraphFormat((Powerpoint_xp::ParagraphFormat**)&ParagraphFormat));
    return ParagraphFormat;
  }

  int __fastcall get_IndentLevel(void)
  {
    int IndentLevel;
    OLECHECK(this->get_IndentLevel((int*)&IndentLevel));
    return IndentLevel;
  }

  Powerpoint_xp::TextRange* __fastcall Paste(void)
  {
    Powerpoint_xp::TextRange* Paste;
    OLECHECK(this->Paste((Powerpoint_xp::TextRange**)&Paste));
    return Paste;
  }

  Powerpoint_xp::TextRange* __fastcall Find(BSTR FindWhat/*[in]*/, int After/*[in,def,opt]*/, 
                                            Office_xp::MsoTriState MatchCase/*[in,def,opt]*/, 
                                            Office_xp::MsoTriState WholeWords/*[in,def,opt]*/)
  {
    Powerpoint_xp::TextRange* Find;
    OLECHECK(this->Find(FindWhat, After, MatchCase, WholeWords, (Powerpoint_xp::TextRange**)&Find));
    return Find;
  }

  Powerpoint_xp::TextRange* __fastcall Replace(BSTR FindWhat/*[in]*/, BSTR ReplaceWhat/*[in]*/, 
                                               int After/*[in,def,opt]*/, 
                                               Office_xp::MsoTriState MatchCase/*[in,def,opt]*/, 
                                               Office_xp::MsoTriState WholeWords/*[in,def,opt]*/)
  {
    Powerpoint_xp::TextRange* Replace;
    OLECHECK(this->Replace(FindWhat, ReplaceWhat, After, MatchCase, WholeWords, (Powerpoint_xp::TextRange**)&Replace));
    return Replace;
  }

  Office_xp::MsoLanguageID __fastcall get_LanguageID(void)
  {
    Office_xp::MsoLanguageID LanguageID;
    OLECHECK(this->get_LanguageID((Office_xp::MsoLanguageID*)&LanguageID));
    return LanguageID;
  }

  Powerpoint_xp::TextRange* __fastcall PasteSpecial(Powerpoint_xp::PpPasteDataType DataType/*[in,def,opt]*/, 
                                                    Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                                                    BSTR IconFileName/*[in,def,opt]*/, 
                                                    int IconIndex/*[in,def,opt]*/, 
                                                    BSTR IconLabel/*[in,def,opt]*/, 
                                                    Office_xp::MsoTriState Link/*[in,def,opt]*/)
  {
    Powerpoint_xp::TextRange* PasteSpecial;
    OLECHECK(this->PasteSpecial(DataType, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link, (Powerpoint_xp::TextRange**)&PasteSpecial));
    return PasteSpecial;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ActionSettings* ActionSettings = {read = get_ActionSettings};
  __property   long            Start = {read = get_Start};
  __property   long            Length = {read = get_Length};
  __property   float           BoundLeft = {read = get_BoundLeft};
  __property   float           BoundTop = {read = get_BoundTop};
  __property   float           BoundWidth = {read = get_BoundWidth};
  __property   float           BoundHeight = {read = get_BoundHeight};
  __property   BSTR            Text = {read = get_Text};
  __property   Powerpoint_xp::Font* Font = {read = get_Font};
  __property   Powerpoint_xp::ParagraphFormat* ParagraphFormat = {read = get_ParagraphFormat};
  __property   int             IndentLevel = {read = get_IndentLevel, write = set_IndentLevel};
  __property   Office_xp::MsoLanguageID LanguageID = {read = get_LanguageID, write = set_LanguageID};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Ruler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493490-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Ruler  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_TabStops(Powerpoint_xp::TabStops** TabStops/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Levels(Powerpoint_xp::RulerLevels** Levels/*[out,retval]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::TabStops* __fastcall get_TabStops(void)
  {
    Powerpoint_xp::TabStops* TabStops;
    OLECHECK(this->get_TabStops((Powerpoint_xp::TabStops**)&TabStops));
    return TabStops;
  }

  Powerpoint_xp::RulerLevels* __fastcall get_Levels(void)
  {
    Powerpoint_xp::RulerLevels* Levels;
    OLECHECK(this->get_Levels((Powerpoint_xp::RulerLevels**)&Levels));
    return Levels;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::TabStops* TabStops = {read = get_TabStops};
  __property   Powerpoint_xp::RulerLevels* Levels = {read = get_Levels};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: RulerLevels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493491-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface RulerLevels  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, 
                                         Powerpoint_xp::RulerLevel** Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::RulerLevel* __fastcall Item(int Index/*[in]*/)
  {
    Powerpoint_xp::RulerLevel* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::RulerLevel**)&Item));
    return Item;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: RulerLevel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493492-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface RulerLevel  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_FirstMargin(float* FirstMargin/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_FirstMargin(float FirstMargin/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_LeftMargin(float* LeftMargin/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_LeftMargin(float LeftMargin/*[in]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  float __fastcall get_FirstMargin(void)
  {
    float FirstMargin;
    OLECHECK(this->get_FirstMargin((float*)&FirstMargin));
    return FirstMargin;
  }

  float __fastcall get_LeftMargin(void)
  {
    float LeftMargin;
    OLECHECK(this->get_LeftMargin((float*)&LeftMargin));
    return LeftMargin;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           FirstMargin = {read = get_FirstMargin, write = set_FirstMargin};
  __property   float           LeftMargin = {read = get_LeftMargin, write = set_LeftMargin};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TabStops
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493493-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface TabStops  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, 
                                         Powerpoint_xp::TabStop** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultSpacing(float* DefaultSpacing/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultSpacing(float DefaultSpacing/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Add(Powerpoint_xp::PpTabStopType Type/*[in]*/, 
                                        float Position/*[in]*/, 
                                        Powerpoint_xp::TabStop** Add/*[out,retval]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::TabStop* __fastcall Item(int Index/*[in]*/)
  {
    Powerpoint_xp::TabStop* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::TabStop**)&Item));
    return Item;
  }

  float __fastcall get_DefaultSpacing(void)
  {
    float DefaultSpacing;
    OLECHECK(this->get_DefaultSpacing((float*)&DefaultSpacing));
    return DefaultSpacing;
  }

  Powerpoint_xp::TabStop* __fastcall Add(Powerpoint_xp::PpTabStopType Type/*[in]*/, 
                                         float Position/*[in]*/)
  {
    Powerpoint_xp::TabStop* Add;
    OLECHECK(this->Add(Type, Position, (Powerpoint_xp::TabStop**)&Add));
    return Add;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           DefaultSpacing = {read = get_DefaultSpacing, write = set_DefaultSpacing};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TabStop
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493494-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface TabStop  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Powerpoint_xp::PpTabStopType* Type/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Powerpoint_xp::PpTabStopType Type/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Position(float* Position/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Position(float Position/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0; // [2005]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::PpTabStopType __fastcall get_Type(void)
  {
    Powerpoint_xp::PpTabStopType Type;
    OLECHECK(this->get_Type((Powerpoint_xp::PpTabStopType*)&Type));
    return Type;
  }

  float __fastcall get_Position(void)
  {
    float Position;
    OLECHECK(this->get_Position((float*)&Position));
    return Position;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::PpTabStopType Type = {read = get_Type, write = set_Type};
  __property   float           Position = {read = get_Position, write = set_Position};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Font
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493495-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Font  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Color(Powerpoint_xp::ColorFormat** Color/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Bold(Office_xp::MsoTriState* Bold/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Bold(Office_xp::MsoTriState Bold/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Italic(Office_xp::MsoTriState* Italic/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_Italic(Office_xp::MsoTriState Italic/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Shadow(Office_xp::MsoTriState* Shadow/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_Shadow(Office_xp::MsoTriState Shadow/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Emboss(Office_xp::MsoTriState* Emboss/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_Emboss(Office_xp::MsoTriState Emboss/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Underline(Office_xp::MsoTriState* Underline/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_Underline(Office_xp::MsoTriState Underline/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_Subscript(Office_xp::MsoTriState* Subscript/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_Subscript(Office_xp::MsoTriState Subscript/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_Superscript(Office_xp::MsoTriState* Superscript/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_Superscript(Office_xp::MsoTriState Superscript/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_BaselineOffset(float* BaselineOffset/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE set_BaselineOffset(float BaselineOffset/*[in]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_Embedded(Office_xp::MsoTriState* Embedded/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_Embeddable(Office_xp::MsoTriState* Embeddable/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_Size(float* Size/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE set_Size(float Size/*[in]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE get_NameFarEast(BSTR* NameFarEast/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE set_NameFarEast(BSTR NameFarEast/*[in]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE get_NameAscii(BSTR* NameAscii/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE set_NameAscii(BSTR NameAscii/*[in]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE get_AutoRotateNumbers(Office_xp::MsoTriState* AutoRotateNumbers/*[out,retval]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE set_AutoRotateNumbers(Office_xp::MsoTriState AutoRotateNumbers/*[in]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE get_NameOther(BSTR* NameOther/*[out,retval]*/) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE set_NameOther(BSTR NameOther/*[in]*/) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE get_NameComplexScript(BSTR* NameComplexScript/*[out,retval]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE set_NameComplexScript(BSTR NameComplexScript/*[in]*/) = 0; // [2020]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::ColorFormat* __fastcall get_Color(void)
  {
    Powerpoint_xp::ColorFormat* Color;
    OLECHECK(this->get_Color((Powerpoint_xp::ColorFormat**)&Color));
    return Color;
  }

  Office_xp::MsoTriState __fastcall get_Bold(void)
  {
    Office_xp::MsoTriState Bold;
    OLECHECK(this->get_Bold((Office_xp::MsoTriState*)&Bold));
    return Bold;
  }

  Office_xp::MsoTriState __fastcall get_Italic(void)
  {
    Office_xp::MsoTriState Italic;
    OLECHECK(this->get_Italic((Office_xp::MsoTriState*)&Italic));
    return Italic;
  }

  Office_xp::MsoTriState __fastcall get_Shadow(void)
  {
    Office_xp::MsoTriState Shadow;
    OLECHECK(this->get_Shadow((Office_xp::MsoTriState*)&Shadow));
    return Shadow;
  }

  Office_xp::MsoTriState __fastcall get_Emboss(void)
  {
    Office_xp::MsoTriState Emboss;
    OLECHECK(this->get_Emboss((Office_xp::MsoTriState*)&Emboss));
    return Emboss;
  }

  Office_xp::MsoTriState __fastcall get_Underline(void)
  {
    Office_xp::MsoTriState Underline;
    OLECHECK(this->get_Underline((Office_xp::MsoTriState*)&Underline));
    return Underline;
  }

  Office_xp::MsoTriState __fastcall get_Subscript(void)
  {
    Office_xp::MsoTriState Subscript;
    OLECHECK(this->get_Subscript((Office_xp::MsoTriState*)&Subscript));
    return Subscript;
  }

  Office_xp::MsoTriState __fastcall get_Superscript(void)
  {
    Office_xp::MsoTriState Superscript;
    OLECHECK(this->get_Superscript((Office_xp::MsoTriState*)&Superscript));
    return Superscript;
  }

  float __fastcall get_BaselineOffset(void)
  {
    float BaselineOffset;
    OLECHECK(this->get_BaselineOffset((float*)&BaselineOffset));
    return BaselineOffset;
  }

  Office_xp::MsoTriState __fastcall get_Embedded(void)
  {
    Office_xp::MsoTriState Embedded;
    OLECHECK(this->get_Embedded((Office_xp::MsoTriState*)&Embedded));
    return Embedded;
  }

  Office_xp::MsoTriState __fastcall get_Embeddable(void)
  {
    Office_xp::MsoTriState Embeddable;
    OLECHECK(this->get_Embeddable((Office_xp::MsoTriState*)&Embeddable));
    return Embeddable;
  }

  float __fastcall get_Size(void)
  {
    float Size;
    OLECHECK(this->get_Size((float*)&Size));
    return Size;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_NameFarEast(void)
  {
    BSTR NameFarEast = 0;
    OLECHECK(this->get_NameFarEast((BSTR*)&NameFarEast));
    return NameFarEast;
  }

  BSTR __fastcall get_NameAscii(void)
  {
    BSTR NameAscii = 0;
    OLECHECK(this->get_NameAscii((BSTR*)&NameAscii));
    return NameAscii;
  }

  Office_xp::MsoTriState __fastcall get_AutoRotateNumbers(void)
  {
    Office_xp::MsoTriState AutoRotateNumbers;
    OLECHECK(this->get_AutoRotateNumbers((Office_xp::MsoTriState*)&AutoRotateNumbers));
    return AutoRotateNumbers;
  }

  BSTR __fastcall get_NameOther(void)
  {
    BSTR NameOther = 0;
    OLECHECK(this->get_NameOther((BSTR*)&NameOther));
    return NameOther;
  }

  BSTR __fastcall get_NameComplexScript(void)
  {
    BSTR NameComplexScript = 0;
    OLECHECK(this->get_NameComplexScript((BSTR*)&NameComplexScript));
    return NameComplexScript;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ColorFormat* Color = {read = get_Color};
  __property   Office_xp::MsoTriState Bold = {read = get_Bold, write = set_Bold};
  __property   Office_xp::MsoTriState Italic = {read = get_Italic, write = set_Italic};
  __property   Office_xp::MsoTriState Shadow = {read = get_Shadow, write = set_Shadow};
  __property   Office_xp::MsoTriState Emboss = {read = get_Emboss, write = set_Emboss};
  __property   Office_xp::MsoTriState Underline = {read = get_Underline, write = set_Underline};
  __property   Office_xp::MsoTriState Subscript = {read = get_Subscript, write = set_Subscript};
  __property   Office_xp::MsoTriState Superscript = {read = get_Superscript, write = set_Superscript};
  __property   float           BaselineOffset = {read = get_BaselineOffset, write = set_BaselineOffset};
  __property   Office_xp::MsoTriState Embedded = {read = get_Embedded};
  __property   Office_xp::MsoTriState Embeddable = {read = get_Embeddable};
  __property   float           Size = {read = get_Size, write = set_Size};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            NameFarEast = {read = get_NameFarEast};
  __property   BSTR            NameAscii = {read = get_NameAscii};
  __property   Office_xp::MsoTriState AutoRotateNumbers = {read = get_AutoRotateNumbers, write = set_AutoRotateNumbers};
  __property   BSTR            NameOther = {read = get_NameOther};
  __property   BSTR            NameComplexScript = {read = get_NameComplexScript};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ParagraphFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493496-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ParagraphFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Alignment(Powerpoint_xp::PpParagraphAlignment* Alignment/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Alignment(Powerpoint_xp::PpParagraphAlignment Alignment/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Bullet(Powerpoint_xp::BulletFormat** Bullet/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_LineRuleBefore(Office_xp::MsoTriState* LineRuleBefore/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_LineRuleBefore(Office_xp::MsoTriState LineRuleBefore/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_LineRuleAfter(Office_xp::MsoTriState* LineRuleAfter/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_LineRuleAfter(Office_xp::MsoTriState LineRuleAfter/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_LineRuleWithin(Office_xp::MsoTriState* LineRuleWithin/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_LineRuleWithin(Office_xp::MsoTriState LineRuleWithin/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_SpaceBefore(float* SpaceBefore/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_SpaceBefore(float SpaceBefore/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_SpaceAfter(float* SpaceAfter/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_SpaceAfter(float SpaceAfter/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_SpaceWithin(float* SpaceWithin/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_SpaceWithin(float SpaceWithin/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_BaseLineAlignment(Powerpoint_xp::PpBaselineAlignment* BaseLineAlignment/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE set_BaseLineAlignment(Powerpoint_xp::PpBaselineAlignment BaseLineAlignment/*[in]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_FarEastLineBreakControl(Office_xp::MsoTriState* FarEastLineBreakControl/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE set_FarEastLineBreakControl(Office_xp::MsoTriState FarEastLineBreakControl/*[in]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_WordWrap(Office_xp::MsoTriState* WordWrap/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE set_WordWrap(Office_xp::MsoTriState WordWrap/*[in]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_HangingPunctuation(Office_xp::MsoTriState* HangingPunctuation/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE set_HangingPunctuation(Office_xp::MsoTriState HangingPunctuation/*[in]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_TextDirection(Powerpoint_xp::PpDirection* TextDirection/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE set_TextDirection(Powerpoint_xp::PpDirection TextDirection/*[in]*/) = 0; // [2015]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::PpParagraphAlignment __fastcall get_Alignment(void)
  {
    Powerpoint_xp::PpParagraphAlignment Alignment;
    OLECHECK(this->get_Alignment((Powerpoint_xp::PpParagraphAlignment*)&Alignment));
    return Alignment;
  }

  Powerpoint_xp::BulletFormat* __fastcall get_Bullet(void)
  {
    Powerpoint_xp::BulletFormat* Bullet;
    OLECHECK(this->get_Bullet((Powerpoint_xp::BulletFormat**)&Bullet));
    return Bullet;
  }

  Office_xp::MsoTriState __fastcall get_LineRuleBefore(void)
  {
    Office_xp::MsoTriState LineRuleBefore;
    OLECHECK(this->get_LineRuleBefore((Office_xp::MsoTriState*)&LineRuleBefore));
    return LineRuleBefore;
  }

  Office_xp::MsoTriState __fastcall get_LineRuleAfter(void)
  {
    Office_xp::MsoTriState LineRuleAfter;
    OLECHECK(this->get_LineRuleAfter((Office_xp::MsoTriState*)&LineRuleAfter));
    return LineRuleAfter;
  }

  Office_xp::MsoTriState __fastcall get_LineRuleWithin(void)
  {
    Office_xp::MsoTriState LineRuleWithin;
    OLECHECK(this->get_LineRuleWithin((Office_xp::MsoTriState*)&LineRuleWithin));
    return LineRuleWithin;
  }

  float __fastcall get_SpaceBefore(void)
  {
    float SpaceBefore;
    OLECHECK(this->get_SpaceBefore((float*)&SpaceBefore));
    return SpaceBefore;
  }

  float __fastcall get_SpaceAfter(void)
  {
    float SpaceAfter;
    OLECHECK(this->get_SpaceAfter((float*)&SpaceAfter));
    return SpaceAfter;
  }

  float __fastcall get_SpaceWithin(void)
  {
    float SpaceWithin;
    OLECHECK(this->get_SpaceWithin((float*)&SpaceWithin));
    return SpaceWithin;
  }

  Powerpoint_xp::PpBaselineAlignment __fastcall get_BaseLineAlignment(void)
  {
    Powerpoint_xp::PpBaselineAlignment BaseLineAlignment;
    OLECHECK(this->get_BaseLineAlignment((Powerpoint_xp::PpBaselineAlignment*)&BaseLineAlignment));
    return BaseLineAlignment;
  }

  Office_xp::MsoTriState __fastcall get_FarEastLineBreakControl(void)
  {
    Office_xp::MsoTriState FarEastLineBreakControl;
    OLECHECK(this->get_FarEastLineBreakControl((Office_xp::MsoTriState*)&FarEastLineBreakControl));
    return FarEastLineBreakControl;
  }

  Office_xp::MsoTriState __fastcall get_WordWrap(void)
  {
    Office_xp::MsoTriState WordWrap;
    OLECHECK(this->get_WordWrap((Office_xp::MsoTriState*)&WordWrap));
    return WordWrap;
  }

  Office_xp::MsoTriState __fastcall get_HangingPunctuation(void)
  {
    Office_xp::MsoTriState HangingPunctuation;
    OLECHECK(this->get_HangingPunctuation((Office_xp::MsoTriState*)&HangingPunctuation));
    return HangingPunctuation;
  }

  Powerpoint_xp::PpDirection __fastcall get_TextDirection(void)
  {
    Powerpoint_xp::PpDirection TextDirection;
    OLECHECK(this->get_TextDirection((Powerpoint_xp::PpDirection*)&TextDirection));
    return TextDirection;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::PpParagraphAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   Powerpoint_xp::BulletFormat* Bullet = {read = get_Bullet};
  __property   Office_xp::MsoTriState LineRuleBefore = {read = get_LineRuleBefore, write = set_LineRuleBefore};
  __property   Office_xp::MsoTriState LineRuleAfter = {read = get_LineRuleAfter, write = set_LineRuleAfter};
  __property   Office_xp::MsoTriState LineRuleWithin = {read = get_LineRuleWithin, write = set_LineRuleWithin};
  __property   float           SpaceBefore = {read = get_SpaceBefore, write = set_SpaceBefore};
  __property   float           SpaceAfter = {read = get_SpaceAfter, write = set_SpaceAfter};
  __property   float           SpaceWithin = {read = get_SpaceWithin, write = set_SpaceWithin};
  __property   Powerpoint_xp::PpBaselineAlignment BaseLineAlignment = {read = get_BaseLineAlignment, write = set_BaseLineAlignment};
  __property   Office_xp::MsoTriState FarEastLineBreakControl = {read = get_FarEastLineBreakControl, write = set_FarEastLineBreakControl};
  __property   Office_xp::MsoTriState WordWrap = {read = get_WordWrap, write = set_WordWrap};
  __property   Office_xp::MsoTriState HangingPunctuation = {read = get_HangingPunctuation, write = set_HangingPunctuation};
  __property   Powerpoint_xp::PpDirection TextDirection = {read = get_TextDirection, write = set_TextDirection};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: BulletFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493497-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface BulletFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_xp::MsoTriState Visible/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Character(int* Character/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Character(int Character/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_RelativeSize(float* RelativeSize/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_RelativeSize(float RelativeSize/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_UseTextColor(Office_xp::MsoTriState* UseTextColor/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_UseTextColor(Office_xp::MsoTriState UseTextColor/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_UseTextFont(Office_xp::MsoTriState* UseTextFont/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_UseTextFont(Office_xp::MsoTriState UseTextFont/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Font(Powerpoint_xp::Font** Font/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Powerpoint_xp::PpBulletType* Type/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Powerpoint_xp::PpBulletType Type/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_Style(Powerpoint_xp::PpNumberedBulletStyle* Style/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_Style(Powerpoint_xp::PpNumberedBulletStyle Style/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_StartValue(int* StartValue/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_StartValue(int StartValue/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE Picture(BSTR Picture/*[in]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_Number(int* Number/*[out,retval]*/) = 0; // [2012]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_xp::MsoTriState __fastcall get_Visible(void)
  {
    Office_xp::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_xp::MsoTriState*)&Visible));
    return Visible;
  }

  int __fastcall get_Character(void)
  {
    int Character;
    OLECHECK(this->get_Character((int*)&Character));
    return Character;
  }

  float __fastcall get_RelativeSize(void)
  {
    float RelativeSize;
    OLECHECK(this->get_RelativeSize((float*)&RelativeSize));
    return RelativeSize;
  }

  Office_xp::MsoTriState __fastcall get_UseTextColor(void)
  {
    Office_xp::MsoTriState UseTextColor;
    OLECHECK(this->get_UseTextColor((Office_xp::MsoTriState*)&UseTextColor));
    return UseTextColor;
  }

  Office_xp::MsoTriState __fastcall get_UseTextFont(void)
  {
    Office_xp::MsoTriState UseTextFont;
    OLECHECK(this->get_UseTextFont((Office_xp::MsoTriState*)&UseTextFont));
    return UseTextFont;
  }

  Powerpoint_xp::Font* __fastcall get_Font(void)
  {
    Powerpoint_xp::Font* Font;
    OLECHECK(this->get_Font((Powerpoint_xp::Font**)&Font));
    return Font;
  }

  Powerpoint_xp::PpBulletType __fastcall get_Type(void)
  {
    Powerpoint_xp::PpBulletType Type;
    OLECHECK(this->get_Type((Powerpoint_xp::PpBulletType*)&Type));
    return Type;
  }

  Powerpoint_xp::PpNumberedBulletStyle __fastcall get_Style(void)
  {
    Powerpoint_xp::PpNumberedBulletStyle Style;
    OLECHECK(this->get_Style((Powerpoint_xp::PpNumberedBulletStyle*)&Style));
    return Style;
  }

  int __fastcall get_StartValue(void)
  {
    int StartValue;
    OLECHECK(this->get_StartValue((int*)&StartValue));
    return StartValue;
  }

  int __fastcall get_Number(void)
  {
    int Number;
    OLECHECK(this->get_Number((int*)&Number));
    return Number;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   int             Character = {read = get_Character, write = set_Character};
  __property   float           RelativeSize = {read = get_RelativeSize, write = set_RelativeSize};
  __property   Office_xp::MsoTriState UseTextColor = {read = get_UseTextColor, write = set_UseTextColor};
  __property   Office_xp::MsoTriState UseTextFont = {read = get_UseTextFont, write = set_UseTextFont};
  __property   Powerpoint_xp::Font* Font = {read = get_Font};
  __property   Powerpoint_xp::PpBulletType Type = {read = get_Type, write = set_Type};
  __property   Powerpoint_xp::PpNumberedBulletStyle Style = {read = get_Style, write = set_Style};
  __property   int             StartValue = {read = get_StartValue, write = set_StartValue};
  __property   int             Number = {read = get_Number};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TextStyles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493498-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface TextStyles  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(Powerpoint_xp::PpTextStyleType Type/*[in]*/, 
                                         Powerpoint_xp::TextStyle** Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::TextStyle* __fastcall Item(Powerpoint_xp::PpTextStyleType Type/*[in]*/)
  {
    Powerpoint_xp::TextStyle* Item;
    OLECHECK(this->Item(Type, (Powerpoint_xp::TextStyle**)&Item));
    return Item;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TextStyle
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493499-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface TextStyle  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Ruler(Powerpoint_xp::Ruler** Ruler/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_TextFrame(Powerpoint_xp::TextFrame** TextFrame/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Levels(Powerpoint_xp::TextStyleLevels** Levels/*[out,retval]*/) = 0; // [2005]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Ruler* __fastcall get_Ruler(void)
  {
    Powerpoint_xp::Ruler* Ruler;
    OLECHECK(this->get_Ruler((Powerpoint_xp::Ruler**)&Ruler));
    return Ruler;
  }

  Powerpoint_xp::TextFrame* __fastcall get_TextFrame(void)
  {
    Powerpoint_xp::TextFrame* TextFrame;
    OLECHECK(this->get_TextFrame((Powerpoint_xp::TextFrame**)&TextFrame));
    return TextFrame;
  }

  Powerpoint_xp::TextStyleLevels* __fastcall get_Levels(void)
  {
    Powerpoint_xp::TextStyleLevels* Levels;
    OLECHECK(this->get_Levels((Powerpoint_xp::TextStyleLevels**)&Levels));
    return Levels;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Ruler* Ruler = {read = get_Ruler};
  __property   Powerpoint_xp::TextFrame* TextFrame = {read = get_TextFrame};
  __property   Powerpoint_xp::TextStyleLevels* Levels = {read = get_Levels};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TextStyleLevels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface TextStyleLevels  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Level/*[in]*/, 
                                         Powerpoint_xp::TextStyleLevel** Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::TextStyleLevel* __fastcall Item(int Level/*[in]*/)
  {
    Powerpoint_xp::TextStyleLevel* Item;
    OLECHECK(this->Item(Level, (Powerpoint_xp::TextStyleLevel**)&Item));
    return Item;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TextStyleLevel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface TextStyleLevel  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_ParagraphFormat(Powerpoint_xp::ParagraphFormat** ParagraphFormat/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Font(Powerpoint_xp::Font** Font/*[out,retval]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::ParagraphFormat* __fastcall get_ParagraphFormat(void)
  {
    Powerpoint_xp::ParagraphFormat* ParagraphFormat;
    OLECHECK(this->get_ParagraphFormat((Powerpoint_xp::ParagraphFormat**)&ParagraphFormat));
    return ParagraphFormat;
  }

  Powerpoint_xp::Font* __fastcall get_Font(void)
  {
    Powerpoint_xp::Font* Font;
    OLECHECK(this->get_Font((Powerpoint_xp::Font**)&Font));
    return Font;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ParagraphFormat* ParagraphFormat = {read = get_ParagraphFormat};
  __property   Powerpoint_xp::Font* Font = {read = get_Font};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: HeaderFooter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface HeaderFooter  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_xp::MsoTriState Visible/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* Text/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR Text/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_UseFormat(Office_xp::MsoTriState* UseFormat/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_UseFormat(Office_xp::MsoTriState UseFormat/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Format(Powerpoint_xp::PpDateTimeFormat* Format/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_Format(Powerpoint_xp::PpDateTimeFormat Format/*[in]*/) = 0; // [2006]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_xp::MsoTriState __fastcall get_Visible(void)
  {
    Office_xp::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_xp::MsoTriState*)&Visible));
    return Visible;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR Text = 0;
    OLECHECK(this->get_Text((BSTR*)&Text));
    return Text;
  }

  Office_xp::MsoTriState __fastcall get_UseFormat(void)
  {
    Office_xp::MsoTriState UseFormat;
    OLECHECK(this->get_UseFormat((Office_xp::MsoTriState*)&UseFormat));
    return UseFormat;
  }

  Powerpoint_xp::PpDateTimeFormat __fastcall get_Format(void)
  {
    Powerpoint_xp::PpDateTimeFormat Format;
    OLECHECK(this->get_Format((Powerpoint_xp::PpDateTimeFormat*)&Format));
    return Format;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   BSTR            Text = {read = get_Text};
  __property   Office_xp::MsoTriState UseFormat = {read = get_UseFormat, write = set_UseFormat};
  __property   Powerpoint_xp::PpDateTimeFormat Format = {read = get_Format, write = set_Format};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Tags
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Tags  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(BSTR Name/*[in]*/, BSTR* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, BSTR Value/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Delete(BSTR Name/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE AddBinary(BSTR Name/*[in]*/, BSTR FilePath/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE BinaryValue(BSTR Name/*[in]*/, long* BinaryValue/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE Name(int Index/*[in]*/, BSTR* Name/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE Value(int Index/*[in]*/, BSTR* Value/*[out,retval]*/) = 0; // [2008]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall Item(BSTR Name/*[in]*/)
  {
    BSTR Item = 0;
    OLECHECK(this->Item(Name, (BSTR*)&Item));
    return Item;
  }

  long __fastcall BinaryValue(BSTR Name/*[in]*/)
  {
    long BinaryValue;
    OLECHECK(this->BinaryValue(Name, (long*)&BinaryValue));
    return BinaryValue;
  }

  BSTR __fastcall Name(int Index/*[in]*/)
  {
    BSTR Name = 0;
    OLECHECK(this->Name(Index, (BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall Value(int Index/*[in]*/)
  {
    BSTR Value = 0;
    OLECHECK(this->Value(Index, (BSTR*)&Value));
    return Value;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: MouseTracker
// Flags:     (16) Hidden
// GUID:      {914934BE-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface MouseTracker  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE OnTrack(float X/*[in]*/, float Y/*[in]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE EndTrack(float X/*[in]*/, float Y/*[in]*/) = 0; // [2002]
};

// *********************************************************************//
// Interface: MouseDownHandler
// Flags:     (16) Hidden
// GUID:      {914934BF-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface MouseDownHandler  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE OnMouseDown(LPUNKNOWN activeWin/*[in]*/) = 0; // [2001]
};

// *********************************************************************//
// Interface: OCXExtender
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface OCXExtender  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/) = 0; // [-2147418105]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL Visible/*[in]*/) = 0; // [-2147418105]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [-2147418109]
  virtual HRESULT STDMETHODCALLTYPE set_Left(float Left/*[in]*/) = 0; // [-2147418109]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [-2147418108]
  virtual HRESULT STDMETHODCALLTYPE set_Top(float Top/*[in]*/) = 0; // [-2147418108]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [-2147418107]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [-2147418107]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [-2147418106]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [-2147418106]
  virtual HRESULT STDMETHODCALLTYPE get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/) = 0; // [-2147417882]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [-2147418112]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [-2147418112]
  virtual HRESULT STDMETHODCALLTYPE get_AltHTML(BSTR* AltHTML/*[out,retval]*/) = 0; // [-2147417881]
  virtual HRESULT STDMETHODCALLTYPE set_AltHTML(BSTR AltHTML/*[in]*/) = 0; // [-2147417881]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL Visible;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&Visible));
    return Visible;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  int __fastcall get_ZOrderPosition(void)
  {
    int ZOrderPosition;
    OLECHECK(this->get_ZOrderPosition((int*)&ZOrderPosition));
    return ZOrderPosition;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_AltHTML(void)
  {
    BSTR AltHTML = 0;
    OLECHECK(this->get_AltHTML((BSTR*)&AltHTML));
    return AltHTML;
  }


  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            AltHTML = {read = get_AltHTML};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: OCXExtenderEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {914934C1-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface OCXExtenderEvents  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE GotFocus(void); // [-2147417888]
   HRESULT STDMETHODCALLTYPE LostFocus(void); // [-2147417887]
};

// *********************************************************************//
// Interface: Table
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C3-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Table  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Columns(Powerpoint_xp::Columns** Columns/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Rows(Powerpoint_xp::Rows** Rows/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE Cell(int Row/*[in]*/, int Column/*[in]*/, 
                                         Powerpoint_xp::Cell** Cell/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_TableDirection(Powerpoint_xp::PpDirection* TableDirection/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_TableDirection(Powerpoint_xp::PpDirection TableDirection/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE MergeBorders(void) = 0; // [2007]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Columns* __fastcall get_Columns(void)
  {
    Powerpoint_xp::Columns* Columns;
    OLECHECK(this->get_Columns((Powerpoint_xp::Columns**)&Columns));
    return Columns;
  }

  Powerpoint_xp::Rows* __fastcall get_Rows(void)
  {
    Powerpoint_xp::Rows* Rows;
    OLECHECK(this->get_Rows((Powerpoint_xp::Rows**)&Rows));
    return Rows;
  }

  Powerpoint_xp::Cell* __fastcall Cell(int Row/*[in]*/, int Column/*[in]*/)
  {
    Powerpoint_xp::Cell* Cell;
    OLECHECK(this->Cell(Row, Column, (Powerpoint_xp::Cell**)&Cell));
    return Cell;
  }

  Powerpoint_xp::PpDirection __fastcall get_TableDirection(void)
  {
    Powerpoint_xp::PpDirection TableDirection;
    OLECHECK(this->get_TableDirection((Powerpoint_xp::PpDirection*)&TableDirection));
    return TableDirection;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Columns* Columns = {read = get_Columns};
  __property   Powerpoint_xp::Rows* Rows = {read = get_Rows};
  __property   Powerpoint_xp::PpDirection TableDirection = {read = get_TableDirection, write = set_TableDirection};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Columns
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C4-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Columns  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, 
                                         Powerpoint_xp::Column** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(int BeforeColumn/*[in,def,opt]*/, 
                                        Powerpoint_xp::Column** Add/*[out,retval]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Column* __fastcall Item(int Index/*[in]*/)
  {
    Powerpoint_xp::Column* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::Column**)&Item));
    return Item;
  }

  Powerpoint_xp::Column* __fastcall Add(int BeforeColumn/*[in,def,opt]*/)
  {
    Powerpoint_xp::Column* Add;
    OLECHECK(this->Add(BeforeColumn, (Powerpoint_xp::Column**)&Add));
    return Add;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Column
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C5-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Column  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Cells(Powerpoint_xp::CellRange** Cells/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [2006]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::CellRange* __fastcall get_Cells(void)
  {
    Powerpoint_xp::CellRange* Cells;
    OLECHECK(this->get_Cells((Powerpoint_xp::CellRange**)&Cells));
    return Cells;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::CellRange* Cells = {read = get_Cells};
  __property   float           Width = {read = get_Width, write = set_Width};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Rows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C6-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Rows  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, 
                                         Powerpoint_xp::Row** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(int BeforeRow/*[in,def,opt]*/, 
                                        Powerpoint_xp::Row** Add/*[out,retval]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Row* __fastcall Item(int Index/*[in]*/)
  {
    Powerpoint_xp::Row* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::Row**)&Item));
    return Item;
  }

  Powerpoint_xp::Row* __fastcall Add(int BeforeRow/*[in,def,opt]*/)
  {
    Powerpoint_xp::Row* Add;
    OLECHECK(this->Add(BeforeRow, (Powerpoint_xp::Row**)&Add));
    return Add;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Row
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C7-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Row  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Cells(Powerpoint_xp::CellRange** Cells/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [2006]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::CellRange* __fastcall get_Cells(void)
  {
    Powerpoint_xp::CellRange* Cells;
    OLECHECK(this->get_Cells((Powerpoint_xp::CellRange**)&Cells));
    return Cells;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::CellRange* Cells = {read = get_Cells};
  __property   float           Height = {read = get_Height, write = set_Height};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: CellRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C8-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface CellRange  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, 
                                         Powerpoint_xp::Cell** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Borders(Powerpoint_xp::Borders** Borders/*[out,retval]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Cell* __fastcall Item(int Index/*[in]*/)
  {
    Powerpoint_xp::Cell* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::Cell**)&Item));
    return Item;
  }

  Powerpoint_xp::Borders* __fastcall get_Borders(void)
  {
    Powerpoint_xp::Borders* Borders;
    OLECHECK(this->get_Borders((Powerpoint_xp::Borders**)&Borders));
    return Borders;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Borders* Borders = {read = get_Borders};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Cell
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Cell  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Shape(Powerpoint_xp::Shape** Shape/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Borders(Powerpoint_xp::Borders** Borders/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE Merge(Powerpoint_xp::Cell* MergeTo/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE Split(int NumRows/*[in]*/, int NumColumns/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Selected(VARIANT_BOOL* Selected/*[out,retval]*/) = 0; // [2008]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Shape* __fastcall get_Shape(void)
  {
    Powerpoint_xp::Shape* Shape;
    OLECHECK(this->get_Shape((Powerpoint_xp::Shape**)&Shape));
    return Shape;
  }

  Powerpoint_xp::Borders* __fastcall get_Borders(void)
  {
    Powerpoint_xp::Borders* Borders;
    OLECHECK(this->get_Borders((Powerpoint_xp::Borders**)&Borders));
    return Borders;
  }

  VARIANT_BOOL __fastcall get_Selected(void)
  {
    VARIANT_BOOL Selected;
    OLECHECK(this->get_Selected((VARIANT_BOOL*)&Selected));
    return Selected;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Shape* Shape = {read = get_Shape};
  __property   Powerpoint_xp::Borders* Borders = {read = get_Borders};
  __property   VARIANT_BOOL    Selected = {read = get_Selected};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Borders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CA-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Borders  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(Powerpoint_xp::PpBorderType BorderType/*[in]*/, 
                                         Powerpoint_xp::LineFormat** Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::LineFormat* __fastcall Item(Powerpoint_xp::PpBorderType BorderType/*[in]*/)
  {
    Powerpoint_xp::LineFormat* Item;
    OLECHECK(this->Item(BorderType, (Powerpoint_xp::LineFormat**)&Item));
    return Item;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Panes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CB-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Panes  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, 
                                         Powerpoint_xp::Pane** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  Powerpoint_xp::Pane* __fastcall Item(int Index/*[in]*/)
  {
    Powerpoint_xp::Pane* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::Pane**)&Item));
    return Item;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Pane
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CC-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Pane  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2000]
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Active(Office_xp::MsoTriState* Active/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_ViewType(Powerpoint_xp::PpViewType* ViewType/*[out,retval]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_xp::MsoTriState __fastcall get_Active(void)
  {
    Office_xp::MsoTriState Active;
    OLECHECK(this->get_Active((Office_xp::MsoTriState*)&Active));
    return Active;
  }

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  Powerpoint_xp::PpViewType __fastcall get_ViewType(void)
  {
    Powerpoint_xp::PpViewType ViewType;
    OLECHECK(this->get_ViewType((Powerpoint_xp::PpViewType*)&ViewType));
    return ViewType;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoTriState Active = {read = get_Active};
  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   Powerpoint_xp::PpViewType ViewType = {read = get_ViewType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DefaultWebOptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CD-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface DefaultWebOptions  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_IncludeNavigation(Office_xp::MsoTriState* IncludeNavigation/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE set_IncludeNavigation(Office_xp::MsoTriState IncludeNavigation/*[in]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_FrameColors(Powerpoint_xp::PpFrameColors* FrameColors/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE set_FrameColors(Powerpoint_xp::PpFrameColors FrameColors/*[in]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_ResizeGraphics(Office_xp::MsoTriState* ResizeGraphics/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_ResizeGraphics(Office_xp::MsoTriState ResizeGraphics/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_ShowSlideAnimation(Office_xp::MsoTriState* ShowSlideAnimation/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_ShowSlideAnimation(Office_xp::MsoTriState ShowSlideAnimation/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_OrganizeInFolder(Office_xp::MsoTriState* OrganizeInFolder/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_OrganizeInFolder(Office_xp::MsoTriState OrganizeInFolder/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_UseLongFileNames(Office_xp::MsoTriState* UseLongFileNames/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_UseLongFileNames(Office_xp::MsoTriState UseLongFileNames/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_RelyOnVML(Office_xp::MsoTriState* RelyOnVML/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_RelyOnVML(Office_xp::MsoTriState RelyOnVML/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_AllowPNG(Office_xp::MsoTriState* AllowPNG/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_AllowPNG(Office_xp::MsoTriState AllowPNG/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_ScreenSize(Office_xp::MsoScreenSize* ScreenSize/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_ScreenSize(Office_xp::MsoScreenSize ScreenSize/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_Encoding(Office_xp::MsoEncoding* Encoding/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_Encoding(Office_xp::MsoEncoding Encoding/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_UpdateLinksOnSave(Office_xp::MsoTriState* UpdateLinksOnSave/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE set_UpdateLinksOnSave(Office_xp::MsoTriState UpdateLinksOnSave/*[in]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_CheckIfOfficeIsHTMLEditor(Office_xp::MsoTriState* CheckIfOfficeIsHTMLEditor/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE set_CheckIfOfficeIsHTMLEditor(Office_xp::MsoTriState CheckIfOfficeIsHTMLEditor/*[in]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_AlwaysSaveInDefaultEncoding(Office_xp::MsoTriState* AlwaysSaveInDefaultEncoding/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE set_AlwaysSaveInDefaultEncoding(Office_xp::MsoTriState AlwaysSaveInDefaultEncoding/*[in]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_Fonts(Office_xp::WebPageFonts** Fonts/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_FolderSuffix(BSTR* FolderSuffix/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE get_TargetBrowser(Office_xp::MsoTargetBrowser* TargetBrowser/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE set_TargetBrowser(Office_xp::MsoTargetBrowser TargetBrowser/*[in]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE get_SaveNewWebPagesAsWebArchives(Office_xp::MsoTriState* SaveNewWebPagesAsWebArchives/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE set_SaveNewWebPagesAsWebArchives(Office_xp::MsoTriState SaveNewWebPagesAsWebArchives/*[in]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLVersion(Powerpoint_xp::PpHTMLVersion* HTMLVersion/*[out,retval]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE set_HTMLVersion(Powerpoint_xp::PpHTMLVersion HTMLVersion/*[in]*/) = 0; // [2018]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_xp::MsoTriState __fastcall get_IncludeNavigation(void)
  {
    Office_xp::MsoTriState IncludeNavigation;
    OLECHECK(this->get_IncludeNavigation((Office_xp::MsoTriState*)&IncludeNavigation));
    return IncludeNavigation;
  }

  Powerpoint_xp::PpFrameColors __fastcall get_FrameColors(void)
  {
    Powerpoint_xp::PpFrameColors FrameColors;
    OLECHECK(this->get_FrameColors((Powerpoint_xp::PpFrameColors*)&FrameColors));
    return FrameColors;
  }

  Office_xp::MsoTriState __fastcall get_ResizeGraphics(void)
  {
    Office_xp::MsoTriState ResizeGraphics;
    OLECHECK(this->get_ResizeGraphics((Office_xp::MsoTriState*)&ResizeGraphics));
    return ResizeGraphics;
  }

  Office_xp::MsoTriState __fastcall get_ShowSlideAnimation(void)
  {
    Office_xp::MsoTriState ShowSlideAnimation;
    OLECHECK(this->get_ShowSlideAnimation((Office_xp::MsoTriState*)&ShowSlideAnimation));
    return ShowSlideAnimation;
  }

  Office_xp::MsoTriState __fastcall get_OrganizeInFolder(void)
  {
    Office_xp::MsoTriState OrganizeInFolder;
    OLECHECK(this->get_OrganizeInFolder((Office_xp::MsoTriState*)&OrganizeInFolder));
    return OrganizeInFolder;
  }

  Office_xp::MsoTriState __fastcall get_UseLongFileNames(void)
  {
    Office_xp::MsoTriState UseLongFileNames;
    OLECHECK(this->get_UseLongFileNames((Office_xp::MsoTriState*)&UseLongFileNames));
    return UseLongFileNames;
  }

  Office_xp::MsoTriState __fastcall get_RelyOnVML(void)
  {
    Office_xp::MsoTriState RelyOnVML;
    OLECHECK(this->get_RelyOnVML((Office_xp::MsoTriState*)&RelyOnVML));
    return RelyOnVML;
  }

  Office_xp::MsoTriState __fastcall get_AllowPNG(void)
  {
    Office_xp::MsoTriState AllowPNG;
    OLECHECK(this->get_AllowPNG((Office_xp::MsoTriState*)&AllowPNG));
    return AllowPNG;
  }

  Office_xp::MsoScreenSize __fastcall get_ScreenSize(void)
  {
    Office_xp::MsoScreenSize ScreenSize;
    OLECHECK(this->get_ScreenSize((Office_xp::MsoScreenSize*)&ScreenSize));
    return ScreenSize;
  }

  Office_xp::MsoEncoding __fastcall get_Encoding(void)
  {
    Office_xp::MsoEncoding Encoding;
    OLECHECK(this->get_Encoding((Office_xp::MsoEncoding*)&Encoding));
    return Encoding;
  }

  Office_xp::MsoTriState __fastcall get_UpdateLinksOnSave(void)
  {
    Office_xp::MsoTriState UpdateLinksOnSave;
    OLECHECK(this->get_UpdateLinksOnSave((Office_xp::MsoTriState*)&UpdateLinksOnSave));
    return UpdateLinksOnSave;
  }

  Office_xp::MsoTriState __fastcall get_CheckIfOfficeIsHTMLEditor(void)
  {
    Office_xp::MsoTriState CheckIfOfficeIsHTMLEditor;
    OLECHECK(this->get_CheckIfOfficeIsHTMLEditor((Office_xp::MsoTriState*)&CheckIfOfficeIsHTMLEditor));
    return CheckIfOfficeIsHTMLEditor;
  }

  Office_xp::MsoTriState __fastcall get_AlwaysSaveInDefaultEncoding(void)
  {
    Office_xp::MsoTriState AlwaysSaveInDefaultEncoding;
    OLECHECK(this->get_AlwaysSaveInDefaultEncoding((Office_xp::MsoTriState*)&AlwaysSaveInDefaultEncoding));
    return AlwaysSaveInDefaultEncoding;
  }

  Office_xp::WebPageFonts* __fastcall get_Fonts(void)
  {
    Office_xp::WebPageFonts* Fonts;
    OLECHECK(this->get_Fonts((Office_xp::WebPageFonts**)&Fonts));
    return Fonts;
  }

  BSTR __fastcall get_FolderSuffix(void)
  {
    BSTR FolderSuffix = 0;
    OLECHECK(this->get_FolderSuffix((BSTR*)&FolderSuffix));
    return FolderSuffix;
  }

  Office_xp::MsoTargetBrowser __fastcall get_TargetBrowser(void)
  {
    Office_xp::MsoTargetBrowser TargetBrowser;
    OLECHECK(this->get_TargetBrowser((Office_xp::MsoTargetBrowser*)&TargetBrowser));
    return TargetBrowser;
  }

  Office_xp::MsoTriState __fastcall get_SaveNewWebPagesAsWebArchives(void)
  {
    Office_xp::MsoTriState SaveNewWebPagesAsWebArchives;
    OLECHECK(this->get_SaveNewWebPagesAsWebArchives((Office_xp::MsoTriState*)&SaveNewWebPagesAsWebArchives));
    return SaveNewWebPagesAsWebArchives;
  }

  Powerpoint_xp::PpHTMLVersion __fastcall get_HTMLVersion(void)
  {
    Powerpoint_xp::PpHTMLVersion HTMLVersion;
    OLECHECK(this->get_HTMLVersion((Powerpoint_xp::PpHTMLVersion*)&HTMLVersion));
    return HTMLVersion;
  }


  __property   Office_xp::MsoTriState IncludeNavigation = {read = get_IncludeNavigation, write = set_IncludeNavigation};
  __property   Powerpoint_xp::PpFrameColors FrameColors = {read = get_FrameColors, write = set_FrameColors};
  __property   Office_xp::MsoTriState ResizeGraphics = {read = get_ResizeGraphics, write = set_ResizeGraphics};
  __property   Office_xp::MsoTriState ShowSlideAnimation = {read = get_ShowSlideAnimation, write = set_ShowSlideAnimation};
  __property   Office_xp::MsoTriState OrganizeInFolder = {read = get_OrganizeInFolder, write = set_OrganizeInFolder};
  __property   Office_xp::MsoTriState UseLongFileNames = {read = get_UseLongFileNames, write = set_UseLongFileNames};
  __property   Office_xp::MsoTriState RelyOnVML = {read = get_RelyOnVML, write = set_RelyOnVML};
  __property   Office_xp::MsoTriState AllowPNG = {read = get_AllowPNG, write = set_AllowPNG};
  __property   Office_xp::MsoScreenSize ScreenSize = {read = get_ScreenSize, write = set_ScreenSize};
  __property   Office_xp::MsoEncoding Encoding = {read = get_Encoding, write = set_Encoding};
  __property   Office_xp::MsoTriState UpdateLinksOnSave = {read = get_UpdateLinksOnSave, write = set_UpdateLinksOnSave};
  __property   Office_xp::MsoTriState CheckIfOfficeIsHTMLEditor = {read = get_CheckIfOfficeIsHTMLEditor, write = set_CheckIfOfficeIsHTMLEditor};
  __property   Office_xp::MsoTriState AlwaysSaveInDefaultEncoding = {read = get_AlwaysSaveInDefaultEncoding, write = set_AlwaysSaveInDefaultEncoding};
  __property   Office_xp::WebPageFonts* Fonts = {read = get_Fonts};
  __property   BSTR            FolderSuffix = {read = get_FolderSuffix};
  __property   Office_xp::MsoTargetBrowser TargetBrowser = {read = get_TargetBrowser, write = set_TargetBrowser};
  __property   Office_xp::MsoTriState SaveNewWebPagesAsWebArchives = {read = get_SaveNewWebPagesAsWebArchives, write = set_SaveNewWebPagesAsWebArchives};
  __property   Powerpoint_xp::PpHTMLVersion HTMLVersion = {read = get_HTMLVersion, write = set_HTMLVersion};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: WebOptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CE-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface WebOptions  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_IncludeNavigation(Office_xp::MsoTriState* IncludeNavigation/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE set_IncludeNavigation(Office_xp::MsoTriState IncludeNavigation/*[in]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_FrameColors(Powerpoint_xp::PpFrameColors* FrameColors/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE set_FrameColors(Powerpoint_xp::PpFrameColors FrameColors/*[in]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_ResizeGraphics(Office_xp::MsoTriState* ResizeGraphics/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_ResizeGraphics(Office_xp::MsoTriState ResizeGraphics/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_ShowSlideAnimation(Office_xp::MsoTriState* ShowSlideAnimation/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_ShowSlideAnimation(Office_xp::MsoTriState ShowSlideAnimation/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_OrganizeInFolder(Office_xp::MsoTriState* OrganizeInFolder/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_OrganizeInFolder(Office_xp::MsoTriState OrganizeInFolder/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_UseLongFileNames(Office_xp::MsoTriState* UseLongFileNames/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_UseLongFileNames(Office_xp::MsoTriState UseLongFileNames/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_RelyOnVML(Office_xp::MsoTriState* RelyOnVML/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_RelyOnVML(Office_xp::MsoTriState RelyOnVML/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_AllowPNG(Office_xp::MsoTriState* AllowPNG/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_AllowPNG(Office_xp::MsoTriState AllowPNG/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_ScreenSize(Office_xp::MsoScreenSize* ScreenSize/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_ScreenSize(Office_xp::MsoScreenSize ScreenSize/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_Encoding(Office_xp::MsoEncoding* Encoding/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_Encoding(Office_xp::MsoEncoding Encoding/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_FolderSuffix(BSTR* FolderSuffix/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE UseDefaultFolderSuffix(void) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_TargetBrowser(Office_xp::MsoTargetBrowser* TargetBrowser/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE set_TargetBrowser(Office_xp::MsoTargetBrowser TargetBrowser/*[in]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLVersion(Powerpoint_xp::PpHTMLVersion* HTMLVersion/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE set_HTMLVersion(Powerpoint_xp::PpHTMLVersion HTMLVersion/*[in]*/) = 0; // [2014]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_xp::MsoTriState __fastcall get_IncludeNavigation(void)
  {
    Office_xp::MsoTriState IncludeNavigation;
    OLECHECK(this->get_IncludeNavigation((Office_xp::MsoTriState*)&IncludeNavigation));
    return IncludeNavigation;
  }

  Powerpoint_xp::PpFrameColors __fastcall get_FrameColors(void)
  {
    Powerpoint_xp::PpFrameColors FrameColors;
    OLECHECK(this->get_FrameColors((Powerpoint_xp::PpFrameColors*)&FrameColors));
    return FrameColors;
  }

  Office_xp::MsoTriState __fastcall get_ResizeGraphics(void)
  {
    Office_xp::MsoTriState ResizeGraphics;
    OLECHECK(this->get_ResizeGraphics((Office_xp::MsoTriState*)&ResizeGraphics));
    return ResizeGraphics;
  }

  Office_xp::MsoTriState __fastcall get_ShowSlideAnimation(void)
  {
    Office_xp::MsoTriState ShowSlideAnimation;
    OLECHECK(this->get_ShowSlideAnimation((Office_xp::MsoTriState*)&ShowSlideAnimation));
    return ShowSlideAnimation;
  }

  Office_xp::MsoTriState __fastcall get_OrganizeInFolder(void)
  {
    Office_xp::MsoTriState OrganizeInFolder;
    OLECHECK(this->get_OrganizeInFolder((Office_xp::MsoTriState*)&OrganizeInFolder));
    return OrganizeInFolder;
  }

  Office_xp::MsoTriState __fastcall get_UseLongFileNames(void)
  {
    Office_xp::MsoTriState UseLongFileNames;
    OLECHECK(this->get_UseLongFileNames((Office_xp::MsoTriState*)&UseLongFileNames));
    return UseLongFileNames;
  }

  Office_xp::MsoTriState __fastcall get_RelyOnVML(void)
  {
    Office_xp::MsoTriState RelyOnVML;
    OLECHECK(this->get_RelyOnVML((Office_xp::MsoTriState*)&RelyOnVML));
    return RelyOnVML;
  }

  Office_xp::MsoTriState __fastcall get_AllowPNG(void)
  {
    Office_xp::MsoTriState AllowPNG;
    OLECHECK(this->get_AllowPNG((Office_xp::MsoTriState*)&AllowPNG));
    return AllowPNG;
  }

  Office_xp::MsoScreenSize __fastcall get_ScreenSize(void)
  {
    Office_xp::MsoScreenSize ScreenSize;
    OLECHECK(this->get_ScreenSize((Office_xp::MsoScreenSize*)&ScreenSize));
    return ScreenSize;
  }

  Office_xp::MsoEncoding __fastcall get_Encoding(void)
  {
    Office_xp::MsoEncoding Encoding;
    OLECHECK(this->get_Encoding((Office_xp::MsoEncoding*)&Encoding));
    return Encoding;
  }

  BSTR __fastcall get_FolderSuffix(void)
  {
    BSTR FolderSuffix = 0;
    OLECHECK(this->get_FolderSuffix((BSTR*)&FolderSuffix));
    return FolderSuffix;
  }

  Office_xp::MsoTargetBrowser __fastcall get_TargetBrowser(void)
  {
    Office_xp::MsoTargetBrowser TargetBrowser;
    OLECHECK(this->get_TargetBrowser((Office_xp::MsoTargetBrowser*)&TargetBrowser));
    return TargetBrowser;
  }

  Powerpoint_xp::PpHTMLVersion __fastcall get_HTMLVersion(void)
  {
    Powerpoint_xp::PpHTMLVersion HTMLVersion;
    OLECHECK(this->get_HTMLVersion((Powerpoint_xp::PpHTMLVersion*)&HTMLVersion));
    return HTMLVersion;
  }


  __property   Office_xp::MsoTriState IncludeNavigation = {read = get_IncludeNavigation, write = set_IncludeNavigation};
  __property   Powerpoint_xp::PpFrameColors FrameColors = {read = get_FrameColors, write = set_FrameColors};
  __property   Office_xp::MsoTriState ResizeGraphics = {read = get_ResizeGraphics, write = set_ResizeGraphics};
  __property   Office_xp::MsoTriState ShowSlideAnimation = {read = get_ShowSlideAnimation, write = set_ShowSlideAnimation};
  __property   Office_xp::MsoTriState OrganizeInFolder = {read = get_OrganizeInFolder, write = set_OrganizeInFolder};
  __property   Office_xp::MsoTriState UseLongFileNames = {read = get_UseLongFileNames, write = set_UseLongFileNames};
  __property   Office_xp::MsoTriState RelyOnVML = {read = get_RelyOnVML, write = set_RelyOnVML};
  __property   Office_xp::MsoTriState AllowPNG = {read = get_AllowPNG, write = set_AllowPNG};
  __property   Office_xp::MsoScreenSize ScreenSize = {read = get_ScreenSize, write = set_ScreenSize};
  __property   Office_xp::MsoEncoding Encoding = {read = get_Encoding, write = set_Encoding};
  __property   BSTR            FolderSuffix = {read = get_FolderSuffix};
  __property   Office_xp::MsoTargetBrowser TargetBrowser = {read = get_TargetBrowser, write = set_TargetBrowser};
  __property   Powerpoint_xp::PpHTMLVersion HTMLVersion = {read = get_HTMLVersion, write = set_HTMLVersion};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PublishObjects
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CF-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PublishObjects  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, 
                                         Powerpoint_xp::PublishObject** Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::PublishObject* __fastcall Item(int Index/*[in]*/)
  {
    Powerpoint_xp::PublishObject* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::PublishObject**)&Item));
    return Item;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PublishObject
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PublishObject  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLVersion(Powerpoint_xp::PpHTMLVersion* HTMLVersion/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_HTMLVersion(Powerpoint_xp::PpHTMLVersion HTMLVersion/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_SourceType(Powerpoint_xp::PpPublishSourceType* SourceType/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_SourceType(Powerpoint_xp::PpPublishSourceType SourceType/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_RangeStart(int* RangeStart/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_RangeStart(int RangeStart/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_RangeEnd(int* RangeEnd/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_RangeEnd(int RangeEnd/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_SlideShowName(BSTR SlideShowName/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_SpeakerNotes(Office_xp::MsoTriState* SpeakerNotes/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_SpeakerNotes(Office_xp::MsoTriState SpeakerNotes/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_FileName(BSTR* FileName/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_FileName(BSTR FileName/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE Publish(void) = 0; // [2010]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::PpHTMLVersion __fastcall get_HTMLVersion(void)
  {
    Powerpoint_xp::PpHTMLVersion HTMLVersion;
    OLECHECK(this->get_HTMLVersion((Powerpoint_xp::PpHTMLVersion*)&HTMLVersion));
    return HTMLVersion;
  }

  Powerpoint_xp::PpPublishSourceType __fastcall get_SourceType(void)
  {
    Powerpoint_xp::PpPublishSourceType SourceType;
    OLECHECK(this->get_SourceType((Powerpoint_xp::PpPublishSourceType*)&SourceType));
    return SourceType;
  }

  int __fastcall get_RangeStart(void)
  {
    int RangeStart;
    OLECHECK(this->get_RangeStart((int*)&RangeStart));
    return RangeStart;
  }

  int __fastcall get_RangeEnd(void)
  {
    int RangeEnd;
    OLECHECK(this->get_RangeEnd((int*)&RangeEnd));
    return RangeEnd;
  }

  BSTR __fastcall get_SlideShowName(void)
  {
    BSTR SlideShowName = 0;
    OLECHECK(this->get_SlideShowName((BSTR*)&SlideShowName));
    return SlideShowName;
  }

  Office_xp::MsoTriState __fastcall get_SpeakerNotes(void)
  {
    Office_xp::MsoTriState SpeakerNotes;
    OLECHECK(this->get_SpeakerNotes((Office_xp::MsoTriState*)&SpeakerNotes));
    return SpeakerNotes;
  }

  BSTR __fastcall get_FileName(void)
  {
    BSTR FileName = 0;
    OLECHECK(this->get_FileName((BSTR*)&FileName));
    return FileName;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::PpHTMLVersion HTMLVersion = {read = get_HTMLVersion, write = set_HTMLVersion};
  __property   Powerpoint_xp::PpPublishSourceType SourceType = {read = get_SourceType, write = set_SourceType};
  __property   int             RangeStart = {read = get_RangeStart, write = set_RangeStart};
  __property   int             RangeEnd = {read = get_RangeEnd, write = set_RangeEnd};
  __property   BSTR            SlideShowName = {read = get_SlideShowName};
  __property   Office_xp::MsoTriState SpeakerNotes = {read = get_SpeakerNotes, write = set_SpeakerNotes};
  __property   BSTR            FileName = {read = get_FileName};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: MasterEvents
// Flags:     (16) Hidden
// GUID:      {914934D2-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface MasterEvents  : public IUnknown
{
public:
};

// *********************************************************************//
// Interface: _PowerRex
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D3-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface _PowerRex  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE OnAsfEncoderEvent(VARIANT erorCode/*[in]*/, 
                                                      VARIANT bstrErrorDesc/*[in]*/) = 0; // [2001]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Comments
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D4-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Comments  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, 
                                         Powerpoint_xp::Comment** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(float Left/*[in]*/, float Top/*[in]*/, BSTR Author/*[in]*/, 
                                        BSTR AuthorInitials/*[in]*/, BSTR Text/*[in]*/, 
                                        Powerpoint_xp::Comment** Add/*[out,retval]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Comment* __fastcall Item(int Index/*[in]*/)
  {
    Powerpoint_xp::Comment* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::Comment**)&Item));
    return Item;
  }

  Powerpoint_xp::Comment* __fastcall Add(float Left/*[in]*/, float Top/*[in]*/, BSTR Author/*[in]*/, 
                                         BSTR AuthorInitials/*[in]*/, BSTR Text/*[in]*/)
  {
    Powerpoint_xp::Comment* Add;
    OLECHECK(this->Add(Left, Top, Author, AuthorInitials, Text, (Powerpoint_xp::Comment**)&Add));
    return Add;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Comment
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D5-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Comment  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Author(BSTR* Author/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_AuthorInitials(BSTR* AuthorInitials/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* Text/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_DateTime(DATE* DateTime/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_AuthorIndex(int* AuthorIndex/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2010]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall get_Author(void)
  {
    BSTR Author = 0;
    OLECHECK(this->get_Author((BSTR*)&Author));
    return Author;
  }

  BSTR __fastcall get_AuthorInitials(void)
  {
    BSTR AuthorInitials = 0;
    OLECHECK(this->get_AuthorInitials((BSTR*)&AuthorInitials));
    return AuthorInitials;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR Text = 0;
    OLECHECK(this->get_Text((BSTR*)&Text));
    return Text;
  }

  DATE __fastcall get_DateTime(void)
  {
    DATE DateTime;
    OLECHECK(this->get_DateTime((DATE*)&DateTime));
    return DateTime;
  }

  int __fastcall get_AuthorIndex(void)
  {
    int AuthorIndex;
    OLECHECK(this->get_AuthorIndex((int*)&AuthorIndex));
    return AuthorIndex;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Author = {read = get_Author};
  __property   BSTR            AuthorInitials = {read = get_AuthorInitials};
  __property   BSTR            Text = {read = get_Text};
  __property   DATE            DateTime = {read = get_DateTime};
  __property   int             AuthorIndex = {read = get_AuthorIndex};
  __property   float           Left = {read = get_Left};
  __property   float           Top = {read = get_Top};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Designs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D6-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Designs  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT Index/*[in]*/, 
                                         Powerpoint_xp::Design** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR designName/*[in]*/, int Index/*[in,def,opt]*/, 
                                        Powerpoint_xp::Design** Add/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Load(BSTR TemplateName/*[in]*/, int Index/*[in,def,opt]*/, 
                                         Powerpoint_xp::Design** Load/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE Clone(Powerpoint_xp::Design* pOriginal/*[in]*/, 
                                          int Index/*[in,def,opt]*/, 
                                          Powerpoint_xp::Design** Clone/*[out,retval]*/) = 0; // [2005]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Design* __fastcall Item(VARIANT Index/*[in]*/)
  {
    Powerpoint_xp::Design* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::Design**)&Item));
    return Item;
  }

  Powerpoint_xp::Design* __fastcall Add(BSTR designName/*[in]*/, int Index/*[in,def,opt]*/)
  {
    Powerpoint_xp::Design* Add;
    OLECHECK(this->Add(designName, Index, (Powerpoint_xp::Design**)&Add));
    return Add;
  }

  Powerpoint_xp::Design* __fastcall Load(BSTR TemplateName/*[in]*/, int Index/*[in,def,opt]*/)
  {
    Powerpoint_xp::Design* Load;
    OLECHECK(this->Load(TemplateName, Index, (Powerpoint_xp::Design**)&Load));
    return Load;
  }

  Powerpoint_xp::Design* __fastcall Clone(Powerpoint_xp::Design* pOriginal/*[in]*/, 
                                          int Index/*[in,def,opt]*/)
  {
    Powerpoint_xp::Design* Clone;
    OLECHECK(this->Clone(pOriginal, Index, (Powerpoint_xp::Design**)&Clone));
    return Clone;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Design
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D7-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Design  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_SlideMaster(Powerpoint_xp::_Master** SlideMaster/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_TitleMaster(Powerpoint_xp::_Master** TitleMaster/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_HasTitleMaster(Office_xp::MsoTriState* HasTitleMaster/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE AddTitleMaster(Powerpoint_xp::_Master** TitleMaster/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Index(int* Index/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_Preserved(Office_xp::MsoTriState* Preserved/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_Preserved(Office_xp::MsoTriState Preserved/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE MoveTo(int toPos/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2011]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::_Master* __fastcall get_SlideMaster(void)
  {
    Powerpoint_xp::_Master* SlideMaster;
    OLECHECK(this->get_SlideMaster((Powerpoint_xp::_Master**)&SlideMaster));
    return SlideMaster;
  }

  Powerpoint_xp::_Master* __fastcall get_TitleMaster(void)
  {
    Powerpoint_xp::_Master* TitleMaster;
    OLECHECK(this->get_TitleMaster((Powerpoint_xp::_Master**)&TitleMaster));
    return TitleMaster;
  }

  Office_xp::MsoTriState __fastcall get_HasTitleMaster(void)
  {
    Office_xp::MsoTriState HasTitleMaster;
    OLECHECK(this->get_HasTitleMaster((Office_xp::MsoTriState*)&HasTitleMaster));
    return HasTitleMaster;
  }

  Powerpoint_xp::_Master* __fastcall AddTitleMaster(void)
  {
    Powerpoint_xp::_Master* TitleMaster;
    OLECHECK(this->AddTitleMaster((Powerpoint_xp::_Master**)&TitleMaster));
    return TitleMaster;
  }

  int __fastcall get_Index(void)
  {
    int Index;
    OLECHECK(this->get_Index((int*)&Index));
    return Index;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Office_xp::MsoTriState __fastcall get_Preserved(void)
  {
    Office_xp::MsoTriState Preserved;
    OLECHECK(this->get_Preserved((Office_xp::MsoTriState*)&Preserved));
    return Preserved;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::_Master* SlideMaster = {read = get_SlideMaster};
  __property   Powerpoint_xp::_Master* TitleMaster = {read = get_TitleMaster};
  __property   Office_xp::MsoTriState HasTitleMaster = {read = get_HasTitleMaster};
  __property   int             Index = {read = get_Index};
  __property   BSTR            Name = {read = get_Name};
  __property   Office_xp::MsoTriState Preserved = {read = get_Preserved, write = set_Preserved};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DiagramNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D8-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface DiagramNode  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE AddNode(Office_xp::MsoRelativeNodePosition Pos/*[in,def,opt]*/, 
                                            Office_xp::MsoDiagramNodeType NodeType/*[in,def,opt]*/, 
                                            Powerpoint_xp::DiagramNode** NewNode/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE MoveNode(Powerpoint_xp::DiagramNode* TargetNode/*[in]*/, 
                                             Office_xp::MsoRelativeNodePosition Pos/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE ReplaceNode(Powerpoint_xp::DiagramNode* TargetNode/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE SwapNode(Powerpoint_xp::DiagramNode* TargetNode/*[in]*/, 
                                             VARIANT_BOOL SwapChildren/*[in,def,opt]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE CloneNode(VARIANT_BOOL CopyChildren/*[in]*/, 
                                              Powerpoint_xp::DiagramNode* TargetNode/*[in]*/, 
                                              Office_xp::MsoRelativeNodePosition Pos/*[in,def,opt]*/, 
                                              Powerpoint_xp::DiagramNode** Node/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE TransferChildren(Powerpoint_xp::DiagramNode* ReceivingNode/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE NextNode(Powerpoint_xp::DiagramNode** NextNode/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE PrevNode(Powerpoint_xp::DiagramNode** PrevNode/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Children(Powerpoint_xp::DiagramNodeChildren** Children/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_Shape(Powerpoint_xp::Shape** Shape/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_Root(Powerpoint_xp::DiagramNode** Root/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_Diagram(Powerpoint_xp::Diagram** Diagram/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_Layout(Office_xp::MsoOrgChartLayoutType* Type/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_Layout(Office_xp::MsoOrgChartLayoutType Type/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_TextShape(Powerpoint_xp::Shape** Shape/*[out,retval]*/) = 0; // [106]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  Powerpoint_xp::DiagramNode* __fastcall AddNode(Office_xp::MsoRelativeNodePosition Pos/*[in,def,opt]*/, 
                                                 Office_xp::MsoDiagramNodeType NodeType/*[in,def,opt]*/)
  {
    Powerpoint_xp::DiagramNode* NewNode;
    OLECHECK(this->AddNode(Pos, NodeType, (Powerpoint_xp::DiagramNode**)&NewNode));
    return NewNode;
  }

  Powerpoint_xp::DiagramNode* __fastcall CloneNode(VARIANT_BOOL CopyChildren/*[in]*/, 
                                                   Powerpoint_xp::DiagramNode* TargetNode/*[in]*/, 
                                                   Office_xp::MsoRelativeNodePosition Pos/*[in,def,opt]*/)
  {
    Powerpoint_xp::DiagramNode* Node;
    OLECHECK(this->CloneNode(CopyChildren, TargetNode, Pos, (Powerpoint_xp::DiagramNode**)&Node));
    return Node;
  }

  Powerpoint_xp::DiagramNode* __fastcall NextNode(void)
  {
    Powerpoint_xp::DiagramNode* NextNode;
    OLECHECK(this->NextNode((Powerpoint_xp::DiagramNode**)&NextNode));
    return NextNode;
  }

  Powerpoint_xp::DiagramNode* __fastcall PrevNode(void)
  {
    Powerpoint_xp::DiagramNode* PrevNode;
    OLECHECK(this->PrevNode((Powerpoint_xp::DiagramNode**)&PrevNode));
    return PrevNode;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::DiagramNodeChildren* __fastcall get_Children(void)
  {
    Powerpoint_xp::DiagramNodeChildren* Children;
    OLECHECK(this->get_Children((Powerpoint_xp::DiagramNodeChildren**)&Children));
    return Children;
  }

  Powerpoint_xp::Shape* __fastcall get_Shape(void)
  {
    Powerpoint_xp::Shape* Shape;
    OLECHECK(this->get_Shape((Powerpoint_xp::Shape**)&Shape));
    return Shape;
  }

  Powerpoint_xp::DiagramNode* __fastcall get_Root(void)
  {
    Powerpoint_xp::DiagramNode* Root;
    OLECHECK(this->get_Root((Powerpoint_xp::DiagramNode**)&Root));
    return Root;
  }

  Powerpoint_xp::Diagram* __fastcall get_Diagram(void)
  {
    Powerpoint_xp::Diagram* Diagram;
    OLECHECK(this->get_Diagram((Powerpoint_xp::Diagram**)&Diagram));
    return Diagram;
  }

  Office_xp::MsoOrgChartLayoutType __fastcall get_Layout(void)
  {
    Office_xp::MsoOrgChartLayoutType Type;
    OLECHECK(this->get_Layout((Office_xp::MsoOrgChartLayoutType*)&Type));
    return Type;
  }

  Powerpoint_xp::Shape* __fastcall get_TextShape(void)
  {
    Powerpoint_xp::Shape* Shape;
    OLECHECK(this->get_TextShape((Powerpoint_xp::Shape**)&Shape));
    return Shape;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::DiagramNodeChildren* Children = {read = get_Children};
  __property   Powerpoint_xp::Shape* Shape = {read = get_Shape};
  __property   Powerpoint_xp::DiagramNode* Root = {read = get_Root};
  __property   Powerpoint_xp::Diagram* Diagram = {read = get_Diagram};
  __property   Office_xp::MsoOrgChartLayoutType Layout = {read = get_Layout, write = set_Layout};
  __property   Powerpoint_xp::Shape* TextShape = {read = get_TextShape};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DiagramNodeChildren
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface DiagramNodeChildren  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT Index/*[in]*/, 
                                         Powerpoint_xp::DiagramNode** Node/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE AddNode(VARIANT Index/*[in,def,opt]*/, 
                                            Office_xp::MsoDiagramNodeType NodeType/*[in,def,opt]*/, 
                                            Powerpoint_xp::DiagramNode** NewNode/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE SelectAll(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* iDiagramNodes/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_FirstChild(Powerpoint_xp::DiagramNode** First/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_LastChild(Powerpoint_xp::DiagramNode** Last/*[out,retval]*/) = 0; // [104]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunkEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunkEnum));
    return ppunkEnum;
  }

  Powerpoint_xp::DiagramNode* __fastcall Item(VARIANT Index/*[in]*/)
  {
    Powerpoint_xp::DiagramNode* Node;
    OLECHECK(this->Item(Index, (Powerpoint_xp::DiagramNode**)&Node));
    return Node;
  }

  Powerpoint_xp::DiagramNode* __fastcall AddNode(VARIANT Index/*[in,def,opt]*/, 
                                                 Office_xp::MsoDiagramNodeType NodeType/*[in,def,opt]*/)
  {
    Powerpoint_xp::DiagramNode* NewNode;
    OLECHECK(this->AddNode(Index, NodeType, (Powerpoint_xp::DiagramNode**)&NewNode));
    return NewNode;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Count(void)
  {
    int iDiagramNodes;
    OLECHECK(this->get_Count((int*)&iDiagramNodes));
    return iDiagramNodes;
  }

  Powerpoint_xp::DiagramNode* __fastcall get_FirstChild(void)
  {
    Powerpoint_xp::DiagramNode* First;
    OLECHECK(this->get_FirstChild((Powerpoint_xp::DiagramNode**)&First));
    return First;
  }

  Powerpoint_xp::DiagramNode* __fastcall get_LastChild(void)
  {
    Powerpoint_xp::DiagramNode* Last;
    OLECHECK(this->get_LastChild((Powerpoint_xp::DiagramNode**)&Last));
    return Last;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   Powerpoint_xp::DiagramNode* FirstChild = {read = get_FirstChild};
  __property   Powerpoint_xp::DiagramNode* LastChild = {read = get_LastChild};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DiagramNodes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934DA-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface DiagramNodes  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT Index/*[in]*/, 
                                         Powerpoint_xp::DiagramNode** ppdn/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE SelectAll(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* iDiagramNodes/*[out,retval]*/) = 0; // [101]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunkEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunkEnum));
    return ppunkEnum;
  }

  Powerpoint_xp::DiagramNode* __fastcall Item(VARIANT Index/*[in]*/)
  {
    Powerpoint_xp::DiagramNode* ppdn;
    OLECHECK(this->Item(Index, (Powerpoint_xp::DiagramNode**)&ppdn));
    return ppdn;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Count(void)
  {
    int iDiagramNodes;
    OLECHECK(this->get_Count((int*)&iDiagramNodes));
    return iDiagramNodes;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Diagram
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934DB-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Diagram  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Nodes(Powerpoint_xp::DiagramNodes** Nodes/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_xp::MsoDiagramType* Type/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_AutoLayout(Office_xp::MsoTriState* AutoLayout/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_AutoLayout(Office_xp::MsoTriState AutoLayout/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_Reverse(Office_xp::MsoTriState* Reverse/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_Reverse(Office_xp::MsoTriState Reverse/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_AutoFormat(Office_xp::MsoTriState* AutoFormat/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_AutoFormat(Office_xp::MsoTriState AutoFormat/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE Convert(Office_xp::MsoDiagramType Type/*[in]*/) = 0; // [10]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::DiagramNodes* __fastcall get_Nodes(void)
  {
    Powerpoint_xp::DiagramNodes* Nodes;
    OLECHECK(this->get_Nodes((Powerpoint_xp::DiagramNodes**)&Nodes));
    return Nodes;
  }

  Office_xp::MsoDiagramType __fastcall get_Type(void)
  {
    Office_xp::MsoDiagramType Type;
    OLECHECK(this->get_Type((Office_xp::MsoDiagramType*)&Type));
    return Type;
  }

  Office_xp::MsoTriState __fastcall get_AutoLayout(void)
  {
    Office_xp::MsoTriState AutoLayout;
    OLECHECK(this->get_AutoLayout((Office_xp::MsoTriState*)&AutoLayout));
    return AutoLayout;
  }

  Office_xp::MsoTriState __fastcall get_Reverse(void)
  {
    Office_xp::MsoTriState Reverse;
    OLECHECK(this->get_Reverse((Office_xp::MsoTriState*)&Reverse));
    return Reverse;
  }

  Office_xp::MsoTriState __fastcall get_AutoFormat(void)
  {
    Office_xp::MsoTriState AutoFormat;
    OLECHECK(this->get_AutoFormat((Office_xp::MsoTriState*)&AutoFormat));
    return AutoFormat;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::DiagramNodes* Nodes = {read = get_Nodes};
  __property   Office_xp::MsoDiagramType Type = {read = get_Type};
  __property   Office_xp::MsoTriState AutoLayout = {read = get_AutoLayout, write = set_AutoLayout};
  __property   Office_xp::MsoTriState Reverse = {read = get_Reverse, write = set_Reverse};
  __property   Office_xp::MsoTriState AutoFormat = {read = get_AutoFormat, write = set_AutoFormat};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TimeLine
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934DC-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface TimeLine  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_MainSequence(Powerpoint_xp::Sequence** MainSequence/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_InteractiveSequences(Powerpoint_xp::Sequences** InteractiveSequences/*[out,retval]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Sequence* __fastcall get_MainSequence(void)
  {
    Powerpoint_xp::Sequence* MainSequence;
    OLECHECK(this->get_MainSequence((Powerpoint_xp::Sequence**)&MainSequence));
    return MainSequence;
  }

  Powerpoint_xp::Sequences* __fastcall get_InteractiveSequences(void)
  {
    Powerpoint_xp::Sequences* InteractiveSequences;
    OLECHECK(this->get_InteractiveSequences((Powerpoint_xp::Sequences**)&InteractiveSequences));
    return InteractiveSequences;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Sequence* MainSequence = {read = get_MainSequence};
  __property   Powerpoint_xp::Sequences* InteractiveSequences = {read = get_InteractiveSequences};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Sequences
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934DD-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Sequences  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, 
                                         Powerpoint_xp::Sequence** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(int Index/*[in,def,opt]*/, 
                                        Powerpoint_xp::Sequence** Add/*[out,retval]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Sequence* __fastcall Item(int Index/*[in]*/)
  {
    Powerpoint_xp::Sequence* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::Sequence**)&Item));
    return Item;
  }

  Powerpoint_xp::Sequence* __fastcall Add(int Index/*[in,def,opt]*/)
  {
    Powerpoint_xp::Sequence* Add;
    OLECHECK(this->Add(Index, (Powerpoint_xp::Sequence**)&Add));
    return Add;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Sequence
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934DE-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Sequence  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, 
                                         Powerpoint_xp::Effect** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE AddEffect(Powerpoint_xp::Shape* Shape/*[in]*/, 
                                              Powerpoint_xp::MsoAnimEffect effectId/*[in]*/, 
                                              Powerpoint_xp::MsoAnimateByLevel Level/*[in,def,opt]*/, 
                                              Powerpoint_xp::MsoAnimTriggerType trigger/*[in,def,opt]*/, 
                                              int Index/*[in,def,opt]*/, 
                                              Powerpoint_xp::Effect** Effect/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Clone(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                          int Index/*[in,def,opt]*/, 
                                          Powerpoint_xp::Effect** Clone/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE FindFirstAnimationFor(Powerpoint_xp::Shape* Shape/*[in]*/, 
                                                          Powerpoint_xp::Effect** FindFirstAnimationFor/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE FindFirstAnimationForClick(int click/*[in]*/, 
                                                               Powerpoint_xp::Effect** FindFirstAnimationForClick/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE ConvertToBuildLevel(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                                        Powerpoint_xp::MsoAnimateByLevel Level/*[in]*/, 
                                                        Powerpoint_xp::Effect** ConvertToBuildLevel/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE ConvertToAfterEffect(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                                         Powerpoint_xp::MsoAnimAfterEffect After/*[in]*/, 
                                                         Office_xp::MsoRGBType DimColor/*[in,def,opt]*/, 
                                                         Powerpoint_xp::PpColorSchemeIndex DimSchemeColor/*[in,def,opt]*/, 
                                                         Powerpoint_xp::Effect** ConvertToAfterEffect/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE ConvertToAnimateBackground(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                                               Office_xp::MsoTriState AnimateBackground/*[in]*/, 
                                                               Powerpoint_xp::Effect** ConvertToAnimateBackground/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE ConvertToAnimateInReverse(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                                              Office_xp::MsoTriState animateInReverse/*[in]*/, 
                                                              Powerpoint_xp::Effect** ConvertToAnimateInReverse/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE ConvertToTextUnitEffect(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                                            Powerpoint_xp::MsoAnimTextUnitEffect unitEffect/*[in]*/, 
                                                            Powerpoint_xp::Effect** ConvertToTextUnitEffect/*[out,retval]*/) = 0; // [2011]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Effect* __fastcall Item(int Index/*[in]*/)
  {
    Powerpoint_xp::Effect* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::Effect**)&Item));
    return Item;
  }

  Powerpoint_xp::Effect* __fastcall AddEffect(Powerpoint_xp::Shape* Shape/*[in]*/, 
                                              Powerpoint_xp::MsoAnimEffect effectId/*[in]*/, 
                                              Powerpoint_xp::MsoAnimateByLevel Level/*[in,def,opt]*/, 
                                              Powerpoint_xp::MsoAnimTriggerType trigger/*[in,def,opt]*/, 
                                              int Index/*[in,def,opt]*/)
  {
    Powerpoint_xp::Effect* Effect;
    OLECHECK(this->AddEffect(Shape, effectId, Level, trigger, Index, (Powerpoint_xp::Effect**)&Effect));
    return Effect;
  }

  Powerpoint_xp::Effect* __fastcall Clone(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                          int Index/*[in,def,opt]*/)
  {
    Powerpoint_xp::Effect* Clone;
    OLECHECK(this->Clone(Effect, Index, (Powerpoint_xp::Effect**)&Clone));
    return Clone;
  }

  Powerpoint_xp::Effect* __fastcall FindFirstAnimationFor(Powerpoint_xp::Shape* Shape/*[in]*/)
  {
    Powerpoint_xp::Effect* FindFirstAnimationFor;
    OLECHECK(this->FindFirstAnimationFor(Shape, (Powerpoint_xp::Effect**)&FindFirstAnimationFor));
    return FindFirstAnimationFor;
  }

  Powerpoint_xp::Effect* __fastcall FindFirstAnimationForClick(int click/*[in]*/)
  {
    Powerpoint_xp::Effect* FindFirstAnimationForClick;
    OLECHECK(this->FindFirstAnimationForClick(click, (Powerpoint_xp::Effect**)&FindFirstAnimationForClick));
    return FindFirstAnimationForClick;
  }

  Powerpoint_xp::Effect* __fastcall ConvertToBuildLevel(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                                        Powerpoint_xp::MsoAnimateByLevel Level/*[in]*/)
  {
    Powerpoint_xp::Effect* ConvertToBuildLevel;
    OLECHECK(this->ConvertToBuildLevel(Effect, Level, (Powerpoint_xp::Effect**)&ConvertToBuildLevel));
    return ConvertToBuildLevel;
  }

  Powerpoint_xp::Effect* __fastcall ConvertToAfterEffect(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                                         Powerpoint_xp::MsoAnimAfterEffect After/*[in]*/, 
                                                         Office_xp::MsoRGBType DimColor/*[in,def,opt]*/, 
                                                         Powerpoint_xp::PpColorSchemeIndex DimSchemeColor/*[in,def,opt]*/)
  {
    Powerpoint_xp::Effect* ConvertToAfterEffect;
    OLECHECK(this->ConvertToAfterEffect(Effect, After, DimColor, DimSchemeColor, (Powerpoint_xp::Effect**)&ConvertToAfterEffect));
    return ConvertToAfterEffect;
  }

  Powerpoint_xp::Effect* __fastcall ConvertToAnimateBackground(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                                               Office_xp::MsoTriState AnimateBackground/*[in]*/)
  {
    Powerpoint_xp::Effect* ConvertToAnimateBackground;
    OLECHECK(this->ConvertToAnimateBackground(Effect, AnimateBackground, (Powerpoint_xp::Effect**)&ConvertToAnimateBackground));
    return ConvertToAnimateBackground;
  }

  Powerpoint_xp::Effect* __fastcall ConvertToAnimateInReverse(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                                              Office_xp::MsoTriState animateInReverse/*[in]*/)
  {
    Powerpoint_xp::Effect* ConvertToAnimateInReverse;
    OLECHECK(this->ConvertToAnimateInReverse(Effect, animateInReverse, (Powerpoint_xp::Effect**)&ConvertToAnimateInReverse));
    return ConvertToAnimateInReverse;
  }

  Powerpoint_xp::Effect* __fastcall ConvertToTextUnitEffect(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                                            Powerpoint_xp::MsoAnimTextUnitEffect unitEffect/*[in]*/)
  {
    Powerpoint_xp::Effect* ConvertToTextUnitEffect;
    OLECHECK(this->ConvertToTextUnitEffect(Effect, unitEffect, (Powerpoint_xp::Effect**)&ConvertToTextUnitEffect));
    return ConvertToTextUnitEffect;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Effect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934DF-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Effect  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Shape(Powerpoint_xp::Shape** Shape/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Shape(Powerpoint_xp::Shape* Shape/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE MoveTo(int toPos/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE MoveBefore(Powerpoint_xp::Effect* Effect/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE MoveAfter(Powerpoint_xp::Effect* Effect/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Index(int* Index/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_Timing(Powerpoint_xp::Timing** Timing/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_EffectType(Powerpoint_xp::MsoAnimEffect* EffectType/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_EffectType(Powerpoint_xp::MsoAnimEffect EffectType/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_EffectParameters(Powerpoint_xp::EffectParameters** EffectParameters/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_TextRangeStart(int* TextRangeStart/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_TextRangeLength(int* TextRangeLength/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_Paragraph(int* Paragraph/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE set_Paragraph(int Paragraph/*[in]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayName(BSTR* DisplayName/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE get_Exit(Office_xp::MsoTriState* Exit/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE set_Exit(Office_xp::MsoTriState Exit/*[in]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE get_Behaviors(Powerpoint_xp::AnimationBehaviors** Behaviors/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE get_EffectInformation(Powerpoint_xp::EffectInformation** EffectInformation/*[out,retval]*/) = 0; // [2018]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::Shape* __fastcall get_Shape(void)
  {
    Powerpoint_xp::Shape* Shape;
    OLECHECK(this->get_Shape((Powerpoint_xp::Shape**)&Shape));
    return Shape;
  }

  int __fastcall get_Index(void)
  {
    int Index;
    OLECHECK(this->get_Index((int*)&Index));
    return Index;
  }

  Powerpoint_xp::Timing* __fastcall get_Timing(void)
  {
    Powerpoint_xp::Timing* Timing;
    OLECHECK(this->get_Timing((Powerpoint_xp::Timing**)&Timing));
    return Timing;
  }

  Powerpoint_xp::MsoAnimEffect __fastcall get_EffectType(void)
  {
    Powerpoint_xp::MsoAnimEffect EffectType;
    OLECHECK(this->get_EffectType((Powerpoint_xp::MsoAnimEffect*)&EffectType));
    return EffectType;
  }

  Powerpoint_xp::EffectParameters* __fastcall get_EffectParameters(void)
  {
    Powerpoint_xp::EffectParameters* EffectParameters;
    OLECHECK(this->get_EffectParameters((Powerpoint_xp::EffectParameters**)&EffectParameters));
    return EffectParameters;
  }

  int __fastcall get_TextRangeStart(void)
  {
    int TextRangeStart;
    OLECHECK(this->get_TextRangeStart((int*)&TextRangeStart));
    return TextRangeStart;
  }

  int __fastcall get_TextRangeLength(void)
  {
    int TextRangeLength;
    OLECHECK(this->get_TextRangeLength((int*)&TextRangeLength));
    return TextRangeLength;
  }

  int __fastcall get_Paragraph(void)
  {
    int Paragraph;
    OLECHECK(this->get_Paragraph((int*)&Paragraph));
    return Paragraph;
  }

  BSTR __fastcall get_DisplayName(void)
  {
    BSTR DisplayName = 0;
    OLECHECK(this->get_DisplayName((BSTR*)&DisplayName));
    return DisplayName;
  }

  Office_xp::MsoTriState __fastcall get_Exit(void)
  {
    Office_xp::MsoTriState Exit;
    OLECHECK(this->get_Exit((Office_xp::MsoTriState*)&Exit));
    return Exit;
  }

  Powerpoint_xp::AnimationBehaviors* __fastcall get_Behaviors(void)
  {
    Powerpoint_xp::AnimationBehaviors* Behaviors;
    OLECHECK(this->get_Behaviors((Powerpoint_xp::AnimationBehaviors**)&Behaviors));
    return Behaviors;
  }

  Powerpoint_xp::EffectInformation* __fastcall get_EffectInformation(void)
  {
    Powerpoint_xp::EffectInformation* EffectInformation;
    OLECHECK(this->get_EffectInformation((Powerpoint_xp::EffectInformation**)&EffectInformation));
    return EffectInformation;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Shape* Shape = {read = get_Shape, write = set_Shape};
  __property   int             Index = {read = get_Index};
  __property   Powerpoint_xp::Timing* Timing = {read = get_Timing};
  __property   Powerpoint_xp::MsoAnimEffect EffectType = {read = get_EffectType, write = set_EffectType};
  __property   Powerpoint_xp::EffectParameters* EffectParameters = {read = get_EffectParameters};
  __property   int             TextRangeStart = {read = get_TextRangeStart};
  __property   int             TextRangeLength = {read = get_TextRangeLength};
  __property   int             Paragraph = {read = get_Paragraph, write = set_Paragraph};
  __property   BSTR            DisplayName = {read = get_DisplayName};
  __property   Office_xp::MsoTriState Exit = {read = get_Exit, write = set_Exit};
  __property   Powerpoint_xp::AnimationBehaviors* Behaviors = {read = get_Behaviors};
  __property   Powerpoint_xp::EffectInformation* EffectInformation = {read = get_EffectInformation};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Timing
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Timing  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Duration(float* Duration/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Duration(float Duration/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_TriggerType(Powerpoint_xp::MsoAnimTriggerType* TriggerType/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_TriggerType(Powerpoint_xp::MsoAnimTriggerType TriggerType/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_TriggerDelayTime(float* TriggerDelayTime/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_TriggerDelayTime(float TriggerDelayTime/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_TriggerShape(Powerpoint_xp::Shape** TriggerShape/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_TriggerShape(Powerpoint_xp::Shape* TriggerShape/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_RepeatCount(int* RepeatCount/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_RepeatCount(int RepeatCount/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_RepeatDuration(float* RepeatDuration/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_RepeatDuration(float RepeatDuration/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_Speed(float* Speed/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_Speed(float Speed/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_Accelerate(float* Accelerate/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_Accelerate(float Accelerate/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_Decelerate(float* Decelerate/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE set_Decelerate(float Decelerate/*[in]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_AutoReverse(Office_xp::MsoTriState* AutoReverse/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE set_AutoReverse(Office_xp::MsoTriState AutoReverse/*[in]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_SmoothStart(Office_xp::MsoTriState* SmoothStart/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE set_SmoothStart(Office_xp::MsoTriState SmoothStart/*[in]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_SmoothEnd(Office_xp::MsoTriState* SmoothEnd/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE set_SmoothEnd(Office_xp::MsoTriState SmoothEnd/*[in]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_RewindAtEnd(Office_xp::MsoTriState* RewindAtEnd/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE set_RewindAtEnd(Office_xp::MsoTriState RewindAtEnd/*[in]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE get_Restart(Powerpoint_xp::MsoAnimEffectRestart* Restart/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE set_Restart(Powerpoint_xp::MsoAnimEffectRestart Restart/*[in]*/) = 0; // [2016]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  float __fastcall get_Duration(void)
  {
    float Duration;
    OLECHECK(this->get_Duration((float*)&Duration));
    return Duration;
  }

  Powerpoint_xp::MsoAnimTriggerType __fastcall get_TriggerType(void)
  {
    Powerpoint_xp::MsoAnimTriggerType TriggerType;
    OLECHECK(this->get_TriggerType((Powerpoint_xp::MsoAnimTriggerType*)&TriggerType));
    return TriggerType;
  }

  float __fastcall get_TriggerDelayTime(void)
  {
    float TriggerDelayTime;
    OLECHECK(this->get_TriggerDelayTime((float*)&TriggerDelayTime));
    return TriggerDelayTime;
  }

  Powerpoint_xp::Shape* __fastcall get_TriggerShape(void)
  {
    Powerpoint_xp::Shape* TriggerShape;
    OLECHECK(this->get_TriggerShape((Powerpoint_xp::Shape**)&TriggerShape));
    return TriggerShape;
  }

  int __fastcall get_RepeatCount(void)
  {
    int RepeatCount;
    OLECHECK(this->get_RepeatCount((int*)&RepeatCount));
    return RepeatCount;
  }

  float __fastcall get_RepeatDuration(void)
  {
    float RepeatDuration;
    OLECHECK(this->get_RepeatDuration((float*)&RepeatDuration));
    return RepeatDuration;
  }

  float __fastcall get_Speed(void)
  {
    float Speed;
    OLECHECK(this->get_Speed((float*)&Speed));
    return Speed;
  }

  float __fastcall get_Accelerate(void)
  {
    float Accelerate;
    OLECHECK(this->get_Accelerate((float*)&Accelerate));
    return Accelerate;
  }

  float __fastcall get_Decelerate(void)
  {
    float Decelerate;
    OLECHECK(this->get_Decelerate((float*)&Decelerate));
    return Decelerate;
  }

  Office_xp::MsoTriState __fastcall get_AutoReverse(void)
  {
    Office_xp::MsoTriState AutoReverse;
    OLECHECK(this->get_AutoReverse((Office_xp::MsoTriState*)&AutoReverse));
    return AutoReverse;
  }

  Office_xp::MsoTriState __fastcall get_SmoothStart(void)
  {
    Office_xp::MsoTriState SmoothStart;
    OLECHECK(this->get_SmoothStart((Office_xp::MsoTriState*)&SmoothStart));
    return SmoothStart;
  }

  Office_xp::MsoTriState __fastcall get_SmoothEnd(void)
  {
    Office_xp::MsoTriState SmoothEnd;
    OLECHECK(this->get_SmoothEnd((Office_xp::MsoTriState*)&SmoothEnd));
    return SmoothEnd;
  }

  Office_xp::MsoTriState __fastcall get_RewindAtEnd(void)
  {
    Office_xp::MsoTriState RewindAtEnd;
    OLECHECK(this->get_RewindAtEnd((Office_xp::MsoTriState*)&RewindAtEnd));
    return RewindAtEnd;
  }

  Powerpoint_xp::MsoAnimEffectRestart __fastcall get_Restart(void)
  {
    Powerpoint_xp::MsoAnimEffectRestart Restart;
    OLECHECK(this->get_Restart((Powerpoint_xp::MsoAnimEffectRestart*)&Restart));
    return Restart;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Duration = {read = get_Duration, write = set_Duration};
  __property   Powerpoint_xp::MsoAnimTriggerType TriggerType = {read = get_TriggerType, write = set_TriggerType};
  __property   float           TriggerDelayTime = {read = get_TriggerDelayTime, write = set_TriggerDelayTime};
  __property   Powerpoint_xp::Shape* TriggerShape = {read = get_TriggerShape, write = set_TriggerShape};
  __property   int             RepeatCount = {read = get_RepeatCount, write = set_RepeatCount};
  __property   float           RepeatDuration = {read = get_RepeatDuration, write = set_RepeatDuration};
  __property   float           Speed = {read = get_Speed, write = set_Speed};
  __property   float           Accelerate = {read = get_Accelerate, write = set_Accelerate};
  __property   float           Decelerate = {read = get_Decelerate, write = set_Decelerate};
  __property   Office_xp::MsoTriState AutoReverse = {read = get_AutoReverse, write = set_AutoReverse};
  __property   Office_xp::MsoTriState SmoothStart = {read = get_SmoothStart, write = set_SmoothStart};
  __property   Office_xp::MsoTriState SmoothEnd = {read = get_SmoothEnd, write = set_SmoothEnd};
  __property   Office_xp::MsoTriState RewindAtEnd = {read = get_RewindAtEnd, write = set_RewindAtEnd};
  __property   Powerpoint_xp::MsoAnimEffectRestart Restart = {read = get_Restart, write = set_Restart};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: EffectParameters
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E1-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface EffectParameters  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Direction(Powerpoint_xp::MsoAnimDirection* Direction/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Direction(Powerpoint_xp::MsoAnimDirection Direction/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Amount(float* Amount/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Amount(float Amount/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Size(float* Size/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_Size(float Size/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Color2(Powerpoint_xp::ColorFormat** Color2/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Relative(Office_xp::MsoTriState* Relative/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_Relative(Office_xp::MsoTriState Relative/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* FontName/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR FontName/*[in]*/) = 0; // [2008]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::MsoAnimDirection __fastcall get_Direction(void)
  {
    Powerpoint_xp::MsoAnimDirection Direction;
    OLECHECK(this->get_Direction((Powerpoint_xp::MsoAnimDirection*)&Direction));
    return Direction;
  }

  float __fastcall get_Amount(void)
  {
    float Amount;
    OLECHECK(this->get_Amount((float*)&Amount));
    return Amount;
  }

  float __fastcall get_Size(void)
  {
    float Size;
    OLECHECK(this->get_Size((float*)&Size));
    return Size;
  }

  Powerpoint_xp::ColorFormat* __fastcall get_Color2(void)
  {
    Powerpoint_xp::ColorFormat* Color2;
    OLECHECK(this->get_Color2((Powerpoint_xp::ColorFormat**)&Color2));
    return Color2;
  }

  Office_xp::MsoTriState __fastcall get_Relative(void)
  {
    Office_xp::MsoTriState Relative;
    OLECHECK(this->get_Relative((Office_xp::MsoTriState*)&Relative));
    return Relative;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR FontName = 0;
    OLECHECK(this->get_FontName((BSTR*)&FontName));
    return FontName;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::MsoAnimDirection Direction = {read = get_Direction, write = set_Direction};
  __property   float           Amount = {read = get_Amount, write = set_Amount};
  __property   float           Size = {read = get_Size, write = set_Size};
  __property   Powerpoint_xp::ColorFormat* Color2 = {read = get_Color2};
  __property   Office_xp::MsoTriState Relative = {read = get_Relative, write = set_Relative};
  __property   BSTR            FontName = {read = get_FontName};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: EffectInformation
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E2-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface EffectInformation  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_AfterEffect(Powerpoint_xp::MsoAnimAfterEffect* AfterEffect/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_AnimateBackground(Office_xp::MsoTriState* AnimateBackground/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_AnimateTextInReverse(Office_xp::MsoTriState* AnimateTextInReverse/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_BuildByLevelEffect(Powerpoint_xp::MsoAnimateByLevel* BuildByLevelEffect/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Dim(Powerpoint_xp::ColorFormat** Dim/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_PlaySettings(Powerpoint_xp::PlaySettings** PlaySettings/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_SoundEffect(Powerpoint_xp::SoundEffect** SoundEffect/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_TextUnitEffect(Powerpoint_xp::MsoAnimTextUnitEffect* TextUnitEffect/*[out,retval]*/) = 0; // [2010]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::MsoAnimAfterEffect __fastcall get_AfterEffect(void)
  {
    Powerpoint_xp::MsoAnimAfterEffect AfterEffect;
    OLECHECK(this->get_AfterEffect((Powerpoint_xp::MsoAnimAfterEffect*)&AfterEffect));
    return AfterEffect;
  }

  Office_xp::MsoTriState __fastcall get_AnimateBackground(void)
  {
    Office_xp::MsoTriState AnimateBackground;
    OLECHECK(this->get_AnimateBackground((Office_xp::MsoTriState*)&AnimateBackground));
    return AnimateBackground;
  }

  Office_xp::MsoTriState __fastcall get_AnimateTextInReverse(void)
  {
    Office_xp::MsoTriState AnimateTextInReverse;
    OLECHECK(this->get_AnimateTextInReverse((Office_xp::MsoTriState*)&AnimateTextInReverse));
    return AnimateTextInReverse;
  }

  Powerpoint_xp::MsoAnimateByLevel __fastcall get_BuildByLevelEffect(void)
  {
    Powerpoint_xp::MsoAnimateByLevel BuildByLevelEffect;
    OLECHECK(this->get_BuildByLevelEffect((Powerpoint_xp::MsoAnimateByLevel*)&BuildByLevelEffect));
    return BuildByLevelEffect;
  }

  Powerpoint_xp::ColorFormat* __fastcall get_Dim(void)
  {
    Powerpoint_xp::ColorFormat* Dim;
    OLECHECK(this->get_Dim((Powerpoint_xp::ColorFormat**)&Dim));
    return Dim;
  }

  Powerpoint_xp::PlaySettings* __fastcall get_PlaySettings(void)
  {
    Powerpoint_xp::PlaySettings* PlaySettings;
    OLECHECK(this->get_PlaySettings((Powerpoint_xp::PlaySettings**)&PlaySettings));
    return PlaySettings;
  }

  Powerpoint_xp::SoundEffect* __fastcall get_SoundEffect(void)
  {
    Powerpoint_xp::SoundEffect* SoundEffect;
    OLECHECK(this->get_SoundEffect((Powerpoint_xp::SoundEffect**)&SoundEffect));
    return SoundEffect;
  }

  Powerpoint_xp::MsoAnimTextUnitEffect __fastcall get_TextUnitEffect(void)
  {
    Powerpoint_xp::MsoAnimTextUnitEffect TextUnitEffect;
    OLECHECK(this->get_TextUnitEffect((Powerpoint_xp::MsoAnimTextUnitEffect*)&TextUnitEffect));
    return TextUnitEffect;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::MsoAnimAfterEffect AfterEffect = {read = get_AfterEffect};
  __property   Office_xp::MsoTriState AnimateBackground = {read = get_AnimateBackground};
  __property   Office_xp::MsoTriState AnimateTextInReverse = {read = get_AnimateTextInReverse};
  __property   Powerpoint_xp::MsoAnimateByLevel BuildByLevelEffect = {read = get_BuildByLevelEffect};
  __property   Powerpoint_xp::ColorFormat* Dim = {read = get_Dim};
  __property   Powerpoint_xp::PlaySettings* PlaySettings = {read = get_PlaySettings};
  __property   Powerpoint_xp::SoundEffect* SoundEffect = {read = get_SoundEffect};
  __property   Powerpoint_xp::MsoAnimTextUnitEffect TextUnitEffect = {read = get_TextUnitEffect};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: AnimationBehaviors
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E3-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface AnimationBehaviors  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, 
                                         Powerpoint_xp::AnimationBehavior** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(Powerpoint_xp::MsoAnimType Type/*[in]*/, 
                                        int Index/*[in,def,opt]*/, 
                                        Powerpoint_xp::AnimationBehavior** Add/*[out,retval]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::AnimationBehavior* __fastcall Item(int Index/*[in]*/)
  {
    Powerpoint_xp::AnimationBehavior* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::AnimationBehavior**)&Item));
    return Item;
  }

  Powerpoint_xp::AnimationBehavior* __fastcall Add(Powerpoint_xp::MsoAnimType Type/*[in]*/, 
                                                   int Index/*[in,def,opt]*/)
  {
    Powerpoint_xp::AnimationBehavior* Add;
    OLECHECK(this->Add(Type, Index, (Powerpoint_xp::AnimationBehavior**)&Add));
    return Add;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: AnimationBehavior
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E4-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface AnimationBehavior  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Additive(Powerpoint_xp::MsoAnimAdditive* Additive/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Additive(Powerpoint_xp::MsoAnimAdditive Additive/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Accumulate(Powerpoint_xp::MsoAnimAccumulate* Accumulate/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Accumulate(Powerpoint_xp::MsoAnimAccumulate Accumulate/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Powerpoint_xp::MsoAnimType* Type/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Powerpoint_xp::MsoAnimType Type/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_MotionEffect(Powerpoint_xp::MotionEffect** MotionEffect/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_ColorEffect(Powerpoint_xp::ColorEffect** ColorEffect/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_ScaleEffect(Powerpoint_xp::ScaleEffect** ScaleEffect/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_RotationEffect(Powerpoint_xp::RotationEffect** RotationEffect/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_PropertyEffect(Powerpoint_xp::PropertyEffect** PropertyEffect/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_Timing(Powerpoint_xp::Timing** Timing/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_CommandEffect(Powerpoint_xp::CommandEffect** CommandEffect/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_FilterEffect(Powerpoint_xp::FilterEffect** FilterEffect/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_SetEffect(Powerpoint_xp::SetEffect** SetEffect/*[out,retval]*/) = 0; // [2015]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::MsoAnimAdditive __fastcall get_Additive(void)
  {
    Powerpoint_xp::MsoAnimAdditive Additive;
    OLECHECK(this->get_Additive((Powerpoint_xp::MsoAnimAdditive*)&Additive));
    return Additive;
  }

  Powerpoint_xp::MsoAnimAccumulate __fastcall get_Accumulate(void)
  {
    Powerpoint_xp::MsoAnimAccumulate Accumulate;
    OLECHECK(this->get_Accumulate((Powerpoint_xp::MsoAnimAccumulate*)&Accumulate));
    return Accumulate;
  }

  Powerpoint_xp::MsoAnimType __fastcall get_Type(void)
  {
    Powerpoint_xp::MsoAnimType Type;
    OLECHECK(this->get_Type((Powerpoint_xp::MsoAnimType*)&Type));
    return Type;
  }

  Powerpoint_xp::MotionEffect* __fastcall get_MotionEffect(void)
  {
    Powerpoint_xp::MotionEffect* MotionEffect;
    OLECHECK(this->get_MotionEffect((Powerpoint_xp::MotionEffect**)&MotionEffect));
    return MotionEffect;
  }

  Powerpoint_xp::ColorEffect* __fastcall get_ColorEffect(void)
  {
    Powerpoint_xp::ColorEffect* ColorEffect;
    OLECHECK(this->get_ColorEffect((Powerpoint_xp::ColorEffect**)&ColorEffect));
    return ColorEffect;
  }

  Powerpoint_xp::ScaleEffect* __fastcall get_ScaleEffect(void)
  {
    Powerpoint_xp::ScaleEffect* ScaleEffect;
    OLECHECK(this->get_ScaleEffect((Powerpoint_xp::ScaleEffect**)&ScaleEffect));
    return ScaleEffect;
  }

  Powerpoint_xp::RotationEffect* __fastcall get_RotationEffect(void)
  {
    Powerpoint_xp::RotationEffect* RotationEffect;
    OLECHECK(this->get_RotationEffect((Powerpoint_xp::RotationEffect**)&RotationEffect));
    return RotationEffect;
  }

  Powerpoint_xp::PropertyEffect* __fastcall get_PropertyEffect(void)
  {
    Powerpoint_xp::PropertyEffect* PropertyEffect;
    OLECHECK(this->get_PropertyEffect((Powerpoint_xp::PropertyEffect**)&PropertyEffect));
    return PropertyEffect;
  }

  Powerpoint_xp::Timing* __fastcall get_Timing(void)
  {
    Powerpoint_xp::Timing* Timing;
    OLECHECK(this->get_Timing((Powerpoint_xp::Timing**)&Timing));
    return Timing;
  }

  Powerpoint_xp::CommandEffect* __fastcall get_CommandEffect(void)
  {
    Powerpoint_xp::CommandEffect* CommandEffect;
    OLECHECK(this->get_CommandEffect((Powerpoint_xp::CommandEffect**)&CommandEffect));
    return CommandEffect;
  }

  Powerpoint_xp::FilterEffect* __fastcall get_FilterEffect(void)
  {
    Powerpoint_xp::FilterEffect* FilterEffect;
    OLECHECK(this->get_FilterEffect((Powerpoint_xp::FilterEffect**)&FilterEffect));
    return FilterEffect;
  }

  Powerpoint_xp::SetEffect* __fastcall get_SetEffect(void)
  {
    Powerpoint_xp::SetEffect* SetEffect;
    OLECHECK(this->get_SetEffect((Powerpoint_xp::SetEffect**)&SetEffect));
    return SetEffect;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::MsoAnimAdditive Additive = {read = get_Additive, write = set_Additive};
  __property   Powerpoint_xp::MsoAnimAccumulate Accumulate = {read = get_Accumulate, write = set_Accumulate};
  __property   Powerpoint_xp::MsoAnimType Type = {read = get_Type, write = set_Type};
  __property   Powerpoint_xp::MotionEffect* MotionEffect = {read = get_MotionEffect};
  __property   Powerpoint_xp::ColorEffect* ColorEffect = {read = get_ColorEffect};
  __property   Powerpoint_xp::ScaleEffect* ScaleEffect = {read = get_ScaleEffect};
  __property   Powerpoint_xp::RotationEffect* RotationEffect = {read = get_RotationEffect};
  __property   Powerpoint_xp::PropertyEffect* PropertyEffect = {read = get_PropertyEffect};
  __property   Powerpoint_xp::Timing* Timing = {read = get_Timing};
  __property   Powerpoint_xp::CommandEffect* CommandEffect = {read = get_CommandEffect};
  __property   Powerpoint_xp::FilterEffect* FilterEffect = {read = get_FilterEffect};
  __property   Powerpoint_xp::SetEffect* SetEffect = {read = get_SetEffect};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: MotionEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E5-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface MotionEffect  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_ByX(float* ByX/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_ByX(float ByX/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_ByY(float* ByY/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_ByY(float ByY/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_FromX(float* FromX/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_FromX(float FromX/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_FromY(float* FromY/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_FromY(float FromY/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_ToX(float* ToX/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_ToX(float ToX/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_ToY(float* ToY/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_ToY(float ToY/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_Path(BSTR* Path/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_Path(BSTR Path/*[in]*/) = 0; // [2009]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  float __fastcall get_ByX(void)
  {
    float ByX;
    OLECHECK(this->get_ByX((float*)&ByX));
    return ByX;
  }

  float __fastcall get_ByY(void)
  {
    float ByY;
    OLECHECK(this->get_ByY((float*)&ByY));
    return ByY;
  }

  float __fastcall get_FromX(void)
  {
    float FromX;
    OLECHECK(this->get_FromX((float*)&FromX));
    return FromX;
  }

  float __fastcall get_FromY(void)
  {
    float FromY;
    OLECHECK(this->get_FromY((float*)&FromY));
    return FromY;
  }

  float __fastcall get_ToX(void)
  {
    float ToX;
    OLECHECK(this->get_ToX((float*)&ToX));
    return ToX;
  }

  float __fastcall get_ToY(void)
  {
    float ToY;
    OLECHECK(this->get_ToY((float*)&ToY));
    return ToY;
  }

  BSTR __fastcall get_Path(void)
  {
    BSTR Path = 0;
    OLECHECK(this->get_Path((BSTR*)&Path));
    return Path;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           ByX = {read = get_ByX, write = set_ByX};
  __property   float           ByY = {read = get_ByY, write = set_ByY};
  __property   float           FromX = {read = get_FromX, write = set_FromX};
  __property   float           FromY = {read = get_FromY, write = set_FromY};
  __property   float           ToX = {read = get_ToX, write = set_ToX};
  __property   float           ToY = {read = get_ToY, write = set_ToY};
  __property   BSTR            Path = {read = get_Path};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ColorEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E6-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ColorEffect  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_By(Powerpoint_xp::ColorFormat** By/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_From(Powerpoint_xp::ColorFormat** From/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_To(Powerpoint_xp::ColorFormat** To/*[out,retval]*/) = 0; // [2005]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::ColorFormat* __fastcall get_By(void)
  {
    Powerpoint_xp::ColorFormat* By;
    OLECHECK(this->get_By((Powerpoint_xp::ColorFormat**)&By));
    return By;
  }

  Powerpoint_xp::ColorFormat* __fastcall get_From(void)
  {
    Powerpoint_xp::ColorFormat* From;
    OLECHECK(this->get_From((Powerpoint_xp::ColorFormat**)&From));
    return From;
  }

  Powerpoint_xp::ColorFormat* __fastcall get_To(void)
  {
    Powerpoint_xp::ColorFormat* To;
    OLECHECK(this->get_To((Powerpoint_xp::ColorFormat**)&To));
    return To;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ColorFormat* By = {read = get_By};
  __property   Powerpoint_xp::ColorFormat* From = {read = get_From};
  __property   Powerpoint_xp::ColorFormat* To = {read = get_To};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ScaleEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E7-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ScaleEffect  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_ByX(float* ByX/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_ByX(float ByX/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_ByY(float* ByY/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_ByY(float ByY/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_FromX(float* FromX/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_FromX(float FromX/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_FromY(float* FromY/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_FromY(float FromY/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_ToX(float* ToX/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_ToX(float ToX/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_ToY(float* ToY/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_ToY(float ToY/*[in]*/) = 0; // [2008]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  float __fastcall get_ByX(void)
  {
    float ByX;
    OLECHECK(this->get_ByX((float*)&ByX));
    return ByX;
  }

  float __fastcall get_ByY(void)
  {
    float ByY;
    OLECHECK(this->get_ByY((float*)&ByY));
    return ByY;
  }

  float __fastcall get_FromX(void)
  {
    float FromX;
    OLECHECK(this->get_FromX((float*)&FromX));
    return FromX;
  }

  float __fastcall get_FromY(void)
  {
    float FromY;
    OLECHECK(this->get_FromY((float*)&FromY));
    return FromY;
  }

  float __fastcall get_ToX(void)
  {
    float ToX;
    OLECHECK(this->get_ToX((float*)&ToX));
    return ToX;
  }

  float __fastcall get_ToY(void)
  {
    float ToY;
    OLECHECK(this->get_ToY((float*)&ToY));
    return ToY;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           ByX = {read = get_ByX, write = set_ByX};
  __property   float           ByY = {read = get_ByY, write = set_ByY};
  __property   float           FromX = {read = get_FromX, write = set_FromX};
  __property   float           FromY = {read = get_FromY, write = set_FromY};
  __property   float           ToX = {read = get_ToX, write = set_ToX};
  __property   float           ToY = {read = get_ToY, write = set_ToY};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: RotationEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E8-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface RotationEffect  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_By(float* By/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_By(float By/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_From(float* From/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_From(float From/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_To(float* To/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_To(float To/*[in]*/) = 0; // [2005]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  float __fastcall get_By(void)
  {
    float By;
    OLECHECK(this->get_By((float*)&By));
    return By;
  }

  float __fastcall get_From(void)
  {
    float From;
    OLECHECK(this->get_From((float*)&From));
    return From;
  }

  float __fastcall get_To(void)
  {
    float To;
    OLECHECK(this->get_To((float*)&To));
    return To;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           By = {read = get_By, write = set_By};
  __property   float           From = {read = get_From, write = set_From};
  __property   float           To = {read = get_To, write = set_To};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PropertyEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PropertyEffect  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Property(Powerpoint_xp::MsoAnimProperty* Property/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Property(Powerpoint_xp::MsoAnimProperty Property/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Points(Powerpoint_xp::AnimationPoints** Points/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_From(VARIANT* From/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_From(VARIANT From/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_To(VARIANT* To/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_To(VARIANT To/*[in]*/) = 0; // [2006]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::MsoAnimProperty __fastcall get_Property(void)
  {
    Powerpoint_xp::MsoAnimProperty Property;
    OLECHECK(this->get_Property((Powerpoint_xp::MsoAnimProperty*)&Property));
    return Property;
  }

  Powerpoint_xp::AnimationPoints* __fastcall get_Points(void)
  {
    Powerpoint_xp::AnimationPoints* Points;
    OLECHECK(this->get_Points((Powerpoint_xp::AnimationPoints**)&Points));
    return Points;
  }

  VARIANT __fastcall get_From(void)
  {
    VARIANT From;
    OLECHECK(this->get_From((VARIANT*)&From));
    return From;
  }

  VARIANT __fastcall get_To(void)
  {
    VARIANT To;
    OLECHECK(this->get_To((VARIANT*)&To));
    return To;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::MsoAnimProperty Property = {read = get_Property, write = set_Property};
  __property   Powerpoint_xp::AnimationPoints* Points = {read = get_Points};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: AnimationPoints
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934EA-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface AnimationPoints  : public Powerpoint_xp::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Index/*[in]*/, 
                                         Powerpoint_xp::AnimationPoint** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(int Index/*[in,def,opt]*/, 
                                        Powerpoint_xp::AnimationPoint** Add/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Smooth(Office_xp::MsoTriState* Smooth/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Smooth(Office_xp::MsoTriState Smooth/*[in]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::AnimationPoint* __fastcall Item(int Index/*[in]*/)
  {
    Powerpoint_xp::AnimationPoint* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::AnimationPoint**)&Item));
    return Item;
  }

  Powerpoint_xp::AnimationPoint* __fastcall Add(int Index/*[in,def,opt]*/)
  {
    Powerpoint_xp::AnimationPoint* Add;
    OLECHECK(this->Add(Index, (Powerpoint_xp::AnimationPoint**)&Add));
    return Add;
  }

  Office_xp::MsoTriState __fastcall get_Smooth(void)
  {
    Office_xp::MsoTriState Smooth;
    OLECHECK(this->get_Smooth((Office_xp::MsoTriState*)&Smooth));
    return Smooth;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoTriState Smooth = {read = get_Smooth, write = set_Smooth};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: AnimationPoint
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934EB-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface AnimationPoint  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Time(float* Time/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Time(float Time/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* Value/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_Value(VARIANT Value/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Formula(BSTR* Formula/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_Formula(BSTR Formula/*[in]*/) = 0; // [2006]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  float __fastcall get_Time(void)
  {
    float Time;
    OLECHECK(this->get_Time((float*)&Time));
    return Time;
  }

  VARIANT __fastcall get_Value(void)
  {
    VARIANT Value;
    OLECHECK(this->get_Value((VARIANT*)&Value));
    return Value;
  }

  BSTR __fastcall get_Formula(void)
  {
    BSTR Formula = 0;
    OLECHECK(this->get_Formula((BSTR*)&Formula));
    return Formula;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Time = {read = get_Time, write = set_Time};
  __property   BSTR            Formula = {read = get_Formula};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: CanvasShapes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934EC-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface CanvasShapes  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* Count/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT Index/*[in]*/, 
                                         Powerpoint_xp::Shape** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE AddCallout(Office_xp::MsoCalloutType Type/*[in]*/, 
                                               float Left/*[in]*/, float Top/*[in]*/, 
                                               float Width/*[in]*/, float Height/*[in]*/, 
                                               Powerpoint_xp::Shape** Callout/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE AddConnector(Office_xp::MsoConnectorType Type/*[in]*/, 
                                                 float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                 float EndX/*[in]*/, float EndY/*[in]*/, 
                                                 Powerpoint_xp::Shape** Connector/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE AddCurve(VARIANT SafeArrayOfPoints/*[in]*/, 
                                             Powerpoint_xp::Shape** Curve/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE AddLabel(Office_xp::MsoTextOrientation Orientation/*[in]*/, 
                                             float Left/*[in]*/, float Top/*[in]*/, 
                                             float Width/*[in]*/, float Height/*[in]*/, 
                                             Powerpoint_xp::Shape** Label/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                            float EndX/*[in]*/, float EndY/*[in]*/, 
                                            Powerpoint_xp::Shape** Line/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE AddPicture(BSTR FileName/*[in]*/, 
                                               Office_xp::MsoTriState LinkToFile/*[in]*/, 
                                               Office_xp::MsoTriState SaveWithDocument/*[in]*/, 
                                               float Left/*[in]*/, float Top/*[in]*/, 
                                               float Width/*[in,def,opt]*/, 
                                               float Height/*[in,def,opt]*/, 
                                               Powerpoint_xp::Shape** Picture/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE AddPolyline(VARIANT SafeArrayOfPoints/*[in]*/, 
                                                Powerpoint_xp::Shape** Polyline/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE AddShape(Office_xp::MsoAutoShapeType Type/*[in]*/, 
                                             float Left/*[in]*/, float Top/*[in]*/, 
                                             float Width/*[in]*/, float Height/*[in]*/, 
                                             Powerpoint_xp::Shape** Shape/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE AddTextEffect(Office_xp::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                                                  BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                                  float FontSize/*[in]*/, 
                                                  Office_xp::MsoTriState FontBold/*[in]*/, 
                                                  Office_xp::MsoTriState FontItalic/*[in]*/, 
                                                  float Left/*[in]*/, float Top/*[in]*/, 
                                                  Powerpoint_xp::Shape** TextEffect/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE AddTextbox(Office_xp::MsoTextOrientation Orientation/*[in]*/, 
                                               float Left/*[in]*/, float Top/*[in]*/, 
                                               float Width/*[in]*/, float Height/*[in]*/, 
                                               Powerpoint_xp::Shape** Textbox/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE BuildFreeform(Office_xp::MsoEditingType EditingType/*[in]*/, 
                                                  float X1/*[in]*/, float Y1/*[in]*/, 
                                                  Powerpoint_xp::FreeformBuilder** FreeformBuilder/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE Range(VARIANT Index/*[in]*/, 
                                          Powerpoint_xp::ShapeRange** Range/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE SelectAll(void) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Background(Powerpoint_xp::Shape** Background/*[out,retval]*/) = 0; // [100]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Count(void)
  {
    int Count;
    OLECHECK(this->get_Count((int*)&Count));
    return Count;
  }

  Powerpoint_xp::Shape* __fastcall Item(VARIANT Index/*[in]*/)
  {
    Powerpoint_xp::Shape* Item;
    OLECHECK(this->Item(Index, (Powerpoint_xp::Shape**)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }

  Powerpoint_xp::Shape* __fastcall AddCallout(Office_xp::MsoCalloutType Type/*[in]*/, 
                                              float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_xp::Shape* Callout;
    OLECHECK(this->AddCallout(Type, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Callout));
    return Callout;
  }

  Powerpoint_xp::Shape* __fastcall AddConnector(Office_xp::MsoConnectorType Type/*[in]*/, 
                                                float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                float EndX/*[in]*/, float EndY/*[in]*/)
  {
    Powerpoint_xp::Shape* Connector;
    OLECHECK(this->AddConnector(Type, BeginX, BeginY, EndX, EndY, (Powerpoint_xp::Shape**)&Connector));
    return Connector;
  }

  Powerpoint_xp::Shape* __fastcall AddCurve(VARIANT SafeArrayOfPoints/*[in]*/)
  {
    Powerpoint_xp::Shape* Curve;
    OLECHECK(this->AddCurve(SafeArrayOfPoints, (Powerpoint_xp::Shape**)&Curve));
    return Curve;
  }

  Powerpoint_xp::Shape* __fastcall AddLabel(Office_xp::MsoTextOrientation Orientation/*[in]*/, 
                                            float Left/*[in]*/, float Top/*[in]*/, 
                                            float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_xp::Shape* Label;
    OLECHECK(this->AddLabel(Orientation, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Label));
    return Label;
  }

  Powerpoint_xp::Shape* __fastcall AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                           float EndX/*[in]*/, float EndY/*[in]*/)
  {
    Powerpoint_xp::Shape* Line;
    OLECHECK(this->AddLine(BeginX, BeginY, EndX, EndY, (Powerpoint_xp::Shape**)&Line));
    return Line;
  }

  Powerpoint_xp::Shape* __fastcall AddPicture(BSTR FileName/*[in]*/, 
                                              Office_xp::MsoTriState LinkToFile/*[in]*/, 
                                              Office_xp::MsoTriState SaveWithDocument/*[in]*/, 
                                              float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in,def,opt]*/, 
                                              float Height/*[in,def,opt]*/)
  {
    Powerpoint_xp::Shape* Picture;
    OLECHECK(this->AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Picture));
    return Picture;
  }

  Powerpoint_xp::Shape* __fastcall AddPolyline(VARIANT SafeArrayOfPoints/*[in]*/)
  {
    Powerpoint_xp::Shape* Polyline;
    OLECHECK(this->AddPolyline(SafeArrayOfPoints, (Powerpoint_xp::Shape**)&Polyline));
    return Polyline;
  }

  Powerpoint_xp::Shape* __fastcall AddShape(Office_xp::MsoAutoShapeType Type/*[in]*/, 
                                            float Left/*[in]*/, float Top/*[in]*/, 
                                            float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_xp::Shape* Shape;
    OLECHECK(this->AddShape(Type, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Shape));
    return Shape;
  }

  Powerpoint_xp::Shape* __fastcall AddTextEffect(Office_xp::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                                                 BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                                 float FontSize/*[in]*/, 
                                                 Office_xp::MsoTriState FontBold/*[in]*/, 
                                                 Office_xp::MsoTriState FontItalic/*[in]*/, 
                                                 float Left/*[in]*/, float Top/*[in]*/)
  {
    Powerpoint_xp::Shape* TextEffect;
    OLECHECK(this->AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, 
                                 Left, Top, (Powerpoint_xp::Shape**)&TextEffect));
    return TextEffect;
  }

  Powerpoint_xp::Shape* __fastcall AddTextbox(Office_xp::MsoTextOrientation Orientation/*[in]*/, 
                                              float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_xp::Shape* Textbox;
    OLECHECK(this->AddTextbox(Orientation, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Textbox));
    return Textbox;
  }

  Powerpoint_xp::FreeformBuilder* __fastcall BuildFreeform(Office_xp::MsoEditingType EditingType/*[in]*/, 
                                                           float X1/*[in]*/, float Y1/*[in]*/)
  {
    Powerpoint_xp::FreeformBuilder* FreeformBuilder;
    OLECHECK(this->BuildFreeform(EditingType, X1, Y1, (Powerpoint_xp::FreeformBuilder**)&FreeformBuilder));
    return FreeformBuilder;
  }

  Powerpoint_xp::ShapeRange* __fastcall Range(VARIANT Index/*[in]*/)
  {
    Powerpoint_xp::ShapeRange* Range;
    OLECHECK(this->Range(Index, (Powerpoint_xp::ShapeRange**)&Range));
    return Range;
  }

  Powerpoint_xp::Shape* __fastcall get_Background(void)
  {
    Powerpoint_xp::Shape* Background;
    OLECHECK(this->get_Background((Powerpoint_xp::Shape**)&Background));
    return Background;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Powerpoint_xp::Shape* Background = {read = get_Background};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: AutoCorrect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934ED-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface AutoCorrect  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_DisplayAutoCorrectOptions(VARIANT_BOOL* DisplayAutoCorrectOptions/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayAutoCorrectOptions(VARIANT_BOOL DisplayAutoCorrectOptions/*[in]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayAutoLayoutOptions(VARIANT_BOOL* DisplayAutoLayoutOptions/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayAutoLayoutOptions(VARIANT_BOOL DisplayAutoLayoutOptions/*[in]*/) = 0; // [2002]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_DisplayAutoCorrectOptions(void)
  {
    VARIANT_BOOL DisplayAutoCorrectOptions;
    OLECHECK(this->get_DisplayAutoCorrectOptions((VARIANT_BOOL*)&DisplayAutoCorrectOptions));
    return DisplayAutoCorrectOptions;
  }

  VARIANT_BOOL __fastcall get_DisplayAutoLayoutOptions(void)
  {
    VARIANT_BOOL DisplayAutoLayoutOptions;
    OLECHECK(this->get_DisplayAutoLayoutOptions((VARIANT_BOOL*)&DisplayAutoLayoutOptions));
    return DisplayAutoLayoutOptions;
  }


  __property   VARIANT_BOOL    DisplayAutoCorrectOptions = {read = get_DisplayAutoCorrectOptions, write = set_DisplayAutoCorrectOptions};
  __property   VARIANT_BOOL    DisplayAutoLayoutOptions = {read = get_DisplayAutoLayoutOptions, write = set_DisplayAutoLayoutOptions};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Options
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934EE-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Options  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_DisplayPasteOptions(Office_xp::MsoTriState* DisplayPasteOptions/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayPasteOptions(Office_xp::MsoTriState DisplayPasteOptions/*[in]*/) = 0; // [2001]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_xp::MsoTriState __fastcall get_DisplayPasteOptions(void)
  {
    Office_xp::MsoTriState DisplayPasteOptions;
    OLECHECK(this->get_DisplayPasteOptions((Office_xp::MsoTriState*)&DisplayPasteOptions));
    return DisplayPasteOptions;
  }


  __property   Office_xp::MsoTriState DisplayPasteOptions = {read = get_DisplayPasteOptions, write = set_DisplayPasteOptions};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: CommandEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934EF-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface CommandEffect  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Powerpoint_xp::MsoAnimCommandType* Type/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Powerpoint_xp::MsoAnimCommandType Type/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Command(BSTR* Command/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Command(BSTR Command/*[in]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::MsoAnimCommandType __fastcall get_Type(void)
  {
    Powerpoint_xp::MsoAnimCommandType Type;
    OLECHECK(this->get_Type((Powerpoint_xp::MsoAnimCommandType*)&Type));
    return Type;
  }

  BSTR __fastcall get_Command(void)
  {
    BSTR Command = 0;
    OLECHECK(this->get_Command((BSTR*)&Command));
    return Command;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::MsoAnimCommandType Type = {read = get_Type, write = set_Type};
  __property   BSTR            Command = {read = get_Command};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FilterEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934F0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface FilterEffect  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Powerpoint_xp::MsoAnimFilterEffectType* Type/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Powerpoint_xp::MsoAnimFilterEffectType Type/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Subtype(Powerpoint_xp::MsoAnimFilterEffectSubtype* Subtype/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Subtype(Powerpoint_xp::MsoAnimFilterEffectSubtype Subtype/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Reveal(Office_xp::MsoTriState* Reveal/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_Reveal(Office_xp::MsoTriState Reveal/*[in]*/) = 0; // [2005]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::MsoAnimFilterEffectType __fastcall get_Type(void)
  {
    Powerpoint_xp::MsoAnimFilterEffectType Type;
    OLECHECK(this->get_Type((Powerpoint_xp::MsoAnimFilterEffectType*)&Type));
    return Type;
  }

  Powerpoint_xp::MsoAnimFilterEffectSubtype __fastcall get_Subtype(void)
  {
    Powerpoint_xp::MsoAnimFilterEffectSubtype Subtype;
    OLECHECK(this->get_Subtype((Powerpoint_xp::MsoAnimFilterEffectSubtype*)&Subtype));
    return Subtype;
  }

  Office_xp::MsoTriState __fastcall get_Reveal(void)
  {
    Office_xp::MsoTriState Reveal;
    OLECHECK(this->get_Reveal((Office_xp::MsoTriState*)&Reveal));
    return Reveal;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::MsoAnimFilterEffectType Type = {read = get_Type, write = set_Type};
  __property   Powerpoint_xp::MsoAnimFilterEffectSubtype Subtype = {read = get_Subtype, write = set_Subtype};
  __property   Office_xp::MsoTriState Reveal = {read = get_Reveal, write = set_Reveal};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SetEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934F1-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface SetEffect  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Property(Powerpoint_xp::MsoAnimProperty* Property/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Property(Powerpoint_xp::MsoAnimProperty Property/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_To(VARIANT* To/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_To(VARIANT To/*[in]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void)
  {
    Powerpoint_xp::PowerPointApplication* Application;
    OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_xp::MsoAnimProperty __fastcall get_Property(void)
  {
    Powerpoint_xp::MsoAnimProperty Property;
    OLECHECK(this->get_Property((Powerpoint_xp::MsoAnimProperty*)&Property));
    return Property;
  }

  VARIANT __fastcall get_To(void)
  {
    VARIANT To;
    OLECHECK(this->get_To((VARIANT*)&To));
    return To;
  }


  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::MsoAnimProperty Property = {read = get_Property, write = set_Property};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<Collection>  TCOMCollection;

// *********************************************************************//
// DispIntf:  Collection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {91493450-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class CollectionDispT : public TAutoDriver<Collection>
{
public:
  CollectionDispT(){}

  CollectionDispT(Collection *pintf)
  {
    TAutoDriver<Collection>::Bind(pintf, false);
  }

  CollectionDispT(CollectionPtr pintf)
  {
    TAutoDriver<Collection>::Bind(pintf, true);
  }

  CollectionDispT& operator=(Collection *pintf)
  {
    TAutoDriver<Collection>::Bind(pintf, false);
    return *this;
  }

  CollectionDispT& operator=(CollectionPtr pintf)
  {
    TAutoDriver<Collection>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef CollectionDispT<Collection> CollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_Application
// Interface: _Application
// *********************************************************************//
template <class T /* _Application */ >
class TCOM_ApplicationT : public TComInterface<_Application>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ApplicationT() {}
  TCOM_ApplicationT(_Application *intf, bool addRef = false) : TComInterface<_Application>(intf, addRef) {}
  TCOM_ApplicationT(const TCOM_ApplicationT& src) : TComInterface<_Application>(src) {}
  TCOM_ApplicationT& operator=(const TCOM_ApplicationT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Presentations(Powerpoint_xp::Presentations** Presentations/*[out,retval]*/);
  HRESULT         __fastcall get_Presentations(Powerpoint_xp::PresentationsPtr* Presentations/*[out,retval]*/);
  Powerpoint_xp::PresentationsPtr __fastcall get_Presentations(void);
  HRESULT         __fastcall get_Windows(Powerpoint_xp::DocumentWindows** Windows/*[out,retval]*/);
  HRESULT         __fastcall get_Windows(Powerpoint_xp::DocumentWindowsPtr* Windows/*[out,retval]*/);
  Powerpoint_xp::DocumentWindowsPtr __fastcall get_Windows(void);
  HRESULT         __fastcall get_Dialogs(LPUNKNOWN* Dialogs/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_Dialogs(void);
  HRESULT         __fastcall get_ActiveWindow(Powerpoint_xp::DocumentWindow** ActiveWindow/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveWindow(Powerpoint_xp::DocumentWindowPtr* ActiveWindow/*[out,retval]*/);
  Powerpoint_xp::DocumentWindowPtr __fastcall get_ActiveWindow(void);
  HRESULT         __fastcall get_ActivePresentation(Powerpoint_xp::PowerPointPresentation** ActivePresentation/*[out,retval]*/);
  HRESULT         __fastcall get_ActivePresentation(Powerpoint_xp::PowerPointPresentationPtr* ActivePresentation/*[out,retval]*/);
  Powerpoint_xp::PowerPointPresentationPtr __fastcall get_ActivePresentation(void);
  HRESULT         __fastcall get_SlideShowWindows(Powerpoint_xp::SlideShowWindows** SlideShowWindows/*[out,retval]*/);
  HRESULT         __fastcall get_SlideShowWindows(Powerpoint_xp::SlideShowWindowsPtr* SlideShowWindows/*[out,retval]*/);
  Powerpoint_xp::SlideShowWindowsPtr __fastcall get_SlideShowWindows(void);
  HRESULT         __fastcall get_CommandBars(Office_xp::CommandBars** CommandBars/*[out,retval]*/);
  HRESULT         __fastcall get_CommandBars(Office_xp::CommandBarsPtr* CommandBars/*[out,retval]*/);
  Office_xp::CommandBarsPtr __fastcall get_CommandBars(void);
  HRESULT         __fastcall get_Path(BSTR* Path/*[out,retval]*/);
  BSTR            __fastcall get_Path(void);
  HRESULT         __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT         __fastcall get_Assistant(Office_xp::Assistant** Assistant/*[out,retval]*/);
  HRESULT         __fastcall get_Assistant(Office_xp::AssistantPtr* Assistant/*[out,retval]*/);
  Office_xp::AssistantPtr __fastcall get_Assistant(void);
  HRESULT         __fastcall get_FileSearch(Office_xp::FileSearch** FileSearch/*[out,retval]*/);
  HRESULT         __fastcall get_FileSearch(Office_xp::FileSearchPtr* FileSearch/*[out,retval]*/);
  Office_xp::FileSearchPtr __fastcall get_FileSearch(void);
  HRESULT         __fastcall get_FileFind(Office_xp::IFind** FileFind/*[out,retval]*/);
  HRESULT         __fastcall get_FileFind(Office_xp::IFindPtr* FileFind/*[out,retval]*/);
  Office_xp::IFindPtr __fastcall get_FileFind(void);
  HRESULT         __fastcall get_Build(BSTR* Build/*[out,retval]*/);
  BSTR            __fastcall get_Build(void);
  HRESULT         __fastcall get_Version(BSTR* Version/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_OperatingSystem(BSTR* OperatingSystem/*[out,retval]*/);
  BSTR            __fastcall get_OperatingSystem(void);
  HRESULT         __fastcall get_ActivePrinter(BSTR* ActivePrinter/*[out,retval]*/);
  BSTR            __fastcall get_ActivePrinter(void);
  HRESULT         __fastcall get_Creator(long* Creator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT         __fastcall get_AddIns(Powerpoint_xp::AddIns** AddIns/*[out,retval]*/);
  HRESULT         __fastcall get_AddIns(Powerpoint_xp::AddInsPtr* AddIns/*[out,retval]*/);
  Powerpoint_xp::AddInsPtr __fastcall get_AddIns(void);
  HRESULT         __fastcall get_VBE(Vbide_xp::VBE** VBE/*[out,retval]*/);
  HRESULT         __fastcall get_VBE(Vbide_xp::VBEPtr* VBE/*[out,retval]*/);
  Vbide_xp::VBEPtr __fastcall get_VBE(void);
  HRESULT         __fastcall Help(BSTR HelpFile/*[in,def,opt]*/, int ContextID/*[in,def,opt]*/);
  HRESULT         __fastcall Quit(void);
  HRESULT         __fastcall Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/, 
                                 VARIANT* Run/*[out,retval]*/);
  VARIANT         __fastcall Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/);
  HRESULT         __fastcall PPFileDialog(Powerpoint_xp::PpFileDialogType Type/*[in]*/, 
                                          LPUNKNOWN* PPFileDialog/*[out,retval]*/);
  LPUNKNOWN       __fastcall PPFileDialog(Powerpoint_xp::PpFileDialogType Type/*[in]*/);
  HRESULT         __fastcall LaunchSpelling(Powerpoint_xp::DocumentWindow* pWindow/*[in]*/);
  HRESULT         __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(float Left/*[in]*/);
  HRESULT         __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(float Top/*[in]*/);
  HRESULT         __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(float Width/*[in]*/);
  HRESULT         __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(float Height/*[in]*/);
  HRESULT         __fastcall get_WindowState(Powerpoint_xp::PpWindowState* WindowState/*[out,retval]*/);
  Powerpoint_xp::PpWindowState __fastcall get_WindowState(void);
  HRESULT         __fastcall set_WindowState(Powerpoint_xp::PpWindowState WindowState/*[in]*/);
  HRESULT         __fastcall get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(Office_xp::MsoTriState Visible/*[in]*/);
  HRESULT         __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT         __fastcall get_Active(Office_xp::MsoTriState* Active/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Active(void);
  HRESULT         __fastcall Activate(void);
  HRESULT         __fastcall get_AnswerWizard(Office_xp::AnswerWizard** AnswerWizard/*[out,retval]*/);
  HRESULT         __fastcall get_AnswerWizard(Office_xp::AnswerWizardPtr* AnswerWizard/*[out,retval]*/);
  Office_xp::AnswerWizardPtr __fastcall get_AnswerWizard(void);
  HRESULT         __fastcall get_COMAddIns(Office_xp::COMAddIns** COMAddIns/*[out,retval]*/);
  HRESULT         __fastcall get_COMAddIns(Office_xp::COMAddInsPtr* COMAddIns/*[out,retval]*/);
  Office_xp::COMAddInsPtr __fastcall get_COMAddIns(void);
  HRESULT         __fastcall get_ProductCode(BSTR* ProductCode/*[out,retval]*/);
  BSTR            __fastcall get_ProductCode(void);
  HRESULT         __fastcall get_DefaultWebOptions(Powerpoint_xp::DefaultWebOptions** DefaultWebOptions/*[out,retval]*/);
  HRESULT         __fastcall get_DefaultWebOptions(Powerpoint_xp::DefaultWebOptionsPtr* DefaultWebOptions/*[out,retval]*/);
  Powerpoint_xp::DefaultWebOptionsPtr __fastcall get_DefaultWebOptions(void);
  HRESULT         __fastcall get_LanguageSettings(Office_xp::LanguageSettings** LanguageSettings/*[out,retval]*/);
  HRESULT         __fastcall get_LanguageSettings(Office_xp::LanguageSettingsPtr* LanguageSettings/*[out,retval]*/);
  Office_xp::LanguageSettingsPtr __fastcall get_LanguageSettings(void);
  HRESULT         __fastcall get_MsoDebugOptions(Office_xp::MsoDebugOptions** MsoDebugOptions/*[out,retval]*/);
  HRESULT         __fastcall get_MsoDebugOptions(Office_xp::MsoDebugOptionsPtr* MsoDebugOptions/*[out,retval]*/);
  Office_xp::MsoDebugOptionsPtr __fastcall get_MsoDebugOptions(void);
  HRESULT         __fastcall get_ShowWindowsInTaskbar(Office_xp::MsoTriState* ShowWindowsInTaskbar/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_ShowWindowsInTaskbar(void);
  HRESULT         __fastcall set_ShowWindowsInTaskbar(Office_xp::MsoTriState ShowWindowsInTaskbar/*[in]*/);
  HRESULT         __fastcall get_Marker(LPUNKNOWN* Marker/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_Marker(void);
  HRESULT         __fastcall get_FeatureInstall(Office_xp::MsoFeatureInstall* FeatureInstall/*[out,retval]*/);
  Office_xp::MsoFeatureInstall __fastcall get_FeatureInstall(void);
  HRESULT         __fastcall set_FeatureInstall(Office_xp::MsoFeatureInstall FeatureInstall/*[in]*/);
  HRESULT         __fastcall GetOptionFlag(long Option/*[in]*/, VARIANT_BOOL Persist/*[in,def,opt]*/, 
                                           VARIANT_BOOL* GetOptionFlag/*[out,retval]*/);
  VARIANT_BOOL    __fastcall GetOptionFlag(long Option/*[in]*/, VARIANT_BOOL Persist/*[in,def,opt]*/);
  HRESULT         __fastcall SetOptionFlag(long Option/*[in]*/, VARIANT_BOOL State/*[in]*/, 
                                           VARIANT_BOOL Persist/*[in,def,opt]*/);
  HRESULT         __fastcall get_FileDialog(Office_xp::MsoFileDialogType Type/*[in]*/, 
                                            Office_xp::FileDialog** FileDialog/*[out,retval]*/);
  Office_xp::FileDialog* __fastcall get_FileDialog(Office_xp::MsoFileDialogType Type/*[in]*/);
  HRESULT         __fastcall get_DisplayGridLines(Office_xp::MsoTriState* DisplayGridLines/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_DisplayGridLines(void);
  HRESULT         __fastcall set_DisplayGridLines(Office_xp::MsoTriState DisplayGridLines/*[in]*/);
  HRESULT         __fastcall get_AutomationSecurity(Office_xp::MsoAutomationSecurity* AutomationSecurity/*[out,retval]*/);
  Office_xp::MsoAutomationSecurity __fastcall get_AutomationSecurity(void);
  HRESULT         __fastcall set_AutomationSecurity(Office_xp::MsoAutomationSecurity AutomationSecurity/*[in]*/);
  HRESULT         __fastcall get_NewPresentation(Office_xp::NewFile** NewPresentation/*[out,retval]*/);
  HRESULT         __fastcall get_NewPresentation(Office_xp::NewFilePtr* NewPresentation/*[out,retval]*/);
  Office_xp::NewFilePtr __fastcall get_NewPresentation(void);
  HRESULT         __fastcall get_DisplayAlerts(Powerpoint_xp::PpAlertLevel* DisplayAlerts/*[out,retval]*/);
  Powerpoint_xp::PpAlertLevel __fastcall get_DisplayAlerts(void);
  HRESULT         __fastcall set_DisplayAlerts(Powerpoint_xp::PpAlertLevel DisplayAlerts/*[in]*/);
  HRESULT         __fastcall get_ShowStartupDialog(Office_xp::MsoTriState* ShowStartupDialog/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_ShowStartupDialog(void);
  HRESULT         __fastcall set_ShowStartupDialog(Office_xp::MsoTriState ShowStartupDialog/*[in]*/);
  HRESULT         __fastcall SetPerfMarker(int Marker/*[in]*/);
  HRESULT         __fastcall get_AutoCorrect(Powerpoint_xp::AutoCorrect** AutoCorrect/*[out,retval]*/);
  HRESULT         __fastcall get_AutoCorrect(Powerpoint_xp::AutoCorrectPtr* AutoCorrect/*[out,retval]*/);
  Powerpoint_xp::AutoCorrectPtr __fastcall get_AutoCorrect(void);
  HRESULT         __fastcall get_Options(Powerpoint_xp::Options** Options/*[out,retval]*/);
  HRESULT         __fastcall get_Options(Powerpoint_xp::OptionsPtr* Options/*[out,retval]*/);
  Powerpoint_xp::OptionsPtr __fastcall get_Options(void);

  __property   Powerpoint_xp::PresentationsPtr Presentations = {read = get_Presentations};
  __property   Powerpoint_xp::DocumentWindowsPtr Windows = {read = get_Windows};
  __property   LPUNKNOWN       Dialogs = {read = get_Dialogs};
  __property   Powerpoint_xp::DocumentWindowPtr ActiveWindow = {read = get_ActiveWindow};
  __property   Powerpoint_xp::PowerPointPresentationPtr ActivePresentation = {read = get_ActivePresentation};
  __property   Powerpoint_xp::SlideShowWindowsPtr SlideShowWindows = {read = get_SlideShowWindows};
  __property   Office_xp::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   BSTR            Path = {read = get_Path};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Caption = {read = get_Caption};
  __property   Office_xp::AssistantPtr Assistant = {read = get_Assistant};
  __property   Office_xp::FileSearchPtr FileSearch = {read = get_FileSearch};
  __property   Office_xp::IFindPtr FileFind = {read = get_FileFind};
  __property   BSTR            Build = {read = get_Build};
  __property   BSTR            Version = {read = get_Version};
  __property   BSTR            OperatingSystem = {read = get_OperatingSystem};
  __property   BSTR            ActivePrinter = {read = get_ActivePrinter};
  __property   long            Creator = {read = get_Creator};
  __property   Powerpoint_xp::AddInsPtr AddIns = {read = get_AddIns};
  __property   Vbide_xp::VBEPtr VBE = {read = get_VBE};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Powerpoint_xp::PpWindowState WindowState = {read = get_WindowState, write = set_WindowState};
  __property   Office_xp::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   long            HWND = {read = get_HWND};
  __property   Office_xp::MsoTriState Active = {read = get_Active};
  __property   Office_xp::AnswerWizardPtr AnswerWizard = {read = get_AnswerWizard};
  __property   Office_xp::COMAddInsPtr COMAddIns = {read = get_COMAddIns};
  __property   BSTR            ProductCode = {read = get_ProductCode};
  __property   Powerpoint_xp::DefaultWebOptionsPtr DefaultWebOptions = {read = get_DefaultWebOptions};
  __property   Office_xp::LanguageSettingsPtr LanguageSettings = {read = get_LanguageSettings};
  __property   Office_xp::MsoDebugOptionsPtr MsoDebugOptions = {read = get_MsoDebugOptions};
  __property   Office_xp::MsoTriState ShowWindowsInTaskbar = {read = get_ShowWindowsInTaskbar, write = set_ShowWindowsInTaskbar};
  __property   LPUNKNOWN       Marker = {read = get_Marker};
  __property   Office_xp::MsoFeatureInstall FeatureInstall = {read = get_FeatureInstall, write = set_FeatureInstall};
  __property   Office_xp::MsoTriState DisplayGridLines = {read = get_DisplayGridLines, write = set_DisplayGridLines};
  __property   Office_xp::MsoAutomationSecurity AutomationSecurity = {read = get_AutomationSecurity, write = set_AutomationSecurity};
  __property   Office_xp::NewFilePtr NewPresentation = {read = get_NewPresentation};
  __property   Powerpoint_xp::PpAlertLevel DisplayAlerts = {read = get_DisplayAlerts, write = set_DisplayAlerts};
  __property   Office_xp::MsoTriState ShowStartupDialog = {read = get_ShowStartupDialog, write = set_ShowStartupDialog};
  __property   Powerpoint_xp::AutoCorrectPtr AutoCorrect = {read = get_AutoCorrect};
  __property   Powerpoint_xp::OptionsPtr Options = {read = get_Options};
};
typedef TCOM_ApplicationT<_Application> TCOM_Application;

// *********************************************************************//
// DispIntf:  _Application
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493442-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class _ApplicationDispT : public TAutoDriver<_Application>
{
public:
  _ApplicationDispT(){}

  _ApplicationDispT(_Application *pintf)
  {
    TAutoDriver<_Application>::Bind(pintf, false);
  }

  _ApplicationDispT(_ApplicationPtr pintf)
  {
    TAutoDriver<_Application>::Bind(pintf, true);
  }

  _ApplicationDispT& operator=(_Application *pintf)
  {
    TAutoDriver<_Application>::Bind(pintf, false);
    return *this;
  }

  _ApplicationDispT& operator=(_ApplicationPtr pintf)
  {
    TAutoDriver<_Application>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PowerPointApplication));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PowerPointApplication);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Presentations(Powerpoint_xp::Presentations** Presentations/*[out,retval]*/);
  Powerpoint_xp::Presentations* __fastcall get_Presentations(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Windows(Powerpoint_xp::DocumentWindows** Windows/*[out,retval]*/);
  Powerpoint_xp::DocumentWindows* __fastcall get_Windows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Dialogs(LPUNKNOWN* Dialogs/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_Dialogs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveWindow(Powerpoint_xp::DocumentWindow** ActiveWindow/*[out,retval]*/);
  Powerpoint_xp::DocumentWindow* __fastcall get_ActiveWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActivePresentation(Powerpoint_xp::PowerPointPresentation** ActivePresentation/*[out,retval]*/);
  Powerpoint_xp::PowerPointPresentation* __fastcall get_ActivePresentation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowWindows(Powerpoint_xp::SlideShowWindows** SlideShowWindows/*[out,retval]*/);
  Powerpoint_xp::SlideShowWindows* __fastcall get_SlideShowWindows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandBars(Office_xp::CommandBars** CommandBars/*[out,retval]*/);
  Office_xp::CommandBars* __fastcall get_CommandBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Path(BSTR* Path/*[out,retval]*/);
  BSTR            __fastcall get_Path(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Assistant(Office_xp::Assistant** Assistant/*[out,retval]*/);
  Office_xp::Assistant* __fastcall get_Assistant(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileSearch(Office_xp::FileSearch** FileSearch/*[out,retval]*/);
  Office_xp::FileSearch* __fastcall get_FileSearch(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileFind(Office_xp::IFind** FileFind/*[out,retval]*/);
  Office_xp::IFind* __fastcall get_FileFind(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Build(BSTR* Build/*[out,retval]*/);
  BSTR            __fastcall get_Build(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Version(BSTR* Version/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OperatingSystem(BSTR* OperatingSystem/*[out,retval]*/);
  BSTR            __fastcall get_OperatingSystem(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActivePrinter(BSTR* ActivePrinter/*[out,retval]*/);
  BSTR            __fastcall get_ActivePrinter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* Creator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AddIns(Powerpoint_xp::AddIns** AddIns/*[out,retval]*/);
  Powerpoint_xp::AddIns* __fastcall get_AddIns(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBE(Vbide_xp::VBE** VBE/*[out,retval]*/);
  Vbide_xp::VBE*  __fastcall get_VBE(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Help(BSTR HelpFile/*[in,def,opt]*/, 
                                             int ContextID/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Quit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Run(BSTR MacroName/*[in]*/, 
                                            LPSAFEARRAY* safeArrayOfParams/*[in]*/, 
                                            VARIANT* Run/*[out,retval]*/);
  VARIANT         __fastcall Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PPFileDialog(Powerpoint_xp::PpFileDialogType Type/*[in]*/, 
                                                     LPUNKNOWN* PPFileDialog/*[out,retval]*/);
  LPUNKNOWN       __fastcall PPFileDialog(Powerpoint_xp::PpFileDialogType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LaunchSpelling(Powerpoint_xp::DocumentWindow* pWindow/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WindowState(Powerpoint_xp::PpWindowState* WindowState/*[out,retval]*/);
  Powerpoint_xp::PpWindowState __fastcall get_WindowState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WindowState(Powerpoint_xp::PpWindowState WindowState/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_xp::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Active(Office_xp::MsoTriState* Active/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Active(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Activate();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AnswerWizard(Office_xp::AnswerWizard** AnswerWizard/*[out,retval]*/);
  Office_xp::AnswerWizard* __fastcall get_AnswerWizard(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_COMAddIns(Office_xp::COMAddIns** COMAddIns/*[out,retval]*/);
  Office_xp::COMAddIns* __fastcall get_COMAddIns(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProductCode(BSTR* ProductCode/*[out,retval]*/);
  BSTR            __fastcall get_ProductCode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultWebOptions(Powerpoint_xp::DefaultWebOptions** DefaultWebOptions/*[out,retval]*/);
  Powerpoint_xp::DefaultWebOptions* __fastcall get_DefaultWebOptions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LanguageSettings(Office_xp::LanguageSettings** LanguageSettings/*[out,retval]*/);
  Office_xp::LanguageSettings* __fastcall get_LanguageSettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MsoDebugOptions(Office_xp::MsoDebugOptions** MsoDebugOptions/*[out,retval]*/);
  Office_xp::MsoDebugOptions* __fastcall get_MsoDebugOptions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowWindowsInTaskbar(Office_xp::MsoTriState* ShowWindowsInTaskbar/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_ShowWindowsInTaskbar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowWindowsInTaskbar(Office_xp::MsoTriState ShowWindowsInTaskbar/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Marker(LPUNKNOWN* Marker/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_Marker(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FeatureInstall(Office_xp::MsoFeatureInstall* FeatureInstall/*[out,retval]*/);
  Office_xp::MsoFeatureInstall __fastcall get_FeatureInstall(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FeatureInstall(Office_xp::MsoFeatureInstall FeatureInstall/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetOptionFlag(long Option/*[in]*/, 
                                                      VARIANT_BOOL Persist/*[in,def,opt]*/, 
                                                      VARIANT_BOOL* GetOptionFlag/*[out,retval]*/);
  VARIANT_BOOL    __fastcall GetOptionFlag(long Option/*[in]*/, VARIANT_BOOL Persist/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetOptionFlag(long Option/*[in]*/, 
                                                      VARIANT_BOOL State/*[in]*/, 
                                                      VARIANT_BOOL Persist/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileDialog(Office_xp::MsoFileDialogType Type/*[in]*/, 
                                                       Office_xp::FileDialog** FileDialog/*[out,retval]*/);
  Office_xp::FileDialog* __fastcall get_FileDialog(Office_xp::MsoFileDialogType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayGridLines(Office_xp::MsoTriState* DisplayGridLines/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_DisplayGridLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayGridLines(Office_xp::MsoTriState DisplayGridLines/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutomationSecurity(Office_xp::MsoAutomationSecurity* AutomationSecurity/*[out,retval]*/);
  Office_xp::MsoAutomationSecurity __fastcall get_AutomationSecurity(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutomationSecurity(Office_xp::MsoAutomationSecurity AutomationSecurity/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NewPresentation(Office_xp::NewFile** NewPresentation/*[out,retval]*/);
  Office_xp::NewFile* __fastcall get_NewPresentation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayAlerts(Powerpoint_xp::PpAlertLevel* DisplayAlerts/*[out,retval]*/);
  Powerpoint_xp::PpAlertLevel __fastcall get_DisplayAlerts(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayAlerts(Powerpoint_xp::PpAlertLevel DisplayAlerts/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowStartupDialog(Office_xp::MsoTriState* ShowStartupDialog/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_ShowStartupDialog(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowStartupDialog(Office_xp::MsoTriState ShowStartupDialog/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetPerfMarker(int Marker/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoCorrect(Powerpoint_xp::AutoCorrect** AutoCorrect/*[out,retval]*/);
  Powerpoint_xp::AutoCorrect* __fastcall get_AutoCorrect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Options(Powerpoint_xp::Options** Options/*[out,retval]*/);
  Powerpoint_xp::Options* __fastcall get_Options(void);

  __property   Powerpoint_xp::Presentations* Presentations = {read = get_Presentations};
  __property   Powerpoint_xp::DocumentWindows* Windows = {read = get_Windows};
  __property   LPUNKNOWN       Dialogs = {read = get_Dialogs};
  __property   Powerpoint_xp::DocumentWindow* ActiveWindow = {read = get_ActiveWindow};
  __property   Powerpoint_xp::PowerPointPresentation* ActivePresentation = {read = get_ActivePresentation};
  __property   Powerpoint_xp::SlideShowWindows* SlideShowWindows = {read = get_SlideShowWindows};
  __property   Office_xp::CommandBars* CommandBars = {read = get_CommandBars};
  __property   BSTR            Path = {read = get_Path};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Caption = {read = get_Caption};
  __property   Office_xp::Assistant* Assistant = {read = get_Assistant};
  __property   Office_xp::FileSearch* FileSearch = {read = get_FileSearch};
  __property   Office_xp::IFind* FileFind = {read = get_FileFind};
  __property   BSTR            Build = {read = get_Build};
  __property   BSTR            Version = {read = get_Version};
  __property   BSTR            OperatingSystem = {read = get_OperatingSystem};
  __property   BSTR            ActivePrinter = {read = get_ActivePrinter};
  __property   long            Creator = {read = get_Creator};
  __property   Powerpoint_xp::AddIns* AddIns = {read = get_AddIns};
  __property   Vbide_xp::VBE*  VBE = {read = get_VBE};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Powerpoint_xp::PpWindowState WindowState = {read = get_WindowState, write = set_WindowState};
  __property   Office_xp::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   long            HWND = {read = get_HWND};
  __property   Office_xp::MsoTriState Active = {read = get_Active};
  __property   Office_xp::AnswerWizard* AnswerWizard = {read = get_AnswerWizard};
  __property   Office_xp::COMAddIns* COMAddIns = {read = get_COMAddIns};
  __property   BSTR            ProductCode = {read = get_ProductCode};
  __property   Powerpoint_xp::DefaultWebOptions* DefaultWebOptions = {read = get_DefaultWebOptions};
  __property   Office_xp::LanguageSettings* LanguageSettings = {read = get_LanguageSettings};
  __property   Office_xp::MsoDebugOptions* MsoDebugOptions = {read = get_MsoDebugOptions};
  __property   Office_xp::MsoTriState ShowWindowsInTaskbar = {read = get_ShowWindowsInTaskbar, write = set_ShowWindowsInTaskbar};
  __property   LPUNKNOWN       Marker = {read = get_Marker};
  __property   Office_xp::MsoFeatureInstall FeatureInstall = {read = get_FeatureInstall, write = set_FeatureInstall};
  __property   Office_xp::MsoTriState DisplayGridLines = {read = get_DisplayGridLines, write = set_DisplayGridLines};
  __property   Office_xp::MsoAutomationSecurity AutomationSecurity = {read = get_AutomationSecurity, write = set_AutomationSecurity};
  __property   Office_xp::NewFile* NewPresentation = {read = get_NewPresentation};
  __property   Powerpoint_xp::PpAlertLevel DisplayAlerts = {read = get_DisplayAlerts, write = set_DisplayAlerts};
  __property   Office_xp::MsoTriState ShowStartupDialog = {read = get_ShowStartupDialog, write = set_ShowStartupDialog};
  __property   Powerpoint_xp::AutoCorrect* AutoCorrect = {read = get_AutoCorrect};
  __property   Powerpoint_xp::Options* Options = {read = get_Options};
};
typedef _ApplicationDispT<_Application> _ApplicationDisp;

// *********************************************************************//
// SmartIntf: TCOM_Global
// Interface: _Global
// *********************************************************************//
template <class T /* _Global */ >
class TCOM_GlobalT : public TComInterface<_Global>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_GlobalT() {}
  TCOM_GlobalT(_Global *intf, bool addRef = false) : TComInterface<_Global>(intf, addRef) {}
  TCOM_GlobalT(const TCOM_GlobalT& src) : TComInterface<_Global>(src) {}
  TCOM_GlobalT& operator=(const TCOM_GlobalT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ActivePresentation(Powerpoint_xp::PowerPointPresentation** ActivePresentation/*[out,retval]*/);
  HRESULT         __fastcall get_ActivePresentation(Powerpoint_xp::PowerPointPresentationPtr* ActivePresentation/*[out,retval]*/);
  Powerpoint_xp::PowerPointPresentationPtr __fastcall get_ActivePresentation(void);
  HRESULT         __fastcall get_ActiveWindow(Powerpoint_xp::DocumentWindow** ActiveWindow/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveWindow(Powerpoint_xp::DocumentWindowPtr* ActiveWindow/*[out,retval]*/);
  Powerpoint_xp::DocumentWindowPtr __fastcall get_ActiveWindow(void);
  HRESULT         __fastcall get_AddIns(Powerpoint_xp::AddIns** AddIns/*[out,retval]*/);
  HRESULT         __fastcall get_AddIns(Powerpoint_xp::AddInsPtr* AddIns/*[out,retval]*/);
  Powerpoint_xp::AddInsPtr __fastcall get_AddIns(void);
  HRESULT         __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  HRESULT         __fastcall get_Application(Powerpoint_xp::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Assistant(Office_xp::Assistant** Assistant/*[out,retval]*/);
  HRESULT         __fastcall get_Assistant(Office_xp::AssistantPtr* Assistant/*[out,retval]*/);
  Office_xp::AssistantPtr __fastcall get_Assistant(void);
  HRESULT         __fastcall get_Dialogs(LPUNKNOWN* Dialogs/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_Dialogs(void);
  HRESULT         __fastcall get_Presentations(Powerpoint_xp::Presentations** Presentations/*[out,retval]*/);
  HRESULT         __fastcall get_Presentations(Powerpoint_xp::PresentationsPtr* Presentations/*[out,retval]*/);
  Powerpoint_xp::PresentationsPtr __fastcall get_Presentations(void);
  HRESULT         __fastcall get_SlideShowWindows(Powerpoint_xp::SlideShowWindows** SlideShowWindows/*[out,retval]*/);
  HRESULT         __fastcall get_SlideShowWindows(Powerpoint_xp::SlideShowWindowsPtr* SlideShowWindows/*[out,retval]*/);
  Powerpoint_xp::SlideShowWindowsPtr __fastcall get_SlideShowWindows(void);
  HRESULT         __fastcall get_Windows(Powerpoint_xp::DocumentWindows** Windows/*[out,retval]*/);
  HRESULT         __fastcall get_Windows(Powerpoint_xp::DocumentWindowsPtr* Windows/*[out,retval]*/);
  Powerpoint_xp::DocumentWindowsPtr __fastcall get_Windows(void);
  HRESULT         __fastcall get_CommandBars(Office_xp::CommandBars** CommandBars/*[out,retval]*/);
  HRESULT         __fastcall get_CommandBars(Office_xp::CommandBarsPtr* CommandBars/*[out,retval]*/);
  Office_xp::CommandBarsPtr __fastcall get_CommandBars(void);
  HRESULT         __fastcall get_AnswerWizard(Office_xp::AnswerWizard** AnswerWizard/*[out,retval]*/);
  HRESULT         __fastcall get_AnswerWizard(Office_xp::AnswerWizardPtr* AnswerWizard/*[out,retval]*/);
  Office_xp::AnswerWizardPtr __fastcall get_AnswerWizard(void);

  __property   Powerpoint_xp::PowerPointPresentationPtr ActivePresentation = {read = get_ActivePresentation};
  __property   Powerpoint_xp::DocumentWindowPtr ActiveWindow = {read = get_ActiveWindow};
  __property   Powerpoint_xp::AddInsPtr AddIns = {read = get_AddIns};
  __property   Powerpoint_xp::PowerPointApplicationPtr Application = {read = get_Application};
  __property   Office_xp::AssistantPtr Assistant = {read = get_Assistant};
  __property   LPUNKNOWN       Dialogs = {read = get_Dialogs};
  __property   Powerpoint_xp::PresentationsPtr Presentations = {read = get_Presentations};
  __property   Powerpoint_xp::SlideShowWindowsPtr SlideShowWindows = {read = get_SlideShowWindows};
  __property   Powerpoint_xp::DocumentWindowsPtr Windows = {read = get_Windows};
  __property   Office_xp::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   Office_xp::AnswerWizardPtr AnswerWizard = {read = get_AnswerWizard};
};
typedef TCOM_GlobalT<_Global> TCOM_Global;

// *********************************************************************//
// DispIntf:  _Global
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493451-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class _GlobalDispT : public TAutoDriver<_Global>
{
public:
  _GlobalDispT(){}

  _GlobalDispT(_Global *pintf)
  {
    TAutoDriver<_Global>::Bind(pintf, false);
  }

  _GlobalDispT(_GlobalPtr pintf)
  {
    TAutoDriver<_Global>::Bind(pintf, true);
  }

  _GlobalDispT& operator=(_Global *pintf)
  {
    TAutoDriver<_Global>::Bind(pintf, false);
    return *this;
  }

  _GlobalDispT& operator=(_GlobalPtr pintf)
  {
    TAutoDriver<_Global>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PowerPointGlobal));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PowerPointGlobal);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActivePresentation(Powerpoint_xp::PowerPointPresentation** ActivePresentation/*[out,retval]*/);
  Powerpoint_xp::PowerPointPresentation* __fastcall get_ActivePresentation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveWindow(Powerpoint_xp::DocumentWindow** ActiveWindow/*[out,retval]*/);
  Powerpoint_xp::DocumentWindow* __fastcall get_ActiveWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AddIns(Powerpoint_xp::AddIns** AddIns/*[out,retval]*/);
  Powerpoint_xp::AddIns* __fastcall get_AddIns(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Assistant(Office_xp::Assistant** Assistant/*[out,retval]*/);
  Office_xp::Assistant* __fastcall get_Assistant(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Dialogs(LPUNKNOWN* Dialogs/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_Dialogs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Presentations(Powerpoint_xp::Presentations** Presentations/*[out,retval]*/);
  Powerpoint_xp::Presentations* __fastcall get_Presentations(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowWindows(Powerpoint_xp::SlideShowWindows** SlideShowWindows/*[out,retval]*/);
  Powerpoint_xp::SlideShowWindows* __fastcall get_SlideShowWindows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Windows(Powerpoint_xp::DocumentWindows** Windows/*[out,retval]*/);
  Powerpoint_xp::DocumentWindows* __fastcall get_Windows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandBars(Office_xp::CommandBars** CommandBars/*[out,retval]*/);
  Office_xp::CommandBars* __fastcall get_CommandBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AnswerWizard(Office_xp::AnswerWizard** AnswerWizard/*[out,retval]*/);
  Office_xp::AnswerWizard* __fastcall get_AnswerWizard(void);

  __property   Powerpoint_xp::PowerPointPresentation* ActivePresentation = {read = get_ActivePresentation};
  __property   Powerpoint_xp::DocumentWindow* ActiveWindow = {read = get_ActiveWindow};
  __property   Powerpoint_xp::AddIns* AddIns = {read = get_AddIns};
  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   Office_xp::Assistant* Assistant = {read = get_Assistant};
  __property   LPUNKNOWN       Dialogs = {read = get_Dialogs};
  __property   Powerpoint_xp::Presentations* Presentations = {read = get_Presentations};
  __property   Powerpoint_xp::SlideShowWindows* SlideShowWindows = {read = get_SlideShowWindows};
  __property   Powerpoint_xp::DocumentWindows* Windows = {read = get_Windows};
  __property   Office_xp::CommandBars* CommandBars = {read = get_CommandBars};
  __property   Office_xp::AnswerWizard* AnswerWizard = {read = get_AnswerWizard};
};
typedef _GlobalDispT<_Global> _GlobalDisp;

// *********************************************************************//
// DispIntf:  EApplication
// Flags:     (4096) Dispatchable
// GUID:      {914934C2-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T>
class EApplicationDispT : public TAutoDriver<EApplication>
{
public:
  EApplicationDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall WindowSelectionChange(Powerpoint_xp::Selection* Sel/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall WindowBeforeRightClick(Powerpoint_xp::Selection* Sel/*[in]*/
                                                               , VARIANT_BOOL* Cancel/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall WindowBeforeDoubleClick(Powerpoint_xp::Selection* Sel/*[in]*/
                                                                , VARIANT_BOOL* Cancel/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresentationClose(Powerpoint_xp::PowerPointPresentation* Pres/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresentationSave(Powerpoint_xp::PowerPointPresentation* Pres/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresentationOpen(Powerpoint_xp::PowerPointPresentation* Pres/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NewPresentation(Powerpoint_xp::PowerPointPresentation* Pres/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresentationNewSlide(Powerpoint_xp::PowerPointSlide* Sld/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall WindowActivate(Powerpoint_xp::PowerPointPresentation* Pres/*[in]*/
                                                       , Powerpoint_xp::DocumentWindow* Wn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall WindowDeactivate(Powerpoint_xp::PowerPointPresentation* Pres/*[in]*/
                                                         , Powerpoint_xp::DocumentWindow* Wn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SlideShowBegin(Powerpoint_xp::SlideShowWindow* Wn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SlideShowNextBuild(Powerpoint_xp::SlideShowWindow* Wn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SlideShowNextSlide(Powerpoint_xp::SlideShowWindow* Wn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SlideShowEnd(Powerpoint_xp::PowerPointPresentation* Pres/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresentationPrint(Powerpoint_xp::PowerPointPresentation* Pres/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SlideSelectionChanged(Powerpoint_xp::SlideRange* SldRange/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ColorSchemeChanged(Powerpoint_xp::SlideRange* SldRange/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresentationBeforeSave(Powerpoint_xp::PowerPointPresentation* Pres/*[in]*/
                                                               , VARIANT_BOOL* Cancel/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SlideShowNextClick(Powerpoint_xp::SlideShowWindow* Wn/*[in]*/
                                                           , Powerpoint_xp::Effect* nEffect/*[in]*/);

};
typedef EApplicationDispT<EApplication> EApplicationDisp;

typedef TComInterface<ColorFormat>  TCOMColorFormat;

// *********************************************************************//
// DispIntf:  ColorFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493452-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ColorFormatDispT : public TAutoDriver<ColorFormat>
{
public:
  ColorFormatDispT(){}

  ColorFormatDispT(ColorFormat *pintf)
  {
    TAutoDriver<ColorFormat>::Bind(pintf, false);
  }

  ColorFormatDispT(ColorFormatPtr pintf)
  {
    TAutoDriver<ColorFormat>::Bind(pintf, true);
  }

  ColorFormatDispT& operator=(ColorFormat *pintf)
  {
    TAutoDriver<ColorFormat>::Bind(pintf, false);
    return *this;
  }

  ColorFormatDispT& operator=(ColorFormatPtr pintf)
  {
    TAutoDriver<ColorFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_rgb(Office_xp::MsoRGBType* rgb/*[out,retval]*/);
  Office_xp::MsoRGBType __fastcall get_rgb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_rgb(Office_xp::MsoRGBType rgb/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_xp::MsoColorType* Type/*[out,retval]*/);
  Office_xp::MsoColorType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SchemeColor(Powerpoint_xp::PpColorSchemeIndex* SchemeColor/*[out,retval]*/);
  Powerpoint_xp::PpColorSchemeIndex __fastcall get_SchemeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SchemeColor(Powerpoint_xp::PpColorSchemeIndex SchemeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TintAndShade(float* pValue/*[out,retval]*/);
  float           __fastcall get_TintAndShade(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TintAndShade(float pValue/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoRGBType rgb = {read = get_rgb, write = set_rgb};
  __property   Office_xp::MsoColorType Type = {read = get_Type};
  __property   Powerpoint_xp::PpColorSchemeIndex SchemeColor = {read = get_SchemeColor, write = set_SchemeColor};
  __property   float           TintAndShade = {read = get_TintAndShade, write = set_TintAndShade};
};
typedef ColorFormatDispT<ColorFormat> ColorFormatDisp;

typedef TComInterface<SlideShowWindow>  TCOMSlideShowWindow;

// *********************************************************************//
// DispIntf:  SlideShowWindow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493453-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SlideShowWindowDispT : public TAutoDriver<SlideShowWindow>
{
public:
  SlideShowWindowDispT(){}

  SlideShowWindowDispT(SlideShowWindow *pintf)
  {
    TAutoDriver<SlideShowWindow>::Bind(pintf, false);
  }

  SlideShowWindowDispT(SlideShowWindowPtr pintf)
  {
    TAutoDriver<SlideShowWindow>::Bind(pintf, true);
  }

  SlideShowWindowDispT& operator=(SlideShowWindow *pintf)
  {
    TAutoDriver<SlideShowWindow>::Bind(pintf, false);
    return *this;
  }

  SlideShowWindowDispT& operator=(SlideShowWindowPtr pintf)
  {
    TAutoDriver<SlideShowWindow>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_View(Powerpoint_xp::SlideShowView** View/*[out,retval]*/);
  Powerpoint_xp::SlideShowView* __fastcall get_View(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Presentation(Powerpoint_xp::PowerPointPresentation** Presentation/*[out,retval]*/);
  Powerpoint_xp::PowerPointPresentation* __fastcall get_Presentation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsFullScreen(Office_xp::MsoTriState* IsFullScreen/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_IsFullScreen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Active(Office_xp::MsoTriState* Active/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Active(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Activate();

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::SlideShowView* View = {read = get_View};
  __property   Powerpoint_xp::PowerPointPresentation* Presentation = {read = get_Presentation};
  __property   Office_xp::MsoTriState IsFullScreen = {read = get_IsFullScreen};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   Office_xp::MsoTriState Active = {read = get_Active};
};
typedef SlideShowWindowDispT<SlideShowWindow> SlideShowWindowDisp;

typedef TComInterface<Selection>  TCOMSelection;

// *********************************************************************//
// DispIntf:  Selection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493454-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SelectionDispT : public TAutoDriver<Selection>
{
public:
  SelectionDispT(){}

  SelectionDispT(Selection *pintf)
  {
    TAutoDriver<Selection>::Bind(pintf, false);
  }

  SelectionDispT(SelectionPtr pintf)
  {
    TAutoDriver<Selection>::Bind(pintf, true);
  }

  SelectionDispT& operator=(Selection *pintf)
  {
    TAutoDriver<Selection>::Bind(pintf, false);
    return *this;
  }

  SelectionDispT& operator=(SelectionPtr pintf)
  {
    TAutoDriver<Selection>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Unselect();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Powerpoint_xp::PpSelectionType* Type/*[out,retval]*/);
  Powerpoint_xp::PpSelectionType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideRange(Powerpoint_xp::SlideRange** SlideRange/*[out,retval]*/);
  Powerpoint_xp::SlideRange* __fastcall get_SlideRange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShapeRange(Powerpoint_xp::ShapeRange** ShapeRange/*[out,retval]*/);
  Powerpoint_xp::ShapeRange* __fastcall get_ShapeRange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextRange(Powerpoint_xp::TextRange** TextRange/*[out,retval]*/);
  Powerpoint_xp::TextRange* __fastcall get_TextRange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChildShapeRange(Powerpoint_xp::ShapeRange** ChildShapeRange/*[out,retval]*/);
  Powerpoint_xp::ShapeRange* __fastcall get_ChildShapeRange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasChildShapeRange(VARIANT_BOOL* HasChildShapeRange/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasChildShapeRange(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::PpSelectionType Type = {read = get_Type};
  __property   Powerpoint_xp::SlideRange* SlideRange = {read = get_SlideRange};
  __property   Powerpoint_xp::ShapeRange* ShapeRange = {read = get_ShapeRange};
  __property   Powerpoint_xp::TextRange* TextRange = {read = get_TextRange};
  __property   Powerpoint_xp::ShapeRange* ChildShapeRange = {read = get_ChildShapeRange};
  __property   VARIANT_BOOL    HasChildShapeRange = {read = get_HasChildShapeRange};
};
typedef SelectionDispT<Selection> SelectionDisp;

typedef TComInterface<DocumentWindows>  TCOMDocumentWindows;

// *********************************************************************//
// DispIntf:  DocumentWindows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493455-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class DocumentWindowsDispT : public TAutoDriver<DocumentWindows>
{
public:
  DocumentWindowsDispT(){}

  DocumentWindowsDispT(DocumentWindows *pintf)
  {
    TAutoDriver<DocumentWindows>::Bind(pintf, false);
  }

  DocumentWindowsDispT(DocumentWindowsPtr pintf)
  {
    TAutoDriver<DocumentWindows>::Bind(pintf, true);
  }

  DocumentWindowsDispT& operator=(DocumentWindows *pintf)
  {
    TAutoDriver<DocumentWindows>::Bind(pintf, false);
    return *this;
  }

  DocumentWindowsDispT& operator=(DocumentWindowsPtr pintf)
  {
    TAutoDriver<DocumentWindows>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, 
                                             Powerpoint_xp::DocumentWindow** Item/*[out,retval]*/);
  Powerpoint_xp::DocumentWindow* __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Arrange(Powerpoint_xp::PpArrangeStyle arrangeStyle/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef DocumentWindowsDispT<DocumentWindows> DocumentWindowsDisp;

typedef TComInterface<SlideShowWindows>  TCOMSlideShowWindows;

// *********************************************************************//
// DispIntf:  SlideShowWindows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493456-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SlideShowWindowsDispT : public TAutoDriver<SlideShowWindows>
{
public:
  SlideShowWindowsDispT(){}

  SlideShowWindowsDispT(SlideShowWindows *pintf)
  {
    TAutoDriver<SlideShowWindows>::Bind(pintf, false);
  }

  SlideShowWindowsDispT(SlideShowWindowsPtr pintf)
  {
    TAutoDriver<SlideShowWindows>::Bind(pintf, true);
  }

  SlideShowWindowsDispT& operator=(SlideShowWindows *pintf)
  {
    TAutoDriver<SlideShowWindows>::Bind(pintf, false);
    return *this;
  }

  SlideShowWindowsDispT& operator=(SlideShowWindowsPtr pintf)
  {
    TAutoDriver<SlideShowWindows>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, 
                                             Powerpoint_xp::SlideShowWindow** Item/*[out,retval]*/);
  Powerpoint_xp::SlideShowWindow* __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef SlideShowWindowsDispT<SlideShowWindows> SlideShowWindowsDisp;

typedef TComInterface<DocumentWindow>  TCOMDocumentWindow;

// *********************************************************************//
// DispIntf:  DocumentWindow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493457-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class DocumentWindowDispT : public TAutoDriver<DocumentWindow>
{
public:
  DocumentWindowDispT(){}

  DocumentWindowDispT(DocumentWindow *pintf)
  {
    TAutoDriver<DocumentWindow>::Bind(pintf, false);
  }

  DocumentWindowDispT(DocumentWindowPtr pintf)
  {
    TAutoDriver<DocumentWindow>::Bind(pintf, true);
  }

  DocumentWindowDispT& operator=(DocumentWindow *pintf)
  {
    TAutoDriver<DocumentWindow>::Bind(pintf, false);
    return *this;
  }

  DocumentWindowDispT& operator=(DocumentWindowPtr pintf)
  {
    TAutoDriver<DocumentWindow>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selection(Powerpoint_xp::Selection** Selection/*[out,retval]*/);
  Powerpoint_xp::Selection* __fastcall get_Selection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_View(Powerpoint_xp::View** View/*[out,retval]*/);
  Powerpoint_xp::View* __fastcall get_View(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Presentation(Powerpoint_xp::PowerPointPresentation** Presentation/*[out,retval]*/);
  Powerpoint_xp::PowerPointPresentation* __fastcall get_Presentation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ViewType(Powerpoint_xp::PpViewType* ViewType/*[out,retval]*/);
  Powerpoint_xp::PpViewType __fastcall get_ViewType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ViewType(Powerpoint_xp::PpViewType ViewType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BlackAndWhite(Office_xp::MsoTriState* BlackAndWhite/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_BlackAndWhite(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BlackAndWhite(Office_xp::MsoTriState BlackAndWhite/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Active(Office_xp::MsoTriState* Active/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Active(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WindowState(Powerpoint_xp::PpWindowState* WindowState/*[out,retval]*/);
  Powerpoint_xp::PpWindowState __fastcall get_WindowState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WindowState(Powerpoint_xp::PpWindowState WindowState/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FitToPage();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Activate();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LargeScroll(int Down/*[in,def,opt]*/, int Up/*[in,def,opt]*/
                                                    , int ToRight/*[in,def,opt]*/, 
                                                    int ToLeft/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SmallScroll(int Down/*[in,def,opt]*/, int Up/*[in,def,opt]*/
                                                    , int ToRight/*[in,def,opt]*/, 
                                                    int ToLeft/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NewWindow(Powerpoint_xp::DocumentWindow** NewWindow/*[out,retval]*/);
  Powerpoint_xp::DocumentWindow* __fastcall NewWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Close();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActivePane(Powerpoint_xp::Pane** ActivePane/*[out,retval]*/);
  Powerpoint_xp::Pane* __fastcall get_ActivePane(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Panes(Powerpoint_xp::Panes** Panes/*[out,retval]*/);
  Powerpoint_xp::Panes* __fastcall get_Panes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SplitVertical(long* SplitVertical/*[out,retval]*/);
  long            __fastcall get_SplitVertical(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SplitVertical(long SplitVertical/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SplitHorizontal(long* SplitHorizontal/*[out,retval]*/);
  long            __fastcall get_SplitHorizontal(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SplitHorizontal(long SplitHorizontal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RangeFromPoint(int X/*[in]*/, int Y/*[in]*/, 
                                                       LPDISPATCH* RangeFromPoint/*[out,retval]*/);
  LPDISPATCH      __fastcall RangeFromPoint(int X/*[in]*/, int Y/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PointsToScreenPixelsX(float Points/*[in]*/, 
                                                              int* PointsToScreenPixelsX/*[out,retval]*/);
  int             __fastcall PointsToScreenPixelsX(float Points/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PointsToScreenPixelsY(float Points/*[in]*/, 
                                                              int* PointsToScreenPixelsY/*[out,retval]*/);
  int             __fastcall PointsToScreenPixelsY(float Points/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScrollIntoView(float Left/*[in]*/, float Top/*[in]*/, 
                                                       float Width/*[in]*/, float Height/*[in]*/, 
                                                       Office_xp::MsoTriState Start/*[in,def,opt]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Selection* Selection = {read = get_Selection};
  __property   Powerpoint_xp::View* View = {read = get_View};
  __property   Powerpoint_xp::PowerPointPresentation* Presentation = {read = get_Presentation};
  __property   Powerpoint_xp::PpViewType ViewType = {read = get_ViewType, write = set_ViewType};
  __property   Office_xp::MsoTriState BlackAndWhite = {read = get_BlackAndWhite, write = set_BlackAndWhite};
  __property   Office_xp::MsoTriState Active = {read = get_Active};
  __property   Powerpoint_xp::PpWindowState WindowState = {read = get_WindowState, write = set_WindowState};
  __property   BSTR            Caption = {read = get_Caption};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   Powerpoint_xp::Pane* ActivePane = {read = get_ActivePane};
  __property   Powerpoint_xp::Panes* Panes = {read = get_Panes};
  __property   long            SplitVertical = {read = get_SplitVertical, write = set_SplitVertical};
  __property   long            SplitHorizontal = {read = get_SplitHorizontal, write = set_SplitHorizontal};
};
typedef DocumentWindowDispT<DocumentWindow> DocumentWindowDisp;

typedef TComInterface<View>  TCOMView;

// *********************************************************************//
// DispIntf:  View
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493458-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ViewDispT : public TAutoDriver<View>
{
public:
  ViewDispT(){}

  ViewDispT(View *pintf)
  {
    TAutoDriver<View>::Bind(pintf, false);
  }

  ViewDispT(ViewPtr pintf)
  {
    TAutoDriver<View>::Bind(pintf, true);
  }

  ViewDispT& operator=(View *pintf)
  {
    TAutoDriver<View>::Bind(pintf, false);
    return *this;
  }

  ViewDispT& operator=(ViewPtr pintf)
  {
    TAutoDriver<View>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Powerpoint_xp::PpViewType* Type/*[out,retval]*/);
  Powerpoint_xp::PpViewType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Zoom(int* Zoom/*[out,retval]*/);
  int             __fastcall get_Zoom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Zoom(int Zoom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Paste();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Slide(LPDISPATCH* Slide/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Slide(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Slide(LPDISPATCH Slide/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GotoSlide(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplaySlideMiniature(Office_xp::MsoTriState* DisplaySlideMiniature/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_DisplaySlideMiniature(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplaySlideMiniature(Office_xp::MsoTriState DisplaySlideMiniature/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ZoomToFit(Office_xp::MsoTriState* ZoomToFit/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_ZoomToFit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ZoomToFit(Office_xp::MsoTriState ZoomToFit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PasteSpecial(Powerpoint_xp::PpPasteDataType DataType/*[in,def,opt]*/
                                                     , 
                                                     Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/
                                                     , BSTR IconFileName/*[in,def,opt]*/, 
                                                     int IconIndex/*[in,def,opt]*/, 
                                                     BSTR IconLabel/*[in,def,opt]*/, 
                                                     Office_xp::MsoTriState Link/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrintOptions(Powerpoint_xp::PrintOptions** PrintOptions/*[out,retval]*/);
  Powerpoint_xp::PrintOptions* __fastcall get_PrintOptions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PrintOut(int From/*[in,def,opt]*/, int To/*[in,def,opt]*/, 
                                                 BSTR PrintToFile/*[in,def,opt]*/, 
                                                 int Copies/*[in,def,opt]*/, 
                                                 Office_xp::MsoTriState Collate/*[in,def,opt]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::PpViewType Type = {read = get_Type};
  __property   int             Zoom = {read = get_Zoom, write = set_Zoom};
  __property   LPDISPATCH      Slide = {read = get_Slide, write = set_Slide};
  __property   Office_xp::MsoTriState DisplaySlideMiniature = {read = get_DisplaySlideMiniature, write = set_DisplaySlideMiniature};
  __property   Office_xp::MsoTriState ZoomToFit = {read = get_ZoomToFit, write = set_ZoomToFit};
  __property   Powerpoint_xp::PrintOptions* PrintOptions = {read = get_PrintOptions};
};
typedef ViewDispT<View> ViewDisp;

typedef TComInterface<SlideShowView>  TCOMSlideShowView;

// *********************************************************************//
// DispIntf:  SlideShowView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493459-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SlideShowViewDispT : public TAutoDriver<SlideShowView>
{
public:
  SlideShowViewDispT(){}

  SlideShowViewDispT(SlideShowView *pintf)
  {
    TAutoDriver<SlideShowView>::Bind(pintf, false);
  }

  SlideShowViewDispT(SlideShowViewPtr pintf)
  {
    TAutoDriver<SlideShowView>::Bind(pintf, true);
  }

  SlideShowViewDispT& operator=(SlideShowView *pintf)
  {
    TAutoDriver<SlideShowView>::Bind(pintf, false);
    return *this;
  }

  SlideShowViewDispT& operator=(SlideShowViewPtr pintf)
  {
    TAutoDriver<SlideShowView>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Zoom(int* Zoom/*[out,retval]*/);
  int             __fastcall get_Zoom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Slide(Powerpoint_xp::PowerPointSlide** Slide/*[out,retval]*/);
  Powerpoint_xp::PowerPointSlide* __fastcall get_Slide(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PointerType(Powerpoint_xp::PpSlideShowPointerType* PointerType/*[out,retval]*/);
  Powerpoint_xp::PpSlideShowPointerType __fastcall get_PointerType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PointerType(Powerpoint_xp::PpSlideShowPointerType PointerType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_State(Powerpoint_xp::PpSlideShowState* State/*[out,retval]*/);
  Powerpoint_xp::PpSlideShowState __fastcall get_State(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_State(Powerpoint_xp::PpSlideShowState State/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AcceleratorsEnabled(Office_xp::MsoTriState* AcceleratorsEnabled/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_AcceleratorsEnabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AcceleratorsEnabled(Office_xp::MsoTriState AcceleratorsEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresentationElapsedTime(float* PresentationElapsedTime/*[out,retval]*/);
  float           __fastcall get_PresentationElapsedTime(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideElapsedTime(float* SlideElapsedTime/*[out,retval]*/);
  float           __fastcall get_SlideElapsedTime(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SlideElapsedTime(float SlideElapsedTime/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LastSlideViewed(Powerpoint_xp::PowerPointSlide** LastSlideViewed/*[out,retval]*/);
  Powerpoint_xp::PowerPointSlide* __fastcall get_LastSlideViewed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AdvanceMode(Powerpoint_xp::PpSlideShowAdvanceMode* AdvanceMode/*[out,retval]*/);
  Powerpoint_xp::PpSlideShowAdvanceMode __fastcall get_AdvanceMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PointerColor(Powerpoint_xp::ColorFormat** PointerColor/*[out,retval]*/);
  Powerpoint_xp::ColorFormat* __fastcall get_PointerColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsNamedShow(Office_xp::MsoTriState* IsNamedShow/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_IsNamedShow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/);
  BSTR            __fastcall get_SlideShowName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DrawLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                 float EndX/*[in]*/, float EndY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EraseDrawing();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall First();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Last();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Next();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Previous();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GotoSlide(int Index/*[in]*/, 
                                                  Office_xp::MsoTriState ResetSlide/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GotoNamedShow(BSTR SlideShowName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EndNamedShow();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ResetSlideTime();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Exit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InstallTracker(Powerpoint_xp::MouseTracker* pTracker/*[in]*/
                                                       , Office_xp::MsoTriState Presenter/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurrentShowPosition(int* CurrentShowPosition/*[out,retval]*/);
  int             __fastcall get_CurrentShowPosition(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Zoom = {read = get_Zoom};
  __property   Powerpoint_xp::PowerPointSlide* Slide = {read = get_Slide};
  __property   Powerpoint_xp::PpSlideShowPointerType PointerType = {read = get_PointerType, write = set_PointerType};
  __property   Powerpoint_xp::PpSlideShowState State = {read = get_State, write = set_State};
  __property   Office_xp::MsoTriState AcceleratorsEnabled = {read = get_AcceleratorsEnabled, write = set_AcceleratorsEnabled};
  __property   float           PresentationElapsedTime = {read = get_PresentationElapsedTime};
  __property   float           SlideElapsedTime = {read = get_SlideElapsedTime, write = set_SlideElapsedTime};
  __property   Powerpoint_xp::PowerPointSlide* LastSlideViewed = {read = get_LastSlideViewed};
  __property   Powerpoint_xp::PpSlideShowAdvanceMode AdvanceMode = {read = get_AdvanceMode};
  __property   Powerpoint_xp::ColorFormat* PointerColor = {read = get_PointerColor};
  __property   Office_xp::MsoTriState IsNamedShow = {read = get_IsNamedShow};
  __property   BSTR            SlideShowName = {read = get_SlideShowName};
  __property   int             CurrentShowPosition = {read = get_CurrentShowPosition};
};
typedef SlideShowViewDispT<SlideShowView> SlideShowViewDisp;

typedef TComInterface<SlideShowSettings>  TCOMSlideShowSettings;

// *********************************************************************//
// DispIntf:  SlideShowSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SlideShowSettingsDispT : public TAutoDriver<SlideShowSettings>
{
public:
  SlideShowSettingsDispT(){}

  SlideShowSettingsDispT(SlideShowSettings *pintf)
  {
    TAutoDriver<SlideShowSettings>::Bind(pintf, false);
  }

  SlideShowSettingsDispT(SlideShowSettingsPtr pintf)
  {
    TAutoDriver<SlideShowSettings>::Bind(pintf, true);
  }

  SlideShowSettingsDispT& operator=(SlideShowSettings *pintf)
  {
    TAutoDriver<SlideShowSettings>::Bind(pintf, false);
    return *this;
  }

  SlideShowSettingsDispT& operator=(SlideShowSettingsPtr pintf)
  {
    TAutoDriver<SlideShowSettings>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PointerColor(Powerpoint_xp::ColorFormat** PointerColor/*[out,retval]*/);
  Powerpoint_xp::ColorFormat* __fastcall get_PointerColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NamedSlideShows(Powerpoint_xp::NamedSlideShows** NamedSlideShows/*[out,retval]*/);
  Powerpoint_xp::NamedSlideShows* __fastcall get_NamedSlideShows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StartingSlide(int* StartingSlide/*[out,retval]*/);
  int             __fastcall get_StartingSlide(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StartingSlide(int StartingSlide/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndingSlide(int* EndingSlide/*[out,retval]*/);
  int             __fastcall get_EndingSlide(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EndingSlide(int EndingSlide/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AdvanceMode(Powerpoint_xp::PpSlideShowAdvanceMode* AdvanceMode/*[out,retval]*/);
  Powerpoint_xp::PpSlideShowAdvanceMode __fastcall get_AdvanceMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AdvanceMode(Powerpoint_xp::PpSlideShowAdvanceMode AdvanceMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Run(Powerpoint_xp::SlideShowWindow** Run/*[out,retval]*/);
  Powerpoint_xp::SlideShowWindow* __fastcall Run(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LoopUntilStopped(Office_xp::MsoTriState* LoopUntilStopped/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_LoopUntilStopped(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LoopUntilStopped(Office_xp::MsoTriState LoopUntilStopped/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowType(Powerpoint_xp::PpSlideShowType* ShowType/*[out,retval]*/);
  Powerpoint_xp::PpSlideShowType __fastcall get_ShowType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowType(Powerpoint_xp::PpSlideShowType ShowType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowWithNarration(Office_xp::MsoTriState* ShowWithNarration/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_ShowWithNarration(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowWithNarration(Office_xp::MsoTriState ShowWithNarration/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowWithAnimation(Office_xp::MsoTriState* ShowWithAnimation/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_ShowWithAnimation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowWithAnimation(Office_xp::MsoTriState ShowWithAnimation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/);
  BSTR            __fastcall get_SlideShowName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SlideShowName(BSTR SlideShowName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RangeType(Powerpoint_xp::PpSlideShowRangeType* RangeType/*[out,retval]*/);
  Powerpoint_xp::PpSlideShowRangeType __fastcall get_RangeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RangeType(Powerpoint_xp::PpSlideShowRangeType RangeType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowScrollbar(Office_xp::MsoTriState* ShowScrollbar/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_ShowScrollbar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowScrollbar(Office_xp::MsoTriState ShowScrollbar/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ColorFormat* PointerColor = {read = get_PointerColor};
  __property   Powerpoint_xp::NamedSlideShows* NamedSlideShows = {read = get_NamedSlideShows};
  __property   int             StartingSlide = {read = get_StartingSlide, write = set_StartingSlide};
  __property   int             EndingSlide = {read = get_EndingSlide, write = set_EndingSlide};
  __property   Powerpoint_xp::PpSlideShowAdvanceMode AdvanceMode = {read = get_AdvanceMode, write = set_AdvanceMode};
  __property   Office_xp::MsoTriState LoopUntilStopped = {read = get_LoopUntilStopped, write = set_LoopUntilStopped};
  __property   Powerpoint_xp::PpSlideShowType ShowType = {read = get_ShowType, write = set_ShowType};
  __property   Office_xp::MsoTriState ShowWithNarration = {read = get_ShowWithNarration, write = set_ShowWithNarration};
  __property   Office_xp::MsoTriState ShowWithAnimation = {read = get_ShowWithAnimation, write = set_ShowWithAnimation};
  __property   BSTR            SlideShowName = {read = get_SlideShowName};
  __property   Powerpoint_xp::PpSlideShowRangeType RangeType = {read = get_RangeType, write = set_RangeType};
  __property   Office_xp::MsoTriState ShowScrollbar = {read = get_ShowScrollbar, write = set_ShowScrollbar};
};
typedef SlideShowSettingsDispT<SlideShowSettings> SlideShowSettingsDisp;

typedef TComInterface<NamedSlideShows>  TCOMNamedSlideShows;

// *********************************************************************//
// DispIntf:  NamedSlideShows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class NamedSlideShowsDispT : public TAutoDriver<NamedSlideShows>
{
public:
  NamedSlideShowsDispT(){}

  NamedSlideShowsDispT(NamedSlideShows *pintf)
  {
    TAutoDriver<NamedSlideShows>::Bind(pintf, false);
  }

  NamedSlideShowsDispT(NamedSlideShowsPtr pintf)
  {
    TAutoDriver<NamedSlideShows>::Bind(pintf, true);
  }

  NamedSlideShowsDispT& operator=(NamedSlideShows *pintf)
  {
    TAutoDriver<NamedSlideShows>::Bind(pintf, false);
    return *this;
  }

  NamedSlideShowsDispT& operator=(NamedSlideShowsPtr pintf)
  {
    TAutoDriver<NamedSlideShows>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT Index/*[in]*/, 
                                             Powerpoint_xp::NamedSlideShow** Item/*[out,retval]*/);
  Powerpoint_xp::NamedSlideShow* __fastcall Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR Name/*[in]*/, VARIANT safeArrayOfSlideIDs/*[in]*/, 
                                            Powerpoint_xp::NamedSlideShow** Add/*[out,retval]*/);
  Powerpoint_xp::NamedSlideShow* __fastcall Add(BSTR Name/*[in]*/, 
                                                VARIANT safeArrayOfSlideIDs/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef NamedSlideShowsDispT<NamedSlideShows> NamedSlideShowsDisp;

typedef TComInterface<NamedSlideShow>  TCOMNamedSlideShow;

// *********************************************************************//
// DispIntf:  NamedSlideShow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class NamedSlideShowDispT : public TAutoDriver<NamedSlideShow>
{
public:
  NamedSlideShowDispT(){}

  NamedSlideShowDispT(NamedSlideShow *pintf)
  {
    TAutoDriver<NamedSlideShow>::Bind(pintf, false);
  }

  NamedSlideShowDispT(NamedSlideShowPtr pintf)
  {
    TAutoDriver<NamedSlideShow>::Bind(pintf, true);
  }

  NamedSlideShowDispT& operator=(NamedSlideShow *pintf)
  {
    TAutoDriver<NamedSlideShow>::Bind(pintf, false);
    return *this;
  }

  NamedSlideShowDispT& operator=(NamedSlideShowPtr pintf)
  {
    TAutoDriver<NamedSlideShow>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideIDs(VARIANT* SlideIDs/*[out,retval]*/);
  VARIANT         __fastcall get_SlideIDs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   long            Count = {read = get_Count};
};
typedef NamedSlideShowDispT<NamedSlideShow> NamedSlideShowDisp;

typedef TComInterface<PrintOptions>  TCOMPrintOptions;

// *********************************************************************//
// DispIntf:  PrintOptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PrintOptionsDispT : public TAutoDriver<PrintOptions>
{
public:
  PrintOptionsDispT(){}

  PrintOptionsDispT(PrintOptions *pintf)
  {
    TAutoDriver<PrintOptions>::Bind(pintf, false);
  }

  PrintOptionsDispT(PrintOptionsPtr pintf)
  {
    TAutoDriver<PrintOptions>::Bind(pintf, true);
  }

  PrintOptionsDispT& operator=(PrintOptions *pintf)
  {
    TAutoDriver<PrintOptions>::Bind(pintf, false);
    return *this;
  }

  PrintOptionsDispT& operator=(PrintOptionsPtr pintf)
  {
    TAutoDriver<PrintOptions>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrintColorType(Powerpoint_xp::PpPrintColorType* PrintColorType/*[out,retval]*/);
  Powerpoint_xp::PpPrintColorType __fastcall get_PrintColorType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PrintColorType(Powerpoint_xp::PpPrintColorType PrintColorType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Collate(Office_xp::MsoTriState* Collate/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Collate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Collate(Office_xp::MsoTriState Collate/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FitToPage(Office_xp::MsoTriState* FitToPage/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_FitToPage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FitToPage(Office_xp::MsoTriState FitToPage/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FrameSlides(Office_xp::MsoTriState* FrameSlides/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_FrameSlides(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FrameSlides(Office_xp::MsoTriState FrameSlides/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NumberOfCopies(int* NumberOfCopies/*[out,retval]*/);
  int             __fastcall get_NumberOfCopies(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NumberOfCopies(int NumberOfCopies/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OutputType(Powerpoint_xp::PpPrintOutputType* OutputType/*[out,retval]*/);
  Powerpoint_xp::PpPrintOutputType __fastcall get_OutputType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OutputType(Powerpoint_xp::PpPrintOutputType OutputType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrintHiddenSlides(Office_xp::MsoTriState* PrintHiddenSlides/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_PrintHiddenSlides(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PrintHiddenSlides(Office_xp::MsoTriState PrintHiddenSlides/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrintInBackground(Office_xp::MsoTriState* PrintInBackground/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_PrintInBackground(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PrintInBackground(Office_xp::MsoTriState PrintInBackground/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RangeType(Powerpoint_xp::PpPrintRangeType* RangeType/*[out,retval]*/);
  Powerpoint_xp::PpPrintRangeType __fastcall get_RangeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RangeType(Powerpoint_xp::PpPrintRangeType RangeType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Ranges(Powerpoint_xp::PrintRanges** Ranges/*[out,retval]*/);
  Powerpoint_xp::PrintRanges* __fastcall get_Ranges(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrintFontsAsGraphics(Office_xp::MsoTriState* PrintFontsAsGraphics/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_PrintFontsAsGraphics(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PrintFontsAsGraphics(Office_xp::MsoTriState PrintFontsAsGraphics/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/);
  BSTR            __fastcall get_SlideShowName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SlideShowName(BSTR SlideShowName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActivePrinter(BSTR* ActivePrinter/*[out,retval]*/);
  BSTR            __fastcall get_ActivePrinter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ActivePrinter(BSTR ActivePrinter/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HandoutOrder(Powerpoint_xp::PpPrintHandoutOrder* HandoutOrder/*[out,retval]*/);
  Powerpoint_xp::PpPrintHandoutOrder __fastcall get_HandoutOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HandoutOrder(Powerpoint_xp::PpPrintHandoutOrder HandoutOrder/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrintComments(Office_xp::MsoTriState* PrintComments/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_PrintComments(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PrintComments(Office_xp::MsoTriState PrintComments/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   Powerpoint_xp::PpPrintColorType PrintColorType = {read = get_PrintColorType, write = set_PrintColorType};
  __property   Office_xp::MsoTriState Collate = {read = get_Collate, write = set_Collate};
  __property   Office_xp::MsoTriState FitToPage = {read = get_FitToPage, write = set_FitToPage};
  __property   Office_xp::MsoTriState FrameSlides = {read = get_FrameSlides, write = set_FrameSlides};
  __property   int             NumberOfCopies = {read = get_NumberOfCopies, write = set_NumberOfCopies};
  __property   Powerpoint_xp::PpPrintOutputType OutputType = {read = get_OutputType, write = set_OutputType};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoTriState PrintHiddenSlides = {read = get_PrintHiddenSlides, write = set_PrintHiddenSlides};
  __property   Office_xp::MsoTriState PrintInBackground = {read = get_PrintInBackground, write = set_PrintInBackground};
  __property   Powerpoint_xp::PpPrintRangeType RangeType = {read = get_RangeType, write = set_RangeType};
  __property   Powerpoint_xp::PrintRanges* Ranges = {read = get_Ranges};
  __property   Office_xp::MsoTriState PrintFontsAsGraphics = {read = get_PrintFontsAsGraphics, write = set_PrintFontsAsGraphics};
  __property   BSTR            SlideShowName = {read = get_SlideShowName};
  __property   BSTR            ActivePrinter = {read = get_ActivePrinter};
  __property   Powerpoint_xp::PpPrintHandoutOrder HandoutOrder = {read = get_HandoutOrder, write = set_HandoutOrder};
  __property   Office_xp::MsoTriState PrintComments = {read = get_PrintComments, write = set_PrintComments};
};
typedef PrintOptionsDispT<PrintOptions> PrintOptionsDisp;

typedef TComInterface<PrintRanges>  TCOMPrintRanges;

// *********************************************************************//
// DispIntf:  PrintRanges
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PrintRangesDispT : public TAutoDriver<PrintRanges>
{
public:
  PrintRangesDispT(){}

  PrintRangesDispT(PrintRanges *pintf)
  {
    TAutoDriver<PrintRanges>::Bind(pintf, false);
  }

  PrintRangesDispT(PrintRangesPtr pintf)
  {
    TAutoDriver<PrintRanges>::Bind(pintf, true);
  }

  PrintRangesDispT& operator=(PrintRanges *pintf)
  {
    TAutoDriver<PrintRanges>::Bind(pintf, false);
    return *this;
  }

  PrintRangesDispT& operator=(PrintRangesPtr pintf)
  {
    TAutoDriver<PrintRanges>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(int Start/*[in]*/, int End/*[in]*/, 
                                            Powerpoint_xp::PrintRange** Add/*[out,retval]*/);
  Powerpoint_xp::PrintRange* __fastcall Add(int Start/*[in]*/, int End/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearAll();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, 
                                             Powerpoint_xp::PrintRange** Item/*[out,retval]*/);
  Powerpoint_xp::PrintRange* __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef PrintRangesDispT<PrintRanges> PrintRangesDisp;

typedef TComInterface<PrintRange>  TCOMPrintRange;

// *********************************************************************//
// DispIntf:  PrintRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PrintRangeDispT : public TAutoDriver<PrintRange>
{
public:
  PrintRangeDispT(){}

  PrintRangeDispT(PrintRange *pintf)
  {
    TAutoDriver<PrintRange>::Bind(pintf, false);
  }

  PrintRangeDispT(PrintRangePtr pintf)
  {
    TAutoDriver<PrintRange>::Bind(pintf, true);
  }

  PrintRangeDispT& operator=(PrintRange *pintf)
  {
    TAutoDriver<PrintRange>::Bind(pintf, false);
    return *this;
  }

  PrintRangeDispT& operator=(PrintRangePtr pintf)
  {
    TAutoDriver<PrintRange>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Start(int* Start/*[out,retval]*/);
  int             __fastcall get_Start(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_End(int* End/*[out,retval]*/);
  int             __fastcall get_End(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Start = {read = get_Start};
  __property   int             End = {read = get_End};
};
typedef PrintRangeDispT<PrintRange> PrintRangeDisp;

typedef TComInterface<AddIns>  TCOMAddIns;

// *********************************************************************//
// DispIntf:  AddIns
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493460-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class AddInsDispT : public TAutoDriver<AddIns>
{
public:
  AddInsDispT(){}

  AddInsDispT(AddIns *pintf)
  {
    TAutoDriver<AddIns>::Bind(pintf, false);
  }

  AddInsDispT(AddInsPtr pintf)
  {
    TAutoDriver<AddIns>::Bind(pintf, true);
  }

  AddInsDispT& operator=(AddIns *pintf)
  {
    TAutoDriver<AddIns>::Bind(pintf, false);
    return *this;
  }

  AddInsDispT& operator=(AddInsPtr pintf)
  {
    TAutoDriver<AddIns>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT* Index/*[in]*/, 
                                             Powerpoint_xp::AddIn** Item/*[out,retval]*/);
  Powerpoint_xp::AddIn* __fastcall Item(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR FileName/*[in]*/, 
                                            Powerpoint_xp::AddIn** Add/*[out,retval]*/);
  Powerpoint_xp::AddIn* __fastcall Add(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef AddInsDispT<AddIns> AddInsDisp;

typedef TComInterface<AddIn>  TCOMAddIn;

// *********************************************************************//
// DispIntf:  AddIn
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493461-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class AddInDispT : public TAutoDriver<AddIn>
{
public:
  AddInDispT(){}

  AddInDispT(AddIn *pintf)
  {
    TAutoDriver<AddIn>::Bind(pintf, false);
  }

  AddInDispT(AddInPtr pintf)
  {
    TAutoDriver<AddIn>::Bind(pintf, true);
  }

  AddInDispT& operator=(AddIn *pintf)
  {
    TAutoDriver<AddIn>::Bind(pintf, false);
    return *this;
  }

  AddInDispT& operator=(AddInPtr pintf)
  {
    TAutoDriver<AddIn>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FullName(BSTR* FullName/*[out,retval]*/);
  BSTR            __fastcall get_FullName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Path(BSTR* Path/*[out,retval]*/);
  BSTR            __fastcall get_Path(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Registered(Office_xp::MsoTriState* Registered/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Registered(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Registered(Office_xp::MsoTriState Registered/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoLoad(Office_xp::MsoTriState* AutoLoad/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_AutoLoad(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoLoad(Office_xp::MsoTriState AutoLoad/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Loaded(Office_xp::MsoTriState* Loaded/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Loaded(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Loaded(Office_xp::MsoTriState Loaded/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayAlerts(Office_xp::MsoTriState* DisplayAlerts/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_DisplayAlerts(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayAlerts(Office_xp::MsoTriState DisplayAlerts/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RegisteredInHKLM(Office_xp::MsoTriState* RegisteredInHKLM/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_RegisteredInHKLM(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            FullName = {read = get_FullName};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Path = {read = get_Path};
  __property   Office_xp::MsoTriState Registered = {read = get_Registered, write = set_Registered};
  __property   Office_xp::MsoTriState AutoLoad = {read = get_AutoLoad, write = set_AutoLoad};
  __property   Office_xp::MsoTriState Loaded = {read = get_Loaded, write = set_Loaded};
  __property   Office_xp::MsoTriState DisplayAlerts = {read = get_DisplayAlerts, write = set_DisplayAlerts};
  __property   Office_xp::MsoTriState RegisteredInHKLM = {read = get_RegisteredInHKLM};
};
typedef AddInDispT<AddIn> AddInDisp;

typedef TComInterface<Presentations>  TCOMPresentations;

// *********************************************************************//
// DispIntf:  Presentations
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493462-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PresentationsDispT : public TAutoDriver<Presentations>
{
public:
  PresentationsDispT(){}

  PresentationsDispT(Presentations *pintf)
  {
    TAutoDriver<Presentations>::Bind(pintf, false);
  }

  PresentationsDispT(PresentationsPtr pintf)
  {
    TAutoDriver<Presentations>::Bind(pintf, true);
  }

  PresentationsDispT& operator=(Presentations *pintf)
  {
    TAutoDriver<Presentations>::Bind(pintf, false);
    return *this;
  }

  PresentationsDispT& operator=(PresentationsPtr pintf)
  {
    TAutoDriver<Presentations>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT Index/*[in]*/, 
                                             Powerpoint_xp::PowerPointPresentation** Item/*[out,retval]*/);
  Powerpoint_xp::PowerPointPresentation* __fastcall Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Office_xp::MsoTriState WithWindow/*[in,def,opt]*/, 
                                            Powerpoint_xp::PowerPointPresentation** Add/*[out,retval]*/);
  Powerpoint_xp::PowerPointPresentation* __fastcall Add(Office_xp::MsoTriState WithWindow/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OpenOld(BSTR FileName/*[in]*/, 
                                                Office_xp::MsoTriState ReadOnly/*[in,def,opt]*/, 
                                                Office_xp::MsoTriState Untitled/*[in,def,opt]*/, 
                                                Office_xp::MsoTriState WithWindow/*[in,def,opt]*/, 
                                                Powerpoint_xp::PowerPointPresentation** OpenOld/*[out,retval]*/);
  Powerpoint_xp::PowerPointPresentation* __fastcall OpenOld(BSTR FileName/*[in]*/, 
                                                            Office_xp::MsoTriState ReadOnly/*[in,def,opt]*/, 
                                                            Office_xp::MsoTriState Untitled/*[in,def,opt]*/, 
                                                            Office_xp::MsoTriState WithWindow/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Open(BSTR FileName/*[in]*/, 
                                             Office_xp::MsoTriState ReadOnly/*[in,def,opt]*/, 
                                             Office_xp::MsoTriState Untitled/*[in,def,opt]*/, 
                                             Office_xp::MsoTriState WithWindow/*[in,def,opt]*/, 
                                             Powerpoint_xp::PowerPointPresentation** Open/*[out,retval]*/);
  Powerpoint_xp::PowerPointPresentation* __fastcall Open(BSTR FileName/*[in]*/, 
                                                         Office_xp::MsoTriState ReadOnly/*[in,def,opt]*/, 
                                                         Office_xp::MsoTriState Untitled/*[in,def,opt]*/, 
                                                         Office_xp::MsoTriState WithWindow/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CheckOut(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CanCheckOut(BSTR FileName/*[in]*/, 
                                                    VARIANT_BOOL* CanCheckOut/*[out,retval]*/);
  VARIANT_BOOL    __fastcall CanCheckOut(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef PresentationsDispT<Presentations> PresentationsDisp;

typedef TComInterface<PresEvents>  TCOMPresEvents;

// *********************************************************************//
// SmartIntf: TCOM_Presentation
// Interface: _Presentation
// *********************************************************************//
template <class T /* _Presentation */ >
class TCOM_PresentationT : public TComInterface<_Presentation>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_PresentationT() {}
  TCOM_PresentationT(_Presentation *intf, bool addRef = false) : TComInterface<_Presentation>(intf, addRef) {}
  TCOM_PresentationT(const TCOM_PresentationT& src) : TComInterface<_Presentation>(src) {}
  TCOM_PresentationT& operator=(const TCOM_PresentationT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  HRESULT         __fastcall get_Application(Powerpoint_xp::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_SlideMaster(Powerpoint_xp::_Master** SlideMaster/*[out,retval]*/);
  HRESULT         __fastcall get_SlideMaster(Powerpoint_xp::_MasterPtr* SlideMaster/*[out,retval]*/);
  Powerpoint_xp::_MasterPtr __fastcall get_SlideMaster(void);
  HRESULT         __fastcall get_TitleMaster(Powerpoint_xp::_Master** TitleMaster/*[out,retval]*/);
  HRESULT         __fastcall get_TitleMaster(Powerpoint_xp::_MasterPtr* TitleMaster/*[out,retval]*/);
  Powerpoint_xp::_MasterPtr __fastcall get_TitleMaster(void);
  HRESULT         __fastcall get_HasTitleMaster(Office_xp::MsoTriState* HasTitleMaster/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_HasTitleMaster(void);
  HRESULT         __fastcall AddTitleMaster(Powerpoint_xp::_Master** TitleMaster/*[out,retval]*/);
  Powerpoint_xp::_Master* __fastcall AddTitleMaster(void);
  HRESULT         __fastcall ApplyTemplate(BSTR FileName/*[in]*/);
  HRESULT         __fastcall get_TemplateName(BSTR* TemplateName/*[out,retval]*/);
  BSTR            __fastcall get_TemplateName(void);
  HRESULT         __fastcall get_NotesMaster(Powerpoint_xp::_Master** NotesMaster/*[out,retval]*/);
  HRESULT         __fastcall get_NotesMaster(Powerpoint_xp::_MasterPtr* NotesMaster/*[out,retval]*/);
  Powerpoint_xp::_MasterPtr __fastcall get_NotesMaster(void);
  HRESULT         __fastcall get_HandoutMaster(Powerpoint_xp::_Master** HandoutMaster/*[out,retval]*/);
  HRESULT         __fastcall get_HandoutMaster(Powerpoint_xp::_MasterPtr* HandoutMaster/*[out,retval]*/);
  Powerpoint_xp::_MasterPtr __fastcall get_HandoutMaster(void);
  HRESULT         __fastcall get_Slides(Powerpoint_xp::Slides** Slides/*[out,retval]*/);
  HRESULT         __fastcall get_Slides(Powerpoint_xp::SlidesPtr* Slides/*[out,retval]*/);
  Powerpoint_xp::SlidesPtr __fastcall get_Slides(void);
  HRESULT         __fastcall get_PageSetup(Powerpoint_xp::PageSetup** PageSetup/*[out,retval]*/);
  HRESULT         __fastcall get_PageSetup(Powerpoint_xp::PageSetupPtr* PageSetup/*[out,retval]*/);
  Powerpoint_xp::PageSetupPtr __fastcall get_PageSetup(void);
  HRESULT         __fastcall get_ColorSchemes(Powerpoint_xp::ColorSchemes** ColorSchemes/*[out,retval]*/);
  HRESULT         __fastcall get_ColorSchemes(Powerpoint_xp::ColorSchemesPtr* ColorSchemes/*[out,retval]*/);
  Powerpoint_xp::ColorSchemesPtr __fastcall get_ColorSchemes(void);
  HRESULT         __fastcall get_ExtraColors(Powerpoint_xp::ExtraColors** ExtraColors/*[out,retval]*/);
  HRESULT         __fastcall get_ExtraColors(Powerpoint_xp::ExtraColorsPtr* ExtraColors/*[out,retval]*/);
  Powerpoint_xp::ExtraColorsPtr __fastcall get_ExtraColors(void);
  HRESULT         __fastcall get_SlideShowSettings(Powerpoint_xp::SlideShowSettings** SlideShowSettings/*[out,retval]*/);
  HRESULT         __fastcall get_SlideShowSettings(Powerpoint_xp::SlideShowSettingsPtr* SlideShowSettings/*[out,retval]*/);
  Powerpoint_xp::SlideShowSettingsPtr __fastcall get_SlideShowSettings(void);
  HRESULT         __fastcall get_Fonts(Powerpoint_xp::Fonts** Fonts/*[out,retval]*/);
  HRESULT         __fastcall get_Fonts(Powerpoint_xp::FontsPtr* Fonts/*[out,retval]*/);
  Powerpoint_xp::FontsPtr __fastcall get_Fonts(void);
  HRESULT         __fastcall get_Windows(Powerpoint_xp::DocumentWindows** Windows/*[out,retval]*/);
  HRESULT         __fastcall get_Windows(Powerpoint_xp::DocumentWindowsPtr* Windows/*[out,retval]*/);
  Powerpoint_xp::DocumentWindowsPtr __fastcall get_Windows(void);
  HRESULT         __fastcall get_Tags(Powerpoint_xp::Tags** Tags/*[out,retval]*/);
  HRESULT         __fastcall get_Tags(Powerpoint_xp::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_xp::TagsPtr __fastcall get_Tags(void);
  HRESULT         __fastcall get_DefaultShape(Powerpoint_xp::Shape** DefaultShape/*[out,retval]*/);
  HRESULT         __fastcall get_DefaultShape(Powerpoint_xp::ShapePtr* DefaultShape/*[out,retval]*/);
  Powerpoint_xp::ShapePtr __fastcall get_DefaultShape(void);
  HRESULT         __fastcall get_BuiltInDocumentProperties(LPDISPATCH* BuiltInDocumentProperties/*[out,retval]*/);
  LPDISPATCH      __fastcall get_BuiltInDocumentProperties(void);
  HRESULT         __fastcall get_CustomDocumentProperties(LPDISPATCH* CustomDocumentProperties/*[out,retval]*/);
  LPDISPATCH      __fastcall get_CustomDocumentProperties(void);
  HRESULT         __fastcall get_VBProject(Vbide_xp::VBProject** VBProject/*[out,retval]*/);
  HRESULT         __fastcall get_VBProject(Vbide_xp::VBProjectPtr* VBProject/*[out,retval]*/);
  Vbide_xp::VBProjectPtr __fastcall get_VBProject(void);
  HRESULT         __fastcall get_ReadOnly(Office_xp::MsoTriState* ReadOnly/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_ReadOnly(void);
  HRESULT         __fastcall get_FullName(BSTR* FullName/*[out,retval]*/);
  BSTR            __fastcall get_FullName(void);
  HRESULT         __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall get_Path(BSTR* Path/*[out,retval]*/);
  BSTR            __fastcall get_Path(void);
  HRESULT         __fastcall get_Saved(Office_xp::MsoTriState* Saved/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Saved(void);
  HRESULT         __fastcall set_Saved(Office_xp::MsoTriState Saved/*[in]*/);
  HRESULT         __fastcall get_LayoutDirection(Powerpoint_xp::PpDirection* LayoutDirection/*[out,retval]*/);
  Powerpoint_xp::PpDirection __fastcall get_LayoutDirection(void);
  HRESULT         __fastcall set_LayoutDirection(Powerpoint_xp::PpDirection LayoutDirection/*[in]*/);
  HRESULT         __fastcall NewWindow(Powerpoint_xp::DocumentWindow** NewWindow/*[out,retval]*/);
  Powerpoint_xp::DocumentWindow* __fastcall NewWindow(void);
  HRESULT         __fastcall FollowHyperlink(BSTR Address/*[in]*/, BSTR SubAddress/*[in,def,opt]*/, 
                                             VARIANT_BOOL NewWindow/*[in,def,opt]*/, 
                                             VARIANT_BOOL AddHistory/*[in,def,opt]*/, 
                                             BSTR ExtraInfo/*[in,def,opt]*/, 
                                             Office_xp::MsoExtraInfoMethod Method/*[in,def,opt]*/, 
                                             BSTR HeaderInfo/*[in,def,opt]*/);
  HRESULT         __fastcall AddToFavorites(void);
  HRESULT         __fastcall Unused(void);
  HRESULT         __fastcall get_PrintOptions(Powerpoint_xp::PrintOptions** PrintOptions/*[out,retval]*/);
  HRESULT         __fastcall get_PrintOptions(Powerpoint_xp::PrintOptionsPtr* PrintOptions/*[out,retval]*/);
  Powerpoint_xp::PrintOptionsPtr __fastcall get_PrintOptions(void);
  HRESULT         __fastcall PrintOut(int From/*[in,def,opt]*/, int To/*[in,def,opt]*/, 
                                      BSTR PrintToFile/*[in,def,opt]*/, int Copies/*[in,def,opt]*/, 
                                      Office_xp::MsoTriState Collate/*[in,def,opt]*/);
  HRESULT         __fastcall Save(void);
  HRESULT         __fastcall SaveAs(BSTR FileName/*[in]*/, 
                                    Powerpoint_xp::PpSaveAsFileType FileFormat/*[in,def,opt]*/, 
                                    Office_xp::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/);
  HRESULT         __fastcall SaveCopyAs(BSTR FileName/*[in]*/, 
                                        Powerpoint_xp::PpSaveAsFileType FileFormat/*[in,def,opt]*/, 
                                        Office_xp::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/);
  HRESULT         __fastcall Export(BSTR Path/*[in]*/, BSTR FilterName/*[in]*/, 
                                    int ScaleWidth/*[in,def,opt]*/, int ScaleHeight/*[in,def,opt]*/);
  HRESULT         __fastcall Close(void);
  HRESULT         __fastcall SetUndoText(BSTR Text/*[in]*/);
  HRESULT         __fastcall get_Container(LPDISPATCH* Container/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Container(void);
  HRESULT         __fastcall get_DisplayComments(Office_xp::MsoTriState* DisplayComments/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_DisplayComments(void);
  HRESULT         __fastcall set_DisplayComments(Office_xp::MsoTriState DisplayComments/*[in]*/);
  HRESULT         __fastcall get_FarEastLineBreakLevel(Powerpoint_xp::PpFarEastLineBreakLevel* FarEastLineBreakLevel/*[out,retval]*/);
  Powerpoint_xp::PpFarEastLineBreakLevel __fastcall get_FarEastLineBreakLevel(void);
  HRESULT         __fastcall set_FarEastLineBreakLevel(Powerpoint_xp::PpFarEastLineBreakLevel FarEastLineBreakLevel/*[in]*/);
  HRESULT         __fastcall get_NoLineBreakBefore(BSTR* NoLineBreakBefore/*[out,retval]*/);
  BSTR            __fastcall get_NoLineBreakBefore(void);
  HRESULT         __fastcall set_NoLineBreakBefore(BSTR NoLineBreakBefore/*[in]*/);
  HRESULT         __fastcall get_NoLineBreakAfter(BSTR* NoLineBreakAfter/*[out,retval]*/);
  BSTR            __fastcall get_NoLineBreakAfter(void);
  HRESULT         __fastcall set_NoLineBreakAfter(BSTR NoLineBreakAfter/*[in]*/);
  HRESULT         __fastcall UpdateLinks(void);
  HRESULT         __fastcall get_SlideShowWindow(Powerpoint_xp::SlideShowWindow** SlideShowWindow/*[out,retval]*/);
  HRESULT         __fastcall get_SlideShowWindow(Powerpoint_xp::SlideShowWindowPtr* SlideShowWindow/*[out,retval]*/);
  Powerpoint_xp::SlideShowWindowPtr __fastcall get_SlideShowWindow(void);
  HRESULT         __fastcall get_FarEastLineBreakLanguage(Office_xp::MsoFarEastLineBreakLanguageID* FarEastLineBreakLanguage/*[out,retval]*/);
  Office_xp::MsoFarEastLineBreakLanguageID __fastcall get_FarEastLineBreakLanguage(void);
  HRESULT         __fastcall set_FarEastLineBreakLanguage(Office_xp::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage/*[in]*/);
  HRESULT         __fastcall WebPagePreview(void);
  HRESULT         __fastcall get_DefaultLanguageID(Office_xp::MsoLanguageID* DefaultLanguageID/*[out,retval]*/);
  Office_xp::MsoLanguageID __fastcall get_DefaultLanguageID(void);
  HRESULT         __fastcall set_DefaultLanguageID(Office_xp::MsoLanguageID DefaultLanguageID/*[in]*/);
  HRESULT         __fastcall get_CommandBars(Office_xp::CommandBars** CommandBars/*[out,retval]*/);
  HRESULT         __fastcall get_CommandBars(Office_xp::CommandBarsPtr* CommandBars/*[out,retval]*/);
  Office_xp::CommandBarsPtr __fastcall get_CommandBars(void);
  HRESULT         __fastcall get_PublishObjects(Powerpoint_xp::PublishObjects** PublishObjects/*[out,retval]*/);
  HRESULT         __fastcall get_PublishObjects(Powerpoint_xp::PublishObjectsPtr* PublishObjects/*[out,retval]*/);
  Powerpoint_xp::PublishObjectsPtr __fastcall get_PublishObjects(void);
  HRESULT         __fastcall get_WebOptions(Powerpoint_xp::WebOptions** WebOptions/*[out,retval]*/);
  HRESULT         __fastcall get_WebOptions(Powerpoint_xp::WebOptionsPtr* WebOptions/*[out,retval]*/);
  Powerpoint_xp::WebOptionsPtr __fastcall get_WebOptions(void);
  HRESULT         __fastcall get_HTMLProject(Office_xp::HTMLProject** HTMLProject/*[out,retval]*/);
  HRESULT         __fastcall get_HTMLProject(Office_xp::HTMLProjectPtr* HTMLProject/*[out,retval]*/);
  Office_xp::HTMLProjectPtr __fastcall get_HTMLProject(void);
  HRESULT         __fastcall ReloadAs(Office_xp::MsoEncoding cp/*[in]*/);
  HRESULT         __fastcall MakeIntoTemplate(Office_xp::MsoTriState IsDesignTemplate/*[in]*/);
  HRESULT         __fastcall get_EnvelopeVisible(Office_xp::MsoTriState* EnvelopeVisible/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_EnvelopeVisible(void);
  HRESULT         __fastcall set_EnvelopeVisible(Office_xp::MsoTriState EnvelopeVisible/*[in]*/);
  HRESULT         __fastcall sblt(BSTR s/*[in]*/);
  HRESULT         __fastcall get_VBASigned(Office_xp::MsoTriState* VBASigned/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_VBASigned(void);
  HRESULT         __fastcall get_SnapToGrid(Office_xp::MsoTriState* SnapToGrid/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_SnapToGrid(void);
  HRESULT         __fastcall set_SnapToGrid(Office_xp::MsoTriState SnapToGrid/*[in]*/);
  HRESULT         __fastcall get_GridDistance(float* GridDistance/*[out,retval]*/);
  float           __fastcall get_GridDistance(void);
  HRESULT         __fastcall set_GridDistance(float GridDistance/*[in]*/);
  HRESULT         __fastcall get_Designs(Powerpoint_xp::Designs** Designs/*[out,retval]*/);
  HRESULT         __fastcall get_Designs(Powerpoint_xp::DesignsPtr* Designs/*[out,retval]*/);
  Powerpoint_xp::DesignsPtr __fastcall get_Designs(void);
  HRESULT         __fastcall Merge(BSTR Path/*[in]*/);
  HRESULT         __fastcall CheckIn(VARIANT_BOOL SaveChanges/*[in,def,opt]*/, 
                                     VARIANT Comments/*[in,opt]*/= TNoParam(), 
                                     VARIANT MakePublic/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall CanCheckIn(VARIANT_BOOL* CanCheckIn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall CanCheckIn(void);
  HRESULT         __fastcall get_Signatures(Office_xp::SignatureSet** Signatures/*[out,retval]*/);
  HRESULT         __fastcall get_Signatures(Office_xp::SignatureSetPtr* Signatures/*[out,retval]*/);
  Office_xp::SignatureSetPtr __fastcall get_Signatures(void);
  HRESULT         __fastcall get_RemovePersonalInformation(Office_xp::MsoTriState* RemovePersonalInformation/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_RemovePersonalInformation(void);
  HRESULT         __fastcall set_RemovePersonalInformation(Office_xp::MsoTriState RemovePersonalInformation/*[in]*/);
  HRESULT         __fastcall SendForReview(BSTR Recipients/*[in,def,opt]*/, 
                                           BSTR Subject/*[in,def,opt]*/, 
                                           VARIANT_BOOL ShowMessage/*[in,def,opt]*/, 
                                           VARIANT IncludeAttachment/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall ReplyWithChanges(VARIANT_BOOL ShowMessage/*[in,def,opt]*/);
  HRESULT         __fastcall EndReview(void);
  HRESULT         __fastcall get_HasRevisionInfo(Powerpoint_xp::PpRevisionInfo* HasRevisionInfo/*[out,retval]*/);
  Powerpoint_xp::PpRevisionInfo __fastcall get_HasRevisionInfo(void);
  HRESULT         __fastcall AddBaseline(BSTR FileName/*[in,def,opt]*/);
  HRESULT         __fastcall RemoveBaseline(void);
  HRESULT         __fastcall get_PasswordEncryptionProvider(BSTR* PasswordEncryptionProvider/*[out,retval]*/);
  BSTR            __fastcall get_PasswordEncryptionProvider(void);
  HRESULT         __fastcall get_PasswordEncryptionAlgorithm(BSTR* PasswordEncryptionAlgorithm/*[out,retval]*/);
  BSTR            __fastcall get_PasswordEncryptionAlgorithm(void);
  HRESULT         __fastcall get_PasswordEncryptionKeyLength(int* PasswordEncryptionKeyLength/*[out,retval]*/);
  int             __fastcall get_PasswordEncryptionKeyLength(void);
  HRESULT         __fastcall get_PasswordEncryptionFileProperties(VARIANT_BOOL* PasswordEncryptionFileProperties/*[out,retval]*/);
  HRESULT         __fastcall get_PasswordEncryptionFileProperties(TOLEBOOL* PasswordEncryptionFileProperties/*[out,retval]*/);
  TOLEBOOL        __fastcall get_PasswordEncryptionFileProperties(void);
  HRESULT         __fastcall SetPasswordEncryptionOptions(BSTR PasswordEncryptionProvider/*[in]*/, 
                                                          BSTR PasswordEncryptionAlgorithm/*[in]*/, 
                                                          int PasswordEncryptionKeyLength/*[in]*/, 
                                                          VARIANT_BOOL PasswordEncryptionFileProperties/*[in]*/);
  HRESULT         __fastcall get_Password(BSTR* Password/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall set_Password(BSTR Password/*[in]*/);
  HRESULT         __fastcall get_WritePassword(BSTR* WritePassword/*[out,retval]*/);
  BSTR            __fastcall get_WritePassword(void);
  HRESULT         __fastcall set_WritePassword(BSTR WritePassword/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::_MasterPtr SlideMaster = {read = get_SlideMaster};
  __property   Powerpoint_xp::_MasterPtr TitleMaster = {read = get_TitleMaster};
  __property   Office_xp::MsoTriState HasTitleMaster = {read = get_HasTitleMaster};
  __property   BSTR            TemplateName = {read = get_TemplateName};
  __property   Powerpoint_xp::_MasterPtr NotesMaster = {read = get_NotesMaster};
  __property   Powerpoint_xp::_MasterPtr HandoutMaster = {read = get_HandoutMaster};
  __property   Powerpoint_xp::SlidesPtr Slides = {read = get_Slides};
  __property   Powerpoint_xp::PageSetupPtr PageSetup = {read = get_PageSetup};
  __property   Powerpoint_xp::ColorSchemesPtr ColorSchemes = {read = get_ColorSchemes};
  __property   Powerpoint_xp::ExtraColorsPtr ExtraColors = {read = get_ExtraColors};
  __property   Powerpoint_xp::SlideShowSettingsPtr SlideShowSettings = {read = get_SlideShowSettings};
  __property   Powerpoint_xp::FontsPtr Fonts = {read = get_Fonts};
  __property   Powerpoint_xp::DocumentWindowsPtr Windows = {read = get_Windows};
  __property   Powerpoint_xp::TagsPtr Tags = {read = get_Tags};
  __property   Powerpoint_xp::ShapePtr DefaultShape = {read = get_DefaultShape};
  __property   LPDISPATCH      BuiltInDocumentProperties = {read = get_BuiltInDocumentProperties};
  __property   LPDISPATCH      CustomDocumentProperties = {read = get_CustomDocumentProperties};
  __property   Vbide_xp::VBProjectPtr VBProject = {read = get_VBProject};
  __property   Office_xp::MsoTriState ReadOnly = {read = get_ReadOnly};
  __property   BSTR            FullName = {read = get_FullName};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Path = {read = get_Path};
  __property   Office_xp::MsoTriState Saved = {read = get_Saved, write = set_Saved};
  __property   Powerpoint_xp::PpDirection LayoutDirection = {read = get_LayoutDirection, write = set_LayoutDirection};
  __property   Powerpoint_xp::PrintOptionsPtr PrintOptions = {read = get_PrintOptions};
  __property   LPDISPATCH      Container = {read = get_Container};
  __property   Office_xp::MsoTriState DisplayComments = {read = get_DisplayComments, write = set_DisplayComments};
  __property   Powerpoint_xp::PpFarEastLineBreakLevel FarEastLineBreakLevel = {read = get_FarEastLineBreakLevel, write = set_FarEastLineBreakLevel};
  __property   BSTR            NoLineBreakBefore = {read = get_NoLineBreakBefore};
  __property   BSTR            NoLineBreakAfter = {read = get_NoLineBreakAfter};
  __property   Powerpoint_xp::SlideShowWindowPtr SlideShowWindow = {read = get_SlideShowWindow};
  __property   Office_xp::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage = {read = get_FarEastLineBreakLanguage, write = set_FarEastLineBreakLanguage};
  __property   Office_xp::MsoLanguageID DefaultLanguageID = {read = get_DefaultLanguageID, write = set_DefaultLanguageID};
  __property   Office_xp::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   Powerpoint_xp::PublishObjectsPtr PublishObjects = {read = get_PublishObjects};
  __property   Powerpoint_xp::WebOptionsPtr WebOptions = {read = get_WebOptions};
  __property   Office_xp::HTMLProjectPtr HTMLProject = {read = get_HTMLProject};
  __property   Office_xp::MsoTriState EnvelopeVisible = {read = get_EnvelopeVisible, write = set_EnvelopeVisible};
  __property   Office_xp::MsoTriState VBASigned = {read = get_VBASigned};
  __property   Office_xp::MsoTriState SnapToGrid = {read = get_SnapToGrid, write = set_SnapToGrid};
  __property   float           GridDistance = {read = get_GridDistance, write = set_GridDistance};
  __property   Powerpoint_xp::DesignsPtr Designs = {read = get_Designs};
  __property   Office_xp::SignatureSetPtr Signatures = {read = get_Signatures};
  __property   Office_xp::MsoTriState RemovePersonalInformation = {read = get_RemovePersonalInformation, write = set_RemovePersonalInformation};
  __property   Powerpoint_xp::PpRevisionInfo HasRevisionInfo = {read = get_HasRevisionInfo};
  __property   BSTR            PasswordEncryptionProvider = {read = get_PasswordEncryptionProvider};
  __property   BSTR            PasswordEncryptionAlgorithm = {read = get_PasswordEncryptionAlgorithm};
  __property   int             PasswordEncryptionKeyLength = {read = get_PasswordEncryptionKeyLength};
  __property   TOLEBOOL        PasswordEncryptionFileProperties = {read = get_PasswordEncryptionFileProperties};
  __property   BSTR            Password = {read = get_Password};
  __property   BSTR            WritePassword = {read = get_WritePassword};
};
typedef TCOM_PresentationT<_Presentation> TCOM_Presentation;

// *********************************************************************//
// DispIntf:  _Presentation
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class _PresentationDispT : public TAutoDriver<_Presentation>
{
public:
  _PresentationDispT(){}

  _PresentationDispT(_Presentation *pintf)
  {
    TAutoDriver<_Presentation>::Bind(pintf, false);
  }

  _PresentationDispT(_PresentationPtr pintf)
  {
    TAutoDriver<_Presentation>::Bind(pintf, true);
  }

  _PresentationDispT& operator=(_Presentation *pintf)
  {
    TAutoDriver<_Presentation>::Bind(pintf, false);
    return *this;
  }

  _PresentationDispT& operator=(_PresentationPtr pintf)
  {
    TAutoDriver<_Presentation>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PowerPointPresentation));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PowerPointPresentation);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideMaster(Powerpoint_xp::_Master** SlideMaster/*[out,retval]*/);
  Powerpoint_xp::_Master* __fastcall get_SlideMaster(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TitleMaster(Powerpoint_xp::_Master** TitleMaster/*[out,retval]*/);
  Powerpoint_xp::_Master* __fastcall get_TitleMaster(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasTitleMaster(Office_xp::MsoTriState* HasTitleMaster/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_HasTitleMaster(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTitleMaster(Powerpoint_xp::_Master** TitleMaster/*[out,retval]*/);
  Powerpoint_xp::_Master* __fastcall AddTitleMaster(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyTemplate(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TemplateName(BSTR* TemplateName/*[out,retval]*/);
  BSTR            __fastcall get_TemplateName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NotesMaster(Powerpoint_xp::_Master** NotesMaster/*[out,retval]*/);
  Powerpoint_xp::_Master* __fastcall get_NotesMaster(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HandoutMaster(Powerpoint_xp::_Master** HandoutMaster/*[out,retval]*/);
  Powerpoint_xp::_Master* __fastcall get_HandoutMaster(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Slides(Powerpoint_xp::Slides** Slides/*[out,retval]*/);
  Powerpoint_xp::Slides* __fastcall get_Slides(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PageSetup(Powerpoint_xp::PageSetup** PageSetup/*[out,retval]*/);
  Powerpoint_xp::PageSetup* __fastcall get_PageSetup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorSchemes(Powerpoint_xp::ColorSchemes** ColorSchemes/*[out,retval]*/);
  Powerpoint_xp::ColorSchemes* __fastcall get_ColorSchemes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ExtraColors(Powerpoint_xp::ExtraColors** ExtraColors/*[out,retval]*/);
  Powerpoint_xp::ExtraColors* __fastcall get_ExtraColors(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowSettings(Powerpoint_xp::SlideShowSettings** SlideShowSettings/*[out,retval]*/);
  Powerpoint_xp::SlideShowSettings* __fastcall get_SlideShowSettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fonts(Powerpoint_xp::Fonts** Fonts/*[out,retval]*/);
  Powerpoint_xp::Fonts* __fastcall get_Fonts(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Windows(Powerpoint_xp::DocumentWindows** Windows/*[out,retval]*/);
  Powerpoint_xp::DocumentWindows* __fastcall get_Windows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_xp::Tags** Tags/*[out,retval]*/);
  Powerpoint_xp::Tags* __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultShape(Powerpoint_xp::Shape** DefaultShape/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall get_DefaultShape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuiltInDocumentProperties(LPDISPATCH* BuiltInDocumentProperties/*[out,retval]*/);
  LPDISPATCH      __fastcall get_BuiltInDocumentProperties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CustomDocumentProperties(LPDISPATCH* CustomDocumentProperties/*[out,retval]*/);
  LPDISPATCH      __fastcall get_CustomDocumentProperties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBProject(Vbide_xp::VBProject** VBProject/*[out,retval]*/);
  Vbide_xp::VBProject* __fastcall get_VBProject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(Office_xp::MsoTriState* ReadOnly/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FullName(BSTR* FullName/*[out,retval]*/);
  BSTR            __fastcall get_FullName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Path(BSTR* Path/*[out,retval]*/);
  BSTR            __fastcall get_Path(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Saved(Office_xp::MsoTriState* Saved/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Saved(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Saved(Office_xp::MsoTriState Saved/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LayoutDirection(Powerpoint_xp::PpDirection* LayoutDirection/*[out,retval]*/);
  Powerpoint_xp::PpDirection __fastcall get_LayoutDirection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LayoutDirection(Powerpoint_xp::PpDirection LayoutDirection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NewWindow(Powerpoint_xp::DocumentWindow** NewWindow/*[out,retval]*/);
  Powerpoint_xp::DocumentWindow* __fastcall NewWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FollowHyperlink(BSTR Address/*[in]*/, 
                                                        BSTR SubAddress/*[in,def,opt]*/, 
                                                        VARIANT_BOOL NewWindow/*[in,def,opt]*/, 
                                                        VARIANT_BOOL AddHistory/*[in,def,opt]*/, 
                                                        BSTR ExtraInfo/*[in,def,opt]*/, 
                                                        Office_xp::MsoExtraInfoMethod Method/*[in,def,opt]*/
                                                        , BSTR HeaderInfo/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddToFavorites();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Unused();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrintOptions(Powerpoint_xp::PrintOptions** PrintOptions/*[out,retval]*/);
  Powerpoint_xp::PrintOptions* __fastcall get_PrintOptions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PrintOut(int From/*[in,def,opt]*/, int To/*[in,def,opt]*/, 
                                                 BSTR PrintToFile/*[in,def,opt]*/, 
                                                 int Copies/*[in,def,opt]*/, 
                                                 Office_xp::MsoTriState Collate/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Save();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SaveAs(BSTR FileName/*[in]*/, 
                                               Powerpoint_xp::PpSaveAsFileType FileFormat/*[in,def,opt]*/
                                               , 
                                               Office_xp::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SaveCopyAs(BSTR FileName/*[in]*/, 
                                                   Powerpoint_xp::PpSaveAsFileType FileFormat/*[in,def,opt]*/
                                                   , 
                                                   Office_xp::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Export(BSTR Path/*[in]*/, BSTR FilterName/*[in]*/, 
                                               int ScaleWidth/*[in,def,opt]*/, 
                                               int ScaleHeight/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Close();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetUndoText(BSTR Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Container(LPDISPATCH* Container/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Container(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayComments(Office_xp::MsoTriState* DisplayComments/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_DisplayComments(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayComments(Office_xp::MsoTriState DisplayComments/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FarEastLineBreakLevel(Powerpoint_xp::PpFarEastLineBreakLevel* FarEastLineBreakLevel/*[out,retval]*/);
  Powerpoint_xp::PpFarEastLineBreakLevel __fastcall get_FarEastLineBreakLevel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FarEastLineBreakLevel(Powerpoint_xp::PpFarEastLineBreakLevel FarEastLineBreakLevel/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NoLineBreakBefore(BSTR* NoLineBreakBefore/*[out,retval]*/);
  BSTR            __fastcall get_NoLineBreakBefore(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NoLineBreakBefore(BSTR NoLineBreakBefore/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NoLineBreakAfter(BSTR* NoLineBreakAfter/*[out,retval]*/);
  BSTR            __fastcall get_NoLineBreakAfter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NoLineBreakAfter(BSTR NoLineBreakAfter/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UpdateLinks();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowWindow(Powerpoint_xp::SlideShowWindow** SlideShowWindow/*[out,retval]*/);
  Powerpoint_xp::SlideShowWindow* __fastcall get_SlideShowWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FarEastLineBreakLanguage(Office_xp::MsoFarEastLineBreakLanguageID* FarEastLineBreakLanguage/*[out,retval]*/);
  Office_xp::MsoFarEastLineBreakLanguageID __fastcall get_FarEastLineBreakLanguage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FarEastLineBreakLanguage(Office_xp::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall WebPagePreview();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultLanguageID(Office_xp::MsoLanguageID* DefaultLanguageID/*[out,retval]*/);
  Office_xp::MsoLanguageID __fastcall get_DefaultLanguageID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultLanguageID(Office_xp::MsoLanguageID DefaultLanguageID/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandBars(Office_xp::CommandBars** CommandBars/*[out,retval]*/);
  Office_xp::CommandBars* __fastcall get_CommandBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PublishObjects(Powerpoint_xp::PublishObjects** PublishObjects/*[out,retval]*/);
  Powerpoint_xp::PublishObjects* __fastcall get_PublishObjects(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WebOptions(Powerpoint_xp::WebOptions** WebOptions/*[out,retval]*/);
  Powerpoint_xp::WebOptions* __fastcall get_WebOptions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLProject(Office_xp::HTMLProject** HTMLProject/*[out,retval]*/);
  Office_xp::HTMLProject* __fastcall get_HTMLProject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ReloadAs(Office_xp::MsoEncoding cp/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MakeIntoTemplate(Office_xp::MsoTriState IsDesignTemplate/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EnvelopeVisible(Office_xp::MsoTriState* EnvelopeVisible/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_EnvelopeVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EnvelopeVisible(Office_xp::MsoTriState EnvelopeVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall sblt(BSTR s/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBASigned(Office_xp::MsoTriState* VBASigned/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_VBASigned(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SnapToGrid(Office_xp::MsoTriState* SnapToGrid/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_SnapToGrid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SnapToGrid(Office_xp::MsoTriState SnapToGrid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GridDistance(float* GridDistance/*[out,retval]*/);
  float           __fastcall get_GridDistance(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GridDistance(float GridDistance/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Designs(Powerpoint_xp::Designs** Designs/*[out,retval]*/);
  Powerpoint_xp::Designs* __fastcall get_Designs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Merge(BSTR Path/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CheckIn(VARIANT_BOOL SaveChanges/*[in,def,opt]*/, 
                                                VARIANT Comments/*[in,opt]*/= TNoParam(), 
                                                VARIANT MakePublic/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CanCheckIn(VARIANT_BOOL* CanCheckIn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall CanCheckIn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Signatures(Office_xp::SignatureSet** Signatures/*[out,retval]*/);
  Office_xp::SignatureSet* __fastcall get_Signatures(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RemovePersonalInformation(Office_xp::MsoTriState* RemovePersonalInformation/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_RemovePersonalInformation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RemovePersonalInformation(Office_xp::MsoTriState RemovePersonalInformation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SendForReview(BSTR Recipients/*[in,def,opt]*/, 
                                                      BSTR Subject/*[in,def,opt]*/, 
                                                      VARIANT_BOOL ShowMessage/*[in,def,opt]*/, 
                                                      VARIANT IncludeAttachment/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ReplyWithChanges(VARIANT_BOOL ShowMessage/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EndReview();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasRevisionInfo(Powerpoint_xp::PpRevisionInfo* HasRevisionInfo/*[out,retval]*/);
  Powerpoint_xp::PpRevisionInfo __fastcall get_HasRevisionInfo(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddBaseline(BSTR FileName/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemoveBaseline();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PasswordEncryptionProvider(BSTR* PasswordEncryptionProvider/*[out,retval]*/);
  BSTR            __fastcall get_PasswordEncryptionProvider(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PasswordEncryptionAlgorithm(BSTR* PasswordEncryptionAlgorithm/*[out,retval]*/);
  BSTR            __fastcall get_PasswordEncryptionAlgorithm(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PasswordEncryptionKeyLength(int* PasswordEncryptionKeyLength/*[out,retval]*/);
  int             __fastcall get_PasswordEncryptionKeyLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PasswordEncryptionFileProperties(VARIANT_BOOL* PasswordEncryptionFileProperties/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PasswordEncryptionFileProperties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetPasswordEncryptionOptions(BSTR PasswordEncryptionProvider/*[in]*/
                                                                     , 
                                                                     BSTR PasswordEncryptionAlgorithm/*[in]*/
                                                                     , 
                                                                     int PasswordEncryptionKeyLength/*[in]*/
                                                                     , 
                                                                     VARIANT_BOOL PasswordEncryptionFileProperties/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Password(BSTR* Password/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Password(BSTR Password/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WritePassword(BSTR* WritePassword/*[out,retval]*/);
  BSTR            __fastcall get_WritePassword(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WritePassword(BSTR WritePassword/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::_Master* SlideMaster = {read = get_SlideMaster};
  __property   Powerpoint_xp::_Master* TitleMaster = {read = get_TitleMaster};
  __property   Office_xp::MsoTriState HasTitleMaster = {read = get_HasTitleMaster};
  __property   BSTR            TemplateName = {read = get_TemplateName};
  __property   Powerpoint_xp::_Master* NotesMaster = {read = get_NotesMaster};
  __property   Powerpoint_xp::_Master* HandoutMaster = {read = get_HandoutMaster};
  __property   Powerpoint_xp::Slides* Slides = {read = get_Slides};
  __property   Powerpoint_xp::PageSetup* PageSetup = {read = get_PageSetup};
  __property   Powerpoint_xp::ColorSchemes* ColorSchemes = {read = get_ColorSchemes};
  __property   Powerpoint_xp::ExtraColors* ExtraColors = {read = get_ExtraColors};
  __property   Powerpoint_xp::SlideShowSettings* SlideShowSettings = {read = get_SlideShowSettings};
  __property   Powerpoint_xp::Fonts* Fonts = {read = get_Fonts};
  __property   Powerpoint_xp::DocumentWindows* Windows = {read = get_Windows};
  __property   Powerpoint_xp::Tags* Tags = {read = get_Tags};
  __property   Powerpoint_xp::Shape* DefaultShape = {read = get_DefaultShape};
  __property   LPDISPATCH      BuiltInDocumentProperties = {read = get_BuiltInDocumentProperties};
  __property   LPDISPATCH      CustomDocumentProperties = {read = get_CustomDocumentProperties};
  __property   Vbide_xp::VBProject* VBProject = {read = get_VBProject};
  __property   Office_xp::MsoTriState ReadOnly = {read = get_ReadOnly};
  __property   BSTR            FullName = {read = get_FullName};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Path = {read = get_Path};
  __property   Office_xp::MsoTriState Saved = {read = get_Saved, write = set_Saved};
  __property   Powerpoint_xp::PpDirection LayoutDirection = {read = get_LayoutDirection, write = set_LayoutDirection};
  __property   Powerpoint_xp::PrintOptions* PrintOptions = {read = get_PrintOptions};
  __property   LPDISPATCH      Container = {read = get_Container};
  __property   Office_xp::MsoTriState DisplayComments = {read = get_DisplayComments, write = set_DisplayComments};
  __property   Powerpoint_xp::PpFarEastLineBreakLevel FarEastLineBreakLevel = {read = get_FarEastLineBreakLevel, write = set_FarEastLineBreakLevel};
  __property   BSTR            NoLineBreakBefore = {read = get_NoLineBreakBefore};
  __property   BSTR            NoLineBreakAfter = {read = get_NoLineBreakAfter};
  __property   Powerpoint_xp::SlideShowWindow* SlideShowWindow = {read = get_SlideShowWindow};
  __property   Office_xp::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage = {read = get_FarEastLineBreakLanguage, write = set_FarEastLineBreakLanguage};
  __property   Office_xp::MsoLanguageID DefaultLanguageID = {read = get_DefaultLanguageID, write = set_DefaultLanguageID};
  __property   Office_xp::CommandBars* CommandBars = {read = get_CommandBars};
  __property   Powerpoint_xp::PublishObjects* PublishObjects = {read = get_PublishObjects};
  __property   Powerpoint_xp::WebOptions* WebOptions = {read = get_WebOptions};
  __property   Office_xp::HTMLProject* HTMLProject = {read = get_HTMLProject};
  __property   Office_xp::MsoTriState EnvelopeVisible = {read = get_EnvelopeVisible, write = set_EnvelopeVisible};
  __property   Office_xp::MsoTriState VBASigned = {read = get_VBASigned};
  __property   Office_xp::MsoTriState SnapToGrid = {read = get_SnapToGrid, write = set_SnapToGrid};
  __property   float           GridDistance = {read = get_GridDistance, write = set_GridDistance};
  __property   Powerpoint_xp::Designs* Designs = {read = get_Designs};
  __property   Office_xp::SignatureSet* Signatures = {read = get_Signatures};
  __property   Office_xp::MsoTriState RemovePersonalInformation = {read = get_RemovePersonalInformation, write = set_RemovePersonalInformation};
  __property   Powerpoint_xp::PpRevisionInfo HasRevisionInfo = {read = get_HasRevisionInfo};
  __property   BSTR            PasswordEncryptionProvider = {read = get_PasswordEncryptionProvider};
  __property   BSTR            PasswordEncryptionAlgorithm = {read = get_PasswordEncryptionAlgorithm};
  __property   int             PasswordEncryptionKeyLength = {read = get_PasswordEncryptionKeyLength};
  __property   VARIANT_BOOL    PasswordEncryptionFileProperties = {read = get_PasswordEncryptionFileProperties};
  __property   BSTR            Password = {read = get_Password};
  __property   BSTR            WritePassword = {read = get_WritePassword};
};
typedef _PresentationDispT<_Presentation> _PresentationDisp;

typedef TComInterface<Hyperlinks>  TCOMHyperlinks;

// *********************************************************************//
// DispIntf:  Hyperlinks
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493464-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class HyperlinksDispT : public TAutoDriver<Hyperlinks>
{
public:
  HyperlinksDispT(){}

  HyperlinksDispT(Hyperlinks *pintf)
  {
    TAutoDriver<Hyperlinks>::Bind(pintf, false);
  }

  HyperlinksDispT(HyperlinksPtr pintf)
  {
    TAutoDriver<Hyperlinks>::Bind(pintf, true);
  }

  HyperlinksDispT& operator=(Hyperlinks *pintf)
  {
    TAutoDriver<Hyperlinks>::Bind(pintf, false);
    return *this;
  }

  HyperlinksDispT& operator=(HyperlinksPtr pintf)
  {
    TAutoDriver<Hyperlinks>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, 
                                             Powerpoint_xp::Hyperlink** Item/*[out,retval]*/);
  Powerpoint_xp::Hyperlink* __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef HyperlinksDispT<Hyperlinks> HyperlinksDisp;

typedef TComInterface<Hyperlink>  TCOMHyperlink;

// *********************************************************************//
// DispIntf:  Hyperlink
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493465-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class HyperlinkDispT : public TAutoDriver<Hyperlink>
{
public:
  HyperlinkDispT(){}

  HyperlinkDispT(Hyperlink *pintf)
  {
    TAutoDriver<Hyperlink>::Bind(pintf, false);
  }

  HyperlinkDispT(HyperlinkPtr pintf)
  {
    TAutoDriver<Hyperlink>::Bind(pintf, true);
  }

  HyperlinkDispT& operator=(Hyperlink *pintf)
  {
    TAutoDriver<Hyperlink>::Bind(pintf, false);
    return *this;
  }

  HyperlinkDispT& operator=(HyperlinkPtr pintf)
  {
    TAutoDriver<Hyperlink>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_xp::MsoHyperlinkType* Type/*[out,retval]*/);
  Office_xp::MsoHyperlinkType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Address(BSTR* Address/*[out,retval]*/);
  BSTR            __fastcall get_Address(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Address(BSTR Address/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubAddress(BSTR* SubAddress/*[out,retval]*/);
  BSTR            __fastcall get_SubAddress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SubAddress(BSTR SubAddress/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddToFavorites();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EmailSubject(BSTR* EmailSubject/*[out,retval]*/);
  BSTR            __fastcall get_EmailSubject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EmailSubject(BSTR EmailSubject/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScreenTip(BSTR* ScreenTip/*[out,retval]*/);
  BSTR            __fastcall get_ScreenTip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScreenTip(BSTR ScreenTip/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextToDisplay(BSTR* TextToDisplay/*[out,retval]*/);
  BSTR            __fastcall get_TextToDisplay(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextToDisplay(BSTR TextToDisplay/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowAndReturn(Office_xp::MsoTriState* ShowAndReturn/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_ShowAndReturn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowAndReturn(Office_xp::MsoTriState ShowAndReturn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Follow();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateNewDocument(BSTR FileName/*[in]*/, 
                                                          Office_xp::MsoTriState EditNow/*[in]*/, 
                                                          Office_xp::MsoTriState Overwrite/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoHyperlinkType Type = {read = get_Type};
  __property   BSTR            Address = {read = get_Address};
  __property   BSTR            SubAddress = {read = get_SubAddress};
  __property   BSTR            EmailSubject = {read = get_EmailSubject};
  __property   BSTR            ScreenTip = {read = get_ScreenTip};
  __property   BSTR            TextToDisplay = {read = get_TextToDisplay};
  __property   Office_xp::MsoTriState ShowAndReturn = {read = get_ShowAndReturn, write = set_ShowAndReturn};
};
typedef HyperlinkDispT<Hyperlink> HyperlinkDisp;

typedef TComInterface<PageSetup>  TCOMPageSetup;

// *********************************************************************//
// DispIntf:  PageSetup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493466-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PageSetupDispT : public TAutoDriver<PageSetup>
{
public:
  PageSetupDispT(){}

  PageSetupDispT(PageSetup *pintf)
  {
    TAutoDriver<PageSetup>::Bind(pintf, false);
  }

  PageSetupDispT(PageSetupPtr pintf)
  {
    TAutoDriver<PageSetup>::Bind(pintf, true);
  }

  PageSetupDispT& operator=(PageSetup *pintf)
  {
    TAutoDriver<PageSetup>::Bind(pintf, false);
    return *this;
  }

  PageSetupDispT& operator=(PageSetupPtr pintf)
  {
    TAutoDriver<PageSetup>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FirstSlideNumber(int* FirstSlideNumber/*[out,retval]*/);
  int             __fastcall get_FirstSlideNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FirstSlideNumber(int FirstSlideNumber/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideHeight(float* SlideHeight/*[out,retval]*/);
  float           __fastcall get_SlideHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SlideHeight(float SlideHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideWidth(float* SlideWidth/*[out,retval]*/);
  float           __fastcall get_SlideWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SlideWidth(float SlideWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideSize(Powerpoint_xp::PpSlideSizeType* SlideSize/*[out,retval]*/);
  Powerpoint_xp::PpSlideSizeType __fastcall get_SlideSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SlideSize(Powerpoint_xp::PpSlideSizeType SlideSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NotesOrientation(Office_xp::MsoOrientation* NotesOrientation/*[out,retval]*/);
  Office_xp::MsoOrientation __fastcall get_NotesOrientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NotesOrientation(Office_xp::MsoOrientation NotesOrientation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideOrientation(Office_xp::MsoOrientation* SlideOrientation/*[out,retval]*/);
  Office_xp::MsoOrientation __fastcall get_SlideOrientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SlideOrientation(Office_xp::MsoOrientation SlideOrientation/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             FirstSlideNumber = {read = get_FirstSlideNumber, write = set_FirstSlideNumber};
  __property   float           SlideHeight = {read = get_SlideHeight, write = set_SlideHeight};
  __property   float           SlideWidth = {read = get_SlideWidth, write = set_SlideWidth};
  __property   Powerpoint_xp::PpSlideSizeType SlideSize = {read = get_SlideSize, write = set_SlideSize};
  __property   Office_xp::MsoOrientation NotesOrientation = {read = get_NotesOrientation, write = set_NotesOrientation};
  __property   Office_xp::MsoOrientation SlideOrientation = {read = get_SlideOrientation, write = set_SlideOrientation};
};
typedef PageSetupDispT<PageSetup> PageSetupDisp;

typedef TComInterface<Fonts>  TCOMFonts;

// *********************************************************************//
// DispIntf:  Fonts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493467-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class FontsDispT : public TAutoDriver<Fonts>
{
public:
  FontsDispT(){}

  FontsDispT(Fonts *pintf)
  {
    TAutoDriver<Fonts>::Bind(pintf, false);
  }

  FontsDispT(FontsPtr pintf)
  {
    TAutoDriver<Fonts>::Bind(pintf, true);
  }

  FontsDispT& operator=(Fonts *pintf)
  {
    TAutoDriver<Fonts>::Bind(pintf, false);
    return *this;
  }

  FontsDispT& operator=(FontsPtr pintf)
  {
    TAutoDriver<Fonts>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT Index/*[in]*/, 
                                             Powerpoint_xp::Font** Item/*[out,retval]*/);
  Powerpoint_xp::Font* __fastcall Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Replace(BSTR Original/*[in]*/, BSTR Replacement/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef FontsDispT<Fonts> FontsDisp;

typedef TComInterface<ExtraColors>  TCOMExtraColors;

// *********************************************************************//
// DispIntf:  ExtraColors
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493468-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ExtraColorsDispT : public TAutoDriver<ExtraColors>
{
public:
  ExtraColorsDispT(){}

  ExtraColorsDispT(ExtraColors *pintf)
  {
    TAutoDriver<ExtraColors>::Bind(pintf, false);
  }

  ExtraColorsDispT(ExtraColorsPtr pintf)
  {
    TAutoDriver<ExtraColors>::Bind(pintf, true);
  }

  ExtraColorsDispT& operator=(ExtraColors *pintf)
  {
    TAutoDriver<ExtraColors>::Bind(pintf, false);
    return *this;
  }

  ExtraColorsDispT& operator=(ExtraColorsPtr pintf)
  {
    TAutoDriver<ExtraColors>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, 
                                             Office_xp::MsoRGBType* Item/*[out,retval]*/);
  Office_xp::MsoRGBType __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Office_xp::MsoRGBType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef ExtraColorsDispT<ExtraColors> ExtraColorsDisp;

typedef TComInterface<Slides>  TCOMSlides;

// *********************************************************************//
// DispIntf:  Slides
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493469-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SlidesDispT : public TAutoDriver<Slides>
{
public:
  SlidesDispT(){}

  SlidesDispT(Slides *pintf)
  {
    TAutoDriver<Slides>::Bind(pintf, false);
  }

  SlidesDispT(SlidesPtr pintf)
  {
    TAutoDriver<Slides>::Bind(pintf, true);
  }

  SlidesDispT& operator=(Slides *pintf)
  {
    TAutoDriver<Slides>::Bind(pintf, false);
    return *this;
  }

  SlidesDispT& operator=(SlidesPtr pintf)
  {
    TAutoDriver<Slides>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT Index/*[in]*/, 
                                             Powerpoint_xp::PowerPointSlide** Item/*[out,retval]*/);
  Powerpoint_xp::PowerPointSlide* __fastcall Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindBySlideID(long SlideID/*[in]*/, 
                                                      Powerpoint_xp::PowerPointSlide** FindBySlideID/*[out,retval]*/);
  Powerpoint_xp::PowerPointSlide* __fastcall FindBySlideID(long SlideID/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(int Index/*[in]*/, 
                                            Powerpoint_xp::PpSlideLayout Layout/*[in]*/, 
                                            Powerpoint_xp::PowerPointSlide** Add/*[out,retval]*/);
  Powerpoint_xp::PowerPointSlide* __fastcall Add(int Index/*[in]*/, 
                                                 Powerpoint_xp::PpSlideLayout Layout/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertFromFile(BSTR FileName/*[in]*/, int Index/*[in]*/, 
                                                       int SlideStart/*[in,def,opt]*/, 
                                                       int SlideEnd/*[in,def,opt]*/, 
                                                       int* FromFile/*[out,retval]*/);
  int             __fastcall InsertFromFile(BSTR FileName/*[in]*/, int Index/*[in]*/, 
                                            int SlideStart/*[in,def,opt]*/, 
                                            int SlideEnd/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Range(VARIANT Index/*[in,opt]*/, 
                                              Powerpoint_xp::SlideRange** Range/*[out,retval]*/);
  Powerpoint_xp::SlideRange* __fastcall Range(VARIANT Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Paste(int Index/*[in,def,opt]*/, 
                                              Powerpoint_xp::SlideRange** Paste/*[out,retval]*/);
  Powerpoint_xp::SlideRange* __fastcall Paste(int Index/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef SlidesDispT<Slides> SlidesDisp;

// *********************************************************************//
// SmartIntf: TCOM_Slide
// Interface: _Slide
// *********************************************************************//
template <class T /* _Slide */ >
class TCOM_SlideT : public TComInterface<_Slide>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_SlideT() {}
  TCOM_SlideT(_Slide *intf, bool addRef = false) : TComInterface<_Slide>(intf, addRef) {}
  TCOM_SlideT(const TCOM_SlideT& src) : TComInterface<_Slide>(src) {}
  TCOM_SlideT& operator=(const TCOM_SlideT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  HRESULT         __fastcall get_Application(Powerpoint_xp::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Shapes(Powerpoint_xp::Shapes** Shapes/*[out,retval]*/);
  HRESULT         __fastcall get_Shapes(Powerpoint_xp::ShapesPtr* Shapes/*[out,retval]*/);
  Powerpoint_xp::ShapesPtr __fastcall get_Shapes(void);
  HRESULT         __fastcall get_HeadersFooters(Powerpoint_xp::HeadersFooters** HeadersFooters/*[out,retval]*/);
  HRESULT         __fastcall get_HeadersFooters(Powerpoint_xp::HeadersFootersPtr* HeadersFooters/*[out,retval]*/);
  Powerpoint_xp::HeadersFootersPtr __fastcall get_HeadersFooters(void);
  HRESULT         __fastcall get_SlideShowTransition(Powerpoint_xp::SlideShowTransition** SlideShowTransition/*[out,retval]*/);
  HRESULT         __fastcall get_SlideShowTransition(Powerpoint_xp::SlideShowTransitionPtr* SlideShowTransition/*[out,retval]*/);
  Powerpoint_xp::SlideShowTransitionPtr __fastcall get_SlideShowTransition(void);
  HRESULT         __fastcall get_ColorScheme(Powerpoint_xp::ColorScheme** ColorScheme/*[out,retval]*/);
  HRESULT         __fastcall get_ColorScheme(Powerpoint_xp::ColorSchemePtr* ColorScheme/*[out,retval]*/);
  Powerpoint_xp::ColorSchemePtr __fastcall get_ColorScheme(void);
  HRESULT         __fastcall set_ColorScheme(Powerpoint_xp::ColorScheme* ColorScheme/*[in]*/);
  HRESULT         __fastcall set_ColorScheme(Powerpoint_xp::ColorSchemePtr ColorScheme/*[in]*/);
  HRESULT         __fastcall get_Background(Powerpoint_xp::ShapeRange** Background/*[out,retval]*/);
  HRESULT         __fastcall get_Background(Powerpoint_xp::ShapeRangePtr* Background/*[out,retval]*/);
  Powerpoint_xp::ShapeRangePtr __fastcall get_Background(void);
  HRESULT         __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_SlideID(long* SlideID/*[out,retval]*/);
  long            __fastcall get_SlideID(void);
  HRESULT         __fastcall get_PrintSteps(int* PrintSteps/*[out,retval]*/);
  int             __fastcall get_PrintSteps(void);
  HRESULT         __fastcall Select(void);
  HRESULT         __fastcall Cut(void);
  HRESULT         __fastcall Copy(void);
  HRESULT         __fastcall get_Layout(Powerpoint_xp::PpSlideLayout* Layout/*[out,retval]*/);
  Powerpoint_xp::PpSlideLayout __fastcall get_Layout(void);
  HRESULT         __fastcall set_Layout(Powerpoint_xp::PpSlideLayout Layout/*[in]*/);
  HRESULT         __fastcall Duplicate(Powerpoint_xp::SlideRange** Duplicate/*[out,retval]*/);
  Powerpoint_xp::SlideRange* __fastcall Duplicate(void);
  HRESULT         __fastcall Delete(void);
  HRESULT         __fastcall get_Tags(Powerpoint_xp::Tags** Tags/*[out,retval]*/);
  HRESULT         __fastcall get_Tags(Powerpoint_xp::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_xp::TagsPtr __fastcall get_Tags(void);
  HRESULT         __fastcall get_SlideIndex(int* SlideIndex/*[out,retval]*/);
  int             __fastcall get_SlideIndex(void);
  HRESULT         __fastcall get_SlideNumber(int* SlideNumber/*[out,retval]*/);
  int             __fastcall get_SlideNumber(void);
  HRESULT         __fastcall get_DisplayMasterShapes(Office_xp::MsoTriState* DisplayMasterShapes/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_DisplayMasterShapes(void);
  HRESULT         __fastcall set_DisplayMasterShapes(Office_xp::MsoTriState DisplayMasterShapes/*[in]*/);
  HRESULT         __fastcall get_FollowMasterBackground(Office_xp::MsoTriState* FollowMasterBackground/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_FollowMasterBackground(void);
  HRESULT         __fastcall set_FollowMasterBackground(Office_xp::MsoTriState FollowMasterBackground/*[in]*/);
  HRESULT         __fastcall get_NotesPage(Powerpoint_xp::SlideRange** NotesPage/*[out,retval]*/);
  HRESULT         __fastcall get_NotesPage(Powerpoint_xp::SlideRangePtr* NotesPage/*[out,retval]*/);
  Powerpoint_xp::SlideRangePtr __fastcall get_NotesPage(void);
  HRESULT         __fastcall get_Master(Powerpoint_xp::_Master** Master/*[out,retval]*/);
  HRESULT         __fastcall get_Master(Powerpoint_xp::_MasterPtr* Master/*[out,retval]*/);
  Powerpoint_xp::_MasterPtr __fastcall get_Master(void);
  HRESULT         __fastcall get_Hyperlinks(Powerpoint_xp::Hyperlinks** Hyperlinks/*[out,retval]*/);
  HRESULT         __fastcall get_Hyperlinks(Powerpoint_xp::HyperlinksPtr* Hyperlinks/*[out,retval]*/);
  Powerpoint_xp::HyperlinksPtr __fastcall get_Hyperlinks(void);
  HRESULT         __fastcall Export(BSTR FileName/*[in]*/, BSTR FilterName/*[in]*/, 
                                    int ScaleWidth/*[in,def,opt]*/, int ScaleHeight/*[in,def,opt]*/);
  HRESULT         __fastcall get_Scripts(Office_xp::Scripts** Scripts/*[out,retval]*/);
  HRESULT         __fastcall get_Scripts(Office_xp::ScriptsPtr* Scripts/*[out,retval]*/);
  Office_xp::ScriptsPtr __fastcall get_Scripts(void);
  HRESULT         __fastcall get_Comments(Powerpoint_xp::Comments** Comments/*[out,retval]*/);
  HRESULT         __fastcall get_Comments(Powerpoint_xp::CommentsPtr* Comments/*[out,retval]*/);
  Powerpoint_xp::CommentsPtr __fastcall get_Comments(void);
  HRESULT         __fastcall get_Design(Powerpoint_xp::Design** Design/*[out,retval]*/);
  HRESULT         __fastcall get_Design(Powerpoint_xp::DesignPtr* Design/*[out,retval]*/);
  Powerpoint_xp::DesignPtr __fastcall get_Design(void);
  HRESULT         __fastcall set_Design(Powerpoint_xp::Design* Design/*[in]*/);
  HRESULT         __fastcall set_Design(Powerpoint_xp::DesignPtr Design/*[in]*/);
  HRESULT         __fastcall MoveTo(int toPos/*[in]*/);
  HRESULT         __fastcall get_TimeLine(Powerpoint_xp::TimeLine** TimeLine/*[out,retval]*/);
  HRESULT         __fastcall get_TimeLine(Powerpoint_xp::TimeLinePtr* TimeLine/*[out,retval]*/);
  Powerpoint_xp::TimeLinePtr __fastcall get_TimeLine(void);
  HRESULT         __fastcall ApplyTemplate(BSTR FileName/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ShapesPtr Shapes = {read = get_Shapes};
  __property   Powerpoint_xp::HeadersFootersPtr HeadersFooters = {read = get_HeadersFooters};
  __property   Powerpoint_xp::SlideShowTransitionPtr SlideShowTransition = {read = get_SlideShowTransition};
  __property   Powerpoint_xp::ColorSchemePtr ColorScheme = {read = get_ColorScheme, write = set_ColorScheme};
  __property   Powerpoint_xp::ShapeRangePtr Background = {read = get_Background};
  __property   BSTR            Name = {read = get_Name};
  __property   long            SlideID = {read = get_SlideID};
  __property   int             PrintSteps = {read = get_PrintSteps};
  __property   Powerpoint_xp::PpSlideLayout Layout = {read = get_Layout, write = set_Layout};
  __property   Powerpoint_xp::TagsPtr Tags = {read = get_Tags};
  __property   int             SlideIndex = {read = get_SlideIndex};
  __property   int             SlideNumber = {read = get_SlideNumber};
  __property   Office_xp::MsoTriState DisplayMasterShapes = {read = get_DisplayMasterShapes, write = set_DisplayMasterShapes};
  __property   Office_xp::MsoTriState FollowMasterBackground = {read = get_FollowMasterBackground, write = set_FollowMasterBackground};
  __property   Powerpoint_xp::SlideRangePtr NotesPage = {read = get_NotesPage};
  __property   Powerpoint_xp::_MasterPtr Master = {read = get_Master};
  __property   Powerpoint_xp::HyperlinksPtr Hyperlinks = {read = get_Hyperlinks};
  __property   Office_xp::ScriptsPtr Scripts = {read = get_Scripts};
  __property   Powerpoint_xp::CommentsPtr Comments = {read = get_Comments};
  __property   Powerpoint_xp::DesignPtr Design = {read = get_Design, write = set_Design};
  __property   Powerpoint_xp::TimeLinePtr TimeLine = {read = get_TimeLine};
};
typedef TCOM_SlideT<_Slide> TCOM_Slide;

// *********************************************************************//
// DispIntf:  _Slide
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class _SlideDispT : public TAutoDriver<_Slide>
{
public:
  _SlideDispT(){}

  _SlideDispT(_Slide *pintf)
  {
    TAutoDriver<_Slide>::Bind(pintf, false);
  }

  _SlideDispT(_SlidePtr pintf)
  {
    TAutoDriver<_Slide>::Bind(pintf, true);
  }

  _SlideDispT& operator=(_Slide *pintf)
  {
    TAutoDriver<_Slide>::Bind(pintf, false);
    return *this;
  }

  _SlideDispT& operator=(_SlidePtr pintf)
  {
    TAutoDriver<_Slide>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PowerPointSlide));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PowerPointSlide);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shapes(Powerpoint_xp::Shapes** Shapes/*[out,retval]*/);
  Powerpoint_xp::Shapes* __fastcall get_Shapes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HeadersFooters(Powerpoint_xp::HeadersFooters** HeadersFooters/*[out,retval]*/);
  Powerpoint_xp::HeadersFooters* __fastcall get_HeadersFooters(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowTransition(Powerpoint_xp::SlideShowTransition** SlideShowTransition/*[out,retval]*/);
  Powerpoint_xp::SlideShowTransition* __fastcall get_SlideShowTransition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorScheme(Powerpoint_xp::ColorScheme** ColorScheme/*[out,retval]*/);
  Powerpoint_xp::ColorScheme* __fastcall get_ColorScheme(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColorScheme(Powerpoint_xp::ColorScheme* ColorScheme/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Background(Powerpoint_xp::ShapeRange** Background/*[out,retval]*/);
  Powerpoint_xp::ShapeRange* __fastcall get_Background(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideID(long* SlideID/*[out,retval]*/);
  long            __fastcall get_SlideID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrintSteps(int* PrintSteps/*[out,retval]*/);
  int             __fastcall get_PrintSteps(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Layout(Powerpoint_xp::PpSlideLayout* Layout/*[out,retval]*/);
  Powerpoint_xp::PpSlideLayout __fastcall get_Layout(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Layout(Powerpoint_xp::PpSlideLayout Layout/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Duplicate(Powerpoint_xp::SlideRange** Duplicate/*[out,retval]*/);
  Powerpoint_xp::SlideRange* __fastcall Duplicate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_xp::Tags** Tags/*[out,retval]*/);
  Powerpoint_xp::Tags* __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideIndex(int* SlideIndex/*[out,retval]*/);
  int             __fastcall get_SlideIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideNumber(int* SlideNumber/*[out,retval]*/);
  int             __fastcall get_SlideNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayMasterShapes(Office_xp::MsoTriState* DisplayMasterShapes/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_DisplayMasterShapes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayMasterShapes(Office_xp::MsoTriState DisplayMasterShapes/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FollowMasterBackground(Office_xp::MsoTriState* FollowMasterBackground/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_FollowMasterBackground(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FollowMasterBackground(Office_xp::MsoTriState FollowMasterBackground/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NotesPage(Powerpoint_xp::SlideRange** NotesPage/*[out,retval]*/);
  Powerpoint_xp::SlideRange* __fastcall get_NotesPage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Master(Powerpoint_xp::_Master** Master/*[out,retval]*/);
  Powerpoint_xp::_Master* __fastcall get_Master(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlinks(Powerpoint_xp::Hyperlinks** Hyperlinks/*[out,retval]*/);
  Powerpoint_xp::Hyperlinks* __fastcall get_Hyperlinks(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Export(BSTR FileName/*[in]*/, BSTR FilterName/*[in]*/, 
                                               int ScaleWidth/*[in,def,opt]*/, 
                                               int ScaleHeight/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Scripts(Office_xp::Scripts** Scripts/*[out,retval]*/);
  Office_xp::Scripts* __fastcall get_Scripts(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Comments(Powerpoint_xp::Comments** Comments/*[out,retval]*/);
  Powerpoint_xp::Comments* __fastcall get_Comments(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Design(Powerpoint_xp::Design** Design/*[out,retval]*/);
  Powerpoint_xp::Design* __fastcall get_Design(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Design(Powerpoint_xp::Design* Design/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MoveTo(int toPos/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TimeLine(Powerpoint_xp::TimeLine** TimeLine/*[out,retval]*/);
  Powerpoint_xp::TimeLine* __fastcall get_TimeLine(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyTemplate(BSTR FileName/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Shapes* Shapes = {read = get_Shapes};
  __property   Powerpoint_xp::HeadersFooters* HeadersFooters = {read = get_HeadersFooters};
  __property   Powerpoint_xp::SlideShowTransition* SlideShowTransition = {read = get_SlideShowTransition};
  __property   Powerpoint_xp::ColorScheme* ColorScheme = {read = get_ColorScheme, write = set_ColorScheme};
  __property   Powerpoint_xp::ShapeRange* Background = {read = get_Background};
  __property   BSTR            Name = {read = get_Name};
  __property   long            SlideID = {read = get_SlideID};
  __property   int             PrintSteps = {read = get_PrintSteps};
  __property   Powerpoint_xp::PpSlideLayout Layout = {read = get_Layout, write = set_Layout};
  __property   Powerpoint_xp::Tags* Tags = {read = get_Tags};
  __property   int             SlideIndex = {read = get_SlideIndex};
  __property   int             SlideNumber = {read = get_SlideNumber};
  __property   Office_xp::MsoTriState DisplayMasterShapes = {read = get_DisplayMasterShapes, write = set_DisplayMasterShapes};
  __property   Office_xp::MsoTriState FollowMasterBackground = {read = get_FollowMasterBackground, write = set_FollowMasterBackground};
  __property   Powerpoint_xp::SlideRange* NotesPage = {read = get_NotesPage};
  __property   Powerpoint_xp::_Master* Master = {read = get_Master};
  __property   Powerpoint_xp::Hyperlinks* Hyperlinks = {read = get_Hyperlinks};
  __property   Office_xp::Scripts* Scripts = {read = get_Scripts};
  __property   Powerpoint_xp::Comments* Comments = {read = get_Comments};
  __property   Powerpoint_xp::Design* Design = {read = get_Design, write = set_Design};
  __property   Powerpoint_xp::TimeLine* TimeLine = {read = get_TimeLine};
};
typedef _SlideDispT<_Slide> _SlideDisp;

typedef TComInterface<SlideRange>  TCOMSlideRange;

// *********************************************************************//
// DispIntf:  SlideRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SlideRangeDispT : public TAutoDriver<SlideRange>
{
public:
  SlideRangeDispT(){}

  SlideRangeDispT(SlideRange *pintf)
  {
    TAutoDriver<SlideRange>::Bind(pintf, false);
  }

  SlideRangeDispT(SlideRangePtr pintf)
  {
    TAutoDriver<SlideRange>::Bind(pintf, true);
  }

  SlideRangeDispT& operator=(SlideRange *pintf)
  {
    TAutoDriver<SlideRange>::Bind(pintf, false);
    return *this;
  }

  SlideRangeDispT& operator=(SlideRangePtr pintf)
  {
    TAutoDriver<SlideRange>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shapes(Powerpoint_xp::Shapes** Shapes/*[out,retval]*/);
  Powerpoint_xp::Shapes* __fastcall get_Shapes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HeadersFooters(Powerpoint_xp::HeadersFooters** HeadersFooters/*[out,retval]*/);
  Powerpoint_xp::HeadersFooters* __fastcall get_HeadersFooters(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowTransition(Powerpoint_xp::SlideShowTransition** SlideShowTransition/*[out,retval]*/);
  Powerpoint_xp::SlideShowTransition* __fastcall get_SlideShowTransition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorScheme(Powerpoint_xp::ColorScheme** ColorScheme/*[out,retval]*/);
  Powerpoint_xp::ColorScheme* __fastcall get_ColorScheme(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColorScheme(Powerpoint_xp::ColorScheme* ColorScheme/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Background(Powerpoint_xp::ShapeRange** Background/*[out,retval]*/);
  Powerpoint_xp::ShapeRange* __fastcall get_Background(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideID(long* SlideID/*[out,retval]*/);
  long            __fastcall get_SlideID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrintSteps(int* PrintSteps/*[out,retval]*/);
  int             __fastcall get_PrintSteps(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Layout(Powerpoint_xp::PpSlideLayout* Layout/*[out,retval]*/);
  Powerpoint_xp::PpSlideLayout __fastcall get_Layout(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Layout(Powerpoint_xp::PpSlideLayout Layout/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Duplicate(Powerpoint_xp::SlideRange** Duplicate/*[out,retval]*/);
  Powerpoint_xp::SlideRange* __fastcall Duplicate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_xp::Tags** Tags/*[out,retval]*/);
  Powerpoint_xp::Tags* __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideIndex(int* SlideIndex/*[out,retval]*/);
  int             __fastcall get_SlideIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideNumber(int* SlideNumber/*[out,retval]*/);
  int             __fastcall get_SlideNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayMasterShapes(Office_xp::MsoTriState* DisplayMasterShapes/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_DisplayMasterShapes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayMasterShapes(Office_xp::MsoTriState DisplayMasterShapes/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FollowMasterBackground(Office_xp::MsoTriState* FollowMasterBackground/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_FollowMasterBackground(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FollowMasterBackground(Office_xp::MsoTriState FollowMasterBackground/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NotesPage(Powerpoint_xp::SlideRange** NotesPage/*[out,retval]*/);
  Powerpoint_xp::SlideRange* __fastcall get_NotesPage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Master(Powerpoint_xp::_Master** Master/*[out,retval]*/);
  Powerpoint_xp::_Master* __fastcall get_Master(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlinks(Powerpoint_xp::Hyperlinks** Hyperlinks/*[out,retval]*/);
  Powerpoint_xp::Hyperlinks* __fastcall get_Hyperlinks(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Export(BSTR FileName/*[in]*/, BSTR FilterName/*[in]*/, 
                                               int ScaleWidth/*[in,def,opt]*/, 
                                               int ScaleHeight/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT Index/*[in]*/, 
                                             Powerpoint_xp::PowerPointSlide** Item/*[out,retval]*/);
  Powerpoint_xp::PowerPointSlide* __fastcall Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Scripts(Office_xp::Scripts** Scripts/*[out,retval]*/);
  Office_xp::Scripts* __fastcall get_Scripts(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Comments(Powerpoint_xp::Comments** Comments/*[out,retval]*/);
  Powerpoint_xp::Comments* __fastcall get_Comments(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Design(Powerpoint_xp::Design** Design/*[out,retval]*/);
  Powerpoint_xp::Design* __fastcall get_Design(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Design(Powerpoint_xp::Design* Design/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MoveTo(int toPos/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TimeLine(Powerpoint_xp::TimeLine** TimeLine/*[out,retval]*/);
  Powerpoint_xp::TimeLine* __fastcall get_TimeLine(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyTemplate(BSTR FileName/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Shapes* Shapes = {read = get_Shapes};
  __property   Powerpoint_xp::HeadersFooters* HeadersFooters = {read = get_HeadersFooters};
  __property   Powerpoint_xp::SlideShowTransition* SlideShowTransition = {read = get_SlideShowTransition};
  __property   Powerpoint_xp::ColorScheme* ColorScheme = {read = get_ColorScheme, write = set_ColorScheme};
  __property   Powerpoint_xp::ShapeRange* Background = {read = get_Background};
  __property   BSTR            Name = {read = get_Name};
  __property   long            SlideID = {read = get_SlideID};
  __property   int             PrintSteps = {read = get_PrintSteps};
  __property   Powerpoint_xp::PpSlideLayout Layout = {read = get_Layout, write = set_Layout};
  __property   Powerpoint_xp::Tags* Tags = {read = get_Tags};
  __property   int             SlideIndex = {read = get_SlideIndex};
  __property   int             SlideNumber = {read = get_SlideNumber};
  __property   Office_xp::MsoTriState DisplayMasterShapes = {read = get_DisplayMasterShapes, write = set_DisplayMasterShapes};
  __property   Office_xp::MsoTriState FollowMasterBackground = {read = get_FollowMasterBackground, write = set_FollowMasterBackground};
  __property   Powerpoint_xp::SlideRange* NotesPage = {read = get_NotesPage};
  __property   Powerpoint_xp::_Master* Master = {read = get_Master};
  __property   Powerpoint_xp::Hyperlinks* Hyperlinks = {read = get_Hyperlinks};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
  __property   Office_xp::Scripts* Scripts = {read = get_Scripts};
  __property   Powerpoint_xp::Comments* Comments = {read = get_Comments};
  __property   Powerpoint_xp::Design* Design = {read = get_Design, write = set_Design};
  __property   Powerpoint_xp::TimeLine* TimeLine = {read = get_TimeLine};
};
typedef SlideRangeDispT<SlideRange> SlideRangeDisp;

// *********************************************************************//
// SmartIntf: TCOM_Master
// Interface: _Master
// *********************************************************************//
template <class T /* _Master */ >
class TCOM_MasterT : public TComInterface<_Master>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_MasterT() {}
  TCOM_MasterT(_Master *intf, bool addRef = false) : TComInterface<_Master>(intf, addRef) {}
  TCOM_MasterT(const TCOM_MasterT& src) : TComInterface<_Master>(src) {}
  TCOM_MasterT& operator=(const TCOM_MasterT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  HRESULT         __fastcall get_Application(Powerpoint_xp::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Shapes(Powerpoint_xp::Shapes** Shapes/*[out,retval]*/);
  HRESULT         __fastcall get_Shapes(Powerpoint_xp::ShapesPtr* Shapes/*[out,retval]*/);
  Powerpoint_xp::ShapesPtr __fastcall get_Shapes(void);
  HRESULT         __fastcall get_HeadersFooters(Powerpoint_xp::HeadersFooters** HeadersFooters/*[out,retval]*/);
  HRESULT         __fastcall get_HeadersFooters(Powerpoint_xp::HeadersFootersPtr* HeadersFooters/*[out,retval]*/);
  Powerpoint_xp::HeadersFootersPtr __fastcall get_HeadersFooters(void);
  HRESULT         __fastcall get_ColorScheme(Powerpoint_xp::ColorScheme** ColorScheme/*[out,retval]*/);
  HRESULT         __fastcall get_ColorScheme(Powerpoint_xp::ColorSchemePtr* ColorScheme/*[out,retval]*/);
  Powerpoint_xp::ColorSchemePtr __fastcall get_ColorScheme(void);
  HRESULT         __fastcall set_ColorScheme(Powerpoint_xp::ColorScheme* ColorScheme/*[in]*/);
  HRESULT         __fastcall set_ColorScheme(Powerpoint_xp::ColorSchemePtr ColorScheme/*[in]*/);
  HRESULT         __fastcall get_Background(Powerpoint_xp::ShapeRange** Background/*[out,retval]*/);
  HRESULT         __fastcall get_Background(Powerpoint_xp::ShapeRangePtr* Background/*[out,retval]*/);
  Powerpoint_xp::ShapeRangePtr __fastcall get_Background(void);
  HRESULT         __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT         __fastcall Delete(void);
  HRESULT         __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT         __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT         __fastcall get_TextStyles(Powerpoint_xp::TextStyles** TextStyles/*[out,retval]*/);
  HRESULT         __fastcall get_TextStyles(Powerpoint_xp::TextStylesPtr* TextStyles/*[out,retval]*/);
  Powerpoint_xp::TextStylesPtr __fastcall get_TextStyles(void);
  HRESULT         __fastcall get_Hyperlinks(Powerpoint_xp::Hyperlinks** Hyperlinks/*[out,retval]*/);
  HRESULT         __fastcall get_Hyperlinks(Powerpoint_xp::HyperlinksPtr* Hyperlinks/*[out,retval]*/);
  Powerpoint_xp::HyperlinksPtr __fastcall get_Hyperlinks(void);
  HRESULT         __fastcall get_Scripts(Office_xp::Scripts** Scripts/*[out,retval]*/);
  HRESULT         __fastcall get_Scripts(Office_xp::ScriptsPtr* Scripts/*[out,retval]*/);
  Office_xp::ScriptsPtr __fastcall get_Scripts(void);
  HRESULT         __fastcall get_Design(Powerpoint_xp::Design** Design/*[out,retval]*/);
  HRESULT         __fastcall get_Design(Powerpoint_xp::DesignPtr* Design/*[out,retval]*/);
  Powerpoint_xp::DesignPtr __fastcall get_Design(void);
  HRESULT         __fastcall get_TimeLine(Powerpoint_xp::TimeLine** TimeLine/*[out,retval]*/);
  HRESULT         __fastcall get_TimeLine(Powerpoint_xp::TimeLinePtr* TimeLine/*[out,retval]*/);
  Powerpoint_xp::TimeLinePtr __fastcall get_TimeLine(void);
  HRESULT         __fastcall get_SlideShowTransition(Powerpoint_xp::SlideShowTransition** SlideShowTransition/*[out,retval]*/);
  HRESULT         __fastcall get_SlideShowTransition(Powerpoint_xp::SlideShowTransitionPtr* SlideShowTransition/*[out,retval]*/);
  Powerpoint_xp::SlideShowTransitionPtr __fastcall get_SlideShowTransition(void);

  __property   Powerpoint_xp::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ShapesPtr Shapes = {read = get_Shapes};
  __property   Powerpoint_xp::HeadersFootersPtr HeadersFooters = {read = get_HeadersFooters};
  __property   Powerpoint_xp::ColorSchemePtr ColorScheme = {read = get_ColorScheme, write = set_ColorScheme};
  __property   Powerpoint_xp::ShapeRangePtr Background = {read = get_Background};
  __property   BSTR            Name = {read = get_Name};
  __property   float           Height = {read = get_Height};
  __property   float           Width = {read = get_Width};
  __property   Powerpoint_xp::TextStylesPtr TextStyles = {read = get_TextStyles};
  __property   Powerpoint_xp::HyperlinksPtr Hyperlinks = {read = get_Hyperlinks};
  __property   Office_xp::ScriptsPtr Scripts = {read = get_Scripts};
  __property   Powerpoint_xp::DesignPtr Design = {read = get_Design};
  __property   Powerpoint_xp::TimeLinePtr TimeLine = {read = get_TimeLine};
  __property   Powerpoint_xp::SlideShowTransitionPtr SlideShowTransition = {read = get_SlideShowTransition};
};
typedef TCOM_MasterT<_Master> TCOM_Master;

// *********************************************************************//
// DispIntf:  _Master
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class _MasterDispT : public TAutoDriver<_Master>
{
public:
  _MasterDispT(){}

  _MasterDispT(_Master *pintf)
  {
    TAutoDriver<_Master>::Bind(pintf, false);
  }

  _MasterDispT(_MasterPtr pintf)
  {
    TAutoDriver<_Master>::Bind(pintf, true);
  }

  _MasterDispT& operator=(_Master *pintf)
  {
    TAutoDriver<_Master>::Bind(pintf, false);
    return *this;
  }

  _MasterDispT& operator=(_MasterPtr pintf)
  {
    TAutoDriver<_Master>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Master));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Master);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shapes(Powerpoint_xp::Shapes** Shapes/*[out,retval]*/);
  Powerpoint_xp::Shapes* __fastcall get_Shapes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HeadersFooters(Powerpoint_xp::HeadersFooters** HeadersFooters/*[out,retval]*/);
  Powerpoint_xp::HeadersFooters* __fastcall get_HeadersFooters(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorScheme(Powerpoint_xp::ColorScheme** ColorScheme/*[out,retval]*/);
  Powerpoint_xp::ColorScheme* __fastcall get_ColorScheme(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColorScheme(Powerpoint_xp::ColorScheme* ColorScheme/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Background(Powerpoint_xp::ShapeRange** Background/*[out,retval]*/);
  Powerpoint_xp::ShapeRange* __fastcall get_Background(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextStyles(Powerpoint_xp::TextStyles** TextStyles/*[out,retval]*/);
  Powerpoint_xp::TextStyles* __fastcall get_TextStyles(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlinks(Powerpoint_xp::Hyperlinks** Hyperlinks/*[out,retval]*/);
  Powerpoint_xp::Hyperlinks* __fastcall get_Hyperlinks(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Scripts(Office_xp::Scripts** Scripts/*[out,retval]*/);
  Office_xp::Scripts* __fastcall get_Scripts(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Design(Powerpoint_xp::Design** Design/*[out,retval]*/);
  Powerpoint_xp::Design* __fastcall get_Design(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TimeLine(Powerpoint_xp::TimeLine** TimeLine/*[out,retval]*/);
  Powerpoint_xp::TimeLine* __fastcall get_TimeLine(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowTransition(Powerpoint_xp::SlideShowTransition** SlideShowTransition/*[out,retval]*/);
  Powerpoint_xp::SlideShowTransition* __fastcall get_SlideShowTransition(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Shapes* Shapes = {read = get_Shapes};
  __property   Powerpoint_xp::HeadersFooters* HeadersFooters = {read = get_HeadersFooters};
  __property   Powerpoint_xp::ColorScheme* ColorScheme = {read = get_ColorScheme, write = set_ColorScheme};
  __property   Powerpoint_xp::ShapeRange* Background = {read = get_Background};
  __property   BSTR            Name = {read = get_Name};
  __property   float           Height = {read = get_Height};
  __property   float           Width = {read = get_Width};
  __property   Powerpoint_xp::TextStyles* TextStyles = {read = get_TextStyles};
  __property   Powerpoint_xp::Hyperlinks* Hyperlinks = {read = get_Hyperlinks};
  __property   Office_xp::Scripts* Scripts = {read = get_Scripts};
  __property   Powerpoint_xp::Design* Design = {read = get_Design};
  __property   Powerpoint_xp::TimeLine* TimeLine = {read = get_TimeLine};
  __property   Powerpoint_xp::SlideShowTransition* SlideShowTransition = {read = get_SlideShowTransition};
};
typedef _MasterDispT<_Master> _MasterDisp;

typedef TComInterface<SldEvents>  TCOMSldEvents;

typedef TComInterface<ColorSchemes>  TCOMColorSchemes;

// *********************************************************************//
// DispIntf:  ColorSchemes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ColorSchemesDispT : public TAutoDriver<ColorSchemes>
{
public:
  ColorSchemesDispT(){}

  ColorSchemesDispT(ColorSchemes *pintf)
  {
    TAutoDriver<ColorSchemes>::Bind(pintf, false);
  }

  ColorSchemesDispT(ColorSchemesPtr pintf)
  {
    TAutoDriver<ColorSchemes>::Bind(pintf, true);
  }

  ColorSchemesDispT& operator=(ColorSchemes *pintf)
  {
    TAutoDriver<ColorSchemes>::Bind(pintf, false);
    return *this;
  }

  ColorSchemesDispT& operator=(ColorSchemesPtr pintf)
  {
    TAutoDriver<ColorSchemes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, 
                                             Powerpoint_xp::ColorScheme** Item/*[out,retval]*/);
  Powerpoint_xp::ColorScheme* __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Powerpoint_xp::ColorScheme* Scheme/*[in,def,opt]*/, 
                                            Powerpoint_xp::ColorScheme** Add/*[out,retval]*/);
  Powerpoint_xp::ColorScheme* __fastcall Add(Powerpoint_xp::ColorScheme* Scheme/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef ColorSchemesDispT<ColorSchemes> ColorSchemesDisp;

typedef TComInterface<ColorScheme>  TCOMColorScheme;

// *********************************************************************//
// DispIntf:  ColorScheme
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ColorSchemeDispT : public TAutoDriver<ColorScheme>
{
public:
  ColorSchemeDispT(){}

  ColorSchemeDispT(ColorScheme *pintf)
  {
    TAutoDriver<ColorScheme>::Bind(pintf, false);
  }

  ColorSchemeDispT(ColorSchemePtr pintf)
  {
    TAutoDriver<ColorScheme>::Bind(pintf, true);
  }

  ColorSchemeDispT& operator=(ColorScheme *pintf)
  {
    TAutoDriver<ColorScheme>::Bind(pintf, false);
    return *this;
  }

  ColorSchemeDispT& operator=(ColorSchemePtr pintf)
  {
    TAutoDriver<ColorScheme>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Colors(Powerpoint_xp::PpColorSchemeIndex SchemeColor/*[in]*/
                                               , Powerpoint_xp::RGBColor** Colors/*[out,retval]*/);
  Powerpoint_xp::RGBColor* __fastcall Colors(Powerpoint_xp::PpColorSchemeIndex SchemeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef ColorSchemeDispT<ColorScheme> ColorSchemeDisp;

typedef TComInterface<RGBColor>  TCOMRGBColor;

// *********************************************************************//
// DispIntf:  RGBColor
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493470-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class RGBColorDispT : public TAutoDriver<RGBColor>
{
public:
  RGBColorDispT(){}

  RGBColorDispT(RGBColor *pintf)
  {
    TAutoDriver<RGBColor>::Bind(pintf, false);
  }

  RGBColorDispT(RGBColorPtr pintf)
  {
    TAutoDriver<RGBColor>::Bind(pintf, true);
  }

  RGBColorDispT& operator=(RGBColor *pintf)
  {
    TAutoDriver<RGBColor>::Bind(pintf, false);
    return *this;
  }

  RGBColorDispT& operator=(RGBColorPtr pintf)
  {
    TAutoDriver<RGBColor>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_rgb(Office_xp::MsoRGBType* rgb/*[out,retval]*/);
  Office_xp::MsoRGBType __fastcall get_rgb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_rgb(Office_xp::MsoRGBType rgb/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoRGBType rgb = {read = get_rgb, write = set_rgb};
};
typedef RGBColorDispT<RGBColor> RGBColorDisp;

typedef TComInterface<SlideShowTransition>  TCOMSlideShowTransition;

// *********************************************************************//
// DispIntf:  SlideShowTransition
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493471-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SlideShowTransitionDispT : public TAutoDriver<SlideShowTransition>
{
public:
  SlideShowTransitionDispT(){}

  SlideShowTransitionDispT(SlideShowTransition *pintf)
  {
    TAutoDriver<SlideShowTransition>::Bind(pintf, false);
  }

  SlideShowTransitionDispT(SlideShowTransitionPtr pintf)
  {
    TAutoDriver<SlideShowTransition>::Bind(pintf, true);
  }

  SlideShowTransitionDispT& operator=(SlideShowTransition *pintf)
  {
    TAutoDriver<SlideShowTransition>::Bind(pintf, false);
    return *this;
  }

  SlideShowTransitionDispT& operator=(SlideShowTransitionPtr pintf)
  {
    TAutoDriver<SlideShowTransition>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AdvanceOnClick(Office_xp::MsoTriState* AdvanceOnClick/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_AdvanceOnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AdvanceOnClick(Office_xp::MsoTriState AdvanceOnClick/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AdvanceOnTime(Office_xp::MsoTriState* AdvanceOnTime/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_AdvanceOnTime(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AdvanceOnTime(Office_xp::MsoTriState AdvanceOnTime/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AdvanceTime(float* AdvanceTime/*[out,retval]*/);
  float           __fastcall get_AdvanceTime(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AdvanceTime(float AdvanceTime/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EntryEffect(Powerpoint_xp::PpEntryEffect* EntryEffect/*[out,retval]*/);
  Powerpoint_xp::PpEntryEffect __fastcall get_EntryEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EntryEffect(Powerpoint_xp::PpEntryEffect EntryEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hidden(Office_xp::MsoTriState* Hidden/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Hidden(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Hidden(Office_xp::MsoTriState Hidden/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LoopSoundUntilNext(Office_xp::MsoTriState* LoopSoundUntilNext/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_LoopSoundUntilNext(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LoopSoundUntilNext(Office_xp::MsoTriState LoopSoundUntilNext/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SoundEffect(Powerpoint_xp::SoundEffect** SoundEffect/*[out,retval]*/);
  Powerpoint_xp::SoundEffect* __fastcall get_SoundEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Speed(Powerpoint_xp::PpTransitionSpeed* Speed/*[out,retval]*/);
  Powerpoint_xp::PpTransitionSpeed __fastcall get_Speed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Speed(Powerpoint_xp::PpTransitionSpeed Speed/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoTriState AdvanceOnClick = {read = get_AdvanceOnClick, write = set_AdvanceOnClick};
  __property   Office_xp::MsoTriState AdvanceOnTime = {read = get_AdvanceOnTime, write = set_AdvanceOnTime};
  __property   float           AdvanceTime = {read = get_AdvanceTime, write = set_AdvanceTime};
  __property   Powerpoint_xp::PpEntryEffect EntryEffect = {read = get_EntryEffect, write = set_EntryEffect};
  __property   Office_xp::MsoTriState Hidden = {read = get_Hidden, write = set_Hidden};
  __property   Office_xp::MsoTriState LoopSoundUntilNext = {read = get_LoopSoundUntilNext, write = set_LoopSoundUntilNext};
  __property   Powerpoint_xp::SoundEffect* SoundEffect = {read = get_SoundEffect};
  __property   Powerpoint_xp::PpTransitionSpeed Speed = {read = get_Speed, write = set_Speed};
};
typedef SlideShowTransitionDispT<SlideShowTransition> SlideShowTransitionDisp;

typedef TComInterface<SoundEffect>  TCOMSoundEffect;

// *********************************************************************//
// DispIntf:  SoundEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493472-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SoundEffectDispT : public TAutoDriver<SoundEffect>
{
public:
  SoundEffectDispT(){}

  SoundEffectDispT(SoundEffect *pintf)
  {
    TAutoDriver<SoundEffect>::Bind(pintf, false);
  }

  SoundEffectDispT(SoundEffectPtr pintf)
  {
    TAutoDriver<SoundEffect>::Bind(pintf, true);
  }

  SoundEffectDispT& operator=(SoundEffect *pintf)
  {
    TAutoDriver<SoundEffect>::Bind(pintf, false);
    return *this;
  }

  SoundEffectDispT& operator=(SoundEffectPtr pintf)
  {
    TAutoDriver<SoundEffect>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Powerpoint_xp::PpSoundEffectType* Type/*[out,retval]*/);
  Powerpoint_xp::PpSoundEffectType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Powerpoint_xp::PpSoundEffectType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ImportFromFile(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Play();

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Powerpoint_xp::PpSoundEffectType Type = {read = get_Type, write = set_Type};
};
typedef SoundEffectDispT<SoundEffect> SoundEffectDisp;

typedef TComInterface<SoundFormat>  TCOMSoundFormat;

// *********************************************************************//
// DispIntf:  SoundFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493473-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SoundFormatDispT : public TAutoDriver<SoundFormat>
{
public:
  SoundFormatDispT(){}

  SoundFormatDispT(SoundFormat *pintf)
  {
    TAutoDriver<SoundFormat>::Bind(pintf, false);
  }

  SoundFormatDispT(SoundFormatPtr pintf)
  {
    TAutoDriver<SoundFormat>::Bind(pintf, true);
  }

  SoundFormatDispT& operator=(SoundFormat *pintf)
  {
    TAutoDriver<SoundFormat>::Bind(pintf, false);
    return *this;
  }

  SoundFormatDispT& operator=(SoundFormatPtr pintf)
  {
    TAutoDriver<SoundFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Play();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Import(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Export(BSTR FileName/*[in]*/, 
                                               Powerpoint_xp::PpSoundFormatType* Export/*[out,retval]*/);
  Powerpoint_xp::PpSoundFormatType __fastcall Export(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Powerpoint_xp::PpSoundFormatType* Type/*[out,retval]*/);
  Powerpoint_xp::PpSoundFormatType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceFullName(BSTR* SourceFullName/*[out,retval]*/);
  BSTR            __fastcall get_SourceFullName(void);

  __property   Powerpoint_xp::PpSoundFormatType Type = {read = get_Type};
  __property   BSTR            SourceFullName = {read = get_SourceFullName};
};
typedef SoundFormatDispT<SoundFormat> SoundFormatDisp;

typedef TComInterface<HeadersFooters>  TCOMHeadersFooters;

// *********************************************************************//
// DispIntf:  HeadersFooters
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493474-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class HeadersFootersDispT : public TAutoDriver<HeadersFooters>
{
public:
  HeadersFootersDispT(){}

  HeadersFootersDispT(HeadersFooters *pintf)
  {
    TAutoDriver<HeadersFooters>::Bind(pintf, false);
  }

  HeadersFootersDispT(HeadersFootersPtr pintf)
  {
    TAutoDriver<HeadersFooters>::Bind(pintf, true);
  }

  HeadersFootersDispT& operator=(HeadersFooters *pintf)
  {
    TAutoDriver<HeadersFooters>::Bind(pintf, false);
    return *this;
  }

  HeadersFootersDispT& operator=(HeadersFootersPtr pintf)
  {
    TAutoDriver<HeadersFooters>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DateAndTime(Powerpoint_xp::HeaderFooter** DateAndTime/*[out,retval]*/);
  Powerpoint_xp::HeaderFooter* __fastcall get_DateAndTime(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideNumber(Powerpoint_xp::HeaderFooter** SlideNumber/*[out,retval]*/);
  Powerpoint_xp::HeaderFooter* __fastcall get_SlideNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Header(Powerpoint_xp::HeaderFooter** Header/*[out,retval]*/);
  Powerpoint_xp::HeaderFooter* __fastcall get_Header(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Footer(Powerpoint_xp::HeaderFooter** Footer/*[out,retval]*/);
  Powerpoint_xp::HeaderFooter* __fastcall get_Footer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayOnTitleSlide(Office_xp::MsoTriState* DisplayOnTitleSlide/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_DisplayOnTitleSlide(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayOnTitleSlide(Office_xp::MsoTriState DisplayOnTitleSlide/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::HeaderFooter* DateAndTime = {read = get_DateAndTime};
  __property   Powerpoint_xp::HeaderFooter* SlideNumber = {read = get_SlideNumber};
  __property   Powerpoint_xp::HeaderFooter* Header = {read = get_Header};
  __property   Powerpoint_xp::HeaderFooter* Footer = {read = get_Footer};
  __property   Office_xp::MsoTriState DisplayOnTitleSlide = {read = get_DisplayOnTitleSlide, write = set_DisplayOnTitleSlide};
};
typedef HeadersFootersDispT<HeadersFooters> HeadersFootersDisp;

typedef TComInterface<Shapes>  TCOMShapes;

// *********************************************************************//
// DispIntf:  Shapes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493475-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ShapesDispT : public TAutoDriver<Shapes>
{
public:
  ShapesDispT(){}

  ShapesDispT(Shapes *pintf)
  {
    TAutoDriver<Shapes>::Bind(pintf, false);
  }

  ShapesDispT(ShapesPtr pintf)
  {
    TAutoDriver<Shapes>::Bind(pintf, true);
  }

  ShapesDispT& operator=(Shapes *pintf)
  {
    TAutoDriver<Shapes>::Bind(pintf, false);
    return *this;
  }

  ShapesDispT& operator=(ShapesPtr pintf)
  {
    TAutoDriver<Shapes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* Count/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT Index/*[in]*/, 
                                             Powerpoint_xp::Shape** Item/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddCallout(Office_xp::MsoCalloutType Type/*[in]*/, 
                                                   float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in]*/, float Height/*[in]*/, 
                                                   Powerpoint_xp::Shape** Callout/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddCallout(Office_xp::MsoCalloutType Type/*[in]*/, 
                                              float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddConnector(Office_xp::MsoConnectorType Type/*[in]*/, 
                                                     float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                     float EndX/*[in]*/, float EndY/*[in]*/, 
                                                     Powerpoint_xp::Shape** Connector/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddConnector(Office_xp::MsoConnectorType Type/*[in]*/, 
                                                float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                float EndX/*[in]*/, float EndY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddCurve(VARIANT SafeArrayOfPoints/*[in]*/, 
                                                 Powerpoint_xp::Shape** Curve/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddCurve(VARIANT SafeArrayOfPoints/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddLabel(Office_xp::MsoTextOrientation Orientation/*[in]*/, 
                                                 float Left/*[in]*/, float Top/*[in]*/, 
                                                 float Width/*[in]*/, float Height/*[in]*/, 
                                                 Powerpoint_xp::Shape** Label/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddLabel(Office_xp::MsoTextOrientation Orientation/*[in]*/, 
                                            float Left/*[in]*/, float Top/*[in]*/, 
                                            float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                float EndX/*[in]*/, float EndY/*[in]*/, 
                                                Powerpoint_xp::Shape** Line/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                           float EndX/*[in]*/, float EndY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddPicture(BSTR FileName/*[in]*/, 
                                                   Office_xp::MsoTriState LinkToFile/*[in]*/, 
                                                   Office_xp::MsoTriState SaveWithDocument/*[in]*/, 
                                                   float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in,def,opt]*/, 
                                                   float Height/*[in,def,opt]*/, 
                                                   Powerpoint_xp::Shape** Picture/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddPicture(BSTR FileName/*[in]*/, 
                                              Office_xp::MsoTriState LinkToFile/*[in]*/, 
                                              Office_xp::MsoTriState SaveWithDocument/*[in]*/, 
                                              float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in,def,opt]*/, 
                                              float Height/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddPolyline(VARIANT SafeArrayOfPoints/*[in]*/, 
                                                    Powerpoint_xp::Shape** Polyline/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddPolyline(VARIANT SafeArrayOfPoints/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddShape(Office_xp::MsoAutoShapeType Type/*[in]*/, 
                                                 float Left/*[in]*/, float Top/*[in]*/, 
                                                 float Width/*[in]*/, float Height/*[in]*/, 
                                                 Powerpoint_xp::Shape** Shape/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddShape(Office_xp::MsoAutoShapeType Type/*[in]*/, 
                                            float Left/*[in]*/, float Top/*[in]*/, 
                                            float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTextEffect(Office_xp::MsoPresetTextEffect PresetTextEffect/*[in]*/
                                                      , BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                                      float FontSize/*[in]*/, 
                                                      Office_xp::MsoTriState FontBold/*[in]*/, 
                                                      Office_xp::MsoTriState FontItalic/*[in]*/, 
                                                      float Left/*[in]*/, float Top/*[in]*/, 
                                                      Powerpoint_xp::Shape** TextEffect/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddTextEffect(Office_xp::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                                                 BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                                 float FontSize/*[in]*/, 
                                                 Office_xp::MsoTriState FontBold/*[in]*/, 
                                                 Office_xp::MsoTriState FontItalic/*[in]*/, 
                                                 float Left/*[in]*/, float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTextbox(Office_xp::MsoTextOrientation Orientation/*[in]*/
                                                   , float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in]*/, float Height/*[in]*/, 
                                                   Powerpoint_xp::Shape** Textbox/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddTextbox(Office_xp::MsoTextOrientation Orientation/*[in]*/, 
                                              float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BuildFreeform(Office_xp::MsoEditingType EditingType/*[in]*/
                                                      , float X1/*[in]*/, float Y1/*[in]*/, 
                                                      Powerpoint_xp::FreeformBuilder** FreeformBuilder/*[out,retval]*/);
  Powerpoint_xp::FreeformBuilder* __fastcall BuildFreeform(Office_xp::MsoEditingType EditingType/*[in]*/, 
                                                           float X1/*[in]*/, float Y1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SelectAll();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Range(VARIANT Index/*[in,opt]*/, 
                                              Powerpoint_xp::ShapeRange** Range/*[out,retval]*/);
  Powerpoint_xp::ShapeRange* __fastcall Range(VARIANT Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasTitle(Office_xp::MsoTriState* HasTitle/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_HasTitle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTitle(Powerpoint_xp::Shape** Title/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddTitle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Title(Powerpoint_xp::Shape** Title/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall get_Title(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Placeholders(Powerpoint_xp::Placeholders** Placeholders/*[out,retval]*/);
  Powerpoint_xp::Placeholders* __fastcall get_Placeholders(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddOLEObject(float Left/*[in,def,opt]*/, 
                                                     float Top/*[in,def,opt]*/, 
                                                     float Width/*[in,def,opt]*/, 
                                                     float Height/*[in,def,opt]*/, 
                                                     BSTR ClassName/*[in,def,opt]*/, 
                                                     BSTR FileName/*[in,def,opt]*/, 
                                                     Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/
                                                     , BSTR IconFileName/*[in,def,opt]*/, 
                                                     int IconIndex/*[in,def,opt]*/, 
                                                     BSTR IconLabel/*[in,def,opt]*/, 
                                                     Office_xp::MsoTriState Link/*[in,def,opt]*/, 
                                                     Powerpoint_xp::Shape** OLEObject/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddOLEObject(float Left/*[in,def,opt]*/, 
                                                float Top/*[in,def,opt]*/, 
                                                float Width/*[in,def,opt]*/, 
                                                float Height/*[in,def,opt]*/, 
                                                BSTR ClassName/*[in,def,opt]*/, 
                                                BSTR FileName/*[in,def,opt]*/, 
                                                Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                                                BSTR IconFileName/*[in,def,opt]*/, 
                                                int IconIndex/*[in,def,opt]*/, 
                                                BSTR IconLabel/*[in,def,opt]*/, 
                                                Office_xp::MsoTriState Link/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddComment(float Left/*[in,def,opt]*/, 
                                                   float Top/*[in,def,opt]*/, 
                                                   float Width/*[in,def,opt]*/, 
                                                   float Height/*[in,def,opt]*/, 
                                                   Powerpoint_xp::Shape** Comment/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddComment(float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                                              float Width/*[in,def,opt]*/, 
                                              float Height/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddPlaceholder(Powerpoint_xp::PpPlaceholderType Type/*[in]*/
                                                       , float Left/*[in,def,opt]*/, 
                                                       float Top/*[in,def,opt]*/, 
                                                       float Width/*[in,def,opt]*/, 
                                                       float Height/*[in,def,opt]*/, 
                                                       Powerpoint_xp::Shape** Placeholder/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddPlaceholder(Powerpoint_xp::PpPlaceholderType Type/*[in]*/, 
                                                  float Left/*[in,def,opt]*/, 
                                                  float Top/*[in,def,opt]*/, 
                                                  float Width/*[in,def,opt]*/, 
                                                  float Height/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddMediaObject(BSTR FileName/*[in]*/, 
                                                       float Left/*[in,def,opt]*/, 
                                                       float Top/*[in,def,opt]*/, 
                                                       float Width/*[in,def,opt]*/, 
                                                       float Height/*[in,def,opt]*/, 
                                                       Powerpoint_xp::Shape** MediaObject/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddMediaObject(BSTR FileName/*[in]*/, float Left/*[in,def,opt]*/, 
                                                  float Top/*[in,def,opt]*/, 
                                                  float Width/*[in,def,opt]*/, 
                                                  float Height/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Paste(Powerpoint_xp::ShapeRange** Paste/*[out,retval]*/);
  Powerpoint_xp::ShapeRange* __fastcall Paste(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTable(int NumRows/*[in]*/, int NumColumns/*[in]*/, 
                                                 float Left/*[in,def,opt]*/, 
                                                 float Top/*[in,def,opt]*/, 
                                                 float Width/*[in,def,opt]*/, 
                                                 float Height/*[in,def,opt]*/, 
                                                 Powerpoint_xp::Shape** Table/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddTable(int NumRows/*[in]*/, int NumColumns/*[in]*/, 
                                            float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                                            float Width/*[in,def,opt]*/, 
                                            float Height/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PasteSpecial(Powerpoint_xp::PpPasteDataType DataType/*[in,def,opt]*/
                                                     , 
                                                     Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/
                                                     , BSTR IconFileName/*[in,def,opt]*/, 
                                                     int IconIndex/*[in,def,opt]*/, 
                                                     BSTR IconLabel/*[in,def,opt]*/, 
                                                     Office_xp::MsoTriState Link/*[in,def,opt]*/, 
                                                     Powerpoint_xp::ShapeRange** PasteSpecial/*[out,retval]*/);
  Powerpoint_xp::ShapeRange* __fastcall PasteSpecial(Powerpoint_xp::PpPasteDataType DataType/*[in,def,opt]*/, 
                                                     Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                                                     BSTR IconFileName/*[in,def,opt]*/, 
                                                     int IconIndex/*[in,def,opt]*/, 
                                                     BSTR IconLabel/*[in,def,opt]*/, 
                                                     Office_xp::MsoTriState Link/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddDiagram(Office_xp::MsoDiagramType Type/*[in]*/, 
                                                   float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in]*/, float Height/*[in]*/, 
                                                   Powerpoint_xp::Shape** Diagram/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddDiagram(Office_xp::MsoDiagramType Type/*[in]*/, 
                                              float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddCanvas(float Left/*[in]*/, float Top/*[in]*/, 
                                                  float Width/*[in]*/, float Height/*[in]*/, 
                                                  Powerpoint_xp::Shape** Shape/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddCanvas(float Left/*[in]*/, float Top/*[in]*/, 
                                             float Width/*[in]*/, float Height/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Office_xp::MsoTriState HasTitle = {read = get_HasTitle};
  __property   Powerpoint_xp::Shape* Title = {read = get_Title};
  __property   Powerpoint_xp::Placeholders* Placeholders = {read = get_Placeholders};
};
typedef ShapesDispT<Shapes> ShapesDisp;

typedef TComInterface<Placeholders>  TCOMPlaceholders;

// *********************************************************************//
// DispIntf:  Placeholders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493476-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PlaceholdersDispT : public TAutoDriver<Placeholders>
{
public:
  PlaceholdersDispT(){}

  PlaceholdersDispT(Placeholders *pintf)
  {
    TAutoDriver<Placeholders>::Bind(pintf, false);
  }

  PlaceholdersDispT(PlaceholdersPtr pintf)
  {
    TAutoDriver<Placeholders>::Bind(pintf, true);
  }

  PlaceholdersDispT& operator=(Placeholders *pintf)
  {
    TAutoDriver<Placeholders>::Bind(pintf, false);
    return *this;
  }

  PlaceholdersDispT& operator=(PlaceholdersPtr pintf)
  {
    TAutoDriver<Placeholders>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, 
                                             Powerpoint_xp::Shape** Item/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef PlaceholdersDispT<Placeholders> PlaceholdersDisp;

typedef TComInterface<PlaceholderFormat>  TCOMPlaceholderFormat;

// *********************************************************************//
// DispIntf:  PlaceholderFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493477-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PlaceholderFormatDispT : public TAutoDriver<PlaceholderFormat>
{
public:
  PlaceholderFormatDispT(){}

  PlaceholderFormatDispT(PlaceholderFormat *pintf)
  {
    TAutoDriver<PlaceholderFormat>::Bind(pintf, false);
  }

  PlaceholderFormatDispT(PlaceholderFormatPtr pintf)
  {
    TAutoDriver<PlaceholderFormat>::Bind(pintf, true);
  }

  PlaceholderFormatDispT& operator=(PlaceholderFormat *pintf)
  {
    TAutoDriver<PlaceholderFormat>::Bind(pintf, false);
    return *this;
  }

  PlaceholderFormatDispT& operator=(PlaceholderFormatPtr pintf)
  {
    TAutoDriver<PlaceholderFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Powerpoint_xp::PpPlaceholderType* Type/*[out,retval]*/);
  Powerpoint_xp::PpPlaceholderType __fastcall get_Type(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::PpPlaceholderType Type = {read = get_Type};
};
typedef PlaceholderFormatDispT<PlaceholderFormat> PlaceholderFormatDisp;

typedef TComInterface<FreeformBuilder>  TCOMFreeformBuilder;

// *********************************************************************//
// DispIntf:  FreeformBuilder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493478-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class FreeformBuilderDispT : public TAutoDriver<FreeformBuilder>
{
public:
  FreeformBuilderDispT(){}

  FreeformBuilderDispT(FreeformBuilder *pintf)
  {
    TAutoDriver<FreeformBuilder>::Bind(pintf, false);
  }

  FreeformBuilderDispT(FreeformBuilderPtr pintf)
  {
    TAutoDriver<FreeformBuilder>::Bind(pintf, true);
  }

  FreeformBuilderDispT& operator=(FreeformBuilder *pintf)
  {
    TAutoDriver<FreeformBuilder>::Bind(pintf, false);
    return *this;
  }

  FreeformBuilderDispT& operator=(FreeformBuilderPtr pintf)
  {
    TAutoDriver<FreeformBuilder>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddNodes(Office_xp::MsoSegmentType SegmentType/*[in]*/, 
                                                 Office_xp::MsoEditingType EditingType/*[in]*/, 
                                                 float X1/*[in]*/, float Y1/*[in]*/, 
                                                 float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/
                                                 , float X3/*[in,def,opt]*/, 
                                                 float Y3/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ConvertToShape(Powerpoint_xp::Shape** Freeform/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall ConvertToShape(void);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef FreeformBuilderDispT<FreeformBuilder> FreeformBuilderDisp;

typedef TComInterface<Shape>  TCOMShape;

// *********************************************************************//
// DispIntf:  Shape
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493479-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ShapeDispT : public TAutoDriver<Shape>
{
public:
  ShapeDispT(){}

  ShapeDispT(Shape *pintf)
  {
    TAutoDriver<Shape>::Bind(pintf, false);
  }

  ShapeDispT(ShapePtr pintf)
  {
    TAutoDriver<Shape>::Bind(pintf, true);
  }

  ShapeDispT& operator=(Shape *pintf)
  {
    TAutoDriver<Shape>::Bind(pintf, false);
    return *this;
  }

  ShapeDispT& operator=(ShapePtr pintf)
  {
    TAutoDriver<Shape>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Apply();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Flip(Office_xp::MsoFlipCmd FlipCmd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementLeft(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementRotation(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementTop(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PickUp();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RerouteConnections();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScaleHeight(float Factor/*[in]*/, 
                                                    Office_xp::MsoTriState RelativeToOriginalSize/*[in]*/
                                                    , Office_xp::MsoScaleFrom fScale/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScaleWidth(float Factor/*[in]*/, 
                                                   Office_xp::MsoTriState RelativeToOriginalSize/*[in]*/
                                                   , Office_xp::MsoScaleFrom fScale/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetShapesDefaultProperties();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Ungroup(Powerpoint_xp::ShapeRange** Ungroup/*[out,retval]*/);
  Powerpoint_xp::ShapeRange* __fastcall Ungroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ZOrder(Office_xp::MsoZOrderCmd ZOrderCmd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Adjustments(Powerpoint_xp::Adjustments** Adjustments/*[out,retval]*/);
  Powerpoint_xp::Adjustments* __fastcall get_Adjustments(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoShapeType(Office_xp::MsoAutoShapeType* AutoShapeType/*[out,retval]*/);
  Office_xp::MsoAutoShapeType __fastcall get_AutoShapeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoShapeType(Office_xp::MsoAutoShapeType AutoShapeType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BlackWhiteMode(Office_xp::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/);
  Office_xp::MsoBlackWhiteMode __fastcall get_BlackWhiteMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BlackWhiteMode(Office_xp::MsoBlackWhiteMode BlackWhiteMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Callout(Powerpoint_xp::CalloutFormat** Callout/*[out,retval]*/);
  Powerpoint_xp::CalloutFormat* __fastcall get_Callout(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/);
  int             __fastcall get_ConnectionSiteCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Connector(Office_xp::MsoTriState* Connector/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Connector(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectorFormat(Powerpoint_xp::ConnectorFormat** ConnectorFormat/*[out,retval]*/);
  Powerpoint_xp::ConnectorFormat* __fastcall get_ConnectorFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Powerpoint_xp::FillFormat** Fill/*[out,retval]*/);
  Powerpoint_xp::FillFormat* __fastcall get_Fill(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupItems(Powerpoint_xp::GroupShapes** GroupItems/*[out,retval]*/);
  Powerpoint_xp::GroupShapes* __fastcall get_GroupItems(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HorizontalFlip(Office_xp::MsoTriState* HorizontalFlip/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_HorizontalFlip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Line(Powerpoint_xp::LineFormat** Line/*[out,retval]*/);
  Powerpoint_xp::LineFormat* __fastcall get_Line(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LockAspectRatio(Office_xp::MsoTriState* LockAspectRatio/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_LockAspectRatio(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LockAspectRatio(Office_xp::MsoTriState LockAspectRatio/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Nodes(Powerpoint_xp::ShapeNodes** Nodes/*[out,retval]*/);
  Powerpoint_xp::ShapeNodes* __fastcall get_Nodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Rotation(float* Rotation/*[out,retval]*/);
  float           __fastcall get_Rotation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Rotation(float Rotation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureFormat(Powerpoint_xp::PictureFormat** Picture/*[out,retval]*/);
  Powerpoint_xp::PictureFormat* __fastcall get_PictureFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(Powerpoint_xp::ShadowFormat** Shadow/*[out,retval]*/);
  Powerpoint_xp::ShadowFormat* __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextEffect(Powerpoint_xp::TextEffectFormat** TextEffect/*[out,retval]*/);
  Powerpoint_xp::TextEffectFormat* __fastcall get_TextEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextFrame(Powerpoint_xp::TextFrame** TextFrame/*[out,retval]*/);
  Powerpoint_xp::TextFrame* __fastcall get_TextFrame(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ThreeD(Powerpoint_xp::ThreeDFormat** ThreeD/*[out,retval]*/);
  Powerpoint_xp::ThreeDFormat* __fastcall get_ThreeD(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_xp::MsoShapeType* Type/*[out,retval]*/);
  Office_xp::MsoShapeType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalFlip(Office_xp::MsoTriState* VerticalFlip/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_VerticalFlip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Vertices(VARIANT* Vertices/*[out,retval]*/);
  VARIANT         __fastcall get_Vertices(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_xp::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/);
  int             __fastcall get_ZOrderPosition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEFormat(Powerpoint_xp::OLEFormat** OLEFormat/*[out,retval]*/);
  Powerpoint_xp::OLEFormat* __fastcall get_OLEFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LinkFormat(Powerpoint_xp::LinkFormat** LinkFormat/*[out,retval]*/);
  Powerpoint_xp::LinkFormat* __fastcall get_LinkFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PlaceholderFormat(Powerpoint_xp::PlaceholderFormat** PlaceholderFormat/*[out,retval]*/);
  Powerpoint_xp::PlaceholderFormat* __fastcall get_PlaceholderFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AnimationSettings(Powerpoint_xp::AnimationSettings** AnimationSettings/*[out,retval]*/);
  Powerpoint_xp::AnimationSettings* __fastcall get_AnimationSettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActionSettings(Powerpoint_xp::ActionSettings** ActionSettings/*[out,retval]*/);
  Powerpoint_xp::ActionSettings* __fastcall get_ActionSettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_xp::Tags** Tags/*[out,retval]*/);
  Powerpoint_xp::Tags* __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select(Office_xp::MsoTriState Replace/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Duplicate(Powerpoint_xp::ShapeRange** Duplicate/*[out,retval]*/);
  Powerpoint_xp::ShapeRange* __fastcall Duplicate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MediaType(Powerpoint_xp::PpMediaType* MediaType/*[out,retval]*/);
  Powerpoint_xp::PpMediaType __fastcall get_MediaType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasTextFrame(Office_xp::MsoTriState* HasTextFrame/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_HasTextFrame(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SoundFormat(Powerpoint_xp::SoundFormat** SoundFormat/*[out,retval]*/);
  Powerpoint_xp::SoundFormat* __fastcall get_SoundFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Script(Office_xp::Script** Script/*[out,retval]*/);
  Office_xp::Script* __fastcall get_Script(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AlternativeText(BSTR* AlternativeText/*[out,retval]*/);
  BSTR            __fastcall get_AlternativeText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AlternativeText(BSTR AlternativeText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasTable(Office_xp::MsoTriState* HasTable/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_HasTable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Table(Powerpoint_xp::Table** Table/*[out,retval]*/);
  Powerpoint_xp::Table* __fastcall get_Table(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Export(BSTR PathName/*[in]*/, 
                                               Powerpoint_xp::PpShapeFormat Filter/*[in]*/, 
                                               int ScaleWidth/*[in,def,opt]*/, 
                                               int ScaleHeight/*[in,def,opt]*/, 
                                               Powerpoint_xp::PpExportMode ExportMode/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasDiagram(Office_xp::MsoTriState* pHasDiagram/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_HasDiagram(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Diagram(Powerpoint_xp::Diagram** Diagram/*[out,retval]*/);
  Powerpoint_xp::Diagram* __fastcall get_Diagram(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasDiagramNode(Office_xp::MsoTriState* pHasDiagram/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_HasDiagramNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DiagramNode(Powerpoint_xp::DiagramNode** DiagramNode/*[out,retval]*/);
  Powerpoint_xp::DiagramNode* __fastcall get_DiagramNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Child(Office_xp::MsoTriState* Child/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Child(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParentGroup(Powerpoint_xp::Shape** Parent/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall get_ParentGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanvasItems(Powerpoint_xp::CanvasShapes** CanvasShapes/*[out,retval]*/);
  Powerpoint_xp::CanvasShapes* __fastcall get_CanvasItems(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Id(int* pid/*[out,retval]*/);
  int             __fastcall get_Id(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CanvasCropLeft(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CanvasCropTop(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CanvasCropRight(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CanvasCropBottom(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RTF(BSTR Param1/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Adjustments* Adjustments = {read = get_Adjustments};
  __property   Office_xp::MsoAutoShapeType AutoShapeType = {read = get_AutoShapeType, write = set_AutoShapeType};
  __property   Office_xp::MsoBlackWhiteMode BlackWhiteMode = {read = get_BlackWhiteMode, write = set_BlackWhiteMode};
  __property   Powerpoint_xp::CalloutFormat* Callout = {read = get_Callout};
  __property   int             ConnectionSiteCount = {read = get_ConnectionSiteCount};
  __property   Office_xp::MsoTriState Connector = {read = get_Connector};
  __property   Powerpoint_xp::ConnectorFormat* ConnectorFormat = {read = get_ConnectorFormat};
  __property   Powerpoint_xp::FillFormat* Fill = {read = get_Fill};
  __property   Powerpoint_xp::GroupShapes* GroupItems = {read = get_GroupItems};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Office_xp::MsoTriState HorizontalFlip = {read = get_HorizontalFlip};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   Powerpoint_xp::LineFormat* Line = {read = get_Line};
  __property   Office_xp::MsoTriState LockAspectRatio = {read = get_LockAspectRatio, write = set_LockAspectRatio};
  __property   BSTR            Name = {read = get_Name};
  __property   Powerpoint_xp::ShapeNodes* Nodes = {read = get_Nodes};
  __property   float           Rotation = {read = get_Rotation, write = set_Rotation};
  __property   Powerpoint_xp::PictureFormat* PictureFormat = {read = get_PictureFormat};
  __property   Powerpoint_xp::ShadowFormat* Shadow = {read = get_Shadow};
  __property   Powerpoint_xp::TextEffectFormat* TextEffect = {read = get_TextEffect};
  __property   Powerpoint_xp::TextFrame* TextFrame = {read = get_TextFrame};
  __property   Powerpoint_xp::ThreeDFormat* ThreeD = {read = get_ThreeD};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   Office_xp::MsoShapeType Type = {read = get_Type};
  __property   Office_xp::MsoTriState VerticalFlip = {read = get_VerticalFlip};
  __property   Office_xp::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};
  __property   Powerpoint_xp::OLEFormat* OLEFormat = {read = get_OLEFormat};
  __property   Powerpoint_xp::LinkFormat* LinkFormat = {read = get_LinkFormat};
  __property   Powerpoint_xp::PlaceholderFormat* PlaceholderFormat = {read = get_PlaceholderFormat};
  __property   Powerpoint_xp::AnimationSettings* AnimationSettings = {read = get_AnimationSettings};
  __property   Powerpoint_xp::ActionSettings* ActionSettings = {read = get_ActionSettings};
  __property   Powerpoint_xp::Tags* Tags = {read = get_Tags};
  __property   Powerpoint_xp::PpMediaType MediaType = {read = get_MediaType};
  __property   Office_xp::MsoTriState HasTextFrame = {read = get_HasTextFrame};
  __property   Powerpoint_xp::SoundFormat* SoundFormat = {read = get_SoundFormat};
  __property   Office_xp::Script* Script = {read = get_Script};
  __property   BSTR            AlternativeText = {read = get_AlternativeText};
  __property   Office_xp::MsoTriState HasTable = {read = get_HasTable};
  __property   Powerpoint_xp::Table* Table = {read = get_Table};
  __property   Office_xp::MsoTriState HasDiagram = {read = get_HasDiagram};
  __property   Powerpoint_xp::Diagram* Diagram = {read = get_Diagram};
  __property   Office_xp::MsoTriState HasDiagramNode = {read = get_HasDiagramNode};
  __property   Powerpoint_xp::DiagramNode* DiagramNode = {read = get_DiagramNode};
  __property   Office_xp::MsoTriState Child = {read = get_Child};
  __property   Powerpoint_xp::Shape* ParentGroup = {read = get_ParentGroup};
  __property   Powerpoint_xp::CanvasShapes* CanvasItems = {read = get_CanvasItems};
  __property   int             Id = {read = get_Id};
  __property   BSTR            RTF = {write = set_RTF};
};
typedef ShapeDispT<Shape> ShapeDisp;

typedef TComInterface<ShapeRange>  TCOMShapeRange;

// *********************************************************************//
// DispIntf:  ShapeRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ShapeRangeDispT : public TAutoDriver<ShapeRange>
{
public:
  ShapeRangeDispT(){}

  ShapeRangeDispT(ShapeRange *pintf)
  {
    TAutoDriver<ShapeRange>::Bind(pintf, false);
  }

  ShapeRangeDispT(ShapeRangePtr pintf)
  {
    TAutoDriver<ShapeRange>::Bind(pintf, true);
  }

  ShapeRangeDispT& operator=(ShapeRange *pintf)
  {
    TAutoDriver<ShapeRange>::Bind(pintf, false);
    return *this;
  }

  ShapeRangeDispT& operator=(ShapeRangePtr pintf)
  {
    TAutoDriver<ShapeRange>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Apply();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Flip(Office_xp::MsoFlipCmd FlipCmd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementLeft(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementRotation(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementTop(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PickUp();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RerouteConnections();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScaleHeight(float Factor/*[in]*/, 
                                                    Office_xp::MsoTriState RelativeToOriginalSize/*[in]*/
                                                    , Office_xp::MsoScaleFrom fScale/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScaleWidth(float Factor/*[in]*/, 
                                                   Office_xp::MsoTriState RelativeToOriginalSize/*[in]*/
                                                   , Office_xp::MsoScaleFrom fScale/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetShapesDefaultProperties();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Ungroup(Powerpoint_xp::ShapeRange** Ungroup/*[out,retval]*/);
  Powerpoint_xp::ShapeRange* __fastcall Ungroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ZOrder(Office_xp::MsoZOrderCmd ZOrderCmd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Adjustments(Powerpoint_xp::Adjustments** Adjustments/*[out,retval]*/);
  Powerpoint_xp::Adjustments* __fastcall get_Adjustments(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoShapeType(Office_xp::MsoAutoShapeType* AutoShapeType/*[out,retval]*/);
  Office_xp::MsoAutoShapeType __fastcall get_AutoShapeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoShapeType(Office_xp::MsoAutoShapeType AutoShapeType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BlackWhiteMode(Office_xp::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/);
  Office_xp::MsoBlackWhiteMode __fastcall get_BlackWhiteMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BlackWhiteMode(Office_xp::MsoBlackWhiteMode BlackWhiteMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Callout(Powerpoint_xp::CalloutFormat** Callout/*[out,retval]*/);
  Powerpoint_xp::CalloutFormat* __fastcall get_Callout(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/);
  int             __fastcall get_ConnectionSiteCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Connector(Office_xp::MsoTriState* Connector/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Connector(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectorFormat(Powerpoint_xp::ConnectorFormat** ConnectorFormat/*[out,retval]*/);
  Powerpoint_xp::ConnectorFormat* __fastcall get_ConnectorFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Powerpoint_xp::FillFormat** Fill/*[out,retval]*/);
  Powerpoint_xp::FillFormat* __fastcall get_Fill(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupItems(Powerpoint_xp::GroupShapes** GroupItems/*[out,retval]*/);
  Powerpoint_xp::GroupShapes* __fastcall get_GroupItems(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HorizontalFlip(Office_xp::MsoTriState* HorizontalFlip/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_HorizontalFlip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Line(Powerpoint_xp::LineFormat** Line/*[out,retval]*/);
  Powerpoint_xp::LineFormat* __fastcall get_Line(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LockAspectRatio(Office_xp::MsoTriState* LockAspectRatio/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_LockAspectRatio(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LockAspectRatio(Office_xp::MsoTriState LockAspectRatio/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Nodes(Powerpoint_xp::ShapeNodes** Nodes/*[out,retval]*/);
  Powerpoint_xp::ShapeNodes* __fastcall get_Nodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Rotation(float* Rotation/*[out,retval]*/);
  float           __fastcall get_Rotation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Rotation(float Rotation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureFormat(Powerpoint_xp::PictureFormat** Picture/*[out,retval]*/);
  Powerpoint_xp::PictureFormat* __fastcall get_PictureFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(Powerpoint_xp::ShadowFormat** Shadow/*[out,retval]*/);
  Powerpoint_xp::ShadowFormat* __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextEffect(Powerpoint_xp::TextEffectFormat** TextEffect/*[out,retval]*/);
  Powerpoint_xp::TextEffectFormat* __fastcall get_TextEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextFrame(Powerpoint_xp::TextFrame** TextFrame/*[out,retval]*/);
  Powerpoint_xp::TextFrame* __fastcall get_TextFrame(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ThreeD(Powerpoint_xp::ThreeDFormat** ThreeD/*[out,retval]*/);
  Powerpoint_xp::ThreeDFormat* __fastcall get_ThreeD(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_xp::MsoShapeType* Type/*[out,retval]*/);
  Office_xp::MsoShapeType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalFlip(Office_xp::MsoTriState* VerticalFlip/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_VerticalFlip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Vertices(VARIANT* Vertices/*[out,retval]*/);
  VARIANT         __fastcall get_Vertices(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_xp::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/);
  int             __fastcall get_ZOrderPosition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEFormat(Powerpoint_xp::OLEFormat** OLEFormat/*[out,retval]*/);
  Powerpoint_xp::OLEFormat* __fastcall get_OLEFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LinkFormat(Powerpoint_xp::LinkFormat** LinkFormat/*[out,retval]*/);
  Powerpoint_xp::LinkFormat* __fastcall get_LinkFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PlaceholderFormat(Powerpoint_xp::PlaceholderFormat** PlaceholderFormat/*[out,retval]*/);
  Powerpoint_xp::PlaceholderFormat* __fastcall get_PlaceholderFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AnimationSettings(Powerpoint_xp::AnimationSettings** AnimationSettings/*[out,retval]*/);
  Powerpoint_xp::AnimationSettings* __fastcall get_AnimationSettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActionSettings(Powerpoint_xp::ActionSettings** ActionSettings/*[out,retval]*/);
  Powerpoint_xp::ActionSettings* __fastcall get_ActionSettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_xp::Tags** Tags/*[out,retval]*/);
  Powerpoint_xp::Tags* __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select(Office_xp::MsoTriState Replace/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Duplicate(Powerpoint_xp::ShapeRange** Duplicate/*[out,retval]*/);
  Powerpoint_xp::ShapeRange* __fastcall Duplicate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MediaType(Powerpoint_xp::PpMediaType* MediaType/*[out,retval]*/);
  Powerpoint_xp::PpMediaType __fastcall get_MediaType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasTextFrame(Office_xp::MsoTriState* HasTextFrame/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_HasTextFrame(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SoundFormat(Powerpoint_xp::SoundFormat** SoundFormat/*[out,retval]*/);
  Powerpoint_xp::SoundFormat* __fastcall get_SoundFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT Index/*[in]*/, 
                                             Powerpoint_xp::Shape** Item/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Group(Powerpoint_xp::Shape** Group/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall Group(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Regroup(Powerpoint_xp::Shape** Regroup/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall Regroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Align(Office_xp::MsoAlignCmd AlignCmd/*[in]*/, 
                                              Office_xp::MsoTriState RelativeTo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Distribute(Office_xp::MsoDistributeCmd DistributeCmd/*[in]*/
                                                   , Office_xp::MsoTriState RelativeTo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetPolygonalRepresentation(unsigned_long maxPointsInBuffer/*[in]*/
                                                                   , float* pPoints/*[in]*/, 
                                                                   unsigned_long* numPointsInPolygon/*[out]*/
                                                                   , 
                                                                   Office_xp::MsoTriState* IsOpen/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Script(Office_xp::Script** Script/*[out,retval]*/);
  Office_xp::Script* __fastcall get_Script(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AlternativeText(BSTR* AlternativeText/*[out,retval]*/);
  BSTR            __fastcall get_AlternativeText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AlternativeText(BSTR AlternativeText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasTable(Office_xp::MsoTriState* HasTable/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_HasTable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Table(Powerpoint_xp::Table** Table/*[out,retval]*/);
  Powerpoint_xp::Table* __fastcall get_Table(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Export(BSTR PathName/*[in]*/, 
                                               Powerpoint_xp::PpShapeFormat Filter/*[in]*/, 
                                               int ScaleWidth/*[in,def,opt]*/, 
                                               int ScaleHeight/*[in,def,opt]*/, 
                                               Powerpoint_xp::PpExportMode ExportMode/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasDiagram(Office_xp::MsoTriState* pHasDiagram/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_HasDiagram(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Diagram(Powerpoint_xp::Diagram** Diagram/*[out,retval]*/);
  Powerpoint_xp::Diagram* __fastcall get_Diagram(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasDiagramNode(Office_xp::MsoTriState* pHasDiagram/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_HasDiagramNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DiagramNode(Powerpoint_xp::DiagramNode** DiagramNode/*[out,retval]*/);
  Powerpoint_xp::DiagramNode* __fastcall get_DiagramNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Child(Office_xp::MsoTriState* Child/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Child(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParentGroup(Powerpoint_xp::Shape** Parent/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall get_ParentGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanvasItems(Powerpoint_xp::CanvasShapes** CanvasShapes/*[out,retval]*/);
  Powerpoint_xp::CanvasShapes* __fastcall get_CanvasItems(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Id(int* pid/*[out,retval]*/);
  int             __fastcall get_Id(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CanvasCropLeft(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CanvasCropTop(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CanvasCropRight(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CanvasCropBottom(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RTF(BSTR Param1/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Adjustments* Adjustments = {read = get_Adjustments};
  __property   Office_xp::MsoAutoShapeType AutoShapeType = {read = get_AutoShapeType, write = set_AutoShapeType};
  __property   Office_xp::MsoBlackWhiteMode BlackWhiteMode = {read = get_BlackWhiteMode, write = set_BlackWhiteMode};
  __property   Powerpoint_xp::CalloutFormat* Callout = {read = get_Callout};
  __property   int             ConnectionSiteCount = {read = get_ConnectionSiteCount};
  __property   Office_xp::MsoTriState Connector = {read = get_Connector};
  __property   Powerpoint_xp::ConnectorFormat* ConnectorFormat = {read = get_ConnectorFormat};
  __property   Powerpoint_xp::FillFormat* Fill = {read = get_Fill};
  __property   Powerpoint_xp::GroupShapes* GroupItems = {read = get_GroupItems};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Office_xp::MsoTriState HorizontalFlip = {read = get_HorizontalFlip};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   Powerpoint_xp::LineFormat* Line = {read = get_Line};
  __property   Office_xp::MsoTriState LockAspectRatio = {read = get_LockAspectRatio, write = set_LockAspectRatio};
  __property   BSTR            Name = {read = get_Name};
  __property   Powerpoint_xp::ShapeNodes* Nodes = {read = get_Nodes};
  __property   float           Rotation = {read = get_Rotation, write = set_Rotation};
  __property   Powerpoint_xp::PictureFormat* PictureFormat = {read = get_PictureFormat};
  __property   Powerpoint_xp::ShadowFormat* Shadow = {read = get_Shadow};
  __property   Powerpoint_xp::TextEffectFormat* TextEffect = {read = get_TextEffect};
  __property   Powerpoint_xp::TextFrame* TextFrame = {read = get_TextFrame};
  __property   Powerpoint_xp::ThreeDFormat* ThreeD = {read = get_ThreeD};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   Office_xp::MsoShapeType Type = {read = get_Type};
  __property   Office_xp::MsoTriState VerticalFlip = {read = get_VerticalFlip};
  __property   Office_xp::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};
  __property   Powerpoint_xp::OLEFormat* OLEFormat = {read = get_OLEFormat};
  __property   Powerpoint_xp::LinkFormat* LinkFormat = {read = get_LinkFormat};
  __property   Powerpoint_xp::PlaceholderFormat* PlaceholderFormat = {read = get_PlaceholderFormat};
  __property   Powerpoint_xp::AnimationSettings* AnimationSettings = {read = get_AnimationSettings};
  __property   Powerpoint_xp::ActionSettings* ActionSettings = {read = get_ActionSettings};
  __property   Powerpoint_xp::Tags* Tags = {read = get_Tags};
  __property   Powerpoint_xp::PpMediaType MediaType = {read = get_MediaType};
  __property   Office_xp::MsoTriState HasTextFrame = {read = get_HasTextFrame};
  __property   Powerpoint_xp::SoundFormat* SoundFormat = {read = get_SoundFormat};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
  __property   Office_xp::Script* Script = {read = get_Script};
  __property   BSTR            AlternativeText = {read = get_AlternativeText};
  __property   Office_xp::MsoTriState HasTable = {read = get_HasTable};
  __property   Powerpoint_xp::Table* Table = {read = get_Table};
  __property   Office_xp::MsoTriState HasDiagram = {read = get_HasDiagram};
  __property   Powerpoint_xp::Diagram* Diagram = {read = get_Diagram};
  __property   Office_xp::MsoTriState HasDiagramNode = {read = get_HasDiagramNode};
  __property   Powerpoint_xp::DiagramNode* DiagramNode = {read = get_DiagramNode};
  __property   Office_xp::MsoTriState Child = {read = get_Child};
  __property   Powerpoint_xp::Shape* ParentGroup = {read = get_ParentGroup};
  __property   Powerpoint_xp::CanvasShapes* CanvasItems = {read = get_CanvasItems};
  __property   int             Id = {read = get_Id};
  __property   BSTR            RTF = {write = set_RTF};
};
typedef ShapeRangeDispT<ShapeRange> ShapeRangeDisp;

typedef TComInterface<GroupShapes>  TCOMGroupShapes;

// *********************************************************************//
// DispIntf:  GroupShapes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class GroupShapesDispT : public TAutoDriver<GroupShapes>
{
public:
  GroupShapesDispT(){}

  GroupShapesDispT(GroupShapes *pintf)
  {
    TAutoDriver<GroupShapes>::Bind(pintf, false);
  }

  GroupShapesDispT(GroupShapesPtr pintf)
  {
    TAutoDriver<GroupShapes>::Bind(pintf, true);
  }

  GroupShapesDispT& operator=(GroupShapes *pintf)
  {
    TAutoDriver<GroupShapes>::Bind(pintf, false);
    return *this;
  }

  GroupShapesDispT& operator=(GroupShapesPtr pintf)
  {
    TAutoDriver<GroupShapes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* pnShapes/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT Index/*[in]*/, 
                                             Powerpoint_xp::Shape** Item/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Range(VARIANT Index/*[in]*/, 
                                              Powerpoint_xp::ShapeRange** Range/*[out,retval]*/);
  Powerpoint_xp::ShapeRange* __fastcall Range(VARIANT Index/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef GroupShapesDispT<GroupShapes> GroupShapesDisp;

typedef TComInterface<Adjustments>  TCOMAdjustments;

// *********************************************************************//
// DispIntf:  Adjustments
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class AdjustmentsDispT : public TAutoDriver<Adjustments>
{
public:
  AdjustmentsDispT(){}

  AdjustmentsDispT(Adjustments *pintf)
  {
    TAutoDriver<Adjustments>::Bind(pintf, false);
  }

  AdjustmentsDispT(AdjustmentsPtr pintf)
  {
    TAutoDriver<Adjustments>::Bind(pintf, true);
  }

  AdjustmentsDispT& operator=(Adjustments *pintf)
  {
    TAutoDriver<Adjustments>::Bind(pintf, false);
    return *this;
  }

  AdjustmentsDispT& operator=(AdjustmentsPtr pintf)
  {
    TAutoDriver<Adjustments>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* Count/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(int Index/*[in]*/, float* Val/*[out,retval]*/);
  float           __fastcall get_Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Item(int Index/*[in]*/, float Val/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
};
typedef AdjustmentsDispT<Adjustments> AdjustmentsDisp;

typedef TComInterface<PictureFormat>  TCOMPictureFormat;

// *********************************************************************//
// DispIntf:  PictureFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PictureFormatDispT : public TAutoDriver<PictureFormat>
{
public:
  PictureFormatDispT(){}

  PictureFormatDispT(PictureFormat *pintf)
  {
    TAutoDriver<PictureFormat>::Bind(pintf, false);
  }

  PictureFormatDispT(PictureFormatPtr pintf)
  {
    TAutoDriver<PictureFormat>::Bind(pintf, true);
  }

  PictureFormatDispT& operator=(PictureFormat *pintf)
  {
    TAutoDriver<PictureFormat>::Bind(pintf, false);
    return *this;
  }

  PictureFormatDispT& operator=(PictureFormatPtr pintf)
  {
    TAutoDriver<PictureFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementBrightness(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementContrast(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Brightness(float* Brightness/*[out,retval]*/);
  float           __fastcall get_Brightness(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Brightness(float Brightness/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorType(Office_xp::MsoPictureColorType* ColorType/*[out,retval]*/);
  Office_xp::MsoPictureColorType __fastcall get_ColorType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColorType(Office_xp::MsoPictureColorType ColorType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Contrast(float* Contrast/*[out,retval]*/);
  float           __fastcall get_Contrast(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Contrast(float Contrast/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CropBottom(float* CropBottom/*[out,retval]*/);
  float           __fastcall get_CropBottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CropBottom(float CropBottom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CropLeft(float* CropLeft/*[out,retval]*/);
  float           __fastcall get_CropLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CropLeft(float CropLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CropRight(float* CropRight/*[out,retval]*/);
  float           __fastcall get_CropRight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CropRight(float CropRight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CropTop(float* CropTop/*[out,retval]*/);
  float           __fastcall get_CropTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CropTop(float CropTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TransparencyColor(Office_xp::MsoRGBType* TransparencyColor/*[out,retval]*/);
  Office_xp::MsoRGBType __fastcall get_TransparencyColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TransparencyColor(Office_xp::MsoRGBType TransparencyColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TransparentBackground(Office_xp::MsoTriState* TransparentBackground/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_TransparentBackground(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TransparentBackground(Office_xp::MsoTriState TransparentBackground/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Brightness = {read = get_Brightness, write = set_Brightness};
  __property   Office_xp::MsoPictureColorType ColorType = {read = get_ColorType, write = set_ColorType};
  __property   float           Contrast = {read = get_Contrast, write = set_Contrast};
  __property   float           CropBottom = {read = get_CropBottom, write = set_CropBottom};
  __property   float           CropLeft = {read = get_CropLeft, write = set_CropLeft};
  __property   float           CropRight = {read = get_CropRight, write = set_CropRight};
  __property   float           CropTop = {read = get_CropTop, write = set_CropTop};
  __property   Office_xp::MsoRGBType TransparencyColor = {read = get_TransparencyColor, write = set_TransparencyColor};
  __property   Office_xp::MsoTriState TransparentBackground = {read = get_TransparentBackground, write = set_TransparentBackground};
};
typedef PictureFormatDispT<PictureFormat> PictureFormatDisp;

typedef TComInterface<FillFormat>  TCOMFillFormat;

// *********************************************************************//
// DispIntf:  FillFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class FillFormatDispT : public TAutoDriver<FillFormat>
{
public:
  FillFormatDispT(){}

  FillFormatDispT(FillFormat *pintf)
  {
    TAutoDriver<FillFormat>::Bind(pintf, false);
  }

  FillFormatDispT(FillFormatPtr pintf)
  {
    TAutoDriver<FillFormat>::Bind(pintf, true);
  }

  FillFormatDispT& operator=(FillFormat *pintf)
  {
    TAutoDriver<FillFormat>::Bind(pintf, false);
    return *this;
  }

  FillFormatDispT& operator=(FillFormatPtr pintf)
  {
    TAutoDriver<FillFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Background();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OneColorGradient(Office_xp::MsoGradientStyle Style/*[in]*/, 
                                                         int Variant/*[in]*/, float Degree/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Patterned(Office_xp::MsoPatternType Pattern/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresetGradient(Office_xp::MsoGradientStyle Style/*[in]*/, 
                                                       int Variant/*[in]*/, 
                                                       Office_xp::MsoPresetGradientType PresetGradientType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresetTextured(Office_xp::MsoPresetTexture PresetTexture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Solid();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall TwoColorGradient(Office_xp::MsoGradientStyle Style/*[in]*/, 
                                                         int Variant/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UserPicture(BSTR PictureFile/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UserTextured(BSTR TextureFile/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Powerpoint_xp::ColorFormat** BackColor/*[out,retval]*/);
  Powerpoint_xp::ColorFormat* __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Powerpoint_xp::ColorFormat* BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Powerpoint_xp::ColorFormat** ForeColor/*[out,retval]*/);
  Powerpoint_xp::ColorFormat* __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Powerpoint_xp::ColorFormat* ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientColorType(Office_xp::MsoGradientColorType* GradientColorType/*[out,retval]*/);
  Office_xp::MsoGradientColorType __fastcall get_GradientColorType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientDegree(float* GradientDegree/*[out,retval]*/);
  float           __fastcall get_GradientDegree(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientStyle(Office_xp::MsoGradientStyle* GradientStyle/*[out,retval]*/);
  Office_xp::MsoGradientStyle __fastcall get_GradientStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientVariant(int* GradientVariant/*[out,retval]*/);
  int             __fastcall get_GradientVariant(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Pattern(Office_xp::MsoPatternType* Pattern/*[out,retval]*/);
  Office_xp::MsoPatternType __fastcall get_Pattern(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetGradientType(Office_xp::MsoPresetGradientType* PresetGradientType/*[out,retval]*/);
  Office_xp::MsoPresetGradientType __fastcall get_PresetGradientType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetTexture(Office_xp::MsoPresetTexture* PresetTexture/*[out,retval]*/);
  Office_xp::MsoPresetTexture __fastcall get_PresetTexture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextureName(BSTR* TextureName/*[out,retval]*/);
  BSTR            __fastcall get_TextureName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextureType(Office_xp::MsoTextureType* TextureType/*[out,retval]*/);
  Office_xp::MsoTextureType __fastcall get_TextureType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Transparency(float* Transparency/*[out,retval]*/);
  float           __fastcall get_Transparency(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Transparency(float Transparency/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_xp::MsoFillType* Type/*[out,retval]*/);
  Office_xp::MsoFillType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_xp::MsoTriState Visible/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ColorFormat* BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Powerpoint_xp::ColorFormat* ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_xp::MsoGradientColorType GradientColorType = {read = get_GradientColorType};
  __property   float           GradientDegree = {read = get_GradientDegree};
  __property   Office_xp::MsoGradientStyle GradientStyle = {read = get_GradientStyle};
  __property   int             GradientVariant = {read = get_GradientVariant};
  __property   Office_xp::MsoPatternType Pattern = {read = get_Pattern};
  __property   Office_xp::MsoPresetGradientType PresetGradientType = {read = get_PresetGradientType};
  __property   Office_xp::MsoPresetTexture PresetTexture = {read = get_PresetTexture};
  __property   BSTR            TextureName = {read = get_TextureName};
  __property   Office_xp::MsoTextureType TextureType = {read = get_TextureType};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_xp::MsoFillType Type = {read = get_Type};
  __property   Office_xp::MsoTriState Visible = {read = get_Visible, write = set_Visible};
};
typedef FillFormatDispT<FillFormat> FillFormatDisp;

typedef TComInterface<LineFormat>  TCOMLineFormat;

// *********************************************************************//
// DispIntf:  LineFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class LineFormatDispT : public TAutoDriver<LineFormat>
{
public:
  LineFormatDispT(){}

  LineFormatDispT(LineFormat *pintf)
  {
    TAutoDriver<LineFormat>::Bind(pintf, false);
  }

  LineFormatDispT(LineFormatPtr pintf)
  {
    TAutoDriver<LineFormat>::Bind(pintf, true);
  }

  LineFormatDispT& operator=(LineFormat *pintf)
  {
    TAutoDriver<LineFormat>::Bind(pintf, false);
    return *this;
  }

  LineFormatDispT& operator=(LineFormatPtr pintf)
  {
    TAutoDriver<LineFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Powerpoint_xp::ColorFormat** BackColor/*[out,retval]*/);
  Powerpoint_xp::ColorFormat* __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Powerpoint_xp::ColorFormat* BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginArrowheadLength(Office_xp::MsoArrowheadLength* BeginArrowheadLength/*[out,retval]*/);
  Office_xp::MsoArrowheadLength __fastcall get_BeginArrowheadLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginArrowheadLength(Office_xp::MsoArrowheadLength BeginArrowheadLength/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginArrowheadStyle(Office_xp::MsoArrowheadStyle* BeginArrowheadStyle/*[out,retval]*/);
  Office_xp::MsoArrowheadStyle __fastcall get_BeginArrowheadStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginArrowheadStyle(Office_xp::MsoArrowheadStyle BeginArrowheadStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginArrowheadWidth(Office_xp::MsoArrowheadWidth* BeginArrowheadWidth/*[out,retval]*/);
  Office_xp::MsoArrowheadWidth __fastcall get_BeginArrowheadWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginArrowheadWidth(Office_xp::MsoArrowheadWidth BeginArrowheadWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DashStyle(Office_xp::MsoLineDashStyle* DashStyle/*[out,retval]*/);
  Office_xp::MsoLineDashStyle __fastcall get_DashStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DashStyle(Office_xp::MsoLineDashStyle DashStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndArrowheadLength(Office_xp::MsoArrowheadLength* EndArrowheadLength/*[out,retval]*/);
  Office_xp::MsoArrowheadLength __fastcall get_EndArrowheadLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EndArrowheadLength(Office_xp::MsoArrowheadLength EndArrowheadLength/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndArrowheadStyle(Office_xp::MsoArrowheadStyle* EndArrowheadStyle/*[out,retval]*/);
  Office_xp::MsoArrowheadStyle __fastcall get_EndArrowheadStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EndArrowheadStyle(Office_xp::MsoArrowheadStyle EndArrowheadStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndArrowheadWidth(Office_xp::MsoArrowheadWidth* EndArrowheadWidth/*[out,retval]*/);
  Office_xp::MsoArrowheadWidth __fastcall get_EndArrowheadWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EndArrowheadWidth(Office_xp::MsoArrowheadWidth EndArrowheadWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Powerpoint_xp::ColorFormat** ForeColor/*[out,retval]*/);
  Powerpoint_xp::ColorFormat* __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Powerpoint_xp::ColorFormat* ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Pattern(Office_xp::MsoPatternType* Pattern/*[out,retval]*/);
  Office_xp::MsoPatternType __fastcall get_Pattern(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Pattern(Office_xp::MsoPatternType Pattern/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Office_xp::MsoLineStyle* Style/*[out,retval]*/);
  Office_xp::MsoLineStyle __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Office_xp::MsoLineStyle Style/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Transparency(float* Transparency/*[out,retval]*/);
  float           __fastcall get_Transparency(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Transparency(float Transparency/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_xp::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Weight(float* Weight/*[out,retval]*/);
  float           __fastcall get_Weight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Weight(float Weight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InsetPen(Office_xp::MsoTriState* InsetPen/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_InsetPen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InsetPen(Office_xp::MsoTriState InsetPen/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ColorFormat* BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Office_xp::MsoArrowheadLength BeginArrowheadLength = {read = get_BeginArrowheadLength, write = set_BeginArrowheadLength};
  __property   Office_xp::MsoArrowheadStyle BeginArrowheadStyle = {read = get_BeginArrowheadStyle, write = set_BeginArrowheadStyle};
  __property   Office_xp::MsoArrowheadWidth BeginArrowheadWidth = {read = get_BeginArrowheadWidth, write = set_BeginArrowheadWidth};
  __property   Office_xp::MsoLineDashStyle DashStyle = {read = get_DashStyle, write = set_DashStyle};
  __property   Office_xp::MsoArrowheadLength EndArrowheadLength = {read = get_EndArrowheadLength, write = set_EndArrowheadLength};
  __property   Office_xp::MsoArrowheadStyle EndArrowheadStyle = {read = get_EndArrowheadStyle, write = set_EndArrowheadStyle};
  __property   Office_xp::MsoArrowheadWidth EndArrowheadWidth = {read = get_EndArrowheadWidth, write = set_EndArrowheadWidth};
  __property   Powerpoint_xp::ColorFormat* ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_xp::MsoPatternType Pattern = {read = get_Pattern, write = set_Pattern};
  __property   Office_xp::MsoLineStyle Style = {read = get_Style, write = set_Style};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_xp::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Weight = {read = get_Weight, write = set_Weight};
  __property   Office_xp::MsoTriState InsetPen = {read = get_InsetPen, write = set_InsetPen};
};
typedef LineFormatDispT<LineFormat> LineFormatDisp;

typedef TComInterface<ShadowFormat>  TCOMShadowFormat;

// *********************************************************************//
// DispIntf:  ShadowFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493480-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ShadowFormatDispT : public TAutoDriver<ShadowFormat>
{
public:
  ShadowFormatDispT(){}

  ShadowFormatDispT(ShadowFormat *pintf)
  {
    TAutoDriver<ShadowFormat>::Bind(pintf, false);
  }

  ShadowFormatDispT(ShadowFormatPtr pintf)
  {
    TAutoDriver<ShadowFormat>::Bind(pintf, true);
  }

  ShadowFormatDispT& operator=(ShadowFormat *pintf)
  {
    TAutoDriver<ShadowFormat>::Bind(pintf, false);
    return *this;
  }

  ShadowFormatDispT& operator=(ShadowFormatPtr pintf)
  {
    TAutoDriver<ShadowFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementOffsetX(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementOffsetY(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Powerpoint_xp::ColorFormat** ForeColor/*[out,retval]*/);
  Powerpoint_xp::ColorFormat* __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Powerpoint_xp::ColorFormat* ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Obscured(Office_xp::MsoTriState* Obscured/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Obscured(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Obscured(Office_xp::MsoTriState Obscured/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OffsetX(float* OffsetX/*[out,retval]*/);
  float           __fastcall get_OffsetX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OffsetX(float OffsetX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OffsetY(float* OffsetY/*[out,retval]*/);
  float           __fastcall get_OffsetY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OffsetY(float OffsetY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Transparency(float* Transparency/*[out,retval]*/);
  float           __fastcall get_Transparency(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Transparency(float Transparency/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_xp::MsoShadowType* Type/*[out,retval]*/);
  Office_xp::MsoShadowType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Office_xp::MsoShadowType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_xp::MsoTriState Visible/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ColorFormat* ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_xp::MsoTriState Obscured = {read = get_Obscured, write = set_Obscured};
  __property   float           OffsetX = {read = get_OffsetX, write = set_OffsetX};
  __property   float           OffsetY = {read = get_OffsetY, write = set_OffsetY};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_xp::MsoShadowType Type = {read = get_Type, write = set_Type};
  __property   Office_xp::MsoTriState Visible = {read = get_Visible, write = set_Visible};
};
typedef ShadowFormatDispT<ShadowFormat> ShadowFormatDisp;

typedef TComInterface<ConnectorFormat>  TCOMConnectorFormat;

// *********************************************************************//
// DispIntf:  ConnectorFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493481-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ConnectorFormatDispT : public TAutoDriver<ConnectorFormat>
{
public:
  ConnectorFormatDispT(){}

  ConnectorFormatDispT(ConnectorFormat *pintf)
  {
    TAutoDriver<ConnectorFormat>::Bind(pintf, false);
  }

  ConnectorFormatDispT(ConnectorFormatPtr pintf)
  {
    TAutoDriver<ConnectorFormat>::Bind(pintf, true);
  }

  ConnectorFormatDispT& operator=(ConnectorFormat *pintf)
  {
    TAutoDriver<ConnectorFormat>::Bind(pintf, false);
    return *this;
  }

  ConnectorFormatDispT& operator=(ConnectorFormatPtr pintf)
  {
    TAutoDriver<ConnectorFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BeginConnect(Powerpoint_xp::Shape* ConnectedShape/*[in]*/, 
                                                     int ConnectionSite/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BeginDisconnect();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EndConnect(Powerpoint_xp::Shape* ConnectedShape/*[in]*/, 
                                                   int ConnectionSite/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EndDisconnect();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginConnected(Office_xp::MsoTriState* BeginConnected/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_BeginConnected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginConnectedShape(Powerpoint_xp::Shape** BeginConnectedShape/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall get_BeginConnectedShape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginConnectionSite(int* BeginConnectionSite/*[out,retval]*/);
  int             __fastcall get_BeginConnectionSite(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndConnected(Office_xp::MsoTriState* EndConnected/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_EndConnected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndConnectedShape(Powerpoint_xp::Shape** EndConnectedShape/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall get_EndConnectedShape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndConnectionSite(int* EndConnectionSite/*[out,retval]*/);
  int             __fastcall get_EndConnectionSite(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_xp::MsoConnectorType* Type/*[out,retval]*/);
  Office_xp::MsoConnectorType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Office_xp::MsoConnectorType Type/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoTriState BeginConnected = {read = get_BeginConnected};
  __property   Powerpoint_xp::Shape* BeginConnectedShape = {read = get_BeginConnectedShape};
  __property   int             BeginConnectionSite = {read = get_BeginConnectionSite};
  __property   Office_xp::MsoTriState EndConnected = {read = get_EndConnected};
  __property   Powerpoint_xp::Shape* EndConnectedShape = {read = get_EndConnectedShape};
  __property   int             EndConnectionSite = {read = get_EndConnectionSite};
  __property   Office_xp::MsoConnectorType Type = {read = get_Type, write = set_Type};
};
typedef ConnectorFormatDispT<ConnectorFormat> ConnectorFormatDisp;

typedef TComInterface<TextEffectFormat>  TCOMTextEffectFormat;

// *********************************************************************//
// DispIntf:  TextEffectFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493482-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TextEffectFormatDispT : public TAutoDriver<TextEffectFormat>
{
public:
  TextEffectFormatDispT(){}

  TextEffectFormatDispT(TextEffectFormat *pintf)
  {
    TAutoDriver<TextEffectFormat>::Bind(pintf, false);
  }

  TextEffectFormatDispT(TextEffectFormatPtr pintf)
  {
    TAutoDriver<TextEffectFormat>::Bind(pintf, true);
  }

  TextEffectFormatDispT& operator=(TextEffectFormat *pintf)
  {
    TAutoDriver<TextEffectFormat>::Bind(pintf, false);
    return *this;
  }

  TextEffectFormatDispT& operator=(TextEffectFormatPtr pintf)
  {
    TAutoDriver<TextEffectFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ToggleVerticalText();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Alignment(Office_xp::MsoTextEffectAlignment* Alignment/*[out,retval]*/);
  Office_xp::MsoTextEffectAlignment __fastcall get_Alignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Alignment(Office_xp::MsoTextEffectAlignment Alignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(Office_xp::MsoTriState* FontBold/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(Office_xp::MsoTriState FontBold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(Office_xp::MsoTriState* FontItalic/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(Office_xp::MsoTriState FontItalic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(float* FontSize/*[out,retval]*/);
  float           __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(float FontSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_KernedPairs(Office_xp::MsoTriState* KernedPairs/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_KernedPairs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_KernedPairs(Office_xp::MsoTriState KernedPairs/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NormalizedHeight(Office_xp::MsoTriState* NormalizedHeight/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_NormalizedHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NormalizedHeight(Office_xp::MsoTriState NormalizedHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetShape(Office_xp::MsoPresetTextEffectShape* PresetShape/*[out,retval]*/);
  Office_xp::MsoPresetTextEffectShape __fastcall get_PresetShape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetShape(Office_xp::MsoPresetTextEffectShape PresetShape/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetTextEffect(Office_xp::MsoPresetTextEffect* Preset/*[out,retval]*/);
  Office_xp::MsoPresetTextEffect __fastcall get_PresetTextEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetTextEffect(Office_xp::MsoPresetTextEffect Preset/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RotatedChars(Office_xp::MsoTriState* RotatedChars/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_RotatedChars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RotatedChars(Office_xp::MsoTriState RotatedChars/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tracking(float* Tracking/*[out,retval]*/);
  float           __fastcall get_Tracking(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tracking(float Tracking/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoTextEffectAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   Office_xp::MsoTriState FontBold = {read = get_FontBold, write = set_FontBold};
  __property   Office_xp::MsoTriState FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName};
  __property   float           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   Office_xp::MsoTriState KernedPairs = {read = get_KernedPairs, write = set_KernedPairs};
  __property   Office_xp::MsoTriState NormalizedHeight = {read = get_NormalizedHeight, write = set_NormalizedHeight};
  __property   Office_xp::MsoPresetTextEffectShape PresetShape = {read = get_PresetShape, write = set_PresetShape};
  __property   Office_xp::MsoPresetTextEffect PresetTextEffect = {read = get_PresetTextEffect, write = set_PresetTextEffect};
  __property   Office_xp::MsoTriState RotatedChars = {read = get_RotatedChars, write = set_RotatedChars};
  __property   BSTR            Text = {read = get_Text};
  __property   float           Tracking = {read = get_Tracking, write = set_Tracking};
};
typedef TextEffectFormatDispT<TextEffectFormat> TextEffectFormatDisp;

typedef TComInterface<ThreeDFormat>  TCOMThreeDFormat;

// *********************************************************************//
// DispIntf:  ThreeDFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493483-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ThreeDFormatDispT : public TAutoDriver<ThreeDFormat>
{
public:
  ThreeDFormatDispT(){}

  ThreeDFormatDispT(ThreeDFormat *pintf)
  {
    TAutoDriver<ThreeDFormat>::Bind(pintf, false);
  }

  ThreeDFormatDispT(ThreeDFormatPtr pintf)
  {
    TAutoDriver<ThreeDFormat>::Bind(pintf, true);
  }

  ThreeDFormatDispT& operator=(ThreeDFormat *pintf)
  {
    TAutoDriver<ThreeDFormat>::Bind(pintf, false);
    return *this;
  }

  ThreeDFormatDispT& operator=(ThreeDFormatPtr pintf)
  {
    TAutoDriver<ThreeDFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementRotationX(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementRotationY(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ResetRotation();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetThreeDFormat(Office_xp::MsoPresetThreeDFormat PresetThreeDFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetExtrusionDirection(Office_xp::MsoPresetExtrusionDirection PresetExtrusionDirection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Depth(float* Depth/*[out,retval]*/);
  float           __fastcall get_Depth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Depth(float Depth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ExtrusionColor(Powerpoint_xp::ColorFormat** ExtrusionColor/*[out,retval]*/);
  Powerpoint_xp::ColorFormat* __fastcall get_ExtrusionColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ExtrusionColorType(Office_xp::MsoExtrusionColorType* ExtrusionColorType/*[out,retval]*/);
  Office_xp::MsoExtrusionColorType __fastcall get_ExtrusionColorType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ExtrusionColorType(Office_xp::MsoExtrusionColorType ExtrusionColorType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Perspective(Office_xp::MsoTriState* Perspective/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Perspective(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Perspective(Office_xp::MsoTriState Perspective/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetExtrusionDirection(Office_xp::MsoPresetExtrusionDirection* PresetExtrusionDirection/*[out,retval]*/);
  Office_xp::MsoPresetExtrusionDirection __fastcall get_PresetExtrusionDirection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetLightingDirection(Office_xp::MsoPresetLightingDirection* PresetLightingDirection/*[out,retval]*/);
  Office_xp::MsoPresetLightingDirection __fastcall get_PresetLightingDirection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetLightingDirection(Office_xp::MsoPresetLightingDirection PresetLightingDirection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetLightingSoftness(Office_xp::MsoPresetLightingSoftness* PresetLightingSoftness/*[out,retval]*/);
  Office_xp::MsoPresetLightingSoftness __fastcall get_PresetLightingSoftness(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetLightingSoftness(Office_xp::MsoPresetLightingSoftness PresetLightingSoftness/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetMaterial(Office_xp::MsoPresetMaterial* PresetMaterial/*[out,retval]*/);
  Office_xp::MsoPresetMaterial __fastcall get_PresetMaterial(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetMaterial(Office_xp::MsoPresetMaterial PresetMaterial/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetThreeDFormat(Office_xp::MsoPresetThreeDFormat* PresetThreeDFormat/*[out,retval]*/);
  Office_xp::MsoPresetThreeDFormat __fastcall get_PresetThreeDFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RotationX(float* RotationX/*[out,retval]*/);
  float           __fastcall get_RotationX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RotationX(float RotationX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RotationY(float* RotationY/*[out,retval]*/);
  float           __fastcall get_RotationY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RotationY(float RotationY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_xp::MsoTriState Visible/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Depth = {read = get_Depth, write = set_Depth};
  __property   Powerpoint_xp::ColorFormat* ExtrusionColor = {read = get_ExtrusionColor};
  __property   Office_xp::MsoExtrusionColorType ExtrusionColorType = {read = get_ExtrusionColorType, write = set_ExtrusionColorType};
  __property   Office_xp::MsoTriState Perspective = {read = get_Perspective, write = set_Perspective};
  __property   Office_xp::MsoPresetExtrusionDirection PresetExtrusionDirection = {read = get_PresetExtrusionDirection};
  __property   Office_xp::MsoPresetLightingDirection PresetLightingDirection = {read = get_PresetLightingDirection, write = set_PresetLightingDirection};
  __property   Office_xp::MsoPresetLightingSoftness PresetLightingSoftness = {read = get_PresetLightingSoftness, write = set_PresetLightingSoftness};
  __property   Office_xp::MsoPresetMaterial PresetMaterial = {read = get_PresetMaterial, write = set_PresetMaterial};
  __property   Office_xp::MsoPresetThreeDFormat PresetThreeDFormat = {read = get_PresetThreeDFormat};
  __property   float           RotationX = {read = get_RotationX, write = set_RotationX};
  __property   float           RotationY = {read = get_RotationY, write = set_RotationY};
  __property   Office_xp::MsoTriState Visible = {read = get_Visible, write = set_Visible};
};
typedef ThreeDFormatDispT<ThreeDFormat> ThreeDFormatDisp;

typedef TComInterface<TextFrame>  TCOMTextFrame;

// *********************************************************************//
// DispIntf:  TextFrame
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493484-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TextFrameDispT : public TAutoDriver<TextFrame>
{
public:
  TextFrameDispT(){}

  TextFrameDispT(TextFrame *pintf)
  {
    TAutoDriver<TextFrame>::Bind(pintf, false);
  }

  TextFrameDispT(TextFramePtr pintf)
  {
    TAutoDriver<TextFrame>::Bind(pintf, true);
  }

  TextFrameDispT& operator=(TextFrame *pintf)
  {
    TAutoDriver<TextFrame>::Bind(pintf, false);
    return *this;
  }

  TextFrameDispT& operator=(TextFramePtr pintf)
  {
    TAutoDriver<TextFrame>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarginBottom(float* MarginBottom/*[out,retval]*/);
  float           __fastcall get_MarginBottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarginBottom(float MarginBottom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarginLeft(float* MarginLeft/*[out,retval]*/);
  float           __fastcall get_MarginLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarginLeft(float MarginLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarginRight(float* MarginRight/*[out,retval]*/);
  float           __fastcall get_MarginRight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarginRight(float MarginRight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarginTop(float* MarginTop/*[out,retval]*/);
  float           __fastcall get_MarginTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarginTop(float MarginTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Orientation(Office_xp::MsoTextOrientation* Orientation/*[out,retval]*/);
  Office_xp::MsoTextOrientation __fastcall get_Orientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Orientation(Office_xp::MsoTextOrientation Orientation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasText(Office_xp::MsoTriState* HasText/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_HasText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextRange(Powerpoint_xp::TextRange** TextRange/*[out,retval]*/);
  Powerpoint_xp::TextRange* __fastcall get_TextRange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Ruler(Powerpoint_xp::Ruler** Ruler/*[out,retval]*/);
  Powerpoint_xp::Ruler* __fastcall get_Ruler(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HorizontalAnchor(Office_xp::MsoHorizontalAnchor* HorizontalAnchor/*[out,retval]*/);
  Office_xp::MsoHorizontalAnchor __fastcall get_HorizontalAnchor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HorizontalAnchor(Office_xp::MsoHorizontalAnchor HorizontalAnchor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalAnchor(Office_xp::MsoVerticalAnchor* VerticalAnchor/*[out,retval]*/);
  Office_xp::MsoVerticalAnchor __fastcall get_VerticalAnchor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_VerticalAnchor(Office_xp::MsoVerticalAnchor VerticalAnchor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoSize(Powerpoint_xp::PpAutoSize* AutoSize/*[out,retval]*/);
  Powerpoint_xp::PpAutoSize __fastcall get_AutoSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoSize(Powerpoint_xp::PpAutoSize AutoSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WordWrap(Office_xp::MsoTriState* WordWrap/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_WordWrap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WordWrap(Office_xp::MsoTriState WordWrap/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DeleteText();

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           MarginBottom = {read = get_MarginBottom, write = set_MarginBottom};
  __property   float           MarginLeft = {read = get_MarginLeft, write = set_MarginLeft};
  __property   float           MarginRight = {read = get_MarginRight, write = set_MarginRight};
  __property   float           MarginTop = {read = get_MarginTop, write = set_MarginTop};
  __property   Office_xp::MsoTextOrientation Orientation = {read = get_Orientation, write = set_Orientation};
  __property   Office_xp::MsoTriState HasText = {read = get_HasText};
  __property   Powerpoint_xp::TextRange* TextRange = {read = get_TextRange};
  __property   Powerpoint_xp::Ruler* Ruler = {read = get_Ruler};
  __property   Office_xp::MsoHorizontalAnchor HorizontalAnchor = {read = get_HorizontalAnchor, write = set_HorizontalAnchor};
  __property   Office_xp::MsoVerticalAnchor VerticalAnchor = {read = get_VerticalAnchor, write = set_VerticalAnchor};
  __property   Powerpoint_xp::PpAutoSize AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Office_xp::MsoTriState WordWrap = {read = get_WordWrap, write = set_WordWrap};
};
typedef TextFrameDispT<TextFrame> TextFrameDisp;

typedef TComInterface<CalloutFormat>  TCOMCalloutFormat;

// *********************************************************************//
// DispIntf:  CalloutFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493485-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class CalloutFormatDispT : public TAutoDriver<CalloutFormat>
{
public:
  CalloutFormatDispT(){}

  CalloutFormatDispT(CalloutFormat *pintf)
  {
    TAutoDriver<CalloutFormat>::Bind(pintf, false);
  }

  CalloutFormatDispT(CalloutFormatPtr pintf)
  {
    TAutoDriver<CalloutFormat>::Bind(pintf, true);
  }

  CalloutFormatDispT& operator=(CalloutFormat *pintf)
  {
    TAutoDriver<CalloutFormat>::Bind(pintf, false);
    return *this;
  }

  CalloutFormatDispT& operator=(CalloutFormatPtr pintf)
  {
    TAutoDriver<CalloutFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AutomaticLength();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CustomDrop(float Drop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CustomLength(float Length/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresetDrop(Office_xp::MsoCalloutDropType DropType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Accent(Office_xp::MsoTriState* Accent/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Accent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Accent(Office_xp::MsoTriState Accent/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Angle(Office_xp::MsoCalloutAngleType* Angle/*[out,retval]*/);
  Office_xp::MsoCalloutAngleType __fastcall get_Angle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Angle(Office_xp::MsoCalloutAngleType Angle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoAttach(Office_xp::MsoTriState* AutoAttach/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_AutoAttach(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoAttach(Office_xp::MsoTriState AutoAttach/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoLength(Office_xp::MsoTriState* AutoLength/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_AutoLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Office_xp::MsoTriState* Border/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Border(Office_xp::MsoTriState Border/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Drop(float* Drop/*[out,retval]*/);
  float           __fastcall get_Drop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DropType(Office_xp::MsoCalloutDropType* DropType/*[out,retval]*/);
  Office_xp::MsoCalloutDropType __fastcall get_DropType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Gap(float* Gap/*[out,retval]*/);
  float           __fastcall get_Gap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Gap(float Gap/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Length(float* Length/*[out,retval]*/);
  float           __fastcall get_Length(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_xp::MsoCalloutType* Type/*[out,retval]*/);
  Office_xp::MsoCalloutType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Office_xp::MsoCalloutType Type/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoTriState Accent = {read = get_Accent, write = set_Accent};
  __property   Office_xp::MsoCalloutAngleType Angle = {read = get_Angle, write = set_Angle};
  __property   Office_xp::MsoTriState AutoAttach = {read = get_AutoAttach, write = set_AutoAttach};
  __property   Office_xp::MsoTriState AutoLength = {read = get_AutoLength};
  __property   Office_xp::MsoTriState Border = {read = get_Border, write = set_Border};
  __property   float           Drop = {read = get_Drop};
  __property   Office_xp::MsoCalloutDropType DropType = {read = get_DropType};
  __property   float           Gap = {read = get_Gap, write = set_Gap};
  __property   float           Length = {read = get_Length};
  __property   Office_xp::MsoCalloutType Type = {read = get_Type, write = set_Type};
};
typedef CalloutFormatDispT<CalloutFormat> CalloutFormatDisp;

typedef TComInterface<ShapeNodes>  TCOMShapeNodes;

// *********************************************************************//
// DispIntf:  ShapeNodes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493486-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ShapeNodesDispT : public TAutoDriver<ShapeNodes>
{
public:
  ShapeNodesDispT(){}

  ShapeNodesDispT(ShapeNodes *pintf)
  {
    TAutoDriver<ShapeNodes>::Bind(pintf, false);
  }

  ShapeNodesDispT(ShapeNodesPtr pintf)
  {
    TAutoDriver<ShapeNodes>::Bind(pintf, true);
  }

  ShapeNodesDispT& operator=(ShapeNodes *pintf)
  {
    TAutoDriver<ShapeNodes>::Bind(pintf, false);
    return *this;
  }

  ShapeNodesDispT& operator=(ShapeNodesPtr pintf)
  {
    TAutoDriver<ShapeNodes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* Count/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT Index/*[in]*/, 
                                             Powerpoint_xp::ShapeNode** Item/*[out,retval]*/);
  Powerpoint_xp::ShapeNode* __fastcall Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Insert(int Index/*[in]*/, 
                                               Office_xp::MsoSegmentType SegmentType/*[in]*/, 
                                               Office_xp::MsoEditingType EditingType/*[in]*/, 
                                               float X1/*[in]*/, float Y1/*[in]*/, 
                                               float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/, 
                                               float X3/*[in,def,opt]*/, float Y3/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetEditingType(int Index/*[in]*/, 
                                                       Office_xp::MsoEditingType EditingType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetPosition(int Index/*[in]*/, float X1/*[in]*/, 
                                                    float Y1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetSegmentType(int Index/*[in]*/, 
                                                       Office_xp::MsoSegmentType SegmentType/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef ShapeNodesDispT<ShapeNodes> ShapeNodesDisp;

typedef TComInterface<ShapeNode>  TCOMShapeNode;

// *********************************************************************//
// DispIntf:  ShapeNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493487-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ShapeNodeDispT : public TAutoDriver<ShapeNode>
{
public:
  ShapeNodeDispT(){}

  ShapeNodeDispT(ShapeNode *pintf)
  {
    TAutoDriver<ShapeNode>::Bind(pintf, false);
  }

  ShapeNodeDispT(ShapeNodePtr pintf)
  {
    TAutoDriver<ShapeNode>::Bind(pintf, true);
  }

  ShapeNodeDispT& operator=(ShapeNode *pintf)
  {
    TAutoDriver<ShapeNode>::Bind(pintf, false);
    return *this;
  }

  ShapeNodeDispT& operator=(ShapeNodePtr pintf)
  {
    TAutoDriver<ShapeNode>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EditingType(Office_xp::MsoEditingType* EditingType/*[out,retval]*/);
  Office_xp::MsoEditingType __fastcall get_EditingType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Points(VARIANT* Points/*[out,retval]*/);
  VARIANT         __fastcall get_Points(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SegmentType(Office_xp::MsoSegmentType* SegmentType/*[out,retval]*/);
  Office_xp::MsoSegmentType __fastcall get_SegmentType(void);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoEditingType EditingType = {read = get_EditingType};
  __property   Office_xp::MsoSegmentType SegmentType = {read = get_SegmentType};
};
typedef ShapeNodeDispT<ShapeNode> ShapeNodeDisp;

typedef TComInterface<OLEFormat>  TCOMOLEFormat;

// *********************************************************************//
// DispIntf:  OLEFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493488-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class OLEFormatDispT : public TAutoDriver<OLEFormat>
{
public:
  OLEFormatDispT(){}

  OLEFormatDispT(OLEFormat *pintf)
  {
    TAutoDriver<OLEFormat>::Bind(pintf, false);
  }

  OLEFormatDispT(OLEFormatPtr pintf)
  {
    TAutoDriver<OLEFormat>::Bind(pintf, true);
  }

  OLEFormatDispT& operator=(OLEFormat *pintf)
  {
    TAutoDriver<OLEFormat>::Bind(pintf, false);
    return *this;
  }

  OLEFormatDispT& operator=(OLEFormatPtr pintf)
  {
    TAutoDriver<OLEFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectVerbs(Powerpoint_xp::ObjectVerbs** ObjectVerbs/*[out,retval]*/);
  Powerpoint_xp::ObjectVerbs* __fastcall get_ObjectVerbs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Object(LPDISPATCH* Object/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Object(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProgID(BSTR* ProgID/*[out,retval]*/);
  BSTR            __fastcall get_ProgID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FollowColors(Powerpoint_xp::PpFollowColors* FollowColors/*[out,retval]*/);
  Powerpoint_xp::PpFollowColors __fastcall get_FollowColors(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FollowColors(Powerpoint_xp::PpFollowColors FollowColors/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DoVerb(int Index/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Activate();

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ObjectVerbs* ObjectVerbs = {read = get_ObjectVerbs};
  __property   LPDISPATCH      Object = {read = get_Object};
  __property   BSTR            ProgID = {read = get_ProgID};
  __property   Powerpoint_xp::PpFollowColors FollowColors = {read = get_FollowColors, write = set_FollowColors};
};
typedef OLEFormatDispT<OLEFormat> OLEFormatDisp;

typedef TComInterface<LinkFormat>  TCOMLinkFormat;

// *********************************************************************//
// DispIntf:  LinkFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493489-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class LinkFormatDispT : public TAutoDriver<LinkFormat>
{
public:
  LinkFormatDispT(){}

  LinkFormatDispT(LinkFormat *pintf)
  {
    TAutoDriver<LinkFormat>::Bind(pintf, false);
  }

  LinkFormatDispT(LinkFormatPtr pintf)
  {
    TAutoDriver<LinkFormat>::Bind(pintf, true);
  }

  LinkFormatDispT& operator=(LinkFormat *pintf)
  {
    TAutoDriver<LinkFormat>::Bind(pintf, false);
    return *this;
  }

  LinkFormatDispT& operator=(LinkFormatPtr pintf)
  {
    TAutoDriver<LinkFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceFullName(BSTR* SourceFullName/*[out,retval]*/);
  BSTR            __fastcall get_SourceFullName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SourceFullName(BSTR SourceFullName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoUpdate(Powerpoint_xp::PpUpdateOption* AutoUpdate/*[out,retval]*/);
  Powerpoint_xp::PpUpdateOption __fastcall get_AutoUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoUpdate(Powerpoint_xp::PpUpdateOption AutoUpdate/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Update();

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            SourceFullName = {read = get_SourceFullName};
  __property   Powerpoint_xp::PpUpdateOption AutoUpdate = {read = get_AutoUpdate, write = set_AutoUpdate};
};
typedef LinkFormatDispT<LinkFormat> LinkFormatDisp;

typedef TComInterface<ObjectVerbs>  TCOMObjectVerbs;

// *********************************************************************//
// DispIntf:  ObjectVerbs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ObjectVerbsDispT : public TAutoDriver<ObjectVerbs>
{
public:
  ObjectVerbsDispT(){}

  ObjectVerbsDispT(ObjectVerbs *pintf)
  {
    TAutoDriver<ObjectVerbs>::Bind(pintf, false);
  }

  ObjectVerbsDispT(ObjectVerbsPtr pintf)
  {
    TAutoDriver<ObjectVerbs>::Bind(pintf, true);
  }

  ObjectVerbsDispT& operator=(ObjectVerbs *pintf)
  {
    TAutoDriver<ObjectVerbs>::Bind(pintf, false);
    return *this;
  }

  ObjectVerbsDispT& operator=(ObjectVerbsPtr pintf)
  {
    TAutoDriver<ObjectVerbs>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, BSTR* Item/*[out,retval]*/);
  BSTR            __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef ObjectVerbsDispT<ObjectVerbs> ObjectVerbsDisp;

typedef TComInterface<AnimationSettings>  TCOMAnimationSettings;

// *********************************************************************//
// DispIntf:  AnimationSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class AnimationSettingsDispT : public TAutoDriver<AnimationSettings>
{
public:
  AnimationSettingsDispT(){}

  AnimationSettingsDispT(AnimationSettings *pintf)
  {
    TAutoDriver<AnimationSettings>::Bind(pintf, false);
  }

  AnimationSettingsDispT(AnimationSettingsPtr pintf)
  {
    TAutoDriver<AnimationSettings>::Bind(pintf, true);
  }

  AnimationSettingsDispT& operator=(AnimationSettings *pintf)
  {
    TAutoDriver<AnimationSettings>::Bind(pintf, false);
    return *this;
  }

  AnimationSettingsDispT& operator=(AnimationSettingsPtr pintf)
  {
    TAutoDriver<AnimationSettings>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DimColor(Powerpoint_xp::ColorFormat** DimColor/*[out,retval]*/);
  Powerpoint_xp::ColorFormat* __fastcall get_DimColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SoundEffect(Powerpoint_xp::SoundEffect** SoundEffect/*[out,retval]*/);
  Powerpoint_xp::SoundEffect* __fastcall get_SoundEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EntryEffect(Powerpoint_xp::PpEntryEffect* EntryEffect/*[out,retval]*/);
  Powerpoint_xp::PpEntryEffect __fastcall get_EntryEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EntryEffect(Powerpoint_xp::PpEntryEffect EntryEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AfterEffect(Powerpoint_xp::PpAfterEffect* AfterEffect/*[out,retval]*/);
  Powerpoint_xp::PpAfterEffect __fastcall get_AfterEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AfterEffect(Powerpoint_xp::PpAfterEffect AfterEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AnimationOrder(int* AnimationOrder/*[out,retval]*/);
  int             __fastcall get_AnimationOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AnimationOrder(int AnimationOrder/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AdvanceMode(Powerpoint_xp::PpAdvanceMode* AdvanceMode/*[out,retval]*/);
  Powerpoint_xp::PpAdvanceMode __fastcall get_AdvanceMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AdvanceMode(Powerpoint_xp::PpAdvanceMode AdvanceMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AdvanceTime(float* AdvanceTime/*[out,retval]*/);
  float           __fastcall get_AdvanceTime(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AdvanceTime(float AdvanceTime/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PlaySettings(Powerpoint_xp::PlaySettings** PlaySettings/*[out,retval]*/);
  Powerpoint_xp::PlaySettings* __fastcall get_PlaySettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextLevelEffect(Powerpoint_xp::PpTextLevelEffect* TextLevelEffect/*[out,retval]*/);
  Powerpoint_xp::PpTextLevelEffect __fastcall get_TextLevelEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextLevelEffect(Powerpoint_xp::PpTextLevelEffect TextLevelEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextUnitEffect(Powerpoint_xp::PpTextUnitEffect* TextUnitEffect/*[out,retval]*/);
  Powerpoint_xp::PpTextUnitEffect __fastcall get_TextUnitEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextUnitEffect(Powerpoint_xp::PpTextUnitEffect TextUnitEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Animate(Office_xp::MsoTriState* Animate/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Animate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Animate(Office_xp::MsoTriState Animate/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AnimateBackground(Office_xp::MsoTriState* AnimateBackground/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_AnimateBackground(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AnimateBackground(Office_xp::MsoTriState AnimateBackground/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AnimateTextInReverse(Office_xp::MsoTriState* AnimateTextInReverse/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_AnimateTextInReverse(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AnimateTextInReverse(Office_xp::MsoTriState AnimateTextInReverse/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChartUnitEffect(Powerpoint_xp::PpChartUnitEffect* ChartUnitEffect/*[out,retval]*/);
  Powerpoint_xp::PpChartUnitEffect __fastcall get_ChartUnitEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ChartUnitEffect(Powerpoint_xp::PpChartUnitEffect ChartUnitEffect/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ColorFormat* DimColor = {read = get_DimColor};
  __property   Powerpoint_xp::SoundEffect* SoundEffect = {read = get_SoundEffect};
  __property   Powerpoint_xp::PpEntryEffect EntryEffect = {read = get_EntryEffect, write = set_EntryEffect};
  __property   Powerpoint_xp::PpAfterEffect AfterEffect = {read = get_AfterEffect, write = set_AfterEffect};
  __property   int             AnimationOrder = {read = get_AnimationOrder, write = set_AnimationOrder};
  __property   Powerpoint_xp::PpAdvanceMode AdvanceMode = {read = get_AdvanceMode, write = set_AdvanceMode};
  __property   float           AdvanceTime = {read = get_AdvanceTime, write = set_AdvanceTime};
  __property   Powerpoint_xp::PlaySettings* PlaySettings = {read = get_PlaySettings};
  __property   Powerpoint_xp::PpTextLevelEffect TextLevelEffect = {read = get_TextLevelEffect, write = set_TextLevelEffect};
  __property   Powerpoint_xp::PpTextUnitEffect TextUnitEffect = {read = get_TextUnitEffect, write = set_TextUnitEffect};
  __property   Office_xp::MsoTriState Animate = {read = get_Animate, write = set_Animate};
  __property   Office_xp::MsoTriState AnimateBackground = {read = get_AnimateBackground, write = set_AnimateBackground};
  __property   Office_xp::MsoTriState AnimateTextInReverse = {read = get_AnimateTextInReverse, write = set_AnimateTextInReverse};
  __property   Powerpoint_xp::PpChartUnitEffect ChartUnitEffect = {read = get_ChartUnitEffect, write = set_ChartUnitEffect};
};
typedef AnimationSettingsDispT<AnimationSettings> AnimationSettingsDisp;

typedef TComInterface<ActionSettings>  TCOMActionSettings;

// *********************************************************************//
// DispIntf:  ActionSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ActionSettingsDispT : public TAutoDriver<ActionSettings>
{
public:
  ActionSettingsDispT(){}

  ActionSettingsDispT(ActionSettings *pintf)
  {
    TAutoDriver<ActionSettings>::Bind(pintf, false);
  }

  ActionSettingsDispT(ActionSettingsPtr pintf)
  {
    TAutoDriver<ActionSettings>::Bind(pintf, true);
  }

  ActionSettingsDispT& operator=(ActionSettings *pintf)
  {
    TAutoDriver<ActionSettings>::Bind(pintf, false);
    return *this;
  }

  ActionSettingsDispT& operator=(ActionSettingsPtr pintf)
  {
    TAutoDriver<ActionSettings>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(Powerpoint_xp::PpMouseActivation Index/*[in]*/, 
                                             Powerpoint_xp::ActionSetting** Item/*[out,retval]*/);
  Powerpoint_xp::ActionSetting* __fastcall Item(Powerpoint_xp::PpMouseActivation Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef ActionSettingsDispT<ActionSettings> ActionSettingsDisp;

typedef TComInterface<ActionSetting>  TCOMActionSetting;

// *********************************************************************//
// DispIntf:  ActionSetting
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ActionSettingDispT : public TAutoDriver<ActionSetting>
{
public:
  ActionSettingDispT(){}

  ActionSettingDispT(ActionSetting *pintf)
  {
    TAutoDriver<ActionSetting>::Bind(pintf, false);
  }

  ActionSettingDispT(ActionSettingPtr pintf)
  {
    TAutoDriver<ActionSetting>::Bind(pintf, true);
  }

  ActionSettingDispT& operator=(ActionSetting *pintf)
  {
    TAutoDriver<ActionSetting>::Bind(pintf, false);
    return *this;
  }

  ActionSettingDispT& operator=(ActionSettingPtr pintf)
  {
    TAutoDriver<ActionSetting>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Action(Powerpoint_xp::PpActionType* Action/*[out,retval]*/);
  Powerpoint_xp::PpActionType __fastcall get_Action(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Action(Powerpoint_xp::PpActionType Action/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActionVerb(BSTR* ActionVerb/*[out,retval]*/);
  BSTR            __fastcall get_ActionVerb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ActionVerb(BSTR ActionVerb/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AnimateAction(Office_xp::MsoTriState* AnimateAction/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_AnimateAction(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AnimateAction(Office_xp::MsoTriState AnimateAction/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Run(BSTR* Run/*[out,retval]*/);
  BSTR            __fastcall get_Run(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Run(BSTR Run/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/);
  BSTR            __fastcall get_SlideShowName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SlideShowName(BSTR SlideShowName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlink(Powerpoint_xp::Hyperlink** Hyperlink/*[out,retval]*/);
  Powerpoint_xp::Hyperlink* __fastcall get_Hyperlink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SoundEffect(Powerpoint_xp::SoundEffect** SoundEffect/*[out,retval]*/);
  Powerpoint_xp::SoundEffect* __fastcall get_SoundEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowAndReturn(Office_xp::MsoTriState* ShowAndReturn/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_ShowAndReturn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowAndReturn(Office_xp::MsoTriState ShowAndReturn/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::PpActionType Action = {read = get_Action, write = set_Action};
  __property   BSTR            ActionVerb = {read = get_ActionVerb};
  __property   Office_xp::MsoTriState AnimateAction = {read = get_AnimateAction, write = set_AnimateAction};
  __property   BSTR            Run = {read = get_Run};
  __property   BSTR            SlideShowName = {read = get_SlideShowName};
  __property   Powerpoint_xp::Hyperlink* Hyperlink = {read = get_Hyperlink};
  __property   Powerpoint_xp::SoundEffect* SoundEffect = {read = get_SoundEffect};
  __property   Office_xp::MsoTriState ShowAndReturn = {read = get_ShowAndReturn, write = set_ShowAndReturn};
};
typedef ActionSettingDispT<ActionSetting> ActionSettingDisp;

typedef TComInterface<PlaySettings>  TCOMPlaySettings;

// *********************************************************************//
// DispIntf:  PlaySettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PlaySettingsDispT : public TAutoDriver<PlaySettings>
{
public:
  PlaySettingsDispT(){}

  PlaySettingsDispT(PlaySettings *pintf)
  {
    TAutoDriver<PlaySettings>::Bind(pintf, false);
  }

  PlaySettingsDispT(PlaySettingsPtr pintf)
  {
    TAutoDriver<PlaySettings>::Bind(pintf, true);
  }

  PlaySettingsDispT& operator=(PlaySettings *pintf)
  {
    TAutoDriver<PlaySettings>::Bind(pintf, false);
    return *this;
  }

  PlaySettingsDispT& operator=(PlaySettingsPtr pintf)
  {
    TAutoDriver<PlaySettings>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActionVerb(BSTR* ActionVerb/*[out,retval]*/);
  BSTR            __fastcall get_ActionVerb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ActionVerb(BSTR ActionVerb/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HideWhileNotPlaying(Office_xp::MsoTriState* HideWhileNotPlaying/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_HideWhileNotPlaying(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HideWhileNotPlaying(Office_xp::MsoTriState HideWhileNotPlaying/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LoopUntilStopped(Office_xp::MsoTriState* LoopUntilStopped/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_LoopUntilStopped(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LoopUntilStopped(Office_xp::MsoTriState LoopUntilStopped/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PlayOnEntry(Office_xp::MsoTriState* PlayOnEntry/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_PlayOnEntry(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PlayOnEntry(Office_xp::MsoTriState PlayOnEntry/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RewindMovie(Office_xp::MsoTriState* RewindMovie/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_RewindMovie(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RewindMovie(Office_xp::MsoTriState RewindMovie/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PauseAnimation(Office_xp::MsoTriState* PauseAnimation/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_PauseAnimation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PauseAnimation(Office_xp::MsoTriState PauseAnimation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StopAfterSlides(int* StopAfterSlides/*[out,retval]*/);
  int             __fastcall get_StopAfterSlides(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StopAfterSlides(int StopAfterSlides/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            ActionVerb = {read = get_ActionVerb};
  __property   Office_xp::MsoTriState HideWhileNotPlaying = {read = get_HideWhileNotPlaying, write = set_HideWhileNotPlaying};
  __property   Office_xp::MsoTriState LoopUntilStopped = {read = get_LoopUntilStopped, write = set_LoopUntilStopped};
  __property   Office_xp::MsoTriState PlayOnEntry = {read = get_PlayOnEntry, write = set_PlayOnEntry};
  __property   Office_xp::MsoTriState RewindMovie = {read = get_RewindMovie, write = set_RewindMovie};
  __property   Office_xp::MsoTriState PauseAnimation = {read = get_PauseAnimation, write = set_PauseAnimation};
  __property   int             StopAfterSlides = {read = get_StopAfterSlides, write = set_StopAfterSlides};
};
typedef PlaySettingsDispT<PlaySettings> PlaySettingsDisp;

typedef TComInterface<TextRange>  TCOMTextRange;

// *********************************************************************//
// DispIntf:  TextRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TextRangeDispT : public TAutoDriver<TextRange>
{
public:
  TextRangeDispT(){}

  TextRangeDispT(TextRange *pintf)
  {
    TAutoDriver<TextRange>::Bind(pintf, false);
  }

  TextRangeDispT(TextRangePtr pintf)
  {
    TAutoDriver<TextRange>::Bind(pintf, true);
  }

  TextRangeDispT& operator=(TextRange *pintf)
  {
    TAutoDriver<TextRange>::Bind(pintf, false);
    return *this;
  }

  TextRangeDispT& operator=(TextRangePtr pintf)
  {
    TAutoDriver<TextRange>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActionSettings(Powerpoint_xp::ActionSettings** ActionSettings/*[out,retval]*/);
  Powerpoint_xp::ActionSettings* __fastcall get_ActionSettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Start(long* Start/*[out,retval]*/);
  long            __fastcall get_Start(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Length(long* Length/*[out,retval]*/);
  long            __fastcall get_Length(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BoundLeft(float* BoundLeft/*[out,retval]*/);
  float           __fastcall get_BoundLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BoundTop(float* BoundTop/*[out,retval]*/);
  float           __fastcall get_BoundTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BoundWidth(float* BoundWidth/*[out,retval]*/);
  float           __fastcall get_BoundWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BoundHeight(float* BoundHeight/*[out,retval]*/);
  float           __fastcall get_BoundHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Paragraphs(int Start/*[in,def,opt]*/, 
                                                   int Length/*[in,def,opt]*/, 
                                                   Powerpoint_xp::TextRange** Paragraphs/*[out,retval]*/);
  Powerpoint_xp::TextRange* __fastcall Paragraphs(int Start/*[in,def,opt]*/, 
                                                  int Length/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Sentences(int Start/*[in,def,opt]*/, 
                                                  int Length/*[in,def,opt]*/, 
                                                  Powerpoint_xp::TextRange** Sentences/*[out,retval]*/);
  Powerpoint_xp::TextRange* __fastcall Sentences(int Start/*[in,def,opt]*/, 
                                                 int Length/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Words(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/
                                              , Powerpoint_xp::TextRange** Words/*[out,retval]*/);
  Powerpoint_xp::TextRange* __fastcall Words(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Characters(int Start/*[in,def,opt]*/, 
                                                   int Length/*[in,def,opt]*/, 
                                                   Powerpoint_xp::TextRange** Characters/*[out,retval]*/);
  Powerpoint_xp::TextRange* __fastcall Characters(int Start/*[in,def,opt]*/, 
                                                  int Length/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Lines(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/
                                              , Powerpoint_xp::TextRange** Lines/*[out,retval]*/);
  Powerpoint_xp::TextRange* __fastcall Lines(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Runs(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                                             Powerpoint_xp::TextRange** Runs/*[out,retval]*/);
  Powerpoint_xp::TextRange* __fastcall Runs(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall TrimText(Powerpoint_xp::TextRange** TrimText/*[out,retval]*/);
  Powerpoint_xp::TextRange* __fastcall TrimText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertAfter(BSTR NewText/*[in,def,opt]*/, 
                                                    Powerpoint_xp::TextRange** After/*[out,retval]*/);
  Powerpoint_xp::TextRange* __fastcall InsertAfter(BSTR NewText/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertBefore(BSTR NewText/*[in,def,opt]*/, 
                                                     Powerpoint_xp::TextRange** Before/*[out,retval]*/);
  Powerpoint_xp::TextRange* __fastcall InsertBefore(BSTR NewText/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertDateTime(Powerpoint_xp::PpDateTimeFormat DateTimeFormat/*[in]*/
                                                       , 
                                                       Office_xp::MsoTriState InsertAsField/*[in,def,opt]*/
                                                       , 
                                                       Powerpoint_xp::TextRange** DateTime/*[out,retval]*/);
  Powerpoint_xp::TextRange* __fastcall InsertDateTime(Powerpoint_xp::PpDateTimeFormat DateTimeFormat/*[in]*/, 
                                                      Office_xp::MsoTriState InsertAsField/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertSlideNumber(Powerpoint_xp::TextRange** SlideNumber/*[out,retval]*/);
  Powerpoint_xp::TextRange* __fastcall InsertSlideNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertSymbol(BSTR FontName/*[in]*/, int CharNumber/*[in]*/, 
                                                     Office_xp::MsoTriState Unicode/*[in,def,opt]*/
                                                     , 
                                                     Powerpoint_xp::TextRange** Symbol/*[out,retval]*/);
  Powerpoint_xp::TextRange* __fastcall InsertSymbol(BSTR FontName/*[in]*/, int CharNumber/*[in]*/, 
                                                    Office_xp::MsoTriState Unicode/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Powerpoint_xp::Font** Font/*[out,retval]*/);
  Powerpoint_xp::Font* __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParagraphFormat(Powerpoint_xp::ParagraphFormat** ParagraphFormat/*[out,retval]*/);
  Powerpoint_xp::ParagraphFormat* __fastcall get_ParagraphFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IndentLevel(int* IndentLevel/*[out,retval]*/);
  int             __fastcall get_IndentLevel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IndentLevel(int IndentLevel/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Paste(Powerpoint_xp::TextRange** Paste/*[out,retval]*/);
  Powerpoint_xp::TextRange* __fastcall Paste(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ChangeCase(Powerpoint_xp::PpChangeCase Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddPeriods();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemovePeriods();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Find(BSTR FindWhat/*[in]*/, int After/*[in,def,opt]*/, 
                                             Office_xp::MsoTriState MatchCase/*[in,def,opt]*/, 
                                             Office_xp::MsoTriState WholeWords/*[in,def,opt]*/, 
                                             Powerpoint_xp::TextRange** Find/*[out,retval]*/);
  Powerpoint_xp::TextRange* __fastcall Find(BSTR FindWhat/*[in]*/, int After/*[in,def,opt]*/, 
                                            Office_xp::MsoTriState MatchCase/*[in,def,opt]*/, 
                                            Office_xp::MsoTriState WholeWords/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Replace(BSTR FindWhat/*[in]*/, BSTR ReplaceWhat/*[in]*/, 
                                                int After/*[in,def,opt]*/, 
                                                Office_xp::MsoTriState MatchCase/*[in,def,opt]*/, 
                                                Office_xp::MsoTriState WholeWords/*[in,def,opt]*/, 
                                                Powerpoint_xp::TextRange** Replace/*[out,retval]*/);
  Powerpoint_xp::TextRange* __fastcall Replace(BSTR FindWhat/*[in]*/, BSTR ReplaceWhat/*[in]*/, 
                                               int After/*[in,def,opt]*/, 
                                               Office_xp::MsoTriState MatchCase/*[in,def,opt]*/, 
                                               Office_xp::MsoTriState WholeWords/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RotatedBounds(float* X1/*[out]*/, float* Y1/*[out]*/, 
                                                      float* X2/*[out]*/, float* Y2/*[out]*/, 
                                                      float* X3/*[out]*/, float* Y3/*[out]*/, 
                                                      float* x4/*[out]*/, float* y4/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LanguageID(Office_xp::MsoLanguageID* LanguageID/*[out,retval]*/);
  Office_xp::MsoLanguageID __fastcall get_LanguageID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LanguageID(Office_xp::MsoLanguageID LanguageID/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RtlRun();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LtrRun();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PasteSpecial(Powerpoint_xp::PpPasteDataType DataType/*[in,def,opt]*/
                                                     , 
                                                     Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/
                                                     , BSTR IconFileName/*[in,def,opt]*/, 
                                                     int IconIndex/*[in,def,opt]*/, 
                                                     BSTR IconLabel/*[in,def,opt]*/, 
                                                     Office_xp::MsoTriState Link/*[in,def,opt]*/, 
                                                     Powerpoint_xp::TextRange** PasteSpecial/*[out,retval]*/);
  Powerpoint_xp::TextRange* __fastcall PasteSpecial(Powerpoint_xp::PpPasteDataType DataType/*[in,def,opt]*/, 
                                                    Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                                                    BSTR IconFileName/*[in,def,opt]*/, 
                                                    int IconIndex/*[in,def,opt]*/, 
                                                    BSTR IconLabel/*[in,def,opt]*/, 
                                                    Office_xp::MsoTriState Link/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ActionSettings* ActionSettings = {read = get_ActionSettings};
  __property   long            Start = {read = get_Start};
  __property   long            Length = {read = get_Length};
  __property   float           BoundLeft = {read = get_BoundLeft};
  __property   float           BoundTop = {read = get_BoundTop};
  __property   float           BoundWidth = {read = get_BoundWidth};
  __property   float           BoundHeight = {read = get_BoundHeight};
  __property   BSTR            Text = {read = get_Text};
  __property   Powerpoint_xp::Font* Font = {read = get_Font};
  __property   Powerpoint_xp::ParagraphFormat* ParagraphFormat = {read = get_ParagraphFormat};
  __property   int             IndentLevel = {read = get_IndentLevel, write = set_IndentLevel};
  __property   Office_xp::MsoLanguageID LanguageID = {read = get_LanguageID, write = set_LanguageID};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef TextRangeDispT<TextRange> TextRangeDisp;

typedef TComInterface<Ruler>  TCOMRuler;

// *********************************************************************//
// DispIntf:  Ruler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493490-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class RulerDispT : public TAutoDriver<Ruler>
{
public:
  RulerDispT(){}

  RulerDispT(Ruler *pintf)
  {
    TAutoDriver<Ruler>::Bind(pintf, false);
  }

  RulerDispT(RulerPtr pintf)
  {
    TAutoDriver<Ruler>::Bind(pintf, true);
  }

  RulerDispT& operator=(Ruler *pintf)
  {
    TAutoDriver<Ruler>::Bind(pintf, false);
    return *this;
  }

  RulerDispT& operator=(RulerPtr pintf)
  {
    TAutoDriver<Ruler>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabStops(Powerpoint_xp::TabStops** TabStops/*[out,retval]*/);
  Powerpoint_xp::TabStops* __fastcall get_TabStops(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Levels(Powerpoint_xp::RulerLevels** Levels/*[out,retval]*/);
  Powerpoint_xp::RulerLevels* __fastcall get_Levels(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::TabStops* TabStops = {read = get_TabStops};
  __property   Powerpoint_xp::RulerLevels* Levels = {read = get_Levels};
};
typedef RulerDispT<Ruler> RulerDisp;

typedef TComInterface<RulerLevels>  TCOMRulerLevels;

// *********************************************************************//
// DispIntf:  RulerLevels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493491-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class RulerLevelsDispT : public TAutoDriver<RulerLevels>
{
public:
  RulerLevelsDispT(){}

  RulerLevelsDispT(RulerLevels *pintf)
  {
    TAutoDriver<RulerLevels>::Bind(pintf, false);
  }

  RulerLevelsDispT(RulerLevelsPtr pintf)
  {
    TAutoDriver<RulerLevels>::Bind(pintf, true);
  }

  RulerLevelsDispT& operator=(RulerLevels *pintf)
  {
    TAutoDriver<RulerLevels>::Bind(pintf, false);
    return *this;
  }

  RulerLevelsDispT& operator=(RulerLevelsPtr pintf)
  {
    TAutoDriver<RulerLevels>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, 
                                             Powerpoint_xp::RulerLevel** Item/*[out,retval]*/);
  Powerpoint_xp::RulerLevel* __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef RulerLevelsDispT<RulerLevels> RulerLevelsDisp;

typedef TComInterface<RulerLevel>  TCOMRulerLevel;

// *********************************************************************//
// DispIntf:  RulerLevel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493492-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class RulerLevelDispT : public TAutoDriver<RulerLevel>
{
public:
  RulerLevelDispT(){}

  RulerLevelDispT(RulerLevel *pintf)
  {
    TAutoDriver<RulerLevel>::Bind(pintf, false);
  }

  RulerLevelDispT(RulerLevelPtr pintf)
  {
    TAutoDriver<RulerLevel>::Bind(pintf, true);
  }

  RulerLevelDispT& operator=(RulerLevel *pintf)
  {
    TAutoDriver<RulerLevel>::Bind(pintf, false);
    return *this;
  }

  RulerLevelDispT& operator=(RulerLevelPtr pintf)
  {
    TAutoDriver<RulerLevel>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FirstMargin(float* FirstMargin/*[out,retval]*/);
  float           __fastcall get_FirstMargin(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FirstMargin(float FirstMargin/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LeftMargin(float* LeftMargin/*[out,retval]*/);
  float           __fastcall get_LeftMargin(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LeftMargin(float LeftMargin/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           FirstMargin = {read = get_FirstMargin, write = set_FirstMargin};
  __property   float           LeftMargin = {read = get_LeftMargin, write = set_LeftMargin};
};
typedef RulerLevelDispT<RulerLevel> RulerLevelDisp;

typedef TComInterface<TabStops>  TCOMTabStops;

// *********************************************************************//
// DispIntf:  TabStops
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493493-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TabStopsDispT : public TAutoDriver<TabStops>
{
public:
  TabStopsDispT(){}

  TabStopsDispT(TabStops *pintf)
  {
    TAutoDriver<TabStops>::Bind(pintf, false);
  }

  TabStopsDispT(TabStopsPtr pintf)
  {
    TAutoDriver<TabStops>::Bind(pintf, true);
  }

  TabStopsDispT& operator=(TabStops *pintf)
  {
    TAutoDriver<TabStops>::Bind(pintf, false);
    return *this;
  }

  TabStopsDispT& operator=(TabStopsPtr pintf)
  {
    TAutoDriver<TabStops>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, 
                                             Powerpoint_xp::TabStop** Item/*[out,retval]*/);
  Powerpoint_xp::TabStop* __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultSpacing(float* DefaultSpacing/*[out,retval]*/);
  float           __fastcall get_DefaultSpacing(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultSpacing(float DefaultSpacing/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Powerpoint_xp::PpTabStopType Type/*[in]*/, 
                                            float Position/*[in]*/, 
                                            Powerpoint_xp::TabStop** Add/*[out,retval]*/);
  Powerpoint_xp::TabStop* __fastcall Add(Powerpoint_xp::PpTabStopType Type/*[in]*/, 
                                         float Position/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           DefaultSpacing = {read = get_DefaultSpacing, write = set_DefaultSpacing};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef TabStopsDispT<TabStops> TabStopsDisp;

typedef TComInterface<TabStop>  TCOMTabStop;

// *********************************************************************//
// DispIntf:  TabStop
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493494-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TabStopDispT : public TAutoDriver<TabStop>
{
public:
  TabStopDispT(){}

  TabStopDispT(TabStop *pintf)
  {
    TAutoDriver<TabStop>::Bind(pintf, false);
  }

  TabStopDispT(TabStopPtr pintf)
  {
    TAutoDriver<TabStop>::Bind(pintf, true);
  }

  TabStopDispT& operator=(TabStop *pintf)
  {
    TAutoDriver<TabStop>::Bind(pintf, false);
    return *this;
  }

  TabStopDispT& operator=(TabStopPtr pintf)
  {
    TAutoDriver<TabStop>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Powerpoint_xp::PpTabStopType* Type/*[out,retval]*/);
  Powerpoint_xp::PpTabStopType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Powerpoint_xp::PpTabStopType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Position(float* Position/*[out,retval]*/);
  float           __fastcall get_Position(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Position(float Position/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::PpTabStopType Type = {read = get_Type, write = set_Type};
  __property   float           Position = {read = get_Position, write = set_Position};
};
typedef TabStopDispT<TabStop> TabStopDisp;

typedef TComInterface<Font>  TCOMFont;

// *********************************************************************//
// DispIntf:  Font
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493495-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class FontDispT : public TAutoDriver<Font>
{
public:
  FontDispT(){}

  FontDispT(Font *pintf)
  {
    TAutoDriver<Font>::Bind(pintf, false);
  }

  FontDispT(FontPtr pintf)
  {
    TAutoDriver<Font>::Bind(pintf, true);
  }

  FontDispT& operator=(Font *pintf)
  {
    TAutoDriver<Font>::Bind(pintf, false);
    return *this;
  }

  FontDispT& operator=(FontPtr pintf)
  {
    TAutoDriver<Font>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Color(Powerpoint_xp::ColorFormat** Color/*[out,retval]*/);
  Powerpoint_xp::ColorFormat* __fastcall get_Color(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bold(Office_xp::MsoTriState* Bold/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Bold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Bold(Office_xp::MsoTriState Bold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Italic(Office_xp::MsoTriState* Italic/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Italic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Italic(Office_xp::MsoTriState Italic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(Office_xp::MsoTriState* Shadow/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Shadow(Office_xp::MsoTriState Shadow/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Emboss(Office_xp::MsoTriState* Emboss/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Emboss(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Emboss(Office_xp::MsoTriState Emboss/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Underline(Office_xp::MsoTriState* Underline/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Underline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Underline(Office_xp::MsoTriState Underline/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Subscript(Office_xp::MsoTriState* Subscript/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Subscript(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Subscript(Office_xp::MsoTriState Subscript/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Superscript(Office_xp::MsoTriState* Superscript/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Superscript(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Superscript(Office_xp::MsoTriState Superscript/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BaselineOffset(float* BaselineOffset/*[out,retval]*/);
  float           __fastcall get_BaselineOffset(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BaselineOffset(float BaselineOffset/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Embedded(Office_xp::MsoTriState* Embedded/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Embedded(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Embeddable(Office_xp::MsoTriState* Embeddable/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Embeddable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Size(float* Size/*[out,retval]*/);
  float           __fastcall get_Size(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Size(float Size/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NameFarEast(BSTR* NameFarEast/*[out,retval]*/);
  BSTR            __fastcall get_NameFarEast(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NameFarEast(BSTR NameFarEast/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NameAscii(BSTR* NameAscii/*[out,retval]*/);
  BSTR            __fastcall get_NameAscii(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NameAscii(BSTR NameAscii/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoRotateNumbers(Office_xp::MsoTriState* AutoRotateNumbers/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_AutoRotateNumbers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoRotateNumbers(Office_xp::MsoTriState AutoRotateNumbers/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NameOther(BSTR* NameOther/*[out,retval]*/);
  BSTR            __fastcall get_NameOther(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NameOther(BSTR NameOther/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NameComplexScript(BSTR* NameComplexScript/*[out,retval]*/);
  BSTR            __fastcall get_NameComplexScript(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NameComplexScript(BSTR NameComplexScript/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ColorFormat* Color = {read = get_Color};
  __property   Office_xp::MsoTriState Bold = {read = get_Bold, write = set_Bold};
  __property   Office_xp::MsoTriState Italic = {read = get_Italic, write = set_Italic};
  __property   Office_xp::MsoTriState Shadow = {read = get_Shadow, write = set_Shadow};
  __property   Office_xp::MsoTriState Emboss = {read = get_Emboss, write = set_Emboss};
  __property   Office_xp::MsoTriState Underline = {read = get_Underline, write = set_Underline};
  __property   Office_xp::MsoTriState Subscript = {read = get_Subscript, write = set_Subscript};
  __property   Office_xp::MsoTriState Superscript = {read = get_Superscript, write = set_Superscript};
  __property   float           BaselineOffset = {read = get_BaselineOffset, write = set_BaselineOffset};
  __property   Office_xp::MsoTriState Embedded = {read = get_Embedded};
  __property   Office_xp::MsoTriState Embeddable = {read = get_Embeddable};
  __property   float           Size = {read = get_Size, write = set_Size};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            NameFarEast = {read = get_NameFarEast};
  __property   BSTR            NameAscii = {read = get_NameAscii};
  __property   Office_xp::MsoTriState AutoRotateNumbers = {read = get_AutoRotateNumbers, write = set_AutoRotateNumbers};
  __property   BSTR            NameOther = {read = get_NameOther};
  __property   BSTR            NameComplexScript = {read = get_NameComplexScript};
};
typedef FontDispT<Font> FontDisp;

typedef TComInterface<ParagraphFormat>  TCOMParagraphFormat;

// *********************************************************************//
// DispIntf:  ParagraphFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493496-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ParagraphFormatDispT : public TAutoDriver<ParagraphFormat>
{
public:
  ParagraphFormatDispT(){}

  ParagraphFormatDispT(ParagraphFormat *pintf)
  {
    TAutoDriver<ParagraphFormat>::Bind(pintf, false);
  }

  ParagraphFormatDispT(ParagraphFormatPtr pintf)
  {
    TAutoDriver<ParagraphFormat>::Bind(pintf, true);
  }

  ParagraphFormatDispT& operator=(ParagraphFormat *pintf)
  {
    TAutoDriver<ParagraphFormat>::Bind(pintf, false);
    return *this;
  }

  ParagraphFormatDispT& operator=(ParagraphFormatPtr pintf)
  {
    TAutoDriver<ParagraphFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Alignment(Powerpoint_xp::PpParagraphAlignment* Alignment/*[out,retval]*/);
  Powerpoint_xp::PpParagraphAlignment __fastcall get_Alignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Alignment(Powerpoint_xp::PpParagraphAlignment Alignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bullet(Powerpoint_xp::BulletFormat** Bullet/*[out,retval]*/);
  Powerpoint_xp::BulletFormat* __fastcall get_Bullet(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LineRuleBefore(Office_xp::MsoTriState* LineRuleBefore/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_LineRuleBefore(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LineRuleBefore(Office_xp::MsoTriState LineRuleBefore/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LineRuleAfter(Office_xp::MsoTriState* LineRuleAfter/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_LineRuleAfter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LineRuleAfter(Office_xp::MsoTriState LineRuleAfter/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LineRuleWithin(Office_xp::MsoTriState* LineRuleWithin/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_LineRuleWithin(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LineRuleWithin(Office_xp::MsoTriState LineRuleWithin/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpaceBefore(float* SpaceBefore/*[out,retval]*/);
  float           __fastcall get_SpaceBefore(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpaceBefore(float SpaceBefore/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpaceAfter(float* SpaceAfter/*[out,retval]*/);
  float           __fastcall get_SpaceAfter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpaceAfter(float SpaceAfter/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpaceWithin(float* SpaceWithin/*[out,retval]*/);
  float           __fastcall get_SpaceWithin(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpaceWithin(float SpaceWithin/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BaseLineAlignment(Powerpoint_xp::PpBaselineAlignment* BaseLineAlignment/*[out,retval]*/);
  Powerpoint_xp::PpBaselineAlignment __fastcall get_BaseLineAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BaseLineAlignment(Powerpoint_xp::PpBaselineAlignment BaseLineAlignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FarEastLineBreakControl(Office_xp::MsoTriState* FarEastLineBreakControl/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_FarEastLineBreakControl(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FarEastLineBreakControl(Office_xp::MsoTriState FarEastLineBreakControl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WordWrap(Office_xp::MsoTriState* WordWrap/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_WordWrap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WordWrap(Office_xp::MsoTriState WordWrap/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HangingPunctuation(Office_xp::MsoTriState* HangingPunctuation/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_HangingPunctuation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HangingPunctuation(Office_xp::MsoTriState HangingPunctuation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextDirection(Powerpoint_xp::PpDirection* TextDirection/*[out,retval]*/);
  Powerpoint_xp::PpDirection __fastcall get_TextDirection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextDirection(Powerpoint_xp::PpDirection TextDirection/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::PpParagraphAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   Powerpoint_xp::BulletFormat* Bullet = {read = get_Bullet};
  __property   Office_xp::MsoTriState LineRuleBefore = {read = get_LineRuleBefore, write = set_LineRuleBefore};
  __property   Office_xp::MsoTriState LineRuleAfter = {read = get_LineRuleAfter, write = set_LineRuleAfter};
  __property   Office_xp::MsoTriState LineRuleWithin = {read = get_LineRuleWithin, write = set_LineRuleWithin};
  __property   float           SpaceBefore = {read = get_SpaceBefore, write = set_SpaceBefore};
  __property   float           SpaceAfter = {read = get_SpaceAfter, write = set_SpaceAfter};
  __property   float           SpaceWithin = {read = get_SpaceWithin, write = set_SpaceWithin};
  __property   Powerpoint_xp::PpBaselineAlignment BaseLineAlignment = {read = get_BaseLineAlignment, write = set_BaseLineAlignment};
  __property   Office_xp::MsoTriState FarEastLineBreakControl = {read = get_FarEastLineBreakControl, write = set_FarEastLineBreakControl};
  __property   Office_xp::MsoTriState WordWrap = {read = get_WordWrap, write = set_WordWrap};
  __property   Office_xp::MsoTriState HangingPunctuation = {read = get_HangingPunctuation, write = set_HangingPunctuation};
  __property   Powerpoint_xp::PpDirection TextDirection = {read = get_TextDirection, write = set_TextDirection};
};
typedef ParagraphFormatDispT<ParagraphFormat> ParagraphFormatDisp;

typedef TComInterface<BulletFormat>  TCOMBulletFormat;

// *********************************************************************//
// DispIntf:  BulletFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493497-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class BulletFormatDispT : public TAutoDriver<BulletFormat>
{
public:
  BulletFormatDispT(){}

  BulletFormatDispT(BulletFormat *pintf)
  {
    TAutoDriver<BulletFormat>::Bind(pintf, false);
  }

  BulletFormatDispT(BulletFormatPtr pintf)
  {
    TAutoDriver<BulletFormat>::Bind(pintf, true);
  }

  BulletFormatDispT& operator=(BulletFormat *pintf)
  {
    TAutoDriver<BulletFormat>::Bind(pintf, false);
    return *this;
  }

  BulletFormatDispT& operator=(BulletFormatPtr pintf)
  {
    TAutoDriver<BulletFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_xp::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Character(int* Character/*[out,retval]*/);
  int             __fastcall get_Character(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Character(int Character/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RelativeSize(float* RelativeSize/*[out,retval]*/);
  float           __fastcall get_RelativeSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RelativeSize(float RelativeSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UseTextColor(Office_xp::MsoTriState* UseTextColor/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_UseTextColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UseTextColor(Office_xp::MsoTriState UseTextColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UseTextFont(Office_xp::MsoTriState* UseTextFont/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_UseTextFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UseTextFont(Office_xp::MsoTriState UseTextFont/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Powerpoint_xp::Font** Font/*[out,retval]*/);
  Powerpoint_xp::Font* __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Powerpoint_xp::PpBulletType* Type/*[out,retval]*/);
  Powerpoint_xp::PpBulletType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Powerpoint_xp::PpBulletType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Powerpoint_xp::PpNumberedBulletStyle* Style/*[out,retval]*/);
  Powerpoint_xp::PpNumberedBulletStyle __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Powerpoint_xp::PpNumberedBulletStyle Style/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StartValue(int* StartValue/*[out,retval]*/);
  int             __fastcall get_StartValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StartValue(int StartValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Picture(BSTR Picture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Number(int* Number/*[out,retval]*/);
  int             __fastcall get_Number(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   int             Character = {read = get_Character, write = set_Character};
  __property   float           RelativeSize = {read = get_RelativeSize, write = set_RelativeSize};
  __property   Office_xp::MsoTriState UseTextColor = {read = get_UseTextColor, write = set_UseTextColor};
  __property   Office_xp::MsoTriState UseTextFont = {read = get_UseTextFont, write = set_UseTextFont};
  __property   Powerpoint_xp::Font* Font = {read = get_Font};
  __property   Powerpoint_xp::PpBulletType Type = {read = get_Type, write = set_Type};
  __property   Powerpoint_xp::PpNumberedBulletStyle Style = {read = get_Style, write = set_Style};
  __property   int             StartValue = {read = get_StartValue, write = set_StartValue};
  __property   int             Number = {read = get_Number};
};
typedef BulletFormatDispT<BulletFormat> BulletFormatDisp;

typedef TComInterface<TextStyles>  TCOMTextStyles;

// *********************************************************************//
// DispIntf:  TextStyles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493498-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TextStylesDispT : public TAutoDriver<TextStyles>
{
public:
  TextStylesDispT(){}

  TextStylesDispT(TextStyles *pintf)
  {
    TAutoDriver<TextStyles>::Bind(pintf, false);
  }

  TextStylesDispT(TextStylesPtr pintf)
  {
    TAutoDriver<TextStyles>::Bind(pintf, true);
  }

  TextStylesDispT& operator=(TextStyles *pintf)
  {
    TAutoDriver<TextStyles>::Bind(pintf, false);
    return *this;
  }

  TextStylesDispT& operator=(TextStylesPtr pintf)
  {
    TAutoDriver<TextStyles>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(Powerpoint_xp::PpTextStyleType Type/*[in]*/, 
                                             Powerpoint_xp::TextStyle** Item/*[out,retval]*/);
  Powerpoint_xp::TextStyle* __fastcall Item(Powerpoint_xp::PpTextStyleType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef TextStylesDispT<TextStyles> TextStylesDisp;

typedef TComInterface<TextStyle>  TCOMTextStyle;

// *********************************************************************//
// DispIntf:  TextStyle
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493499-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TextStyleDispT : public TAutoDriver<TextStyle>
{
public:
  TextStyleDispT(){}

  TextStyleDispT(TextStyle *pintf)
  {
    TAutoDriver<TextStyle>::Bind(pintf, false);
  }

  TextStyleDispT(TextStylePtr pintf)
  {
    TAutoDriver<TextStyle>::Bind(pintf, true);
  }

  TextStyleDispT& operator=(TextStyle *pintf)
  {
    TAutoDriver<TextStyle>::Bind(pintf, false);
    return *this;
  }

  TextStyleDispT& operator=(TextStylePtr pintf)
  {
    TAutoDriver<TextStyle>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Ruler(Powerpoint_xp::Ruler** Ruler/*[out,retval]*/);
  Powerpoint_xp::Ruler* __fastcall get_Ruler(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextFrame(Powerpoint_xp::TextFrame** TextFrame/*[out,retval]*/);
  Powerpoint_xp::TextFrame* __fastcall get_TextFrame(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Levels(Powerpoint_xp::TextStyleLevels** Levels/*[out,retval]*/);
  Powerpoint_xp::TextStyleLevels* __fastcall get_Levels(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Ruler* Ruler = {read = get_Ruler};
  __property   Powerpoint_xp::TextFrame* TextFrame = {read = get_TextFrame};
  __property   Powerpoint_xp::TextStyleLevels* Levels = {read = get_Levels};
};
typedef TextStyleDispT<TextStyle> TextStyleDisp;

typedef TComInterface<TextStyleLevels>  TCOMTextStyleLevels;

// *********************************************************************//
// DispIntf:  TextStyleLevels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TextStyleLevelsDispT : public TAutoDriver<TextStyleLevels>
{
public:
  TextStyleLevelsDispT(){}

  TextStyleLevelsDispT(TextStyleLevels *pintf)
  {
    TAutoDriver<TextStyleLevels>::Bind(pintf, false);
  }

  TextStyleLevelsDispT(TextStyleLevelsPtr pintf)
  {
    TAutoDriver<TextStyleLevels>::Bind(pintf, true);
  }

  TextStyleLevelsDispT& operator=(TextStyleLevels *pintf)
  {
    TAutoDriver<TextStyleLevels>::Bind(pintf, false);
    return *this;
  }

  TextStyleLevelsDispT& operator=(TextStyleLevelsPtr pintf)
  {
    TAutoDriver<TextStyleLevels>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Level/*[in]*/, 
                                             Powerpoint_xp::TextStyleLevel** Item/*[out,retval]*/);
  Powerpoint_xp::TextStyleLevel* __fastcall Item(int Level/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef TextStyleLevelsDispT<TextStyleLevels> TextStyleLevelsDisp;

typedef TComInterface<TextStyleLevel>  TCOMTextStyleLevel;

// *********************************************************************//
// DispIntf:  TextStyleLevel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TextStyleLevelDispT : public TAutoDriver<TextStyleLevel>
{
public:
  TextStyleLevelDispT(){}

  TextStyleLevelDispT(TextStyleLevel *pintf)
  {
    TAutoDriver<TextStyleLevel>::Bind(pintf, false);
  }

  TextStyleLevelDispT(TextStyleLevelPtr pintf)
  {
    TAutoDriver<TextStyleLevel>::Bind(pintf, true);
  }

  TextStyleLevelDispT& operator=(TextStyleLevel *pintf)
  {
    TAutoDriver<TextStyleLevel>::Bind(pintf, false);
    return *this;
  }

  TextStyleLevelDispT& operator=(TextStyleLevelPtr pintf)
  {
    TAutoDriver<TextStyleLevel>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParagraphFormat(Powerpoint_xp::ParagraphFormat** ParagraphFormat/*[out,retval]*/);
  Powerpoint_xp::ParagraphFormat* __fastcall get_ParagraphFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Powerpoint_xp::Font** Font/*[out,retval]*/);
  Powerpoint_xp::Font* __fastcall get_Font(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ParagraphFormat* ParagraphFormat = {read = get_ParagraphFormat};
  __property   Powerpoint_xp::Font* Font = {read = get_Font};
};
typedef TextStyleLevelDispT<TextStyleLevel> TextStyleLevelDisp;

typedef TComInterface<HeaderFooter>  TCOMHeaderFooter;

// *********************************************************************//
// DispIntf:  HeaderFooter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class HeaderFooterDispT : public TAutoDriver<HeaderFooter>
{
public:
  HeaderFooterDispT(){}

  HeaderFooterDispT(HeaderFooter *pintf)
  {
    TAutoDriver<HeaderFooter>::Bind(pintf, false);
  }

  HeaderFooterDispT(HeaderFooterPtr pintf)
  {
    TAutoDriver<HeaderFooter>::Bind(pintf, true);
  }

  HeaderFooterDispT& operator=(HeaderFooter *pintf)
  {
    TAutoDriver<HeaderFooter>::Bind(pintf, false);
    return *this;
  }

  HeaderFooterDispT& operator=(HeaderFooterPtr pintf)
  {
    TAutoDriver<HeaderFooter>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_xp::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UseFormat(Office_xp::MsoTriState* UseFormat/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_UseFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UseFormat(Office_xp::MsoTriState UseFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Format(Powerpoint_xp::PpDateTimeFormat* Format/*[out,retval]*/);
  Powerpoint_xp::PpDateTimeFormat __fastcall get_Format(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Format(Powerpoint_xp::PpDateTimeFormat Format/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   BSTR            Text = {read = get_Text};
  __property   Office_xp::MsoTriState UseFormat = {read = get_UseFormat, write = set_UseFormat};
  __property   Powerpoint_xp::PpDateTimeFormat Format = {read = get_Format, write = set_Format};
};
typedef HeaderFooterDispT<HeaderFooter> HeaderFooterDisp;

typedef TComInterface<Tags>  TCOMTags;

// *********************************************************************//
// DispIntf:  Tags
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TagsDispT : public TAutoDriver<Tags>
{
public:
  TagsDispT(){}

  TagsDispT(Tags *pintf)
  {
    TAutoDriver<Tags>::Bind(pintf, false);
  }

  TagsDispT(TagsPtr pintf)
  {
    TAutoDriver<Tags>::Bind(pintf, true);
  }

  TagsDispT& operator=(Tags *pintf)
  {
    TAutoDriver<Tags>::Bind(pintf, false);
    return *this;
  }

  TagsDispT& operator=(TagsPtr pintf)
  {
    TAutoDriver<Tags>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(BSTR Name/*[in]*/, BSTR* Item/*[out,retval]*/);
  BSTR            __fastcall Item(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR Name/*[in]*/, BSTR Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddBinary(BSTR Name/*[in]*/, BSTR FilePath/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BinaryValue(BSTR Name/*[in]*/, 
                                                    long* BinaryValue/*[out,retval]*/);
  long            __fastcall BinaryValue(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Name(int Index/*[in]*/, BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall Name(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Value(int Index/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall Value(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef TagsDispT<Tags> TagsDisp;

typedef TComInterface<MouseTracker>  TCOMMouseTracker;

typedef TComInterface<MouseDownHandler>  TCOMMouseDownHandler;

// *********************************************************************//
// SmartIntf: TCOMOCXExtender
// Interface: OCXExtender
// *********************************************************************//
template <class T /* OCXExtender */ >
class TCOMOCXExtenderT : public TComInterface<OCXExtender>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMOCXExtenderT() {}
  TCOMOCXExtenderT(OCXExtender *intf, bool addRef = false) : TComInterface<OCXExtender>(intf, addRef) {}
  TCOMOCXExtenderT(const TCOMOCXExtenderT& src) : TComInterface<OCXExtender>(src) {}
  TCOMOCXExtenderT& operator=(const TCOMOCXExtenderT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* Visible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL Visible/*[in]*/);
  HRESULT         __fastcall set_Visible(TOLEBOOL Visible/*[in]*/);
  HRESULT         __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(float Left/*[in]*/);
  HRESULT         __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(float Top/*[in]*/);
  HRESULT         __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(float Height/*[in]*/);
  HRESULT         __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(float Width/*[in]*/);
  HRESULT         __fastcall get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/);
  int             __fastcall get_ZOrderPosition(void);
  HRESULT         __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_AltHTML(BSTR* AltHTML/*[out,retval]*/);
  BSTR            __fastcall get_AltHTML(void);
  HRESULT         __fastcall set_AltHTML(BSTR AltHTML/*[in]*/);

  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            AltHTML = {read = get_AltHTML};
};
typedef TCOMOCXExtenderT<OCXExtender> TCOMOCXExtender;

// *********************************************************************//
// DispIntf:  OCXExtender
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class OCXExtenderDispT : public TAutoDriver<OCXExtender>
{
public:
  OCXExtenderDispT(){}

  OCXExtenderDispT(OCXExtender *pintf)
  {
    TAutoDriver<OCXExtender>::Bind(pintf, false);
  }

  OCXExtenderDispT(OCXExtenderPtr pintf)
  {
    TAutoDriver<OCXExtender>::Bind(pintf, true);
  }

  OCXExtenderDispT& operator=(OCXExtender *pintf)
  {
    TAutoDriver<OCXExtender>::Bind(pintf, false);
    return *this;
  }

  OCXExtenderDispT& operator=(OCXExtenderPtr pintf)
  {
    TAutoDriver<OCXExtender>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OLEControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OLEControl);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/);
  int             __fastcall get_ZOrderPosition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AltHTML(BSTR* AltHTML/*[out,retval]*/);
  BSTR            __fastcall get_AltHTML(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AltHTML(BSTR AltHTML/*[in]*/);

  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            AltHTML = {read = get_AltHTML};
};
typedef OCXExtenderDispT<OCXExtender> OCXExtenderDisp;

// *********************************************************************//
// DispIntf:  OCXExtenderEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {914934C1-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T>
class OCXExtenderEventsDispT : public TAutoDriver<OCXExtenderEvents>
{
public:
  OCXExtenderEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall GotFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LostFocus();

};
typedef OCXExtenderEventsDispT<OCXExtenderEvents> OCXExtenderEventsDisp;

typedef TComInterface<Table>  TCOMTable;

// *********************************************************************//
// DispIntf:  Table
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C3-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TableDispT : public TAutoDriver<Table>
{
public:
  TableDispT(){}

  TableDispT(Table *pintf)
  {
    TAutoDriver<Table>::Bind(pintf, false);
  }

  TableDispT(TablePtr pintf)
  {
    TAutoDriver<Table>::Bind(pintf, true);
  }

  TableDispT& operator=(Table *pintf)
  {
    TAutoDriver<Table>::Bind(pintf, false);
    return *this;
  }

  TableDispT& operator=(TablePtr pintf)
  {
    TAutoDriver<Table>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Columns(Powerpoint_xp::Columns** Columns/*[out,retval]*/);
  Powerpoint_xp::Columns* __fastcall get_Columns(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Rows(Powerpoint_xp::Rows** Rows/*[out,retval]*/);
  Powerpoint_xp::Rows* __fastcall get_Rows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cell(int Row/*[in]*/, int Column/*[in]*/, 
                                             Powerpoint_xp::Cell** Cell/*[out,retval]*/);
  Powerpoint_xp::Cell* __fastcall Cell(int Row/*[in]*/, int Column/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TableDirection(Powerpoint_xp::PpDirection* TableDirection/*[out,retval]*/);
  Powerpoint_xp::PpDirection __fastcall get_TableDirection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TableDirection(Powerpoint_xp::PpDirection TableDirection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MergeBorders();

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Columns* Columns = {read = get_Columns};
  __property   Powerpoint_xp::Rows* Rows = {read = get_Rows};
  __property   Powerpoint_xp::PpDirection TableDirection = {read = get_TableDirection, write = set_TableDirection};
};
typedef TableDispT<Table> TableDisp;

typedef TComInterface<Columns>  TCOMColumns;

// *********************************************************************//
// DispIntf:  Columns
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C4-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ColumnsDispT : public TAutoDriver<Columns>
{
public:
  ColumnsDispT(){}

  ColumnsDispT(Columns *pintf)
  {
    TAutoDriver<Columns>::Bind(pintf, false);
  }

  ColumnsDispT(ColumnsPtr pintf)
  {
    TAutoDriver<Columns>::Bind(pintf, true);
  }

  ColumnsDispT& operator=(Columns *pintf)
  {
    TAutoDriver<Columns>::Bind(pintf, false);
    return *this;
  }

  ColumnsDispT& operator=(ColumnsPtr pintf)
  {
    TAutoDriver<Columns>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, 
                                             Powerpoint_xp::Column** Item/*[out,retval]*/);
  Powerpoint_xp::Column* __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(int BeforeColumn/*[in,def,opt]*/, 
                                            Powerpoint_xp::Column** Add/*[out,retval]*/);
  Powerpoint_xp::Column* __fastcall Add(int BeforeColumn/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef ColumnsDispT<Columns> ColumnsDisp;

typedef TComInterface<Column>  TCOMColumn;

// *********************************************************************//
// DispIntf:  Column
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C5-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ColumnDispT : public TAutoDriver<Column>
{
public:
  ColumnDispT(){}

  ColumnDispT(Column *pintf)
  {
    TAutoDriver<Column>::Bind(pintf, false);
  }

  ColumnDispT(ColumnPtr pintf)
  {
    TAutoDriver<Column>::Bind(pintf, true);
  }

  ColumnDispT& operator=(Column *pintf)
  {
    TAutoDriver<Column>::Bind(pintf, false);
    return *this;
  }

  ColumnDispT& operator=(ColumnPtr pintf)
  {
    TAutoDriver<Column>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cells(Powerpoint_xp::CellRange** Cells/*[out,retval]*/);
  Powerpoint_xp::CellRange* __fastcall get_Cells(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::CellRange* Cells = {read = get_Cells};
  __property   float           Width = {read = get_Width, write = set_Width};
};
typedef ColumnDispT<Column> ColumnDisp;

typedef TComInterface<Rows>  TCOMRows;

// *********************************************************************//
// DispIntf:  Rows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C6-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class RowsDispT : public TAutoDriver<Rows>
{
public:
  RowsDispT(){}

  RowsDispT(Rows *pintf)
  {
    TAutoDriver<Rows>::Bind(pintf, false);
  }

  RowsDispT(RowsPtr pintf)
  {
    TAutoDriver<Rows>::Bind(pintf, true);
  }

  RowsDispT& operator=(Rows *pintf)
  {
    TAutoDriver<Rows>::Bind(pintf, false);
    return *this;
  }

  RowsDispT& operator=(RowsPtr pintf)
  {
    TAutoDriver<Rows>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, 
                                             Powerpoint_xp::Row** Item/*[out,retval]*/);
  Powerpoint_xp::Row* __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(int BeforeRow/*[in,def,opt]*/, 
                                            Powerpoint_xp::Row** Add/*[out,retval]*/);
  Powerpoint_xp::Row* __fastcall Add(int BeforeRow/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef RowsDispT<Rows> RowsDisp;

typedef TComInterface<Row>  TCOMRow;

// *********************************************************************//
// DispIntf:  Row
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C7-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class RowDispT : public TAutoDriver<Row>
{
public:
  RowDispT(){}

  RowDispT(Row *pintf)
  {
    TAutoDriver<Row>::Bind(pintf, false);
  }

  RowDispT(RowPtr pintf)
  {
    TAutoDriver<Row>::Bind(pintf, true);
  }

  RowDispT& operator=(Row *pintf)
  {
    TAutoDriver<Row>::Bind(pintf, false);
    return *this;
  }

  RowDispT& operator=(RowPtr pintf)
  {
    TAutoDriver<Row>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cells(Powerpoint_xp::CellRange** Cells/*[out,retval]*/);
  Powerpoint_xp::CellRange* __fastcall get_Cells(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::CellRange* Cells = {read = get_Cells};
  __property   float           Height = {read = get_Height, write = set_Height};
};
typedef RowDispT<Row> RowDisp;

typedef TComInterface<CellRange>  TCOMCellRange;

// *********************************************************************//
// DispIntf:  CellRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C8-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class CellRangeDispT : public TAutoDriver<CellRange>
{
public:
  CellRangeDispT(){}

  CellRangeDispT(CellRange *pintf)
  {
    TAutoDriver<CellRange>::Bind(pintf, false);
  }

  CellRangeDispT(CellRangePtr pintf)
  {
    TAutoDriver<CellRange>::Bind(pintf, true);
  }

  CellRangeDispT& operator=(CellRange *pintf)
  {
    TAutoDriver<CellRange>::Bind(pintf, false);
    return *this;
  }

  CellRangeDispT& operator=(CellRangePtr pintf)
  {
    TAutoDriver<CellRange>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, 
                                             Powerpoint_xp::Cell** Item/*[out,retval]*/);
  Powerpoint_xp::Cell* __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Borders(Powerpoint_xp::Borders** Borders/*[out,retval]*/);
  Powerpoint_xp::Borders* __fastcall get_Borders(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Borders* Borders = {read = get_Borders};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef CellRangeDispT<CellRange> CellRangeDisp;

typedef TComInterface<Cell>  TCOMCell;

// *********************************************************************//
// DispIntf:  Cell
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class CellDispT : public TAutoDriver<Cell>
{
public:
  CellDispT(){}

  CellDispT(Cell *pintf)
  {
    TAutoDriver<Cell>::Bind(pintf, false);
  }

  CellDispT(CellPtr pintf)
  {
    TAutoDriver<Cell>::Bind(pintf, true);
  }

  CellDispT& operator=(Cell *pintf)
  {
    TAutoDriver<Cell>::Bind(pintf, false);
    return *this;
  }

  CellDispT& operator=(CellPtr pintf)
  {
    TAutoDriver<Cell>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shape(Powerpoint_xp::Shape** Shape/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall get_Shape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Borders(Powerpoint_xp::Borders** Borders/*[out,retval]*/);
  Powerpoint_xp::Borders* __fastcall get_Borders(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Merge(Powerpoint_xp::Cell* MergeTo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Split(int NumRows/*[in]*/, int NumColumns/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selected(VARIANT_BOOL* Selected/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Selected(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Shape* Shape = {read = get_Shape};
  __property   Powerpoint_xp::Borders* Borders = {read = get_Borders};
  __property   VARIANT_BOOL    Selected = {read = get_Selected};
};
typedef CellDispT<Cell> CellDisp;

typedef TComInterface<Borders>  TCOMBorders;

// *********************************************************************//
// DispIntf:  Borders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CA-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class BordersDispT : public TAutoDriver<Borders>
{
public:
  BordersDispT(){}

  BordersDispT(Borders *pintf)
  {
    TAutoDriver<Borders>::Bind(pintf, false);
  }

  BordersDispT(BordersPtr pintf)
  {
    TAutoDriver<Borders>::Bind(pintf, true);
  }

  BordersDispT& operator=(Borders *pintf)
  {
    TAutoDriver<Borders>::Bind(pintf, false);
    return *this;
  }

  BordersDispT& operator=(BordersPtr pintf)
  {
    TAutoDriver<Borders>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(Powerpoint_xp::PpBorderType BorderType/*[in]*/, 
                                             Powerpoint_xp::LineFormat** Item/*[out,retval]*/);
  Powerpoint_xp::LineFormat* __fastcall Item(Powerpoint_xp::PpBorderType BorderType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef BordersDispT<Borders> BordersDisp;

typedef TComInterface<Panes>  TCOMPanes;

// *********************************************************************//
// DispIntf:  Panes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CB-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PanesDispT : public TAutoDriver<Panes>
{
public:
  PanesDispT(){}

  PanesDispT(Panes *pintf)
  {
    TAutoDriver<Panes>::Bind(pintf, false);
  }

  PanesDispT(PanesPtr pintf)
  {
    TAutoDriver<Panes>::Bind(pintf, true);
  }

  PanesDispT& operator=(Panes *pintf)
  {
    TAutoDriver<Panes>::Bind(pintf, false);
    return *this;
  }

  PanesDispT& operator=(PanesPtr pintf)
  {
    TAutoDriver<Panes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, 
                                             Powerpoint_xp::Pane** Item/*[out,retval]*/);
  Powerpoint_xp::Pane* __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef PanesDispT<Panes> PanesDisp;

typedef TComInterface<Pane>  TCOMPane;

// *********************************************************************//
// DispIntf:  Pane
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CC-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PaneDispT : public TAutoDriver<Pane>
{
public:
  PaneDispT(){}

  PaneDispT(Pane *pintf)
  {
    TAutoDriver<Pane>::Bind(pintf, false);
  }

  PaneDispT(PanePtr pintf)
  {
    TAutoDriver<Pane>::Bind(pintf, true);
  }

  PaneDispT& operator=(Pane *pintf)
  {
    TAutoDriver<Pane>::Bind(pintf, false);
    return *this;
  }

  PaneDispT& operator=(PanePtr pintf)
  {
    TAutoDriver<Pane>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Activate();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Active(Office_xp::MsoTriState* Active/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Active(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ViewType(Powerpoint_xp::PpViewType* ViewType/*[out,retval]*/);
  Powerpoint_xp::PpViewType __fastcall get_ViewType(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoTriState Active = {read = get_Active};
  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   Powerpoint_xp::PpViewType ViewType = {read = get_ViewType};
};
typedef PaneDispT<Pane> PaneDisp;

typedef TComInterface<DefaultWebOptions>  TCOMDefaultWebOptions;

// *********************************************************************//
// DispIntf:  DefaultWebOptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CD-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class DefaultWebOptionsDispT : public TAutoDriver<DefaultWebOptions>
{
public:
  DefaultWebOptionsDispT(){}

  DefaultWebOptionsDispT(DefaultWebOptions *pintf)
  {
    TAutoDriver<DefaultWebOptions>::Bind(pintf, false);
  }

  DefaultWebOptionsDispT(DefaultWebOptionsPtr pintf)
  {
    TAutoDriver<DefaultWebOptions>::Bind(pintf, true);
  }

  DefaultWebOptionsDispT& operator=(DefaultWebOptions *pintf)
  {
    TAutoDriver<DefaultWebOptions>::Bind(pintf, false);
    return *this;
  }

  DefaultWebOptionsDispT& operator=(DefaultWebOptionsPtr pintf)
  {
    TAutoDriver<DefaultWebOptions>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IncludeNavigation(Office_xp::MsoTriState* IncludeNavigation/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_IncludeNavigation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IncludeNavigation(Office_xp::MsoTriState IncludeNavigation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FrameColors(Powerpoint_xp::PpFrameColors* FrameColors/*[out,retval]*/);
  Powerpoint_xp::PpFrameColors __fastcall get_FrameColors(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FrameColors(Powerpoint_xp::PpFrameColors FrameColors/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ResizeGraphics(Office_xp::MsoTriState* ResizeGraphics/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_ResizeGraphics(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ResizeGraphics(Office_xp::MsoTriState ResizeGraphics/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowSlideAnimation(Office_xp::MsoTriState* ShowSlideAnimation/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_ShowSlideAnimation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowSlideAnimation(Office_xp::MsoTriState ShowSlideAnimation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OrganizeInFolder(Office_xp::MsoTriState* OrganizeInFolder/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_OrganizeInFolder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OrganizeInFolder(Office_xp::MsoTriState OrganizeInFolder/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UseLongFileNames(Office_xp::MsoTriState* UseLongFileNames/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_UseLongFileNames(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UseLongFileNames(Office_xp::MsoTriState UseLongFileNames/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RelyOnVML(Office_xp::MsoTriState* RelyOnVML/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_RelyOnVML(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RelyOnVML(Office_xp::MsoTriState RelyOnVML/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowPNG(Office_xp::MsoTriState* AllowPNG/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_AllowPNG(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowPNG(Office_xp::MsoTriState AllowPNG/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScreenSize(Office_xp::MsoScreenSize* ScreenSize/*[out,retval]*/);
  Office_xp::MsoScreenSize __fastcall get_ScreenSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScreenSize(Office_xp::MsoScreenSize ScreenSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Encoding(Office_xp::MsoEncoding* Encoding/*[out,retval]*/);
  Office_xp::MsoEncoding __fastcall get_Encoding(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Encoding(Office_xp::MsoEncoding Encoding/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UpdateLinksOnSave(Office_xp::MsoTriState* UpdateLinksOnSave/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_UpdateLinksOnSave(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UpdateLinksOnSave(Office_xp::MsoTriState UpdateLinksOnSave/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CheckIfOfficeIsHTMLEditor(Office_xp::MsoTriState* CheckIfOfficeIsHTMLEditor/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_CheckIfOfficeIsHTMLEditor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CheckIfOfficeIsHTMLEditor(Office_xp::MsoTriState CheckIfOfficeIsHTMLEditor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AlwaysSaveInDefaultEncoding(Office_xp::MsoTriState* AlwaysSaveInDefaultEncoding/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_AlwaysSaveInDefaultEncoding(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AlwaysSaveInDefaultEncoding(Office_xp::MsoTriState AlwaysSaveInDefaultEncoding/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fonts(Office_xp::WebPageFonts** Fonts/*[out,retval]*/);
  Office_xp::WebPageFonts* __fastcall get_Fonts(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FolderSuffix(BSTR* FolderSuffix/*[out,retval]*/);
  BSTR            __fastcall get_FolderSuffix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TargetBrowser(Office_xp::MsoTargetBrowser* TargetBrowser/*[out,retval]*/);
  Office_xp::MsoTargetBrowser __fastcall get_TargetBrowser(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TargetBrowser(Office_xp::MsoTargetBrowser TargetBrowser/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SaveNewWebPagesAsWebArchives(Office_xp::MsoTriState* SaveNewWebPagesAsWebArchives/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_SaveNewWebPagesAsWebArchives(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SaveNewWebPagesAsWebArchives(Office_xp::MsoTriState SaveNewWebPagesAsWebArchives/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLVersion(Powerpoint_xp::PpHTMLVersion* HTMLVersion/*[out,retval]*/);
  Powerpoint_xp::PpHTMLVersion __fastcall get_HTMLVersion(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLVersion(Powerpoint_xp::PpHTMLVersion HTMLVersion/*[in]*/);

  __property   Office_xp::MsoTriState IncludeNavigation = {read = get_IncludeNavigation, write = set_IncludeNavigation};
  __property   Powerpoint_xp::PpFrameColors FrameColors = {read = get_FrameColors, write = set_FrameColors};
  __property   Office_xp::MsoTriState ResizeGraphics = {read = get_ResizeGraphics, write = set_ResizeGraphics};
  __property   Office_xp::MsoTriState ShowSlideAnimation = {read = get_ShowSlideAnimation, write = set_ShowSlideAnimation};
  __property   Office_xp::MsoTriState OrganizeInFolder = {read = get_OrganizeInFolder, write = set_OrganizeInFolder};
  __property   Office_xp::MsoTriState UseLongFileNames = {read = get_UseLongFileNames, write = set_UseLongFileNames};
  __property   Office_xp::MsoTriState RelyOnVML = {read = get_RelyOnVML, write = set_RelyOnVML};
  __property   Office_xp::MsoTriState AllowPNG = {read = get_AllowPNG, write = set_AllowPNG};
  __property   Office_xp::MsoScreenSize ScreenSize = {read = get_ScreenSize, write = set_ScreenSize};
  __property   Office_xp::MsoEncoding Encoding = {read = get_Encoding, write = set_Encoding};
  __property   Office_xp::MsoTriState UpdateLinksOnSave = {read = get_UpdateLinksOnSave, write = set_UpdateLinksOnSave};
  __property   Office_xp::MsoTriState CheckIfOfficeIsHTMLEditor = {read = get_CheckIfOfficeIsHTMLEditor, write = set_CheckIfOfficeIsHTMLEditor};
  __property   Office_xp::MsoTriState AlwaysSaveInDefaultEncoding = {read = get_AlwaysSaveInDefaultEncoding, write = set_AlwaysSaveInDefaultEncoding};
  __property   Office_xp::WebPageFonts* Fonts = {read = get_Fonts};
  __property   BSTR            FolderSuffix = {read = get_FolderSuffix};
  __property   Office_xp::MsoTargetBrowser TargetBrowser = {read = get_TargetBrowser, write = set_TargetBrowser};
  __property   Office_xp::MsoTriState SaveNewWebPagesAsWebArchives = {read = get_SaveNewWebPagesAsWebArchives, write = set_SaveNewWebPagesAsWebArchives};
  __property   Powerpoint_xp::PpHTMLVersion HTMLVersion = {read = get_HTMLVersion, write = set_HTMLVersion};
};
typedef DefaultWebOptionsDispT<DefaultWebOptions> DefaultWebOptionsDisp;

typedef TComInterface<WebOptions>  TCOMWebOptions;

// *********************************************************************//
// DispIntf:  WebOptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CE-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class WebOptionsDispT : public TAutoDriver<WebOptions>
{
public:
  WebOptionsDispT(){}

  WebOptionsDispT(WebOptions *pintf)
  {
    TAutoDriver<WebOptions>::Bind(pintf, false);
  }

  WebOptionsDispT(WebOptionsPtr pintf)
  {
    TAutoDriver<WebOptions>::Bind(pintf, true);
  }

  WebOptionsDispT& operator=(WebOptions *pintf)
  {
    TAutoDriver<WebOptions>::Bind(pintf, false);
    return *this;
  }

  WebOptionsDispT& operator=(WebOptionsPtr pintf)
  {
    TAutoDriver<WebOptions>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IncludeNavigation(Office_xp::MsoTriState* IncludeNavigation/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_IncludeNavigation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IncludeNavigation(Office_xp::MsoTriState IncludeNavigation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FrameColors(Powerpoint_xp::PpFrameColors* FrameColors/*[out,retval]*/);
  Powerpoint_xp::PpFrameColors __fastcall get_FrameColors(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FrameColors(Powerpoint_xp::PpFrameColors FrameColors/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ResizeGraphics(Office_xp::MsoTriState* ResizeGraphics/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_ResizeGraphics(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ResizeGraphics(Office_xp::MsoTriState ResizeGraphics/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowSlideAnimation(Office_xp::MsoTriState* ShowSlideAnimation/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_ShowSlideAnimation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowSlideAnimation(Office_xp::MsoTriState ShowSlideAnimation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OrganizeInFolder(Office_xp::MsoTriState* OrganizeInFolder/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_OrganizeInFolder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OrganizeInFolder(Office_xp::MsoTriState OrganizeInFolder/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UseLongFileNames(Office_xp::MsoTriState* UseLongFileNames/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_UseLongFileNames(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UseLongFileNames(Office_xp::MsoTriState UseLongFileNames/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RelyOnVML(Office_xp::MsoTriState* RelyOnVML/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_RelyOnVML(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RelyOnVML(Office_xp::MsoTriState RelyOnVML/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowPNG(Office_xp::MsoTriState* AllowPNG/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_AllowPNG(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowPNG(Office_xp::MsoTriState AllowPNG/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScreenSize(Office_xp::MsoScreenSize* ScreenSize/*[out,retval]*/);
  Office_xp::MsoScreenSize __fastcall get_ScreenSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScreenSize(Office_xp::MsoScreenSize ScreenSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Encoding(Office_xp::MsoEncoding* Encoding/*[out,retval]*/);
  Office_xp::MsoEncoding __fastcall get_Encoding(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Encoding(Office_xp::MsoEncoding Encoding/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FolderSuffix(BSTR* FolderSuffix/*[out,retval]*/);
  BSTR            __fastcall get_FolderSuffix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UseDefaultFolderSuffix();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TargetBrowser(Office_xp::MsoTargetBrowser* TargetBrowser/*[out,retval]*/);
  Office_xp::MsoTargetBrowser __fastcall get_TargetBrowser(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TargetBrowser(Office_xp::MsoTargetBrowser TargetBrowser/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLVersion(Powerpoint_xp::PpHTMLVersion* HTMLVersion/*[out,retval]*/);
  Powerpoint_xp::PpHTMLVersion __fastcall get_HTMLVersion(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLVersion(Powerpoint_xp::PpHTMLVersion HTMLVersion/*[in]*/);

  __property   Office_xp::MsoTriState IncludeNavigation = {read = get_IncludeNavigation, write = set_IncludeNavigation};
  __property   Powerpoint_xp::PpFrameColors FrameColors = {read = get_FrameColors, write = set_FrameColors};
  __property   Office_xp::MsoTriState ResizeGraphics = {read = get_ResizeGraphics, write = set_ResizeGraphics};
  __property   Office_xp::MsoTriState ShowSlideAnimation = {read = get_ShowSlideAnimation, write = set_ShowSlideAnimation};
  __property   Office_xp::MsoTriState OrganizeInFolder = {read = get_OrganizeInFolder, write = set_OrganizeInFolder};
  __property   Office_xp::MsoTriState UseLongFileNames = {read = get_UseLongFileNames, write = set_UseLongFileNames};
  __property   Office_xp::MsoTriState RelyOnVML = {read = get_RelyOnVML, write = set_RelyOnVML};
  __property   Office_xp::MsoTriState AllowPNG = {read = get_AllowPNG, write = set_AllowPNG};
  __property   Office_xp::MsoScreenSize ScreenSize = {read = get_ScreenSize, write = set_ScreenSize};
  __property   Office_xp::MsoEncoding Encoding = {read = get_Encoding, write = set_Encoding};
  __property   BSTR            FolderSuffix = {read = get_FolderSuffix};
  __property   Office_xp::MsoTargetBrowser TargetBrowser = {read = get_TargetBrowser, write = set_TargetBrowser};
  __property   Powerpoint_xp::PpHTMLVersion HTMLVersion = {read = get_HTMLVersion, write = set_HTMLVersion};
};
typedef WebOptionsDispT<WebOptions> WebOptionsDisp;

typedef TComInterface<PublishObjects>  TCOMPublishObjects;

// *********************************************************************//
// DispIntf:  PublishObjects
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CF-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PublishObjectsDispT : public TAutoDriver<PublishObjects>
{
public:
  PublishObjectsDispT(){}

  PublishObjectsDispT(PublishObjects *pintf)
  {
    TAutoDriver<PublishObjects>::Bind(pintf, false);
  }

  PublishObjectsDispT(PublishObjectsPtr pintf)
  {
    TAutoDriver<PublishObjects>::Bind(pintf, true);
  }

  PublishObjectsDispT& operator=(PublishObjects *pintf)
  {
    TAutoDriver<PublishObjects>::Bind(pintf, false);
    return *this;
  }

  PublishObjectsDispT& operator=(PublishObjectsPtr pintf)
  {
    TAutoDriver<PublishObjects>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, 
                                             Powerpoint_xp::PublishObject** Item/*[out,retval]*/);
  Powerpoint_xp::PublishObject* __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef PublishObjectsDispT<PublishObjects> PublishObjectsDisp;

typedef TComInterface<PublishObject>  TCOMPublishObject;

// *********************************************************************//
// DispIntf:  PublishObject
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PublishObjectDispT : public TAutoDriver<PublishObject>
{
public:
  PublishObjectDispT(){}

  PublishObjectDispT(PublishObject *pintf)
  {
    TAutoDriver<PublishObject>::Bind(pintf, false);
  }

  PublishObjectDispT(PublishObjectPtr pintf)
  {
    TAutoDriver<PublishObject>::Bind(pintf, true);
  }

  PublishObjectDispT& operator=(PublishObject *pintf)
  {
    TAutoDriver<PublishObject>::Bind(pintf, false);
    return *this;
  }

  PublishObjectDispT& operator=(PublishObjectPtr pintf)
  {
    TAutoDriver<PublishObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLVersion(Powerpoint_xp::PpHTMLVersion* HTMLVersion/*[out,retval]*/);
  Powerpoint_xp::PpHTMLVersion __fastcall get_HTMLVersion(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLVersion(Powerpoint_xp::PpHTMLVersion HTMLVersion/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceType(Powerpoint_xp::PpPublishSourceType* SourceType/*[out,retval]*/);
  Powerpoint_xp::PpPublishSourceType __fastcall get_SourceType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SourceType(Powerpoint_xp::PpPublishSourceType SourceType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RangeStart(int* RangeStart/*[out,retval]*/);
  int             __fastcall get_RangeStart(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RangeStart(int RangeStart/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RangeEnd(int* RangeEnd/*[out,retval]*/);
  int             __fastcall get_RangeEnd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RangeEnd(int RangeEnd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/);
  BSTR            __fastcall get_SlideShowName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SlideShowName(BSTR SlideShowName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpeakerNotes(Office_xp::MsoTriState* SpeakerNotes/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_SpeakerNotes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpeakerNotes(Office_xp::MsoTriState SpeakerNotes/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileName(BSTR* FileName/*[out,retval]*/);
  BSTR            __fastcall get_FileName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FileName(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Publish();

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::PpHTMLVersion HTMLVersion = {read = get_HTMLVersion, write = set_HTMLVersion};
  __property   Powerpoint_xp::PpPublishSourceType SourceType = {read = get_SourceType, write = set_SourceType};
  __property   int             RangeStart = {read = get_RangeStart, write = set_RangeStart};
  __property   int             RangeEnd = {read = get_RangeEnd, write = set_RangeEnd};
  __property   BSTR            SlideShowName = {read = get_SlideShowName};
  __property   Office_xp::MsoTriState SpeakerNotes = {read = get_SpeakerNotes, write = set_SpeakerNotes};
  __property   BSTR            FileName = {read = get_FileName};
};
typedef PublishObjectDispT<PublishObject> PublishObjectDisp;

typedef TComInterface<MasterEvents>  TCOMMasterEvents;

// *********************************************************************//
// SmartIntf: TCOM_PowerRex
// Interface: _PowerRex
// *********************************************************************//
template <class T /* _PowerRex */ >
class TCOM_PowerRexT : public TComInterface<_PowerRex>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_PowerRexT() {}
  TCOM_PowerRexT(_PowerRex *intf, bool addRef = false) : TComInterface<_PowerRex>(intf, addRef) {}
  TCOM_PowerRexT(const TCOM_PowerRexT& src) : TComInterface<_PowerRex>(src) {}
  TCOM_PowerRexT& operator=(const TCOM_PowerRexT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall OnAsfEncoderEvent(VARIANT erorCode/*[in]*/, 
                                               VARIANT bstrErrorDesc/*[in]*/);

};
typedef TCOM_PowerRexT<_PowerRex> TCOM_PowerRex;

// *********************************************************************//
// DispIntf:  _PowerRex
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D3-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class _PowerRexDispT : public TAutoDriver<_PowerRex>
{
public:
  _PowerRexDispT(){}

  _PowerRexDispT(_PowerRex *pintf)
  {
    TAutoDriver<_PowerRex>::Bind(pintf, false);
  }

  _PowerRexDispT(_PowerRexPtr pintf)
  {
    TAutoDriver<_PowerRex>::Bind(pintf, true);
  }

  _PowerRexDispT& operator=(_PowerRex *pintf)
  {
    TAutoDriver<_PowerRex>::Bind(pintf, false);
    return *this;
  }

  _PowerRexDispT& operator=(_PowerRexPtr pintf)
  {
    TAutoDriver<_PowerRex>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PowerRex));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PowerRex);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall OnAsfEncoderEvent(VARIANT erorCode/*[in]*/, 
                                                          VARIANT bstrErrorDesc/*[in]*/);

};
typedef _PowerRexDispT<_PowerRex> _PowerRexDisp;

typedef TComInterface<Comments>  TCOMComments;

// *********************************************************************//
// DispIntf:  Comments
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D4-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class CommentsDispT : public TAutoDriver<Comments>
{
public:
  CommentsDispT(){}

  CommentsDispT(Comments *pintf)
  {
    TAutoDriver<Comments>::Bind(pintf, false);
  }

  CommentsDispT(CommentsPtr pintf)
  {
    TAutoDriver<Comments>::Bind(pintf, true);
  }

  CommentsDispT& operator=(Comments *pintf)
  {
    TAutoDriver<Comments>::Bind(pintf, false);
    return *this;
  }

  CommentsDispT& operator=(CommentsPtr pintf)
  {
    TAutoDriver<Comments>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, 
                                             Powerpoint_xp::Comment** Item/*[out,retval]*/);
  Powerpoint_xp::Comment* __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(float Left/*[in]*/, float Top/*[in]*/, 
                                            BSTR Author/*[in]*/, BSTR AuthorInitials/*[in]*/, 
                                            BSTR Text/*[in]*/, 
                                            Powerpoint_xp::Comment** Add/*[out,retval]*/);
  Powerpoint_xp::Comment* __fastcall Add(float Left/*[in]*/, float Top/*[in]*/, BSTR Author/*[in]*/, 
                                         BSTR AuthorInitials/*[in]*/, BSTR Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef CommentsDispT<Comments> CommentsDisp;

typedef TComInterface<Comment>  TCOMComment;

// *********************************************************************//
// DispIntf:  Comment
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D5-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class CommentDispT : public TAutoDriver<Comment>
{
public:
  CommentDispT(){}

  CommentDispT(Comment *pintf)
  {
    TAutoDriver<Comment>::Bind(pintf, false);
  }

  CommentDispT(CommentPtr pintf)
  {
    TAutoDriver<Comment>::Bind(pintf, true);
  }

  CommentDispT& operator=(Comment *pintf)
  {
    TAutoDriver<Comment>::Bind(pintf, false);
    return *this;
  }

  CommentDispT& operator=(CommentPtr pintf)
  {
    TAutoDriver<Comment>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Author(BSTR* Author/*[out,retval]*/);
  BSTR            __fastcall get_Author(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AuthorInitials(BSTR* AuthorInitials/*[out,retval]*/);
  BSTR            __fastcall get_AuthorInitials(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DateTime(DATE* DateTime/*[out,retval]*/);
  DATE            __fastcall get_DateTime(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AuthorIndex(int* AuthorIndex/*[out,retval]*/);
  int             __fastcall get_AuthorIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Author = {read = get_Author};
  __property   BSTR            AuthorInitials = {read = get_AuthorInitials};
  __property   BSTR            Text = {read = get_Text};
  __property   DATE            DateTime = {read = get_DateTime};
  __property   int             AuthorIndex = {read = get_AuthorIndex};
  __property   float           Left = {read = get_Left};
  __property   float           Top = {read = get_Top};
};
typedef CommentDispT<Comment> CommentDisp;

typedef TComInterface<Designs>  TCOMDesigns;

// *********************************************************************//
// DispIntf:  Designs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D6-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class DesignsDispT : public TAutoDriver<Designs>
{
public:
  DesignsDispT(){}

  DesignsDispT(Designs *pintf)
  {
    TAutoDriver<Designs>::Bind(pintf, false);
  }

  DesignsDispT(DesignsPtr pintf)
  {
    TAutoDriver<Designs>::Bind(pintf, true);
  }

  DesignsDispT& operator=(Designs *pintf)
  {
    TAutoDriver<Designs>::Bind(pintf, false);
    return *this;
  }

  DesignsDispT& operator=(DesignsPtr pintf)
  {
    TAutoDriver<Designs>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT Index/*[in]*/, 
                                             Powerpoint_xp::Design** Item/*[out,retval]*/);
  Powerpoint_xp::Design* __fastcall Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR designName/*[in]*/, int Index/*[in,def,opt]*/, 
                                            Powerpoint_xp::Design** Add/*[out,retval]*/);
  Powerpoint_xp::Design* __fastcall Add(BSTR designName/*[in]*/, int Index/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Load(BSTR TemplateName/*[in]*/, int Index/*[in,def,opt]*/, 
                                             Powerpoint_xp::Design** Load/*[out,retval]*/);
  Powerpoint_xp::Design* __fastcall Load(BSTR TemplateName/*[in]*/, int Index/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clone(Powerpoint_xp::Design* pOriginal/*[in]*/, 
                                              int Index/*[in,def,opt]*/, 
                                              Powerpoint_xp::Design** Clone/*[out,retval]*/);
  Powerpoint_xp::Design* __fastcall Clone(Powerpoint_xp::Design* pOriginal/*[in]*/, 
                                          int Index/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef DesignsDispT<Designs> DesignsDisp;

typedef TComInterface<Design>  TCOMDesign;

// *********************************************************************//
// DispIntf:  Design
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D7-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class DesignDispT : public TAutoDriver<Design>
{
public:
  DesignDispT(){}

  DesignDispT(Design *pintf)
  {
    TAutoDriver<Design>::Bind(pintf, false);
  }

  DesignDispT(DesignPtr pintf)
  {
    TAutoDriver<Design>::Bind(pintf, true);
  }

  DesignDispT& operator=(Design *pintf)
  {
    TAutoDriver<Design>::Bind(pintf, false);
    return *this;
  }

  DesignDispT& operator=(DesignPtr pintf)
  {
    TAutoDriver<Design>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideMaster(Powerpoint_xp::_Master** SlideMaster/*[out,retval]*/);
  Powerpoint_xp::_Master* __fastcall get_SlideMaster(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TitleMaster(Powerpoint_xp::_Master** TitleMaster/*[out,retval]*/);
  Powerpoint_xp::_Master* __fastcall get_TitleMaster(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasTitleMaster(Office_xp::MsoTriState* HasTitleMaster/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_HasTitleMaster(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTitleMaster(Powerpoint_xp::_Master** TitleMaster/*[out,retval]*/);
  Powerpoint_xp::_Master* __fastcall AddTitleMaster(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(int* Index/*[out,retval]*/);
  int             __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Preserved(Office_xp::MsoTriState* Preserved/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Preserved(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Preserved(Office_xp::MsoTriState Preserved/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MoveTo(int toPos/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::_Master* SlideMaster = {read = get_SlideMaster};
  __property   Powerpoint_xp::_Master* TitleMaster = {read = get_TitleMaster};
  __property   Office_xp::MsoTriState HasTitleMaster = {read = get_HasTitleMaster};
  __property   int             Index = {read = get_Index};
  __property   BSTR            Name = {read = get_Name};
  __property   Office_xp::MsoTriState Preserved = {read = get_Preserved, write = set_Preserved};
};
typedef DesignDispT<Design> DesignDisp;

typedef TComInterface<DiagramNode>  TCOMDiagramNode;

// *********************************************************************//
// DispIntf:  DiagramNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D8-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class DiagramNodeDispT : public TAutoDriver<DiagramNode>
{
public:
  DiagramNodeDispT(){}

  DiagramNodeDispT(DiagramNode *pintf)
  {
    TAutoDriver<DiagramNode>::Bind(pintf, false);
  }

  DiagramNodeDispT(DiagramNodePtr pintf)
  {
    TAutoDriver<DiagramNode>::Bind(pintf, true);
  }

  DiagramNodeDispT& operator=(DiagramNode *pintf)
  {
    TAutoDriver<DiagramNode>::Bind(pintf, false);
    return *this;
  }

  DiagramNodeDispT& operator=(DiagramNodePtr pintf)
  {
    TAutoDriver<DiagramNode>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddNode(Office_xp::MsoRelativeNodePosition Pos/*[in,def,opt]*/
                                                , 
                                                Office_xp::MsoDiagramNodeType NodeType/*[in,def,opt]*/
                                                , 
                                                Powerpoint_xp::DiagramNode** NewNode/*[out,retval]*/);
  Powerpoint_xp::DiagramNode* __fastcall AddNode(Office_xp::MsoRelativeNodePosition Pos/*[in,def,opt]*/, 
                                                 Office_xp::MsoDiagramNodeType NodeType/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MoveNode(Powerpoint_xp::DiagramNode* TargetNode/*[in]*/, 
                                                 Office_xp::MsoRelativeNodePosition Pos/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ReplaceNode(Powerpoint_xp::DiagramNode* TargetNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SwapNode(Powerpoint_xp::DiagramNode* TargetNode/*[in]*/, 
                                                 VARIANT_BOOL SwapChildren/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CloneNode(VARIANT_BOOL CopyChildren/*[in]*/, 
                                                  Powerpoint_xp::DiagramNode* TargetNode/*[in]*/, 
                                                  Office_xp::MsoRelativeNodePosition Pos/*[in,def,opt]*/
                                                  , 
                                                  Powerpoint_xp::DiagramNode** Node/*[out,retval]*/);
  Powerpoint_xp::DiagramNode* __fastcall CloneNode(VARIANT_BOOL CopyChildren/*[in]*/, 
                                                   Powerpoint_xp::DiagramNode* TargetNode/*[in]*/, 
                                                   Office_xp::MsoRelativeNodePosition Pos/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall TransferChildren(Powerpoint_xp::DiagramNode* ReceivingNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NextNode(Powerpoint_xp::DiagramNode** NextNode/*[out,retval]*/);
  Powerpoint_xp::DiagramNode* __fastcall NextNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PrevNode(Powerpoint_xp::DiagramNode** PrevNode/*[out,retval]*/);
  Powerpoint_xp::DiagramNode* __fastcall PrevNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Children(Powerpoint_xp::DiagramNodeChildren** Children/*[out,retval]*/);
  Powerpoint_xp::DiagramNodeChildren* __fastcall get_Children(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shape(Powerpoint_xp::Shape** Shape/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall get_Shape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Root(Powerpoint_xp::DiagramNode** Root/*[out,retval]*/);
  Powerpoint_xp::DiagramNode* __fastcall get_Root(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Diagram(Powerpoint_xp::Diagram** Diagram/*[out,retval]*/);
  Powerpoint_xp::Diagram* __fastcall get_Diagram(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Layout(Office_xp::MsoOrgChartLayoutType* Type/*[out,retval]*/);
  Office_xp::MsoOrgChartLayoutType __fastcall get_Layout(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Layout(Office_xp::MsoOrgChartLayoutType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextShape(Powerpoint_xp::Shape** Shape/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall get_TextShape(void);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::DiagramNodeChildren* Children = {read = get_Children};
  __property   Powerpoint_xp::Shape* Shape = {read = get_Shape};
  __property   Powerpoint_xp::DiagramNode* Root = {read = get_Root};
  __property   Powerpoint_xp::Diagram* Diagram = {read = get_Diagram};
  __property   Office_xp::MsoOrgChartLayoutType Layout = {read = get_Layout, write = set_Layout};
  __property   Powerpoint_xp::Shape* TextShape = {read = get_TextShape};
};
typedef DiagramNodeDispT<DiagramNode> DiagramNodeDisp;

typedef TComInterface<DiagramNodeChildren>  TCOMDiagramNodeChildren;

// *********************************************************************//
// DispIntf:  DiagramNodeChildren
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class DiagramNodeChildrenDispT : public TAutoDriver<DiagramNodeChildren>
{
public:
  DiagramNodeChildrenDispT(){}

  DiagramNodeChildrenDispT(DiagramNodeChildren *pintf)
  {
    TAutoDriver<DiagramNodeChildren>::Bind(pintf, false);
  }

  DiagramNodeChildrenDispT(DiagramNodeChildrenPtr pintf)
  {
    TAutoDriver<DiagramNodeChildren>::Bind(pintf, true);
  }

  DiagramNodeChildrenDispT& operator=(DiagramNodeChildren *pintf)
  {
    TAutoDriver<DiagramNodeChildren>::Bind(pintf, false);
    return *this;
  }

  DiagramNodeChildrenDispT& operator=(DiagramNodeChildrenPtr pintf)
  {
    TAutoDriver<DiagramNodeChildren>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT Index/*[in]*/, 
                                             Powerpoint_xp::DiagramNode** Node/*[out,retval]*/);
  Powerpoint_xp::DiagramNode* __fastcall Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddNode(VARIANT Index/*[in,def,opt]*/, 
                                                Office_xp::MsoDiagramNodeType NodeType/*[in,def,opt]*/
                                                , 
                                                Powerpoint_xp::DiagramNode** NewNode/*[out,retval]*/);
  Powerpoint_xp::DiagramNode* __fastcall AddNode(VARIANT Index/*[in,def,opt]*/, 
                                                 Office_xp::MsoDiagramNodeType NodeType/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SelectAll();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* iDiagramNodes/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FirstChild(Powerpoint_xp::DiagramNode** First/*[out,retval]*/);
  Powerpoint_xp::DiagramNode* __fastcall get_FirstChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LastChild(Powerpoint_xp::DiagramNode** Last/*[out,retval]*/);
  Powerpoint_xp::DiagramNode* __fastcall get_LastChild(void);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   Powerpoint_xp::DiagramNode* FirstChild = {read = get_FirstChild};
  __property   Powerpoint_xp::DiagramNode* LastChild = {read = get_LastChild};
};
typedef DiagramNodeChildrenDispT<DiagramNodeChildren> DiagramNodeChildrenDisp;

typedef TComInterface<DiagramNodes>  TCOMDiagramNodes;

// *********************************************************************//
// DispIntf:  DiagramNodes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934DA-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class DiagramNodesDispT : public TAutoDriver<DiagramNodes>
{
public:
  DiagramNodesDispT(){}

  DiagramNodesDispT(DiagramNodes *pintf)
  {
    TAutoDriver<DiagramNodes>::Bind(pintf, false);
  }

  DiagramNodesDispT(DiagramNodesPtr pintf)
  {
    TAutoDriver<DiagramNodes>::Bind(pintf, true);
  }

  DiagramNodesDispT& operator=(DiagramNodes *pintf)
  {
    TAutoDriver<DiagramNodes>::Bind(pintf, false);
    return *this;
  }

  DiagramNodesDispT& operator=(DiagramNodesPtr pintf)
  {
    TAutoDriver<DiagramNodes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT Index/*[in]*/, 
                                             Powerpoint_xp::DiagramNode** ppdn/*[out,retval]*/);
  Powerpoint_xp::DiagramNode* __fastcall Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SelectAll();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* iDiagramNodes/*[out,retval]*/);
  int             __fastcall get_Count(void);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
};
typedef DiagramNodesDispT<DiagramNodes> DiagramNodesDisp;

typedef TComInterface<Diagram>  TCOMDiagram;

// *********************************************************************//
// DispIntf:  Diagram
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934DB-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class DiagramDispT : public TAutoDriver<Diagram>
{
public:
  DiagramDispT(){}

  DiagramDispT(Diagram *pintf)
  {
    TAutoDriver<Diagram>::Bind(pintf, false);
  }

  DiagramDispT(DiagramPtr pintf)
  {
    TAutoDriver<Diagram>::Bind(pintf, true);
  }

  DiagramDispT& operator=(Diagram *pintf)
  {
    TAutoDriver<Diagram>::Bind(pintf, false);
    return *this;
  }

  DiagramDispT& operator=(DiagramPtr pintf)
  {
    TAutoDriver<Diagram>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Nodes(Powerpoint_xp::DiagramNodes** Nodes/*[out,retval]*/);
  Powerpoint_xp::DiagramNodes* __fastcall get_Nodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_xp::MsoDiagramType* Type/*[out,retval]*/);
  Office_xp::MsoDiagramType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoLayout(Office_xp::MsoTriState* AutoLayout/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_AutoLayout(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoLayout(Office_xp::MsoTriState AutoLayout/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Reverse(Office_xp::MsoTriState* Reverse/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Reverse(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Reverse(Office_xp::MsoTriState Reverse/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoFormat(Office_xp::MsoTriState* AutoFormat/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_AutoFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoFormat(Office_xp::MsoTriState AutoFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Convert(Office_xp::MsoDiagramType Type/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::DiagramNodes* Nodes = {read = get_Nodes};
  __property   Office_xp::MsoDiagramType Type = {read = get_Type};
  __property   Office_xp::MsoTriState AutoLayout = {read = get_AutoLayout, write = set_AutoLayout};
  __property   Office_xp::MsoTriState Reverse = {read = get_Reverse, write = set_Reverse};
  __property   Office_xp::MsoTriState AutoFormat = {read = get_AutoFormat, write = set_AutoFormat};
};
typedef DiagramDispT<Diagram> DiagramDisp;

typedef TComInterface<TimeLine>  TCOMTimeLine;

// *********************************************************************//
// DispIntf:  TimeLine
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934DC-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TimeLineDispT : public TAutoDriver<TimeLine>
{
public:
  TimeLineDispT(){}

  TimeLineDispT(TimeLine *pintf)
  {
    TAutoDriver<TimeLine>::Bind(pintf, false);
  }

  TimeLineDispT(TimeLinePtr pintf)
  {
    TAutoDriver<TimeLine>::Bind(pintf, true);
  }

  TimeLineDispT& operator=(TimeLine *pintf)
  {
    TAutoDriver<TimeLine>::Bind(pintf, false);
    return *this;
  }

  TimeLineDispT& operator=(TimeLinePtr pintf)
  {
    TAutoDriver<TimeLine>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MainSequence(Powerpoint_xp::Sequence** MainSequence/*[out,retval]*/);
  Powerpoint_xp::Sequence* __fastcall get_MainSequence(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InteractiveSequences(Powerpoint_xp::Sequences** InteractiveSequences/*[out,retval]*/);
  Powerpoint_xp::Sequences* __fastcall get_InteractiveSequences(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Sequence* MainSequence = {read = get_MainSequence};
  __property   Powerpoint_xp::Sequences* InteractiveSequences = {read = get_InteractiveSequences};
};
typedef TimeLineDispT<TimeLine> TimeLineDisp;

typedef TComInterface<Sequences>  TCOMSequences;

// *********************************************************************//
// DispIntf:  Sequences
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934DD-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SequencesDispT : public TAutoDriver<Sequences>
{
public:
  SequencesDispT(){}

  SequencesDispT(Sequences *pintf)
  {
    TAutoDriver<Sequences>::Bind(pintf, false);
  }

  SequencesDispT(SequencesPtr pintf)
  {
    TAutoDriver<Sequences>::Bind(pintf, true);
  }

  SequencesDispT& operator=(Sequences *pintf)
  {
    TAutoDriver<Sequences>::Bind(pintf, false);
    return *this;
  }

  SequencesDispT& operator=(SequencesPtr pintf)
  {
    TAutoDriver<Sequences>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, 
                                             Powerpoint_xp::Sequence** Item/*[out,retval]*/);
  Powerpoint_xp::Sequence* __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(int Index/*[in,def,opt]*/, 
                                            Powerpoint_xp::Sequence** Add/*[out,retval]*/);
  Powerpoint_xp::Sequence* __fastcall Add(int Index/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef SequencesDispT<Sequences> SequencesDisp;

typedef TComInterface<Sequence>  TCOMSequence;

// *********************************************************************//
// DispIntf:  Sequence
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934DE-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SequenceDispT : public TAutoDriver<Sequence>
{
public:
  SequenceDispT(){}

  SequenceDispT(Sequence *pintf)
  {
    TAutoDriver<Sequence>::Bind(pintf, false);
  }

  SequenceDispT(SequencePtr pintf)
  {
    TAutoDriver<Sequence>::Bind(pintf, true);
  }

  SequenceDispT& operator=(Sequence *pintf)
  {
    TAutoDriver<Sequence>::Bind(pintf, false);
    return *this;
  }

  SequenceDispT& operator=(SequencePtr pintf)
  {
    TAutoDriver<Sequence>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, 
                                             Powerpoint_xp::Effect** Item/*[out,retval]*/);
  Powerpoint_xp::Effect* __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddEffect(Powerpoint_xp::Shape* Shape/*[in]*/, 
                                                  Powerpoint_xp::MsoAnimEffect effectId/*[in]*/, 
                                                  Powerpoint_xp::MsoAnimateByLevel Level/*[in,def,opt]*/
                                                  , 
                                                  Powerpoint_xp::MsoAnimTriggerType trigger/*[in,def,opt]*/
                                                  , int Index/*[in,def,opt]*/, 
                                                  Powerpoint_xp::Effect** Effect/*[out,retval]*/);
  Powerpoint_xp::Effect* __fastcall AddEffect(Powerpoint_xp::Shape* Shape/*[in]*/, 
                                              Powerpoint_xp::MsoAnimEffect effectId/*[in]*/, 
                                              Powerpoint_xp::MsoAnimateByLevel Level/*[in,def,opt]*/, 
                                              Powerpoint_xp::MsoAnimTriggerType trigger/*[in,def,opt]*/, 
                                              int Index/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clone(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                              int Index/*[in,def,opt]*/, 
                                              Powerpoint_xp::Effect** Clone/*[out,retval]*/);
  Powerpoint_xp::Effect* __fastcall Clone(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                          int Index/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindFirstAnimationFor(Powerpoint_xp::Shape* Shape/*[in]*/, 
                                                              Powerpoint_xp::Effect** FindFirstAnimationFor/*[out,retval]*/);
  Powerpoint_xp::Effect* __fastcall FindFirstAnimationFor(Powerpoint_xp::Shape* Shape/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindFirstAnimationForClick(int click/*[in]*/, 
                                                                   Powerpoint_xp::Effect** FindFirstAnimationForClick/*[out,retval]*/);
  Powerpoint_xp::Effect* __fastcall FindFirstAnimationForClick(int click/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ConvertToBuildLevel(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                                            Powerpoint_xp::MsoAnimateByLevel Level/*[in]*/
                                                            , 
                                                            Powerpoint_xp::Effect** ConvertToBuildLevel/*[out,retval]*/);
  Powerpoint_xp::Effect* __fastcall ConvertToBuildLevel(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                                        Powerpoint_xp::MsoAnimateByLevel Level/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ConvertToAfterEffect(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                                             Powerpoint_xp::MsoAnimAfterEffect After/*[in]*/
                                                             , 
                                                             Office_xp::MsoRGBType DimColor/*[in,def,opt]*/
                                                             , 
                                                             Powerpoint_xp::PpColorSchemeIndex DimSchemeColor/*[in,def,opt]*/
                                                             , 
                                                             Powerpoint_xp::Effect** ConvertToAfterEffect/*[out,retval]*/);
  Powerpoint_xp::Effect* __fastcall ConvertToAfterEffect(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                                         Powerpoint_xp::MsoAnimAfterEffect After/*[in]*/, 
                                                         Office_xp::MsoRGBType DimColor/*[in,def,opt]*/, 
                                                         Powerpoint_xp::PpColorSchemeIndex DimSchemeColor/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ConvertToAnimateBackground(Powerpoint_xp::Effect* Effect/*[in]*/
                                                                   , 
                                                                   Office_xp::MsoTriState AnimateBackground/*[in]*/
                                                                   , 
                                                                   Powerpoint_xp::Effect** ConvertToAnimateBackground/*[out,retval]*/);
  Powerpoint_xp::Effect* __fastcall ConvertToAnimateBackground(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                                               Office_xp::MsoTriState AnimateBackground/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ConvertToAnimateInReverse(Powerpoint_xp::Effect* Effect/*[in]*/
                                                                  , 
                                                                  Office_xp::MsoTriState animateInReverse/*[in]*/
                                                                  , 
                                                                  Powerpoint_xp::Effect** ConvertToAnimateInReverse/*[out,retval]*/);
  Powerpoint_xp::Effect* __fastcall ConvertToAnimateInReverse(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                                              Office_xp::MsoTriState animateInReverse/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ConvertToTextUnitEffect(Powerpoint_xp::Effect* Effect/*[in]*/
                                                                , 
                                                                Powerpoint_xp::MsoAnimTextUnitEffect unitEffect/*[in]*/
                                                                , 
                                                                Powerpoint_xp::Effect** ConvertToTextUnitEffect/*[out,retval]*/);
  Powerpoint_xp::Effect* __fastcall ConvertToTextUnitEffect(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                                            Powerpoint_xp::MsoAnimTextUnitEffect unitEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef SequenceDispT<Sequence> SequenceDisp;

typedef TComInterface<Effect>  TCOMEffect;

// *********************************************************************//
// DispIntf:  Effect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934DF-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class EffectDispT : public TAutoDriver<Effect>
{
public:
  EffectDispT(){}

  EffectDispT(Effect *pintf)
  {
    TAutoDriver<Effect>::Bind(pintf, false);
  }

  EffectDispT(EffectPtr pintf)
  {
    TAutoDriver<Effect>::Bind(pintf, true);
  }

  EffectDispT& operator=(Effect *pintf)
  {
    TAutoDriver<Effect>::Bind(pintf, false);
    return *this;
  }

  EffectDispT& operator=(EffectPtr pintf)
  {
    TAutoDriver<Effect>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shape(Powerpoint_xp::Shape** Shape/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall get_Shape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Shape(Powerpoint_xp::Shape* Shape/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MoveTo(int toPos/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MoveBefore(Powerpoint_xp::Effect* Effect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MoveAfter(Powerpoint_xp::Effect* Effect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(int* Index/*[out,retval]*/);
  int             __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Timing(Powerpoint_xp::Timing** Timing/*[out,retval]*/);
  Powerpoint_xp::Timing* __fastcall get_Timing(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EffectType(Powerpoint_xp::MsoAnimEffect* EffectType/*[out,retval]*/);
  Powerpoint_xp::MsoAnimEffect __fastcall get_EffectType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EffectType(Powerpoint_xp::MsoAnimEffect EffectType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EffectParameters(Powerpoint_xp::EffectParameters** EffectParameters/*[out,retval]*/);
  Powerpoint_xp::EffectParameters* __fastcall get_EffectParameters(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextRangeStart(int* TextRangeStart/*[out,retval]*/);
  int             __fastcall get_TextRangeStart(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextRangeLength(int* TextRangeLength/*[out,retval]*/);
  int             __fastcall get_TextRangeLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Paragraph(int* Paragraph/*[out,retval]*/);
  int             __fastcall get_Paragraph(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Paragraph(int Paragraph/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayName(BSTR* DisplayName/*[out,retval]*/);
  BSTR            __fastcall get_DisplayName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Exit(Office_xp::MsoTriState* Exit/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Exit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Exit(Office_xp::MsoTriState Exit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Behaviors(Powerpoint_xp::AnimationBehaviors** Behaviors/*[out,retval]*/);
  Powerpoint_xp::AnimationBehaviors* __fastcall get_Behaviors(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EffectInformation(Powerpoint_xp::EffectInformation** EffectInformation/*[out,retval]*/);
  Powerpoint_xp::EffectInformation* __fastcall get_EffectInformation(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::Shape* Shape = {read = get_Shape, write = set_Shape};
  __property   int             Index = {read = get_Index};
  __property   Powerpoint_xp::Timing* Timing = {read = get_Timing};
  __property   Powerpoint_xp::MsoAnimEffect EffectType = {read = get_EffectType, write = set_EffectType};
  __property   Powerpoint_xp::EffectParameters* EffectParameters = {read = get_EffectParameters};
  __property   int             TextRangeStart = {read = get_TextRangeStart};
  __property   int             TextRangeLength = {read = get_TextRangeLength};
  __property   int             Paragraph = {read = get_Paragraph, write = set_Paragraph};
  __property   BSTR            DisplayName = {read = get_DisplayName};
  __property   Office_xp::MsoTriState Exit = {read = get_Exit, write = set_Exit};
  __property   Powerpoint_xp::AnimationBehaviors* Behaviors = {read = get_Behaviors};
  __property   Powerpoint_xp::EffectInformation* EffectInformation = {read = get_EffectInformation};
};
typedef EffectDispT<Effect> EffectDisp;

typedef TComInterface<Timing>  TCOMTiming;

// *********************************************************************//
// DispIntf:  Timing
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TimingDispT : public TAutoDriver<Timing>
{
public:
  TimingDispT(){}

  TimingDispT(Timing *pintf)
  {
    TAutoDriver<Timing>::Bind(pintf, false);
  }

  TimingDispT(TimingPtr pintf)
  {
    TAutoDriver<Timing>::Bind(pintf, true);
  }

  TimingDispT& operator=(Timing *pintf)
  {
    TAutoDriver<Timing>::Bind(pintf, false);
    return *this;
  }

  TimingDispT& operator=(TimingPtr pintf)
  {
    TAutoDriver<Timing>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Duration(float* Duration/*[out,retval]*/);
  float           __fastcall get_Duration(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Duration(float Duration/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TriggerType(Powerpoint_xp::MsoAnimTriggerType* TriggerType/*[out,retval]*/);
  Powerpoint_xp::MsoAnimTriggerType __fastcall get_TriggerType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TriggerType(Powerpoint_xp::MsoAnimTriggerType TriggerType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TriggerDelayTime(float* TriggerDelayTime/*[out,retval]*/);
  float           __fastcall get_TriggerDelayTime(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TriggerDelayTime(float TriggerDelayTime/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TriggerShape(Powerpoint_xp::Shape** TriggerShape/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall get_TriggerShape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TriggerShape(Powerpoint_xp::Shape* TriggerShape/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RepeatCount(int* RepeatCount/*[out,retval]*/);
  int             __fastcall get_RepeatCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RepeatCount(int RepeatCount/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RepeatDuration(float* RepeatDuration/*[out,retval]*/);
  float           __fastcall get_RepeatDuration(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RepeatDuration(float RepeatDuration/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Speed(float* Speed/*[out,retval]*/);
  float           __fastcall get_Speed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Speed(float Speed/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Accelerate(float* Accelerate/*[out,retval]*/);
  float           __fastcall get_Accelerate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Accelerate(float Accelerate/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Decelerate(float* Decelerate/*[out,retval]*/);
  float           __fastcall get_Decelerate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Decelerate(float Decelerate/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoReverse(Office_xp::MsoTriState* AutoReverse/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_AutoReverse(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoReverse(Office_xp::MsoTriState AutoReverse/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SmoothStart(Office_xp::MsoTriState* SmoothStart/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_SmoothStart(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SmoothStart(Office_xp::MsoTriState SmoothStart/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SmoothEnd(Office_xp::MsoTriState* SmoothEnd/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_SmoothEnd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SmoothEnd(Office_xp::MsoTriState SmoothEnd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RewindAtEnd(Office_xp::MsoTriState* RewindAtEnd/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_RewindAtEnd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RewindAtEnd(Office_xp::MsoTriState RewindAtEnd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Restart(Powerpoint_xp::MsoAnimEffectRestart* Restart/*[out,retval]*/);
  Powerpoint_xp::MsoAnimEffectRestart __fastcall get_Restart(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Restart(Powerpoint_xp::MsoAnimEffectRestart Restart/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Duration = {read = get_Duration, write = set_Duration};
  __property   Powerpoint_xp::MsoAnimTriggerType TriggerType = {read = get_TriggerType, write = set_TriggerType};
  __property   float           TriggerDelayTime = {read = get_TriggerDelayTime, write = set_TriggerDelayTime};
  __property   Powerpoint_xp::Shape* TriggerShape = {read = get_TriggerShape, write = set_TriggerShape};
  __property   int             RepeatCount = {read = get_RepeatCount, write = set_RepeatCount};
  __property   float           RepeatDuration = {read = get_RepeatDuration, write = set_RepeatDuration};
  __property   float           Speed = {read = get_Speed, write = set_Speed};
  __property   float           Accelerate = {read = get_Accelerate, write = set_Accelerate};
  __property   float           Decelerate = {read = get_Decelerate, write = set_Decelerate};
  __property   Office_xp::MsoTriState AutoReverse = {read = get_AutoReverse, write = set_AutoReverse};
  __property   Office_xp::MsoTriState SmoothStart = {read = get_SmoothStart, write = set_SmoothStart};
  __property   Office_xp::MsoTriState SmoothEnd = {read = get_SmoothEnd, write = set_SmoothEnd};
  __property   Office_xp::MsoTriState RewindAtEnd = {read = get_RewindAtEnd, write = set_RewindAtEnd};
  __property   Powerpoint_xp::MsoAnimEffectRestart Restart = {read = get_Restart, write = set_Restart};
};
typedef TimingDispT<Timing> TimingDisp;

typedef TComInterface<EffectParameters>  TCOMEffectParameters;

// *********************************************************************//
// DispIntf:  EffectParameters
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E1-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class EffectParametersDispT : public TAutoDriver<EffectParameters>
{
public:
  EffectParametersDispT(){}

  EffectParametersDispT(EffectParameters *pintf)
  {
    TAutoDriver<EffectParameters>::Bind(pintf, false);
  }

  EffectParametersDispT(EffectParametersPtr pintf)
  {
    TAutoDriver<EffectParameters>::Bind(pintf, true);
  }

  EffectParametersDispT& operator=(EffectParameters *pintf)
  {
    TAutoDriver<EffectParameters>::Bind(pintf, false);
    return *this;
  }

  EffectParametersDispT& operator=(EffectParametersPtr pintf)
  {
    TAutoDriver<EffectParameters>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Direction(Powerpoint_xp::MsoAnimDirection* Direction/*[out,retval]*/);
  Powerpoint_xp::MsoAnimDirection __fastcall get_Direction(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Direction(Powerpoint_xp::MsoAnimDirection Direction/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Amount(float* Amount/*[out,retval]*/);
  float           __fastcall get_Amount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Amount(float Amount/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Size(float* Size/*[out,retval]*/);
  float           __fastcall get_Size(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Size(float Size/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Color2(Powerpoint_xp::ColorFormat** Color2/*[out,retval]*/);
  Powerpoint_xp::ColorFormat* __fastcall get_Color2(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Relative(Office_xp::MsoTriState* Relative/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Relative(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Relative(Office_xp::MsoTriState Relative/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR FontName/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::MsoAnimDirection Direction = {read = get_Direction, write = set_Direction};
  __property   float           Amount = {read = get_Amount, write = set_Amount};
  __property   float           Size = {read = get_Size, write = set_Size};
  __property   Powerpoint_xp::ColorFormat* Color2 = {read = get_Color2};
  __property   Office_xp::MsoTriState Relative = {read = get_Relative, write = set_Relative};
  __property   BSTR            FontName = {read = get_FontName};
};
typedef EffectParametersDispT<EffectParameters> EffectParametersDisp;

typedef TComInterface<EffectInformation>  TCOMEffectInformation;

// *********************************************************************//
// DispIntf:  EffectInformation
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E2-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class EffectInformationDispT : public TAutoDriver<EffectInformation>
{
public:
  EffectInformationDispT(){}

  EffectInformationDispT(EffectInformation *pintf)
  {
    TAutoDriver<EffectInformation>::Bind(pintf, false);
  }

  EffectInformationDispT(EffectInformationPtr pintf)
  {
    TAutoDriver<EffectInformation>::Bind(pintf, true);
  }

  EffectInformationDispT& operator=(EffectInformation *pintf)
  {
    TAutoDriver<EffectInformation>::Bind(pintf, false);
    return *this;
  }

  EffectInformationDispT& operator=(EffectInformationPtr pintf)
  {
    TAutoDriver<EffectInformation>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AfterEffect(Powerpoint_xp::MsoAnimAfterEffect* AfterEffect/*[out,retval]*/);
  Powerpoint_xp::MsoAnimAfterEffect __fastcall get_AfterEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AnimateBackground(Office_xp::MsoTriState* AnimateBackground/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_AnimateBackground(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AnimateTextInReverse(Office_xp::MsoTriState* AnimateTextInReverse/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_AnimateTextInReverse(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuildByLevelEffect(Powerpoint_xp::MsoAnimateByLevel* BuildByLevelEffect/*[out,retval]*/);
  Powerpoint_xp::MsoAnimateByLevel __fastcall get_BuildByLevelEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Dim(Powerpoint_xp::ColorFormat** Dim/*[out,retval]*/);
  Powerpoint_xp::ColorFormat* __fastcall get_Dim(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PlaySettings(Powerpoint_xp::PlaySettings** PlaySettings/*[out,retval]*/);
  Powerpoint_xp::PlaySettings* __fastcall get_PlaySettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SoundEffect(Powerpoint_xp::SoundEffect** SoundEffect/*[out,retval]*/);
  Powerpoint_xp::SoundEffect* __fastcall get_SoundEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextUnitEffect(Powerpoint_xp::MsoAnimTextUnitEffect* TextUnitEffect/*[out,retval]*/);
  Powerpoint_xp::MsoAnimTextUnitEffect __fastcall get_TextUnitEffect(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::MsoAnimAfterEffect AfterEffect = {read = get_AfterEffect};
  __property   Office_xp::MsoTriState AnimateBackground = {read = get_AnimateBackground};
  __property   Office_xp::MsoTriState AnimateTextInReverse = {read = get_AnimateTextInReverse};
  __property   Powerpoint_xp::MsoAnimateByLevel BuildByLevelEffect = {read = get_BuildByLevelEffect};
  __property   Powerpoint_xp::ColorFormat* Dim = {read = get_Dim};
  __property   Powerpoint_xp::PlaySettings* PlaySettings = {read = get_PlaySettings};
  __property   Powerpoint_xp::SoundEffect* SoundEffect = {read = get_SoundEffect};
  __property   Powerpoint_xp::MsoAnimTextUnitEffect TextUnitEffect = {read = get_TextUnitEffect};
};
typedef EffectInformationDispT<EffectInformation> EffectInformationDisp;

typedef TComInterface<AnimationBehaviors>  TCOMAnimationBehaviors;

// *********************************************************************//
// DispIntf:  AnimationBehaviors
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E3-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class AnimationBehaviorsDispT : public TAutoDriver<AnimationBehaviors>
{
public:
  AnimationBehaviorsDispT(){}

  AnimationBehaviorsDispT(AnimationBehaviors *pintf)
  {
    TAutoDriver<AnimationBehaviors>::Bind(pintf, false);
  }

  AnimationBehaviorsDispT(AnimationBehaviorsPtr pintf)
  {
    TAutoDriver<AnimationBehaviors>::Bind(pintf, true);
  }

  AnimationBehaviorsDispT& operator=(AnimationBehaviors *pintf)
  {
    TAutoDriver<AnimationBehaviors>::Bind(pintf, false);
    return *this;
  }

  AnimationBehaviorsDispT& operator=(AnimationBehaviorsPtr pintf)
  {
    TAutoDriver<AnimationBehaviors>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, 
                                             Powerpoint_xp::AnimationBehavior** Item/*[out,retval]*/);
  Powerpoint_xp::AnimationBehavior* __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Powerpoint_xp::MsoAnimType Type/*[in]*/, 
                                            int Index/*[in,def,opt]*/, 
                                            Powerpoint_xp::AnimationBehavior** Add/*[out,retval]*/);
  Powerpoint_xp::AnimationBehavior* __fastcall Add(Powerpoint_xp::MsoAnimType Type/*[in]*/, 
                                                   int Index/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef AnimationBehaviorsDispT<AnimationBehaviors> AnimationBehaviorsDisp;

typedef TComInterface<AnimationBehavior>  TCOMAnimationBehavior;

// *********************************************************************//
// DispIntf:  AnimationBehavior
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E4-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class AnimationBehaviorDispT : public TAutoDriver<AnimationBehavior>
{
public:
  AnimationBehaviorDispT(){}

  AnimationBehaviorDispT(AnimationBehavior *pintf)
  {
    TAutoDriver<AnimationBehavior>::Bind(pintf, false);
  }

  AnimationBehaviorDispT(AnimationBehaviorPtr pintf)
  {
    TAutoDriver<AnimationBehavior>::Bind(pintf, true);
  }

  AnimationBehaviorDispT& operator=(AnimationBehavior *pintf)
  {
    TAutoDriver<AnimationBehavior>::Bind(pintf, false);
    return *this;
  }

  AnimationBehaviorDispT& operator=(AnimationBehaviorPtr pintf)
  {
    TAutoDriver<AnimationBehavior>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Additive(Powerpoint_xp::MsoAnimAdditive* Additive/*[out,retval]*/);
  Powerpoint_xp::MsoAnimAdditive __fastcall get_Additive(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Additive(Powerpoint_xp::MsoAnimAdditive Additive/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Accumulate(Powerpoint_xp::MsoAnimAccumulate* Accumulate/*[out,retval]*/);
  Powerpoint_xp::MsoAnimAccumulate __fastcall get_Accumulate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Accumulate(Powerpoint_xp::MsoAnimAccumulate Accumulate/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Powerpoint_xp::MsoAnimType* Type/*[out,retval]*/);
  Powerpoint_xp::MsoAnimType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Powerpoint_xp::MsoAnimType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MotionEffect(Powerpoint_xp::MotionEffect** MotionEffect/*[out,retval]*/);
  Powerpoint_xp::MotionEffect* __fastcall get_MotionEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorEffect(Powerpoint_xp::ColorEffect** ColorEffect/*[out,retval]*/);
  Powerpoint_xp::ColorEffect* __fastcall get_ColorEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScaleEffect(Powerpoint_xp::ScaleEffect** ScaleEffect/*[out,retval]*/);
  Powerpoint_xp::ScaleEffect* __fastcall get_ScaleEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RotationEffect(Powerpoint_xp::RotationEffect** RotationEffect/*[out,retval]*/);
  Powerpoint_xp::RotationEffect* __fastcall get_RotationEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PropertyEffect(Powerpoint_xp::PropertyEffect** PropertyEffect/*[out,retval]*/);
  Powerpoint_xp::PropertyEffect* __fastcall get_PropertyEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Timing(Powerpoint_xp::Timing** Timing/*[out,retval]*/);
  Powerpoint_xp::Timing* __fastcall get_Timing(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandEffect(Powerpoint_xp::CommandEffect** CommandEffect/*[out,retval]*/);
  Powerpoint_xp::CommandEffect* __fastcall get_CommandEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FilterEffect(Powerpoint_xp::FilterEffect** FilterEffect/*[out,retval]*/);
  Powerpoint_xp::FilterEffect* __fastcall get_FilterEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SetEffect(Powerpoint_xp::SetEffect** SetEffect/*[out,retval]*/);
  Powerpoint_xp::SetEffect* __fastcall get_SetEffect(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::MsoAnimAdditive Additive = {read = get_Additive, write = set_Additive};
  __property   Powerpoint_xp::MsoAnimAccumulate Accumulate = {read = get_Accumulate, write = set_Accumulate};
  __property   Powerpoint_xp::MsoAnimType Type = {read = get_Type, write = set_Type};
  __property   Powerpoint_xp::MotionEffect* MotionEffect = {read = get_MotionEffect};
  __property   Powerpoint_xp::ColorEffect* ColorEffect = {read = get_ColorEffect};
  __property   Powerpoint_xp::ScaleEffect* ScaleEffect = {read = get_ScaleEffect};
  __property   Powerpoint_xp::RotationEffect* RotationEffect = {read = get_RotationEffect};
  __property   Powerpoint_xp::PropertyEffect* PropertyEffect = {read = get_PropertyEffect};
  __property   Powerpoint_xp::Timing* Timing = {read = get_Timing};
  __property   Powerpoint_xp::CommandEffect* CommandEffect = {read = get_CommandEffect};
  __property   Powerpoint_xp::FilterEffect* FilterEffect = {read = get_FilterEffect};
  __property   Powerpoint_xp::SetEffect* SetEffect = {read = get_SetEffect};
};
typedef AnimationBehaviorDispT<AnimationBehavior> AnimationBehaviorDisp;

typedef TComInterface<MotionEffect>  TCOMMotionEffect;

// *********************************************************************//
// DispIntf:  MotionEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E5-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class MotionEffectDispT : public TAutoDriver<MotionEffect>
{
public:
  MotionEffectDispT(){}

  MotionEffectDispT(MotionEffect *pintf)
  {
    TAutoDriver<MotionEffect>::Bind(pintf, false);
  }

  MotionEffectDispT(MotionEffectPtr pintf)
  {
    TAutoDriver<MotionEffect>::Bind(pintf, true);
  }

  MotionEffectDispT& operator=(MotionEffect *pintf)
  {
    TAutoDriver<MotionEffect>::Bind(pintf, false);
    return *this;
  }

  MotionEffectDispT& operator=(MotionEffectPtr pintf)
  {
    TAutoDriver<MotionEffect>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ByX(float* ByX/*[out,retval]*/);
  float           __fastcall get_ByX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ByX(float ByX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ByY(float* ByY/*[out,retval]*/);
  float           __fastcall get_ByY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ByY(float ByY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FromX(float* FromX/*[out,retval]*/);
  float           __fastcall get_FromX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FromX(float FromX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FromY(float* FromY/*[out,retval]*/);
  float           __fastcall get_FromY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FromY(float FromY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ToX(float* ToX/*[out,retval]*/);
  float           __fastcall get_ToX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ToX(float ToX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ToY(float* ToY/*[out,retval]*/);
  float           __fastcall get_ToY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ToY(float ToY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Path(BSTR* Path/*[out,retval]*/);
  BSTR            __fastcall get_Path(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Path(BSTR Path/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           ByX = {read = get_ByX, write = set_ByX};
  __property   float           ByY = {read = get_ByY, write = set_ByY};
  __property   float           FromX = {read = get_FromX, write = set_FromX};
  __property   float           FromY = {read = get_FromY, write = set_FromY};
  __property   float           ToX = {read = get_ToX, write = set_ToX};
  __property   float           ToY = {read = get_ToY, write = set_ToY};
  __property   BSTR            Path = {read = get_Path};
};
typedef MotionEffectDispT<MotionEffect> MotionEffectDisp;

typedef TComInterface<ColorEffect>  TCOMColorEffect;

// *********************************************************************//
// DispIntf:  ColorEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E6-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ColorEffectDispT : public TAutoDriver<ColorEffect>
{
public:
  ColorEffectDispT(){}

  ColorEffectDispT(ColorEffect *pintf)
  {
    TAutoDriver<ColorEffect>::Bind(pintf, false);
  }

  ColorEffectDispT(ColorEffectPtr pintf)
  {
    TAutoDriver<ColorEffect>::Bind(pintf, true);
  }

  ColorEffectDispT& operator=(ColorEffect *pintf)
  {
    TAutoDriver<ColorEffect>::Bind(pintf, false);
    return *this;
  }

  ColorEffectDispT& operator=(ColorEffectPtr pintf)
  {
    TAutoDriver<ColorEffect>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_By(Powerpoint_xp::ColorFormat** By/*[out,retval]*/);
  Powerpoint_xp::ColorFormat* __fastcall get_By(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_From(Powerpoint_xp::ColorFormat** From/*[out,retval]*/);
  Powerpoint_xp::ColorFormat* __fastcall get_From(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_To(Powerpoint_xp::ColorFormat** To/*[out,retval]*/);
  Powerpoint_xp::ColorFormat* __fastcall get_To(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::ColorFormat* By = {read = get_By};
  __property   Powerpoint_xp::ColorFormat* From = {read = get_From};
  __property   Powerpoint_xp::ColorFormat* To = {read = get_To};
};
typedef ColorEffectDispT<ColorEffect> ColorEffectDisp;

typedef TComInterface<ScaleEffect>  TCOMScaleEffect;

// *********************************************************************//
// DispIntf:  ScaleEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E7-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ScaleEffectDispT : public TAutoDriver<ScaleEffect>
{
public:
  ScaleEffectDispT(){}

  ScaleEffectDispT(ScaleEffect *pintf)
  {
    TAutoDriver<ScaleEffect>::Bind(pintf, false);
  }

  ScaleEffectDispT(ScaleEffectPtr pintf)
  {
    TAutoDriver<ScaleEffect>::Bind(pintf, true);
  }

  ScaleEffectDispT& operator=(ScaleEffect *pintf)
  {
    TAutoDriver<ScaleEffect>::Bind(pintf, false);
    return *this;
  }

  ScaleEffectDispT& operator=(ScaleEffectPtr pintf)
  {
    TAutoDriver<ScaleEffect>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ByX(float* ByX/*[out,retval]*/);
  float           __fastcall get_ByX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ByX(float ByX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ByY(float* ByY/*[out,retval]*/);
  float           __fastcall get_ByY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ByY(float ByY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FromX(float* FromX/*[out,retval]*/);
  float           __fastcall get_FromX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FromX(float FromX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FromY(float* FromY/*[out,retval]*/);
  float           __fastcall get_FromY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FromY(float FromY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ToX(float* ToX/*[out,retval]*/);
  float           __fastcall get_ToX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ToX(float ToX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ToY(float* ToY/*[out,retval]*/);
  float           __fastcall get_ToY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ToY(float ToY/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           ByX = {read = get_ByX, write = set_ByX};
  __property   float           ByY = {read = get_ByY, write = set_ByY};
  __property   float           FromX = {read = get_FromX, write = set_FromX};
  __property   float           FromY = {read = get_FromY, write = set_FromY};
  __property   float           ToX = {read = get_ToX, write = set_ToX};
  __property   float           ToY = {read = get_ToY, write = set_ToY};
};
typedef ScaleEffectDispT<ScaleEffect> ScaleEffectDisp;

typedef TComInterface<RotationEffect>  TCOMRotationEffect;

// *********************************************************************//
// DispIntf:  RotationEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E8-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class RotationEffectDispT : public TAutoDriver<RotationEffect>
{
public:
  RotationEffectDispT(){}

  RotationEffectDispT(RotationEffect *pintf)
  {
    TAutoDriver<RotationEffect>::Bind(pintf, false);
  }

  RotationEffectDispT(RotationEffectPtr pintf)
  {
    TAutoDriver<RotationEffect>::Bind(pintf, true);
  }

  RotationEffectDispT& operator=(RotationEffect *pintf)
  {
    TAutoDriver<RotationEffect>::Bind(pintf, false);
    return *this;
  }

  RotationEffectDispT& operator=(RotationEffectPtr pintf)
  {
    TAutoDriver<RotationEffect>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_By(float* By/*[out,retval]*/);
  float           __fastcall get_By(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_By(float By/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_From(float* From/*[out,retval]*/);
  float           __fastcall get_From(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_From(float From/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_To(float* To/*[out,retval]*/);
  float           __fastcall get_To(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_To(float To/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           By = {read = get_By, write = set_By};
  __property   float           From = {read = get_From, write = set_From};
  __property   float           To = {read = get_To, write = set_To};
};
typedef RotationEffectDispT<RotationEffect> RotationEffectDisp;

typedef TComInterface<PropertyEffect>  TCOMPropertyEffect;

// *********************************************************************//
// DispIntf:  PropertyEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PropertyEffectDispT : public TAutoDriver<PropertyEffect>
{
public:
  PropertyEffectDispT(){}

  PropertyEffectDispT(PropertyEffect *pintf)
  {
    TAutoDriver<PropertyEffect>::Bind(pintf, false);
  }

  PropertyEffectDispT(PropertyEffectPtr pintf)
  {
    TAutoDriver<PropertyEffect>::Bind(pintf, true);
  }

  PropertyEffectDispT& operator=(PropertyEffect *pintf)
  {
    TAutoDriver<PropertyEffect>::Bind(pintf, false);
    return *this;
  }

  PropertyEffectDispT& operator=(PropertyEffectPtr pintf)
  {
    TAutoDriver<PropertyEffect>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Property(Powerpoint_xp::MsoAnimProperty* Property/*[out,retval]*/);
  Powerpoint_xp::MsoAnimProperty __fastcall get_Property(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Property(Powerpoint_xp::MsoAnimProperty Property/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Points(Powerpoint_xp::AnimationPoints** Points/*[out,retval]*/);
  Powerpoint_xp::AnimationPoints* __fastcall get_Points(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_From(VARIANT* From/*[out,retval]*/);
  VARIANT         __fastcall get_From(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_From(VARIANT From/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_To(VARIANT* To/*[out,retval]*/);
  VARIANT         __fastcall get_To(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_To(VARIANT To/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::MsoAnimProperty Property = {read = get_Property, write = set_Property};
  __property   Powerpoint_xp::AnimationPoints* Points = {read = get_Points};
};
typedef PropertyEffectDispT<PropertyEffect> PropertyEffectDisp;

typedef TComInterface<AnimationPoints>  TCOMAnimationPoints;

// *********************************************************************//
// DispIntf:  AnimationPoints
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934EA-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class AnimationPointsDispT : public TAutoDriver<AnimationPoints>
{
public:
  AnimationPointsDispT(){}

  AnimationPointsDispT(AnimationPoints *pintf)
  {
    TAutoDriver<AnimationPoints>::Bind(pintf, false);
  }

  AnimationPointsDispT(AnimationPointsPtr pintf)
  {
    TAutoDriver<AnimationPoints>::Bind(pintf, true);
  }

  AnimationPointsDispT& operator=(AnimationPoints *pintf)
  {
    TAutoDriver<AnimationPoints>::Bind(pintf, false);
    return *this;
  }

  AnimationPointsDispT& operator=(AnimationPointsPtr pintf)
  {
    TAutoDriver<AnimationPoints>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Index/*[in]*/, 
                                             Powerpoint_xp::AnimationPoint** Item/*[out,retval]*/);
  Powerpoint_xp::AnimationPoint* __fastcall Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(int Index/*[in,def,opt]*/, 
                                            Powerpoint_xp::AnimationPoint** Add/*[out,retval]*/);
  Powerpoint_xp::AnimationPoint* __fastcall Add(int Index/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Smooth(Office_xp::MsoTriState* Smooth/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Smooth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Smooth(Office_xp::MsoTriState Smooth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/);
  VARIANT         __fastcall _Index(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_xp::MsoTriState Smooth = {read = get_Smooth, write = set_Smooth};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef AnimationPointsDispT<AnimationPoints> AnimationPointsDisp;

typedef TComInterface<AnimationPoint>  TCOMAnimationPoint;

// *********************************************************************//
// DispIntf:  AnimationPoint
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934EB-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class AnimationPointDispT : public TAutoDriver<AnimationPoint>
{
public:
  AnimationPointDispT(){}

  AnimationPointDispT(AnimationPoint *pintf)
  {
    TAutoDriver<AnimationPoint>::Bind(pintf, false);
  }

  AnimationPointDispT(AnimationPointPtr pintf)
  {
    TAutoDriver<AnimationPoint>::Bind(pintf, true);
  }

  AnimationPointDispT& operator=(AnimationPoint *pintf)
  {
    TAutoDriver<AnimationPoint>::Bind(pintf, false);
    return *this;
  }

  AnimationPointDispT& operator=(AnimationPointPtr pintf)
  {
    TAutoDriver<AnimationPoint>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Time(float* Time/*[out,retval]*/);
  float           __fastcall get_Time(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Time(float Time/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(VARIANT Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Formula(BSTR* Formula/*[out,retval]*/);
  BSTR            __fastcall get_Formula(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Formula(BSTR Formula/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Time = {read = get_Time, write = set_Time};
  __property   BSTR            Formula = {read = get_Formula};
};
typedef AnimationPointDispT<AnimationPoint> AnimationPointDisp;

typedef TComInterface<CanvasShapes>  TCOMCanvasShapes;

// *********************************************************************//
// DispIntf:  CanvasShapes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934EC-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class CanvasShapesDispT : public TAutoDriver<CanvasShapes>
{
public:
  CanvasShapesDispT(){}

  CanvasShapesDispT(CanvasShapes *pintf)
  {
    TAutoDriver<CanvasShapes>::Bind(pintf, false);
  }

  CanvasShapesDispT(CanvasShapesPtr pintf)
  {
    TAutoDriver<CanvasShapes>::Bind(pintf, true);
  }

  CanvasShapesDispT& operator=(CanvasShapes *pintf)
  {
    TAutoDriver<CanvasShapes>::Bind(pintf, false);
    return *this;
  }

  CanvasShapesDispT& operator=(CanvasShapesPtr pintf)
  {
    TAutoDriver<CanvasShapes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* Count/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT Index/*[in]*/, 
                                             Powerpoint_xp::Shape** Item/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddCallout(Office_xp::MsoCalloutType Type/*[in]*/, 
                                                   float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in]*/, float Height/*[in]*/, 
                                                   Powerpoint_xp::Shape** Callout/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddCallout(Office_xp::MsoCalloutType Type/*[in]*/, 
                                              float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddConnector(Office_xp::MsoConnectorType Type/*[in]*/, 
                                                     float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                     float EndX/*[in]*/, float EndY/*[in]*/, 
                                                     Powerpoint_xp::Shape** Connector/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddConnector(Office_xp::MsoConnectorType Type/*[in]*/, 
                                                float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                float EndX/*[in]*/, float EndY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddCurve(VARIANT SafeArrayOfPoints/*[in]*/, 
                                                 Powerpoint_xp::Shape** Curve/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddCurve(VARIANT SafeArrayOfPoints/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddLabel(Office_xp::MsoTextOrientation Orientation/*[in]*/, 
                                                 float Left/*[in]*/, float Top/*[in]*/, 
                                                 float Width/*[in]*/, float Height/*[in]*/, 
                                                 Powerpoint_xp::Shape** Label/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddLabel(Office_xp::MsoTextOrientation Orientation/*[in]*/, 
                                            float Left/*[in]*/, float Top/*[in]*/, 
                                            float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                float EndX/*[in]*/, float EndY/*[in]*/, 
                                                Powerpoint_xp::Shape** Line/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                           float EndX/*[in]*/, float EndY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddPicture(BSTR FileName/*[in]*/, 
                                                   Office_xp::MsoTriState LinkToFile/*[in]*/, 
                                                   Office_xp::MsoTriState SaveWithDocument/*[in]*/, 
                                                   float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in,def,opt]*/, 
                                                   float Height/*[in,def,opt]*/, 
                                                   Powerpoint_xp::Shape** Picture/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddPicture(BSTR FileName/*[in]*/, 
                                              Office_xp::MsoTriState LinkToFile/*[in]*/, 
                                              Office_xp::MsoTriState SaveWithDocument/*[in]*/, 
                                              float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in,def,opt]*/, 
                                              float Height/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddPolyline(VARIANT SafeArrayOfPoints/*[in]*/, 
                                                    Powerpoint_xp::Shape** Polyline/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddPolyline(VARIANT SafeArrayOfPoints/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddShape(Office_xp::MsoAutoShapeType Type/*[in]*/, 
                                                 float Left/*[in]*/, float Top/*[in]*/, 
                                                 float Width/*[in]*/, float Height/*[in]*/, 
                                                 Powerpoint_xp::Shape** Shape/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddShape(Office_xp::MsoAutoShapeType Type/*[in]*/, 
                                            float Left/*[in]*/, float Top/*[in]*/, 
                                            float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTextEffect(Office_xp::MsoPresetTextEffect PresetTextEffect/*[in]*/
                                                      , BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                                      float FontSize/*[in]*/, 
                                                      Office_xp::MsoTriState FontBold/*[in]*/, 
                                                      Office_xp::MsoTriState FontItalic/*[in]*/, 
                                                      float Left/*[in]*/, float Top/*[in]*/, 
                                                      Powerpoint_xp::Shape** TextEffect/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddTextEffect(Office_xp::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                                                 BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                                 float FontSize/*[in]*/, 
                                                 Office_xp::MsoTriState FontBold/*[in]*/, 
                                                 Office_xp::MsoTriState FontItalic/*[in]*/, 
                                                 float Left/*[in]*/, float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTextbox(Office_xp::MsoTextOrientation Orientation/*[in]*/
                                                   , float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in]*/, float Height/*[in]*/, 
                                                   Powerpoint_xp::Shape** Textbox/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall AddTextbox(Office_xp::MsoTextOrientation Orientation/*[in]*/, 
                                              float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BuildFreeform(Office_xp::MsoEditingType EditingType/*[in]*/
                                                      , float X1/*[in]*/, float Y1/*[in]*/, 
                                                      Powerpoint_xp::FreeformBuilder** FreeformBuilder/*[out,retval]*/);
  Powerpoint_xp::FreeformBuilder* __fastcall BuildFreeform(Office_xp::MsoEditingType EditingType/*[in]*/, 
                                                           float X1/*[in]*/, float Y1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Range(VARIANT Index/*[in]*/, 
                                              Powerpoint_xp::ShapeRange** Range/*[out,retval]*/);
  Powerpoint_xp::ShapeRange* __fastcall Range(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SelectAll();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Background(Powerpoint_xp::Shape** Background/*[out,retval]*/);
  Powerpoint_xp::Shape* __fastcall get_Background(void);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Powerpoint_xp::Shape* Background = {read = get_Background};
};
typedef CanvasShapesDispT<CanvasShapes> CanvasShapesDisp;

typedef TComInterface<AutoCorrect>  TCOMAutoCorrect;

// *********************************************************************//
// DispIntf:  AutoCorrect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934ED-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class AutoCorrectDispT : public TAutoDriver<AutoCorrect>
{
public:
  AutoCorrectDispT(){}

  AutoCorrectDispT(AutoCorrect *pintf)
  {
    TAutoDriver<AutoCorrect>::Bind(pintf, false);
  }

  AutoCorrectDispT(AutoCorrectPtr pintf)
  {
    TAutoDriver<AutoCorrect>::Bind(pintf, true);
  }

  AutoCorrectDispT& operator=(AutoCorrect *pintf)
  {
    TAutoDriver<AutoCorrect>::Bind(pintf, false);
    return *this;
  }

  AutoCorrectDispT& operator=(AutoCorrectPtr pintf)
  {
    TAutoDriver<AutoCorrect>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayAutoCorrectOptions(VARIANT_BOOL* DisplayAutoCorrectOptions/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayAutoCorrectOptions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayAutoCorrectOptions(VARIANT_BOOL DisplayAutoCorrectOptions/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayAutoLayoutOptions(VARIANT_BOOL* DisplayAutoLayoutOptions/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayAutoLayoutOptions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayAutoLayoutOptions(VARIANT_BOOL DisplayAutoLayoutOptions/*[in]*/);

  __property   VARIANT_BOOL    DisplayAutoCorrectOptions = {read = get_DisplayAutoCorrectOptions, write = set_DisplayAutoCorrectOptions};
  __property   VARIANT_BOOL    DisplayAutoLayoutOptions = {read = get_DisplayAutoLayoutOptions, write = set_DisplayAutoLayoutOptions};
};
typedef AutoCorrectDispT<AutoCorrect> AutoCorrectDisp;

typedef TComInterface<Options>  TCOMOptions;

// *********************************************************************//
// DispIntf:  Options
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934EE-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class OptionsDispT : public TAutoDriver<Options>
{
public:
  OptionsDispT(){}

  OptionsDispT(Options *pintf)
  {
    TAutoDriver<Options>::Bind(pintf, false);
  }

  OptionsDispT(OptionsPtr pintf)
  {
    TAutoDriver<Options>::Bind(pintf, true);
  }

  OptionsDispT& operator=(Options *pintf)
  {
    TAutoDriver<Options>::Bind(pintf, false);
    return *this;
  }

  OptionsDispT& operator=(OptionsPtr pintf)
  {
    TAutoDriver<Options>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayPasteOptions(Office_xp::MsoTriState* DisplayPasteOptions/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_DisplayPasteOptions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayPasteOptions(Office_xp::MsoTriState DisplayPasteOptions/*[in]*/);

  __property   Office_xp::MsoTriState DisplayPasteOptions = {read = get_DisplayPasteOptions, write = set_DisplayPasteOptions};
};
typedef OptionsDispT<Options> OptionsDisp;

typedef TComInterface<CommandEffect>  TCOMCommandEffect;

// *********************************************************************//
// DispIntf:  CommandEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934EF-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class CommandEffectDispT : public TAutoDriver<CommandEffect>
{
public:
  CommandEffectDispT(){}

  CommandEffectDispT(CommandEffect *pintf)
  {
    TAutoDriver<CommandEffect>::Bind(pintf, false);
  }

  CommandEffectDispT(CommandEffectPtr pintf)
  {
    TAutoDriver<CommandEffect>::Bind(pintf, true);
  }

  CommandEffectDispT& operator=(CommandEffect *pintf)
  {
    TAutoDriver<CommandEffect>::Bind(pintf, false);
    return *this;
  }

  CommandEffectDispT& operator=(CommandEffectPtr pintf)
  {
    TAutoDriver<CommandEffect>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Powerpoint_xp::MsoAnimCommandType* Type/*[out,retval]*/);
  Powerpoint_xp::MsoAnimCommandType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Powerpoint_xp::MsoAnimCommandType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Command(BSTR* Command/*[out,retval]*/);
  BSTR            __fastcall get_Command(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Command(BSTR Command/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::MsoAnimCommandType Type = {read = get_Type, write = set_Type};
  __property   BSTR            Command = {read = get_Command};
};
typedef CommandEffectDispT<CommandEffect> CommandEffectDisp;

typedef TComInterface<FilterEffect>  TCOMFilterEffect;

// *********************************************************************//
// DispIntf:  FilterEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934F0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class FilterEffectDispT : public TAutoDriver<FilterEffect>
{
public:
  FilterEffectDispT(){}

  FilterEffectDispT(FilterEffect *pintf)
  {
    TAutoDriver<FilterEffect>::Bind(pintf, false);
  }

  FilterEffectDispT(FilterEffectPtr pintf)
  {
    TAutoDriver<FilterEffect>::Bind(pintf, true);
  }

  FilterEffectDispT& operator=(FilterEffect *pintf)
  {
    TAutoDriver<FilterEffect>::Bind(pintf, false);
    return *this;
  }

  FilterEffectDispT& operator=(FilterEffectPtr pintf)
  {
    TAutoDriver<FilterEffect>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Powerpoint_xp::MsoAnimFilterEffectType* Type/*[out,retval]*/);
  Powerpoint_xp::MsoAnimFilterEffectType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Powerpoint_xp::MsoAnimFilterEffectType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Subtype(Powerpoint_xp::MsoAnimFilterEffectSubtype* Subtype/*[out,retval]*/);
  Powerpoint_xp::MsoAnimFilterEffectSubtype __fastcall get_Subtype(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Subtype(Powerpoint_xp::MsoAnimFilterEffectSubtype Subtype/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Reveal(Office_xp::MsoTriState* Reveal/*[out,retval]*/);
  Office_xp::MsoTriState __fastcall get_Reveal(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Reveal(Office_xp::MsoTriState Reveal/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::MsoAnimFilterEffectType Type = {read = get_Type, write = set_Type};
  __property   Powerpoint_xp::MsoAnimFilterEffectSubtype Subtype = {read = get_Subtype, write = set_Subtype};
  __property   Office_xp::MsoTriState Reveal = {read = get_Reveal, write = set_Reveal};
};
typedef FilterEffectDispT<FilterEffect> FilterEffectDisp;

typedef TComInterface<SetEffect>  TCOMSetEffect;

// *********************************************************************//
// DispIntf:  SetEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934F1-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SetEffectDispT : public TAutoDriver<SetEffect>
{
public:
  SetEffectDispT(){}

  SetEffectDispT(SetEffect *pintf)
  {
    TAutoDriver<SetEffect>::Bind(pintf, false);
  }

  SetEffectDispT(SetEffectPtr pintf)
  {
    TAutoDriver<SetEffect>::Bind(pintf, true);
  }

  SetEffectDispT& operator=(SetEffect *pintf)
  {
    TAutoDriver<SetEffect>::Bind(pintf, false);
    return *this;
  }

  SetEffectDispT& operator=(SetEffectPtr pintf)
  {
    TAutoDriver<SetEffect>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/);
  Powerpoint_xp::PowerPointApplication* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Property(Powerpoint_xp::MsoAnimProperty* Property/*[out,retval]*/);
  Powerpoint_xp::MsoAnimProperty __fastcall get_Property(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Property(Powerpoint_xp::MsoAnimProperty Property/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_To(VARIANT* To/*[out,retval]*/);
  VARIANT         __fastcall get_To(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_To(VARIANT To/*[in]*/);

  __property   Powerpoint_xp::PowerPointApplication* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_xp::MsoAnimProperty Property = {read = get_Property, write = set_Property};
};
typedef SetEffectDispT<SetEffect> SetEffectDisp;

// *********************************************************************//
// DispIntf:  Collection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {91493450-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CollectionDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
CollectionDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CollectionDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
CollectionDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CollectionDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CollectionDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// SmartIntf: TCOM_Application
// Interface: _Application
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Presentations(Powerpoint_xp::Presentations** Presentations/*[out,retval]*/)
{
  return (*this)->get_Presentations(Presentations);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Presentations(Powerpoint_xp::PresentationsPtr* Presentations/*[out,retval]*/)
{
  return (*this)->get_Presentations(Presentations**)Presentations);
}

template <class T> Powerpoint_xp::PresentationsPtr __fastcall
TCOM_ApplicationT<T>::get_Presentations(void)
{
  Powerpoint_xp::Presentations* Presentations;
  OLECHECK(this->get_Presentations((Powerpoint_xp::Presentations**)&Presentations));
  return (Powerpoint_xp::PresentationsPtr)Presentations;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Windows(Powerpoint_xp::DocumentWindows** Windows/*[out,retval]*/)
{
  return (*this)->get_Windows(Windows);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Windows(Powerpoint_xp::DocumentWindowsPtr* Windows/*[out,retval]*/)
{
  return (*this)->get_Windows(DocumentWindows**)Windows);
}

template <class T> Powerpoint_xp::DocumentWindowsPtr __fastcall
TCOM_ApplicationT<T>::get_Windows(void)
{
  Powerpoint_xp::DocumentWindows* Windows;
  OLECHECK(this->get_Windows((Powerpoint_xp::DocumentWindows**)&Windows));
  return (Powerpoint_xp::DocumentWindowsPtr)Windows;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Dialogs(LPUNKNOWN* Dialogs/*[out,retval]*/)
{
  return (*this)->get_Dialogs(Dialogs);
}

template <class T> LPUNKNOWN __fastcall
TCOM_ApplicationT<T>::get_Dialogs(void)
{
  LPUNKNOWN Dialogs;
  OLECHECK(this->get_Dialogs((LPUNKNOWN*)&Dialogs));
  return Dialogs;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ActiveWindow(Powerpoint_xp::DocumentWindow** ActiveWindow/*[out,retval]*/)
{
  return (*this)->get_ActiveWindow(ActiveWindow);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ActiveWindow(Powerpoint_xp::DocumentWindowPtr* ActiveWindow/*[out,retval]*/)
{
  return (*this)->get_ActiveWindow(DocumentWindow**)ActiveWindow);
}

template <class T> Powerpoint_xp::DocumentWindowPtr __fastcall
TCOM_ApplicationT<T>::get_ActiveWindow(void)
{
  Powerpoint_xp::DocumentWindow* ActiveWindow;
  OLECHECK(this->get_ActiveWindow((Powerpoint_xp::DocumentWindow**)&ActiveWindow));
  return (Powerpoint_xp::DocumentWindowPtr)ActiveWindow;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ActivePresentation(Powerpoint_xp::PowerPointPresentation** ActivePresentation/*[out,retval]*/)
{
  return (*this)->get_ActivePresentation(ActivePresentation);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ActivePresentation(Powerpoint_xp::PowerPointPresentationPtr* ActivePresentation/*[out,retval]*/)
{
  return (*this)->get_ActivePresentation(PowerPointPresentation**)ActivePresentation);
}

template <class T> Powerpoint_xp::PowerPointPresentationPtr __fastcall
TCOM_ApplicationT<T>::get_ActivePresentation(void)
{
  Powerpoint_xp::PowerPointPresentation* ActivePresentation;
  OLECHECK(this->get_ActivePresentation((Powerpoint_xp::PowerPointPresentation**)&ActivePresentation));
  return (Powerpoint_xp::PowerPointPresentationPtr)ActivePresentation;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_SlideShowWindows(Powerpoint_xp::SlideShowWindows** SlideShowWindows/*[out,retval]*/)
{
  return (*this)->get_SlideShowWindows(SlideShowWindows);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_SlideShowWindows(Powerpoint_xp::SlideShowWindowsPtr* SlideShowWindows/*[out,retval]*/)
{
  return (*this)->get_SlideShowWindows(SlideShowWindows**)SlideShowWindows);
}

template <class T> Powerpoint_xp::SlideShowWindowsPtr __fastcall
TCOM_ApplicationT<T>::get_SlideShowWindows(void)
{
  Powerpoint_xp::SlideShowWindows* SlideShowWindows;
  OLECHECK(this->get_SlideShowWindows((Powerpoint_xp::SlideShowWindows**)&SlideShowWindows));
  return (Powerpoint_xp::SlideShowWindowsPtr)SlideShowWindows;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_CommandBars(Office_xp::CommandBars** CommandBars/*[out,retval]*/)
{
  return (*this)->get_CommandBars(CommandBars);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_CommandBars(Office_xp::CommandBarsPtr* CommandBars/*[out,retval]*/)
{
  return (*this)->get_CommandBars(CommandBars**)CommandBars);
}

template <class T> Office_xp::CommandBarsPtr __fastcall
TCOM_ApplicationT<T>::get_CommandBars(void)
{
  Office_xp::CommandBars* CommandBars;
  OLECHECK(this->get_CommandBars((Office_xp::CommandBars**)&CommandBars));
  return (Office_xp::CommandBarsPtr)CommandBars;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Path(BSTR* Path/*[out,retval]*/)
{
  return (*this)->get_Path(Path);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_Path(void)
{
  BSTR Path = 0;
  OLECHECK(this->get_Path((BSTR*)&Path));
  return Path;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  return (*this)->get_Name(Name);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_Name(void)
{
  BSTR Name = 0;
  OLECHECK(this->get_Name((BSTR*)&Name));
  return Name;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  return (*this)->get_Caption(Caption);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_Caption(void)
{
  BSTR Caption = 0;
  OLECHECK(this->get_Caption((BSTR*)&Caption));
  return Caption;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  return (*this)->set_Caption(Caption);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Assistant(Office_xp::Assistant** Assistant/*[out,retval]*/)
{
  return (*this)->get_Assistant(Assistant);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Assistant(Office_xp::AssistantPtr* Assistant/*[out,retval]*/)
{
  return (*this)->get_Assistant(Assistant**)Assistant);
}

template <class T> Office_xp::AssistantPtr __fastcall
TCOM_ApplicationT<T>::get_Assistant(void)
{
  Office_xp::Assistant* Assistant;
  OLECHECK(this->get_Assistant((Office_xp::Assistant**)&Assistant));
  return (Office_xp::AssistantPtr)Assistant;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_FileSearch(Office_xp::FileSearch** FileSearch/*[out,retval]*/)
{
  return (*this)->get_FileSearch(FileSearch);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_FileSearch(Office_xp::FileSearchPtr* FileSearch/*[out,retval]*/)
{
  return (*this)->get_FileSearch(FileSearch**)FileSearch);
}

template <class T> Office_xp::FileSearchPtr __fastcall
TCOM_ApplicationT<T>::get_FileSearch(void)
{
  Office_xp::FileSearch* FileSearch;
  OLECHECK(this->get_FileSearch((Office_xp::FileSearch**)&FileSearch));
  return (Office_xp::FileSearchPtr)FileSearch;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_FileFind(Office_xp::IFind** FileFind/*[out,retval]*/)
{
  return (*this)->get_FileFind(FileFind);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_FileFind(Office_xp::IFindPtr* FileFind/*[out,retval]*/)
{
  return (*this)->get_FileFind(IFind**)FileFind);
}

template <class T> Office_xp::IFindPtr __fastcall
TCOM_ApplicationT<T>::get_FileFind(void)
{
  Office_xp::IFind* FileFind;
  OLECHECK(this->get_FileFind((Office_xp::IFind**)&FileFind));
  return (Office_xp::IFindPtr)FileFind;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Build(BSTR* Build/*[out,retval]*/)
{
  return (*this)->get_Build(Build);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_Build(void)
{
  BSTR Build = 0;
  OLECHECK(this->get_Build((BSTR*)&Build));
  return Build;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Version(BSTR* Version/*[out,retval]*/)
{
  return (*this)->get_Version(Version);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_Version(void)
{
  BSTR Version = 0;
  OLECHECK(this->get_Version((BSTR*)&Version));
  return Version;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_OperatingSystem(BSTR* OperatingSystem/*[out,retval]*/)
{
  return (*this)->get_OperatingSystem(OperatingSystem);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_OperatingSystem(void)
{
  BSTR OperatingSystem = 0;
  OLECHECK(this->get_OperatingSystem((BSTR*)&OperatingSystem));
  return OperatingSystem;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ActivePrinter(BSTR* ActivePrinter/*[out,retval]*/)
{
  return (*this)->get_ActivePrinter(ActivePrinter);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_ActivePrinter(void)
{
  BSTR ActivePrinter = 0;
  OLECHECK(this->get_ActivePrinter((BSTR*)&ActivePrinter));
  return ActivePrinter;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Creator(long* Creator/*[out,retval]*/)
{
  return (*this)->get_Creator(Creator);
}

template <class T> long __fastcall
TCOM_ApplicationT<T>::get_Creator(void)
{
  long Creator;
  OLECHECK(this->get_Creator((long*)&Creator));
  return Creator;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_AddIns(Powerpoint_xp::AddIns** AddIns/*[out,retval]*/)
{
  return (*this)->get_AddIns(AddIns);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_AddIns(Powerpoint_xp::AddInsPtr* AddIns/*[out,retval]*/)
{
  return (*this)->get_AddIns(AddIns**)AddIns);
}

template <class T> Powerpoint_xp::AddInsPtr __fastcall
TCOM_ApplicationT<T>::get_AddIns(void)
{
  Powerpoint_xp::AddIns* AddIns;
  OLECHECK(this->get_AddIns((Powerpoint_xp::AddIns**)&AddIns));
  return (Powerpoint_xp::AddInsPtr)AddIns;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_VBE(Vbide_xp::VBE** VBE/*[out,retval]*/)
{
  return (*this)->get_VBE(VBE);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_VBE(Vbide_xp::VBEPtr* VBE/*[out,retval]*/)
{
  return (*this)->get_VBE(VBE**)VBE);
}

template <class T> Vbide_xp::VBEPtr __fastcall
TCOM_ApplicationT<T>::get_VBE(void)
{
  Vbide_xp::VBE* VBE;
  OLECHECK(this->get_VBE((Vbide_xp::VBE**)&VBE));
  return (Vbide_xp::VBEPtr)VBE;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::Help(BSTR HelpFile/*[in,def,opt]*/, int ContextID/*[in,def,opt]*/)
{
  return (*this)->Help(HelpFile, ContextID);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::Quit(void)
{
  return (*this)->Quit();
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/, 
                          VARIANT* Run/*[out,retval]*/)
{
  return (*this)->Run(MacroName, safeArrayOfParams, Run);
}

template <class T> VARIANT __fastcall
TCOM_ApplicationT<T>::Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/)
{
  VARIANT Run;
  OLECHECK(this->Run(, (VARIANT*)&Run));
  return Run;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::PPFileDialog(Powerpoint_xp::PpFileDialogType Type/*[in]*/, 
                                   LPUNKNOWN* PPFileDialog/*[out,retval]*/)
{
  return (*this)->PPFileDialog(Type, PPFileDialog);
}

template <class T> LPUNKNOWN __fastcall
TCOM_ApplicationT<T>::PPFileDialog(Powerpoint_xp::PpFileDialogType Type/*[in]*/)
{
  LPUNKNOWN PPFileDialog;
  OLECHECK(this->PPFileDialog(, (LPUNKNOWN*)&PPFileDialog));
  return PPFileDialog;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::LaunchSpelling(Powerpoint_xp::DocumentWindow* pWindow/*[in]*/)
{
  return (*this)->LaunchSpelling(pWindow);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Left(float* Left/*[out,retval]*/)
{
  return (*this)->get_Left(Left);
}

template <class T> float __fastcall
TCOM_ApplicationT<T>::get_Left(void)
{
  float Left;
  OLECHECK(this->get_Left((float*)&Left));
  return Left;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_Left(float Left/*[in]*/)
{
  return (*this)->set_Left(Left);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Top(float* Top/*[out,retval]*/)
{
  return (*this)->get_Top(Top);
}

template <class T> float __fastcall
TCOM_ApplicationT<T>::get_Top(void)
{
  float Top;
  OLECHECK(this->get_Top((float*)&Top));
  return Top;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_Top(float Top/*[in]*/)
{
  return (*this)->set_Top(Top);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Width(float* Width/*[out,retval]*/)
{
  return (*this)->get_Width(Width);
}

template <class T> float __fastcall
TCOM_ApplicationT<T>::get_Width(void)
{
  float Width;
  OLECHECK(this->get_Width((float*)&Width));
  return Width;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_Width(float Width/*[in]*/)
{
  return (*this)->set_Width(Width);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Height(float* Height/*[out,retval]*/)
{
  return (*this)->get_Height(Height);
}

template <class T> float __fastcall
TCOM_ApplicationT<T>::get_Height(void)
{
  float Height;
  OLECHECK(this->get_Height((float*)&Height));
  return Height;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_Height(float Height/*[in]*/)
{
  return (*this)->set_Height(Height);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_WindowState(Powerpoint_xp::PpWindowState* WindowState/*[out,retval]*/)
{
  return (*this)->get_WindowState(WindowState);
}

template <class T> Powerpoint_xp::PpWindowState __fastcall
TCOM_ApplicationT<T>::get_WindowState(void)
{
  Powerpoint_xp::PpWindowState WindowState;
  OLECHECK(this->get_WindowState((Powerpoint_xp::PpWindowState*)&WindowState));
  return WindowState;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_WindowState(Powerpoint_xp::PpWindowState WindowState/*[in]*/)
{
  return (*this)->set_WindowState(WindowState);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/)
{
  return (*this)->get_Visible(Visible);
}

template <class T> Office_xp::MsoTriState __fastcall
TCOM_ApplicationT<T>::get_Visible(void)
{
  Office_xp::MsoTriState Visible;
  OLECHECK(this->get_Visible((Office_xp::MsoTriState*)&Visible));
  return Visible;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_Visible(Office_xp::MsoTriState Visible/*[in]*/)
{
  return (*this)->set_Visible(Visible);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  return (*this)->get_HWND(HWND);
}

template <class T> long __fastcall
TCOM_ApplicationT<T>::get_HWND(void)
{
  long HWND;
  OLECHECK(this->get_HWND((long*)&HWND));
  return HWND;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Active(Office_xp::MsoTriState* Active/*[out,retval]*/)
{
  return (*this)->get_Active(Active);
}

template <class T> Office_xp::MsoTriState __fastcall
TCOM_ApplicationT<T>::get_Active(void)
{
  Office_xp::MsoTriState Active;
  OLECHECK(this->get_Active((Office_xp::MsoTriState*)&Active));
  return Active;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::Activate(void)
{
  return (*this)->Activate();
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_AnswerWizard(Office_xp::AnswerWizard** AnswerWizard/*[out,retval]*/)
{
  return (*this)->get_AnswerWizard(AnswerWizard);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_AnswerWizard(Office_xp::AnswerWizardPtr* AnswerWizard/*[out,retval]*/)
{
  return (*this)->get_AnswerWizard(AnswerWizard**)AnswerWizard);
}

template <class T> Office_xp::AnswerWizardPtr __fastcall
TCOM_ApplicationT<T>::get_AnswerWizard(void)
{
  Office_xp::AnswerWizard* AnswerWizard;
  OLECHECK(this->get_AnswerWizard((Office_xp::AnswerWizard**)&AnswerWizard));
  return (Office_xp::AnswerWizardPtr)AnswerWizard;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_COMAddIns(Office_xp::COMAddIns** COMAddIns/*[out,retval]*/)
{
  return (*this)->get_COMAddIns(COMAddIns);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_COMAddIns(Office_xp::COMAddInsPtr* COMAddIns/*[out,retval]*/)
{
  return (*this)->get_COMAddIns(COMAddIns**)COMAddIns);
}

template <class T> Office_xp::COMAddInsPtr __fastcall
TCOM_ApplicationT<T>::get_COMAddIns(void)
{
  Office_xp::COMAddIns* COMAddIns;
  OLECHECK(this->get_COMAddIns((Office_xp::COMAddIns**)&COMAddIns));
  return (Office_xp::COMAddInsPtr)COMAddIns;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ProductCode(BSTR* ProductCode/*[out,retval]*/)
{
  return (*this)->get_ProductCode(ProductCode);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_ProductCode(void)
{
  BSTR ProductCode = 0;
  OLECHECK(this->get_ProductCode((BSTR*)&ProductCode));
  return ProductCode;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_DefaultWebOptions(Powerpoint_xp::DefaultWebOptions** DefaultWebOptions/*[out,retval]*/)
{
  return (*this)->get_DefaultWebOptions(DefaultWebOptions);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_DefaultWebOptions(Powerpoint_xp::DefaultWebOptionsPtr* DefaultWebOptions/*[out,retval]*/)
{
  return (*this)->get_DefaultWebOptions(DefaultWebOptions**)DefaultWebOptions);
}

template <class T> Powerpoint_xp::DefaultWebOptionsPtr __fastcall
TCOM_ApplicationT<T>::get_DefaultWebOptions(void)
{
  Powerpoint_xp::DefaultWebOptions* DefaultWebOptions;
  OLECHECK(this->get_DefaultWebOptions((Powerpoint_xp::DefaultWebOptions**)&DefaultWebOptions));
  return (Powerpoint_xp::DefaultWebOptionsPtr)DefaultWebOptions;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_LanguageSettings(Office_xp::LanguageSettings** LanguageSettings/*[out,retval]*/)
{
  return (*this)->get_LanguageSettings(LanguageSettings);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_LanguageSettings(Office_xp::LanguageSettingsPtr* LanguageSettings/*[out,retval]*/)
{
  return (*this)->get_LanguageSettings(LanguageSettings**)LanguageSettings);
}

template <class T> Office_xp::LanguageSettingsPtr __fastcall
TCOM_ApplicationT<T>::get_LanguageSettings(void)
{
  Office_xp::LanguageSettings* LanguageSettings;
  OLECHECK(this->get_LanguageSettings((Office_xp::LanguageSettings**)&LanguageSettings));
  return (Office_xp::LanguageSettingsPtr)LanguageSettings;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_MsoDebugOptions(Office_xp::MsoDebugOptions** MsoDebugOptions/*[out,retval]*/)
{
  return (*this)->get_MsoDebugOptions(MsoDebugOptions);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_MsoDebugOptions(Office_xp::MsoDebugOptionsPtr* MsoDebugOptions/*[out,retval]*/)
{
  return (*this)->get_MsoDebugOptions(MsoDebugOptions**)MsoDebugOptions);
}

template <class T> Office_xp::MsoDebugOptionsPtr __fastcall
TCOM_ApplicationT<T>::get_MsoDebugOptions(void)
{
  Office_xp::MsoDebugOptions* MsoDebugOptions;
  OLECHECK(this->get_MsoDebugOptions((Office_xp::MsoDebugOptions**)&MsoDebugOptions));
  return (Office_xp::MsoDebugOptionsPtr)MsoDebugOptions;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ShowWindowsInTaskbar(Office_xp::MsoTriState* ShowWindowsInTaskbar/*[out,retval]*/)
{
  return (*this)->get_ShowWindowsInTaskbar(ShowWindowsInTaskbar);
}

template <class T> Office_xp::MsoTriState __fastcall
TCOM_ApplicationT<T>::get_ShowWindowsInTaskbar(void)
{
  Office_xp::MsoTriState ShowWindowsInTaskbar;
  OLECHECK(this->get_ShowWindowsInTaskbar((Office_xp::MsoTriState*)&ShowWindowsInTaskbar));
  return ShowWindowsInTaskbar;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_ShowWindowsInTaskbar(Office_xp::MsoTriState ShowWindowsInTaskbar/*[in]*/)
{
  return (*this)->set_ShowWindowsInTaskbar(ShowWindowsInTaskbar);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Marker(LPUNKNOWN* Marker/*[out,retval]*/)
{
  return (*this)->get_Marker(Marker);
}

template <class T> LPUNKNOWN __fastcall
TCOM_ApplicationT<T>::get_Marker(void)
{
  LPUNKNOWN Marker;
  OLECHECK(this->get_Marker((LPUNKNOWN*)&Marker));
  return Marker;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_FeatureInstall(Office_xp::MsoFeatureInstall* FeatureInstall/*[out,retval]*/)
{
  return (*this)->get_FeatureInstall(FeatureInstall);
}

template <class T> Office_xp::MsoFeatureInstall __fastcall
TCOM_ApplicationT<T>::get_FeatureInstall(void)
{
  Office_xp::MsoFeatureInstall FeatureInstall;
  OLECHECK(this->get_FeatureInstall((Office_xp::MsoFeatureInstall*)&FeatureInstall));
  return FeatureInstall;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_FeatureInstall(Office_xp::MsoFeatureInstall FeatureInstall/*[in]*/)
{
  return (*this)->set_FeatureInstall(FeatureInstall);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::GetOptionFlag(long Option/*[in]*/, VARIANT_BOOL Persist/*[in,def,opt]*/, 
                                    VARIANT_BOOL* GetOptionFlag/*[out,retval]*/)
{
  return (*this)->GetOptionFlag(Option, Persist, GetOptionFlag);
}

template <class T> VARIANT_BOOL __fastcall
TCOM_ApplicationT<T>::GetOptionFlag(long Option/*[in]*/, VARIANT_BOOL Persist/*[in,def,opt]*/)
{
  VARIANT_BOOL GetOptionFlag;
  OLECHECK(this->GetOptionFlag(, (VARIANT_BOOL*)&GetOptionFlag));
  return GetOptionFlag;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::SetOptionFlag(long Option/*[in]*/, VARIANT_BOOL State/*[in]*/, 
                                    VARIANT_BOOL Persist/*[in,def,opt]*/)
{
  return (*this)->SetOptionFlag(Option, State, Persist);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_FileDialog(Office_xp::MsoFileDialogType Type/*[in]*/, 
                                     Office_xp::FileDialog** FileDialog/*[out,retval]*/)
{
  return (*this)->get_FileDialog(Type, FileDialog);
}

template <class T> Office_xp::FileDialog* __fastcall
TCOM_ApplicationT<T>::get_FileDialog(Office_xp::MsoFileDialogType Type/*[in]*/)
{
  Office_xp::FileDialog* FileDialog;
  OLECHECK(this->get_FileDialog(, (Office_xp::FileDialog**)&FileDialog));
  return FileDialog;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_DisplayGridLines(Office_xp::MsoTriState* DisplayGridLines/*[out,retval]*/)
{
  return (*this)->get_DisplayGridLines(DisplayGridLines);
}

template <class T> Office_xp::MsoTriState __fastcall
TCOM_ApplicationT<T>::get_DisplayGridLines(void)
{
  Office_xp::MsoTriState DisplayGridLines;
  OLECHECK(this->get_DisplayGridLines((Office_xp::MsoTriState*)&DisplayGridLines));
  return DisplayGridLines;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_DisplayGridLines(Office_xp::MsoTriState DisplayGridLines/*[in]*/)
{
  return (*this)->set_DisplayGridLines(DisplayGridLines);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_AutomationSecurity(Office_xp::MsoAutomationSecurity* AutomationSecurity/*[out,retval]*/)
{
  return (*this)->get_AutomationSecurity(AutomationSecurity);
}

template <class T> Office_xp::MsoAutomationSecurity __fastcall
TCOM_ApplicationT<T>::get_AutomationSecurity(void)
{
  Office_xp::MsoAutomationSecurity AutomationSecurity;
  OLECHECK(this->get_AutomationSecurity((Office_xp::MsoAutomationSecurity*)&AutomationSecurity));
  return AutomationSecurity;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_AutomationSecurity(Office_xp::MsoAutomationSecurity AutomationSecurity/*[in]*/)
{
  return (*this)->set_AutomationSecurity(AutomationSecurity);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_NewPresentation(Office_xp::NewFile** NewPresentation/*[out,retval]*/)
{
  return (*this)->get_NewPresentation(NewPresentation);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_NewPresentation(Office_xp::NewFilePtr* NewPresentation/*[out,retval]*/)
{
  return (*this)->get_NewPresentation(NewFile**)NewPresentation);
}

template <class T> Office_xp::NewFilePtr __fastcall
TCOM_ApplicationT<T>::get_NewPresentation(void)
{
  Office_xp::NewFile* NewPresentation;
  OLECHECK(this->get_NewPresentation((Office_xp::NewFile**)&NewPresentation));
  return (Office_xp::NewFilePtr)NewPresentation;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_DisplayAlerts(Powerpoint_xp::PpAlertLevel* DisplayAlerts/*[out,retval]*/)
{
  return (*this)->get_DisplayAlerts(DisplayAlerts);
}

template <class T> Powerpoint_xp::PpAlertLevel __fastcall
TCOM_ApplicationT<T>::get_DisplayAlerts(void)
{
  Powerpoint_xp::PpAlertLevel DisplayAlerts;
  OLECHECK(this->get_DisplayAlerts((Powerpoint_xp::PpAlertLevel*)&DisplayAlerts));
  return DisplayAlerts;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_DisplayAlerts(Powerpoint_xp::PpAlertLevel DisplayAlerts/*[in]*/)
{
  return (*this)->set_DisplayAlerts(DisplayAlerts);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ShowStartupDialog(Office_xp::MsoTriState* ShowStartupDialog/*[out,retval]*/)
{
  return (*this)->get_ShowStartupDialog(ShowStartupDialog);
}

template <class T> Office_xp::MsoTriState __fastcall
TCOM_ApplicationT<T>::get_ShowStartupDialog(void)
{
  Office_xp::MsoTriState ShowStartupDialog;
  OLECHECK(this->get_ShowStartupDialog((Office_xp::MsoTriState*)&ShowStartupDialog));
  return ShowStartupDialog;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_ShowStartupDialog(Office_xp::MsoTriState ShowStartupDialog/*[in]*/)
{
  return (*this)->set_ShowStartupDialog(ShowStartupDialog);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::SetPerfMarker(int Marker/*[in]*/)
{
  return (*this)->SetPerfMarker(Marker);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_AutoCorrect(Powerpoint_xp::AutoCorrect** AutoCorrect/*[out,retval]*/)
{
  return (*this)->get_AutoCorrect(AutoCorrect);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_AutoCorrect(Powerpoint_xp::AutoCorrectPtr* AutoCorrect/*[out,retval]*/)
{
  return (*this)->get_AutoCorrect(AutoCorrect**)AutoCorrect);
}

template <class T> Powerpoint_xp::AutoCorrectPtr __fastcall
TCOM_ApplicationT<T>::get_AutoCorrect(void)
{
  Powerpoint_xp::AutoCorrect* AutoCorrect;
  OLECHECK(this->get_AutoCorrect((Powerpoint_xp::AutoCorrect**)&AutoCorrect));
  return (Powerpoint_xp::AutoCorrectPtr)AutoCorrect;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Options(Powerpoint_xp::Options** Options/*[out,retval]*/)
{
  return (*this)->get_Options(Options);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Options(Powerpoint_xp::OptionsPtr* Options/*[out,retval]*/)
{
  return (*this)->get_Options(Options**)Options);
}

template <class T> Powerpoint_xp::OptionsPtr __fastcall
TCOM_ApplicationT<T>::get_Options(void)
{
  Powerpoint_xp::Options* Options;
  OLECHECK(this->get_Options((Powerpoint_xp::Options**)&Options));
  return (Powerpoint_xp::OptionsPtr)Options;
}

// *********************************************************************//
// DispIntf:  _Application
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493442-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Presentations(Powerpoint_xp::Presentations** Presentations/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Presentations"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Presentations**)Presentations /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Presentations* __fastcall
_ApplicationDispT<T>::get_Presentations(void)
{
  Powerpoint_xp::Presentations* Presentations;
  this->get_Presentations((Powerpoint_xp::Presentations**)&Presentations);
  return Presentations;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Windows(Powerpoint_xp::DocumentWindows** Windows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Windows"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DocumentWindows**)Windows /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::DocumentWindows* __fastcall
_ApplicationDispT<T>::get_Windows(void)
{
  Powerpoint_xp::DocumentWindows* Windows;
  this->get_Windows((Powerpoint_xp::DocumentWindows**)&Windows);
  return Windows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Dialogs(LPUNKNOWN* Dialogs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Dialogs"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Dialogs /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_ApplicationDispT<T>::get_Dialogs(void)
{
  LPUNKNOWN Dialogs;
  this->get_Dialogs((LPUNKNOWN*)&Dialogs);
  return Dialogs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_ActiveWindow(Powerpoint_xp::DocumentWindow** ActiveWindow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveWindow"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DocumentWindow**)ActiveWindow /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::DocumentWindow* __fastcall
_ApplicationDispT<T>::get_ActiveWindow(void)
{
  Powerpoint_xp::DocumentWindow* ActiveWindow;
  this->get_ActiveWindow((Powerpoint_xp::DocumentWindow**)&ActiveWindow);
  return ActiveWindow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_ActivePresentation(Powerpoint_xp::PowerPointPresentation** ActivePresentation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActivePresentation"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointPresentation**)ActivePresentation /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointPresentation* __fastcall
_ApplicationDispT<T>::get_ActivePresentation(void)
{
  Powerpoint_xp::PowerPointPresentation* ActivePresentation;
  this->get_ActivePresentation((Powerpoint_xp::PowerPointPresentation**)&ActivePresentation);
  return ActivePresentation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_SlideShowWindows(Powerpoint_xp::SlideShowWindows** SlideShowWindows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowWindows"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SlideShowWindows**)SlideShowWindows /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::SlideShowWindows* __fastcall
_ApplicationDispT<T>::get_SlideShowWindows(void)
{
  Powerpoint_xp::SlideShowWindows* SlideShowWindows;
  this->get_SlideShowWindows((Powerpoint_xp::SlideShowWindows**)&SlideShowWindows);
  return SlideShowWindows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_CommandBars(Office_xp::CommandBars** CommandBars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandBars"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::CommandBars**)CommandBars /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::CommandBars* __fastcall
_ApplicationDispT<T>::get_CommandBars(void)
{
  Office_xp::CommandBars* CommandBars;
  this->get_CommandBars((Office_xp::CommandBars**)&CommandBars);
  return CommandBars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Path(BSTR* Path/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Path"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Path /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_Path(void)
{
  BSTR Path;
  this->get_Path((BSTR*)&Path);
  return Path;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Assistant(Office_xp::Assistant** Assistant/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Assistant"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::Assistant**)Assistant /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::Assistant* __fastcall
_ApplicationDispT<T>::get_Assistant(void)
{
  Office_xp::Assistant* Assistant;
  this->get_Assistant((Office_xp::Assistant**)&Assistant);
  return Assistant;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_FileSearch(Office_xp::FileSearch** FileSearch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileSearch"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::FileSearch**)FileSearch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::FileSearch* __fastcall
_ApplicationDispT<T>::get_FileSearch(void)
{
  Office_xp::FileSearch* FileSearch;
  this->get_FileSearch((Office_xp::FileSearch**)&FileSearch);
  return FileSearch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_FileFind(Office_xp::IFind** FileFind/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileFind"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::IFind**)FileFind /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::IFind* __fastcall
_ApplicationDispT<T>::get_FileFind(void)
{
  Office_xp::IFind* FileFind;
  this->get_FileFind((Office_xp::IFind**)&FileFind);
  return FileFind;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Build(BSTR* Build/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Build"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Build /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_Build(void)
{
  BSTR Build;
  this->get_Build((BSTR*)&Build);
  return Build;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Version(BSTR* Version/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Version /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_Version(void)
{
  BSTR Version;
  this->get_Version((BSTR*)&Version);
  return Version;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_OperatingSystem(BSTR* OperatingSystem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OperatingSystem"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OperatingSystem /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_OperatingSystem(void)
{
  BSTR OperatingSystem;
  this->get_OperatingSystem((BSTR*)&OperatingSystem);
  return OperatingSystem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_ActivePrinter(BSTR* ActivePrinter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActivePrinter"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ActivePrinter /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_ActivePrinter(void)
{
  BSTR ActivePrinter;
  this->get_ActivePrinter((BSTR*)&ActivePrinter);
  return ActivePrinter;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Creator(long* Creator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Creator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ApplicationDispT<T>::get_Creator(void)
{
  long Creator;
  this->get_Creator((long*)&Creator);
  return Creator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_AddIns(Powerpoint_xp::AddIns** AddIns/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddIns"), DISPID(2018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::AddIns**)AddIns /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::AddIns* __fastcall
_ApplicationDispT<T>::get_AddIns(void)
{
  Powerpoint_xp::AddIns* AddIns;
  this->get_AddIns((Powerpoint_xp::AddIns**)&AddIns);
  return AddIns;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_VBE(Vbide_xp::VBE** VBE/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBE"), DISPID(2019));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_xp::VBE**)VBE /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_xp::VBE* __fastcall
_ApplicationDispT<T>::get_VBE(void)
{
  Vbide_xp::VBE* VBE;
  this->get_VBE((Vbide_xp::VBE**)&VBE);
  return VBE;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::Help(BSTR HelpFile/*[in,def,opt]*/, int ContextID/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Help"), DISPID(2020));
  TAutoArgs<2> _args;
  _args[1] = HelpFile /*[VT_BSTR:0]*/;
  _args[2] = ContextID /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::Quit()
{
  _TDispID _dispid(*this, OLETEXT("Quit"), DISPID(2021));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/, 
                          VARIANT* Run/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Run"), DISPID(2022));
  TAutoArgs<2> _args;
  _args[1] = MacroName /*[VT_BSTR:0]*/;
  _args[2] = safeArrayOfParams /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(Run /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
_ApplicationDispT<T>::Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/)
{
  VARIANT Run;
  this->Run(MacroName, safeArrayOfParams, (VARIANT*)&Run);
  return Run;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::PPFileDialog(Powerpoint_xp::PpFileDialogType Type/*[in]*/, 
                                   LPUNKNOWN* PPFileDialog/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PPFileDialog"), DISPID(2023));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(PPFileDialog /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_ApplicationDispT<T>::PPFileDialog(Powerpoint_xp::PpFileDialogType Type/*[in]*/)
{
  LPUNKNOWN PPFileDialog;
  this->PPFileDialog(Type, (LPUNKNOWN*)&PPFileDialog);
  return PPFileDialog;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::LaunchSpelling(Powerpoint_xp::DocumentWindow* pWindow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LaunchSpelling"), DISPID(2024));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::DocumentWindow*)pWindow /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(2025));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_ApplicationDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(2025));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(2026));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_ApplicationDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(2026));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2027));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_ApplicationDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2027));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2028));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_ApplicationDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2028));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_WindowState(Powerpoint_xp::PpWindowState* WindowState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowState"), DISPID(2029));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)WindowState /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpWindowState __fastcall
_ApplicationDispT<T>::get_WindowState(void)
{
  Powerpoint_xp::PpWindowState WindowState;
  this->get_WindowState((Powerpoint_xp::PpWindowState*)&WindowState);
  return WindowState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_WindowState(Powerpoint_xp::PpWindowState WindowState/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowState"), DISPID(2029));
  TAutoArgs<1> _args;
  _args[1] = (int)WindowState /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(2030));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
_ApplicationDispT<T>::get_Visible(void)
{
  Office_xp::MsoTriState Visible;
  this->get_Visible((Office_xp::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_Visible(Office_xp::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(2030));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(2031));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ApplicationDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Active(Office_xp::MsoTriState* Active/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(2032));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Active /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
_ApplicationDispT<T>::get_Active(void)
{
  Office_xp::MsoTriState Active;
  this->get_Active((Office_xp::MsoTriState*)&Active);
  return Active;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(2033));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_AnswerWizard(Office_xp::AnswerWizard** AnswerWizard/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnswerWizard"), DISPID(2034));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::AnswerWizard**)AnswerWizard /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::AnswerWizard* __fastcall
_ApplicationDispT<T>::get_AnswerWizard(void)
{
  Office_xp::AnswerWizard* AnswerWizard;
  this->get_AnswerWizard((Office_xp::AnswerWizard**)&AnswerWizard);
  return AnswerWizard;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_COMAddIns(Office_xp::COMAddIns** COMAddIns/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("COMAddIns"), DISPID(2035));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::COMAddIns**)COMAddIns /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::COMAddIns* __fastcall
_ApplicationDispT<T>::get_COMAddIns(void)
{
  Office_xp::COMAddIns* COMAddIns;
  this->get_COMAddIns((Office_xp::COMAddIns**)&COMAddIns);
  return COMAddIns;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_ProductCode(BSTR* ProductCode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProductCode"), DISPID(2036));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ProductCode /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_ProductCode(void)
{
  BSTR ProductCode;
  this->get_ProductCode((BSTR*)&ProductCode);
  return ProductCode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_DefaultWebOptions(Powerpoint_xp::DefaultWebOptions** DefaultWebOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultWebOptions"), DISPID(2037));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DefaultWebOptions**)DefaultWebOptions /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::DefaultWebOptions* __fastcall
_ApplicationDispT<T>::get_DefaultWebOptions(void)
{
  Powerpoint_xp::DefaultWebOptions* DefaultWebOptions;
  this->get_DefaultWebOptions((Powerpoint_xp::DefaultWebOptions**)&DefaultWebOptions);
  return DefaultWebOptions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_LanguageSettings(Office_xp::LanguageSettings** LanguageSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LanguageSettings"), DISPID(2038));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::LanguageSettings**)LanguageSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::LanguageSettings* __fastcall
_ApplicationDispT<T>::get_LanguageSettings(void)
{
  Office_xp::LanguageSettings* LanguageSettings;
  this->get_LanguageSettings((Office_xp::LanguageSettings**)&LanguageSettings);
  return LanguageSettings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_MsoDebugOptions(Office_xp::MsoDebugOptions** MsoDebugOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MsoDebugOptions"), DISPID(2039));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::MsoDebugOptions**)MsoDebugOptions /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoDebugOptions* __fastcall
_ApplicationDispT<T>::get_MsoDebugOptions(void)
{
  Office_xp::MsoDebugOptions* MsoDebugOptions;
  this->get_MsoDebugOptions((Office_xp::MsoDebugOptions**)&MsoDebugOptions);
  return MsoDebugOptions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_ShowWindowsInTaskbar(Office_xp::MsoTriState* ShowWindowsInTaskbar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowWindowsInTaskbar"), DISPID(2040));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowWindowsInTaskbar /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
_ApplicationDispT<T>::get_ShowWindowsInTaskbar(void)
{
  Office_xp::MsoTriState ShowWindowsInTaskbar;
  this->get_ShowWindowsInTaskbar((Office_xp::MsoTriState*)&ShowWindowsInTaskbar);
  return ShowWindowsInTaskbar;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_ShowWindowsInTaskbar(Office_xp::MsoTriState ShowWindowsInTaskbar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowWindowsInTaskbar"), DISPID(2040));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowWindowsInTaskbar /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Marker(LPUNKNOWN* Marker/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Marker"), DISPID(2041));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Marker /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_ApplicationDispT<T>::get_Marker(void)
{
  LPUNKNOWN Marker;
  this->get_Marker((LPUNKNOWN*)&Marker);
  return Marker;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_FeatureInstall(Office_xp::MsoFeatureInstall* FeatureInstall/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeatureInstall"), DISPID(2042));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FeatureInstall /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoFeatureInstall __fastcall
_ApplicationDispT<T>::get_FeatureInstall(void)
{
  Office_xp::MsoFeatureInstall FeatureInstall;
  this->get_FeatureInstall((Office_xp::MsoFeatureInstall*)&FeatureInstall);
  return FeatureInstall;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_FeatureInstall(Office_xp::MsoFeatureInstall FeatureInstall/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeatureInstall"), DISPID(2042));
  TAutoArgs<1> _args;
  _args[1] = (int)FeatureInstall /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::GetOptionFlag(long Option/*[in]*/, VARIANT_BOOL Persist/*[in,def,opt]*/, 
                                    VARIANT_BOOL* GetOptionFlag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetOptionFlag"), DISPID(2043));
  TAutoArgs<2> _args;
  _args[1] = Option /*[VT_I4:0]*/;
  _args[2] = Persist /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(GetOptionFlag /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ApplicationDispT<T>::GetOptionFlag(long Option/*[in]*/, VARIANT_BOOL Persist/*[in,def,opt]*/)
{
  VARIANT_BOOL GetOptionFlag;
  this->GetOptionFlag(Option, Persist, (VARIANT_BOOL*)&GetOptionFlag);
  return GetOptionFlag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::SetOptionFlag(long Option/*[in]*/, VARIANT_BOOL State/*[in]*/, 
                                    VARIANT_BOOL Persist/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetOptionFlag"), DISPID(2044));
  TAutoArgs<3> _args;
  _args[1] = Option /*[VT_I4:0]*/;
  _args[2] = State /*[VT_BOOL:0]*/;
  _args[3] = Persist /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_FileDialog(Office_xp::MsoFileDialogType Type/*[in]*/, 
                                     Office_xp::FileDialog** FileDialog/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileDialog"), DISPID(2045));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::FileDialog**)FileDialog /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::FileDialog* __fastcall
_ApplicationDispT<T>::get_FileDialog(Office_xp::MsoFileDialogType Type/*[in]*/)
{
  Office_xp::FileDialog* FileDialog;
  this->get_FileDialog(Type, (Office_xp::FileDialog**)&FileDialog);
  return FileDialog;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_DisplayGridLines(Office_xp::MsoTriState* DisplayGridLines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayGridLines"), DISPID(2046));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayGridLines /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
_ApplicationDispT<T>::get_DisplayGridLines(void)
{
  Office_xp::MsoTriState DisplayGridLines;
  this->get_DisplayGridLines((Office_xp::MsoTriState*)&DisplayGridLines);
  return DisplayGridLines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_DisplayGridLines(Office_xp::MsoTriState DisplayGridLines/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayGridLines"), DISPID(2046));
  TAutoArgs<1> _args;
  _args[1] = (int)DisplayGridLines /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_AutomationSecurity(Office_xp::MsoAutomationSecurity* AutomationSecurity/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutomationSecurity"), DISPID(2047));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutomationSecurity /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoAutomationSecurity __fastcall
_ApplicationDispT<T>::get_AutomationSecurity(void)
{
  Office_xp::MsoAutomationSecurity AutomationSecurity;
  this->get_AutomationSecurity((Office_xp::MsoAutomationSecurity*)&AutomationSecurity);
  return AutomationSecurity;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_AutomationSecurity(Office_xp::MsoAutomationSecurity AutomationSecurity/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutomationSecurity"), DISPID(2047));
  TAutoArgs<1> _args;
  _args[1] = (int)AutomationSecurity /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_NewPresentation(Office_xp::NewFile** NewPresentation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewPresentation"), DISPID(2048));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::NewFile**)NewPresentation /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::NewFile* __fastcall
_ApplicationDispT<T>::get_NewPresentation(void)
{
  Office_xp::NewFile* NewPresentation;
  this->get_NewPresentation((Office_xp::NewFile**)&NewPresentation);
  return NewPresentation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_DisplayAlerts(Powerpoint_xp::PpAlertLevel* DisplayAlerts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayAlerts"), DISPID(2049));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayAlerts /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpAlertLevel __fastcall
_ApplicationDispT<T>::get_DisplayAlerts(void)
{
  Powerpoint_xp::PpAlertLevel DisplayAlerts;
  this->get_DisplayAlerts((Powerpoint_xp::PpAlertLevel*)&DisplayAlerts);
  return DisplayAlerts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_DisplayAlerts(Powerpoint_xp::PpAlertLevel DisplayAlerts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayAlerts"), DISPID(2049));
  TAutoArgs<1> _args;
  _args[1] = (int)DisplayAlerts /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_ShowStartupDialog(Office_xp::MsoTriState* ShowStartupDialog/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowStartupDialog"), DISPID(2050));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowStartupDialog /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
_ApplicationDispT<T>::get_ShowStartupDialog(void)
{
  Office_xp::MsoTriState ShowStartupDialog;
  this->get_ShowStartupDialog((Office_xp::MsoTriState*)&ShowStartupDialog);
  return ShowStartupDialog;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_ShowStartupDialog(Office_xp::MsoTriState ShowStartupDialog/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowStartupDialog"), DISPID(2050));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowStartupDialog /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::SetPerfMarker(int Marker/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPerfMarker"), DISPID(2051));
  TAutoArgs<1> _args;
  _args[1] = Marker /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_AutoCorrect(Powerpoint_xp::AutoCorrect** AutoCorrect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoCorrect"), DISPID(2052));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::AutoCorrect**)AutoCorrect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::AutoCorrect* __fastcall
_ApplicationDispT<T>::get_AutoCorrect(void)
{
  Powerpoint_xp::AutoCorrect* AutoCorrect;
  this->get_AutoCorrect((Powerpoint_xp::AutoCorrect**)&AutoCorrect);
  return AutoCorrect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Options(Powerpoint_xp::Options** Options/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Options"), DISPID(2053));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Options**)Options /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Options* __fastcall
_ApplicationDispT<T>::get_Options(void)
{
  Powerpoint_xp::Options* Options;
  this->get_Options((Powerpoint_xp::Options**)&Options);
  return Options;
}

// *********************************************************************//
// SmartIntf: TCOM_Global
// Interface: _Global
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_ActivePresentation(Powerpoint_xp::PowerPointPresentation** ActivePresentation/*[out,retval]*/)
{
  return (*this)->get_ActivePresentation(ActivePresentation);
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_ActivePresentation(Powerpoint_xp::PowerPointPresentationPtr* ActivePresentation/*[out,retval]*/)
{
  return (*this)->get_ActivePresentation(PowerPointPresentation**)ActivePresentation);
}

template <class T> Powerpoint_xp::PowerPointPresentationPtr __fastcall
TCOM_GlobalT<T>::get_ActivePresentation(void)
{
  Powerpoint_xp::PowerPointPresentation* ActivePresentation;
  OLECHECK(this->get_ActivePresentation((Powerpoint_xp::PowerPointPresentation**)&ActivePresentation));
  return (Powerpoint_xp::PowerPointPresentationPtr)ActivePresentation;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_ActiveWindow(Powerpoint_xp::DocumentWindow** ActiveWindow/*[out,retval]*/)
{
  return (*this)->get_ActiveWindow(ActiveWindow);
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_ActiveWindow(Powerpoint_xp::DocumentWindowPtr* ActiveWindow/*[out,retval]*/)
{
  return (*this)->get_ActiveWindow(DocumentWindow**)ActiveWindow);
}

template <class T> Powerpoint_xp::DocumentWindowPtr __fastcall
TCOM_GlobalT<T>::get_ActiveWindow(void)
{
  Powerpoint_xp::DocumentWindow* ActiveWindow;
  OLECHECK(this->get_ActiveWindow((Powerpoint_xp::DocumentWindow**)&ActiveWindow));
  return (Powerpoint_xp::DocumentWindowPtr)ActiveWindow;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_AddIns(Powerpoint_xp::AddIns** AddIns/*[out,retval]*/)
{
  return (*this)->get_AddIns(AddIns);
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_AddIns(Powerpoint_xp::AddInsPtr* AddIns/*[out,retval]*/)
{
  return (*this)->get_AddIns(AddIns**)AddIns);
}

template <class T> Powerpoint_xp::AddInsPtr __fastcall
TCOM_GlobalT<T>::get_AddIns(void)
{
  Powerpoint_xp::AddIns* AddIns;
  OLECHECK(this->get_AddIns((Powerpoint_xp::AddIns**)&AddIns));
  return (Powerpoint_xp::AddInsPtr)AddIns;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  return (*this)->get_Application(Application);
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_Application(Powerpoint_xp::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  return (*this)->get_Application(PowerPointApplication**)Application);
}

template <class T> Powerpoint_xp::PowerPointApplicationPtr __fastcall
TCOM_GlobalT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
  return (Powerpoint_xp::PowerPointApplicationPtr)Application;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_Assistant(Office_xp::Assistant** Assistant/*[out,retval]*/)
{
  return (*this)->get_Assistant(Assistant);
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_Assistant(Office_xp::AssistantPtr* Assistant/*[out,retval]*/)
{
  return (*this)->get_Assistant(Assistant**)Assistant);
}

template <class T> Office_xp::AssistantPtr __fastcall
TCOM_GlobalT<T>::get_Assistant(void)
{
  Office_xp::Assistant* Assistant;
  OLECHECK(this->get_Assistant((Office_xp::Assistant**)&Assistant));
  return (Office_xp::AssistantPtr)Assistant;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_Dialogs(LPUNKNOWN* Dialogs/*[out,retval]*/)
{
  return (*this)->get_Dialogs(Dialogs);
}

template <class T> LPUNKNOWN __fastcall
TCOM_GlobalT<T>::get_Dialogs(void)
{
  LPUNKNOWN Dialogs;
  OLECHECK(this->get_Dialogs((LPUNKNOWN*)&Dialogs));
  return Dialogs;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_Presentations(Powerpoint_xp::Presentations** Presentations/*[out,retval]*/)
{
  return (*this)->get_Presentations(Presentations);
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_Presentations(Powerpoint_xp::PresentationsPtr* Presentations/*[out,retval]*/)
{
  return (*this)->get_Presentations(Presentations**)Presentations);
}

template <class T> Powerpoint_xp::PresentationsPtr __fastcall
TCOM_GlobalT<T>::get_Presentations(void)
{
  Powerpoint_xp::Presentations* Presentations;
  OLECHECK(this->get_Presentations((Powerpoint_xp::Presentations**)&Presentations));
  return (Powerpoint_xp::PresentationsPtr)Presentations;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_SlideShowWindows(Powerpoint_xp::SlideShowWindows** SlideShowWindows/*[out,retval]*/)
{
  return (*this)->get_SlideShowWindows(SlideShowWindows);
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_SlideShowWindows(Powerpoint_xp::SlideShowWindowsPtr* SlideShowWindows/*[out,retval]*/)
{
  return (*this)->get_SlideShowWindows(SlideShowWindows**)SlideShowWindows);
}

template <class T> Powerpoint_xp::SlideShowWindowsPtr __fastcall
TCOM_GlobalT<T>::get_SlideShowWindows(void)
{
  Powerpoint_xp::SlideShowWindows* SlideShowWindows;
  OLECHECK(this->get_SlideShowWindows((Powerpoint_xp::SlideShowWindows**)&SlideShowWindows));
  return (Powerpoint_xp::SlideShowWindowsPtr)SlideShowWindows;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_Windows(Powerpoint_xp::DocumentWindows** Windows/*[out,retval]*/)
{
  return (*this)->get_Windows(Windows);
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_Windows(Powerpoint_xp::DocumentWindowsPtr* Windows/*[out,retval]*/)
{
  return (*this)->get_Windows(DocumentWindows**)Windows);
}

template <class T> Powerpoint_xp::DocumentWindowsPtr __fastcall
TCOM_GlobalT<T>::get_Windows(void)
{
  Powerpoint_xp::DocumentWindows* Windows;
  OLECHECK(this->get_Windows((Powerpoint_xp::DocumentWindows**)&Windows));
  return (Powerpoint_xp::DocumentWindowsPtr)Windows;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_CommandBars(Office_xp::CommandBars** CommandBars/*[out,retval]*/)
{
  return (*this)->get_CommandBars(CommandBars);
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_CommandBars(Office_xp::CommandBarsPtr* CommandBars/*[out,retval]*/)
{
  return (*this)->get_CommandBars(CommandBars**)CommandBars);
}

template <class T> Office_xp::CommandBarsPtr __fastcall
TCOM_GlobalT<T>::get_CommandBars(void)
{
  Office_xp::CommandBars* CommandBars;
  OLECHECK(this->get_CommandBars((Office_xp::CommandBars**)&CommandBars));
  return (Office_xp::CommandBarsPtr)CommandBars;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_AnswerWizard(Office_xp::AnswerWizard** AnswerWizard/*[out,retval]*/)
{
  return (*this)->get_AnswerWizard(AnswerWizard);
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_AnswerWizard(Office_xp::AnswerWizardPtr* AnswerWizard/*[out,retval]*/)
{
  return (*this)->get_AnswerWizard(AnswerWizard**)AnswerWizard);
}

template <class T> Office_xp::AnswerWizardPtr __fastcall
TCOM_GlobalT<T>::get_AnswerWizard(void)
{
  Office_xp::AnswerWizard* AnswerWizard;
  OLECHECK(this->get_AnswerWizard((Office_xp::AnswerWizard**)&AnswerWizard));
  return (Office_xp::AnswerWizardPtr)AnswerWizard;
}

// *********************************************************************//
// DispIntf:  _Global
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493451-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_ActivePresentation(Powerpoint_xp::PowerPointPresentation** ActivePresentation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActivePresentation"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointPresentation**)ActivePresentation /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointPresentation* __fastcall
_GlobalDispT<T>::get_ActivePresentation(void)
{
  Powerpoint_xp::PowerPointPresentation* ActivePresentation;
  this->get_ActivePresentation((Powerpoint_xp::PowerPointPresentation**)&ActivePresentation);
  return ActivePresentation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_ActiveWindow(Powerpoint_xp::DocumentWindow** ActiveWindow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveWindow"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DocumentWindow**)ActiveWindow /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::DocumentWindow* __fastcall
_GlobalDispT<T>::get_ActiveWindow(void)
{
  Powerpoint_xp::DocumentWindow* ActiveWindow;
  this->get_ActiveWindow((Powerpoint_xp::DocumentWindow**)&ActiveWindow);
  return ActiveWindow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_AddIns(Powerpoint_xp::AddIns** AddIns/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddIns"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::AddIns**)AddIns /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::AddIns* __fastcall
_GlobalDispT<T>::get_AddIns(void)
{
  Powerpoint_xp::AddIns* AddIns;
  this->get_AddIns((Powerpoint_xp::AddIns**)&AddIns);
  return AddIns;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
_GlobalDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_Assistant(Office_xp::Assistant** Assistant/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Assistant"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::Assistant**)Assistant /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::Assistant* __fastcall
_GlobalDispT<T>::get_Assistant(void)
{
  Office_xp::Assistant* Assistant;
  this->get_Assistant((Office_xp::Assistant**)&Assistant);
  return Assistant;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_Dialogs(LPUNKNOWN* Dialogs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Dialogs"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Dialogs /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_GlobalDispT<T>::get_Dialogs(void)
{
  LPUNKNOWN Dialogs;
  this->get_Dialogs((LPUNKNOWN*)&Dialogs);
  return Dialogs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_Presentations(Powerpoint_xp::Presentations** Presentations/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Presentations"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Presentations**)Presentations /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Presentations* __fastcall
_GlobalDispT<T>::get_Presentations(void)
{
  Powerpoint_xp::Presentations* Presentations;
  this->get_Presentations((Powerpoint_xp::Presentations**)&Presentations);
  return Presentations;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_SlideShowWindows(Powerpoint_xp::SlideShowWindows** SlideShowWindows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowWindows"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SlideShowWindows**)SlideShowWindows /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::SlideShowWindows* __fastcall
_GlobalDispT<T>::get_SlideShowWindows(void)
{
  Powerpoint_xp::SlideShowWindows* SlideShowWindows;
  this->get_SlideShowWindows((Powerpoint_xp::SlideShowWindows**)&SlideShowWindows);
  return SlideShowWindows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_Windows(Powerpoint_xp::DocumentWindows** Windows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Windows"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DocumentWindows**)Windows /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::DocumentWindows* __fastcall
_GlobalDispT<T>::get_Windows(void)
{
  Powerpoint_xp::DocumentWindows* Windows;
  this->get_Windows((Powerpoint_xp::DocumentWindows**)&Windows);
  return Windows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_CommandBars(Office_xp::CommandBars** CommandBars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandBars"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::CommandBars**)CommandBars /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::CommandBars* __fastcall
_GlobalDispT<T>::get_CommandBars(void)
{
  Office_xp::CommandBars* CommandBars;
  this->get_CommandBars((Office_xp::CommandBars**)&CommandBars);
  return CommandBars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_AnswerWizard(Office_xp::AnswerWizard** AnswerWizard/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnswerWizard"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::AnswerWizard**)AnswerWizard /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::AnswerWizard* __fastcall
_GlobalDispT<T>::get_AnswerWizard(void)
{
  Office_xp::AnswerWizard* AnswerWizard;
  this->get_AnswerWizard((Office_xp::AnswerWizard**)&AnswerWizard);
  return AnswerWizard;
}

// *********************************************************************//
// DispIntf:  ColorFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493452-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ColorFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ColorFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ColorFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_rgb(Office_xp::MsoRGBType* rgb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RGB"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RGB /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoRGBType __fastcall
ColorFormatDispT<T>::get_rgb(void)
{
  Office_xp::MsoRGBType RGB;
  this->get_rgb((Office_xp::MsoRGBType*)&RGB);
  return RGB;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::set_rgb(Office_xp::MsoRGBType rgb/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RGB"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = RGB /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_Type(Office_xp::MsoColorType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoColorType __fastcall
ColorFormatDispT<T>::get_Type(void)
{
  Office_xp::MsoColorType Type;
  this->get_Type((Office_xp::MsoColorType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_SchemeColor(Powerpoint_xp::PpColorSchemeIndex* SchemeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SchemeColor"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SchemeColor /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpColorSchemeIndex __fastcall
ColorFormatDispT<T>::get_SchemeColor(void)
{
  Powerpoint_xp::PpColorSchemeIndex SchemeColor;
  this->get_SchemeColor((Powerpoint_xp::PpColorSchemeIndex*)&SchemeColor);
  return SchemeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::set_SchemeColor(Powerpoint_xp::PpColorSchemeIndex SchemeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SchemeColor"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)SchemeColor /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_TintAndShade(float* pValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TintAndShade"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pValue /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ColorFormatDispT<T>::get_TintAndShade(void)
{
  float pValue;
  this->get_TintAndShade((float*)&pValue);
  return pValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::set_TintAndShade(float pValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TintAndShade"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pValue /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  SlideShowWindow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493453-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
SlideShowWindowDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SlideShowWindowDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_View(Powerpoint_xp::SlideShowView** View/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SlideShowView**)View /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::SlideShowView* __fastcall
SlideShowWindowDispT<T>::get_View(void)
{
  Powerpoint_xp::SlideShowView* View;
  this->get_View((Powerpoint_xp::SlideShowView**)&View);
  return View;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_Presentation(Powerpoint_xp::PowerPointPresentation** Presentation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Presentation"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointPresentation**)Presentation /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointPresentation* __fastcall
SlideShowWindowDispT<T>::get_Presentation(void)
{
  Powerpoint_xp::PowerPointPresentation* Presentation;
  this->get_Presentation((Powerpoint_xp::PowerPointPresentation**)&Presentation);
  return Presentation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_IsFullScreen(Office_xp::MsoTriState* IsFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsFullScreen"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)IsFullScreen /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
SlideShowWindowDispT<T>::get_IsFullScreen(void)
{
  Office_xp::MsoTriState IsFullScreen;
  this->get_IsFullScreen((Office_xp::MsoTriState*)&IsFullScreen);
  return IsFullScreen;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
SlideShowWindowDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
SlideShowWindowDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
SlideShowWindowDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
SlideShowWindowDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SlideShowWindowDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_Active(Office_xp::MsoTriState* Active/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Active /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
SlideShowWindowDispT<T>::get_Active(void)
{
  Office_xp::MsoTriState Active;
  this->get_Active((Office_xp::MsoTriState*)&Active);
  return Active;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(2012));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  Selection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493454-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
SelectionDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SelectionDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::Cut()
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(2003));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::Copy()
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(2004));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2005));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::Unselect()
{
  _TDispID _dispid(*this, OLETEXT("Unselect"), DISPID(2006));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::get_Type(Powerpoint_xp::PpSelectionType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpSelectionType __fastcall
SelectionDispT<T>::get_Type(void)
{
  Powerpoint_xp::PpSelectionType Type;
  this->get_Type((Powerpoint_xp::PpSelectionType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::get_SlideRange(Powerpoint_xp::SlideRange** SlideRange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideRange"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SlideRange**)SlideRange /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::SlideRange* __fastcall
SelectionDispT<T>::get_SlideRange(void)
{
  Powerpoint_xp::SlideRange* SlideRange;
  this->get_SlideRange((Powerpoint_xp::SlideRange**)&SlideRange);
  return SlideRange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::get_ShapeRange(Powerpoint_xp::ShapeRange** ShapeRange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShapeRange"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ShapeRange**)ShapeRange /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ShapeRange* __fastcall
SelectionDispT<T>::get_ShapeRange(void)
{
  Powerpoint_xp::ShapeRange* ShapeRange;
  this->get_ShapeRange((Powerpoint_xp::ShapeRange**)&ShapeRange);
  return ShapeRange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::get_TextRange(Powerpoint_xp::TextRange** TextRange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextRange"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextRange**)TextRange /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::TextRange* __fastcall
SelectionDispT<T>::get_TextRange(void)
{
  Powerpoint_xp::TextRange* TextRange;
  this->get_TextRange((Powerpoint_xp::TextRange**)&TextRange);
  return TextRange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::get_ChildShapeRange(Powerpoint_xp::ShapeRange** ChildShapeRange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChildShapeRange"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ShapeRange**)ChildShapeRange /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ShapeRange* __fastcall
SelectionDispT<T>::get_ChildShapeRange(void)
{
  Powerpoint_xp::ShapeRange* ChildShapeRange;
  this->get_ChildShapeRange((Powerpoint_xp::ShapeRange**)&ChildShapeRange);
  return ChildShapeRange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::get_HasChildShapeRange(VARIANT_BOOL* HasChildShapeRange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasChildShapeRange"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HasChildShapeRange /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
SelectionDispT<T>::get_HasChildShapeRange(void)
{
  VARIANT_BOOL HasChildShapeRange;
  this->get_HasChildShapeRange((VARIANT_BOOL*)&HasChildShapeRange);
  return HasChildShapeRange;
}

// *********************************************************************//
// DispIntf:  DocumentWindows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493455-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
DocumentWindowsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
DocumentWindowsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowsDispT<T>::Item(int Index/*[in]*/, 
                              Powerpoint_xp::DocumentWindow** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DocumentWindow**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::DocumentWindow* __fastcall
DocumentWindowsDispT<T>::Item(int Index/*[in]*/)
{
  Powerpoint_xp::DocumentWindow* Item;
  this->Item(Index, (Powerpoint_xp::DocumentWindow**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowsDispT<T>::Arrange(Powerpoint_xp::PpArrangeStyle arrangeStyle/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Arrange"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)arrangeStyle /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
DocumentWindowsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
DocumentWindowsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
DocumentWindowsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  SlideShowWindows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493456-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
SlideShowWindowsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SlideShowWindowsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowsDispT<T>::Item(int Index/*[in]*/, 
                               Powerpoint_xp::SlideShowWindow** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SlideShowWindow**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::SlideShowWindow* __fastcall
SlideShowWindowsDispT<T>::Item(int Index/*[in]*/)
{
  Powerpoint_xp::SlideShowWindow* Item;
  this->Item(Index, (Powerpoint_xp::SlideShowWindow**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
SlideShowWindowsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
SlideShowWindowsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SlideShowWindowsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  DocumentWindow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493457-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
DocumentWindowDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
DocumentWindowDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Selection(Powerpoint_xp::Selection** Selection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selection"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Selection**)Selection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Selection* __fastcall
DocumentWindowDispT<T>::get_Selection(void)
{
  Powerpoint_xp::Selection* Selection;
  this->get_Selection((Powerpoint_xp::Selection**)&Selection);
  return Selection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_View(Powerpoint_xp::View** View/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::View**)View /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::View* __fastcall
DocumentWindowDispT<T>::get_View(void)
{
  Powerpoint_xp::View* View;
  this->get_View((Powerpoint_xp::View**)&View);
  return View;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Presentation(Powerpoint_xp::PowerPointPresentation** Presentation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Presentation"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointPresentation**)Presentation /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointPresentation* __fastcall
DocumentWindowDispT<T>::get_Presentation(void)
{
  Powerpoint_xp::PowerPointPresentation* Presentation;
  this->get_Presentation((Powerpoint_xp::PowerPointPresentation**)&Presentation);
  return Presentation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_ViewType(Powerpoint_xp::PpViewType* ViewType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewType"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ViewType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpViewType __fastcall
DocumentWindowDispT<T>::get_ViewType(void)
{
  Powerpoint_xp::PpViewType ViewType;
  this->get_ViewType((Powerpoint_xp::PpViewType*)&ViewType);
  return ViewType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::set_ViewType(Powerpoint_xp::PpViewType ViewType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewType"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)ViewType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_BlackAndWhite(Office_xp::MsoTriState* BlackAndWhite/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackAndWhite"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BlackAndWhite /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
DocumentWindowDispT<T>::get_BlackAndWhite(void)
{
  Office_xp::MsoTriState BlackAndWhite;
  this->get_BlackAndWhite((Office_xp::MsoTriState*)&BlackAndWhite);
  return BlackAndWhite;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::set_BlackAndWhite(Office_xp::MsoTriState BlackAndWhite/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackAndWhite"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)BlackAndWhite /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Active(Office_xp::MsoTriState* Active/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Active /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
DocumentWindowDispT<T>::get_Active(void)
{
  Office_xp::MsoTriState Active;
  this->get_Active((Office_xp::MsoTriState*)&Active);
  return Active;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_WindowState(Powerpoint_xp::PpWindowState* WindowState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowState"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)WindowState /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpWindowState __fastcall
DocumentWindowDispT<T>::get_WindowState(void)
{
  Powerpoint_xp::PpWindowState WindowState;
  this->get_WindowState((Powerpoint_xp::PpWindowState*)&WindowState);
  return WindowState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::set_WindowState(Powerpoint_xp::PpWindowState WindowState/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowState"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)WindowState /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
DocumentWindowDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
DocumentWindowDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
DocumentWindowDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
DocumentWindowDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2012));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
DocumentWindowDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::FitToPage()
{
  _TDispID _dispid(*this, OLETEXT("FitToPage"), DISPID(2014));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(2015));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::LargeScroll(int Down/*[in,def,opt]*/, int Up/*[in,def,opt]*/, 
                                    int ToRight/*[in,def,opt]*/, int ToLeft/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("LargeScroll"), DISPID(2016));
  TAutoArgs<4> _args;
  _args[1] = Down /*[VT_INT:0]*/;
  _args[2] = Up /*[VT_INT:0]*/;
  _args[3] = ToRight /*[VT_INT:0]*/;
  _args[4] = ToLeft /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::SmallScroll(int Down/*[in,def,opt]*/, int Up/*[in,def,opt]*/, 
                                    int ToRight/*[in,def,opt]*/, int ToLeft/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmallScroll"), DISPID(2017));
  TAutoArgs<4> _args;
  _args[1] = Down /*[VT_INT:0]*/;
  _args[2] = Up /*[VT_INT:0]*/;
  _args[3] = ToRight /*[VT_INT:0]*/;
  _args[4] = ToLeft /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::NewWindow(Powerpoint_xp::DocumentWindow** NewWindow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewWindow"), DISPID(2018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DocumentWindow**)NewWindow /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::DocumentWindow* __fastcall
DocumentWindowDispT<T>::NewWindow(void)
{
  Powerpoint_xp::DocumentWindow* NewWindow;
  this->NewWindow((Powerpoint_xp::DocumentWindow**)&NewWindow);
  return NewWindow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::Close()
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(2019));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(2020));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
DocumentWindowDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_ActivePane(Powerpoint_xp::Pane** ActivePane/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActivePane"), DISPID(2021));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Pane**)ActivePane /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Pane* __fastcall
DocumentWindowDispT<T>::get_ActivePane(void)
{
  Powerpoint_xp::Pane* ActivePane;
  this->get_ActivePane((Powerpoint_xp::Pane**)&ActivePane);
  return ActivePane;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Panes(Powerpoint_xp::Panes** Panes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Panes"), DISPID(2022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Panes**)Panes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Panes* __fastcall
DocumentWindowDispT<T>::get_Panes(void)
{
  Powerpoint_xp::Panes* Panes;
  this->get_Panes((Powerpoint_xp::Panes**)&Panes);
  return Panes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_SplitVertical(long* SplitVertical/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SplitVertical"), DISPID(2023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SplitVertical /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
DocumentWindowDispT<T>::get_SplitVertical(void)
{
  long SplitVertical;
  this->get_SplitVertical((long*)&SplitVertical);
  return SplitVertical;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::set_SplitVertical(long SplitVertical/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SplitVertical"), DISPID(2023));
  TAutoArgs<1> _args;
  _args[1] = SplitVertical /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_SplitHorizontal(long* SplitHorizontal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SplitHorizontal"), DISPID(2024));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SplitHorizontal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
DocumentWindowDispT<T>::get_SplitHorizontal(void)
{
  long SplitHorizontal;
  this->get_SplitHorizontal((long*)&SplitHorizontal);
  return SplitHorizontal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::set_SplitHorizontal(long SplitHorizontal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SplitHorizontal"), DISPID(2024));
  TAutoArgs<1> _args;
  _args[1] = SplitHorizontal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::RangeFromPoint(int X/*[in]*/, int Y/*[in]*/, 
                                       LPDISPATCH* RangeFromPoint/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeFromPoint"), DISPID(2025));
  TAutoArgs<2> _args;
  _args[1] = X /*[VT_INT:0]*/;
  _args[2] = Y /*[VT_INT:0]*/;
  return OutRetValSetterPtr(RangeFromPoint /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
DocumentWindowDispT<T>::RangeFromPoint(int X/*[in]*/, int Y/*[in]*/)
{
  LPDISPATCH RangeFromPoint;
  this->RangeFromPoint(X, Y, (LPDISPATCH*)&RangeFromPoint);
  return RangeFromPoint;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::PointsToScreenPixelsX(float Points/*[in]*/, 
                                              int* PointsToScreenPixelsX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PointsToScreenPixelsX"), DISPID(2026));
  TAutoArgs<1> _args;
  _args[1] = Points /*[VT_R4:0]*/;
  return OutRetValSetterPtr(PointsToScreenPixelsX /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
DocumentWindowDispT<T>::PointsToScreenPixelsX(float Points/*[in]*/)
{
  int PointsToScreenPixelsX;
  this->PointsToScreenPixelsX(Points, (int*)&PointsToScreenPixelsX);
  return PointsToScreenPixelsX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::PointsToScreenPixelsY(float Points/*[in]*/, 
                                              int* PointsToScreenPixelsY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PointsToScreenPixelsY"), DISPID(2027));
  TAutoArgs<1> _args;
  _args[1] = Points /*[VT_R4:0]*/;
  return OutRetValSetterPtr(PointsToScreenPixelsY /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
DocumentWindowDispT<T>::PointsToScreenPixelsY(float Points/*[in]*/)
{
  int PointsToScreenPixelsY;
  this->PointsToScreenPixelsY(Points, (int*)&PointsToScreenPixelsY);
  return PointsToScreenPixelsY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::ScrollIntoView(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                       float Height/*[in]*/, 
                                       Office_xp::MsoTriState Start/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollIntoView"), DISPID(2028));
  TAutoArgs<5> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  _args[5] = (int)Start /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  View
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493458-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
ViewDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ViewDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::get_Type(Powerpoint_xp::PpViewType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpViewType __fastcall
ViewDispT<T>::get_Type(void)
{
  Powerpoint_xp::PpViewType Type;
  this->get_Type((Powerpoint_xp::PpViewType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::get_Zoom(int* Zoom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Zoom"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Zoom /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ViewDispT<T>::get_Zoom(void)
{
  int Zoom;
  this->get_Zoom((int*)&Zoom);
  return Zoom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::set_Zoom(int Zoom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Zoom"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = Zoom /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::Paste()
{
  _TDispID _dispid(*this, OLETEXT("Paste"), DISPID(2005));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::get_Slide(LPDISPATCH* Slide/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Slide"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Slide /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ViewDispT<T>::get_Slide(void)
{
  LPDISPATCH Slide;
  this->get_Slide((LPDISPATCH*)&Slide);
  return Slide;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::set_Slide(LPDISPATCH Slide/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Slide"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = Slide /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::GotoSlide(int Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GotoSlide"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::get_DisplaySlideMiniature(Office_xp::MsoTriState* DisplaySlideMiniature/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplaySlideMiniature"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplaySlideMiniature /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ViewDispT<T>::get_DisplaySlideMiniature(void)
{
  Office_xp::MsoTriState DisplaySlideMiniature;
  this->get_DisplaySlideMiniature((Office_xp::MsoTriState*)&DisplaySlideMiniature);
  return DisplaySlideMiniature;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::set_DisplaySlideMiniature(Office_xp::MsoTriState DisplaySlideMiniature/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplaySlideMiniature"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)DisplaySlideMiniature /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::get_ZoomToFit(Office_xp::MsoTriState* ZoomToFit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZoomToFit"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ZoomToFit /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ViewDispT<T>::get_ZoomToFit(void)
{
  Office_xp::MsoTriState ZoomToFit;
  this->get_ZoomToFit((Office_xp::MsoTriState*)&ZoomToFit);
  return ZoomToFit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::set_ZoomToFit(Office_xp::MsoTriState ZoomToFit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZoomToFit"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)ZoomToFit /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::PasteSpecial(Powerpoint_xp::PpPasteDataType DataType/*[in,def,opt]*/, 
                           Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                           BSTR IconFileName/*[in,def,opt]*/, int IconIndex/*[in,def,opt]*/, 
                           BSTR IconLabel/*[in,def,opt]*/, 
                           Office_xp::MsoTriState Link/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("PasteSpecial"), DISPID(2010));
  TAutoArgs<6> _args;
  _args[1] = (int)DataType /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)DisplayAsIcon /*[VT_USERDEFINED:0]*/;
  _args[3] = IconFileName /*[VT_BSTR:0]*/;
  _args[4] = IconIndex /*[VT_INT:0]*/;
  _args[5] = IconLabel /*[VT_BSTR:0]*/;
  _args[6] = (int)Link /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::get_PrintOptions(Powerpoint_xp::PrintOptions** PrintOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintOptions"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PrintOptions**)PrintOptions /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PrintOptions* __fastcall
ViewDispT<T>::get_PrintOptions(void)
{
  Powerpoint_xp::PrintOptions* PrintOptions;
  this->get_PrintOptions((Powerpoint_xp::PrintOptions**)&PrintOptions);
  return PrintOptions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::PrintOut(int From/*[in,def,opt]*/, int To/*[in,def,opt]*/, 
                       BSTR PrintToFile/*[in,def,opt]*/, int Copies/*[in,def,opt]*/, 
                       Office_xp::MsoTriState Collate/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintOut"), DISPID(2012));
  TAutoArgs<5> _args;
  _args[1] = From /*[VT_INT:0]*/;
  _args[2] = To /*[VT_INT:0]*/;
  _args[3] = PrintToFile /*[VT_BSTR:0]*/;
  _args[4] = Copies /*[VT_INT:0]*/;
  _args[5] = (int)Collate /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  SlideShowView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493459-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
SlideShowViewDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SlideShowViewDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_Zoom(int* Zoom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Zoom"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Zoom /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
SlideShowViewDispT<T>::get_Zoom(void)
{
  int Zoom;
  this->get_Zoom((int*)&Zoom);
  return Zoom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_Slide(Powerpoint_xp::PowerPointSlide** Slide/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Slide"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointSlide**)Slide /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointSlide* __fastcall
SlideShowViewDispT<T>::get_Slide(void)
{
  Powerpoint_xp::PowerPointSlide* Slide;
  this->get_Slide((Powerpoint_xp::PowerPointSlide**)&Slide);
  return Slide;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_PointerType(Powerpoint_xp::PpSlideShowPointerType* PointerType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PointerType"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PointerType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpSlideShowPointerType __fastcall
SlideShowViewDispT<T>::get_PointerType(void)
{
  Powerpoint_xp::PpSlideShowPointerType PointerType;
  this->get_PointerType((Powerpoint_xp::PpSlideShowPointerType*)&PointerType);
  return PointerType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::set_PointerType(Powerpoint_xp::PpSlideShowPointerType PointerType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PointerType"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)PointerType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_State(Powerpoint_xp::PpSlideShowState* State/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)State /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpSlideShowState __fastcall
SlideShowViewDispT<T>::get_State(void)
{
  Powerpoint_xp::PpSlideShowState State;
  this->get_State((Powerpoint_xp::PpSlideShowState*)&State);
  return State;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::set_State(Powerpoint_xp::PpSlideShowState State/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)State /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_AcceleratorsEnabled(Office_xp::MsoTriState* AcceleratorsEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorsEnabled"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AcceleratorsEnabled /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
SlideShowViewDispT<T>::get_AcceleratorsEnabled(void)
{
  Office_xp::MsoTriState AcceleratorsEnabled;
  this->get_AcceleratorsEnabled((Office_xp::MsoTriState*)&AcceleratorsEnabled);
  return AcceleratorsEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::set_AcceleratorsEnabled(Office_xp::MsoTriState AcceleratorsEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorsEnabled"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)AcceleratorsEnabled /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_PresentationElapsedTime(float* PresentationElapsedTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresentationElapsedTime"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PresentationElapsedTime /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
SlideShowViewDispT<T>::get_PresentationElapsedTime(void)
{
  float PresentationElapsedTime;
  this->get_PresentationElapsedTime((float*)&PresentationElapsedTime);
  return PresentationElapsedTime;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_SlideElapsedTime(float* SlideElapsedTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideElapsedTime"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideElapsedTime /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
SlideShowViewDispT<T>::get_SlideElapsedTime(void)
{
  float SlideElapsedTime;
  this->get_SlideElapsedTime((float*)&SlideElapsedTime);
  return SlideElapsedTime;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::set_SlideElapsedTime(float SlideElapsedTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideElapsedTime"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = SlideElapsedTime /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_LastSlideViewed(Powerpoint_xp::PowerPointSlide** LastSlideViewed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastSlideViewed"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointSlide**)LastSlideViewed /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointSlide* __fastcall
SlideShowViewDispT<T>::get_LastSlideViewed(void)
{
  Powerpoint_xp::PowerPointSlide* LastSlideViewed;
  this->get_LastSlideViewed((Powerpoint_xp::PowerPointSlide**)&LastSlideViewed);
  return LastSlideViewed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_AdvanceMode(Powerpoint_xp::PpSlideShowAdvanceMode* AdvanceMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceMode"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AdvanceMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpSlideShowAdvanceMode __fastcall
SlideShowViewDispT<T>::get_AdvanceMode(void)
{
  Powerpoint_xp::PpSlideShowAdvanceMode AdvanceMode;
  this->get_AdvanceMode((Powerpoint_xp::PpSlideShowAdvanceMode*)&AdvanceMode);
  return AdvanceMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_PointerColor(Powerpoint_xp::ColorFormat** PointerColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PointerColor"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorFormat**)PointerColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorFormat* __fastcall
SlideShowViewDispT<T>::get_PointerColor(void)
{
  Powerpoint_xp::ColorFormat* PointerColor;
  this->get_PointerColor((Powerpoint_xp::ColorFormat**)&PointerColor);
  return PointerColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_IsNamedShow(Office_xp::MsoTriState* IsNamedShow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsNamedShow"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)IsNamedShow /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
SlideShowViewDispT<T>::get_IsNamedShow(void)
{
  Office_xp::MsoTriState IsNamedShow;
  this->get_IsNamedShow((Office_xp::MsoTriState*)&IsNamedShow);
  return IsNamedShow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowName"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideShowName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SlideShowViewDispT<T>::get_SlideShowName(void)
{
  BSTR SlideShowName;
  this->get_SlideShowName((BSTR*)&SlideShowName);
  return SlideShowName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::DrawLine(float BeginX/*[in]*/, float BeginY/*[in]*/, float EndX/*[in]*/, 
                                float EndY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DrawLine"), DISPID(2015));
  TAutoArgs<4> _args;
  _args[1] = BeginX /*[VT_R4:0]*/;
  _args[2] = BeginY /*[VT_R4:0]*/;
  _args[3] = EndX /*[VT_R4:0]*/;
  _args[4] = EndY /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::EraseDrawing()
{
  _TDispID _dispid(*this, OLETEXT("EraseDrawing"), DISPID(2016));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::First()
{
  _TDispID _dispid(*this, OLETEXT("First"), DISPID(2017));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::Last()
{
  _TDispID _dispid(*this, OLETEXT("Last"), DISPID(2018));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::Next()
{
  _TDispID _dispid(*this, OLETEXT("Next"), DISPID(2019));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::Previous()
{
  _TDispID _dispid(*this, OLETEXT("Previous"), DISPID(2020));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::GotoSlide(int Index/*[in]*/, 
                                 Office_xp::MsoTriState ResetSlide/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("GotoSlide"), DISPID(2021));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  _args[2] = (int)ResetSlide /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::GotoNamedShow(BSTR SlideShowName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GotoNamedShow"), DISPID(2022));
  TAutoArgs<1> _args;
  _args[1] = SlideShowName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::EndNamedShow()
{
  _TDispID _dispid(*this, OLETEXT("EndNamedShow"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::ResetSlideTime()
{
  _TDispID _dispid(*this, OLETEXT("ResetSlideTime"), DISPID(2024));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::Exit()
{
  _TDispID _dispid(*this, OLETEXT("Exit"), DISPID(2025));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::InstallTracker(Powerpoint_xp::MouseTracker* pTracker/*[in]*/, 
                                      Office_xp::MsoTriState Presenter/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstallTracker"), DISPID(2026));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Powerpoint_xp::MouseTracker*)pTracker /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Presenter /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_CurrentShowPosition(int* CurrentShowPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentShowPosition"), DISPID(2027));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CurrentShowPosition /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
SlideShowViewDispT<T>::get_CurrentShowPosition(void)
{
  int CurrentShowPosition;
  this->get_CurrentShowPosition((int*)&CurrentShowPosition);
  return CurrentShowPosition;
}

// *********************************************************************//
// DispIntf:  SlideShowSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
SlideShowSettingsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SlideShowSettingsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_PointerColor(Powerpoint_xp::ColorFormat** PointerColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PointerColor"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorFormat**)PointerColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorFormat* __fastcall
SlideShowSettingsDispT<T>::get_PointerColor(void)
{
  Powerpoint_xp::ColorFormat* PointerColor;
  this->get_PointerColor((Powerpoint_xp::ColorFormat**)&PointerColor);
  return PointerColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_NamedSlideShows(Powerpoint_xp::NamedSlideShows** NamedSlideShows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NamedSlideShows"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::NamedSlideShows**)NamedSlideShows /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::NamedSlideShows* __fastcall
SlideShowSettingsDispT<T>::get_NamedSlideShows(void)
{
  Powerpoint_xp::NamedSlideShows* NamedSlideShows;
  this->get_NamedSlideShows((Powerpoint_xp::NamedSlideShows**)&NamedSlideShows);
  return NamedSlideShows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_StartingSlide(int* StartingSlide/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartingSlide"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(StartingSlide /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
SlideShowSettingsDispT<T>::get_StartingSlide(void)
{
  int StartingSlide;
  this->get_StartingSlide((int*)&StartingSlide);
  return StartingSlide;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::set_StartingSlide(int StartingSlide/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartingSlide"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = StartingSlide /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_EndingSlide(int* EndingSlide/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndingSlide"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(EndingSlide /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
SlideShowSettingsDispT<T>::get_EndingSlide(void)
{
  int EndingSlide;
  this->get_EndingSlide((int*)&EndingSlide);
  return EndingSlide;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::set_EndingSlide(int EndingSlide/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndingSlide"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = EndingSlide /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_AdvanceMode(Powerpoint_xp::PpSlideShowAdvanceMode* AdvanceMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceMode"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AdvanceMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpSlideShowAdvanceMode __fastcall
SlideShowSettingsDispT<T>::get_AdvanceMode(void)
{
  Powerpoint_xp::PpSlideShowAdvanceMode AdvanceMode;
  this->get_AdvanceMode((Powerpoint_xp::PpSlideShowAdvanceMode*)&AdvanceMode);
  return AdvanceMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::set_AdvanceMode(Powerpoint_xp::PpSlideShowAdvanceMode AdvanceMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceMode"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)AdvanceMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::Run(Powerpoint_xp::SlideShowWindow** Run/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Run"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SlideShowWindow**)Run /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::SlideShowWindow* __fastcall
SlideShowSettingsDispT<T>::Run(void)
{
  Powerpoint_xp::SlideShowWindow* Run;
  this->Run((Powerpoint_xp::SlideShowWindow**)&Run);
  return Run;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_LoopUntilStopped(Office_xp::MsoTriState* LoopUntilStopped/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoopUntilStopped"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LoopUntilStopped /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
SlideShowSettingsDispT<T>::get_LoopUntilStopped(void)
{
  Office_xp::MsoTriState LoopUntilStopped;
  this->get_LoopUntilStopped((Office_xp::MsoTriState*)&LoopUntilStopped);
  return LoopUntilStopped;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::set_LoopUntilStopped(Office_xp::MsoTriState LoopUntilStopped/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoopUntilStopped"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)LoopUntilStopped /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_ShowType(Powerpoint_xp::PpSlideShowType* ShowType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowType"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpSlideShowType __fastcall
SlideShowSettingsDispT<T>::get_ShowType(void)
{
  Powerpoint_xp::PpSlideShowType ShowType;
  this->get_ShowType((Powerpoint_xp::PpSlideShowType*)&ShowType);
  return ShowType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::set_ShowType(Powerpoint_xp::PpSlideShowType ShowType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowType"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_ShowWithNarration(Office_xp::MsoTriState* ShowWithNarration/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowWithNarration"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowWithNarration /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
SlideShowSettingsDispT<T>::get_ShowWithNarration(void)
{
  Office_xp::MsoTriState ShowWithNarration;
  this->get_ShowWithNarration((Office_xp::MsoTriState*)&ShowWithNarration);
  return ShowWithNarration;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::set_ShowWithNarration(Office_xp::MsoTriState ShowWithNarration/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowWithNarration"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowWithNarration /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_ShowWithAnimation(Office_xp::MsoTriState* ShowWithAnimation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowWithAnimation"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowWithAnimation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
SlideShowSettingsDispT<T>::get_ShowWithAnimation(void)
{
  Office_xp::MsoTriState ShowWithAnimation;
  this->get_ShowWithAnimation((Office_xp::MsoTriState*)&ShowWithAnimation);
  return ShowWithAnimation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::set_ShowWithAnimation(Office_xp::MsoTriState ShowWithAnimation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowWithAnimation"), DISPID(2012));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowWithAnimation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowName"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideShowName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SlideShowSettingsDispT<T>::get_SlideShowName(void)
{
  BSTR SlideShowName;
  this->get_SlideShowName((BSTR*)&SlideShowName);
  return SlideShowName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::set_SlideShowName(BSTR SlideShowName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowName"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = SlideShowName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_RangeType(Powerpoint_xp::PpSlideShowRangeType* RangeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeType"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RangeType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpSlideShowRangeType __fastcall
SlideShowSettingsDispT<T>::get_RangeType(void)
{
  Powerpoint_xp::PpSlideShowRangeType RangeType;
  this->get_RangeType((Powerpoint_xp::PpSlideShowRangeType*)&RangeType);
  return RangeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::set_RangeType(Powerpoint_xp::PpSlideShowRangeType RangeType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeType"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = (int)RangeType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_ShowScrollbar(Office_xp::MsoTriState* ShowScrollbar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowScrollbar"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowScrollbar /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
SlideShowSettingsDispT<T>::get_ShowScrollbar(void)
{
  Office_xp::MsoTriState ShowScrollbar;
  this->get_ShowScrollbar((Office_xp::MsoTriState*)&ShowScrollbar);
  return ShowScrollbar;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::set_ShowScrollbar(Office_xp::MsoTriState ShowScrollbar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowScrollbar"), DISPID(2015));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowScrollbar /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  NamedSlideShows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
NamedSlideShowsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
NamedSlideShowsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowsDispT<T>::Item(VARIANT Index/*[in]*/, 
                              Powerpoint_xp::NamedSlideShow** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::NamedSlideShow**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::NamedSlideShow* __fastcall
NamedSlideShowsDispT<T>::Item(VARIANT Index/*[in]*/)
{
  Powerpoint_xp::NamedSlideShow* Item;
  this->Item(Index, (Powerpoint_xp::NamedSlideShow**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowsDispT<T>::Add(BSTR Name/*[in]*/, VARIANT safeArrayOfSlideIDs/*[in]*/, 
                             Powerpoint_xp::NamedSlideShow** Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<2> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = safeArrayOfSlideIDs /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::NamedSlideShow**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::NamedSlideShow* __fastcall
NamedSlideShowsDispT<T>::Add(BSTR Name/*[in]*/, VARIANT safeArrayOfSlideIDs/*[in]*/)
{
  Powerpoint_xp::NamedSlideShow* Add;
  this->Add(Name, safeArrayOfSlideIDs, (Powerpoint_xp::NamedSlideShow**)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
NamedSlideShowsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
NamedSlideShowsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
NamedSlideShowsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  NamedSlideShow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
NamedSlideShowDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
NamedSlideShowDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
NamedSlideShowDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2004));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowDispT<T>::get_SlideIDs(VARIANT* SlideIDs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideIDs"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideIDs /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
NamedSlideShowDispT<T>::get_SlideIDs(void)
{
  VARIANT SlideIDs;
  this->get_SlideIDs((VARIANT*)&SlideIDs);
  return SlideIDs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
NamedSlideShowDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  PrintOptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
PrintOptionsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_PrintColorType(Powerpoint_xp::PpPrintColorType* PrintColorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintColorType"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PrintColorType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpPrintColorType __fastcall
PrintOptionsDispT<T>::get_PrintColorType(void)
{
  Powerpoint_xp::PpPrintColorType PrintColorType;
  this->get_PrintColorType((Powerpoint_xp::PpPrintColorType*)&PrintColorType);
  return PrintColorType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_PrintColorType(Powerpoint_xp::PpPrintColorType PrintColorType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintColorType"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = (int)PrintColorType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_Collate(Office_xp::MsoTriState* Collate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collate"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Collate /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
PrintOptionsDispT<T>::get_Collate(void)
{
  Office_xp::MsoTriState Collate;
  this->get_Collate((Office_xp::MsoTriState*)&Collate);
  return Collate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_Collate(Office_xp::MsoTriState Collate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collate"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)Collate /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_FitToPage(Office_xp::MsoTriState* FitToPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FitToPage"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FitToPage /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
PrintOptionsDispT<T>::get_FitToPage(void)
{
  Office_xp::MsoTriState FitToPage;
  this->get_FitToPage((Office_xp::MsoTriState*)&FitToPage);
  return FitToPage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_FitToPage(Office_xp::MsoTriState FitToPage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FitToPage"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)FitToPage /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_FrameSlides(Office_xp::MsoTriState* FrameSlides/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrameSlides"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FrameSlides /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
PrintOptionsDispT<T>::get_FrameSlides(void)
{
  Office_xp::MsoTriState FrameSlides;
  this->get_FrameSlides((Office_xp::MsoTriState*)&FrameSlides);
  return FrameSlides;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_FrameSlides(Office_xp::MsoTriState FrameSlides/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrameSlides"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)FrameSlides /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_NumberOfCopies(int* NumberOfCopies/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberOfCopies"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NumberOfCopies /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PrintOptionsDispT<T>::get_NumberOfCopies(void)
{
  int NumberOfCopies;
  this->get_NumberOfCopies((int*)&NumberOfCopies);
  return NumberOfCopies;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_NumberOfCopies(int NumberOfCopies/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberOfCopies"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = NumberOfCopies /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_OutputType(Powerpoint_xp::PpPrintOutputType* OutputType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OutputType"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)OutputType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpPrintOutputType __fastcall
PrintOptionsDispT<T>::get_OutputType(void)
{
  Powerpoint_xp::PpPrintOutputType OutputType;
  this->get_OutputType((Powerpoint_xp::PpPrintOutputType*)&OutputType);
  return OutputType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_OutputType(Powerpoint_xp::PpPrintOutputType OutputType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OutputType"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)OutputType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PrintOptionsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_PrintHiddenSlides(Office_xp::MsoTriState* PrintHiddenSlides/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintHiddenSlides"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PrintHiddenSlides /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
PrintOptionsDispT<T>::get_PrintHiddenSlides(void)
{
  Office_xp::MsoTriState PrintHiddenSlides;
  this->get_PrintHiddenSlides((Office_xp::MsoTriState*)&PrintHiddenSlides);
  return PrintHiddenSlides;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_PrintHiddenSlides(Office_xp::MsoTriState PrintHiddenSlides/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintHiddenSlides"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)PrintHiddenSlides /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_PrintInBackground(Office_xp::MsoTriState* PrintInBackground/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintInBackground"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PrintInBackground /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
PrintOptionsDispT<T>::get_PrintInBackground(void)
{
  Office_xp::MsoTriState PrintInBackground;
  this->get_PrintInBackground((Office_xp::MsoTriState*)&PrintInBackground);
  return PrintInBackground;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_PrintInBackground(Office_xp::MsoTriState PrintInBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintInBackground"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = (int)PrintInBackground /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_RangeType(Powerpoint_xp::PpPrintRangeType* RangeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeType"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RangeType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpPrintRangeType __fastcall
PrintOptionsDispT<T>::get_RangeType(void)
{
  Powerpoint_xp::PpPrintRangeType RangeType;
  this->get_RangeType((Powerpoint_xp::PpPrintRangeType*)&RangeType);
  return RangeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_RangeType(Powerpoint_xp::PpPrintRangeType RangeType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeType"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = (int)RangeType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_Ranges(Powerpoint_xp::PrintRanges** Ranges/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ranges"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PrintRanges**)Ranges /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PrintRanges* __fastcall
PrintOptionsDispT<T>::get_Ranges(void)
{
  Powerpoint_xp::PrintRanges* Ranges;
  this->get_Ranges((Powerpoint_xp::PrintRanges**)&Ranges);
  return Ranges;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_PrintFontsAsGraphics(Office_xp::MsoTriState* PrintFontsAsGraphics/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintFontsAsGraphics"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PrintFontsAsGraphics /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
PrintOptionsDispT<T>::get_PrintFontsAsGraphics(void)
{
  Office_xp::MsoTriState PrintFontsAsGraphics;
  this->get_PrintFontsAsGraphics((Office_xp::MsoTriState*)&PrintFontsAsGraphics);
  return PrintFontsAsGraphics;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_PrintFontsAsGraphics(Office_xp::MsoTriState PrintFontsAsGraphics/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintFontsAsGraphics"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = (int)PrintFontsAsGraphics /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowName"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideShowName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PrintOptionsDispT<T>::get_SlideShowName(void)
{
  BSTR SlideShowName;
  this->get_SlideShowName((BSTR*)&SlideShowName);
  return SlideShowName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_SlideShowName(BSTR SlideShowName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowName"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = SlideShowName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_ActivePrinter(BSTR* ActivePrinter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActivePrinter"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ActivePrinter /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PrintOptionsDispT<T>::get_ActivePrinter(void)
{
  BSTR ActivePrinter;
  this->get_ActivePrinter((BSTR*)&ActivePrinter);
  return ActivePrinter;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_ActivePrinter(BSTR ActivePrinter/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActivePrinter"), DISPID(2015));
  TAutoArgs<1> _args;
  _args[1] = ActivePrinter /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_HandoutOrder(Powerpoint_xp::PpPrintHandoutOrder* HandoutOrder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HandoutOrder"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HandoutOrder /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpPrintHandoutOrder __fastcall
PrintOptionsDispT<T>::get_HandoutOrder(void)
{
  Powerpoint_xp::PpPrintHandoutOrder HandoutOrder;
  this->get_HandoutOrder((Powerpoint_xp::PpPrintHandoutOrder*)&HandoutOrder);
  return HandoutOrder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_HandoutOrder(Powerpoint_xp::PpPrintHandoutOrder HandoutOrder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HandoutOrder"), DISPID(2016));
  TAutoArgs<1> _args;
  _args[1] = (int)HandoutOrder /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_PrintComments(Office_xp::MsoTriState* PrintComments/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintComments"), DISPID(2017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PrintComments /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
PrintOptionsDispT<T>::get_PrintComments(void)
{
  Office_xp::MsoTriState PrintComments;
  this->get_PrintComments((Office_xp::MsoTriState*)&PrintComments);
  return PrintComments;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_PrintComments(Office_xp::MsoTriState PrintComments/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintComments"), DISPID(2017));
  TAutoArgs<1> _args;
  _args[1] = (int)PrintComments /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PrintRanges
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangesDispT<T>::Add(int Start/*[in]*/, int End/*[in]*/, 
                         Powerpoint_xp::PrintRange** Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2001));
  TAutoArgs<2> _args;
  _args[1] = Start /*[VT_INT:0]*/;
  _args[2] = End /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PrintRange**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::PrintRange* __fastcall
PrintRangesDispT<T>::Add(int Start/*[in]*/, int End/*[in]*/)
{
  Powerpoint_xp::PrintRange* Add;
  this->Add(Start, End, (Powerpoint_xp::PrintRange**)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangesDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
PrintRangesDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangesDispT<T>::ClearAll()
{
  _TDispID _dispid(*this, OLETEXT("ClearAll"), DISPID(2003));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangesDispT<T>::Item(int Index/*[in]*/, Powerpoint_xp::PrintRange** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PrintRange**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::PrintRange* __fastcall
PrintRangesDispT<T>::Item(int Index/*[in]*/)
{
  Powerpoint_xp::PrintRange* Item;
  this->Item(Index, (Powerpoint_xp::PrintRange**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PrintRangesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PrintRangesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangesDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
PrintRangesDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PrintRangesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  PrintRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangeDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
PrintRangeDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PrintRangeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangeDispT<T>::get_Start(int* Start/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Start"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Start /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PrintRangeDispT<T>::get_Start(void)
{
  int Start;
  this->get_Start((int*)&Start);
  return Start;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangeDispT<T>::get_End(int* End/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("End"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(End /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PrintRangeDispT<T>::get_End(void)
{
  int End;
  this->get_End((int*)&End);
  return End;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangeDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2005));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  AddIns
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493460-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
AddInsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AddInsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInsDispT<T>::Item(VARIANT* Index/*[in]*/, Powerpoint_xp::AddIn** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::AddIn**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::AddIn* __fastcall
AddInsDispT<T>::Item(VARIANT* Index/*[in]*/)
{
  Powerpoint_xp::AddIn* Item;
  this->Item(Index, (Powerpoint_xp::AddIn**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInsDispT<T>::Add(BSTR FileName/*[in]*/, Powerpoint_xp::AddIn** Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::AddIn**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::AddIn* __fastcall
AddInsDispT<T>::Add(BSTR FileName/*[in]*/)
{
  Powerpoint_xp::AddIn* Add;
  this->Add(FileName, (Powerpoint_xp::AddIn**)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInsDispT<T>::Remove(VARIANT* Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
AddInsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
AddInsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
AddInsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  AddIn
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493461-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
AddInDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AddInDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_FullName(BSTR* FullName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullName"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FullName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
AddInDispT<T>::get_FullName(void)
{
  BSTR FullName;
  this->get_FullName((BSTR*)&FullName);
  return FullName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
AddInDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_Path(BSTR* Path/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Path"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Path /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
AddInDispT<T>::get_Path(void)
{
  BSTR Path;
  this->get_Path((BSTR*)&Path);
  return Path;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_Registered(Office_xp::MsoTriState* Registered/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Registered"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Registered /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
AddInDispT<T>::get_Registered(void)
{
  Office_xp::MsoTriState Registered;
  this->get_Registered((Office_xp::MsoTriState*)&Registered);
  return Registered;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::set_Registered(Office_xp::MsoTriState Registered/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Registered"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)Registered /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_AutoLoad(Office_xp::MsoTriState* AutoLoad/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLoad"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoLoad /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
AddInDispT<T>::get_AutoLoad(void)
{
  Office_xp::MsoTriState AutoLoad;
  this->get_AutoLoad((Office_xp::MsoTriState*)&AutoLoad);
  return AutoLoad;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::set_AutoLoad(Office_xp::MsoTriState AutoLoad/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLoad"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoLoad /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_Loaded(Office_xp::MsoTriState* Loaded/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Loaded"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Loaded /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
AddInDispT<T>::get_Loaded(void)
{
  Office_xp::MsoTriState Loaded;
  this->get_Loaded((Office_xp::MsoTriState*)&Loaded);
  return Loaded;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::set_Loaded(Office_xp::MsoTriState Loaded/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Loaded"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)Loaded /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_DisplayAlerts(Office_xp::MsoTriState* DisplayAlerts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayAlerts"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayAlerts /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
AddInDispT<T>::get_DisplayAlerts(void)
{
  Office_xp::MsoTriState DisplayAlerts;
  this->get_DisplayAlerts((Office_xp::MsoTriState*)&DisplayAlerts);
  return DisplayAlerts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::set_DisplayAlerts(Office_xp::MsoTriState DisplayAlerts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayAlerts"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)DisplayAlerts /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_RegisteredInHKLM(Office_xp::MsoTriState* RegisteredInHKLM/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegisteredInHKLM"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RegisteredInHKLM /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
AddInDispT<T>::get_RegisteredInHKLM(void)
{
  Office_xp::MsoTriState RegisteredInHKLM;
  this->get_RegisteredInHKLM((Office_xp::MsoTriState*)&RegisteredInHKLM);
  return RegisteredInHKLM;
}

// *********************************************************************//
// DispIntf:  Presentations
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493462-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PresentationsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
PresentationsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PresentationsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PresentationsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PresentationsDispT<T>::Item(VARIANT Index/*[in]*/, 
                            Powerpoint_xp::PowerPointPresentation** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointPresentation**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointPresentation* __fastcall
PresentationsDispT<T>::Item(VARIANT Index/*[in]*/)
{
  Powerpoint_xp::PowerPointPresentation* Item;
  this->Item(Index, (Powerpoint_xp::PowerPointPresentation**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PresentationsDispT<T>::Add(Office_xp::MsoTriState WithWindow/*[in,def,opt]*/, 
                           Powerpoint_xp::PowerPointPresentation** Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)WithWindow /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointPresentation**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointPresentation* __fastcall
PresentationsDispT<T>::Add(Office_xp::MsoTriState WithWindow/*[in,def,opt]*/)
{
  Powerpoint_xp::PowerPointPresentation* Add;
  this->Add(WithWindow, (Powerpoint_xp::PowerPointPresentation**)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PresentationsDispT<T>::OpenOld(BSTR FileName/*[in]*/, 
                               Office_xp::MsoTriState ReadOnly/*[in,def,opt]*/, 
                               Office_xp::MsoTriState Untitled/*[in,def,opt]*/, 
                               Office_xp::MsoTriState WithWindow/*[in,def,opt]*/, 
                               Powerpoint_xp::PowerPointPresentation** OpenOld/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenOld"), DISPID(2004));
  TAutoArgs<4> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = (int)ReadOnly /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)Untitled /*[VT_USERDEFINED:0]*/;
  _args[4] = (int)WithWindow /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointPresentation**)OpenOld /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointPresentation* __fastcall
PresentationsDispT<T>::OpenOld(BSTR FileName/*[in]*/, 
                               Office_xp::MsoTriState ReadOnly/*[in,def,opt]*/, 
                               Office_xp::MsoTriState Untitled/*[in,def,opt]*/, 
                               Office_xp::MsoTriState WithWindow/*[in,def,opt]*/)
{
  Powerpoint_xp::PowerPointPresentation* OpenOld;
  this->OpenOld(FileName, ReadOnly, Untitled, WithWindow, (Powerpoint_xp::PowerPointPresentation**)&OpenOld);
  return OpenOld;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PresentationsDispT<T>::Open(BSTR FileName/*[in]*/, Office_xp::MsoTriState ReadOnly/*[in,def,opt]*/, 
                            Office_xp::MsoTriState Untitled/*[in,def,opt]*/, 
                            Office_xp::MsoTriState WithWindow/*[in,def,opt]*/, 
                            Powerpoint_xp::PowerPointPresentation** Open/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(2005));
  TAutoArgs<4> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = (int)ReadOnly /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)Untitled /*[VT_USERDEFINED:0]*/;
  _args[4] = (int)WithWindow /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointPresentation**)Open /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointPresentation* __fastcall
PresentationsDispT<T>::Open(BSTR FileName/*[in]*/, Office_xp::MsoTriState ReadOnly/*[in,def,opt]*/, 
                            Office_xp::MsoTriState Untitled/*[in,def,opt]*/, 
                            Office_xp::MsoTriState WithWindow/*[in,def,opt]*/)
{
  Powerpoint_xp::PowerPointPresentation* Open;
  this->Open(FileName, ReadOnly, Untitled, WithWindow, (Powerpoint_xp::PowerPointPresentation**)&Open);
  return Open;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PresentationsDispT<T>::CheckOut(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckOut"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PresentationsDispT<T>::CanCheckOut(BSTR FileName/*[in]*/, VARIANT_BOOL* CanCheckOut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanCheckOut"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(CanCheckOut /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PresentationsDispT<T>::CanCheckOut(BSTR FileName/*[in]*/)
{
  VARIANT_BOOL CanCheckOut;
  this->CanCheckOut(FileName, (VARIANT_BOOL*)&CanCheckOut);
  return CanCheckOut;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PresentationsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PresentationsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PresentationsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
PresentationsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PresentationsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PresentationsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// SmartIntf: TCOM_Presentation
// Interface: _Presentation
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  return (*this)->get_Application(Application);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Application(Powerpoint_xp::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  return (*this)->get_Application(PowerPointApplication**)Application);
}

template <class T> Powerpoint_xp::PowerPointApplicationPtr __fastcall
TCOM_PresentationT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
  return (Powerpoint_xp::PowerPointApplicationPtr)Application;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  return (*this)->get_Parent(Parent);
}

template <class T> LPDISPATCH __fastcall
TCOM_PresentationT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
  return Parent;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_SlideMaster(Powerpoint_xp::_Master** SlideMaster/*[out,retval]*/)
{
  return (*this)->get_SlideMaster(SlideMaster);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_SlideMaster(Powerpoint_xp::_MasterPtr* SlideMaster/*[out,retval]*/)
{
  return (*this)->get_SlideMaster(_Master**)SlideMaster);
}

template <class T> Powerpoint_xp::_MasterPtr __fastcall
TCOM_PresentationT<T>::get_SlideMaster(void)
{
  Powerpoint_xp::_Master* SlideMaster;
  OLECHECK(this->get_SlideMaster((Powerpoint_xp::_Master**)&SlideMaster));
  return (Powerpoint_xp::_MasterPtr)SlideMaster;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_TitleMaster(Powerpoint_xp::_Master** TitleMaster/*[out,retval]*/)
{
  return (*this)->get_TitleMaster(TitleMaster);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_TitleMaster(Powerpoint_xp::_MasterPtr* TitleMaster/*[out,retval]*/)
{
  return (*this)->get_TitleMaster(_Master**)TitleMaster);
}

template <class T> Powerpoint_xp::_MasterPtr __fastcall
TCOM_PresentationT<T>::get_TitleMaster(void)
{
  Powerpoint_xp::_Master* TitleMaster;
  OLECHECK(this->get_TitleMaster((Powerpoint_xp::_Master**)&TitleMaster));
  return (Powerpoint_xp::_MasterPtr)TitleMaster;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_HasTitleMaster(Office_xp::MsoTriState* HasTitleMaster/*[out,retval]*/)
{
  return (*this)->get_HasTitleMaster(HasTitleMaster);
}

template <class T> Office_xp::MsoTriState __fastcall
TCOM_PresentationT<T>::get_HasTitleMaster(void)
{
  Office_xp::MsoTriState HasTitleMaster;
  OLECHECK(this->get_HasTitleMaster((Office_xp::MsoTriState*)&HasTitleMaster));
  return HasTitleMaster;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::AddTitleMaster(Powerpoint_xp::_Master** TitleMaster/*[out,retval]*/)
{
  return (*this)->AddTitleMaster(TitleMaster);
}

template <class T> Powerpoint_xp::_Master* __fastcall
TCOM_PresentationT<T>::AddTitleMaster(void)
{
  Powerpoint_xp::_Master* TitleMaster;
  OLECHECK(this->AddTitleMaster((Powerpoint_xp::_Master**)&TitleMaster));
  return TitleMaster;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::ApplyTemplate(BSTR FileName/*[in]*/)
{
  return (*this)->ApplyTemplate(FileName);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_TemplateName(BSTR* TemplateName/*[out,retval]*/)
{
  return (*this)->get_TemplateName(TemplateName);
}

template <class T> BSTR __fastcall
TCOM_PresentationT<T>::get_TemplateName(void)
{
  BSTR TemplateName = 0;
  OLECHECK(this->get_TemplateName((BSTR*)&TemplateName));
  return TemplateName;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_NotesMaster(Powerpoint_xp::_Master** NotesMaster/*[out,retval]*/)
{
  return (*this)->get_NotesMaster(NotesMaster);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_NotesMaster(Powerpoint_xp::_MasterPtr* NotesMaster/*[out,retval]*/)
{
  return (*this)->get_NotesMaster(_Master**)NotesMaster);
}

template <class T> Powerpoint_xp::_MasterPtr __fastcall
TCOM_PresentationT<T>::get_NotesMaster(void)
{
  Powerpoint_xp::_Master* NotesMaster;
  OLECHECK(this->get_NotesMaster((Powerpoint_xp::_Master**)&NotesMaster));
  return (Powerpoint_xp::_MasterPtr)NotesMaster;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_HandoutMaster(Powerpoint_xp::_Master** HandoutMaster/*[out,retval]*/)
{
  return (*this)->get_HandoutMaster(HandoutMaster);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_HandoutMaster(Powerpoint_xp::_MasterPtr* HandoutMaster/*[out,retval]*/)
{
  return (*this)->get_HandoutMaster(_Master**)HandoutMaster);
}

template <class T> Powerpoint_xp::_MasterPtr __fastcall
TCOM_PresentationT<T>::get_HandoutMaster(void)
{
  Powerpoint_xp::_Master* HandoutMaster;
  OLECHECK(this->get_HandoutMaster((Powerpoint_xp::_Master**)&HandoutMaster));
  return (Powerpoint_xp::_MasterPtr)HandoutMaster;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Slides(Powerpoint_xp::Slides** Slides/*[out,retval]*/)
{
  return (*this)->get_Slides(Slides);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Slides(Powerpoint_xp::SlidesPtr* Slides/*[out,retval]*/)
{
  return (*this)->get_Slides(Slides**)Slides);
}

template <class T> Powerpoint_xp::SlidesPtr __fastcall
TCOM_PresentationT<T>::get_Slides(void)
{
  Powerpoint_xp::Slides* Slides;
  OLECHECK(this->get_Slides((Powerpoint_xp::Slides**)&Slides));
  return (Powerpoint_xp::SlidesPtr)Slides;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_PageSetup(Powerpoint_xp::PageSetup** PageSetup/*[out,retval]*/)
{
  return (*this)->get_PageSetup(PageSetup);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_PageSetup(Powerpoint_xp::PageSetupPtr* PageSetup/*[out,retval]*/)
{
  return (*this)->get_PageSetup(PageSetup**)PageSetup);
}

template <class T> Powerpoint_xp::PageSetupPtr __fastcall
TCOM_PresentationT<T>::get_PageSetup(void)
{
  Powerpoint_xp::PageSetup* PageSetup;
  OLECHECK(this->get_PageSetup((Powerpoint_xp::PageSetup**)&PageSetup));
  return (Powerpoint_xp::PageSetupPtr)PageSetup;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_ColorSchemes(Powerpoint_xp::ColorSchemes** ColorSchemes/*[out,retval]*/)
{
  return (*this)->get_ColorSchemes(ColorSchemes);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_ColorSchemes(Powerpoint_xp::ColorSchemesPtr* ColorSchemes/*[out,retval]*/)
{
  return (*this)->get_ColorSchemes(ColorSchemes**)ColorSchemes);
}

template <class T> Powerpoint_xp::ColorSchemesPtr __fastcall
TCOM_PresentationT<T>::get_ColorSchemes(void)
{
  Powerpoint_xp::ColorSchemes* ColorSchemes;
  OLECHECK(this->get_ColorSchemes((Powerpoint_xp::ColorSchemes**)&ColorSchemes));
  return (Powerpoint_xp::ColorSchemesPtr)ColorSchemes;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_ExtraColors(Powerpoint_xp::ExtraColors** ExtraColors/*[out,retval]*/)
{
  return (*this)->get_ExtraColors(ExtraColors);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_ExtraColors(Powerpoint_xp::ExtraColorsPtr* ExtraColors/*[out,retval]*/)
{
  return (*this)->get_ExtraColors(ExtraColors**)ExtraColors);
}

template <class T> Powerpoint_xp::ExtraColorsPtr __fastcall
TCOM_PresentationT<T>::get_ExtraColors(void)
{
  Powerpoint_xp::ExtraColors* ExtraColors;
  OLECHECK(this->get_ExtraColors((Powerpoint_xp::ExtraColors**)&ExtraColors));
  return (Powerpoint_xp::ExtraColorsPtr)ExtraColors;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_SlideShowSettings(Powerpoint_xp::SlideShowSettings** SlideShowSettings/*[out,retval]*/)
{
  return (*this)->get_SlideShowSettings(SlideShowSettings);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_SlideShowSettings(Powerpoint_xp::SlideShowSettingsPtr* SlideShowSettings/*[out,retval]*/)
{
  return (*this)->get_SlideShowSettings(SlideShowSettings**)SlideShowSettings);
}

template <class T> Powerpoint_xp::SlideShowSettingsPtr __fastcall
TCOM_PresentationT<T>::get_SlideShowSettings(void)
{
  Powerpoint_xp::SlideShowSettings* SlideShowSettings;
  OLECHECK(this->get_SlideShowSettings((Powerpoint_xp::SlideShowSettings**)&SlideShowSettings));
  return (Powerpoint_xp::SlideShowSettingsPtr)SlideShowSettings;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Fonts(Powerpoint_xp::Fonts** Fonts/*[out,retval]*/)
{
  return (*this)->get_Fonts(Fonts);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Fonts(Powerpoint_xp::FontsPtr* Fonts/*[out,retval]*/)
{
  return (*this)->get_Fonts(Fonts**)Fonts);
}

template <class T> Powerpoint_xp::FontsPtr __fastcall
TCOM_PresentationT<T>::get_Fonts(void)
{
  Powerpoint_xp::Fonts* Fonts;
  OLECHECK(this->get_Fonts((Powerpoint_xp::Fonts**)&Fonts));
  return (Powerpoint_xp::FontsPtr)Fonts;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Windows(Powerpoint_xp::DocumentWindows** Windows/*[out,retval]*/)
{
  return (*this)->get_Windows(Windows);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Windows(Powerpoint_xp::DocumentWindowsPtr* Windows/*[out,retval]*/)
{
  return (*this)->get_Windows(DocumentWindows**)Windows);
}

template <class T> Powerpoint_xp::DocumentWindowsPtr __fastcall
TCOM_PresentationT<T>::get_Windows(void)
{
  Powerpoint_xp::DocumentWindows* Windows;
  OLECHECK(this->get_Windows((Powerpoint_xp::DocumentWindows**)&Windows));
  return (Powerpoint_xp::DocumentWindowsPtr)Windows;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Tags(Powerpoint_xp::Tags** Tags/*[out,retval]*/)
{
  return (*this)->get_Tags(Tags);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Tags(Powerpoint_xp::TagsPtr* Tags/*[out,retval]*/)
{
  return (*this)->get_Tags(Tags**)Tags);
}

template <class T> Powerpoint_xp::TagsPtr __fastcall
TCOM_PresentationT<T>::get_Tags(void)
{
  Powerpoint_xp::Tags* Tags;
  OLECHECK(this->get_Tags((Powerpoint_xp::Tags**)&Tags));
  return (Powerpoint_xp::TagsPtr)Tags;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_DefaultShape(Powerpoint_xp::Shape** DefaultShape/*[out,retval]*/)
{
  return (*this)->get_DefaultShape(DefaultShape);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_DefaultShape(Powerpoint_xp::ShapePtr* DefaultShape/*[out,retval]*/)
{
  return (*this)->get_DefaultShape(Shape**)DefaultShape);
}

template <class T> Powerpoint_xp::ShapePtr __fastcall
TCOM_PresentationT<T>::get_DefaultShape(void)
{
  Powerpoint_xp::Shape* DefaultShape;
  OLECHECK(this->get_DefaultShape((Powerpoint_xp::Shape**)&DefaultShape));
  return (Powerpoint_xp::ShapePtr)DefaultShape;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_BuiltInDocumentProperties(LPDISPATCH* BuiltInDocumentProperties/*[out,retval]*/)
{
  return (*this)->get_BuiltInDocumentProperties(BuiltInDocumentProperties);
}

template <class T> LPDISPATCH __fastcall
TCOM_PresentationT<T>::get_BuiltInDocumentProperties(void)
{
  LPDISPATCH BuiltInDocumentProperties;
  OLECHECK(this->get_BuiltInDocumentProperties((LPDISPATCH*)&BuiltInDocumentProperties));
  return BuiltInDocumentProperties;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_CustomDocumentProperties(LPDISPATCH* CustomDocumentProperties/*[out,retval]*/)
{
  return (*this)->get_CustomDocumentProperties(CustomDocumentProperties);
}

template <class T> LPDISPATCH __fastcall
TCOM_PresentationT<T>::get_CustomDocumentProperties(void)
{
  LPDISPATCH CustomDocumentProperties;
  OLECHECK(this->get_CustomDocumentProperties((LPDISPATCH*)&CustomDocumentProperties));
  return CustomDocumentProperties;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_VBProject(Vbide_xp::VBProject** VBProject/*[out,retval]*/)
{
  return (*this)->get_VBProject(VBProject);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_VBProject(Vbide_xp::VBProjectPtr* VBProject/*[out,retval]*/)
{
  return (*this)->get_VBProject(VBProject**)VBProject);
}

template <class T> Vbide_xp::VBProjectPtr __fastcall
TCOM_PresentationT<T>::get_VBProject(void)
{
  Vbide_xp::VBProject* VBProject;
  OLECHECK(this->get_VBProject((Vbide_xp::VBProject**)&VBProject));
  return (Vbide_xp::VBProjectPtr)VBProject;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_ReadOnly(Office_xp::MsoTriState* ReadOnly/*[out,retval]*/)
{
  return (*this)->get_ReadOnly(ReadOnly);
}

template <class T> Office_xp::MsoTriState __fastcall
TCOM_PresentationT<T>::get_ReadOnly(void)
{
  Office_xp::MsoTriState ReadOnly;
  OLECHECK(this->get_ReadOnly((Office_xp::MsoTriState*)&ReadOnly));
  return ReadOnly;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_FullName(BSTR* FullName/*[out,retval]*/)
{
  return (*this)->get_FullName(FullName);
}

template <class T> BSTR __fastcall
TCOM_PresentationT<T>::get_FullName(void)
{
  BSTR FullName = 0;
  OLECHECK(this->get_FullName((BSTR*)&FullName));
  return FullName;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  return (*this)->get_Name(Name);
}

template <class T> BSTR __fastcall
TCOM_PresentationT<T>::get_Name(void)
{
  BSTR Name = 0;
  OLECHECK(this->get_Name((BSTR*)&Name));
  return Name;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Path(BSTR* Path/*[out,retval]*/)
{
  return (*this)->get_Path(Path);
}

template <class T> BSTR __fastcall
TCOM_PresentationT<T>::get_Path(void)
{
  BSTR Path = 0;
  OLECHECK(this->get_Path((BSTR*)&Path));
  return Path;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Saved(Office_xp::MsoTriState* Saved/*[out,retval]*/)
{
  return (*this)->get_Saved(Saved);
}

template <class T> Office_xp::MsoTriState __fastcall
TCOM_PresentationT<T>::get_Saved(void)
{
  Office_xp::MsoTriState Saved;
  OLECHECK(this->get_Saved((Office_xp::MsoTriState*)&Saved));
  return Saved;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_Saved(Office_xp::MsoTriState Saved/*[in]*/)
{
  return (*this)->set_Saved(Saved);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_LayoutDirection(Powerpoint_xp::PpDirection* LayoutDirection/*[out,retval]*/)
{
  return (*this)->get_LayoutDirection(LayoutDirection);
}

template <class T> Powerpoint_xp::PpDirection __fastcall
TCOM_PresentationT<T>::get_LayoutDirection(void)
{
  Powerpoint_xp::PpDirection LayoutDirection;
  OLECHECK(this->get_LayoutDirection((Powerpoint_xp::PpDirection*)&LayoutDirection));
  return LayoutDirection;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_LayoutDirection(Powerpoint_xp::PpDirection LayoutDirection/*[in]*/)
{
  return (*this)->set_LayoutDirection(LayoutDirection);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::NewWindow(Powerpoint_xp::DocumentWindow** NewWindow/*[out,retval]*/)
{
  return (*this)->NewWindow(NewWindow);
}

template <class T> Powerpoint_xp::DocumentWindow* __fastcall
TCOM_PresentationT<T>::NewWindow(void)
{
  Powerpoint_xp::DocumentWindow* NewWindow;
  OLECHECK(this->NewWindow((Powerpoint_xp::DocumentWindow**)&NewWindow));
  return NewWindow;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::FollowHyperlink(BSTR Address/*[in]*/, BSTR SubAddress/*[in,def,opt]*/, 
                                       VARIANT_BOOL NewWindow/*[in,def,opt]*/, 
                                       VARIANT_BOOL AddHistory/*[in,def,opt]*/, 
                                       BSTR ExtraInfo/*[in,def,opt]*/, 
                                       Office_xp::MsoExtraInfoMethod Method/*[in,def,opt]*/, 
                                       BSTR HeaderInfo/*[in,def,opt]*/)
{
  return (*this)->FollowHyperlink(Address, SubAddress, NewWindow, AddHistory, ExtraInfo, Method, 
                                  HeaderInfo);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::AddToFavorites(void)
{
  return (*this)->AddToFavorites();
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::Unused(void)
{
  return (*this)->Unused();
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_PrintOptions(Powerpoint_xp::PrintOptions** PrintOptions/*[out,retval]*/)
{
  return (*this)->get_PrintOptions(PrintOptions);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_PrintOptions(Powerpoint_xp::PrintOptionsPtr* PrintOptions/*[out,retval]*/)
{
  return (*this)->get_PrintOptions(PrintOptions**)PrintOptions);
}

template <class T> Powerpoint_xp::PrintOptionsPtr __fastcall
TCOM_PresentationT<T>::get_PrintOptions(void)
{
  Powerpoint_xp::PrintOptions* PrintOptions;
  OLECHECK(this->get_PrintOptions((Powerpoint_xp::PrintOptions**)&PrintOptions));
  return (Powerpoint_xp::PrintOptionsPtr)PrintOptions;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::PrintOut(int From/*[in,def,opt]*/, int To/*[in,def,opt]*/, 
                                BSTR PrintToFile/*[in,def,opt]*/, int Copies/*[in,def,opt]*/, 
                                Office_xp::MsoTriState Collate/*[in,def,opt]*/)
{
  return (*this)->PrintOut(From, To, PrintToFile, Copies, Collate);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::Save(void)
{
  return (*this)->Save();
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::SaveAs(BSTR FileName/*[in]*/, 
                              Powerpoint_xp::PpSaveAsFileType FileFormat/*[in,def,opt]*/, 
                              Office_xp::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/)
{
  return (*this)->SaveAs(FileName, FileFormat, EmbedTrueTypeFonts);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::SaveCopyAs(BSTR FileName/*[in]*/, 
                                  Powerpoint_xp::PpSaveAsFileType FileFormat/*[in,def,opt]*/, 
                                  Office_xp::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/)
{
  return (*this)->SaveCopyAs(FileName, FileFormat, EmbedTrueTypeFonts);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::Export(BSTR Path/*[in]*/, BSTR FilterName/*[in]*/, 
                              int ScaleWidth/*[in,def,opt]*/, int ScaleHeight/*[in,def,opt]*/)
{
  return (*this)->Export(Path, FilterName, ScaleWidth, ScaleHeight);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::Close(void)
{
  return (*this)->Close();
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::SetUndoText(BSTR Text/*[in]*/)
{
  return (*this)->SetUndoText(Text);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Container(LPDISPATCH* Container/*[out,retval]*/)
{
  return (*this)->get_Container(Container);
}

template <class T> LPDISPATCH __fastcall
TCOM_PresentationT<T>::get_Container(void)
{
  LPDISPATCH Container;
  OLECHECK(this->get_Container((LPDISPATCH*)&Container));
  return Container;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_DisplayComments(Office_xp::MsoTriState* DisplayComments/*[out,retval]*/)
{
  return (*this)->get_DisplayComments(DisplayComments);
}

template <class T> Office_xp::MsoTriState __fastcall
TCOM_PresentationT<T>::get_DisplayComments(void)
{
  Office_xp::MsoTriState DisplayComments;
  OLECHECK(this->get_DisplayComments((Office_xp::MsoTriState*)&DisplayComments));
  return DisplayComments;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_DisplayComments(Office_xp::MsoTriState DisplayComments/*[in]*/)
{
  return (*this)->set_DisplayComments(DisplayComments);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_FarEastLineBreakLevel(Powerpoint_xp::PpFarEastLineBreakLevel* FarEastLineBreakLevel/*[out,retval]*/)
{
  return (*this)->get_FarEastLineBreakLevel(FarEastLineBreakLevel);
}

template <class T> Powerpoint_xp::PpFarEastLineBreakLevel __fastcall
TCOM_PresentationT<T>::get_FarEastLineBreakLevel(void)
{
  Powerpoint_xp::PpFarEastLineBreakLevel FarEastLineBreakLevel;
  OLECHECK(this->get_FarEastLineBreakLevel((Powerpoint_xp::PpFarEastLineBreakLevel*)&FarEastLineBreakLevel));
  return FarEastLineBreakLevel;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_FarEastLineBreakLevel(Powerpoint_xp::PpFarEastLineBreakLevel FarEastLineBreakLevel/*[in]*/)
{
  return (*this)->set_FarEastLineBreakLevel(FarEastLineBreakLevel);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_NoLineBreakBefore(BSTR* NoLineBreakBefore/*[out,retval]*/)
{
  return (*this)->get_NoLineBreakBefore(NoLineBreakBefore);
}

template <class T> BSTR __fastcall
TCOM_PresentationT<T>::get_NoLineBreakBefore(void)
{
  BSTR NoLineBreakBefore = 0;
  OLECHECK(this->get_NoLineBreakBefore((BSTR*)&NoLineBreakBefore));
  return NoLineBreakBefore;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_NoLineBreakBefore(BSTR NoLineBreakBefore/*[in]*/)
{
  return (*this)->set_NoLineBreakBefore(NoLineBreakBefore);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_NoLineBreakAfter(BSTR* NoLineBreakAfter/*[out,retval]*/)
{
  return (*this)->get_NoLineBreakAfter(NoLineBreakAfter);
}

template <class T> BSTR __fastcall
TCOM_PresentationT<T>::get_NoLineBreakAfter(void)
{
  BSTR NoLineBreakAfter = 0;
  OLECHECK(this->get_NoLineBreakAfter((BSTR*)&NoLineBreakAfter));
  return NoLineBreakAfter;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_NoLineBreakAfter(BSTR NoLineBreakAfter/*[in]*/)
{
  return (*this)->set_NoLineBreakAfter(NoLineBreakAfter);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::UpdateLinks(void)
{
  return (*this)->UpdateLinks();
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_SlideShowWindow(Powerpoint_xp::SlideShowWindow** SlideShowWindow/*[out,retval]*/)
{
  return (*this)->get_SlideShowWindow(SlideShowWindow);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_SlideShowWindow(Powerpoint_xp::SlideShowWindowPtr* SlideShowWindow/*[out,retval]*/)
{
  return (*this)->get_SlideShowWindow(SlideShowWindow**)SlideShowWindow);
}

template <class T> Powerpoint_xp::SlideShowWindowPtr __fastcall
TCOM_PresentationT<T>::get_SlideShowWindow(void)
{
  Powerpoint_xp::SlideShowWindow* SlideShowWindow;
  OLECHECK(this->get_SlideShowWindow((Powerpoint_xp::SlideShowWindow**)&SlideShowWindow));
  return (Powerpoint_xp::SlideShowWindowPtr)SlideShowWindow;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_FarEastLineBreakLanguage(Office_xp::MsoFarEastLineBreakLanguageID* FarEastLineBreakLanguage/*[out,retval]*/)
{
  return (*this)->get_FarEastLineBreakLanguage(FarEastLineBreakLanguage);
}

template <class T> Office_xp::MsoFarEastLineBreakLanguageID __fastcall
TCOM_PresentationT<T>::get_FarEastLineBreakLanguage(void)
{
  Office_xp::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage;
  OLECHECK(this->get_FarEastLineBreakLanguage((Office_xp::MsoFarEastLineBreakLanguageID*)&FarEastLineBreakLanguage));
  return FarEastLineBreakLanguage;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_FarEastLineBreakLanguage(Office_xp::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage/*[in]*/)
{
  return (*this)->set_FarEastLineBreakLanguage(FarEastLineBreakLanguage);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::WebPagePreview(void)
{
  return (*this)->WebPagePreview();
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_DefaultLanguageID(Office_xp::MsoLanguageID* DefaultLanguageID/*[out,retval]*/)
{
  return (*this)->get_DefaultLanguageID(DefaultLanguageID);
}

template <class T> Office_xp::MsoLanguageID __fastcall
TCOM_PresentationT<T>::get_DefaultLanguageID(void)
{
  Office_xp::MsoLanguageID DefaultLanguageID;
  OLECHECK(this->get_DefaultLanguageID((Office_xp::MsoLanguageID*)&DefaultLanguageID));
  return DefaultLanguageID;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_DefaultLanguageID(Office_xp::MsoLanguageID DefaultLanguageID/*[in]*/)
{
  return (*this)->set_DefaultLanguageID(DefaultLanguageID);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_CommandBars(Office_xp::CommandBars** CommandBars/*[out,retval]*/)
{
  return (*this)->get_CommandBars(CommandBars);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_CommandBars(Office_xp::CommandBarsPtr* CommandBars/*[out,retval]*/)
{
  return (*this)->get_CommandBars(CommandBars**)CommandBars);
}

template <class T> Office_xp::CommandBarsPtr __fastcall
TCOM_PresentationT<T>::get_CommandBars(void)
{
  Office_xp::CommandBars* CommandBars;
  OLECHECK(this->get_CommandBars((Office_xp::CommandBars**)&CommandBars));
  return (Office_xp::CommandBarsPtr)CommandBars;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_PublishObjects(Powerpoint_xp::PublishObjects** PublishObjects/*[out,retval]*/)
{
  return (*this)->get_PublishObjects(PublishObjects);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_PublishObjects(Powerpoint_xp::PublishObjectsPtr* PublishObjects/*[out,retval]*/)
{
  return (*this)->get_PublishObjects(PublishObjects**)PublishObjects);
}

template <class T> Powerpoint_xp::PublishObjectsPtr __fastcall
TCOM_PresentationT<T>::get_PublishObjects(void)
{
  Powerpoint_xp::PublishObjects* PublishObjects;
  OLECHECK(this->get_PublishObjects((Powerpoint_xp::PublishObjects**)&PublishObjects));
  return (Powerpoint_xp::PublishObjectsPtr)PublishObjects;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_WebOptions(Powerpoint_xp::WebOptions** WebOptions/*[out,retval]*/)
{
  return (*this)->get_WebOptions(WebOptions);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_WebOptions(Powerpoint_xp::WebOptionsPtr* WebOptions/*[out,retval]*/)
{
  return (*this)->get_WebOptions(WebOptions**)WebOptions);
}

template <class T> Powerpoint_xp::WebOptionsPtr __fastcall
TCOM_PresentationT<T>::get_WebOptions(void)
{
  Powerpoint_xp::WebOptions* WebOptions;
  OLECHECK(this->get_WebOptions((Powerpoint_xp::WebOptions**)&WebOptions));
  return (Powerpoint_xp::WebOptionsPtr)WebOptions;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_HTMLProject(Office_xp::HTMLProject** HTMLProject/*[out,retval]*/)
{
  return (*this)->get_HTMLProject(HTMLProject);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_HTMLProject(Office_xp::HTMLProjectPtr* HTMLProject/*[out,retval]*/)
{
  return (*this)->get_HTMLProject(HTMLProject**)HTMLProject);
}

template <class T> Office_xp::HTMLProjectPtr __fastcall
TCOM_PresentationT<T>::get_HTMLProject(void)
{
  Office_xp::HTMLProject* HTMLProject;
  OLECHECK(this->get_HTMLProject((Office_xp::HTMLProject**)&HTMLProject));
  return (Office_xp::HTMLProjectPtr)HTMLProject;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::ReloadAs(Office_xp::MsoEncoding cp/*[in]*/)
{
  return (*this)->ReloadAs(cp);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::MakeIntoTemplate(Office_xp::MsoTriState IsDesignTemplate/*[in]*/)
{
  return (*this)->MakeIntoTemplate(IsDesignTemplate);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_EnvelopeVisible(Office_xp::MsoTriState* EnvelopeVisible/*[out,retval]*/)
{
  return (*this)->get_EnvelopeVisible(EnvelopeVisible);
}

template <class T> Office_xp::MsoTriState __fastcall
TCOM_PresentationT<T>::get_EnvelopeVisible(void)
{
  Office_xp::MsoTriState EnvelopeVisible;
  OLECHECK(this->get_EnvelopeVisible((Office_xp::MsoTriState*)&EnvelopeVisible));
  return EnvelopeVisible;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_EnvelopeVisible(Office_xp::MsoTriState EnvelopeVisible/*[in]*/)
{
  return (*this)->set_EnvelopeVisible(EnvelopeVisible);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::sblt(BSTR s/*[in]*/)
{
  return (*this)->sblt(s);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_VBASigned(Office_xp::MsoTriState* VBASigned/*[out,retval]*/)
{
  return (*this)->get_VBASigned(VBASigned);
}

template <class T> Office_xp::MsoTriState __fastcall
TCOM_PresentationT<T>::get_VBASigned(void)
{
  Office_xp::MsoTriState VBASigned;
  OLECHECK(this->get_VBASigned((Office_xp::MsoTriState*)&VBASigned));
  return VBASigned;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_SnapToGrid(Office_xp::MsoTriState* SnapToGrid/*[out,retval]*/)
{
  return (*this)->get_SnapToGrid(SnapToGrid);
}

template <class T> Office_xp::MsoTriState __fastcall
TCOM_PresentationT<T>::get_SnapToGrid(void)
{
  Office_xp::MsoTriState SnapToGrid;
  OLECHECK(this->get_SnapToGrid((Office_xp::MsoTriState*)&SnapToGrid));
  return SnapToGrid;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_SnapToGrid(Office_xp::MsoTriState SnapToGrid/*[in]*/)
{
  return (*this)->set_SnapToGrid(SnapToGrid);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_GridDistance(float* GridDistance/*[out,retval]*/)
{
  return (*this)->get_GridDistance(GridDistance);
}

template <class T> float __fastcall
TCOM_PresentationT<T>::get_GridDistance(void)
{
  float GridDistance;
  OLECHECK(this->get_GridDistance((float*)&GridDistance));
  return GridDistance;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_GridDistance(float GridDistance/*[in]*/)
{
  return (*this)->set_GridDistance(GridDistance);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Designs(Powerpoint_xp::Designs** Designs/*[out,retval]*/)
{
  return (*this)->get_Designs(Designs);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Designs(Powerpoint_xp::DesignsPtr* Designs/*[out,retval]*/)
{
  return (*this)->get_Designs(Designs**)Designs);
}

template <class T> Powerpoint_xp::DesignsPtr __fastcall
TCOM_PresentationT<T>::get_Designs(void)
{
  Powerpoint_xp::Designs* Designs;
  OLECHECK(this->get_Designs((Powerpoint_xp::Designs**)&Designs));
  return (Powerpoint_xp::DesignsPtr)Designs;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::Merge(BSTR Path/*[in]*/)
{
  return (*this)->Merge(Path);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::CheckIn(VARIANT_BOOL SaveChanges/*[in,def,opt]*/, 
                               VARIANT Comments/*[in,opt]*/, VARIANT MakePublic/*[in,opt]*/)
{
  return (*this)->CheckIn(SaveChanges, Comments, MakePublic);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::CanCheckIn(VARIANT_BOOL* CanCheckIn/*[out,retval]*/)
{
  return (*this)->CanCheckIn(CanCheckIn);
}

template <class T> VARIANT_BOOL __fastcall
TCOM_PresentationT<T>::CanCheckIn(void)
{
  VARIANT_BOOL CanCheckIn;
  OLECHECK(this->CanCheckIn((VARIANT_BOOL*)&CanCheckIn));
  return CanCheckIn;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Signatures(Office_xp::SignatureSet** Signatures/*[out,retval]*/)
{
  return (*this)->get_Signatures(Signatures);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Signatures(Office_xp::SignatureSetPtr* Signatures/*[out,retval]*/)
{
  return (*this)->get_Signatures(SignatureSet**)Signatures);
}

template <class T> Office_xp::SignatureSetPtr __fastcall
TCOM_PresentationT<T>::get_Signatures(void)
{
  Office_xp::SignatureSet* Signatures;
  OLECHECK(this->get_Signatures((Office_xp::SignatureSet**)&Signatures));
  return (Office_xp::SignatureSetPtr)Signatures;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_RemovePersonalInformation(Office_xp::MsoTriState* RemovePersonalInformation/*[out,retval]*/)
{
  return (*this)->get_RemovePersonalInformation(RemovePersonalInformation);
}

template <class T> Office_xp::MsoTriState __fastcall
TCOM_PresentationT<T>::get_RemovePersonalInformation(void)
{
  Office_xp::MsoTriState RemovePersonalInformation;
  OLECHECK(this->get_RemovePersonalInformation((Office_xp::MsoTriState*)&RemovePersonalInformation));
  return RemovePersonalInformation;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_RemovePersonalInformation(Office_xp::MsoTriState RemovePersonalInformation/*[in]*/)
{
  return (*this)->set_RemovePersonalInformation(RemovePersonalInformation);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::SendForReview(BSTR Recipients/*[in,def,opt]*/, BSTR Subject/*[in,def,opt]*/, 
                                     VARIANT_BOOL ShowMessage/*[in,def,opt]*/, 
                                     VARIANT IncludeAttachment/*[in,opt]*/)
{
  return (*this)->SendForReview(Recipients, Subject, ShowMessage, IncludeAttachment);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::ReplyWithChanges(VARIANT_BOOL ShowMessage/*[in,def,opt]*/)
{
  return (*this)->ReplyWithChanges(ShowMessage);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::EndReview(void)
{
  return (*this)->EndReview();
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_HasRevisionInfo(Powerpoint_xp::PpRevisionInfo* HasRevisionInfo/*[out,retval]*/)
{
  return (*this)->get_HasRevisionInfo(HasRevisionInfo);
}

template <class T> Powerpoint_xp::PpRevisionInfo __fastcall
TCOM_PresentationT<T>::get_HasRevisionInfo(void)
{
  Powerpoint_xp::PpRevisionInfo HasRevisionInfo;
  OLECHECK(this->get_HasRevisionInfo((Powerpoint_xp::PpRevisionInfo*)&HasRevisionInfo));
  return HasRevisionInfo;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::AddBaseline(BSTR FileName/*[in,def,opt]*/)
{
  return (*this)->AddBaseline(FileName);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::RemoveBaseline(void)
{
  return (*this)->RemoveBaseline();
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_PasswordEncryptionProvider(BSTR* PasswordEncryptionProvider/*[out,retval]*/)
{
  return (*this)->get_PasswordEncryptionProvider(PasswordEncryptionProvider);
}

template <class T> BSTR __fastcall
TCOM_PresentationT<T>::get_PasswordEncryptionProvider(void)
{
  BSTR PasswordEncryptionProvider = 0;
  OLECHECK(this->get_PasswordEncryptionProvider((BSTR*)&PasswordEncryptionProvider));
  return PasswordEncryptionProvider;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_PasswordEncryptionAlgorithm(BSTR* PasswordEncryptionAlgorithm/*[out,retval]*/)
{
  return (*this)->get_PasswordEncryptionAlgorithm(PasswordEncryptionAlgorithm);
}

template <class T> BSTR __fastcall
TCOM_PresentationT<T>::get_PasswordEncryptionAlgorithm(void)
{
  BSTR PasswordEncryptionAlgorithm = 0;
  OLECHECK(this->get_PasswordEncryptionAlgorithm((BSTR*)&PasswordEncryptionAlgorithm));
  return PasswordEncryptionAlgorithm;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_PasswordEncryptionKeyLength(int* PasswordEncryptionKeyLength/*[out,retval]*/)
{
  return (*this)->get_PasswordEncryptionKeyLength(PasswordEncryptionKeyLength);
}

template <class T> int __fastcall
TCOM_PresentationT<T>::get_PasswordEncryptionKeyLength(void)
{
  int PasswordEncryptionKeyLength;
  OLECHECK(this->get_PasswordEncryptionKeyLength((int*)&PasswordEncryptionKeyLength));
  return PasswordEncryptionKeyLength;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_PasswordEncryptionFileProperties(VARIANT_BOOL* PasswordEncryptionFileProperties/*[out,retval]*/)
{
  return (*this)->get_PasswordEncryptionFileProperties(PasswordEncryptionFileProperties);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_PasswordEncryptionFileProperties(TOLEBOOL* PasswordEncryptionFileProperties/*[out,retval]*/)
{
  return (*this)->get_PasswordEncryptionFileProperties(VARIANT_BOOL*)PasswordEncryptionFileProperties);
}

template <class T> TOLEBOOL __fastcall
TCOM_PresentationT<T>::get_PasswordEncryptionFileProperties(void)
{
  VARIANT_BOOL PasswordEncryptionFileProperties;
  OLECHECK(this->get_PasswordEncryptionFileProperties((VARIANT_BOOL*)&PasswordEncryptionFileProperties));
  return (TOLEBOOL)PasswordEncryptionFileProperties;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::SetPasswordEncryptionOptions(BSTR PasswordEncryptionProvider/*[in]*/, 
                                                    BSTR PasswordEncryptionAlgorithm/*[in]*/, 
                                                    int PasswordEncryptionKeyLength/*[in]*/, 
                                                    VARIANT_BOOL PasswordEncryptionFileProperties/*[in]*/)
{
  return (*this)->SetPasswordEncryptionOptions(PasswordEncryptionProvider, 
                                               PasswordEncryptionAlgorithm, 
                                               PasswordEncryptionKeyLength, 
                                               PasswordEncryptionFileProperties);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Password(BSTR* Password/*[out,retval]*/)
{
  return (*this)->get_Password(Password);
}

template <class T> BSTR __fastcall
TCOM_PresentationT<T>::get_Password(void)
{
  BSTR Password = 0;
  OLECHECK(this->get_Password((BSTR*)&Password));
  return Password;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_Password(BSTR Password/*[in]*/)
{
  return (*this)->set_Password(Password);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_WritePassword(BSTR* WritePassword/*[out,retval]*/)
{
  return (*this)->get_WritePassword(WritePassword);
}

template <class T> BSTR __fastcall
TCOM_PresentationT<T>::get_WritePassword(void)
{
  BSTR WritePassword = 0;
  OLECHECK(this->get_WritePassword((BSTR*)&WritePassword));
  return WritePassword;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_WritePassword(BSTR WritePassword/*[in]*/)
{
  return (*this)->set_WritePassword(WritePassword);
}

// *********************************************************************//
// DispIntf:  _Presentation
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
_PresentationDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_PresentationDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_SlideMaster(Powerpoint_xp::_Master** SlideMaster/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideMaster"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::_Master**)SlideMaster /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::_Master* __fastcall
_PresentationDispT<T>::get_SlideMaster(void)
{
  Powerpoint_xp::_Master* SlideMaster;
  this->get_SlideMaster((Powerpoint_xp::_Master**)&SlideMaster);
  return SlideMaster;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_TitleMaster(Powerpoint_xp::_Master** TitleMaster/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TitleMaster"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::_Master**)TitleMaster /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::_Master* __fastcall
_PresentationDispT<T>::get_TitleMaster(void)
{
  Powerpoint_xp::_Master* TitleMaster;
  this->get_TitleMaster((Powerpoint_xp::_Master**)&TitleMaster);
  return TitleMaster;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_HasTitleMaster(Office_xp::MsoTriState* HasTitleMaster/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTitleMaster"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HasTitleMaster /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
_PresentationDispT<T>::get_HasTitleMaster(void)
{
  Office_xp::MsoTriState HasTitleMaster;
  this->get_HasTitleMaster((Office_xp::MsoTriState*)&HasTitleMaster);
  return HasTitleMaster;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::AddTitleMaster(Powerpoint_xp::_Master** TitleMaster/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTitleMaster"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::_Master**)TitleMaster /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::_Master* __fastcall
_PresentationDispT<T>::AddTitleMaster(void)
{
  Powerpoint_xp::_Master* TitleMaster;
  this->AddTitleMaster((Powerpoint_xp::_Master**)&TitleMaster);
  return TitleMaster;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::ApplyTemplate(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyTemplate"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_TemplateName(BSTR* TemplateName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TemplateName"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TemplateName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PresentationDispT<T>::get_TemplateName(void)
{
  BSTR TemplateName;
  this->get_TemplateName((BSTR*)&TemplateName);
  return TemplateName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_NotesMaster(Powerpoint_xp::_Master** NotesMaster/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotesMaster"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::_Master**)NotesMaster /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::_Master* __fastcall
_PresentationDispT<T>::get_NotesMaster(void)
{
  Powerpoint_xp::_Master* NotesMaster;
  this->get_NotesMaster((Powerpoint_xp::_Master**)&NotesMaster);
  return NotesMaster;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_HandoutMaster(Powerpoint_xp::_Master** HandoutMaster/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HandoutMaster"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::_Master**)HandoutMaster /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::_Master* __fastcall
_PresentationDispT<T>::get_HandoutMaster(void)
{
  Powerpoint_xp::_Master* HandoutMaster;
  this->get_HandoutMaster((Powerpoint_xp::_Master**)&HandoutMaster);
  return HandoutMaster;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Slides(Powerpoint_xp::Slides** Slides/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Slides"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Slides**)Slides /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Slides* __fastcall
_PresentationDispT<T>::get_Slides(void)
{
  Powerpoint_xp::Slides* Slides;
  this->get_Slides((Powerpoint_xp::Slides**)&Slides);
  return Slides;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_PageSetup(Powerpoint_xp::PageSetup** PageSetup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageSetup"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PageSetup**)PageSetup /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PageSetup* __fastcall
_PresentationDispT<T>::get_PageSetup(void)
{
  Powerpoint_xp::PageSetup* PageSetup;
  this->get_PageSetup((Powerpoint_xp::PageSetup**)&PageSetup);
  return PageSetup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_ColorSchemes(Powerpoint_xp::ColorSchemes** ColorSchemes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorSchemes"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorSchemes**)ColorSchemes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorSchemes* __fastcall
_PresentationDispT<T>::get_ColorSchemes(void)
{
  Powerpoint_xp::ColorSchemes* ColorSchemes;
  this->get_ColorSchemes((Powerpoint_xp::ColorSchemes**)&ColorSchemes);
  return ColorSchemes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_ExtraColors(Powerpoint_xp::ExtraColors** ExtraColors/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtraColors"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ExtraColors**)ExtraColors /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ExtraColors* __fastcall
_PresentationDispT<T>::get_ExtraColors(void)
{
  Powerpoint_xp::ExtraColors* ExtraColors;
  this->get_ExtraColors((Powerpoint_xp::ExtraColors**)&ExtraColors);
  return ExtraColors;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_SlideShowSettings(Powerpoint_xp::SlideShowSettings** SlideShowSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowSettings"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SlideShowSettings**)SlideShowSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::SlideShowSettings* __fastcall
_PresentationDispT<T>::get_SlideShowSettings(void)
{
  Powerpoint_xp::SlideShowSettings* SlideShowSettings;
  this->get_SlideShowSettings((Powerpoint_xp::SlideShowSettings**)&SlideShowSettings);
  return SlideShowSettings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Fonts(Powerpoint_xp::Fonts** Fonts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fonts"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Fonts**)Fonts /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Fonts* __fastcall
_PresentationDispT<T>::get_Fonts(void)
{
  Powerpoint_xp::Fonts* Fonts;
  this->get_Fonts((Powerpoint_xp::Fonts**)&Fonts);
  return Fonts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Windows(Powerpoint_xp::DocumentWindows** Windows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Windows"), DISPID(2017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DocumentWindows**)Windows /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::DocumentWindows* __fastcall
_PresentationDispT<T>::get_Windows(void)
{
  Powerpoint_xp::DocumentWindows* Windows;
  this->get_Windows((Powerpoint_xp::DocumentWindows**)&Windows);
  return Windows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Tags(Powerpoint_xp::Tags** Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(2018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Tags* __fastcall
_PresentationDispT<T>::get_Tags(void)
{
  Powerpoint_xp::Tags* Tags;
  this->get_Tags((Powerpoint_xp::Tags**)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_DefaultShape(Powerpoint_xp::Shape** DefaultShape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultShape"), DISPID(2019));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)DefaultShape /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
_PresentationDispT<T>::get_DefaultShape(void)
{
  Powerpoint_xp::Shape* DefaultShape;
  this->get_DefaultShape((Powerpoint_xp::Shape**)&DefaultShape);
  return DefaultShape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_BuiltInDocumentProperties(LPDISPATCH* BuiltInDocumentProperties/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuiltInDocumentProperties"), DISPID(2020));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BuiltInDocumentProperties /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_PresentationDispT<T>::get_BuiltInDocumentProperties(void)
{
  LPDISPATCH BuiltInDocumentProperties;
  this->get_BuiltInDocumentProperties((LPDISPATCH*)&BuiltInDocumentProperties);
  return BuiltInDocumentProperties;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_CustomDocumentProperties(LPDISPATCH* CustomDocumentProperties/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomDocumentProperties"), DISPID(2021));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CustomDocumentProperties /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_PresentationDispT<T>::get_CustomDocumentProperties(void)
{
  LPDISPATCH CustomDocumentProperties;
  this->get_CustomDocumentProperties((LPDISPATCH*)&CustomDocumentProperties);
  return CustomDocumentProperties;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_VBProject(Vbide_xp::VBProject** VBProject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBProject"), DISPID(2022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_xp::VBProject**)VBProject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_xp::VBProject* __fastcall
_PresentationDispT<T>::get_VBProject(void)
{
  Vbide_xp::VBProject* VBProject;
  this->get_VBProject((Vbide_xp::VBProject**)&VBProject);
  return VBProject;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_ReadOnly(Office_xp::MsoTriState* ReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(2023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ReadOnly /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
_PresentationDispT<T>::get_ReadOnly(void)
{
  Office_xp::MsoTriState ReadOnly;
  this->get_ReadOnly((Office_xp::MsoTriState*)&ReadOnly);
  return ReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_FullName(BSTR* FullName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullName"), DISPID(2024));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FullName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PresentationDispT<T>::get_FullName(void)
{
  BSTR FullName;
  this->get_FullName((BSTR*)&FullName);
  return FullName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2025));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PresentationDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Path(BSTR* Path/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Path"), DISPID(2026));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Path /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PresentationDispT<T>::get_Path(void)
{
  BSTR Path;
  this->get_Path((BSTR*)&Path);
  return Path;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Saved(Office_xp::MsoTriState* Saved/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Saved"), DISPID(2027));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Saved /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
_PresentationDispT<T>::get_Saved(void)
{
  Office_xp::MsoTriState Saved;
  this->get_Saved((Office_xp::MsoTriState*)&Saved);
  return Saved;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_Saved(Office_xp::MsoTriState Saved/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Saved"), DISPID(2027));
  TAutoArgs<1> _args;
  _args[1] = (int)Saved /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_LayoutDirection(Powerpoint_xp::PpDirection* LayoutDirection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LayoutDirection"), DISPID(2028));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LayoutDirection /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpDirection __fastcall
_PresentationDispT<T>::get_LayoutDirection(void)
{
  Powerpoint_xp::PpDirection LayoutDirection;
  this->get_LayoutDirection((Powerpoint_xp::PpDirection*)&LayoutDirection);
  return LayoutDirection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_LayoutDirection(Powerpoint_xp::PpDirection LayoutDirection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LayoutDirection"), DISPID(2028));
  TAutoArgs<1> _args;
  _args[1] = (int)LayoutDirection /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::NewWindow(Powerpoint_xp::DocumentWindow** NewWindow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewWindow"), DISPID(2029));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DocumentWindow**)NewWindow /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::DocumentWindow* __fastcall
_PresentationDispT<T>::NewWindow(void)
{
  Powerpoint_xp::DocumentWindow* NewWindow;
  this->NewWindow((Powerpoint_xp::DocumentWindow**)&NewWindow);
  return NewWindow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::FollowHyperlink(BSTR Address/*[in]*/, BSTR SubAddress/*[in,def,opt]*/, 
                                       VARIANT_BOOL NewWindow/*[in,def,opt]*/, 
                                       VARIANT_BOOL AddHistory/*[in,def,opt]*/, 
                                       BSTR ExtraInfo/*[in,def,opt]*/, 
                                       Office_xp::MsoExtraInfoMethod Method/*[in,def,opt]*/, 
                                       BSTR HeaderInfo/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("FollowHyperlink"), DISPID(2030));
  TAutoArgs<7> _args;
  _args[1] = Address /*[VT_BSTR:0]*/;
  _args[2] = SubAddress /*[VT_BSTR:0]*/;
  _args[3] = NewWindow /*[VT_BOOL:0]*/;
  _args[4] = AddHistory /*[VT_BOOL:0]*/;
  _args[5] = ExtraInfo /*[VT_BSTR:0]*/;
  _args[6] = (int)Method /*[VT_USERDEFINED:0]*/;
  _args[7] = HeaderInfo /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::AddToFavorites()
{
  _TDispID _dispid(*this, OLETEXT("AddToFavorites"), DISPID(2031));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::Unused()
{
  _TDispID _dispid(*this, OLETEXT("Unused"), DISPID(2032));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_PrintOptions(Powerpoint_xp::PrintOptions** PrintOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintOptions"), DISPID(2033));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PrintOptions**)PrintOptions /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PrintOptions* __fastcall
_PresentationDispT<T>::get_PrintOptions(void)
{
  Powerpoint_xp::PrintOptions* PrintOptions;
  this->get_PrintOptions((Powerpoint_xp::PrintOptions**)&PrintOptions);
  return PrintOptions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::PrintOut(int From/*[in,def,opt]*/, int To/*[in,def,opt]*/, 
                                BSTR PrintToFile/*[in,def,opt]*/, int Copies/*[in,def,opt]*/, 
                                Office_xp::MsoTriState Collate/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintOut"), DISPID(2034));
  TAutoArgs<5> _args;
  _args[1] = From /*[VT_INT:0]*/;
  _args[2] = To /*[VT_INT:0]*/;
  _args[3] = PrintToFile /*[VT_BSTR:0]*/;
  _args[4] = Copies /*[VT_INT:0]*/;
  _args[5] = (int)Collate /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::Save()
{
  _TDispID _dispid(*this, OLETEXT("Save"), DISPID(2035));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::SaveAs(BSTR FileName/*[in]*/, 
                              Powerpoint_xp::PpSaveAsFileType FileFormat/*[in,def,opt]*/, 
                              Office_xp::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveAs"), DISPID(2036));
  TAutoArgs<3> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = (int)FileFormat /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)EmbedTrueTypeFonts /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::SaveCopyAs(BSTR FileName/*[in]*/, 
                                  Powerpoint_xp::PpSaveAsFileType FileFormat/*[in,def,opt]*/, 
                                  Office_xp::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveCopyAs"), DISPID(2037));
  TAutoArgs<3> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = (int)FileFormat /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)EmbedTrueTypeFonts /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::Export(BSTR Path/*[in]*/, BSTR FilterName/*[in]*/, 
                              int ScaleWidth/*[in,def,opt]*/, int ScaleHeight/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Export"), DISPID(2038));
  TAutoArgs<4> _args;
  _args[1] = Path /*[VT_BSTR:0]*/;
  _args[2] = FilterName /*[VT_BSTR:0]*/;
  _args[3] = ScaleWidth /*[VT_INT:0]*/;
  _args[4] = ScaleHeight /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::Close()
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(2039));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::SetUndoText(BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetUndoText"), DISPID(2040));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Container(LPDISPATCH* Container/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Container"), DISPID(2041));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Container /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_PresentationDispT<T>::get_Container(void)
{
  LPDISPATCH Container;
  this->get_Container((LPDISPATCH*)&Container);
  return Container;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_DisplayComments(Office_xp::MsoTriState* DisplayComments/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayComments"), DISPID(2042));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayComments /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
_PresentationDispT<T>::get_DisplayComments(void)
{
  Office_xp::MsoTriState DisplayComments;
  this->get_DisplayComments((Office_xp::MsoTriState*)&DisplayComments);
  return DisplayComments;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_DisplayComments(Office_xp::MsoTriState DisplayComments/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayComments"), DISPID(2042));
  TAutoArgs<1> _args;
  _args[1] = (int)DisplayComments /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_FarEastLineBreakLevel(Powerpoint_xp::PpFarEastLineBreakLevel* FarEastLineBreakLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FarEastLineBreakLevel"), DISPID(2043));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FarEastLineBreakLevel /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpFarEastLineBreakLevel __fastcall
_PresentationDispT<T>::get_FarEastLineBreakLevel(void)
{
  Powerpoint_xp::PpFarEastLineBreakLevel FarEastLineBreakLevel;
  this->get_FarEastLineBreakLevel((Powerpoint_xp::PpFarEastLineBreakLevel*)&FarEastLineBreakLevel);
  return FarEastLineBreakLevel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_FarEastLineBreakLevel(Powerpoint_xp::PpFarEastLineBreakLevel FarEastLineBreakLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FarEastLineBreakLevel"), DISPID(2043));
  TAutoArgs<1> _args;
  _args[1] = (int)FarEastLineBreakLevel /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_NoLineBreakBefore(BSTR* NoLineBreakBefore/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NoLineBreakBefore"), DISPID(2044));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NoLineBreakBefore /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PresentationDispT<T>::get_NoLineBreakBefore(void)
{
  BSTR NoLineBreakBefore;
  this->get_NoLineBreakBefore((BSTR*)&NoLineBreakBefore);
  return NoLineBreakBefore;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_NoLineBreakBefore(BSTR NoLineBreakBefore/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NoLineBreakBefore"), DISPID(2044));
  TAutoArgs<1> _args;
  _args[1] = NoLineBreakBefore /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_NoLineBreakAfter(BSTR* NoLineBreakAfter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NoLineBreakAfter"), DISPID(2045));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NoLineBreakAfter /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PresentationDispT<T>::get_NoLineBreakAfter(void)
{
  BSTR NoLineBreakAfter;
  this->get_NoLineBreakAfter((BSTR*)&NoLineBreakAfter);
  return NoLineBreakAfter;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_NoLineBreakAfter(BSTR NoLineBreakAfter/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NoLineBreakAfter"), DISPID(2045));
  TAutoArgs<1> _args;
  _args[1] = NoLineBreakAfter /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::UpdateLinks()
{
  _TDispID _dispid(*this, OLETEXT("UpdateLinks"), DISPID(2046));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_SlideShowWindow(Powerpoint_xp::SlideShowWindow** SlideShowWindow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowWindow"), DISPID(2047));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SlideShowWindow**)SlideShowWindow /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::SlideShowWindow* __fastcall
_PresentationDispT<T>::get_SlideShowWindow(void)
{
  Powerpoint_xp::SlideShowWindow* SlideShowWindow;
  this->get_SlideShowWindow((Powerpoint_xp::SlideShowWindow**)&SlideShowWindow);
  return SlideShowWindow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_FarEastLineBreakLanguage(Office_xp::MsoFarEastLineBreakLanguageID* FarEastLineBreakLanguage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FarEastLineBreakLanguage"), DISPID(2048));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FarEastLineBreakLanguage /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoFarEastLineBreakLanguageID __fastcall
_PresentationDispT<T>::get_FarEastLineBreakLanguage(void)
{
  Office_xp::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage;
  this->get_FarEastLineBreakLanguage((Office_xp::MsoFarEastLineBreakLanguageID*)&FarEastLineBreakLanguage);
  return FarEastLineBreakLanguage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_FarEastLineBreakLanguage(Office_xp::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FarEastLineBreakLanguage"), DISPID(2048));
  TAutoArgs<1> _args;
  _args[1] = (int)FarEastLineBreakLanguage /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::WebPagePreview()
{
  _TDispID _dispid(*this, OLETEXT("WebPagePreview"), DISPID(2049));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_DefaultLanguageID(Office_xp::MsoLanguageID* DefaultLanguageID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultLanguageID"), DISPID(2050));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DefaultLanguageID /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoLanguageID __fastcall
_PresentationDispT<T>::get_DefaultLanguageID(void)
{
  Office_xp::MsoLanguageID DefaultLanguageID;
  this->get_DefaultLanguageID((Office_xp::MsoLanguageID*)&DefaultLanguageID);
  return DefaultLanguageID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_DefaultLanguageID(Office_xp::MsoLanguageID DefaultLanguageID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultLanguageID"), DISPID(2050));
  TAutoArgs<1> _args;
  _args[1] = (int)DefaultLanguageID /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_CommandBars(Office_xp::CommandBars** CommandBars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandBars"), DISPID(2051));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::CommandBars**)CommandBars /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::CommandBars* __fastcall
_PresentationDispT<T>::get_CommandBars(void)
{
  Office_xp::CommandBars* CommandBars;
  this->get_CommandBars((Office_xp::CommandBars**)&CommandBars);
  return CommandBars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_PublishObjects(Powerpoint_xp::PublishObjects** PublishObjects/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PublishObjects"), DISPID(2052));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PublishObjects**)PublishObjects /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PublishObjects* __fastcall
_PresentationDispT<T>::get_PublishObjects(void)
{
  Powerpoint_xp::PublishObjects* PublishObjects;
  this->get_PublishObjects((Powerpoint_xp::PublishObjects**)&PublishObjects);
  return PublishObjects;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_WebOptions(Powerpoint_xp::WebOptions** WebOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WebOptions"), DISPID(2053));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::WebOptions**)WebOptions /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::WebOptions* __fastcall
_PresentationDispT<T>::get_WebOptions(void)
{
  Powerpoint_xp::WebOptions* WebOptions;
  this->get_WebOptions((Powerpoint_xp::WebOptions**)&WebOptions);
  return WebOptions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_HTMLProject(Office_xp::HTMLProject** HTMLProject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLProject"), DISPID(2054));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::HTMLProject**)HTMLProject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::HTMLProject* __fastcall
_PresentationDispT<T>::get_HTMLProject(void)
{
  Office_xp::HTMLProject* HTMLProject;
  this->get_HTMLProject((Office_xp::HTMLProject**)&HTMLProject);
  return HTMLProject;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::ReloadAs(Office_xp::MsoEncoding cp/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReloadAs"), DISPID(2055));
  TAutoArgs<1> _args;
  _args[1] = (int)cp /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::MakeIntoTemplate(Office_xp::MsoTriState IsDesignTemplate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MakeIntoTemplate"), DISPID(2056));
  TAutoArgs<1> _args;
  _args[1] = (int)IsDesignTemplate /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_EnvelopeVisible(Office_xp::MsoTriState* EnvelopeVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnvelopeVisible"), DISPID(2057));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EnvelopeVisible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
_PresentationDispT<T>::get_EnvelopeVisible(void)
{
  Office_xp::MsoTriState EnvelopeVisible;
  this->get_EnvelopeVisible((Office_xp::MsoTriState*)&EnvelopeVisible);
  return EnvelopeVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_EnvelopeVisible(Office_xp::MsoTriState EnvelopeVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnvelopeVisible"), DISPID(2057));
  TAutoArgs<1> _args;
  _args[1] = (int)EnvelopeVisible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::sblt(BSTR s/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("sblt"), DISPID(2058));
  TAutoArgs<1> _args;
  _args[1] = s /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_VBASigned(Office_xp::MsoTriState* VBASigned/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBASigned"), DISPID(2059));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)VBASigned /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
_PresentationDispT<T>::get_VBASigned(void)
{
  Office_xp::MsoTriState VBASigned;
  this->get_VBASigned((Office_xp::MsoTriState*)&VBASigned);
  return VBASigned;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_SnapToGrid(Office_xp::MsoTriState* SnapToGrid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SnapToGrid"), DISPID(2061));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SnapToGrid /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
_PresentationDispT<T>::get_SnapToGrid(void)
{
  Office_xp::MsoTriState SnapToGrid;
  this->get_SnapToGrid((Office_xp::MsoTriState*)&SnapToGrid);
  return SnapToGrid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_SnapToGrid(Office_xp::MsoTriState SnapToGrid/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SnapToGrid"), DISPID(2061));
  TAutoArgs<1> _args;
  _args[1] = (int)SnapToGrid /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_GridDistance(float* GridDistance/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridDistance"), DISPID(2062));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GridDistance /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_PresentationDispT<T>::get_GridDistance(void)
{
  float GridDistance;
  this->get_GridDistance((float*)&GridDistance);
  return GridDistance;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_GridDistance(float GridDistance/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridDistance"), DISPID(2062));
  TAutoArgs<1> _args;
  _args[1] = GridDistance /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Designs(Powerpoint_xp::Designs** Designs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Designs"), DISPID(2063));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Designs**)Designs /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Designs* __fastcall
_PresentationDispT<T>::get_Designs(void)
{
  Powerpoint_xp::Designs* Designs;
  this->get_Designs((Powerpoint_xp::Designs**)&Designs);
  return Designs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::Merge(BSTR Path/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Merge"), DISPID(2064));
  TAutoArgs<1> _args;
  _args[1] = Path /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::CheckIn(VARIANT_BOOL SaveChanges/*[in,def,opt]*/, 
                               VARIANT Comments/*[in,opt]*/, VARIANT MakePublic/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckIn"), DISPID(2065));
  TAutoArgs<3> _args;
  _args[1] = SaveChanges /*[VT_BOOL:0]*/;
  _args[2] = Comments /*[VT_VARIANT:0]*/;
  _args[3] = MakePublic /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::CanCheckIn(VARIANT_BOOL* CanCheckIn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanCheckIn"), DISPID(2066));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CanCheckIn /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_PresentationDispT<T>::CanCheckIn(void)
{
  VARIANT_BOOL CanCheckIn;
  this->CanCheckIn((VARIANT_BOOL*)&CanCheckIn);
  return CanCheckIn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Signatures(Office_xp::SignatureSet** Signatures/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Signatures"), DISPID(2067));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::SignatureSet**)Signatures /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::SignatureSet* __fastcall
_PresentationDispT<T>::get_Signatures(void)
{
  Office_xp::SignatureSet* Signatures;
  this->get_Signatures((Office_xp::SignatureSet**)&Signatures);
  return Signatures;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_RemovePersonalInformation(Office_xp::MsoTriState* RemovePersonalInformation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemovePersonalInformation"), DISPID(2068));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RemovePersonalInformation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
_PresentationDispT<T>::get_RemovePersonalInformation(void)
{
  Office_xp::MsoTriState RemovePersonalInformation;
  this->get_RemovePersonalInformation((Office_xp::MsoTriState*)&RemovePersonalInformation);
  return RemovePersonalInformation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_RemovePersonalInformation(Office_xp::MsoTriState RemovePersonalInformation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemovePersonalInformation"), DISPID(2068));
  TAutoArgs<1> _args;
  _args[1] = (int)RemovePersonalInformation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::SendForReview(BSTR Recipients/*[in,def,opt]*/, BSTR Subject/*[in,def,opt]*/, 
                                     VARIANT_BOOL ShowMessage/*[in,def,opt]*/, 
                                     VARIANT IncludeAttachment/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendForReview"), DISPID(2069));
  TAutoArgs<4> _args;
  _args[1] = Recipients /*[VT_BSTR:0]*/;
  _args[2] = Subject /*[VT_BSTR:0]*/;
  _args[3] = ShowMessage /*[VT_BOOL:0]*/;
  _args[4] = IncludeAttachment /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::ReplyWithChanges(VARIANT_BOOL ShowMessage/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReplyWithChanges"), DISPID(2070));
  TAutoArgs<1> _args;
  _args[1] = ShowMessage /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::EndReview()
{
  _TDispID _dispid(*this, OLETEXT("EndReview"), DISPID(2071));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_HasRevisionInfo(Powerpoint_xp::PpRevisionInfo* HasRevisionInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasRevisionInfo"), DISPID(2072));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HasRevisionInfo /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpRevisionInfo __fastcall
_PresentationDispT<T>::get_HasRevisionInfo(void)
{
  Powerpoint_xp::PpRevisionInfo HasRevisionInfo;
  this->get_HasRevisionInfo((Powerpoint_xp::PpRevisionInfo*)&HasRevisionInfo);
  return HasRevisionInfo;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::AddBaseline(BSTR FileName/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBaseline"), DISPID(2073));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::RemoveBaseline()
{
  _TDispID _dispid(*this, OLETEXT("RemoveBaseline"), DISPID(2074));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_PasswordEncryptionProvider(BSTR* PasswordEncryptionProvider/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PasswordEncryptionProvider"), DISPID(2075));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PasswordEncryptionProvider /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PresentationDispT<T>::get_PasswordEncryptionProvider(void)
{
  BSTR PasswordEncryptionProvider;
  this->get_PasswordEncryptionProvider((BSTR*)&PasswordEncryptionProvider);
  return PasswordEncryptionProvider;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_PasswordEncryptionAlgorithm(BSTR* PasswordEncryptionAlgorithm/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PasswordEncryptionAlgorithm"), DISPID(2076));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PasswordEncryptionAlgorithm /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PresentationDispT<T>::get_PasswordEncryptionAlgorithm(void)
{
  BSTR PasswordEncryptionAlgorithm;
  this->get_PasswordEncryptionAlgorithm((BSTR*)&PasswordEncryptionAlgorithm);
  return PasswordEncryptionAlgorithm;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_PasswordEncryptionKeyLength(int* PasswordEncryptionKeyLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PasswordEncryptionKeyLength"), DISPID(2077));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PasswordEncryptionKeyLength /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_PresentationDispT<T>::get_PasswordEncryptionKeyLength(void)
{
  int PasswordEncryptionKeyLength;
  this->get_PasswordEncryptionKeyLength((int*)&PasswordEncryptionKeyLength);
  return PasswordEncryptionKeyLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_PasswordEncryptionFileProperties(VARIANT_BOOL* PasswordEncryptionFileProperties/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PasswordEncryptionFileProperties"), DISPID(2078));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PasswordEncryptionFileProperties /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_PresentationDispT<T>::get_PasswordEncryptionFileProperties(void)
{
  VARIANT_BOOL PasswordEncryptionFileProperties;
  this->get_PasswordEncryptionFileProperties((VARIANT_BOOL*)&PasswordEncryptionFileProperties);
  return PasswordEncryptionFileProperties;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::SetPasswordEncryptionOptions(BSTR PasswordEncryptionProvider/*[in]*/, 
                                                    BSTR PasswordEncryptionAlgorithm/*[in]*/, 
                                                    int PasswordEncryptionKeyLength/*[in]*/, 
                                                    VARIANT_BOOL PasswordEncryptionFileProperties/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPasswordEncryptionOptions"), DISPID(2079));
  TAutoArgs<4> _args;
  _args[1] = PasswordEncryptionProvider /*[VT_BSTR:0]*/;
  _args[2] = PasswordEncryptionAlgorithm /*[VT_BSTR:0]*/;
  _args[3] = PasswordEncryptionKeyLength /*[VT_INT:0]*/;
  _args[4] = PasswordEncryptionFileProperties /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Password(BSTR* Password/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(2080));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Password /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PresentationDispT<T>::get_Password(void)
{
  BSTR Password;
  this->get_Password((BSTR*)&Password);
  return Password;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_Password(BSTR Password/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(2080));
  TAutoArgs<1> _args;
  _args[1] = Password /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_WritePassword(BSTR* WritePassword/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WritePassword"), DISPID(2081));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(WritePassword /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PresentationDispT<T>::get_WritePassword(void)
{
  BSTR WritePassword;
  this->get_WritePassword((BSTR*)&WritePassword);
  return WritePassword;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_WritePassword(BSTR WritePassword/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WritePassword"), DISPID(2081));
  TAutoArgs<1> _args;
  _args[1] = WritePassword /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Hyperlinks
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493464-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinksDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
HyperlinksDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinksDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
HyperlinksDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinksDispT<T>::Item(int Index/*[in]*/, Powerpoint_xp::Hyperlink** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Hyperlink**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Hyperlink* __fastcall
HyperlinksDispT<T>::Item(int Index/*[in]*/)
{
  Powerpoint_xp::Hyperlink* Item;
  this->Item(Index, (Powerpoint_xp::Hyperlink**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinksDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
HyperlinksDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinksDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
HyperlinksDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinksDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
HyperlinksDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Hyperlink
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493465-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
HyperlinkDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
HyperlinkDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_Type(Office_xp::MsoHyperlinkType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoHyperlinkType __fastcall
HyperlinkDispT<T>::get_Type(void)
{
  Office_xp::MsoHyperlinkType Type;
  this->get_Type((Office_xp::MsoHyperlinkType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_Address(BSTR* Address/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Address"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Address /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
HyperlinkDispT<T>::get_Address(void)
{
  BSTR Address;
  this->get_Address((BSTR*)&Address);
  return Address;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::set_Address(BSTR Address/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Address"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = Address /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_SubAddress(BSTR* SubAddress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubAddress"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SubAddress /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
HyperlinkDispT<T>::get_SubAddress(void)
{
  BSTR SubAddress;
  this->get_SubAddress((BSTR*)&SubAddress);
  return SubAddress;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::set_SubAddress(BSTR SubAddress/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubAddress"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = SubAddress /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::AddToFavorites()
{
  _TDispID _dispid(*this, OLETEXT("AddToFavorites"), DISPID(2006));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_EmailSubject(BSTR* EmailSubject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EmailSubject"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(EmailSubject /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
HyperlinkDispT<T>::get_EmailSubject(void)
{
  BSTR EmailSubject;
  this->get_EmailSubject((BSTR*)&EmailSubject);
  return EmailSubject;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::set_EmailSubject(BSTR EmailSubject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EmailSubject"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = EmailSubject /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_ScreenTip(BSTR* ScreenTip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScreenTip"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ScreenTip /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
HyperlinkDispT<T>::get_ScreenTip(void)
{
  BSTR ScreenTip;
  this->get_ScreenTip((BSTR*)&ScreenTip);
  return ScreenTip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::set_ScreenTip(BSTR ScreenTip/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScreenTip"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = ScreenTip /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_TextToDisplay(BSTR* TextToDisplay/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextToDisplay"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TextToDisplay /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
HyperlinkDispT<T>::get_TextToDisplay(void)
{
  BSTR TextToDisplay;
  this->get_TextToDisplay((BSTR*)&TextToDisplay);
  return TextToDisplay;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::set_TextToDisplay(BSTR TextToDisplay/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextToDisplay"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = TextToDisplay /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_ShowAndReturn(Office_xp::MsoTriState* ShowAndReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowAndReturn"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowAndReturn /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
HyperlinkDispT<T>::get_ShowAndReturn(void)
{
  Office_xp::MsoTriState ShowAndReturn;
  this->get_ShowAndReturn((Office_xp::MsoTriState*)&ShowAndReturn);
  return ShowAndReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::set_ShowAndReturn(Office_xp::MsoTriState ShowAndReturn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowAndReturn"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowAndReturn /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::Follow()
{
  _TDispID _dispid(*this, OLETEXT("Follow"), DISPID(2011));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::CreateNewDocument(BSTR FileName/*[in]*/, Office_xp::MsoTriState EditNow/*[in]*/, 
                                     Office_xp::MsoTriState Overwrite/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateNewDocument"), DISPID(2012));
  TAutoArgs<3> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = (int)EditNow /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)Overwrite /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2013));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  PageSetup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493466-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
PageSetupDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PageSetupDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::get_FirstSlideNumber(int* FirstSlideNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirstSlideNumber"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FirstSlideNumber /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PageSetupDispT<T>::get_FirstSlideNumber(void)
{
  int FirstSlideNumber;
  this->get_FirstSlideNumber((int*)&FirstSlideNumber);
  return FirstSlideNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::set_FirstSlideNumber(int FirstSlideNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirstSlideNumber"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = FirstSlideNumber /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::get_SlideHeight(float* SlideHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideHeight"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PageSetupDispT<T>::get_SlideHeight(void)
{
  float SlideHeight;
  this->get_SlideHeight((float*)&SlideHeight);
  return SlideHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::set_SlideHeight(float SlideHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideHeight"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = SlideHeight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::get_SlideWidth(float* SlideWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideWidth"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PageSetupDispT<T>::get_SlideWidth(void)
{
  float SlideWidth;
  this->get_SlideWidth((float*)&SlideWidth);
  return SlideWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::set_SlideWidth(float SlideWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideWidth"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = SlideWidth /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::get_SlideSize(Powerpoint_xp::PpSlideSizeType* SlideSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideSize"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SlideSize /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpSlideSizeType __fastcall
PageSetupDispT<T>::get_SlideSize(void)
{
  Powerpoint_xp::PpSlideSizeType SlideSize;
  this->get_SlideSize((Powerpoint_xp::PpSlideSizeType*)&SlideSize);
  return SlideSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::set_SlideSize(Powerpoint_xp::PpSlideSizeType SlideSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideSize"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)SlideSize /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::get_NotesOrientation(Office_xp::MsoOrientation* NotesOrientation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotesOrientation"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)NotesOrientation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoOrientation __fastcall
PageSetupDispT<T>::get_NotesOrientation(void)
{
  Office_xp::MsoOrientation NotesOrientation;
  this->get_NotesOrientation((Office_xp::MsoOrientation*)&NotesOrientation);
  return NotesOrientation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::set_NotesOrientation(Office_xp::MsoOrientation NotesOrientation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotesOrientation"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)NotesOrientation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::get_SlideOrientation(Office_xp::MsoOrientation* SlideOrientation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideOrientation"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SlideOrientation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoOrientation __fastcall
PageSetupDispT<T>::get_SlideOrientation(void)
{
  Office_xp::MsoOrientation SlideOrientation;
  this->get_SlideOrientation((Office_xp::MsoOrientation*)&SlideOrientation);
  return SlideOrientation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::set_SlideOrientation(Office_xp::MsoOrientation SlideOrientation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideOrientation"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)SlideOrientation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Fonts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493467-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
FontsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FontsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontsDispT<T>::Item(VARIANT Index/*[in]*/, Powerpoint_xp::Font** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Font**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Font* __fastcall
FontsDispT<T>::Item(VARIANT Index/*[in]*/)
{
  Powerpoint_xp::Font* Item;
  this->Item(Index, (Powerpoint_xp::Font**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontsDispT<T>::Replace(BSTR Original/*[in]*/, BSTR Replacement/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Replace"), DISPID(2003));
  TAutoArgs<2> _args;
  _args[1] = Original /*[VT_BSTR:0]*/;
  _args[2] = Replacement /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
FontsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
FontsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FontsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  ExtraColors
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493468-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ExtraColorsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
ExtraColorsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ExtraColorsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ExtraColorsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ExtraColorsDispT<T>::Item(int Index/*[in]*/, Office_xp::MsoRGBType* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(Item /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_xp::MsoRGBType __fastcall
ExtraColorsDispT<T>::Item(int Index/*[in]*/)
{
  Office_xp::MsoRGBType Item;
  this->Item(Index, (Office_xp::MsoRGBType*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ExtraColorsDispT<T>::Add(Office_xp::MsoRGBType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = Type /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ExtraColorsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ExtraColorsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ExtraColorsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ExtraColorsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ExtraColorsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ExtraColorsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Slides
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493469-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
SlidesDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SlidesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::Item(VARIANT Index/*[in]*/, Powerpoint_xp::PowerPointSlide** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointSlide**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointSlide* __fastcall
SlidesDispT<T>::Item(VARIANT Index/*[in]*/)
{
  Powerpoint_xp::PowerPointSlide* Item;
  this->Item(Index, (Powerpoint_xp::PowerPointSlide**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::FindBySlideID(long SlideID/*[in]*/, 
                              Powerpoint_xp::PowerPointSlide** FindBySlideID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindBySlideID"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = SlideID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointSlide**)FindBySlideID /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointSlide* __fastcall
SlidesDispT<T>::FindBySlideID(long SlideID/*[in]*/)
{
  Powerpoint_xp::PowerPointSlide* FindBySlideID;
  this->FindBySlideID(SlideID, (Powerpoint_xp::PowerPointSlide**)&FindBySlideID);
  return FindBySlideID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::Add(int Index/*[in]*/, Powerpoint_xp::PpSlideLayout Layout/*[in]*/, 
                    Powerpoint_xp::PowerPointSlide** Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2004));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  _args[2] = (int)Layout /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointSlide**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointSlide* __fastcall
SlidesDispT<T>::Add(int Index/*[in]*/, Powerpoint_xp::PpSlideLayout Layout/*[in]*/)
{
  Powerpoint_xp::PowerPointSlide* Add;
  this->Add(Index, Layout, (Powerpoint_xp::PowerPointSlide**)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::InsertFromFile(BSTR FileName/*[in]*/, int Index/*[in]*/, 
                               int SlideStart/*[in,def,opt]*/, int SlideEnd/*[in,def,opt]*/, 
                               int* FromFile/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertFromFile"), DISPID(2005));
  TAutoArgs<4> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = Index /*[VT_INT:0]*/;
  _args[3] = SlideStart /*[VT_INT:0]*/;
  _args[4] = SlideEnd /*[VT_INT:0]*/;
  return OutRetValSetterPtr(FromFile /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
SlidesDispT<T>::InsertFromFile(BSTR FileName/*[in]*/, int Index/*[in]*/, 
                               int SlideStart/*[in,def,opt]*/, int SlideEnd/*[in,def,opt]*/)
{
  int FromFile;
  this->InsertFromFile(FileName, Index, SlideStart, SlideEnd, (int*)&FromFile);
  return FromFile;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::Range(VARIANT Index/*[in,opt]*/, Powerpoint_xp::SlideRange** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Range"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SlideRange**)Range /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::SlideRange* __fastcall
SlidesDispT<T>::Range(VARIANT Index/*[in,opt]*/)
{
  Powerpoint_xp::SlideRange* Range;
  this->Range(Index, (Powerpoint_xp::SlideRange**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::Paste(int Index/*[in,def,opt]*/, Powerpoint_xp::SlideRange** Paste/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Paste"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SlideRange**)Paste /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::SlideRange* __fastcall
SlidesDispT<T>::Paste(int Index/*[in,def,opt]*/)
{
  Powerpoint_xp::SlideRange* Paste;
  this->Paste(Index, (Powerpoint_xp::SlideRange**)&Paste);
  return Paste;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
SlidesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
SlidesDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SlidesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// SmartIntf: TCOM_Slide
// Interface: _Slide
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  return (*this)->get_Application(Application);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Application(Powerpoint_xp::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  return (*this)->get_Application(PowerPointApplication**)Application);
}

template <class T> Powerpoint_xp::PowerPointApplicationPtr __fastcall
TCOM_SlideT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
  return (Powerpoint_xp::PowerPointApplicationPtr)Application;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  return (*this)->get_Parent(Parent);
}

template <class T> LPDISPATCH __fastcall
TCOM_SlideT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
  return Parent;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Shapes(Powerpoint_xp::Shapes** Shapes/*[out,retval]*/)
{
  return (*this)->get_Shapes(Shapes);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Shapes(Powerpoint_xp::ShapesPtr* Shapes/*[out,retval]*/)
{
  return (*this)->get_Shapes(Shapes**)Shapes);
}

template <class T> Powerpoint_xp::ShapesPtr __fastcall
TCOM_SlideT<T>::get_Shapes(void)
{
  Powerpoint_xp::Shapes* Shapes;
  OLECHECK(this->get_Shapes((Powerpoint_xp::Shapes**)&Shapes));
  return (Powerpoint_xp::ShapesPtr)Shapes;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_HeadersFooters(Powerpoint_xp::HeadersFooters** HeadersFooters/*[out,retval]*/)
{
  return (*this)->get_HeadersFooters(HeadersFooters);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_HeadersFooters(Powerpoint_xp::HeadersFootersPtr* HeadersFooters/*[out,retval]*/)
{
  return (*this)->get_HeadersFooters(HeadersFooters**)HeadersFooters);
}

template <class T> Powerpoint_xp::HeadersFootersPtr __fastcall
TCOM_SlideT<T>::get_HeadersFooters(void)
{
  Powerpoint_xp::HeadersFooters* HeadersFooters;
  OLECHECK(this->get_HeadersFooters((Powerpoint_xp::HeadersFooters**)&HeadersFooters));
  return (Powerpoint_xp::HeadersFootersPtr)HeadersFooters;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_SlideShowTransition(Powerpoint_xp::SlideShowTransition** SlideShowTransition/*[out,retval]*/)
{
  return (*this)->get_SlideShowTransition(SlideShowTransition);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_SlideShowTransition(Powerpoint_xp::SlideShowTransitionPtr* SlideShowTransition/*[out,retval]*/)
{
  return (*this)->get_SlideShowTransition(SlideShowTransition**)SlideShowTransition);
}

template <class T> Powerpoint_xp::SlideShowTransitionPtr __fastcall
TCOM_SlideT<T>::get_SlideShowTransition(void)
{
  Powerpoint_xp::SlideShowTransition* SlideShowTransition;
  OLECHECK(this->get_SlideShowTransition((Powerpoint_xp::SlideShowTransition**)&SlideShowTransition));
  return (Powerpoint_xp::SlideShowTransitionPtr)SlideShowTransition;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_ColorScheme(Powerpoint_xp::ColorScheme** ColorScheme/*[out,retval]*/)
{
  return (*this)->get_ColorScheme(ColorScheme);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_ColorScheme(Powerpoint_xp::ColorSchemePtr* ColorScheme/*[out,retval]*/)
{
  return (*this)->get_ColorScheme(ColorScheme**)ColorScheme);
}

template <class T> Powerpoint_xp::ColorSchemePtr __fastcall
TCOM_SlideT<T>::get_ColorScheme(void)
{
  Powerpoint_xp::ColorScheme* ColorScheme;
  OLECHECK(this->get_ColorScheme((Powerpoint_xp::ColorScheme**)&ColorScheme));
  return (Powerpoint_xp::ColorSchemePtr)ColorScheme;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::set_ColorScheme(Powerpoint_xp::ColorScheme* ColorScheme/*[in]*/)
{
  return (*this)->set_ColorScheme(ColorScheme);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::set_ColorScheme(Powerpoint_xp::ColorSchemePtr ColorScheme/*[in]*/)
{
  return (*this)->set_ColorScheme(ColorScheme*)ColorScheme);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Background(Powerpoint_xp::ShapeRange** Background/*[out,retval]*/)
{
  return (*this)->get_Background(Background);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Background(Powerpoint_xp::ShapeRangePtr* Background/*[out,retval]*/)
{
  return (*this)->get_Background(ShapeRange**)Background);
}

template <class T> Powerpoint_xp::ShapeRangePtr __fastcall
TCOM_SlideT<T>::get_Background(void)
{
  Powerpoint_xp::ShapeRange* Background;
  OLECHECK(this->get_Background((Powerpoint_xp::ShapeRange**)&Background));
  return (Powerpoint_xp::ShapeRangePtr)Background;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  return (*this)->get_Name(Name);
}

template <class T> BSTR __fastcall
TCOM_SlideT<T>::get_Name(void)
{
  BSTR Name = 0;
  OLECHECK(this->get_Name((BSTR*)&Name));
  return Name;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::set_Name(BSTR Name/*[in]*/)
{
  return (*this)->set_Name(Name);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_SlideID(long* SlideID/*[out,retval]*/)
{
  return (*this)->get_SlideID(SlideID);
}

template <class T> long __fastcall
TCOM_SlideT<T>::get_SlideID(void)
{
  long SlideID;
  OLECHECK(this->get_SlideID((long*)&SlideID));
  return SlideID;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_PrintSteps(int* PrintSteps/*[out,retval]*/)
{
  return (*this)->get_PrintSteps(PrintSteps);
}

template <class T> int __fastcall
TCOM_SlideT<T>::get_PrintSteps(void)
{
  int PrintSteps;
  OLECHECK(this->get_PrintSteps((int*)&PrintSteps));
  return PrintSteps;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::Select(void)
{
  return (*this)->Select();
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::Cut(void)
{
  return (*this)->Cut();
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::Copy(void)
{
  return (*this)->Copy();
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Layout(Powerpoint_xp::PpSlideLayout* Layout/*[out,retval]*/)
{
  return (*this)->get_Layout(Layout);
}

template <class T> Powerpoint_xp::PpSlideLayout __fastcall
TCOM_SlideT<T>::get_Layout(void)
{
  Powerpoint_xp::PpSlideLayout Layout;
  OLECHECK(this->get_Layout((Powerpoint_xp::PpSlideLayout*)&Layout));
  return Layout;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::set_Layout(Powerpoint_xp::PpSlideLayout Layout/*[in]*/)
{
  return (*this)->set_Layout(Layout);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::Duplicate(Powerpoint_xp::SlideRange** Duplicate/*[out,retval]*/)
{
  return (*this)->Duplicate(Duplicate);
}

template <class T> Powerpoint_xp::SlideRange* __fastcall
TCOM_SlideT<T>::Duplicate(void)
{
  Powerpoint_xp::SlideRange* Duplicate;
  OLECHECK(this->Duplicate((Powerpoint_xp::SlideRange**)&Duplicate));
  return Duplicate;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::Delete(void)
{
  return (*this)->Delete();
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Tags(Powerpoint_xp::Tags** Tags/*[out,retval]*/)
{
  return (*this)->get_Tags(Tags);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Tags(Powerpoint_xp::TagsPtr* Tags/*[out,retval]*/)
{
  return (*this)->get_Tags(Tags**)Tags);
}

template <class T> Powerpoint_xp::TagsPtr __fastcall
TCOM_SlideT<T>::get_Tags(void)
{
  Powerpoint_xp::Tags* Tags;
  OLECHECK(this->get_Tags((Powerpoint_xp::Tags**)&Tags));
  return (Powerpoint_xp::TagsPtr)Tags;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_SlideIndex(int* SlideIndex/*[out,retval]*/)
{
  return (*this)->get_SlideIndex(SlideIndex);
}

template <class T> int __fastcall
TCOM_SlideT<T>::get_SlideIndex(void)
{
  int SlideIndex;
  OLECHECK(this->get_SlideIndex((int*)&SlideIndex));
  return SlideIndex;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_SlideNumber(int* SlideNumber/*[out,retval]*/)
{
  return (*this)->get_SlideNumber(SlideNumber);
}

template <class T> int __fastcall
TCOM_SlideT<T>::get_SlideNumber(void)
{
  int SlideNumber;
  OLECHECK(this->get_SlideNumber((int*)&SlideNumber));
  return SlideNumber;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_DisplayMasterShapes(Office_xp::MsoTriState* DisplayMasterShapes/*[out,retval]*/)
{
  return (*this)->get_DisplayMasterShapes(DisplayMasterShapes);
}

template <class T> Office_xp::MsoTriState __fastcall
TCOM_SlideT<T>::get_DisplayMasterShapes(void)
{
  Office_xp::MsoTriState DisplayMasterShapes;
  OLECHECK(this->get_DisplayMasterShapes((Office_xp::MsoTriState*)&DisplayMasterShapes));
  return DisplayMasterShapes;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::set_DisplayMasterShapes(Office_xp::MsoTriState DisplayMasterShapes/*[in]*/)
{
  return (*this)->set_DisplayMasterShapes(DisplayMasterShapes);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_FollowMasterBackground(Office_xp::MsoTriState* FollowMasterBackground/*[out,retval]*/)
{
  return (*this)->get_FollowMasterBackground(FollowMasterBackground);
}

template <class T> Office_xp::MsoTriState __fastcall
TCOM_SlideT<T>::get_FollowMasterBackground(void)
{
  Office_xp::MsoTriState FollowMasterBackground;
  OLECHECK(this->get_FollowMasterBackground((Office_xp::MsoTriState*)&FollowMasterBackground));
  return FollowMasterBackground;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::set_FollowMasterBackground(Office_xp::MsoTriState FollowMasterBackground/*[in]*/)
{
  return (*this)->set_FollowMasterBackground(FollowMasterBackground);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_NotesPage(Powerpoint_xp::SlideRange** NotesPage/*[out,retval]*/)
{
  return (*this)->get_NotesPage(NotesPage);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_NotesPage(Powerpoint_xp::SlideRangePtr* NotesPage/*[out,retval]*/)
{
  return (*this)->get_NotesPage(SlideRange**)NotesPage);
}

template <class T> Powerpoint_xp::SlideRangePtr __fastcall
TCOM_SlideT<T>::get_NotesPage(void)
{
  Powerpoint_xp::SlideRange* NotesPage;
  OLECHECK(this->get_NotesPage((Powerpoint_xp::SlideRange**)&NotesPage));
  return (Powerpoint_xp::SlideRangePtr)NotesPage;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Master(Powerpoint_xp::_Master** Master/*[out,retval]*/)
{
  return (*this)->get_Master(Master);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Master(Powerpoint_xp::_MasterPtr* Master/*[out,retval]*/)
{
  return (*this)->get_Master(_Master**)Master);
}

template <class T> Powerpoint_xp::_MasterPtr __fastcall
TCOM_SlideT<T>::get_Master(void)
{
  Powerpoint_xp::_Master* Master;
  OLECHECK(this->get_Master((Powerpoint_xp::_Master**)&Master));
  return (Powerpoint_xp::_MasterPtr)Master;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Hyperlinks(Powerpoint_xp::Hyperlinks** Hyperlinks/*[out,retval]*/)
{
  return (*this)->get_Hyperlinks(Hyperlinks);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Hyperlinks(Powerpoint_xp::HyperlinksPtr* Hyperlinks/*[out,retval]*/)
{
  return (*this)->get_Hyperlinks(Hyperlinks**)Hyperlinks);
}

template <class T> Powerpoint_xp::HyperlinksPtr __fastcall
TCOM_SlideT<T>::get_Hyperlinks(void)
{
  Powerpoint_xp::Hyperlinks* Hyperlinks;
  OLECHECK(this->get_Hyperlinks((Powerpoint_xp::Hyperlinks**)&Hyperlinks));
  return (Powerpoint_xp::HyperlinksPtr)Hyperlinks;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::Export(BSTR FileName/*[in]*/, BSTR FilterName/*[in]*/, 
                       int ScaleWidth/*[in,def,opt]*/, int ScaleHeight/*[in,def,opt]*/)
{
  return (*this)->Export(FileName, FilterName, ScaleWidth, ScaleHeight);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Scripts(Office_xp::Scripts** Scripts/*[out,retval]*/)
{
  return (*this)->get_Scripts(Scripts);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Scripts(Office_xp::ScriptsPtr* Scripts/*[out,retval]*/)
{
  return (*this)->get_Scripts(Scripts**)Scripts);
}

template <class T> Office_xp::ScriptsPtr __fastcall
TCOM_SlideT<T>::get_Scripts(void)
{
  Office_xp::Scripts* Scripts;
  OLECHECK(this->get_Scripts((Office_xp::Scripts**)&Scripts));
  return (Office_xp::ScriptsPtr)Scripts;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Comments(Powerpoint_xp::Comments** Comments/*[out,retval]*/)
{
  return (*this)->get_Comments(Comments);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Comments(Powerpoint_xp::CommentsPtr* Comments/*[out,retval]*/)
{
  return (*this)->get_Comments(Comments**)Comments);
}

template <class T> Powerpoint_xp::CommentsPtr __fastcall
TCOM_SlideT<T>::get_Comments(void)
{
  Powerpoint_xp::Comments* Comments;
  OLECHECK(this->get_Comments((Powerpoint_xp::Comments**)&Comments));
  return (Powerpoint_xp::CommentsPtr)Comments;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Design(Powerpoint_xp::Design** Design/*[out,retval]*/)
{
  return (*this)->get_Design(Design);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Design(Powerpoint_xp::DesignPtr* Design/*[out,retval]*/)
{
  return (*this)->get_Design(Design**)Design);
}

template <class T> Powerpoint_xp::DesignPtr __fastcall
TCOM_SlideT<T>::get_Design(void)
{
  Powerpoint_xp::Design* Design;
  OLECHECK(this->get_Design((Powerpoint_xp::Design**)&Design));
  return (Powerpoint_xp::DesignPtr)Design;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::set_Design(Powerpoint_xp::Design* Design/*[in]*/)
{
  return (*this)->set_Design(Design);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::set_Design(Powerpoint_xp::DesignPtr Design/*[in]*/)
{
  return (*this)->set_Design(Design*)Design);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::MoveTo(int toPos/*[in]*/)
{
  return (*this)->MoveTo(toPos);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_TimeLine(Powerpoint_xp::TimeLine** TimeLine/*[out,retval]*/)
{
  return (*this)->get_TimeLine(TimeLine);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_TimeLine(Powerpoint_xp::TimeLinePtr* TimeLine/*[out,retval]*/)
{
  return (*this)->get_TimeLine(TimeLine**)TimeLine);
}

template <class T> Powerpoint_xp::TimeLinePtr __fastcall
TCOM_SlideT<T>::get_TimeLine(void)
{
  Powerpoint_xp::TimeLine* TimeLine;
  OLECHECK(this->get_TimeLine((Powerpoint_xp::TimeLine**)&TimeLine));
  return (Powerpoint_xp::TimeLinePtr)TimeLine;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::ApplyTemplate(BSTR FileName/*[in]*/)
{
  return (*this)->ApplyTemplate(FileName);
}

// *********************************************************************//
// DispIntf:  _Slide
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
_SlideDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_SlideDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Shapes(Powerpoint_xp::Shapes** Shapes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shapes"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shapes**)Shapes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Shapes* __fastcall
_SlideDispT<T>::get_Shapes(void)
{
  Powerpoint_xp::Shapes* Shapes;
  this->get_Shapes((Powerpoint_xp::Shapes**)&Shapes);
  return Shapes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_HeadersFooters(Powerpoint_xp::HeadersFooters** HeadersFooters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeadersFooters"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::HeadersFooters**)HeadersFooters /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::HeadersFooters* __fastcall
_SlideDispT<T>::get_HeadersFooters(void)
{
  Powerpoint_xp::HeadersFooters* HeadersFooters;
  this->get_HeadersFooters((Powerpoint_xp::HeadersFooters**)&HeadersFooters);
  return HeadersFooters;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_SlideShowTransition(Powerpoint_xp::SlideShowTransition** SlideShowTransition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowTransition"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SlideShowTransition**)SlideShowTransition /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::SlideShowTransition* __fastcall
_SlideDispT<T>::get_SlideShowTransition(void)
{
  Powerpoint_xp::SlideShowTransition* SlideShowTransition;
  this->get_SlideShowTransition((Powerpoint_xp::SlideShowTransition**)&SlideShowTransition);
  return SlideShowTransition;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_ColorScheme(Powerpoint_xp::ColorScheme** ColorScheme/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorScheme"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorScheme**)ColorScheme /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorScheme* __fastcall
_SlideDispT<T>::get_ColorScheme(void)
{
  Powerpoint_xp::ColorScheme* ColorScheme;
  this->get_ColorScheme((Powerpoint_xp::ColorScheme**)&ColorScheme);
  return ColorScheme;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::set_ColorScheme(Powerpoint_xp::ColorScheme* ColorScheme/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorScheme"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::ColorScheme*)ColorScheme /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Background(Powerpoint_xp::ShapeRange** Background/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Background"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ShapeRange**)Background /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ShapeRange* __fastcall
_SlideDispT<T>::get_Background(void)
{
  Powerpoint_xp::ShapeRange* Background;
  this->get_Background((Powerpoint_xp::ShapeRange**)&Background);
  return Background;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SlideDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_SlideID(long* SlideID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideID"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideID /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_SlideDispT<T>::get_SlideID(void)
{
  long SlideID;
  this->get_SlideID((long*)&SlideID);
  return SlideID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_PrintSteps(int* PrintSteps/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintSteps"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PrintSteps /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_SlideDispT<T>::get_PrintSteps(void)
{
  int PrintSteps;
  this->get_PrintSteps((int*)&PrintSteps);
  return PrintSteps;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(2011));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::Cut()
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(2012));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::Copy()
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(2013));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Layout(Powerpoint_xp::PpSlideLayout* Layout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Layout"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Layout /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpSlideLayout __fastcall
_SlideDispT<T>::get_Layout(void)
{
  Powerpoint_xp::PpSlideLayout Layout;
  this->get_Layout((Powerpoint_xp::PpSlideLayout*)&Layout);
  return Layout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::set_Layout(Powerpoint_xp::PpSlideLayout Layout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Layout"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = (int)Layout /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::Duplicate(Powerpoint_xp::SlideRange** Duplicate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Duplicate"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SlideRange**)Duplicate /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::SlideRange* __fastcall
_SlideDispT<T>::Duplicate(void)
{
  Powerpoint_xp::SlideRange* Duplicate;
  this->Duplicate((Powerpoint_xp::SlideRange**)&Duplicate);
  return Duplicate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2016));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Tags(Powerpoint_xp::Tags** Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(2017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Tags* __fastcall
_SlideDispT<T>::get_Tags(void)
{
  Powerpoint_xp::Tags* Tags;
  this->get_Tags((Powerpoint_xp::Tags**)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_SlideIndex(int* SlideIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideIndex"), DISPID(2018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideIndex /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_SlideDispT<T>::get_SlideIndex(void)
{
  int SlideIndex;
  this->get_SlideIndex((int*)&SlideIndex);
  return SlideIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_SlideNumber(int* SlideNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideNumber"), DISPID(2019));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideNumber /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_SlideDispT<T>::get_SlideNumber(void)
{
  int SlideNumber;
  this->get_SlideNumber((int*)&SlideNumber);
  return SlideNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_DisplayMasterShapes(Office_xp::MsoTriState* DisplayMasterShapes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayMasterShapes"), DISPID(2020));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayMasterShapes /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
_SlideDispT<T>::get_DisplayMasterShapes(void)
{
  Office_xp::MsoTriState DisplayMasterShapes;
  this->get_DisplayMasterShapes((Office_xp::MsoTriState*)&DisplayMasterShapes);
  return DisplayMasterShapes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::set_DisplayMasterShapes(Office_xp::MsoTriState DisplayMasterShapes/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayMasterShapes"), DISPID(2020));
  TAutoArgs<1> _args;
  _args[1] = (int)DisplayMasterShapes /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_FollowMasterBackground(Office_xp::MsoTriState* FollowMasterBackground/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FollowMasterBackground"), DISPID(2021));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FollowMasterBackground /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
_SlideDispT<T>::get_FollowMasterBackground(void)
{
  Office_xp::MsoTriState FollowMasterBackground;
  this->get_FollowMasterBackground((Office_xp::MsoTriState*)&FollowMasterBackground);
  return FollowMasterBackground;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::set_FollowMasterBackground(Office_xp::MsoTriState FollowMasterBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FollowMasterBackground"), DISPID(2021));
  TAutoArgs<1> _args;
  _args[1] = (int)FollowMasterBackground /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_NotesPage(Powerpoint_xp::SlideRange** NotesPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotesPage"), DISPID(2022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SlideRange**)NotesPage /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::SlideRange* __fastcall
_SlideDispT<T>::get_NotesPage(void)
{
  Powerpoint_xp::SlideRange* NotesPage;
  this->get_NotesPage((Powerpoint_xp::SlideRange**)&NotesPage);
  return NotesPage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Master(Powerpoint_xp::_Master** Master/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Master"), DISPID(2023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::_Master**)Master /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::_Master* __fastcall
_SlideDispT<T>::get_Master(void)
{
  Powerpoint_xp::_Master* Master;
  this->get_Master((Powerpoint_xp::_Master**)&Master);
  return Master;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Hyperlinks(Powerpoint_xp::Hyperlinks** Hyperlinks/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlinks"), DISPID(2024));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Hyperlinks**)Hyperlinks /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Hyperlinks* __fastcall
_SlideDispT<T>::get_Hyperlinks(void)
{
  Powerpoint_xp::Hyperlinks* Hyperlinks;
  this->get_Hyperlinks((Powerpoint_xp::Hyperlinks**)&Hyperlinks);
  return Hyperlinks;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::Export(BSTR FileName/*[in]*/, BSTR FilterName/*[in]*/, 
                       int ScaleWidth/*[in,def,opt]*/, int ScaleHeight/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Export"), DISPID(2025));
  TAutoArgs<4> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = FilterName /*[VT_BSTR:0]*/;
  _args[3] = ScaleWidth /*[VT_INT:0]*/;
  _args[4] = ScaleHeight /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Scripts(Office_xp::Scripts** Scripts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scripts"), DISPID(2026));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::Scripts**)Scripts /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::Scripts* __fastcall
_SlideDispT<T>::get_Scripts(void)
{
  Office_xp::Scripts* Scripts;
  this->get_Scripts((Office_xp::Scripts**)&Scripts);
  return Scripts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Comments(Powerpoint_xp::Comments** Comments/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Comments"), DISPID(2028));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Comments**)Comments /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Comments* __fastcall
_SlideDispT<T>::get_Comments(void)
{
  Powerpoint_xp::Comments* Comments;
  this->get_Comments((Powerpoint_xp::Comments**)&Comments);
  return Comments;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Design(Powerpoint_xp::Design** Design/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Design"), DISPID(2029));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Design**)Design /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Design* __fastcall
_SlideDispT<T>::get_Design(void)
{
  Powerpoint_xp::Design* Design;
  this->get_Design((Powerpoint_xp::Design**)&Design);
  return Design;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::set_Design(Powerpoint_xp::Design* Design/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Design"), DISPID(2029));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::Design*)Design /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::MoveTo(int toPos/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveTo"), DISPID(2030));
  TAutoArgs<1> _args;
  _args[1] = toPos /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_TimeLine(Powerpoint_xp::TimeLine** TimeLine/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TimeLine"), DISPID(2031));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TimeLine**)TimeLine /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::TimeLine* __fastcall
_SlideDispT<T>::get_TimeLine(void)
{
  Powerpoint_xp::TimeLine* TimeLine;
  this->get_TimeLine((Powerpoint_xp::TimeLine**)&TimeLine);
  return TimeLine;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::ApplyTemplate(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyTemplate"), DISPID(2032));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  SlideRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
SlideRangeDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SlideRangeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Shapes(Powerpoint_xp::Shapes** Shapes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shapes"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shapes**)Shapes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Shapes* __fastcall
SlideRangeDispT<T>::get_Shapes(void)
{
  Powerpoint_xp::Shapes* Shapes;
  this->get_Shapes((Powerpoint_xp::Shapes**)&Shapes);
  return Shapes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_HeadersFooters(Powerpoint_xp::HeadersFooters** HeadersFooters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeadersFooters"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::HeadersFooters**)HeadersFooters /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::HeadersFooters* __fastcall
SlideRangeDispT<T>::get_HeadersFooters(void)
{
  Powerpoint_xp::HeadersFooters* HeadersFooters;
  this->get_HeadersFooters((Powerpoint_xp::HeadersFooters**)&HeadersFooters);
  return HeadersFooters;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_SlideShowTransition(Powerpoint_xp::SlideShowTransition** SlideShowTransition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowTransition"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SlideShowTransition**)SlideShowTransition /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::SlideShowTransition* __fastcall
SlideRangeDispT<T>::get_SlideShowTransition(void)
{
  Powerpoint_xp::SlideShowTransition* SlideShowTransition;
  this->get_SlideShowTransition((Powerpoint_xp::SlideShowTransition**)&SlideShowTransition);
  return SlideShowTransition;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_ColorScheme(Powerpoint_xp::ColorScheme** ColorScheme/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorScheme"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorScheme**)ColorScheme /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorScheme* __fastcall
SlideRangeDispT<T>::get_ColorScheme(void)
{
  Powerpoint_xp::ColorScheme* ColorScheme;
  this->get_ColorScheme((Powerpoint_xp::ColorScheme**)&ColorScheme);
  return ColorScheme;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::set_ColorScheme(Powerpoint_xp::ColorScheme* ColorScheme/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorScheme"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::ColorScheme*)ColorScheme /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Background(Powerpoint_xp::ShapeRange** Background/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Background"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ShapeRange**)Background /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ShapeRange* __fastcall
SlideRangeDispT<T>::get_Background(void)
{
  Powerpoint_xp::ShapeRange* Background;
  this->get_Background((Powerpoint_xp::ShapeRange**)&Background);
  return Background;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SlideRangeDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_SlideID(long* SlideID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideID"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideID /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SlideRangeDispT<T>::get_SlideID(void)
{
  long SlideID;
  this->get_SlideID((long*)&SlideID);
  return SlideID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_PrintSteps(int* PrintSteps/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintSteps"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PrintSteps /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
SlideRangeDispT<T>::get_PrintSteps(void)
{
  int PrintSteps;
  this->get_PrintSteps((int*)&PrintSteps);
  return PrintSteps;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(2011));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::Cut()
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(2012));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::Copy()
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(2013));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Layout(Powerpoint_xp::PpSlideLayout* Layout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Layout"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Layout /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpSlideLayout __fastcall
SlideRangeDispT<T>::get_Layout(void)
{
  Powerpoint_xp::PpSlideLayout Layout;
  this->get_Layout((Powerpoint_xp::PpSlideLayout*)&Layout);
  return Layout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::set_Layout(Powerpoint_xp::PpSlideLayout Layout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Layout"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = (int)Layout /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::Duplicate(Powerpoint_xp::SlideRange** Duplicate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Duplicate"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SlideRange**)Duplicate /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::SlideRange* __fastcall
SlideRangeDispT<T>::Duplicate(void)
{
  Powerpoint_xp::SlideRange* Duplicate;
  this->Duplicate((Powerpoint_xp::SlideRange**)&Duplicate);
  return Duplicate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2016));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Tags(Powerpoint_xp::Tags** Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(2017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Tags* __fastcall
SlideRangeDispT<T>::get_Tags(void)
{
  Powerpoint_xp::Tags* Tags;
  this->get_Tags((Powerpoint_xp::Tags**)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_SlideIndex(int* SlideIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideIndex"), DISPID(2018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideIndex /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
SlideRangeDispT<T>::get_SlideIndex(void)
{
  int SlideIndex;
  this->get_SlideIndex((int*)&SlideIndex);
  return SlideIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_SlideNumber(int* SlideNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideNumber"), DISPID(2019));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideNumber /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
SlideRangeDispT<T>::get_SlideNumber(void)
{
  int SlideNumber;
  this->get_SlideNumber((int*)&SlideNumber);
  return SlideNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_DisplayMasterShapes(Office_xp::MsoTriState* DisplayMasterShapes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayMasterShapes"), DISPID(2020));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayMasterShapes /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
SlideRangeDispT<T>::get_DisplayMasterShapes(void)
{
  Office_xp::MsoTriState DisplayMasterShapes;
  this->get_DisplayMasterShapes((Office_xp::MsoTriState*)&DisplayMasterShapes);
  return DisplayMasterShapes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::set_DisplayMasterShapes(Office_xp::MsoTriState DisplayMasterShapes/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayMasterShapes"), DISPID(2020));
  TAutoArgs<1> _args;
  _args[1] = (int)DisplayMasterShapes /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_FollowMasterBackground(Office_xp::MsoTriState* FollowMasterBackground/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FollowMasterBackground"), DISPID(2021));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FollowMasterBackground /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
SlideRangeDispT<T>::get_FollowMasterBackground(void)
{
  Office_xp::MsoTriState FollowMasterBackground;
  this->get_FollowMasterBackground((Office_xp::MsoTriState*)&FollowMasterBackground);
  return FollowMasterBackground;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::set_FollowMasterBackground(Office_xp::MsoTriState FollowMasterBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FollowMasterBackground"), DISPID(2021));
  TAutoArgs<1> _args;
  _args[1] = (int)FollowMasterBackground /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_NotesPage(Powerpoint_xp::SlideRange** NotesPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotesPage"), DISPID(2022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SlideRange**)NotesPage /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::SlideRange* __fastcall
SlideRangeDispT<T>::get_NotesPage(void)
{
  Powerpoint_xp::SlideRange* NotesPage;
  this->get_NotesPage((Powerpoint_xp::SlideRange**)&NotesPage);
  return NotesPage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Master(Powerpoint_xp::_Master** Master/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Master"), DISPID(2023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::_Master**)Master /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::_Master* __fastcall
SlideRangeDispT<T>::get_Master(void)
{
  Powerpoint_xp::_Master* Master;
  this->get_Master((Powerpoint_xp::_Master**)&Master);
  return Master;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Hyperlinks(Powerpoint_xp::Hyperlinks** Hyperlinks/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlinks"), DISPID(2024));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Hyperlinks**)Hyperlinks /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Hyperlinks* __fastcall
SlideRangeDispT<T>::get_Hyperlinks(void)
{
  Powerpoint_xp::Hyperlinks* Hyperlinks;
  this->get_Hyperlinks((Powerpoint_xp::Hyperlinks**)&Hyperlinks);
  return Hyperlinks;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::Export(BSTR FileName/*[in]*/, BSTR FilterName/*[in]*/, 
                           int ScaleWidth/*[in,def,opt]*/, int ScaleHeight/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Export"), DISPID(2025));
  TAutoArgs<4> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = FilterName /*[VT_BSTR:0]*/;
  _args[3] = ScaleWidth /*[VT_INT:0]*/;
  _args[4] = ScaleHeight /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::Item(VARIANT Index/*[in]*/, 
                         Powerpoint_xp::PowerPointSlide** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointSlide**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointSlide* __fastcall
SlideRangeDispT<T>::Item(VARIANT Index/*[in]*/)
{
  Powerpoint_xp::PowerPointSlide* Item;
  this->Item(Index, (Powerpoint_xp::PowerPointSlide**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
SlideRangeDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
SlideRangeDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SlideRangeDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Scripts(Office_xp::Scripts** Scripts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scripts"), DISPID(2026));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::Scripts**)Scripts /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::Scripts* __fastcall
SlideRangeDispT<T>::get_Scripts(void)
{
  Office_xp::Scripts* Scripts;
  this->get_Scripts((Office_xp::Scripts**)&Scripts);
  return Scripts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Comments(Powerpoint_xp::Comments** Comments/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Comments"), DISPID(2028));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Comments**)Comments /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Comments* __fastcall
SlideRangeDispT<T>::get_Comments(void)
{
  Powerpoint_xp::Comments* Comments;
  this->get_Comments((Powerpoint_xp::Comments**)&Comments);
  return Comments;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Design(Powerpoint_xp::Design** Design/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Design"), DISPID(2029));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Design**)Design /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Design* __fastcall
SlideRangeDispT<T>::get_Design(void)
{
  Powerpoint_xp::Design* Design;
  this->get_Design((Powerpoint_xp::Design**)&Design);
  return Design;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::set_Design(Powerpoint_xp::Design* Design/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Design"), DISPID(2029));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::Design*)Design /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::MoveTo(int toPos/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveTo"), DISPID(2030));
  TAutoArgs<1> _args;
  _args[1] = toPos /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_TimeLine(Powerpoint_xp::TimeLine** TimeLine/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TimeLine"), DISPID(2031));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TimeLine**)TimeLine /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::TimeLine* __fastcall
SlideRangeDispT<T>::get_TimeLine(void)
{
  Powerpoint_xp::TimeLine* TimeLine;
  this->get_TimeLine((Powerpoint_xp::TimeLine**)&TimeLine);
  return TimeLine;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::ApplyTemplate(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyTemplate"), DISPID(2032));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_Master
// Interface: _Master
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  return (*this)->get_Application(Application);
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Application(Powerpoint_xp::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  return (*this)->get_Application(PowerPointApplication**)Application);
}

template <class T> Powerpoint_xp::PowerPointApplicationPtr __fastcall
TCOM_MasterT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  OLECHECK(this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application));
  return (Powerpoint_xp::PowerPointApplicationPtr)Application;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  return (*this)->get_Parent(Parent);
}

template <class T> LPDISPATCH __fastcall
TCOM_MasterT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
  return Parent;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Shapes(Powerpoint_xp::Shapes** Shapes/*[out,retval]*/)
{
  return (*this)->get_Shapes(Shapes);
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Shapes(Powerpoint_xp::ShapesPtr* Shapes/*[out,retval]*/)
{
  return (*this)->get_Shapes(Shapes**)Shapes);
}

template <class T> Powerpoint_xp::ShapesPtr __fastcall
TCOM_MasterT<T>::get_Shapes(void)
{
  Powerpoint_xp::Shapes* Shapes;
  OLECHECK(this->get_Shapes((Powerpoint_xp::Shapes**)&Shapes));
  return (Powerpoint_xp::ShapesPtr)Shapes;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_HeadersFooters(Powerpoint_xp::HeadersFooters** HeadersFooters/*[out,retval]*/)
{
  return (*this)->get_HeadersFooters(HeadersFooters);
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_HeadersFooters(Powerpoint_xp::HeadersFootersPtr* HeadersFooters/*[out,retval]*/)
{
  return (*this)->get_HeadersFooters(HeadersFooters**)HeadersFooters);
}

template <class T> Powerpoint_xp::HeadersFootersPtr __fastcall
TCOM_MasterT<T>::get_HeadersFooters(void)
{
  Powerpoint_xp::HeadersFooters* HeadersFooters;
  OLECHECK(this->get_HeadersFooters((Powerpoint_xp::HeadersFooters**)&HeadersFooters));
  return (Powerpoint_xp::HeadersFootersPtr)HeadersFooters;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_ColorScheme(Powerpoint_xp::ColorScheme** ColorScheme/*[out,retval]*/)
{
  return (*this)->get_ColorScheme(ColorScheme);
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_ColorScheme(Powerpoint_xp::ColorSchemePtr* ColorScheme/*[out,retval]*/)
{
  return (*this)->get_ColorScheme(ColorScheme**)ColorScheme);
}

template <class T> Powerpoint_xp::ColorSchemePtr __fastcall
TCOM_MasterT<T>::get_ColorScheme(void)
{
  Powerpoint_xp::ColorScheme* ColorScheme;
  OLECHECK(this->get_ColorScheme((Powerpoint_xp::ColorScheme**)&ColorScheme));
  return (Powerpoint_xp::ColorSchemePtr)ColorScheme;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::set_ColorScheme(Powerpoint_xp::ColorScheme* ColorScheme/*[in]*/)
{
  return (*this)->set_ColorScheme(ColorScheme);
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::set_ColorScheme(Powerpoint_xp::ColorSchemePtr ColorScheme/*[in]*/)
{
  return (*this)->set_ColorScheme(ColorScheme*)ColorScheme);
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Background(Powerpoint_xp::ShapeRange** Background/*[out,retval]*/)
{
  return (*this)->get_Background(Background);
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Background(Powerpoint_xp::ShapeRangePtr* Background/*[out,retval]*/)
{
  return (*this)->get_Background(ShapeRange**)Background);
}

template <class T> Powerpoint_xp::ShapeRangePtr __fastcall
TCOM_MasterT<T>::get_Background(void)
{
  Powerpoint_xp::ShapeRange* Background;
  OLECHECK(this->get_Background((Powerpoint_xp::ShapeRange**)&Background));
  return (Powerpoint_xp::ShapeRangePtr)Background;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  return (*this)->get_Name(Name);
}

template <class T> BSTR __fastcall
TCOM_MasterT<T>::get_Name(void)
{
  BSTR Name = 0;
  OLECHECK(this->get_Name((BSTR*)&Name));
  return Name;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::set_Name(BSTR Name/*[in]*/)
{
  return (*this)->set_Name(Name);
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::Delete(void)
{
  return (*this)->Delete();
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Height(float* Height/*[out,retval]*/)
{
  return (*this)->get_Height(Height);
}

template <class T> float __fastcall
TCOM_MasterT<T>::get_Height(void)
{
  float Height;
  OLECHECK(this->get_Height((float*)&Height));
  return Height;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Width(float* Width/*[out,retval]*/)
{
  return (*this)->get_Width(Width);
}

template <class T> float __fastcall
TCOM_MasterT<T>::get_Width(void)
{
  float Width;
  OLECHECK(this->get_Width((float*)&Width));
  return Width;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_TextStyles(Powerpoint_xp::TextStyles** TextStyles/*[out,retval]*/)
{
  return (*this)->get_TextStyles(TextStyles);
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_TextStyles(Powerpoint_xp::TextStylesPtr* TextStyles/*[out,retval]*/)
{
  return (*this)->get_TextStyles(TextStyles**)TextStyles);
}

template <class T> Powerpoint_xp::TextStylesPtr __fastcall
TCOM_MasterT<T>::get_TextStyles(void)
{
  Powerpoint_xp::TextStyles* TextStyles;
  OLECHECK(this->get_TextStyles((Powerpoint_xp::TextStyles**)&TextStyles));
  return (Powerpoint_xp::TextStylesPtr)TextStyles;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Hyperlinks(Powerpoint_xp::Hyperlinks** Hyperlinks/*[out,retval]*/)
{
  return (*this)->get_Hyperlinks(Hyperlinks);
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Hyperlinks(Powerpoint_xp::HyperlinksPtr* Hyperlinks/*[out,retval]*/)
{
  return (*this)->get_Hyperlinks(Hyperlinks**)Hyperlinks);
}

template <class T> Powerpoint_xp::HyperlinksPtr __fastcall
TCOM_MasterT<T>::get_Hyperlinks(void)
{
  Powerpoint_xp::Hyperlinks* Hyperlinks;
  OLECHECK(this->get_Hyperlinks((Powerpoint_xp::Hyperlinks**)&Hyperlinks));
  return (Powerpoint_xp::HyperlinksPtr)Hyperlinks;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Scripts(Office_xp::Scripts** Scripts/*[out,retval]*/)
{
  return (*this)->get_Scripts(Scripts);
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Scripts(Office_xp::ScriptsPtr* Scripts/*[out,retval]*/)
{
  return (*this)->get_Scripts(Scripts**)Scripts);
}

template <class T> Office_xp::ScriptsPtr __fastcall
TCOM_MasterT<T>::get_Scripts(void)
{
  Office_xp::Scripts* Scripts;
  OLECHECK(this->get_Scripts((Office_xp::Scripts**)&Scripts));
  return (Office_xp::ScriptsPtr)Scripts;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Design(Powerpoint_xp::Design** Design/*[out,retval]*/)
{
  return (*this)->get_Design(Design);
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Design(Powerpoint_xp::DesignPtr* Design/*[out,retval]*/)
{
  return (*this)->get_Design(Design**)Design);
}

template <class T> Powerpoint_xp::DesignPtr __fastcall
TCOM_MasterT<T>::get_Design(void)
{
  Powerpoint_xp::Design* Design;
  OLECHECK(this->get_Design((Powerpoint_xp::Design**)&Design));
  return (Powerpoint_xp::DesignPtr)Design;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_TimeLine(Powerpoint_xp::TimeLine** TimeLine/*[out,retval]*/)
{
  return (*this)->get_TimeLine(TimeLine);
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_TimeLine(Powerpoint_xp::TimeLinePtr* TimeLine/*[out,retval]*/)
{
  return (*this)->get_TimeLine(TimeLine**)TimeLine);
}

template <class T> Powerpoint_xp::TimeLinePtr __fastcall
TCOM_MasterT<T>::get_TimeLine(void)
{
  Powerpoint_xp::TimeLine* TimeLine;
  OLECHECK(this->get_TimeLine((Powerpoint_xp::TimeLine**)&TimeLine));
  return (Powerpoint_xp::TimeLinePtr)TimeLine;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_SlideShowTransition(Powerpoint_xp::SlideShowTransition** SlideShowTransition/*[out,retval]*/)
{
  return (*this)->get_SlideShowTransition(SlideShowTransition);
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_SlideShowTransition(Powerpoint_xp::SlideShowTransitionPtr* SlideShowTransition/*[out,retval]*/)
{
  return (*this)->get_SlideShowTransition(SlideShowTransition**)SlideShowTransition);
}

template <class T> Powerpoint_xp::SlideShowTransitionPtr __fastcall
TCOM_MasterT<T>::get_SlideShowTransition(void)
{
  Powerpoint_xp::SlideShowTransition* SlideShowTransition;
  OLECHECK(this->get_SlideShowTransition((Powerpoint_xp::SlideShowTransition**)&SlideShowTransition));
  return (Powerpoint_xp::SlideShowTransitionPtr)SlideShowTransition;
}

// *********************************************************************//
// DispIntf:  _Master
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
_MasterDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_MasterDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_Shapes(Powerpoint_xp::Shapes** Shapes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shapes"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shapes**)Shapes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Shapes* __fastcall
_MasterDispT<T>::get_Shapes(void)
{
  Powerpoint_xp::Shapes* Shapes;
  this->get_Shapes((Powerpoint_xp::Shapes**)&Shapes);
  return Shapes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_HeadersFooters(Powerpoint_xp::HeadersFooters** HeadersFooters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeadersFooters"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::HeadersFooters**)HeadersFooters /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::HeadersFooters* __fastcall
_MasterDispT<T>::get_HeadersFooters(void)
{
  Powerpoint_xp::HeadersFooters* HeadersFooters;
  this->get_HeadersFooters((Powerpoint_xp::HeadersFooters**)&HeadersFooters);
  return HeadersFooters;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_ColorScheme(Powerpoint_xp::ColorScheme** ColorScheme/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorScheme"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorScheme**)ColorScheme /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorScheme* __fastcall
_MasterDispT<T>::get_ColorScheme(void)
{
  Powerpoint_xp::ColorScheme* ColorScheme;
  this->get_ColorScheme((Powerpoint_xp::ColorScheme**)&ColorScheme);
  return ColorScheme;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::set_ColorScheme(Powerpoint_xp::ColorScheme* ColorScheme/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorScheme"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::ColorScheme*)ColorScheme /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_Background(Powerpoint_xp::ShapeRange** Background/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Background"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ShapeRange**)Background /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ShapeRange* __fastcall
_MasterDispT<T>::get_Background(void)
{
  Powerpoint_xp::ShapeRange* Background;
  this->get_Background((Powerpoint_xp::ShapeRange**)&Background);
  return Background;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_MasterDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2008));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_MasterDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_MasterDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_TextStyles(Powerpoint_xp::TextStyles** TextStyles/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextStyles"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextStyles**)TextStyles /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::TextStyles* __fastcall
_MasterDispT<T>::get_TextStyles(void)
{
  Powerpoint_xp::TextStyles* TextStyles;
  this->get_TextStyles((Powerpoint_xp::TextStyles**)&TextStyles);
  return TextStyles;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_Hyperlinks(Powerpoint_xp::Hyperlinks** Hyperlinks/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlinks"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Hyperlinks**)Hyperlinks /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Hyperlinks* __fastcall
_MasterDispT<T>::get_Hyperlinks(void)
{
  Powerpoint_xp::Hyperlinks* Hyperlinks;
  this->get_Hyperlinks((Powerpoint_xp::Hyperlinks**)&Hyperlinks);
  return Hyperlinks;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_Scripts(Office_xp::Scripts** Scripts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scripts"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::Scripts**)Scripts /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::Scripts* __fastcall
_MasterDispT<T>::get_Scripts(void)
{
  Office_xp::Scripts* Scripts;
  this->get_Scripts((Office_xp::Scripts**)&Scripts);
  return Scripts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_Design(Powerpoint_xp::Design** Design/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Design"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Design**)Design /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Design* __fastcall
_MasterDispT<T>::get_Design(void)
{
  Powerpoint_xp::Design* Design;
  this->get_Design((Powerpoint_xp::Design**)&Design);
  return Design;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_TimeLine(Powerpoint_xp::TimeLine** TimeLine/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TimeLine"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TimeLine**)TimeLine /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::TimeLine* __fastcall
_MasterDispT<T>::get_TimeLine(void)
{
  Powerpoint_xp::TimeLine* TimeLine;
  this->get_TimeLine((Powerpoint_xp::TimeLine**)&TimeLine);
  return TimeLine;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_SlideShowTransition(Powerpoint_xp::SlideShowTransition** SlideShowTransition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowTransition"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SlideShowTransition**)SlideShowTransition /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::SlideShowTransition* __fastcall
_MasterDispT<T>::get_SlideShowTransition(void)
{
  Powerpoint_xp::SlideShowTransition* SlideShowTransition;
  this->get_SlideShowTransition((Powerpoint_xp::SlideShowTransition**)&SlideShowTransition);
  return SlideShowTransition;
}

// *********************************************************************//
// DispIntf:  ColorSchemes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemesDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
ColorSchemesDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ColorSchemesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemesDispT<T>::Item(int Index/*[in]*/, Powerpoint_xp::ColorScheme** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorScheme**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorScheme* __fastcall
ColorSchemesDispT<T>::Item(int Index/*[in]*/)
{
  Powerpoint_xp::ColorScheme* Item;
  this->Item(Index, (Powerpoint_xp::ColorScheme**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemesDispT<T>::Add(Powerpoint_xp::ColorScheme* Scheme/*[in,def,opt]*/, 
                          Powerpoint_xp::ColorScheme** Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::ColorScheme*)Scheme /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorScheme**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorScheme* __fastcall
ColorSchemesDispT<T>::Add(Powerpoint_xp::ColorScheme* Scheme/*[in,def,opt]*/)
{
  Powerpoint_xp::ColorScheme* Add;
  this->Add(Scheme, (Powerpoint_xp::ColorScheme**)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ColorSchemesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemesDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ColorSchemesDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ColorSchemesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  ColorScheme
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemeDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
ColorSchemeDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ColorSchemeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemeDispT<T>::Colors(Powerpoint_xp::PpColorSchemeIndex SchemeColor/*[in]*/, 
                            Powerpoint_xp::RGBColor** Colors/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Colors"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = (int)SchemeColor /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::RGBColor**)Colors /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::RGBColor* __fastcall
ColorSchemeDispT<T>::Colors(Powerpoint_xp::PpColorSchemeIndex SchemeColor/*[in]*/)
{
  Powerpoint_xp::RGBColor* Colors;
  this->Colors(SchemeColor, (Powerpoint_xp::RGBColor**)&Colors);
  return Colors;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemeDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2003));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemeDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ColorSchemeDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemeDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ColorSchemeDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemeDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ColorSchemeDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  RGBColor
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493470-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RGBColorDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
RGBColorDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RGBColorDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
RGBColorDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RGBColorDispT<T>::get_rgb(Office_xp::MsoRGBType* rgb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RGB"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RGB /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoRGBType __fastcall
RGBColorDispT<T>::get_rgb(void)
{
  Office_xp::MsoRGBType RGB;
  this->get_rgb((Office_xp::MsoRGBType*)&RGB);
  return RGB;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RGBColorDispT<T>::set_rgb(Office_xp::MsoRGBType rgb/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RGB"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = RGB /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  SlideShowTransition
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493471-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
SlideShowTransitionDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SlideShowTransitionDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_AdvanceOnClick(Office_xp::MsoTriState* AdvanceOnClick/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceOnClick"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AdvanceOnClick /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
SlideShowTransitionDispT<T>::get_AdvanceOnClick(void)
{
  Office_xp::MsoTriState AdvanceOnClick;
  this->get_AdvanceOnClick((Office_xp::MsoTriState*)&AdvanceOnClick);
  return AdvanceOnClick;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::set_AdvanceOnClick(Office_xp::MsoTriState AdvanceOnClick/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceOnClick"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)AdvanceOnClick /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_AdvanceOnTime(Office_xp::MsoTriState* AdvanceOnTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceOnTime"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AdvanceOnTime /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
SlideShowTransitionDispT<T>::get_AdvanceOnTime(void)
{
  Office_xp::MsoTriState AdvanceOnTime;
  this->get_AdvanceOnTime((Office_xp::MsoTriState*)&AdvanceOnTime);
  return AdvanceOnTime;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::set_AdvanceOnTime(Office_xp::MsoTriState AdvanceOnTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceOnTime"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)AdvanceOnTime /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_AdvanceTime(float* AdvanceTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceTime"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AdvanceTime /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
SlideShowTransitionDispT<T>::get_AdvanceTime(void)
{
  float AdvanceTime;
  this->get_AdvanceTime((float*)&AdvanceTime);
  return AdvanceTime;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::set_AdvanceTime(float AdvanceTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceTime"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = AdvanceTime /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_EntryEffect(Powerpoint_xp::PpEntryEffect* EntryEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EntryEffect"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EntryEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpEntryEffect __fastcall
SlideShowTransitionDispT<T>::get_EntryEffect(void)
{
  Powerpoint_xp::PpEntryEffect EntryEffect;
  this->get_EntryEffect((Powerpoint_xp::PpEntryEffect*)&EntryEffect);
  return EntryEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::set_EntryEffect(Powerpoint_xp::PpEntryEffect EntryEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EntryEffect"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)EntryEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_Hidden(Office_xp::MsoTriState* Hidden/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hidden"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Hidden /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
SlideShowTransitionDispT<T>::get_Hidden(void)
{
  Office_xp::MsoTriState Hidden;
  this->get_Hidden((Office_xp::MsoTriState*)&Hidden);
  return Hidden;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::set_Hidden(Office_xp::MsoTriState Hidden/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hidden"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)Hidden /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_LoopSoundUntilNext(Office_xp::MsoTriState* LoopSoundUntilNext/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoopSoundUntilNext"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LoopSoundUntilNext /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
SlideShowTransitionDispT<T>::get_LoopSoundUntilNext(void)
{
  Office_xp::MsoTriState LoopSoundUntilNext;
  this->get_LoopSoundUntilNext((Office_xp::MsoTriState*)&LoopSoundUntilNext);
  return LoopSoundUntilNext;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::set_LoopSoundUntilNext(Office_xp::MsoTriState LoopSoundUntilNext/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoopSoundUntilNext"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)LoopSoundUntilNext /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_SoundEffect(Powerpoint_xp::SoundEffect** SoundEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SoundEffect"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SoundEffect**)SoundEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::SoundEffect* __fastcall
SlideShowTransitionDispT<T>::get_SoundEffect(void)
{
  Powerpoint_xp::SoundEffect* SoundEffect;
  this->get_SoundEffect((Powerpoint_xp::SoundEffect**)&SoundEffect);
  return SoundEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_Speed(Powerpoint_xp::PpTransitionSpeed* Speed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Speed"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Speed /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpTransitionSpeed __fastcall
SlideShowTransitionDispT<T>::get_Speed(void)
{
  Powerpoint_xp::PpTransitionSpeed Speed;
  this->get_Speed((Powerpoint_xp::PpTransitionSpeed*)&Speed);
  return Speed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::set_Speed(Powerpoint_xp::PpTransitionSpeed Speed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Speed"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = (int)Speed /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  SoundEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493472-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundEffectDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
SoundEffectDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundEffectDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SoundEffectDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundEffectDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SoundEffectDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundEffectDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundEffectDispT<T>::get_Type(Powerpoint_xp::PpSoundEffectType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpSoundEffectType __fastcall
SoundEffectDispT<T>::get_Type(void)
{
  Powerpoint_xp::PpSoundEffectType Type;
  this->get_Type((Powerpoint_xp::PpSoundEffectType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundEffectDispT<T>::set_Type(Powerpoint_xp::PpSoundEffectType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundEffectDispT<T>::ImportFromFile(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImportFromFile"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundEffectDispT<T>::Play()
{
  _TDispID _dispid(*this, OLETEXT("Play"), DISPID(2006));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  SoundFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493473-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundFormatDispT<T>::Play()
{
  _TDispID _dispid(*this, OLETEXT("Play"), DISPID(2000));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundFormatDispT<T>::Import(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Import"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundFormatDispT<T>::Export(BSTR FileName/*[in]*/, 
                            Powerpoint_xp::PpSoundFormatType* Export/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Export"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)Export /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::PpSoundFormatType __fastcall
SoundFormatDispT<T>::Export(BSTR FileName/*[in]*/)
{
  Powerpoint_xp::PpSoundFormatType Export;
  this->Export(FileName, (Powerpoint_xp::PpSoundFormatType*)&Export);
  return Export;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundFormatDispT<T>::get_Type(Powerpoint_xp::PpSoundFormatType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpSoundFormatType __fastcall
SoundFormatDispT<T>::get_Type(void)
{
  Powerpoint_xp::PpSoundFormatType Type;
  this->get_Type((Powerpoint_xp::PpSoundFormatType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundFormatDispT<T>::get_SourceFullName(BSTR* SourceFullName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceFullName"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SourceFullName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SoundFormatDispT<T>::get_SourceFullName(void)
{
  BSTR SourceFullName;
  this->get_SourceFullName((BSTR*)&SourceFullName);
  return SourceFullName;
}

// *********************************************************************//
// DispIntf:  HeadersFooters
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493474-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadersFootersDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
HeadersFootersDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadersFootersDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
HeadersFootersDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadersFootersDispT<T>::get_DateAndTime(Powerpoint_xp::HeaderFooter** DateAndTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateAndTime"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::HeaderFooter**)DateAndTime /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::HeaderFooter* __fastcall
HeadersFootersDispT<T>::get_DateAndTime(void)
{
  Powerpoint_xp::HeaderFooter* DateAndTime;
  this->get_DateAndTime((Powerpoint_xp::HeaderFooter**)&DateAndTime);
  return DateAndTime;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadersFootersDispT<T>::get_SlideNumber(Powerpoint_xp::HeaderFooter** SlideNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideNumber"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::HeaderFooter**)SlideNumber /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::HeaderFooter* __fastcall
HeadersFootersDispT<T>::get_SlideNumber(void)
{
  Powerpoint_xp::HeaderFooter* SlideNumber;
  this->get_SlideNumber((Powerpoint_xp::HeaderFooter**)&SlideNumber);
  return SlideNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadersFootersDispT<T>::get_Header(Powerpoint_xp::HeaderFooter** Header/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Header"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::HeaderFooter**)Header /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::HeaderFooter* __fastcall
HeadersFootersDispT<T>::get_Header(void)
{
  Powerpoint_xp::HeaderFooter* Header;
  this->get_Header((Powerpoint_xp::HeaderFooter**)&Header);
  return Header;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadersFootersDispT<T>::get_Footer(Powerpoint_xp::HeaderFooter** Footer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Footer"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::HeaderFooter**)Footer /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::HeaderFooter* __fastcall
HeadersFootersDispT<T>::get_Footer(void)
{
  Powerpoint_xp::HeaderFooter* Footer;
  this->get_Footer((Powerpoint_xp::HeaderFooter**)&Footer);
  return Footer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadersFootersDispT<T>::get_DisplayOnTitleSlide(Office_xp::MsoTriState* DisplayOnTitleSlide/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayOnTitleSlide"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayOnTitleSlide /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
HeadersFootersDispT<T>::get_DisplayOnTitleSlide(void)
{
  Office_xp::MsoTriState DisplayOnTitleSlide;
  this->get_DisplayOnTitleSlide((Office_xp::MsoTriState*)&DisplayOnTitleSlide);
  return DisplayOnTitleSlide;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadersFootersDispT<T>::set_DisplayOnTitleSlide(Office_xp::MsoTriState DisplayOnTitleSlide/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayOnTitleSlide"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)DisplayOnTitleSlide /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadersFootersDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(2008));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  Shapes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493475-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapesDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapesDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Count(int* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapesDispT<T>::get_Count(void)
{
  int Count;
  this->get_Count((int*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::Item(VARIANT Index/*[in]*/, Powerpoint_xp::Shape** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::Item(VARIANT Index/*[in]*/)
{
  Powerpoint_xp::Shape* Item;
  this->Item(Index, (Powerpoint_xp::Shape**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ShapesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddCallout(Office_xp::MsoCalloutType Type/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                           Powerpoint_xp::Shape** Callout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCallout"), DISPID(10));
  TAutoArgs<5> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Callout /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::AddCallout(Office_xp::MsoCalloutType Type/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Powerpoint_xp::Shape* Callout;
  this->AddCallout(Type, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Callout);
  return Callout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddConnector(Office_xp::MsoConnectorType Type/*[in]*/, float BeginX/*[in]*/, 
                             float BeginY/*[in]*/, float EndX/*[in]*/, float EndY/*[in]*/, 
                             Powerpoint_xp::Shape** Connector/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddConnector"), DISPID(11));
  TAutoArgs<5> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = BeginX /*[VT_R4:0]*/;
  _args[3] = BeginY /*[VT_R4:0]*/;
  _args[4] = EndX /*[VT_R4:0]*/;
  _args[5] = EndY /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Connector /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::AddConnector(Office_xp::MsoConnectorType Type/*[in]*/, float BeginX/*[in]*/, 
                             float BeginY/*[in]*/, float EndX/*[in]*/, float EndY/*[in]*/)
{
  Powerpoint_xp::Shape* Connector;
  this->AddConnector(Type, BeginX, BeginY, EndX, EndY, (Powerpoint_xp::Shape**)&Connector);
  return Connector;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddCurve(VARIANT SafeArrayOfPoints/*[in]*/, 
                         Powerpoint_xp::Shape** Curve/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCurve"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = SafeArrayOfPoints /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Curve /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::AddCurve(VARIANT SafeArrayOfPoints/*[in]*/)
{
  Powerpoint_xp::Shape* Curve;
  this->AddCurve(SafeArrayOfPoints, (Powerpoint_xp::Shape**)&Curve);
  return Curve;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddLabel(Office_xp::MsoTextOrientation Orientation/*[in]*/, float Left/*[in]*/, 
                         float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                         Powerpoint_xp::Shape** Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLabel"), DISPID(13));
  TAutoArgs<5> _args;
  _args[1] = (int)Orientation /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Label /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::AddLabel(Office_xp::MsoTextOrientation Orientation/*[in]*/, float Left/*[in]*/, 
                         float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Powerpoint_xp::Shape* Label;
  this->AddLabel(Orientation, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, float EndX/*[in]*/, 
                        float EndY/*[in]*/, Powerpoint_xp::Shape** Line/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLine"), DISPID(14));
  TAutoArgs<4> _args;
  _args[1] = BeginX /*[VT_R4:0]*/;
  _args[2] = BeginY /*[VT_R4:0]*/;
  _args[3] = EndX /*[VT_R4:0]*/;
  _args[4] = EndY /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Line /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, float EndX/*[in]*/, 
                        float EndY/*[in]*/)
{
  Powerpoint_xp::Shape* Line;
  this->AddLine(BeginX, BeginY, EndX, EndY, (Powerpoint_xp::Shape**)&Line);
  return Line;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddPicture(BSTR FileName/*[in]*/, Office_xp::MsoTriState LinkToFile/*[in]*/, 
                           Office_xp::MsoTriState SaveWithDocument/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in,def,opt]*/, 
                           float Height/*[in,def,opt]*/, 
                           Powerpoint_xp::Shape** Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPicture"), DISPID(15));
  TAutoArgs<7> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = (int)LinkToFile /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)SaveWithDocument /*[VT_USERDEFINED:0]*/;
  _args[4] = Left /*[VT_R4:0]*/;
  _args[5] = Top /*[VT_R4:0]*/;
  _args[6] = Width /*[VT_R4:0]*/;
  _args[7] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Picture /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::AddPicture(BSTR FileName/*[in]*/, Office_xp::MsoTriState LinkToFile/*[in]*/, 
                           Office_xp::MsoTriState SaveWithDocument/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in,def,opt]*/, 
                           float Height/*[in,def,opt]*/)
{
  Powerpoint_xp::Shape* Picture;
  this->AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddPolyline(VARIANT SafeArrayOfPoints/*[in]*/, 
                            Powerpoint_xp::Shape** Polyline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPolyline"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = SafeArrayOfPoints /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Polyline /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::AddPolyline(VARIANT SafeArrayOfPoints/*[in]*/)
{
  Powerpoint_xp::Shape* Polyline;
  this->AddPolyline(SafeArrayOfPoints, (Powerpoint_xp::Shape**)&Polyline);
  return Polyline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddShape(Office_xp::MsoAutoShapeType Type/*[in]*/, float Left/*[in]*/, 
                         float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                         Powerpoint_xp::Shape** Shape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddShape"), DISPID(17));
  TAutoArgs<5> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Shape /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::AddShape(Office_xp::MsoAutoShapeType Type/*[in]*/, float Left/*[in]*/, 
                         float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Powerpoint_xp::Shape* Shape;
  this->AddShape(Type, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Shape);
  return Shape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddTextEffect(Office_xp::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                              BSTR Text/*[in]*/, BSTR FontName/*[in]*/, float FontSize/*[in]*/, 
                              Office_xp::MsoTriState FontBold/*[in]*/, 
                              Office_xp::MsoTriState FontItalic/*[in]*/, float Left/*[in]*/, 
                              float Top/*[in]*/, Powerpoint_xp::Shape** TextEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTextEffect"), DISPID(18));
  TAutoArgs<8> _args;
  _args[1] = (int)PresetTextEffect /*[VT_USERDEFINED:0]*/;
  _args[2] = Text /*[VT_BSTR:0]*/;
  _args[3] = FontName /*[VT_BSTR:0]*/;
  _args[4] = FontSize /*[VT_R4:0]*/;
  _args[5] = (int)FontBold /*[VT_USERDEFINED:0]*/;
  _args[6] = (int)FontItalic /*[VT_USERDEFINED:0]*/;
  _args[7] = Left /*[VT_R4:0]*/;
  _args[8] = Top /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)TextEffect /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::AddTextEffect(Office_xp::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                              BSTR Text/*[in]*/, BSTR FontName/*[in]*/, float FontSize/*[in]*/, 
                              Office_xp::MsoTriState FontBold/*[in]*/, 
                              Office_xp::MsoTriState FontItalic/*[in]*/, float Left/*[in]*/, 
                              float Top/*[in]*/)
{
  Powerpoint_xp::Shape* TextEffect;
  this->AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, (Powerpoint_xp::Shape**)&TextEffect);
  return TextEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddTextbox(Office_xp::MsoTextOrientation Orientation/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                           Powerpoint_xp::Shape** Textbox/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTextbox"), DISPID(19));
  TAutoArgs<5> _args;
  _args[1] = (int)Orientation /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Textbox /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::AddTextbox(Office_xp::MsoTextOrientation Orientation/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Powerpoint_xp::Shape* Textbox;
  this->AddTextbox(Orientation, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Textbox);
  return Textbox;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::BuildFreeform(Office_xp::MsoEditingType EditingType/*[in]*/, float X1/*[in]*/, 
                              float Y1/*[in]*/, 
                              Powerpoint_xp::FreeformBuilder** FreeformBuilder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildFreeform"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = (int)EditingType /*[VT_USERDEFINED:0]*/;
  _args[2] = X1 /*[VT_R4:0]*/;
  _args[3] = Y1 /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::FreeformBuilder**)FreeformBuilder /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::FreeformBuilder* __fastcall
ShapesDispT<T>::BuildFreeform(Office_xp::MsoEditingType EditingType/*[in]*/, float X1/*[in]*/, 
                              float Y1/*[in]*/)
{
  Powerpoint_xp::FreeformBuilder* FreeformBuilder;
  this->BuildFreeform(EditingType, X1, Y1, (Powerpoint_xp::FreeformBuilder**)&FreeformBuilder);
  return FreeformBuilder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::SelectAll()
{
  _TDispID _dispid(*this, OLETEXT("SelectAll"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::Range(VARIANT Index/*[in,opt]*/, Powerpoint_xp::ShapeRange** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Range"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ShapeRange**)Range /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::ShapeRange* __fastcall
ShapesDispT<T>::Range(VARIANT Index/*[in,opt]*/)
{
  Powerpoint_xp::ShapeRange* Range;
  this->Range(Index, (Powerpoint_xp::ShapeRange**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_HasTitle(Office_xp::MsoTriState* HasTitle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTitle"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HasTitle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapesDispT<T>::get_HasTitle(void)
{
  Office_xp::MsoTriState HasTitle;
  this->get_HasTitle((Office_xp::MsoTriState*)&HasTitle);
  return HasTitle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddTitle(Powerpoint_xp::Shape** Title/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTitle"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Title /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::AddTitle(void)
{
  Powerpoint_xp::Shape* Title;
  this->AddTitle((Powerpoint_xp::Shape**)&Title);
  return Title;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Title(Powerpoint_xp::Shape** Title/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Title"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Title /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::get_Title(void)
{
  Powerpoint_xp::Shape* Title;
  this->get_Title((Powerpoint_xp::Shape**)&Title);
  return Title;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Placeholders(Powerpoint_xp::Placeholders** Placeholders/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Placeholders"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Placeholders**)Placeholders /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Placeholders* __fastcall
ShapesDispT<T>::get_Placeholders(void)
{
  Powerpoint_xp::Placeholders* Placeholders;
  this->get_Placeholders((Powerpoint_xp::Placeholders**)&Placeholders);
  return Placeholders;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddOLEObject(float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                             float Width/*[in,def,opt]*/, float Height/*[in,def,opt]*/, 
                             BSTR ClassName/*[in,def,opt]*/, BSTR FileName/*[in,def,opt]*/, 
                             Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                             BSTR IconFileName/*[in,def,opt]*/, int IconIndex/*[in,def,opt]*/, 
                             BSTR IconLabel/*[in,def,opt]*/, 
                             Office_xp::MsoTriState Link/*[in,def,opt]*/, 
                             Powerpoint_xp::Shape** OLEObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOLEObject"), DISPID(2008));
  TAutoArgs<11> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  _args[5] = ClassName /*[VT_BSTR:0]*/;
  _args[6] = FileName /*[VT_BSTR:0]*/;
  _args[7] = (int)DisplayAsIcon /*[VT_USERDEFINED:0]*/;
  _args[8] = IconFileName /*[VT_BSTR:0]*/;
  _args[9] = IconIndex /*[VT_INT:0]*/;
  _args[10] = IconLabel /*[VT_BSTR:0]*/;
  _args[11] = (int)Link /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)OLEObject /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::AddOLEObject(float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                             float Width/*[in,def,opt]*/, float Height/*[in,def,opt]*/, 
                             BSTR ClassName/*[in,def,opt]*/, BSTR FileName/*[in,def,opt]*/, 
                             Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                             BSTR IconFileName/*[in,def,opt]*/, int IconIndex/*[in,def,opt]*/, 
                             BSTR IconLabel/*[in,def,opt]*/, 
                             Office_xp::MsoTriState Link/*[in,def,opt]*/)
{
  Powerpoint_xp::Shape* OLEObject;
  this->AddOLEObject(Left, Top, Width, Height, ClassName, FileName, DisplayAsIcon, IconFileName, 
                     IconIndex, IconLabel, Link, (Powerpoint_xp::Shape**)&OLEObject);
  return OLEObject;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddComment(float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                           float Width/*[in,def,opt]*/, float Height/*[in,def,opt]*/, 
                           Powerpoint_xp::Shape** Comment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddComment"), DISPID(2009));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Comment /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::AddComment(float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                           float Width/*[in,def,opt]*/, float Height/*[in,def,opt]*/)
{
  Powerpoint_xp::Shape* Comment;
  this->AddComment(Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Comment);
  return Comment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddPlaceholder(Powerpoint_xp::PpPlaceholderType Type/*[in]*/, 
                               float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                               float Width/*[in,def,opt]*/, float Height/*[in,def,opt]*/, 
                               Powerpoint_xp::Shape** Placeholder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPlaceholder"), DISPID(2010));
  TAutoArgs<5> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Placeholder /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::AddPlaceholder(Powerpoint_xp::PpPlaceholderType Type/*[in]*/, 
                               float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                               float Width/*[in,def,opt]*/, float Height/*[in,def,opt]*/)
{
  Powerpoint_xp::Shape* Placeholder;
  this->AddPlaceholder(Type, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Placeholder);
  return Placeholder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddMediaObject(BSTR FileName/*[in]*/, float Left/*[in,def,opt]*/, 
                               float Top/*[in,def,opt]*/, float Width/*[in,def,opt]*/, 
                               float Height/*[in,def,opt]*/, 
                               Powerpoint_xp::Shape** MediaObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddMediaObject"), DISPID(2011));
  TAutoArgs<5> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)MediaObject /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::AddMediaObject(BSTR FileName/*[in]*/, float Left/*[in,def,opt]*/, 
                               float Top/*[in,def,opt]*/, float Width/*[in,def,opt]*/, 
                               float Height/*[in,def,opt]*/)
{
  Powerpoint_xp::Shape* MediaObject;
  this->AddMediaObject(FileName, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&MediaObject);
  return MediaObject;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::Paste(Powerpoint_xp::ShapeRange** Paste/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Paste"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ShapeRange**)Paste /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::ShapeRange* __fastcall
ShapesDispT<T>::Paste(void)
{
  Powerpoint_xp::ShapeRange* Paste;
  this->Paste((Powerpoint_xp::ShapeRange**)&Paste);
  return Paste;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddTable(int NumRows/*[in]*/, int NumColumns/*[in]*/, float Left/*[in,def,opt]*/, 
                         float Top/*[in,def,opt]*/, float Width/*[in,def,opt]*/, 
                         float Height/*[in,def,opt]*/, Powerpoint_xp::Shape** Table/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTable"), DISPID(2013));
  TAutoArgs<6> _args;
  _args[1] = NumRows /*[VT_INT:0]*/;
  _args[2] = NumColumns /*[VT_INT:0]*/;
  _args[3] = Left /*[VT_R4:0]*/;
  _args[4] = Top /*[VT_R4:0]*/;
  _args[5] = Width /*[VT_R4:0]*/;
  _args[6] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Table /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::AddTable(int NumRows/*[in]*/, int NumColumns/*[in]*/, float Left/*[in,def,opt]*/, 
                         float Top/*[in,def,opt]*/, float Width/*[in,def,opt]*/, 
                         float Height/*[in,def,opt]*/)
{
  Powerpoint_xp::Shape* Table;
  this->AddTable(NumRows, NumColumns, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Table);
  return Table;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::PasteSpecial(Powerpoint_xp::PpPasteDataType DataType/*[in,def,opt]*/, 
                             Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                             BSTR IconFileName/*[in,def,opt]*/, int IconIndex/*[in,def,opt]*/, 
                             BSTR IconLabel/*[in,def,opt]*/, 
                             Office_xp::MsoTriState Link/*[in,def,opt]*/, 
                             Powerpoint_xp::ShapeRange** PasteSpecial/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PasteSpecial"), DISPID(2014));
  TAutoArgs<6> _args;
  _args[1] = (int)DataType /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)DisplayAsIcon /*[VT_USERDEFINED:0]*/;
  _args[3] = IconFileName /*[VT_BSTR:0]*/;
  _args[4] = IconIndex /*[VT_INT:0]*/;
  _args[5] = IconLabel /*[VT_BSTR:0]*/;
  _args[6] = (int)Link /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ShapeRange**)PasteSpecial /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::ShapeRange* __fastcall
ShapesDispT<T>::PasteSpecial(Powerpoint_xp::PpPasteDataType DataType/*[in,def,opt]*/, 
                             Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                             BSTR IconFileName/*[in,def,opt]*/, int IconIndex/*[in,def,opt]*/, 
                             BSTR IconLabel/*[in,def,opt]*/, 
                             Office_xp::MsoTriState Link/*[in,def,opt]*/)
{
  Powerpoint_xp::ShapeRange* PasteSpecial;
  this->PasteSpecial(DataType, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link, (Powerpoint_xp::ShapeRange**)&PasteSpecial);
  return PasteSpecial;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddDiagram(Office_xp::MsoDiagramType Type/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                           Powerpoint_xp::Shape** Diagram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDiagram"), DISPID(23));
  TAutoArgs<5> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Diagram /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::AddDiagram(Office_xp::MsoDiagramType Type/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Powerpoint_xp::Shape* Diagram;
  this->AddDiagram(Type, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Diagram);
  return Diagram;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddCanvas(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                          float Height/*[in]*/, Powerpoint_xp::Shape** Shape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCanvas"), DISPID(25));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Shape /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapesDispT<T>::AddCanvas(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                          float Height/*[in]*/)
{
  Powerpoint_xp::Shape* Shape;
  this->AddCanvas(Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Shape);
  return Shape;
}

// *********************************************************************//
// DispIntf:  Placeholders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493476-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaceholdersDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
PlaceholdersDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaceholdersDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PlaceholdersDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaceholdersDispT<T>::Item(int Index/*[in]*/, Powerpoint_xp::Shape** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
PlaceholdersDispT<T>::Item(int Index/*[in]*/)
{
  Powerpoint_xp::Shape* Item;
  this->Item(Index, (Powerpoint_xp::Shape**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaceholdersDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PlaceholdersDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaceholdersDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
PlaceholdersDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaceholdersDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PlaceholdersDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  PlaceholderFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493477-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaceholderFormatDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
PlaceholderFormatDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaceholderFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PlaceholderFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaceholderFormatDispT<T>::get_Type(Powerpoint_xp::PpPlaceholderType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpPlaceholderType __fastcall
PlaceholderFormatDispT<T>::get_Type(void)
{
  Powerpoint_xp::PpPlaceholderType Type;
  this->get_Type((Powerpoint_xp::PpPlaceholderType*)&Type);
  return Type;
}

// *********************************************************************//
// DispIntf:  FreeformBuilder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493478-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FreeformBuilderDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FreeformBuilderDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FreeformBuilderDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::AddNodes(Office_xp::MsoSegmentType SegmentType/*[in]*/, 
                                  Office_xp::MsoEditingType EditingType/*[in]*/, float X1/*[in]*/, 
                                  float Y1/*[in]*/, float X2/*[in,def,opt]*/, 
                                  float Y2/*[in,def,opt]*/, float X3/*[in,def,opt]*/, 
                                  float Y3/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddNodes"), DISPID(10));
  TAutoArgs<8> _args;
  _args[1] = (int)SegmentType /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)EditingType /*[VT_USERDEFINED:0]*/;
  _args[3] = X1 /*[VT_R4:0]*/;
  _args[4] = Y1 /*[VT_R4:0]*/;
  _args[5] = X2 /*[VT_R4:0]*/;
  _args[6] = Y2 /*[VT_R4:0]*/;
  _args[7] = X3 /*[VT_R4:0]*/;
  _args[8] = Y3 /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::ConvertToShape(Powerpoint_xp::Shape** Freeform/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConvertToShape"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Freeform /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
FreeformBuilderDispT<T>::ConvertToShape(void)
{
  Powerpoint_xp::Shape* Freeform;
  this->ConvertToShape((Powerpoint_xp::Shape**)&Freeform);
  return Freeform;
}

// *********************************************************************//
// DispIntf:  Shape
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493479-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapeDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Apply()
{
  _TDispID _dispid(*this, OLETEXT("Apply"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Flip(Office_xp::MsoFlipCmd FlipCmd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Flip"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)FlipCmd /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::IncrementLeft(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementLeft"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::IncrementRotation(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementRotation"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::IncrementTop(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementTop"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::PickUp()
{
  _TDispID _dispid(*this, OLETEXT("PickUp"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::RerouteConnections()
{
  _TDispID _dispid(*this, OLETEXT("RerouteConnections"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::ScaleHeight(float Factor/*[in]*/, 
                           Office_xp::MsoTriState RelativeToOriginalSize/*[in]*/, 
                           Office_xp::MsoScaleFrom fScale/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleHeight"), DISPID(19));
  TAutoArgs<3> _args;
  _args[1] = Factor /*[VT_R4:0]*/;
  _args[2] = (int)RelativeToOriginalSize /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)fScale /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::ScaleWidth(float Factor/*[in]*/, 
                          Office_xp::MsoTriState RelativeToOriginalSize/*[in]*/, 
                          Office_xp::MsoScaleFrom fScale/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleWidth"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = Factor /*[VT_R4:0]*/;
  _args[2] = (int)RelativeToOriginalSize /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)fScale /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::SetShapesDefaultProperties()
{
  _TDispID _dispid(*this, OLETEXT("SetShapesDefaultProperties"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Ungroup(Powerpoint_xp::ShapeRange** Ungroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ungroup"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ShapeRange**)Ungroup /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::ShapeRange* __fastcall
ShapeDispT<T>::Ungroup(void)
{
  Powerpoint_xp::ShapeRange* Ungroup;
  this->Ungroup((Powerpoint_xp::ShapeRange**)&Ungroup);
  return Ungroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::ZOrder(Office_xp::MsoZOrderCmd ZOrderCmd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrder"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = (int)ZOrderCmd /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Adjustments(Powerpoint_xp::Adjustments** Adjustments/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Adjustments"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Adjustments**)Adjustments /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Adjustments* __fastcall
ShapeDispT<T>::get_Adjustments(void)
{
  Powerpoint_xp::Adjustments* Adjustments;
  this->get_Adjustments((Powerpoint_xp::Adjustments**)&Adjustments);
  return Adjustments;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_AutoShapeType(Office_xp::MsoAutoShapeType* AutoShapeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoShapeType"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoShapeType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoAutoShapeType __fastcall
ShapeDispT<T>::get_AutoShapeType(void)
{
  Office_xp::MsoAutoShapeType AutoShapeType;
  this->get_AutoShapeType((Office_xp::MsoAutoShapeType*)&AutoShapeType);
  return AutoShapeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_AutoShapeType(Office_xp::MsoAutoShapeType AutoShapeType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoShapeType"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoShapeType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_BlackWhiteMode(Office_xp::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackWhiteMode"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BlackWhiteMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoBlackWhiteMode __fastcall
ShapeDispT<T>::get_BlackWhiteMode(void)
{
  Office_xp::MsoBlackWhiteMode BlackWhiteMode;
  this->get_BlackWhiteMode((Office_xp::MsoBlackWhiteMode*)&BlackWhiteMode);
  return BlackWhiteMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_BlackWhiteMode(Office_xp::MsoBlackWhiteMode BlackWhiteMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackWhiteMode"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)BlackWhiteMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Callout(Powerpoint_xp::CalloutFormat** Callout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Callout"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::CalloutFormat**)Callout /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::CalloutFormat* __fastcall
ShapeDispT<T>::get_Callout(void)
{
  Powerpoint_xp::CalloutFormat* Callout;
  this->get_Callout((Powerpoint_xp::CalloutFormat**)&Callout);
  return Callout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionSiteCount"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ConnectionSiteCount /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeDispT<T>::get_ConnectionSiteCount(void)
{
  int ConnectionSiteCount;
  this->get_ConnectionSiteCount((int*)&ConnectionSiteCount);
  return ConnectionSiteCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Connector(Office_xp::MsoTriState* Connector/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connector"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Connector /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeDispT<T>::get_Connector(void)
{
  Office_xp::MsoTriState Connector;
  this->get_Connector((Office_xp::MsoTriState*)&Connector);
  return Connector;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_ConnectorFormat(Powerpoint_xp::ConnectorFormat** ConnectorFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectorFormat"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ConnectorFormat**)ConnectorFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ConnectorFormat* __fastcall
ShapeDispT<T>::get_ConnectorFormat(void)
{
  Powerpoint_xp::ConnectorFormat* ConnectorFormat;
  this->get_ConnectorFormat((Powerpoint_xp::ConnectorFormat**)&ConnectorFormat);
  return ConnectorFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Fill(Powerpoint_xp::FillFormat** Fill/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::FillFormat**)Fill /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::FillFormat* __fastcall
ShapeDispT<T>::get_Fill(void)
{
  Powerpoint_xp::FillFormat* Fill;
  this->get_Fill((Powerpoint_xp::FillFormat**)&Fill);
  return Fill;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_GroupItems(Powerpoint_xp::GroupShapes** GroupItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupItems"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::GroupShapes**)GroupItems /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::GroupShapes* __fastcall
ShapeDispT<T>::get_GroupItems(void)
{
  Powerpoint_xp::GroupShapes* GroupItems;
  this->get_GroupItems((Powerpoint_xp::GroupShapes**)&GroupItems);
  return GroupItems;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_HorizontalFlip(Office_xp::MsoTriState* HorizontalFlip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalFlip"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HorizontalFlip /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeDispT<T>::get_HorizontalFlip(void)
{
  Office_xp::MsoTriState HorizontalFlip;
  this->get_HorizontalFlip((Office_xp::MsoTriState*)&HorizontalFlip);
  return HorizontalFlip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Line(Powerpoint_xp::LineFormat** Line/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Line"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::LineFormat**)Line /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::LineFormat* __fastcall
ShapeDispT<T>::get_Line(void)
{
  Powerpoint_xp::LineFormat* Line;
  this->get_Line((Powerpoint_xp::LineFormat**)&Line);
  return Line;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_LockAspectRatio(Office_xp::MsoTriState* LockAspectRatio/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockAspectRatio"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LockAspectRatio /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeDispT<T>::get_LockAspectRatio(void)
{
  Office_xp::MsoTriState LockAspectRatio;
  this->get_LockAspectRatio((Office_xp::MsoTriState*)&LockAspectRatio);
  return LockAspectRatio;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_LockAspectRatio(Office_xp::MsoTriState LockAspectRatio/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockAspectRatio"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = (int)LockAspectRatio /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ShapeDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Nodes(Powerpoint_xp::ShapeNodes** Nodes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Nodes"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ShapeNodes**)Nodes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ShapeNodes* __fastcall
ShapeDispT<T>::get_Nodes(void)
{
  Powerpoint_xp::ShapeNodes* Nodes;
  this->get_Nodes((Powerpoint_xp::ShapeNodes**)&Nodes);
  return Nodes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Rotation(float* Rotation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Rotation /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Rotation(void)
{
  float Rotation;
  this->get_Rotation((float*)&Rotation);
  return Rotation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Rotation(float Rotation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = Rotation /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_PictureFormat(Powerpoint_xp::PictureFormat** Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureFormat"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PictureFormat**)Picture /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PictureFormat* __fastcall
ShapeDispT<T>::get_PictureFormat(void)
{
  Powerpoint_xp::PictureFormat* Picture;
  this->get_PictureFormat((Powerpoint_xp::PictureFormat**)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Shadow(Powerpoint_xp::ShadowFormat** Shadow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ShadowFormat**)Shadow /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ShadowFormat* __fastcall
ShapeDispT<T>::get_Shadow(void)
{
  Powerpoint_xp::ShadowFormat* Shadow;
  this->get_Shadow((Powerpoint_xp::ShadowFormat**)&Shadow);
  return Shadow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_TextEffect(Powerpoint_xp::TextEffectFormat** TextEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextEffect"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextEffectFormat**)TextEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::TextEffectFormat* __fastcall
ShapeDispT<T>::get_TextEffect(void)
{
  Powerpoint_xp::TextEffectFormat* TextEffect;
  this->get_TextEffect((Powerpoint_xp::TextEffectFormat**)&TextEffect);
  return TextEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_TextFrame(Powerpoint_xp::TextFrame** TextFrame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFrame"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextFrame**)TextFrame /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::TextFrame* __fastcall
ShapeDispT<T>::get_TextFrame(void)
{
  Powerpoint_xp::TextFrame* TextFrame;
  this->get_TextFrame((Powerpoint_xp::TextFrame**)&TextFrame);
  return TextFrame;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_ThreeD(Powerpoint_xp::ThreeDFormat** ThreeD/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ThreeD"), DISPID(122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ThreeDFormat**)ThreeD /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ThreeDFormat* __fastcall
ShapeDispT<T>::get_ThreeD(void)
{
  Powerpoint_xp::ThreeDFormat* ThreeD;
  this->get_ThreeD((Powerpoint_xp::ThreeDFormat**)&ThreeD);
  return ThreeD;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Type(Office_xp::MsoShapeType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoShapeType __fastcall
ShapeDispT<T>::get_Type(void)
{
  Office_xp::MsoShapeType Type;
  this->get_Type((Office_xp::MsoShapeType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_VerticalFlip(Office_xp::MsoTriState* VerticalFlip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalFlip"), DISPID(125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)VerticalFlip /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeDispT<T>::get_VerticalFlip(void)
{
  Office_xp::MsoTriState VerticalFlip;
  this->get_VerticalFlip((Office_xp::MsoTriState*)&VerticalFlip);
  return VerticalFlip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Vertices(VARIANT* Vertices/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Vertices"), DISPID(126));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Vertices /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ShapeDispT<T>::get_Vertices(void)
{
  VARIANT Vertices;
  this->get_Vertices((VARIANT*)&Vertices);
  return Vertices;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeDispT<T>::get_Visible(void)
{
  Office_xp::MsoTriState Visible;
  this->get_Visible((Office_xp::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Visible(Office_xp::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(128));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(128));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrderPosition"), DISPID(129));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ZOrderPosition /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeDispT<T>::get_ZOrderPosition(void)
{
  int ZOrderPosition;
  this->get_ZOrderPosition((int*)&ZOrderPosition);
  return ZOrderPosition;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_OLEFormat(Powerpoint_xp::OLEFormat** OLEFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEFormat"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::OLEFormat**)OLEFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::OLEFormat* __fastcall
ShapeDispT<T>::get_OLEFormat(void)
{
  Powerpoint_xp::OLEFormat* OLEFormat;
  this->get_OLEFormat((Powerpoint_xp::OLEFormat**)&OLEFormat);
  return OLEFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_LinkFormat(Powerpoint_xp::LinkFormat** LinkFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LinkFormat"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::LinkFormat**)LinkFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::LinkFormat* __fastcall
ShapeDispT<T>::get_LinkFormat(void)
{
  Powerpoint_xp::LinkFormat* LinkFormat;
  this->get_LinkFormat((Powerpoint_xp::LinkFormat**)&LinkFormat);
  return LinkFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_PlaceholderFormat(Powerpoint_xp::PlaceholderFormat** PlaceholderFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlaceholderFormat"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PlaceholderFormat**)PlaceholderFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PlaceholderFormat* __fastcall
ShapeDispT<T>::get_PlaceholderFormat(void)
{
  Powerpoint_xp::PlaceholderFormat* PlaceholderFormat;
  this->get_PlaceholderFormat((Powerpoint_xp::PlaceholderFormat**)&PlaceholderFormat);
  return PlaceholderFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_AnimationSettings(Powerpoint_xp::AnimationSettings** AnimationSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimationSettings"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::AnimationSettings**)AnimationSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::AnimationSettings* __fastcall
ShapeDispT<T>::get_AnimationSettings(void)
{
  Powerpoint_xp::AnimationSettings* AnimationSettings;
  this->get_AnimationSettings((Powerpoint_xp::AnimationSettings**)&AnimationSettings);
  return AnimationSettings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_ActionSettings(Powerpoint_xp::ActionSettings** ActionSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActionSettings"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ActionSettings**)ActionSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ActionSettings* __fastcall
ShapeDispT<T>::get_ActionSettings(void)
{
  Powerpoint_xp::ActionSettings* ActionSettings;
  this->get_ActionSettings((Powerpoint_xp::ActionSettings**)&ActionSettings);
  return ActionSettings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Tags(Powerpoint_xp::Tags** Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Tags* __fastcall
ShapeDispT<T>::get_Tags(void)
{
  Powerpoint_xp::Tags* Tags;
  this->get_Tags((Powerpoint_xp::Tags**)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Cut()
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(2009));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Copy()
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(2010));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Select(Office_xp::MsoTriState Replace/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = (int)Replace /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Duplicate(Powerpoint_xp::ShapeRange** Duplicate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Duplicate"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ShapeRange**)Duplicate /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::ShapeRange* __fastcall
ShapeDispT<T>::Duplicate(void)
{
  Powerpoint_xp::ShapeRange* Duplicate;
  this->Duplicate((Powerpoint_xp::ShapeRange**)&Duplicate);
  return Duplicate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_MediaType(Powerpoint_xp::PpMediaType* MediaType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MediaType"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MediaType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpMediaType __fastcall
ShapeDispT<T>::get_MediaType(void)
{
  Powerpoint_xp::PpMediaType MediaType;
  this->get_MediaType((Powerpoint_xp::PpMediaType*)&MediaType);
  return MediaType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_HasTextFrame(Office_xp::MsoTriState* HasTextFrame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTextFrame"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HasTextFrame /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeDispT<T>::get_HasTextFrame(void)
{
  Office_xp::MsoTriState HasTextFrame;
  this->get_HasTextFrame((Office_xp::MsoTriState*)&HasTextFrame);
  return HasTextFrame;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_SoundFormat(Powerpoint_xp::SoundFormat** SoundFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SoundFormat"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SoundFormat**)SoundFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::SoundFormat* __fastcall
ShapeDispT<T>::get_SoundFormat(void)
{
  Powerpoint_xp::SoundFormat* SoundFormat;
  this->get_SoundFormat((Powerpoint_xp::SoundFormat**)&SoundFormat);
  return SoundFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Script(Office_xp::Script** Script/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Script"), DISPID(130));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::Script**)Script /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::Script* __fastcall
ShapeDispT<T>::get_Script(void)
{
  Office_xp::Script* Script;
  this->get_Script((Office_xp::Script**)&Script);
  return Script;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_AlternativeText(BSTR* AlternativeText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlternativeText"), DISPID(131));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AlternativeText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ShapeDispT<T>::get_AlternativeText(void)
{
  BSTR AlternativeText;
  this->get_AlternativeText((BSTR*)&AlternativeText);
  return AlternativeText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_AlternativeText(BSTR AlternativeText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlternativeText"), DISPID(131));
  TAutoArgs<1> _args;
  _args[1] = AlternativeText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_HasTable(Office_xp::MsoTriState* HasTable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTable"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HasTable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeDispT<T>::get_HasTable(void)
{
  Office_xp::MsoTriState HasTable;
  this->get_HasTable((Office_xp::MsoTriState*)&HasTable);
  return HasTable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Table(Powerpoint_xp::Table** Table/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Table"), DISPID(2017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Table**)Table /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Table* __fastcall
ShapeDispT<T>::get_Table(void)
{
  Powerpoint_xp::Table* Table;
  this->get_Table((Powerpoint_xp::Table**)&Table);
  return Table;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Export(BSTR PathName/*[in]*/, Powerpoint_xp::PpShapeFormat Filter/*[in]*/, 
                      int ScaleWidth/*[in,def,opt]*/, int ScaleHeight/*[in,def,opt]*/, 
                      Powerpoint_xp::PpExportMode ExportMode/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Export"), DISPID(2018));
  TAutoArgs<5> _args;
  _args[1] = PathName /*[VT_BSTR:0]*/;
  _args[2] = (int)Filter /*[VT_USERDEFINED:0]*/;
  _args[3] = ScaleWidth /*[VT_INT:0]*/;
  _args[4] = ScaleHeight /*[VT_INT:0]*/;
  _args[5] = (int)ExportMode /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_HasDiagram(Office_xp::MsoTriState* pHasDiagram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasDiagram"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pHasDiagram /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeDispT<T>::get_HasDiagram(void)
{
  Office_xp::MsoTriState pHasDiagram;
  this->get_HasDiagram((Office_xp::MsoTriState*)&pHasDiagram);
  return pHasDiagram;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Diagram(Powerpoint_xp::Diagram** Diagram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Diagram"), DISPID(133));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Diagram**)Diagram /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Diagram* __fastcall
ShapeDispT<T>::get_Diagram(void)
{
  Powerpoint_xp::Diagram* Diagram;
  this->get_Diagram((Powerpoint_xp::Diagram**)&Diagram);
  return Diagram;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_HasDiagramNode(Office_xp::MsoTriState* pHasDiagram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasDiagramNode"), DISPID(134));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pHasDiagram /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeDispT<T>::get_HasDiagramNode(void)
{
  Office_xp::MsoTriState pHasDiagram;
  this->get_HasDiagramNode((Office_xp::MsoTriState*)&pHasDiagram);
  return pHasDiagram;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_DiagramNode(Powerpoint_xp::DiagramNode** DiagramNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DiagramNode"), DISPID(135));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DiagramNode**)DiagramNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::DiagramNode* __fastcall
ShapeDispT<T>::get_DiagramNode(void)
{
  Powerpoint_xp::DiagramNode* DiagramNode;
  this->get_DiagramNode((Powerpoint_xp::DiagramNode**)&DiagramNode);
  return DiagramNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Child(Office_xp::MsoTriState* Child/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Child"), DISPID(136));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Child /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeDispT<T>::get_Child(void)
{
  Office_xp::MsoTriState Child;
  this->get_Child((Office_xp::MsoTriState*)&Child);
  return Child;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_ParentGroup(Powerpoint_xp::Shape** Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentGroup"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapeDispT<T>::get_ParentGroup(void)
{
  Powerpoint_xp::Shape* Parent;
  this->get_ParentGroup((Powerpoint_xp::Shape**)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_CanvasItems(Powerpoint_xp::CanvasShapes** CanvasShapes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanvasItems"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::CanvasShapes**)CanvasShapes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::CanvasShapes* __fastcall
ShapeDispT<T>::get_CanvasItems(void)
{
  Powerpoint_xp::CanvasShapes* CanvasShapes;
  this->get_CanvasItems((Powerpoint_xp::CanvasShapes**)&CanvasShapes);
  return CanvasShapes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Id(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(139));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeDispT<T>::get_Id(void)
{
  int pid;
  this->get_Id((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::CanvasCropLeft(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanvasCropLeft"), DISPID(140));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::CanvasCropTop(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanvasCropTop"), DISPID(141));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::CanvasCropRight(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanvasCropRight"), DISPID(142));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::CanvasCropBottom(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanvasCropBottom"), DISPID(143));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_RTF(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RTF"), DISPID(144));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ShapeRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeRangeDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapeRangeDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeRangeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Apply()
{
  _TDispID _dispid(*this, OLETEXT("Apply"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Flip(Office_xp::MsoFlipCmd FlipCmd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Flip"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)FlipCmd /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::IncrementLeft(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementLeft"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::IncrementRotation(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementRotation"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::IncrementTop(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementTop"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::PickUp()
{
  _TDispID _dispid(*this, OLETEXT("PickUp"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::RerouteConnections()
{
  _TDispID _dispid(*this, OLETEXT("RerouteConnections"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::ScaleHeight(float Factor/*[in]*/, 
                                Office_xp::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                Office_xp::MsoScaleFrom fScale/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleHeight"), DISPID(19));
  TAutoArgs<3> _args;
  _args[1] = Factor /*[VT_R4:0]*/;
  _args[2] = (int)RelativeToOriginalSize /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)fScale /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::ScaleWidth(float Factor/*[in]*/, 
                               Office_xp::MsoTriState RelativeToOriginalSize/*[in]*/, 
                               Office_xp::MsoScaleFrom fScale/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleWidth"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = Factor /*[VT_R4:0]*/;
  _args[2] = (int)RelativeToOriginalSize /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)fScale /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::SetShapesDefaultProperties()
{
  _TDispID _dispid(*this, OLETEXT("SetShapesDefaultProperties"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Ungroup(Powerpoint_xp::ShapeRange** Ungroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ungroup"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ShapeRange**)Ungroup /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::ShapeRange* __fastcall
ShapeRangeDispT<T>::Ungroup(void)
{
  Powerpoint_xp::ShapeRange* Ungroup;
  this->Ungroup((Powerpoint_xp::ShapeRange**)&Ungroup);
  return Ungroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::ZOrder(Office_xp::MsoZOrderCmd ZOrderCmd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrder"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = (int)ZOrderCmd /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Adjustments(Powerpoint_xp::Adjustments** Adjustments/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Adjustments"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Adjustments**)Adjustments /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Adjustments* __fastcall
ShapeRangeDispT<T>::get_Adjustments(void)
{
  Powerpoint_xp::Adjustments* Adjustments;
  this->get_Adjustments((Powerpoint_xp::Adjustments**)&Adjustments);
  return Adjustments;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_AutoShapeType(Office_xp::MsoAutoShapeType* AutoShapeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoShapeType"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoShapeType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoAutoShapeType __fastcall
ShapeRangeDispT<T>::get_AutoShapeType(void)
{
  Office_xp::MsoAutoShapeType AutoShapeType;
  this->get_AutoShapeType((Office_xp::MsoAutoShapeType*)&AutoShapeType);
  return AutoShapeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_AutoShapeType(Office_xp::MsoAutoShapeType AutoShapeType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoShapeType"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoShapeType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_BlackWhiteMode(Office_xp::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackWhiteMode"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BlackWhiteMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoBlackWhiteMode __fastcall
ShapeRangeDispT<T>::get_BlackWhiteMode(void)
{
  Office_xp::MsoBlackWhiteMode BlackWhiteMode;
  this->get_BlackWhiteMode((Office_xp::MsoBlackWhiteMode*)&BlackWhiteMode);
  return BlackWhiteMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_BlackWhiteMode(Office_xp::MsoBlackWhiteMode BlackWhiteMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackWhiteMode"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)BlackWhiteMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Callout(Powerpoint_xp::CalloutFormat** Callout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Callout"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::CalloutFormat**)Callout /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::CalloutFormat* __fastcall
ShapeRangeDispT<T>::get_Callout(void)
{
  Powerpoint_xp::CalloutFormat* Callout;
  this->get_Callout((Powerpoint_xp::CalloutFormat**)&Callout);
  return Callout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionSiteCount"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ConnectionSiteCount /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeRangeDispT<T>::get_ConnectionSiteCount(void)
{
  int ConnectionSiteCount;
  this->get_ConnectionSiteCount((int*)&ConnectionSiteCount);
  return ConnectionSiteCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Connector(Office_xp::MsoTriState* Connector/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connector"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Connector /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeRangeDispT<T>::get_Connector(void)
{
  Office_xp::MsoTriState Connector;
  this->get_Connector((Office_xp::MsoTriState*)&Connector);
  return Connector;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_ConnectorFormat(Powerpoint_xp::ConnectorFormat** ConnectorFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectorFormat"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ConnectorFormat**)ConnectorFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ConnectorFormat* __fastcall
ShapeRangeDispT<T>::get_ConnectorFormat(void)
{
  Powerpoint_xp::ConnectorFormat* ConnectorFormat;
  this->get_ConnectorFormat((Powerpoint_xp::ConnectorFormat**)&ConnectorFormat);
  return ConnectorFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Fill(Powerpoint_xp::FillFormat** Fill/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::FillFormat**)Fill /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::FillFormat* __fastcall
ShapeRangeDispT<T>::get_Fill(void)
{
  Powerpoint_xp::FillFormat* Fill;
  this->get_Fill((Powerpoint_xp::FillFormat**)&Fill);
  return Fill;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_GroupItems(Powerpoint_xp::GroupShapes** GroupItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupItems"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::GroupShapes**)GroupItems /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::GroupShapes* __fastcall
ShapeRangeDispT<T>::get_GroupItems(void)
{
  Powerpoint_xp::GroupShapes* GroupItems;
  this->get_GroupItems((Powerpoint_xp::GroupShapes**)&GroupItems);
  return GroupItems;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_HorizontalFlip(Office_xp::MsoTriState* HorizontalFlip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalFlip"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HorizontalFlip /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeRangeDispT<T>::get_HorizontalFlip(void)
{
  Office_xp::MsoTriState HorizontalFlip;
  this->get_HorizontalFlip((Office_xp::MsoTriState*)&HorizontalFlip);
  return HorizontalFlip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Line(Powerpoint_xp::LineFormat** Line/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Line"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::LineFormat**)Line /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::LineFormat* __fastcall
ShapeRangeDispT<T>::get_Line(void)
{
  Powerpoint_xp::LineFormat* Line;
  this->get_Line((Powerpoint_xp::LineFormat**)&Line);
  return Line;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_LockAspectRatio(Office_xp::MsoTriState* LockAspectRatio/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockAspectRatio"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LockAspectRatio /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeRangeDispT<T>::get_LockAspectRatio(void)
{
  Office_xp::MsoTriState LockAspectRatio;
  this->get_LockAspectRatio((Office_xp::MsoTriState*)&LockAspectRatio);
  return LockAspectRatio;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_LockAspectRatio(Office_xp::MsoTriState LockAspectRatio/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockAspectRatio"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = (int)LockAspectRatio /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ShapeRangeDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Nodes(Powerpoint_xp::ShapeNodes** Nodes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Nodes"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ShapeNodes**)Nodes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ShapeNodes* __fastcall
ShapeRangeDispT<T>::get_Nodes(void)
{
  Powerpoint_xp::ShapeNodes* Nodes;
  this->get_Nodes((Powerpoint_xp::ShapeNodes**)&Nodes);
  return Nodes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Rotation(float* Rotation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Rotation /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Rotation(void)
{
  float Rotation;
  this->get_Rotation((float*)&Rotation);
  return Rotation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Rotation(float Rotation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = Rotation /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_PictureFormat(Powerpoint_xp::PictureFormat** Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureFormat"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PictureFormat**)Picture /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PictureFormat* __fastcall
ShapeRangeDispT<T>::get_PictureFormat(void)
{
  Powerpoint_xp::PictureFormat* Picture;
  this->get_PictureFormat((Powerpoint_xp::PictureFormat**)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Shadow(Powerpoint_xp::ShadowFormat** Shadow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ShadowFormat**)Shadow /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ShadowFormat* __fastcall
ShapeRangeDispT<T>::get_Shadow(void)
{
  Powerpoint_xp::ShadowFormat* Shadow;
  this->get_Shadow((Powerpoint_xp::ShadowFormat**)&Shadow);
  return Shadow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_TextEffect(Powerpoint_xp::TextEffectFormat** TextEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextEffect"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextEffectFormat**)TextEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::TextEffectFormat* __fastcall
ShapeRangeDispT<T>::get_TextEffect(void)
{
  Powerpoint_xp::TextEffectFormat* TextEffect;
  this->get_TextEffect((Powerpoint_xp::TextEffectFormat**)&TextEffect);
  return TextEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_TextFrame(Powerpoint_xp::TextFrame** TextFrame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFrame"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextFrame**)TextFrame /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::TextFrame* __fastcall
ShapeRangeDispT<T>::get_TextFrame(void)
{
  Powerpoint_xp::TextFrame* TextFrame;
  this->get_TextFrame((Powerpoint_xp::TextFrame**)&TextFrame);
  return TextFrame;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_ThreeD(Powerpoint_xp::ThreeDFormat** ThreeD/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ThreeD"), DISPID(122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ThreeDFormat**)ThreeD /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ThreeDFormat* __fastcall
ShapeRangeDispT<T>::get_ThreeD(void)
{
  Powerpoint_xp::ThreeDFormat* ThreeD;
  this->get_ThreeD((Powerpoint_xp::ThreeDFormat**)&ThreeD);
  return ThreeD;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Type(Office_xp::MsoShapeType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoShapeType __fastcall
ShapeRangeDispT<T>::get_Type(void)
{
  Office_xp::MsoShapeType Type;
  this->get_Type((Office_xp::MsoShapeType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_VerticalFlip(Office_xp::MsoTriState* VerticalFlip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalFlip"), DISPID(125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)VerticalFlip /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeRangeDispT<T>::get_VerticalFlip(void)
{
  Office_xp::MsoTriState VerticalFlip;
  this->get_VerticalFlip((Office_xp::MsoTriState*)&VerticalFlip);
  return VerticalFlip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Vertices(VARIANT* Vertices/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Vertices"), DISPID(126));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Vertices /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ShapeRangeDispT<T>::get_Vertices(void)
{
  VARIANT Vertices;
  this->get_Vertices((VARIANT*)&Vertices);
  return Vertices;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeRangeDispT<T>::get_Visible(void)
{
  Office_xp::MsoTriState Visible;
  this->get_Visible((Office_xp::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Visible(Office_xp::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(128));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(128));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrderPosition"), DISPID(129));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ZOrderPosition /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeRangeDispT<T>::get_ZOrderPosition(void)
{
  int ZOrderPosition;
  this->get_ZOrderPosition((int*)&ZOrderPosition);
  return ZOrderPosition;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_OLEFormat(Powerpoint_xp::OLEFormat** OLEFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEFormat"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::OLEFormat**)OLEFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::OLEFormat* __fastcall
ShapeRangeDispT<T>::get_OLEFormat(void)
{
  Powerpoint_xp::OLEFormat* OLEFormat;
  this->get_OLEFormat((Powerpoint_xp::OLEFormat**)&OLEFormat);
  return OLEFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_LinkFormat(Powerpoint_xp::LinkFormat** LinkFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LinkFormat"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::LinkFormat**)LinkFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::LinkFormat* __fastcall
ShapeRangeDispT<T>::get_LinkFormat(void)
{
  Powerpoint_xp::LinkFormat* LinkFormat;
  this->get_LinkFormat((Powerpoint_xp::LinkFormat**)&LinkFormat);
  return LinkFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_PlaceholderFormat(Powerpoint_xp::PlaceholderFormat** PlaceholderFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlaceholderFormat"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PlaceholderFormat**)PlaceholderFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PlaceholderFormat* __fastcall
ShapeRangeDispT<T>::get_PlaceholderFormat(void)
{
  Powerpoint_xp::PlaceholderFormat* PlaceholderFormat;
  this->get_PlaceholderFormat((Powerpoint_xp::PlaceholderFormat**)&PlaceholderFormat);
  return PlaceholderFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_AnimationSettings(Powerpoint_xp::AnimationSettings** AnimationSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimationSettings"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::AnimationSettings**)AnimationSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::AnimationSettings* __fastcall
ShapeRangeDispT<T>::get_AnimationSettings(void)
{
  Powerpoint_xp::AnimationSettings* AnimationSettings;
  this->get_AnimationSettings((Powerpoint_xp::AnimationSettings**)&AnimationSettings);
  return AnimationSettings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_ActionSettings(Powerpoint_xp::ActionSettings** ActionSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActionSettings"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ActionSettings**)ActionSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ActionSettings* __fastcall
ShapeRangeDispT<T>::get_ActionSettings(void)
{
  Powerpoint_xp::ActionSettings* ActionSettings;
  this->get_ActionSettings((Powerpoint_xp::ActionSettings**)&ActionSettings);
  return ActionSettings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Tags(Powerpoint_xp::Tags** Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Tags* __fastcall
ShapeRangeDispT<T>::get_Tags(void)
{
  Powerpoint_xp::Tags* Tags;
  this->get_Tags((Powerpoint_xp::Tags**)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Cut()
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(2009));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Copy()
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(2010));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Select(Office_xp::MsoTriState Replace/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = (int)Replace /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Duplicate(Powerpoint_xp::ShapeRange** Duplicate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Duplicate"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ShapeRange**)Duplicate /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::ShapeRange* __fastcall
ShapeRangeDispT<T>::Duplicate(void)
{
  Powerpoint_xp::ShapeRange* Duplicate;
  this->Duplicate((Powerpoint_xp::ShapeRange**)&Duplicate);
  return Duplicate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_MediaType(Powerpoint_xp::PpMediaType* MediaType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MediaType"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MediaType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpMediaType __fastcall
ShapeRangeDispT<T>::get_MediaType(void)
{
  Powerpoint_xp::PpMediaType MediaType;
  this->get_MediaType((Powerpoint_xp::PpMediaType*)&MediaType);
  return MediaType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_HasTextFrame(Office_xp::MsoTriState* HasTextFrame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTextFrame"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HasTextFrame /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeRangeDispT<T>::get_HasTextFrame(void)
{
  Office_xp::MsoTriState HasTextFrame;
  this->get_HasTextFrame((Office_xp::MsoTriState*)&HasTextFrame);
  return HasTextFrame;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_SoundFormat(Powerpoint_xp::SoundFormat** SoundFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SoundFormat"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SoundFormat**)SoundFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::SoundFormat* __fastcall
ShapeRangeDispT<T>::get_SoundFormat(void)
{
  Powerpoint_xp::SoundFormat* SoundFormat;
  this->get_SoundFormat((Powerpoint_xp::SoundFormat**)&SoundFormat);
  return SoundFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Item(VARIANT Index/*[in]*/, Powerpoint_xp::Shape** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapeRangeDispT<T>::Item(VARIANT Index/*[in]*/)
{
  Powerpoint_xp::Shape* Item;
  this->Item(Index, (Powerpoint_xp::Shape**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ShapeRangeDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ShapeRangeDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapeRangeDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Group(Powerpoint_xp::Shape** Group/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Group"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Group /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapeRangeDispT<T>::Group(void)
{
  Powerpoint_xp::Shape* Group;
  this->Group((Powerpoint_xp::Shape**)&Group);
  return Group;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Regroup(Powerpoint_xp::Shape** Regroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Regroup"), DISPID(2017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Regroup /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapeRangeDispT<T>::Regroup(void)
{
  Powerpoint_xp::Shape* Regroup;
  this->Regroup((Powerpoint_xp::Shape**)&Regroup);
  return Regroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Align(Office_xp::MsoAlignCmd AlignCmd/*[in]*/, 
                          Office_xp::MsoTriState RelativeTo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Align"), DISPID(2018));
  TAutoArgs<2> _args;
  _args[1] = (int)AlignCmd /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)RelativeTo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Distribute(Office_xp::MsoDistributeCmd DistributeCmd/*[in]*/, 
                               Office_xp::MsoTriState RelativeTo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Distribute"), DISPID(2019));
  TAutoArgs<2> _args;
  _args[1] = (int)DistributeCmd /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)RelativeTo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::GetPolygonalRepresentation(unsigned_long maxPointsInBuffer/*[in]*/, 
                                               float* pPoints/*[in]*/, 
                                               unsigned_long* numPointsInPolygon/*[out]*/, 
                                               Office_xp::MsoTriState* IsOpen/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPolygonalRepresentation"), DISPID(2020));
  TAutoArgs<4> _args;
  _args[1] = maxPointsInBuffer /*[VT_UI4:0]*/;
  _args[2] = pPoints /*[VT_R4:1]*/;
  _args[3] = numPointsInPolygon /*[VT_UI4:1]*/;
  _args[4] = (int*)IsOpen /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Script(Office_xp::Script** Script/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Script"), DISPID(130));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::Script**)Script /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::Script* __fastcall
ShapeRangeDispT<T>::get_Script(void)
{
  Office_xp::Script* Script;
  this->get_Script((Office_xp::Script**)&Script);
  return Script;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_AlternativeText(BSTR* AlternativeText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlternativeText"), DISPID(131));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AlternativeText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ShapeRangeDispT<T>::get_AlternativeText(void)
{
  BSTR AlternativeText;
  this->get_AlternativeText((BSTR*)&AlternativeText);
  return AlternativeText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_AlternativeText(BSTR AlternativeText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlternativeText"), DISPID(131));
  TAutoArgs<1> _args;
  _args[1] = AlternativeText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_HasTable(Office_xp::MsoTriState* HasTable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTable"), DISPID(2021));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HasTable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeRangeDispT<T>::get_HasTable(void)
{
  Office_xp::MsoTriState HasTable;
  this->get_HasTable((Office_xp::MsoTriState*)&HasTable);
  return HasTable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Table(Powerpoint_xp::Table** Table/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Table"), DISPID(2022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Table**)Table /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Table* __fastcall
ShapeRangeDispT<T>::get_Table(void)
{
  Powerpoint_xp::Table* Table;
  this->get_Table((Powerpoint_xp::Table**)&Table);
  return Table;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Export(BSTR PathName/*[in]*/, Powerpoint_xp::PpShapeFormat Filter/*[in]*/, 
                           int ScaleWidth/*[in,def,opt]*/, int ScaleHeight/*[in,def,opt]*/, 
                           Powerpoint_xp::PpExportMode ExportMode/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Export"), DISPID(2023));
  TAutoArgs<5> _args;
  _args[1] = PathName /*[VT_BSTR:0]*/;
  _args[2] = (int)Filter /*[VT_USERDEFINED:0]*/;
  _args[3] = ScaleWidth /*[VT_INT:0]*/;
  _args[4] = ScaleHeight /*[VT_INT:0]*/;
  _args[5] = (int)ExportMode /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_HasDiagram(Office_xp::MsoTriState* pHasDiagram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasDiagram"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pHasDiagram /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeRangeDispT<T>::get_HasDiagram(void)
{
  Office_xp::MsoTriState pHasDiagram;
  this->get_HasDiagram((Office_xp::MsoTriState*)&pHasDiagram);
  return pHasDiagram;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Diagram(Powerpoint_xp::Diagram** Diagram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Diagram"), DISPID(133));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Diagram**)Diagram /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Diagram* __fastcall
ShapeRangeDispT<T>::get_Diagram(void)
{
  Powerpoint_xp::Diagram* Diagram;
  this->get_Diagram((Powerpoint_xp::Diagram**)&Diagram);
  return Diagram;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_HasDiagramNode(Office_xp::MsoTriState* pHasDiagram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasDiagramNode"), DISPID(134));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pHasDiagram /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeRangeDispT<T>::get_HasDiagramNode(void)
{
  Office_xp::MsoTriState pHasDiagram;
  this->get_HasDiagramNode((Office_xp::MsoTriState*)&pHasDiagram);
  return pHasDiagram;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_DiagramNode(Powerpoint_xp::DiagramNode** DiagramNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DiagramNode"), DISPID(135));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DiagramNode**)DiagramNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::DiagramNode* __fastcall
ShapeRangeDispT<T>::get_DiagramNode(void)
{
  Powerpoint_xp::DiagramNode* DiagramNode;
  this->get_DiagramNode((Powerpoint_xp::DiagramNode**)&DiagramNode);
  return DiagramNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Child(Office_xp::MsoTriState* Child/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Child"), DISPID(136));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Child /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShapeRangeDispT<T>::get_Child(void)
{
  Office_xp::MsoTriState Child;
  this->get_Child((Office_xp::MsoTriState*)&Child);
  return Child;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_ParentGroup(Powerpoint_xp::Shape** Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentGroup"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ShapeRangeDispT<T>::get_ParentGroup(void)
{
  Powerpoint_xp::Shape* Parent;
  this->get_ParentGroup((Powerpoint_xp::Shape**)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_CanvasItems(Powerpoint_xp::CanvasShapes** CanvasShapes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanvasItems"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::CanvasShapes**)CanvasShapes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::CanvasShapes* __fastcall
ShapeRangeDispT<T>::get_CanvasItems(void)
{
  Powerpoint_xp::CanvasShapes* CanvasShapes;
  this->get_CanvasItems((Powerpoint_xp::CanvasShapes**)&CanvasShapes);
  return CanvasShapes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Id(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(139));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeRangeDispT<T>::get_Id(void)
{
  int pid;
  this->get_Id((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::CanvasCropLeft(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanvasCropLeft"), DISPID(140));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::CanvasCropTop(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanvasCropTop"), DISPID(141));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::CanvasCropRight(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanvasCropRight"), DISPID(142));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::CanvasCropBottom(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanvasCropBottom"), DISPID(143));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_RTF(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RTF"), DISPID(144));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  GroupShapes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
GroupShapesDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
GroupShapesDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
GroupShapesDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get_Count(int* pnShapes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnShapes /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
GroupShapesDispT<T>::get_Count(void)
{
  int pnShapes;
  this->get_Count((int*)&pnShapes);
  return pnShapes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::Item(VARIANT Index/*[in]*/, Powerpoint_xp::Shape** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
GroupShapesDispT<T>::Item(VARIANT Index/*[in]*/)
{
  Powerpoint_xp::Shape* Item;
  this->Item(Index, (Powerpoint_xp::Shape**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppienum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
GroupShapesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppienum;
  this->get__NewEnum((LPUNKNOWN*)&ppienum);
  return ppienum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::Range(VARIANT Index/*[in]*/, Powerpoint_xp::ShapeRange** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Range"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ShapeRange**)Range /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::ShapeRange* __fastcall
GroupShapesDispT<T>::Range(VARIANT Index/*[in]*/)
{
  Powerpoint_xp::ShapeRange* Range;
  this->Range(Index, (Powerpoint_xp::ShapeRange**)&Range);
  return Range;
}

// *********************************************************************//
// DispIntf:  Adjustments
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AdjustmentsDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
AdjustmentsDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AdjustmentsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Count(int* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
AdjustmentsDispT<T>::get_Count(void)
{
  int Count;
  this->get_Count((int*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Item(int Index/*[in]*/, float* Val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(Val /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
AdjustmentsDispT<T>::get_Item(int Index/*[in]*/)
{
  float Val;
  this->get_Item(Index, (float*)&Val);
  return Val;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::set_Item(int Index/*[in]*/, float Val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  _args[2] = Val /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PictureFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PictureFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PictureFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PictureFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::IncrementBrightness(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementBrightness"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::IncrementContrast(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementContrast"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Brightness(float* Brightness/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Brightness"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Brightness /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_Brightness(void)
{
  float Brightness;
  this->get_Brightness((float*)&Brightness);
  return Brightness;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_Brightness(float Brightness/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Brightness"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = Brightness /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_ColorType(Office_xp::MsoPictureColorType* ColorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorType"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ColorType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoPictureColorType __fastcall
PictureFormatDispT<T>::get_ColorType(void)
{
  Office_xp::MsoPictureColorType ColorType;
  this->get_ColorType((Office_xp::MsoPictureColorType*)&ColorType);
  return ColorType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_ColorType(Office_xp::MsoPictureColorType ColorType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorType"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)ColorType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Contrast(float* Contrast/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Contrast"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Contrast /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_Contrast(void)
{
  float Contrast;
  this->get_Contrast((float*)&Contrast);
  return Contrast;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_Contrast(float Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Contrast"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_CropBottom(float* CropBottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropBottom"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CropBottom /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_CropBottom(void)
{
  float CropBottom;
  this->get_CropBottom((float*)&CropBottom);
  return CropBottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_CropBottom(float CropBottom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropBottom"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = CropBottom /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_CropLeft(float* CropLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropLeft"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CropLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_CropLeft(void)
{
  float CropLeft;
  this->get_CropLeft((float*)&CropLeft);
  return CropLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_CropLeft(float CropLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropLeft"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = CropLeft /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_CropRight(float* CropRight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropRight"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CropRight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_CropRight(void)
{
  float CropRight;
  this->get_CropRight((float*)&CropRight);
  return CropRight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_CropRight(float CropRight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropRight"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = CropRight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_CropTop(float* CropTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropTop"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CropTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_CropTop(void)
{
  float CropTop;
  this->get_CropTop((float*)&CropTop);
  return CropTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_CropTop(float CropTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropTop"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = CropTop /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_TransparencyColor(Office_xp::MsoRGBType* TransparencyColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparencyColor"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TransparencyColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoRGBType __fastcall
PictureFormatDispT<T>::get_TransparencyColor(void)
{
  Office_xp::MsoRGBType TransparencyColor;
  this->get_TransparencyColor((Office_xp::MsoRGBType*)&TransparencyColor);
  return TransparencyColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_TransparencyColor(Office_xp::MsoRGBType TransparencyColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparencyColor"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = TransparencyColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_TransparentBackground(Office_xp::MsoTriState* TransparentBackground/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparentBackground"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TransparentBackground /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
PictureFormatDispT<T>::get_TransparentBackground(void)
{
  Office_xp::MsoTriState TransparentBackground;
  this->get_TransparentBackground((Office_xp::MsoTriState*)&TransparentBackground);
  return TransparentBackground;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_TransparentBackground(Office_xp::MsoTriState TransparentBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparentBackground"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = (int)TransparentBackground /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  FillFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FillFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FillFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FillFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::Background()
{
  _TDispID _dispid(*this, OLETEXT("Background"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::OneColorGradient(Office_xp::MsoGradientStyle Style/*[in]*/, int Variant/*[in]*/
                                     , float Degree/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OneColorGradient"), DISPID(11));
  TAutoArgs<3> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  _args[2] = Variant /*[VT_INT:0]*/;
  _args[3] = Degree /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::Patterned(Office_xp::MsoPatternType Pattern/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Patterned"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)Pattern /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::PresetGradient(Office_xp::MsoGradientStyle Style/*[in]*/, int Variant/*[in]*/, 
                                   Office_xp::MsoPresetGradientType PresetGradientType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetGradient"), DISPID(13));
  TAutoArgs<3> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  _args[2] = Variant /*[VT_INT:0]*/;
  _args[3] = (int)PresetGradientType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::PresetTextured(Office_xp::MsoPresetTexture PresetTexture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetTextured"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetTexture /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::Solid()
{
  _TDispID _dispid(*this, OLETEXT("Solid"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::TwoColorGradient(Office_xp::MsoGradientStyle Style/*[in]*/, int Variant/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TwoColorGradient"), DISPID(16));
  TAutoArgs<2> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  _args[2] = Variant /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::UserPicture(BSTR PictureFile/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserPicture"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = PictureFile /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::UserTextured(BSTR TextureFile/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserTextured"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = TextureFile /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_BackColor(Powerpoint_xp::ColorFormat** BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorFormat**)BackColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorFormat* __fastcall
FillFormatDispT<T>::get_BackColor(void)
{
  Powerpoint_xp::ColorFormat* BackColor;
  this->get_BackColor((Powerpoint_xp::ColorFormat**)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::set_BackColor(Powerpoint_xp::ColorFormat* BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::ColorFormat*)BackColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_ForeColor(Powerpoint_xp::ColorFormat** ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorFormat**)ForeColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorFormat* __fastcall
FillFormatDispT<T>::get_ForeColor(void)
{
  Powerpoint_xp::ColorFormat* ForeColor;
  this->get_ForeColor((Powerpoint_xp::ColorFormat**)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::set_ForeColor(Powerpoint_xp::ColorFormat* ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::ColorFormat*)ForeColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_GradientColorType(Office_xp::MsoGradientColorType* GradientColorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GradientColorType"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)GradientColorType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoGradientColorType __fastcall
FillFormatDispT<T>::get_GradientColorType(void)
{
  Office_xp::MsoGradientColorType GradientColorType;
  this->get_GradientColorType((Office_xp::MsoGradientColorType*)&GradientColorType);
  return GradientColorType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_GradientDegree(float* GradientDegree/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GradientDegree"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GradientDegree /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
FillFormatDispT<T>::get_GradientDegree(void)
{
  float GradientDegree;
  this->get_GradientDegree((float*)&GradientDegree);
  return GradientDegree;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_GradientStyle(Office_xp::MsoGradientStyle* GradientStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GradientStyle"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)GradientStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoGradientStyle __fastcall
FillFormatDispT<T>::get_GradientStyle(void)
{
  Office_xp::MsoGradientStyle GradientStyle;
  this->get_GradientStyle((Office_xp::MsoGradientStyle*)&GradientStyle);
  return GradientStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_GradientVariant(int* GradientVariant/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GradientVariant"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GradientVariant /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
FillFormatDispT<T>::get_GradientVariant(void)
{
  int GradientVariant;
  this->get_GradientVariant((int*)&GradientVariant);
  return GradientVariant;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Pattern(Office_xp::MsoPatternType* Pattern/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pattern"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Pattern /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoPatternType __fastcall
FillFormatDispT<T>::get_Pattern(void)
{
  Office_xp::MsoPatternType Pattern;
  this->get_Pattern((Office_xp::MsoPatternType*)&Pattern);
  return Pattern;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_PresetGradientType(Office_xp::MsoPresetGradientType* PresetGradientType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetGradientType"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetGradientType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoPresetGradientType __fastcall
FillFormatDispT<T>::get_PresetGradientType(void)
{
  Office_xp::MsoPresetGradientType PresetGradientType;
  this->get_PresetGradientType((Office_xp::MsoPresetGradientType*)&PresetGradientType);
  return PresetGradientType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_PresetTexture(Office_xp::MsoPresetTexture* PresetTexture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetTexture"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetTexture /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoPresetTexture __fastcall
FillFormatDispT<T>::get_PresetTexture(void)
{
  Office_xp::MsoPresetTexture PresetTexture;
  this->get_PresetTexture((Office_xp::MsoPresetTexture*)&PresetTexture);
  return PresetTexture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_TextureName(BSTR* TextureName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextureName"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TextureName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FillFormatDispT<T>::get_TextureName(void)
{
  BSTR TextureName;
  this->get_TextureName((BSTR*)&TextureName);
  return TextureName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_TextureType(Office_xp::MsoTextureType* TextureType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextureType"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TextureType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTextureType __fastcall
FillFormatDispT<T>::get_TextureType(void)
{
  Office_xp::MsoTextureType TextureType;
  this->get_TextureType((Office_xp::MsoTextureType*)&TextureType);
  return TextureType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Transparency(float* Transparency/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Transparency /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
FillFormatDispT<T>::get_Transparency(void)
{
  float Transparency;
  this->get_Transparency((float*)&Transparency);
  return Transparency;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::set_Transparency(float Transparency/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Transparency /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Type(Office_xp::MsoFillType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoFillType __fastcall
FillFormatDispT<T>::get_Type(void)
{
  Office_xp::MsoFillType Type;
  this->get_Type((Office_xp::MsoFillType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
FillFormatDispT<T>::get_Visible(void)
{
  Office_xp::MsoTriState Visible;
  this->get_Visible((Office_xp::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::set_Visible(Office_xp::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  LineFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
LineFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
LineFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
LineFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_BackColor(Powerpoint_xp::ColorFormat** BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorFormat**)BackColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorFormat* __fastcall
LineFormatDispT<T>::get_BackColor(void)
{
  Powerpoint_xp::ColorFormat* BackColor;
  this->get_BackColor((Powerpoint_xp::ColorFormat**)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_BackColor(Powerpoint_xp::ColorFormat* BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::ColorFormat*)BackColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_BeginArrowheadLength(Office_xp::MsoArrowheadLength* BeginArrowheadLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadLength"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BeginArrowheadLength /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoArrowheadLength __fastcall
LineFormatDispT<T>::get_BeginArrowheadLength(void)
{
  Office_xp::MsoArrowheadLength BeginArrowheadLength;
  this->get_BeginArrowheadLength((Office_xp::MsoArrowheadLength*)&BeginArrowheadLength);
  return BeginArrowheadLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_BeginArrowheadLength(Office_xp::MsoArrowheadLength BeginArrowheadLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadLength"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)BeginArrowheadLength /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_BeginArrowheadStyle(Office_xp::MsoArrowheadStyle* BeginArrowheadStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadStyle"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BeginArrowheadStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoArrowheadStyle __fastcall
LineFormatDispT<T>::get_BeginArrowheadStyle(void)
{
  Office_xp::MsoArrowheadStyle BeginArrowheadStyle;
  this->get_BeginArrowheadStyle((Office_xp::MsoArrowheadStyle*)&BeginArrowheadStyle);
  return BeginArrowheadStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_BeginArrowheadStyle(Office_xp::MsoArrowheadStyle BeginArrowheadStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadStyle"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)BeginArrowheadStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_BeginArrowheadWidth(Office_xp::MsoArrowheadWidth* BeginArrowheadWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadWidth"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BeginArrowheadWidth /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoArrowheadWidth __fastcall
LineFormatDispT<T>::get_BeginArrowheadWidth(void)
{
  Office_xp::MsoArrowheadWidth BeginArrowheadWidth;
  this->get_BeginArrowheadWidth((Office_xp::MsoArrowheadWidth*)&BeginArrowheadWidth);
  return BeginArrowheadWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_BeginArrowheadWidth(Office_xp::MsoArrowheadWidth BeginArrowheadWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadWidth"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = (int)BeginArrowheadWidth /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_DashStyle(Office_xp::MsoLineDashStyle* DashStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DashStyle"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DashStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoLineDashStyle __fastcall
LineFormatDispT<T>::get_DashStyle(void)
{
  Office_xp::MsoLineDashStyle DashStyle;
  this->get_DashStyle((Office_xp::MsoLineDashStyle*)&DashStyle);
  return DashStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_DashStyle(Office_xp::MsoLineDashStyle DashStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DashStyle"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = (int)DashStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_EndArrowheadLength(Office_xp::MsoArrowheadLength* EndArrowheadLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadLength"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EndArrowheadLength /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoArrowheadLength __fastcall
LineFormatDispT<T>::get_EndArrowheadLength(void)
{
  Office_xp::MsoArrowheadLength EndArrowheadLength;
  this->get_EndArrowheadLength((Office_xp::MsoArrowheadLength*)&EndArrowheadLength);
  return EndArrowheadLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_EndArrowheadLength(Office_xp::MsoArrowheadLength EndArrowheadLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadLength"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)EndArrowheadLength /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_EndArrowheadStyle(Office_xp::MsoArrowheadStyle* EndArrowheadStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadStyle"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EndArrowheadStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoArrowheadStyle __fastcall
LineFormatDispT<T>::get_EndArrowheadStyle(void)
{
  Office_xp::MsoArrowheadStyle EndArrowheadStyle;
  this->get_EndArrowheadStyle((Office_xp::MsoArrowheadStyle*)&EndArrowheadStyle);
  return EndArrowheadStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_EndArrowheadStyle(Office_xp::MsoArrowheadStyle EndArrowheadStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadStyle"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)EndArrowheadStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_EndArrowheadWidth(Office_xp::MsoArrowheadWidth* EndArrowheadWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadWidth"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EndArrowheadWidth /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoArrowheadWidth __fastcall
LineFormatDispT<T>::get_EndArrowheadWidth(void)
{
  Office_xp::MsoArrowheadWidth EndArrowheadWidth;
  this->get_EndArrowheadWidth((Office_xp::MsoArrowheadWidth*)&EndArrowheadWidth);
  return EndArrowheadWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_EndArrowheadWidth(Office_xp::MsoArrowheadWidth EndArrowheadWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadWidth"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = (int)EndArrowheadWidth /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_ForeColor(Powerpoint_xp::ColorFormat** ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorFormat**)ForeColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorFormat* __fastcall
LineFormatDispT<T>::get_ForeColor(void)
{
  Powerpoint_xp::ColorFormat* ForeColor;
  this->get_ForeColor((Powerpoint_xp::ColorFormat**)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_ForeColor(Powerpoint_xp::ColorFormat* ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::ColorFormat*)ForeColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Pattern(Office_xp::MsoPatternType* Pattern/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pattern"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Pattern /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoPatternType __fastcall
LineFormatDispT<T>::get_Pattern(void)
{
  Office_xp::MsoPatternType Pattern;
  this->get_Pattern((Office_xp::MsoPatternType*)&Pattern);
  return Pattern;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Pattern(Office_xp::MsoPatternType Pattern/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pattern"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = (int)Pattern /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Style(Office_xp::MsoLineStyle* Style/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Style /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoLineStyle __fastcall
LineFormatDispT<T>::get_Style(void)
{
  Office_xp::MsoLineStyle Style;
  this->get_Style((Office_xp::MsoLineStyle*)&Style);
  return Style;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Style(Office_xp::MsoLineStyle Style/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Transparency(float* Transparency/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Transparency /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
LineFormatDispT<T>::get_Transparency(void)
{
  float Transparency;
  this->get_Transparency((float*)&Transparency);
  return Transparency;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Transparency(float Transparency/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Transparency /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
LineFormatDispT<T>::get_Visible(void)
{
  Office_xp::MsoTriState Visible;
  this->get_Visible((Office_xp::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Visible(Office_xp::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Weight(float* Weight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Weight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
LineFormatDispT<T>::get_Weight(void)
{
  float Weight;
  this->get_Weight((float*)&Weight);
  return Weight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Weight(float Weight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = Weight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_InsetPen(Office_xp::MsoTriState* InsetPen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsetPen"), DISPID(114));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)InsetPen /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
LineFormatDispT<T>::get_InsetPen(void)
{
  Office_xp::MsoTriState InsetPen;
  this->get_InsetPen((Office_xp::MsoTriState*)&InsetPen);
  return InsetPen;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_InsetPen(Office_xp::MsoTriState InsetPen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsetPen"), DISPID(114));
  TAutoArgs<1> _args;
  _args[1] = (int)InsetPen /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ShadowFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493480-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShadowFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShadowFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShadowFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::IncrementOffsetX(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementOffsetX"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::IncrementOffsetY(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementOffsetY"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_ForeColor(Powerpoint_xp::ColorFormat** ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorFormat**)ForeColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorFormat* __fastcall
ShadowFormatDispT<T>::get_ForeColor(void)
{
  Powerpoint_xp::ColorFormat* ForeColor;
  this->get_ForeColor((Powerpoint_xp::ColorFormat**)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_ForeColor(Powerpoint_xp::ColorFormat* ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::ColorFormat*)ForeColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Obscured(Office_xp::MsoTriState* Obscured/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Obscured"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Obscured /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShadowFormatDispT<T>::get_Obscured(void)
{
  Office_xp::MsoTriState Obscured;
  this->get_Obscured((Office_xp::MsoTriState*)&Obscured);
  return Obscured;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_Obscured(Office_xp::MsoTriState Obscured/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Obscured"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)Obscured /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_OffsetX(float* OffsetX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OffsetX"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OffsetX /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShadowFormatDispT<T>::get_OffsetX(void)
{
  float OffsetX;
  this->get_OffsetX((float*)&OffsetX);
  return OffsetX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_OffsetX(float OffsetX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OffsetX"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = OffsetX /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_OffsetY(float* OffsetY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OffsetY"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OffsetY /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShadowFormatDispT<T>::get_OffsetY(void)
{
  float OffsetY;
  this->get_OffsetY((float*)&OffsetY);
  return OffsetY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_OffsetY(float OffsetY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OffsetY"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = OffsetY /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Transparency(float* Transparency/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Transparency /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShadowFormatDispT<T>::get_Transparency(void)
{
  float Transparency;
  this->get_Transparency((float*)&Transparency);
  return Transparency;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_Transparency(float Transparency/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = Transparency /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Type(Office_xp::MsoShadowType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoShadowType __fastcall
ShadowFormatDispT<T>::get_Type(void)
{
  Office_xp::MsoShadowType Type;
  this->get_Type((Office_xp::MsoShadowType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_Type(Office_xp::MsoShadowType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ShadowFormatDispT<T>::get_Visible(void)
{
  Office_xp::MsoTriState Visible;
  this->get_Visible((Office_xp::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_Visible(Office_xp::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ConnectorFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493481-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ConnectorFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ConnectorFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ConnectorFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::BeginConnect(Powerpoint_xp::Shape* ConnectedShape/*[in]*/, 
                                      int ConnectionSite/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginConnect"), DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::Shape*)ConnectedShape /*[VT_USERDEFINED:1]*/;
  _args[2] = ConnectionSite /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::BeginDisconnect()
{
  _TDispID _dispid(*this, OLETEXT("BeginDisconnect"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::EndConnect(Powerpoint_xp::Shape* ConnectedShape/*[in]*/, 
                                    int ConnectionSite/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndConnect"), DISPID(12));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::Shape*)ConnectedShape /*[VT_USERDEFINED:1]*/;
  _args[2] = ConnectionSite /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::EndDisconnect()
{
  _TDispID _dispid(*this, OLETEXT("EndDisconnect"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_BeginConnected(Office_xp::MsoTriState* BeginConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginConnected"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BeginConnected /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ConnectorFormatDispT<T>::get_BeginConnected(void)
{
  Office_xp::MsoTriState BeginConnected;
  this->get_BeginConnected((Office_xp::MsoTriState*)&BeginConnected);
  return BeginConnected;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_BeginConnectedShape(Powerpoint_xp::Shape** BeginConnectedShape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginConnectedShape"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)BeginConnectedShape /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ConnectorFormatDispT<T>::get_BeginConnectedShape(void)
{
  Powerpoint_xp::Shape* BeginConnectedShape;
  this->get_BeginConnectedShape((Powerpoint_xp::Shape**)&BeginConnectedShape);
  return BeginConnectedShape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_BeginConnectionSite(int* BeginConnectionSite/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginConnectionSite"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BeginConnectionSite /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ConnectorFormatDispT<T>::get_BeginConnectionSite(void)
{
  int BeginConnectionSite;
  this->get_BeginConnectionSite((int*)&BeginConnectionSite);
  return BeginConnectionSite;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_EndConnected(Office_xp::MsoTriState* EndConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndConnected"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EndConnected /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ConnectorFormatDispT<T>::get_EndConnected(void)
{
  Office_xp::MsoTriState EndConnected;
  this->get_EndConnected((Office_xp::MsoTriState*)&EndConnected);
  return EndConnected;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_EndConnectedShape(Powerpoint_xp::Shape** EndConnectedShape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndConnectedShape"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)EndConnectedShape /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
ConnectorFormatDispT<T>::get_EndConnectedShape(void)
{
  Powerpoint_xp::Shape* EndConnectedShape;
  this->get_EndConnectedShape((Powerpoint_xp::Shape**)&EndConnectedShape);
  return EndConnectedShape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_EndConnectionSite(int* EndConnectionSite/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndConnectionSite"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(EndConnectionSite /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ConnectorFormatDispT<T>::get_EndConnectionSite(void)
{
  int EndConnectionSite;
  this->get_EndConnectionSite((int*)&EndConnectionSite);
  return EndConnectionSite;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_Type(Office_xp::MsoConnectorType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoConnectorType __fastcall
ConnectorFormatDispT<T>::get_Type(void)
{
  Office_xp::MsoConnectorType Type;
  this->get_Type((Office_xp::MsoConnectorType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::set_Type(Office_xp::MsoConnectorType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  TextEffectFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493482-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextEffectFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TextEffectFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextEffectFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::ToggleVerticalText()
{
  _TDispID _dispid(*this, OLETEXT("ToggleVerticalText"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Alignment(Office_xp::MsoTextEffectAlignment* Alignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Alignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTextEffectAlignment __fastcall
TextEffectFormatDispT<T>::get_Alignment(void)
{
  Office_xp::MsoTextEffectAlignment Alignment;
  this->get_Alignment((Office_xp::MsoTextEffectAlignment*)&Alignment);
  return Alignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_Alignment(Office_xp::MsoTextEffectAlignment Alignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (int)Alignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_FontBold(Office_xp::MsoTriState* FontBold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FontBold /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_FontBold(void)
{
  Office_xp::MsoTriState FontBold;
  this->get_FontBold((Office_xp::MsoTriState*)&FontBold);
  return FontBold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_FontBold(Office_xp::MsoTriState FontBold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)FontBold /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_FontItalic(Office_xp::MsoTriState* FontItalic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FontItalic /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_FontItalic(void)
{
  Office_xp::MsoTriState FontItalic;
  this->get_FontItalic((Office_xp::MsoTriState*)&FontItalic);
  return FontItalic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_FontItalic(Office_xp::MsoTriState FontItalic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)FontItalic /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
TextEffectFormatDispT<T>::get_FontName(void)
{
  BSTR FontName;
  this->get_FontName((BSTR*)&FontName);
  return FontName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = FontName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_FontSize(float* FontSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontSize /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextEffectFormatDispT<T>::get_FontSize(void)
{
  float FontSize;
  this->get_FontSize((float*)&FontSize);
  return FontSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_FontSize(float FontSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = FontSize /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_KernedPairs(Office_xp::MsoTriState* KernedPairs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KernedPairs"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)KernedPairs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_KernedPairs(void)
{
  Office_xp::MsoTriState KernedPairs;
  this->get_KernedPairs((Office_xp::MsoTriState*)&KernedPairs);
  return KernedPairs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_KernedPairs(Office_xp::MsoTriState KernedPairs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KernedPairs"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)KernedPairs /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_NormalizedHeight(Office_xp::MsoTriState* NormalizedHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NormalizedHeight"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)NormalizedHeight /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_NormalizedHeight(void)
{
  Office_xp::MsoTriState NormalizedHeight;
  this->get_NormalizedHeight((Office_xp::MsoTriState*)&NormalizedHeight);
  return NormalizedHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_NormalizedHeight(Office_xp::MsoTriState NormalizedHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NormalizedHeight"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)NormalizedHeight /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_PresetShape(Office_xp::MsoPresetTextEffectShape* PresetShape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetShape"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetShape /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoPresetTextEffectShape __fastcall
TextEffectFormatDispT<T>::get_PresetShape(void)
{
  Office_xp::MsoPresetTextEffectShape PresetShape;
  this->get_PresetShape((Office_xp::MsoPresetTextEffectShape*)&PresetShape);
  return PresetShape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_PresetShape(Office_xp::MsoPresetTextEffectShape PresetShape/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetShape"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetShape /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_PresetTextEffect(Office_xp::MsoPresetTextEffect* Preset/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetTextEffect"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Preset /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoPresetTextEffect __fastcall
TextEffectFormatDispT<T>::get_PresetTextEffect(void)
{
  Office_xp::MsoPresetTextEffect Preset;
  this->get_PresetTextEffect((Office_xp::MsoPresetTextEffect*)&Preset);
  return Preset;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_PresetTextEffect(Office_xp::MsoPresetTextEffect Preset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetTextEffect"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = (int)Preset /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_RotatedChars(Office_xp::MsoTriState* RotatedChars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotatedChars"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RotatedChars /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_RotatedChars(void)
{
  Office_xp::MsoTriState RotatedChars;
  this->get_RotatedChars((Office_xp::MsoTriState*)&RotatedChars);
  return RotatedChars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_RotatedChars(Office_xp::MsoTriState RotatedChars/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotatedChars"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = (int)RotatedChars /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Text(BSTR* Text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
TextEffectFormatDispT<T>::get_Text(void)
{
  BSTR Text;
  this->get_Text((BSTR*)&Text);
  return Text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_Text(BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Tracking(float* Tracking/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tracking"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Tracking /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextEffectFormatDispT<T>::get_Tracking(void)
{
  float Tracking;
  this->get_Tracking((float*)&Tracking);
  return Tracking;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_Tracking(float Tracking/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tracking"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Tracking /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ThreeDFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493483-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ThreeDFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ThreeDFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ThreeDFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::IncrementRotationX(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementRotationX"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::IncrementRotationY(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementRotationY"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::ResetRotation()
{
  _TDispID _dispid(*this, OLETEXT("ResetRotation"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::SetThreeDFormat(Office_xp::MsoPresetThreeDFormat PresetThreeDFormat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetThreeDFormat"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetThreeDFormat /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::SetExtrusionDirection(Office_xp::MsoPresetExtrusionDirection PresetExtrusionDirection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetExtrusionDirection"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetExtrusionDirection /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Depth(float* Depth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Depth"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Depth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ThreeDFormatDispT<T>::get_Depth(void)
{
  float Depth;
  this->get_Depth((float*)&Depth);
  return Depth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_Depth(float Depth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Depth"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = Depth /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_ExtrusionColor(Powerpoint_xp::ColorFormat** ExtrusionColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtrusionColor"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorFormat**)ExtrusionColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorFormat* __fastcall
ThreeDFormatDispT<T>::get_ExtrusionColor(void)
{
  Powerpoint_xp::ColorFormat* ExtrusionColor;
  this->get_ExtrusionColor((Powerpoint_xp::ColorFormat**)&ExtrusionColor);
  return ExtrusionColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_ExtrusionColorType(Office_xp::MsoExtrusionColorType* ExtrusionColorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtrusionColorType"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ExtrusionColorType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoExtrusionColorType __fastcall
ThreeDFormatDispT<T>::get_ExtrusionColorType(void)
{
  Office_xp::MsoExtrusionColorType ExtrusionColorType;
  this->get_ExtrusionColorType((Office_xp::MsoExtrusionColorType*)&ExtrusionColorType);
  return ExtrusionColorType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_ExtrusionColorType(Office_xp::MsoExtrusionColorType ExtrusionColorType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtrusionColorType"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)ExtrusionColorType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Perspective(Office_xp::MsoTriState* Perspective/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Perspective"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Perspective /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ThreeDFormatDispT<T>::get_Perspective(void)
{
  Office_xp::MsoTriState Perspective;
  this->get_Perspective((Office_xp::MsoTriState*)&Perspective);
  return Perspective;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_Perspective(Office_xp::MsoTriState Perspective/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Perspective"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = (int)Perspective /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetExtrusionDirection(Office_xp::MsoPresetExtrusionDirection* PresetExtrusionDirection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetExtrusionDirection"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetExtrusionDirection /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoPresetExtrusionDirection __fastcall
ThreeDFormatDispT<T>::get_PresetExtrusionDirection(void)
{
  Office_xp::MsoPresetExtrusionDirection PresetExtrusionDirection;
  this->get_PresetExtrusionDirection((Office_xp::MsoPresetExtrusionDirection*)&PresetExtrusionDirection);
  return PresetExtrusionDirection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetLightingDirection(Office_xp::MsoPresetLightingDirection* PresetLightingDirection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetLightingDirection"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetLightingDirection /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoPresetLightingDirection __fastcall
ThreeDFormatDispT<T>::get_PresetLightingDirection(void)
{
  Office_xp::MsoPresetLightingDirection PresetLightingDirection;
  this->get_PresetLightingDirection((Office_xp::MsoPresetLightingDirection*)&PresetLightingDirection);
  return PresetLightingDirection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_PresetLightingDirection(Office_xp::MsoPresetLightingDirection PresetLightingDirection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetLightingDirection"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetLightingDirection /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetLightingSoftness(Office_xp::MsoPresetLightingSoftness* PresetLightingSoftness/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetLightingSoftness"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetLightingSoftness /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoPresetLightingSoftness __fastcall
ThreeDFormatDispT<T>::get_PresetLightingSoftness(void)
{
  Office_xp::MsoPresetLightingSoftness PresetLightingSoftness;
  this->get_PresetLightingSoftness((Office_xp::MsoPresetLightingSoftness*)&PresetLightingSoftness);
  return PresetLightingSoftness;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_PresetLightingSoftness(Office_xp::MsoPresetLightingSoftness PresetLightingSoftness/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetLightingSoftness"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetLightingSoftness /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetMaterial(Office_xp::MsoPresetMaterial* PresetMaterial/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetMaterial"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetMaterial /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoPresetMaterial __fastcall
ThreeDFormatDispT<T>::get_PresetMaterial(void)
{
  Office_xp::MsoPresetMaterial PresetMaterial;
  this->get_PresetMaterial((Office_xp::MsoPresetMaterial*)&PresetMaterial);
  return PresetMaterial;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_PresetMaterial(Office_xp::MsoPresetMaterial PresetMaterial/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetMaterial"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetMaterial /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetThreeDFormat(Office_xp::MsoPresetThreeDFormat* PresetThreeDFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetThreeDFormat"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetThreeDFormat /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoPresetThreeDFormat __fastcall
ThreeDFormatDispT<T>::get_PresetThreeDFormat(void)
{
  Office_xp::MsoPresetThreeDFormat PresetThreeDFormat;
  this->get_PresetThreeDFormat((Office_xp::MsoPresetThreeDFormat*)&PresetThreeDFormat);
  return PresetThreeDFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_RotationX(float* RotationX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotationX"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RotationX /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ThreeDFormatDispT<T>::get_RotationX(void)
{
  float RotationX;
  this->get_RotationX((float*)&RotationX);
  return RotationX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_RotationX(float RotationX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotationX"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = RotationX /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_RotationY(float* RotationY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotationY"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RotationY /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ThreeDFormatDispT<T>::get_RotationY(void)
{
  float RotationY;
  this->get_RotationY((float*)&RotationY);
  return RotationY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_RotationY(float RotationY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotationY"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = RotationY /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ThreeDFormatDispT<T>::get_Visible(void)
{
  Office_xp::MsoTriState Visible;
  this->get_Visible((Office_xp::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_Visible(Office_xp::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  TextFrame
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493484-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextFrameDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TextFrameDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextFrameDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_MarginBottom(float* MarginBottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginBottom"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MarginBottom /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextFrameDispT<T>::get_MarginBottom(void)
{
  float MarginBottom;
  this->get_MarginBottom((float*)&MarginBottom);
  return MarginBottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_MarginBottom(float MarginBottom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginBottom"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = MarginBottom /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_MarginLeft(float* MarginLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginLeft"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MarginLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextFrameDispT<T>::get_MarginLeft(void)
{
  float MarginLeft;
  this->get_MarginLeft((float*)&MarginLeft);
  return MarginLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_MarginLeft(float MarginLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginLeft"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = MarginLeft /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_MarginRight(float* MarginRight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginRight"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MarginRight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextFrameDispT<T>::get_MarginRight(void)
{
  float MarginRight;
  this->get_MarginRight((float*)&MarginRight);
  return MarginRight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_MarginRight(float MarginRight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginRight"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = MarginRight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_MarginTop(float* MarginTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginTop"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MarginTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextFrameDispT<T>::get_MarginTop(void)
{
  float MarginTop;
  this->get_MarginTop((float*)&MarginTop);
  return MarginTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_MarginTop(float MarginTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginTop"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = MarginTop /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_Orientation(Office_xp::MsoTextOrientation* Orientation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Orientation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTextOrientation __fastcall
TextFrameDispT<T>::get_Orientation(void)
{
  Office_xp::MsoTextOrientation Orientation;
  this->get_Orientation((Office_xp::MsoTextOrientation*)&Orientation);
  return Orientation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_Orientation(Office_xp::MsoTextOrientation Orientation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = (int)Orientation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_HasText(Office_xp::MsoTriState* HasText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasText"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HasText /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
TextFrameDispT<T>::get_HasText(void)
{
  Office_xp::MsoTriState HasText;
  this->get_HasText((Office_xp::MsoTriState*)&HasText);
  return HasText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_TextRange(Powerpoint_xp::TextRange** TextRange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextRange"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextRange**)TextRange /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::TextRange* __fastcall
TextFrameDispT<T>::get_TextRange(void)
{
  Powerpoint_xp::TextRange* TextRange;
  this->get_TextRange((Powerpoint_xp::TextRange**)&TextRange);
  return TextRange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_Ruler(Powerpoint_xp::Ruler** Ruler/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ruler"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Ruler**)Ruler /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Ruler* __fastcall
TextFrameDispT<T>::get_Ruler(void)
{
  Powerpoint_xp::Ruler* Ruler;
  this->get_Ruler((Powerpoint_xp::Ruler**)&Ruler);
  return Ruler;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_HorizontalAnchor(Office_xp::MsoHorizontalAnchor* HorizontalAnchor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalAnchor"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HorizontalAnchor /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoHorizontalAnchor __fastcall
TextFrameDispT<T>::get_HorizontalAnchor(void)
{
  Office_xp::MsoHorizontalAnchor HorizontalAnchor;
  this->get_HorizontalAnchor((Office_xp::MsoHorizontalAnchor*)&HorizontalAnchor);
  return HorizontalAnchor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_HorizontalAnchor(Office_xp::MsoHorizontalAnchor HorizontalAnchor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalAnchor"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)HorizontalAnchor /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_VerticalAnchor(Office_xp::MsoVerticalAnchor* VerticalAnchor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalAnchor"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)VerticalAnchor /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoVerticalAnchor __fastcall
TextFrameDispT<T>::get_VerticalAnchor(void)
{
  Office_xp::MsoVerticalAnchor VerticalAnchor;
  this->get_VerticalAnchor((Office_xp::MsoVerticalAnchor*)&VerticalAnchor);
  return VerticalAnchor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_VerticalAnchor(Office_xp::MsoVerticalAnchor VerticalAnchor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalAnchor"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)VerticalAnchor /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_AutoSize(Powerpoint_xp::PpAutoSize* AutoSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoSize /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpAutoSize __fastcall
TextFrameDispT<T>::get_AutoSize(void)
{
  Powerpoint_xp::PpAutoSize AutoSize;
  this->get_AutoSize((Powerpoint_xp::PpAutoSize*)&AutoSize);
  return AutoSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_AutoSize(Powerpoint_xp::PpAutoSize AutoSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoSize /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_WordWrap(Office_xp::MsoTriState* WordWrap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)WordWrap /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
TextFrameDispT<T>::get_WordWrap(void)
{
  Office_xp::MsoTriState WordWrap;
  this->get_WordWrap((Office_xp::MsoTriState*)&WordWrap);
  return WordWrap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_WordWrap(Office_xp::MsoTriState WordWrap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)WordWrap /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::DeleteText()
{
  _TDispID _dispid(*this, OLETEXT("DeleteText"), DISPID(2010));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  CalloutFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493485-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CalloutFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CalloutFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CalloutFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::AutomaticLength()
{
  _TDispID _dispid(*this, OLETEXT("AutomaticLength"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::CustomDrop(float Drop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomDrop"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Drop /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::CustomLength(float Length/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomLength"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Length /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::PresetDrop(Office_xp::MsoCalloutDropType DropType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetDrop"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)DropType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Accent(Office_xp::MsoTriState* Accent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accent"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Accent /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
CalloutFormatDispT<T>::get_Accent(void)
{
  Office_xp::MsoTriState Accent;
  this->get_Accent((Office_xp::MsoTriState*)&Accent);
  return Accent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Accent(Office_xp::MsoTriState Accent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accent"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (int)Accent /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Angle(Office_xp::MsoCalloutAngleType* Angle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Angle"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Angle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoCalloutAngleType __fastcall
CalloutFormatDispT<T>::get_Angle(void)
{
  Office_xp::MsoCalloutAngleType Angle;
  this->get_Angle((Office_xp::MsoCalloutAngleType*)&Angle);
  return Angle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Angle(Office_xp::MsoCalloutAngleType Angle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Angle"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)Angle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_AutoAttach(Office_xp::MsoTriState* AutoAttach/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoAttach"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoAttach /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
CalloutFormatDispT<T>::get_AutoAttach(void)
{
  Office_xp::MsoTriState AutoAttach;
  this->get_AutoAttach((Office_xp::MsoTriState*)&AutoAttach);
  return AutoAttach;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_AutoAttach(Office_xp::MsoTriState AutoAttach/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoAttach"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoAttach /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_AutoLength(Office_xp::MsoTriState* AutoLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLength"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoLength /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
CalloutFormatDispT<T>::get_AutoLength(void)
{
  Office_xp::MsoTriState AutoLength;
  this->get_AutoLength((Office_xp::MsoTriState*)&AutoLength);
  return AutoLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Border(Office_xp::MsoTriState* Border/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Border /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
CalloutFormatDispT<T>::get_Border(void)
{
  Office_xp::MsoTriState Border;
  this->get_Border((Office_xp::MsoTriState*)&Border);
  return Border;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Border(Office_xp::MsoTriState Border/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = (int)Border /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Drop(float* Drop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Drop"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Drop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
CalloutFormatDispT<T>::get_Drop(void)
{
  float Drop;
  this->get_Drop((float*)&Drop);
  return Drop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_DropType(Office_xp::MsoCalloutDropType* DropType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropType"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DropType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoCalloutDropType __fastcall
CalloutFormatDispT<T>::get_DropType(void)
{
  Office_xp::MsoCalloutDropType DropType;
  this->get_DropType((Office_xp::MsoCalloutDropType*)&DropType);
  return DropType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Gap(float* Gap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Gap"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Gap /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
CalloutFormatDispT<T>::get_Gap(void)
{
  float Gap;
  this->get_Gap((float*)&Gap);
  return Gap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Gap(float Gap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Gap"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = Gap /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Length(float* Length/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Length"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Length /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
CalloutFormatDispT<T>::get_Length(void)
{
  float Length;
  this->get_Length((float*)&Length);
  return Length;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Type(Office_xp::MsoCalloutType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoCalloutType __fastcall
CalloutFormatDispT<T>::get_Type(void)
{
  Office_xp::MsoCalloutType Type;
  this->get_Type((Office_xp::MsoCalloutType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Type(Office_xp::MsoCalloutType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ShapeNodes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493486-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeNodesDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapeNodesDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeNodesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get_Count(int* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeNodesDispT<T>::get_Count(void)
{
  int Count;
  this->get_Count((int*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::Item(VARIANT Index/*[in]*/, Powerpoint_xp::ShapeNode** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ShapeNode**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::ShapeNode* __fastcall
ShapeNodesDispT<T>::Item(VARIANT Index/*[in]*/)
{
  Powerpoint_xp::ShapeNode* Item;
  this->Item(Index, (Powerpoint_xp::ShapeNode**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ShapeNodesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::Delete(int Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::Insert(int Index/*[in]*/, Office_xp::MsoSegmentType SegmentType/*[in]*/, 
                           Office_xp::MsoEditingType EditingType/*[in]*/, float X1/*[in]*/, 
                           float Y1/*[in]*/, float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/, 
                           float X3/*[in,def,opt]*/, float Y3/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Insert"), DISPID(12));
  TAutoArgs<9> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  _args[2] = (int)SegmentType /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)EditingType /*[VT_USERDEFINED:0]*/;
  _args[4] = X1 /*[VT_R4:0]*/;
  _args[5] = Y1 /*[VT_R4:0]*/;
  _args[6] = X2 /*[VT_R4:0]*/;
  _args[7] = Y2 /*[VT_R4:0]*/;
  _args[8] = X3 /*[VT_R4:0]*/;
  _args[9] = Y3 /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::SetEditingType(int Index/*[in]*/, Office_xp::MsoEditingType EditingType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEditingType"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  _args[2] = (int)EditingType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::SetPosition(int Index/*[in]*/, float X1/*[in]*/, float Y1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPosition"), DISPID(14));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  _args[2] = X1 /*[VT_R4:0]*/;
  _args[3] = Y1 /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::SetSegmentType(int Index/*[in]*/, Office_xp::MsoSegmentType SegmentType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSegmentType"), DISPID(15));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  _args[2] = (int)SegmentType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ShapeNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493487-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeNodeDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapeNodeDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeNodeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_EditingType(Office_xp::MsoEditingType* EditingType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditingType"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EditingType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoEditingType __fastcall
ShapeNodeDispT<T>::get_EditingType(void)
{
  Office_xp::MsoEditingType EditingType;
  this->get_EditingType((Office_xp::MsoEditingType*)&EditingType);
  return EditingType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_Points(VARIANT* Points/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Points"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Points /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ShapeNodeDispT<T>::get_Points(void)
{
  VARIANT Points;
  this->get_Points((VARIANT*)&Points);
  return Points;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_SegmentType(Office_xp::MsoSegmentType* SegmentType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SegmentType"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SegmentType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoSegmentType __fastcall
ShapeNodeDispT<T>::get_SegmentType(void)
{
  Office_xp::MsoSegmentType SegmentType;
  this->get_SegmentType((Office_xp::MsoSegmentType*)&SegmentType);
  return SegmentType;
}

// *********************************************************************//
// DispIntf:  OLEFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493488-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OLEFormatDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
OLEFormatDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OLEFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
OLEFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OLEFormatDispT<T>::get_ObjectVerbs(Powerpoint_xp::ObjectVerbs** ObjectVerbs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectVerbs"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ObjectVerbs**)ObjectVerbs /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ObjectVerbs* __fastcall
OLEFormatDispT<T>::get_ObjectVerbs(void)
{
  Powerpoint_xp::ObjectVerbs* ObjectVerbs;
  this->get_ObjectVerbs((Powerpoint_xp::ObjectVerbs**)&ObjectVerbs);
  return ObjectVerbs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OLEFormatDispT<T>::get_Object(LPDISPATCH* Object/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Object"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Object /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
OLEFormatDispT<T>::get_Object(void)
{
  LPDISPATCH Object;
  this->get_Object((LPDISPATCH*)&Object);
  return Object;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OLEFormatDispT<T>::get_ProgID(BSTR* ProgID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProgID"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ProgID /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
OLEFormatDispT<T>::get_ProgID(void)
{
  BSTR ProgID;
  this->get_ProgID((BSTR*)&ProgID);
  return ProgID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OLEFormatDispT<T>::get_FollowColors(Powerpoint_xp::PpFollowColors* FollowColors/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FollowColors"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FollowColors /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpFollowColors __fastcall
OLEFormatDispT<T>::get_FollowColors(void)
{
  Powerpoint_xp::PpFollowColors FollowColors;
  this->get_FollowColors((Powerpoint_xp::PpFollowColors*)&FollowColors);
  return FollowColors;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OLEFormatDispT<T>::set_FollowColors(Powerpoint_xp::PpFollowColors FollowColors/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FollowColors"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)FollowColors /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OLEFormatDispT<T>::DoVerb(int Index/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoVerb"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OLEFormatDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(2008));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  LinkFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493489-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LinkFormatDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
LinkFormatDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LinkFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
LinkFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LinkFormatDispT<T>::get_SourceFullName(BSTR* SourceFullName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceFullName"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SourceFullName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
LinkFormatDispT<T>::get_SourceFullName(void)
{
  BSTR SourceFullName;
  this->get_SourceFullName((BSTR*)&SourceFullName);
  return SourceFullName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LinkFormatDispT<T>::set_SourceFullName(BSTR SourceFullName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceFullName"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = SourceFullName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LinkFormatDispT<T>::get_AutoUpdate(Powerpoint_xp::PpUpdateOption* AutoUpdate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoUpdate"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoUpdate /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpUpdateOption __fastcall
LinkFormatDispT<T>::get_AutoUpdate(void)
{
  Powerpoint_xp::PpUpdateOption AutoUpdate;
  this->get_AutoUpdate((Powerpoint_xp::PpUpdateOption*)&AutoUpdate);
  return AutoUpdate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LinkFormatDispT<T>::set_AutoUpdate(Powerpoint_xp::PpUpdateOption AutoUpdate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoUpdate"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoUpdate /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LinkFormatDispT<T>::Update()
{
  _TDispID _dispid(*this, OLETEXT("Update"), DISPID(2005));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  ObjectVerbs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ObjectVerbsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
ObjectVerbsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ObjectVerbsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ObjectVerbsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ObjectVerbsDispT<T>::Item(int Index/*[in]*/, BSTR* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(Item /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ObjectVerbsDispT<T>::Item(int Index/*[in]*/)
{
  BSTR Item;
  this->Item(Index, (BSTR*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ObjectVerbsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ObjectVerbsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ObjectVerbsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ObjectVerbsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ObjectVerbsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ObjectVerbsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  AnimationSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
AnimationSettingsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AnimationSettingsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_DimColor(Powerpoint_xp::ColorFormat** DimColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DimColor"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorFormat**)DimColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorFormat* __fastcall
AnimationSettingsDispT<T>::get_DimColor(void)
{
  Powerpoint_xp::ColorFormat* DimColor;
  this->get_DimColor((Powerpoint_xp::ColorFormat**)&DimColor);
  return DimColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_SoundEffect(Powerpoint_xp::SoundEffect** SoundEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SoundEffect"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SoundEffect**)SoundEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::SoundEffect* __fastcall
AnimationSettingsDispT<T>::get_SoundEffect(void)
{
  Powerpoint_xp::SoundEffect* SoundEffect;
  this->get_SoundEffect((Powerpoint_xp::SoundEffect**)&SoundEffect);
  return SoundEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_EntryEffect(Powerpoint_xp::PpEntryEffect* EntryEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EntryEffect"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EntryEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpEntryEffect __fastcall
AnimationSettingsDispT<T>::get_EntryEffect(void)
{
  Powerpoint_xp::PpEntryEffect EntryEffect;
  this->get_EntryEffect((Powerpoint_xp::PpEntryEffect*)&EntryEffect);
  return EntryEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_EntryEffect(Powerpoint_xp::PpEntryEffect EntryEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EntryEffect"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)EntryEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_AfterEffect(Powerpoint_xp::PpAfterEffect* AfterEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterEffect"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AfterEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpAfterEffect __fastcall
AnimationSettingsDispT<T>::get_AfterEffect(void)
{
  Powerpoint_xp::PpAfterEffect AfterEffect;
  this->get_AfterEffect((Powerpoint_xp::PpAfterEffect*)&AfterEffect);
  return AfterEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_AfterEffect(Powerpoint_xp::PpAfterEffect AfterEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterEffect"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)AfterEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_AnimationOrder(int* AnimationOrder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimationOrder"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AnimationOrder /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
AnimationSettingsDispT<T>::get_AnimationOrder(void)
{
  int AnimationOrder;
  this->get_AnimationOrder((int*)&AnimationOrder);
  return AnimationOrder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_AnimationOrder(int AnimationOrder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimationOrder"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = AnimationOrder /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_AdvanceMode(Powerpoint_xp::PpAdvanceMode* AdvanceMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceMode"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AdvanceMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpAdvanceMode __fastcall
AnimationSettingsDispT<T>::get_AdvanceMode(void)
{
  Powerpoint_xp::PpAdvanceMode AdvanceMode;
  this->get_AdvanceMode((Powerpoint_xp::PpAdvanceMode*)&AdvanceMode);
  return AdvanceMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_AdvanceMode(Powerpoint_xp::PpAdvanceMode AdvanceMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceMode"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)AdvanceMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_AdvanceTime(float* AdvanceTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceTime"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AdvanceTime /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
AnimationSettingsDispT<T>::get_AdvanceTime(void)
{
  float AdvanceTime;
  this->get_AdvanceTime((float*)&AdvanceTime);
  return AdvanceTime;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_AdvanceTime(float AdvanceTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceTime"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = AdvanceTime /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_PlaySettings(Powerpoint_xp::PlaySettings** PlaySettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlaySettings"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PlaySettings**)PlaySettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PlaySettings* __fastcall
AnimationSettingsDispT<T>::get_PlaySettings(void)
{
  Powerpoint_xp::PlaySettings* PlaySettings;
  this->get_PlaySettings((Powerpoint_xp::PlaySettings**)&PlaySettings);
  return PlaySettings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_TextLevelEffect(Powerpoint_xp::PpTextLevelEffect* TextLevelEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextLevelEffect"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TextLevelEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpTextLevelEffect __fastcall
AnimationSettingsDispT<T>::get_TextLevelEffect(void)
{
  Powerpoint_xp::PpTextLevelEffect TextLevelEffect;
  this->get_TextLevelEffect((Powerpoint_xp::PpTextLevelEffect*)&TextLevelEffect);
  return TextLevelEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_TextLevelEffect(Powerpoint_xp::PpTextLevelEffect TextLevelEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextLevelEffect"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = (int)TextLevelEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_TextUnitEffect(Powerpoint_xp::PpTextUnitEffect* TextUnitEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextUnitEffect"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TextUnitEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpTextUnitEffect __fastcall
AnimationSettingsDispT<T>::get_TextUnitEffect(void)
{
  Powerpoint_xp::PpTextUnitEffect TextUnitEffect;
  this->get_TextUnitEffect((Powerpoint_xp::PpTextUnitEffect*)&TextUnitEffect);
  return TextUnitEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_TextUnitEffect(Powerpoint_xp::PpTextUnitEffect TextUnitEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextUnitEffect"), DISPID(2012));
  TAutoArgs<1> _args;
  _args[1] = (int)TextUnitEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_Animate(Office_xp::MsoTriState* Animate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Animate"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Animate /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
AnimationSettingsDispT<T>::get_Animate(void)
{
  Office_xp::MsoTriState Animate;
  this->get_Animate((Office_xp::MsoTriState*)&Animate);
  return Animate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_Animate(Office_xp::MsoTriState Animate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Animate"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = (int)Animate /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_AnimateBackground(Office_xp::MsoTriState* AnimateBackground/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimateBackground"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AnimateBackground /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
AnimationSettingsDispT<T>::get_AnimateBackground(void)
{
  Office_xp::MsoTriState AnimateBackground;
  this->get_AnimateBackground((Office_xp::MsoTriState*)&AnimateBackground);
  return AnimateBackground;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_AnimateBackground(Office_xp::MsoTriState AnimateBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimateBackground"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = (int)AnimateBackground /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_AnimateTextInReverse(Office_xp::MsoTriState* AnimateTextInReverse/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimateTextInReverse"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AnimateTextInReverse /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
AnimationSettingsDispT<T>::get_AnimateTextInReverse(void)
{
  Office_xp::MsoTriState AnimateTextInReverse;
  this->get_AnimateTextInReverse((Office_xp::MsoTriState*)&AnimateTextInReverse);
  return AnimateTextInReverse;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_AnimateTextInReverse(Office_xp::MsoTriState AnimateTextInReverse/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimateTextInReverse"), DISPID(2015));
  TAutoArgs<1> _args;
  _args[1] = (int)AnimateTextInReverse /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_ChartUnitEffect(Powerpoint_xp::PpChartUnitEffect* ChartUnitEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChartUnitEffect"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ChartUnitEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpChartUnitEffect __fastcall
AnimationSettingsDispT<T>::get_ChartUnitEffect(void)
{
  Powerpoint_xp::PpChartUnitEffect ChartUnitEffect;
  this->get_ChartUnitEffect((Powerpoint_xp::PpChartUnitEffect*)&ChartUnitEffect);
  return ChartUnitEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_ChartUnitEffect(Powerpoint_xp::PpChartUnitEffect ChartUnitEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChartUnitEffect"), DISPID(2016));
  TAutoArgs<1> _args;
  _args[1] = (int)ChartUnitEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ActionSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
ActionSettingsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ActionSettingsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingsDispT<T>::Item(Powerpoint_xp::PpMouseActivation Index/*[in]*/, 
                             Powerpoint_xp::ActionSetting** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = (int)Index /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ActionSetting**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::ActionSetting* __fastcall
ActionSettingsDispT<T>::Item(Powerpoint_xp::PpMouseActivation Index/*[in]*/)
{
  Powerpoint_xp::ActionSetting* Item;
  this->Item(Index, (Powerpoint_xp::ActionSetting**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ActionSettingsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ActionSettingsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ActionSettingsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  ActionSetting
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
ActionSettingDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ActionSettingDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_Action(Powerpoint_xp::PpActionType* Action/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Action"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Action /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpActionType __fastcall
ActionSettingDispT<T>::get_Action(void)
{
  Powerpoint_xp::PpActionType Action;
  this->get_Action((Powerpoint_xp::PpActionType*)&Action);
  return Action;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::set_Action(Powerpoint_xp::PpActionType Action/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Action"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)Action /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_ActionVerb(BSTR* ActionVerb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActionVerb"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ActionVerb /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ActionSettingDispT<T>::get_ActionVerb(void)
{
  BSTR ActionVerb;
  this->get_ActionVerb((BSTR*)&ActionVerb);
  return ActionVerb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::set_ActionVerb(BSTR ActionVerb/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActionVerb"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = ActionVerb /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_AnimateAction(Office_xp::MsoTriState* AnimateAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimateAction"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AnimateAction /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ActionSettingDispT<T>::get_AnimateAction(void)
{
  Office_xp::MsoTriState AnimateAction;
  this->get_AnimateAction((Office_xp::MsoTriState*)&AnimateAction);
  return AnimateAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::set_AnimateAction(Office_xp::MsoTriState AnimateAction/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimateAction"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)AnimateAction /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_Run(BSTR* Run/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Run"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Run /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ActionSettingDispT<T>::get_Run(void)
{
  BSTR Run;
  this->get_Run((BSTR*)&Run);
  return Run;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::set_Run(BSTR Run/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Run"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = Run /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowName"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideShowName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ActionSettingDispT<T>::get_SlideShowName(void)
{
  BSTR SlideShowName;
  this->get_SlideShowName((BSTR*)&SlideShowName);
  return SlideShowName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::set_SlideShowName(BSTR SlideShowName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowName"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = SlideShowName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_Hyperlink(Powerpoint_xp::Hyperlink** Hyperlink/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlink"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Hyperlink**)Hyperlink /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Hyperlink* __fastcall
ActionSettingDispT<T>::get_Hyperlink(void)
{
  Powerpoint_xp::Hyperlink* Hyperlink;
  this->get_Hyperlink((Powerpoint_xp::Hyperlink**)&Hyperlink);
  return Hyperlink;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_SoundEffect(Powerpoint_xp::SoundEffect** SoundEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SoundEffect"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SoundEffect**)SoundEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::SoundEffect* __fastcall
ActionSettingDispT<T>::get_SoundEffect(void)
{
  Powerpoint_xp::SoundEffect* SoundEffect;
  this->get_SoundEffect((Powerpoint_xp::SoundEffect**)&SoundEffect);
  return SoundEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_ShowAndReturn(Office_xp::MsoTriState* ShowAndReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowAndReturn"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowAndReturn /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ActionSettingDispT<T>::get_ShowAndReturn(void)
{
  Office_xp::MsoTriState ShowAndReturn;
  this->get_ShowAndReturn((Office_xp::MsoTriState*)&ShowAndReturn);
  return ShowAndReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::set_ShowAndReturn(Office_xp::MsoTriState ShowAndReturn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowAndReturn"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowAndReturn /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PlaySettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
PlaySettingsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PlaySettingsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::get_ActionVerb(BSTR* ActionVerb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActionVerb"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ActionVerb /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PlaySettingsDispT<T>::get_ActionVerb(void)
{
  BSTR ActionVerb;
  this->get_ActionVerb((BSTR*)&ActionVerb);
  return ActionVerb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::set_ActionVerb(BSTR ActionVerb/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActionVerb"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = ActionVerb /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::get_HideWhileNotPlaying(Office_xp::MsoTriState* HideWhileNotPlaying/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideWhileNotPlaying"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HideWhileNotPlaying /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
PlaySettingsDispT<T>::get_HideWhileNotPlaying(void)
{
  Office_xp::MsoTriState HideWhileNotPlaying;
  this->get_HideWhileNotPlaying((Office_xp::MsoTriState*)&HideWhileNotPlaying);
  return HideWhileNotPlaying;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::set_HideWhileNotPlaying(Office_xp::MsoTriState HideWhileNotPlaying/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideWhileNotPlaying"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)HideWhileNotPlaying /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::get_LoopUntilStopped(Office_xp::MsoTriState* LoopUntilStopped/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoopUntilStopped"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LoopUntilStopped /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
PlaySettingsDispT<T>::get_LoopUntilStopped(void)
{
  Office_xp::MsoTriState LoopUntilStopped;
  this->get_LoopUntilStopped((Office_xp::MsoTriState*)&LoopUntilStopped);
  return LoopUntilStopped;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::set_LoopUntilStopped(Office_xp::MsoTriState LoopUntilStopped/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoopUntilStopped"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)LoopUntilStopped /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::get_PlayOnEntry(Office_xp::MsoTriState* PlayOnEntry/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlayOnEntry"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PlayOnEntry /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
PlaySettingsDispT<T>::get_PlayOnEntry(void)
{
  Office_xp::MsoTriState PlayOnEntry;
  this->get_PlayOnEntry((Office_xp::MsoTriState*)&PlayOnEntry);
  return PlayOnEntry;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::set_PlayOnEntry(Office_xp::MsoTriState PlayOnEntry/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlayOnEntry"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)PlayOnEntry /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::get_RewindMovie(Office_xp::MsoTriState* RewindMovie/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewindMovie"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RewindMovie /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
PlaySettingsDispT<T>::get_RewindMovie(void)
{
  Office_xp::MsoTriState RewindMovie;
  this->get_RewindMovie((Office_xp::MsoTriState*)&RewindMovie);
  return RewindMovie;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::set_RewindMovie(Office_xp::MsoTriState RewindMovie/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewindMovie"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)RewindMovie /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::get_PauseAnimation(Office_xp::MsoTriState* PauseAnimation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PauseAnimation"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PauseAnimation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
PlaySettingsDispT<T>::get_PauseAnimation(void)
{
  Office_xp::MsoTriState PauseAnimation;
  this->get_PauseAnimation((Office_xp::MsoTriState*)&PauseAnimation);
  return PauseAnimation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::set_PauseAnimation(Office_xp::MsoTriState PauseAnimation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PauseAnimation"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)PauseAnimation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::get_StopAfterSlides(int* StopAfterSlides/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StopAfterSlides"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(StopAfterSlides /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PlaySettingsDispT<T>::get_StopAfterSlides(void)
{
  int StopAfterSlides;
  this->get_StopAfterSlides((int*)&StopAfterSlides);
  return StopAfterSlides;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::set_StopAfterSlides(int StopAfterSlides/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StopAfterSlides"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = StopAfterSlides /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  TextRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
TextRangeDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextRangeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_ActionSettings(Powerpoint_xp::ActionSettings** ActionSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActionSettings"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ActionSettings**)ActionSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ActionSettings* __fastcall
TextRangeDispT<T>::get_ActionSettings(void)
{
  Powerpoint_xp::ActionSettings* ActionSettings;
  this->get_ActionSettings((Powerpoint_xp::ActionSettings**)&ActionSettings);
  return ActionSettings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_Start(long* Start/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Start"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Start /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TextRangeDispT<T>::get_Start(void)
{
  long Start;
  this->get_Start((long*)&Start);
  return Start;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_Length(long* Length/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Length"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Length /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TextRangeDispT<T>::get_Length(void)
{
  long Length;
  this->get_Length((long*)&Length);
  return Length;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_BoundLeft(float* BoundLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BoundLeft"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BoundLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextRangeDispT<T>::get_BoundLeft(void)
{
  float BoundLeft;
  this->get_BoundLeft((float*)&BoundLeft);
  return BoundLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_BoundTop(float* BoundTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BoundTop"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BoundTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextRangeDispT<T>::get_BoundTop(void)
{
  float BoundTop;
  this->get_BoundTop((float*)&BoundTop);
  return BoundTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_BoundWidth(float* BoundWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BoundWidth"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BoundWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextRangeDispT<T>::get_BoundWidth(void)
{
  float BoundWidth;
  this->get_BoundWidth((float*)&BoundWidth);
  return BoundWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_BoundHeight(float* BoundHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BoundHeight"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BoundHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextRangeDispT<T>::get_BoundHeight(void)
{
  float BoundHeight;
  this->get_BoundHeight((float*)&BoundHeight);
  return BoundHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Paragraphs(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                              Powerpoint_xp::TextRange** Paragraphs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Paragraphs"), DISPID(2010));
  TAutoArgs<2> _args;
  _args[1] = Start /*[VT_INT:0]*/;
  _args[2] = Length /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextRange**)Paragraphs /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TextRange* __fastcall
TextRangeDispT<T>::Paragraphs(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/)
{
  Powerpoint_xp::TextRange* Paragraphs;
  this->Paragraphs(Start, Length, (Powerpoint_xp::TextRange**)&Paragraphs);
  return Paragraphs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Sentences(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                             Powerpoint_xp::TextRange** Sentences/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sentences"), DISPID(2011));
  TAutoArgs<2> _args;
  _args[1] = Start /*[VT_INT:0]*/;
  _args[2] = Length /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextRange**)Sentences /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TextRange* __fastcall
TextRangeDispT<T>::Sentences(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/)
{
  Powerpoint_xp::TextRange* Sentences;
  this->Sentences(Start, Length, (Powerpoint_xp::TextRange**)&Sentences);
  return Sentences;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Words(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                         Powerpoint_xp::TextRange** Words/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Words"), DISPID(2012));
  TAutoArgs<2> _args;
  _args[1] = Start /*[VT_INT:0]*/;
  _args[2] = Length /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextRange**)Words /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TextRange* __fastcall
TextRangeDispT<T>::Words(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/)
{
  Powerpoint_xp::TextRange* Words;
  this->Words(Start, Length, (Powerpoint_xp::TextRange**)&Words);
  return Words;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Characters(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                              Powerpoint_xp::TextRange** Characters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Characters"), DISPID(2013));
  TAutoArgs<2> _args;
  _args[1] = Start /*[VT_INT:0]*/;
  _args[2] = Length /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextRange**)Characters /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TextRange* __fastcall
TextRangeDispT<T>::Characters(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/)
{
  Powerpoint_xp::TextRange* Characters;
  this->Characters(Start, Length, (Powerpoint_xp::TextRange**)&Characters);
  return Characters;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Lines(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                         Powerpoint_xp::TextRange** Lines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Lines"), DISPID(2014));
  TAutoArgs<2> _args;
  _args[1] = Start /*[VT_INT:0]*/;
  _args[2] = Length /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextRange**)Lines /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TextRange* __fastcall
TextRangeDispT<T>::Lines(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/)
{
  Powerpoint_xp::TextRange* Lines;
  this->Lines(Start, Length, (Powerpoint_xp::TextRange**)&Lines);
  return Lines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Runs(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                        Powerpoint_xp::TextRange** Runs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Runs"), DISPID(2015));
  TAutoArgs<2> _args;
  _args[1] = Start /*[VT_INT:0]*/;
  _args[2] = Length /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextRange**)Runs /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TextRange* __fastcall
TextRangeDispT<T>::Runs(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/)
{
  Powerpoint_xp::TextRange* Runs;
  this->Runs(Start, Length, (Powerpoint_xp::TextRange**)&Runs);
  return Runs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::TrimText(Powerpoint_xp::TextRange** TrimText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TrimText"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextRange**)TrimText /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TextRange* __fastcall
TextRangeDispT<T>::TrimText(void)
{
  Powerpoint_xp::TextRange* TrimText;
  this->TrimText((Powerpoint_xp::TextRange**)&TrimText);
  return TrimText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_Text(BSTR* Text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
TextRangeDispT<T>::get_Text(void)
{
  BSTR Text;
  this->get_Text((BSTR*)&Text);
  return Text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::set_Text(BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::InsertAfter(BSTR NewText/*[in,def,opt]*/, 
                               Powerpoint_xp::TextRange** After/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertAfter"), DISPID(2017));
  TAutoArgs<1> _args;
  _args[1] = NewText /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextRange**)After /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TextRange* __fastcall
TextRangeDispT<T>::InsertAfter(BSTR NewText/*[in,def,opt]*/)
{
  Powerpoint_xp::TextRange* After;
  this->InsertAfter(NewText, (Powerpoint_xp::TextRange**)&After);
  return After;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::InsertBefore(BSTR NewText/*[in,def,opt]*/, 
                                Powerpoint_xp::TextRange** Before/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertBefore"), DISPID(2018));
  TAutoArgs<1> _args;
  _args[1] = NewText /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextRange**)Before /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TextRange* __fastcall
TextRangeDispT<T>::InsertBefore(BSTR NewText/*[in,def,opt]*/)
{
  Powerpoint_xp::TextRange* Before;
  this->InsertBefore(NewText, (Powerpoint_xp::TextRange**)&Before);
  return Before;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::InsertDateTime(Powerpoint_xp::PpDateTimeFormat DateTimeFormat/*[in]*/, 
                                  Office_xp::MsoTriState InsertAsField/*[in,def,opt]*/, 
                                  Powerpoint_xp::TextRange** DateTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertDateTime"), DISPID(2019));
  TAutoArgs<2> _args;
  _args[1] = (int)DateTimeFormat /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)InsertAsField /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextRange**)DateTime /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TextRange* __fastcall
TextRangeDispT<T>::InsertDateTime(Powerpoint_xp::PpDateTimeFormat DateTimeFormat/*[in]*/, 
                                  Office_xp::MsoTriState InsertAsField/*[in,def,opt]*/)
{
  Powerpoint_xp::TextRange* DateTime;
  this->InsertDateTime(DateTimeFormat, InsertAsField, (Powerpoint_xp::TextRange**)&DateTime);
  return DateTime;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::InsertSlideNumber(Powerpoint_xp::TextRange** SlideNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertSlideNumber"), DISPID(2020));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextRange**)SlideNumber /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TextRange* __fastcall
TextRangeDispT<T>::InsertSlideNumber(void)
{
  Powerpoint_xp::TextRange* SlideNumber;
  this->InsertSlideNumber((Powerpoint_xp::TextRange**)&SlideNumber);
  return SlideNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::InsertSymbol(BSTR FontName/*[in]*/, int CharNumber/*[in]*/, 
                                Office_xp::MsoTriState Unicode/*[in,def,opt]*/, 
                                Powerpoint_xp::TextRange** Symbol/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertSymbol"), DISPID(2021));
  TAutoArgs<3> _args;
  _args[1] = FontName /*[VT_BSTR:0]*/;
  _args[2] = CharNumber /*[VT_INT:0]*/;
  _args[3] = (int)Unicode /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextRange**)Symbol /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TextRange* __fastcall
TextRangeDispT<T>::InsertSymbol(BSTR FontName/*[in]*/, int CharNumber/*[in]*/, 
                                Office_xp::MsoTriState Unicode/*[in,def,opt]*/)
{
  Powerpoint_xp::TextRange* Symbol;
  this->InsertSymbol(FontName, CharNumber, Unicode, (Powerpoint_xp::TextRange**)&Symbol);
  return Symbol;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_Font(Powerpoint_xp::Font** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(2022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Font**)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Font* __fastcall
TextRangeDispT<T>::get_Font(void)
{
  Powerpoint_xp::Font* Font;
  this->get_Font((Powerpoint_xp::Font**)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_ParagraphFormat(Powerpoint_xp::ParagraphFormat** ParagraphFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParagraphFormat"), DISPID(2023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ParagraphFormat**)ParagraphFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ParagraphFormat* __fastcall
TextRangeDispT<T>::get_ParagraphFormat(void)
{
  Powerpoint_xp::ParagraphFormat* ParagraphFormat;
  this->get_ParagraphFormat((Powerpoint_xp::ParagraphFormat**)&ParagraphFormat);
  return ParagraphFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_IndentLevel(int* IndentLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IndentLevel"), DISPID(2024));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IndentLevel /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
TextRangeDispT<T>::get_IndentLevel(void)
{
  int IndentLevel;
  this->get_IndentLevel((int*)&IndentLevel);
  return IndentLevel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::set_IndentLevel(int IndentLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IndentLevel"), DISPID(2024));
  TAutoArgs<1> _args;
  _args[1] = IndentLevel /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(2025));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Cut()
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(2026));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Copy()
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(2027));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2028));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Paste(Powerpoint_xp::TextRange** Paste/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Paste"), DISPID(2029));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextRange**)Paste /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TextRange* __fastcall
TextRangeDispT<T>::Paste(void)
{
  Powerpoint_xp::TextRange* Paste;
  this->Paste((Powerpoint_xp::TextRange**)&Paste);
  return Paste;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::ChangeCase(Powerpoint_xp::PpChangeCase Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChangeCase"), DISPID(2030));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::AddPeriods()
{
  _TDispID _dispid(*this, OLETEXT("AddPeriods"), DISPID(2031));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::RemovePeriods()
{
  _TDispID _dispid(*this, OLETEXT("RemovePeriods"), DISPID(2032));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Find(BSTR FindWhat/*[in]*/, int After/*[in,def,opt]*/, 
                        Office_xp::MsoTriState MatchCase/*[in,def,opt]*/, 
                        Office_xp::MsoTriState WholeWords/*[in,def,opt]*/, 
                        Powerpoint_xp::TextRange** Find/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Find"), DISPID(2033));
  TAutoArgs<4> _args;
  _args[1] = FindWhat /*[VT_BSTR:0]*/;
  _args[2] = After /*[VT_INT:0]*/;
  _args[3] = (int)MatchCase /*[VT_USERDEFINED:0]*/;
  _args[4] = (int)WholeWords /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextRange**)Find /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TextRange* __fastcall
TextRangeDispT<T>::Find(BSTR FindWhat/*[in]*/, int After/*[in,def,opt]*/, 
                        Office_xp::MsoTriState MatchCase/*[in,def,opt]*/, 
                        Office_xp::MsoTriState WholeWords/*[in,def,opt]*/)
{
  Powerpoint_xp::TextRange* Find;
  this->Find(FindWhat, After, MatchCase, WholeWords, (Powerpoint_xp::TextRange**)&Find);
  return Find;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Replace(BSTR FindWhat/*[in]*/, BSTR ReplaceWhat/*[in]*/, 
                           int After/*[in,def,opt]*/, 
                           Office_xp::MsoTriState MatchCase/*[in,def,opt]*/, 
                           Office_xp::MsoTriState WholeWords/*[in,def,opt]*/, 
                           Powerpoint_xp::TextRange** Replace/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Replace"), DISPID(2034));
  TAutoArgs<5> _args;
  _args[1] = FindWhat /*[VT_BSTR:0]*/;
  _args[2] = ReplaceWhat /*[VT_BSTR:0]*/;
  _args[3] = After /*[VT_INT:0]*/;
  _args[4] = (int)MatchCase /*[VT_USERDEFINED:0]*/;
  _args[5] = (int)WholeWords /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextRange**)Replace /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TextRange* __fastcall
TextRangeDispT<T>::Replace(BSTR FindWhat/*[in]*/, BSTR ReplaceWhat/*[in]*/, 
                           int After/*[in,def,opt]*/, 
                           Office_xp::MsoTriState MatchCase/*[in,def,opt]*/, 
                           Office_xp::MsoTriState WholeWords/*[in,def,opt]*/)
{
  Powerpoint_xp::TextRange* Replace;
  this->Replace(FindWhat, ReplaceWhat, After, MatchCase, WholeWords, (Powerpoint_xp::TextRange**)&Replace);
  return Replace;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::RotatedBounds(float* X1/*[out]*/, float* Y1/*[out]*/, float* X2/*[out]*/, 
                                 float* Y2/*[out]*/, float* X3/*[out]*/, float* Y3/*[out]*/, 
                                 float* x4/*[out]*/, float* y4/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotatedBounds"), DISPID(2035));
  TAutoArgs<8> _args;
  _args[1] = X1 /*[VT_R4:1]*/;
  _args[2] = Y1 /*[VT_R4:1]*/;
  _args[3] = X2 /*[VT_R4:1]*/;
  _args[4] = Y2 /*[VT_R4:1]*/;
  _args[5] = X3 /*[VT_R4:1]*/;
  _args[6] = Y3 /*[VT_R4:1]*/;
  _args[7] = x4 /*[VT_R4:1]*/;
  _args[8] = y4 /*[VT_R4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_LanguageID(Office_xp::MsoLanguageID* LanguageID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LanguageID"), DISPID(2036));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LanguageID /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoLanguageID __fastcall
TextRangeDispT<T>::get_LanguageID(void)
{
  Office_xp::MsoLanguageID LanguageID;
  this->get_LanguageID((Office_xp::MsoLanguageID*)&LanguageID);
  return LanguageID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::set_LanguageID(Office_xp::MsoLanguageID LanguageID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LanguageID"), DISPID(2036));
  TAutoArgs<1> _args;
  _args[1] = (int)LanguageID /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::RtlRun()
{
  _TDispID _dispid(*this, OLETEXT("RtlRun"), DISPID(2037));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::LtrRun()
{
  _TDispID _dispid(*this, OLETEXT("LtrRun"), DISPID(2038));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::PasteSpecial(Powerpoint_xp::PpPasteDataType DataType/*[in,def,opt]*/, 
                                Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                                BSTR IconFileName/*[in,def,opt]*/, int IconIndex/*[in,def,opt]*/, 
                                BSTR IconLabel/*[in,def,opt]*/, 
                                Office_xp::MsoTriState Link/*[in,def,opt]*/, 
                                Powerpoint_xp::TextRange** PasteSpecial/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PasteSpecial"), DISPID(2039));
  TAutoArgs<6> _args;
  _args[1] = (int)DataType /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)DisplayAsIcon /*[VT_USERDEFINED:0]*/;
  _args[3] = IconFileName /*[VT_BSTR:0]*/;
  _args[4] = IconIndex /*[VT_INT:0]*/;
  _args[5] = IconLabel /*[VT_BSTR:0]*/;
  _args[6] = (int)Link /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextRange**)PasteSpecial /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TextRange* __fastcall
TextRangeDispT<T>::PasteSpecial(Powerpoint_xp::PpPasteDataType DataType/*[in,def,opt]*/, 
                                Office_xp::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                                BSTR IconFileName/*[in,def,opt]*/, int IconIndex/*[in,def,opt]*/, 
                                BSTR IconLabel/*[in,def,opt]*/, 
                                Office_xp::MsoTriState Link/*[in,def,opt]*/)
{
  Powerpoint_xp::TextRange* PasteSpecial;
  this->PasteSpecial(DataType, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link, (Powerpoint_xp::TextRange**)&PasteSpecial);
  return PasteSpecial;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
TextRangeDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
TextRangeDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TextRangeDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Ruler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493490-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
RulerDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
RulerDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerDispT<T>::get_TabStops(Powerpoint_xp::TabStops** TabStops/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStops"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TabStops**)TabStops /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::TabStops* __fastcall
RulerDispT<T>::get_TabStops(void)
{
  Powerpoint_xp::TabStops* TabStops;
  this->get_TabStops((Powerpoint_xp::TabStops**)&TabStops);
  return TabStops;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerDispT<T>::get_Levels(Powerpoint_xp::RulerLevels** Levels/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Levels"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::RulerLevels**)Levels /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::RulerLevels* __fastcall
RulerDispT<T>::get_Levels(void)
{
  Powerpoint_xp::RulerLevels* Levels;
  this->get_Levels((Powerpoint_xp::RulerLevels**)&Levels);
  return Levels;
}

// *********************************************************************//
// DispIntf:  RulerLevels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493491-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
RulerLevelsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
RulerLevelsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelsDispT<T>::Item(int Index/*[in]*/, Powerpoint_xp::RulerLevel** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::RulerLevel**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::RulerLevel* __fastcall
RulerLevelsDispT<T>::Item(int Index/*[in]*/)
{
  Powerpoint_xp::RulerLevel* Item;
  this->Item(Index, (Powerpoint_xp::RulerLevel**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
RulerLevelsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
RulerLevelsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
RulerLevelsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  RulerLevel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493492-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
RulerLevelDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
RulerLevelDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelDispT<T>::get_FirstMargin(float* FirstMargin/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirstMargin"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FirstMargin /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
RulerLevelDispT<T>::get_FirstMargin(void)
{
  float FirstMargin;
  this->get_FirstMargin((float*)&FirstMargin);
  return FirstMargin;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelDispT<T>::set_FirstMargin(float FirstMargin/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirstMargin"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = FirstMargin /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelDispT<T>::get_LeftMargin(float* LeftMargin/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LeftMargin"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LeftMargin /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
RulerLevelDispT<T>::get_LeftMargin(void)
{
  float LeftMargin;
  this->get_LeftMargin((float*)&LeftMargin);
  return LeftMargin;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelDispT<T>::set_LeftMargin(float LeftMargin/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LeftMargin"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = LeftMargin /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  TabStops
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493493-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
TabStopsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TabStopsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopsDispT<T>::Item(int Index/*[in]*/, Powerpoint_xp::TabStop** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TabStop**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TabStop* __fastcall
TabStopsDispT<T>::Item(int Index/*[in]*/)
{
  Powerpoint_xp::TabStop* Item;
  this->Item(Index, (Powerpoint_xp::TabStop**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopsDispT<T>::get_DefaultSpacing(float* DefaultSpacing/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultSpacing"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DefaultSpacing /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TabStopsDispT<T>::get_DefaultSpacing(void)
{
  float DefaultSpacing;
  this->get_DefaultSpacing((float*)&DefaultSpacing);
  return DefaultSpacing;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopsDispT<T>::set_DefaultSpacing(float DefaultSpacing/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultSpacing"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = DefaultSpacing /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopsDispT<T>::Add(Powerpoint_xp::PpTabStopType Type/*[in]*/, float Position/*[in]*/, 
                      Powerpoint_xp::TabStop** Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2004));
  TAutoArgs<2> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Position /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TabStop**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TabStop* __fastcall
TabStopsDispT<T>::Add(Powerpoint_xp::PpTabStopType Type/*[in]*/, float Position/*[in]*/)
{
  Powerpoint_xp::TabStop* Add;
  this->Add(Type, Position, (Powerpoint_xp::TabStop**)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
TabStopsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
TabStopsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TabStopsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  TabStop
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493494-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
TabStopDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TabStopDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopDispT<T>::get_Type(Powerpoint_xp::PpTabStopType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpTabStopType __fastcall
TabStopDispT<T>::get_Type(void)
{
  Powerpoint_xp::PpTabStopType Type;
  this->get_Type((Powerpoint_xp::PpTabStopType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopDispT<T>::set_Type(Powerpoint_xp::PpTabStopType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopDispT<T>::get_Position(float* Position/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Position /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TabStopDispT<T>::get_Position(void)
{
  float Position;
  this->get_Position((float*)&Position);
  return Position;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopDispT<T>::set_Position(float Position/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = Position /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(2005));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  Font
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493495-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
FontDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FontDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Color(Powerpoint_xp::ColorFormat** Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorFormat**)Color /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorFormat* __fastcall
FontDispT<T>::get_Color(void)
{
  Powerpoint_xp::ColorFormat* Color;
  this->get_Color((Powerpoint_xp::ColorFormat**)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Bold(Office_xp::MsoTriState* Bold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Bold /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
FontDispT<T>::get_Bold(void)
{
  Office_xp::MsoTriState Bold;
  this->get_Bold((Office_xp::MsoTriState*)&Bold);
  return Bold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Bold(Office_xp::MsoTriState Bold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)Bold /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Italic(Office_xp::MsoTriState* Italic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Italic"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Italic /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
FontDispT<T>::get_Italic(void)
{
  Office_xp::MsoTriState Italic;
  this->get_Italic((Office_xp::MsoTriState*)&Italic);
  return Italic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Italic(Office_xp::MsoTriState Italic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Italic"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)Italic /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Shadow(Office_xp::MsoTriState* Shadow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Shadow /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
FontDispT<T>::get_Shadow(void)
{
  Office_xp::MsoTriState Shadow;
  this->get_Shadow((Office_xp::MsoTriState*)&Shadow);
  return Shadow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Shadow(Office_xp::MsoTriState Shadow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)Shadow /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Emboss(Office_xp::MsoTriState* Emboss/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Emboss"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Emboss /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
FontDispT<T>::get_Emboss(void)
{
  Office_xp::MsoTriState Emboss;
  this->get_Emboss((Office_xp::MsoTriState*)&Emboss);
  return Emboss;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Emboss(Office_xp::MsoTriState Emboss/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Emboss"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)Emboss /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Underline(Office_xp::MsoTriState* Underline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Underline"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Underline /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
FontDispT<T>::get_Underline(void)
{
  Office_xp::MsoTriState Underline;
  this->get_Underline((Office_xp::MsoTriState*)&Underline);
  return Underline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Underline(Office_xp::MsoTriState Underline/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Underline"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)Underline /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Subscript(Office_xp::MsoTriState* Subscript/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Subscript"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Subscript /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
FontDispT<T>::get_Subscript(void)
{
  Office_xp::MsoTriState Subscript;
  this->get_Subscript((Office_xp::MsoTriState*)&Subscript);
  return Subscript;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Subscript(Office_xp::MsoTriState Subscript/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Subscript"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)Subscript /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Superscript(Office_xp::MsoTriState* Superscript/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Superscript"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Superscript /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
FontDispT<T>::get_Superscript(void)
{
  Office_xp::MsoTriState Superscript;
  this->get_Superscript((Office_xp::MsoTriState*)&Superscript);
  return Superscript;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Superscript(Office_xp::MsoTriState Superscript/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Superscript"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = (int)Superscript /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_BaselineOffset(float* BaselineOffset/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaselineOffset"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BaselineOffset /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
FontDispT<T>::get_BaselineOffset(void)
{
  float BaselineOffset;
  this->get_BaselineOffset((float*)&BaselineOffset);
  return BaselineOffset;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_BaselineOffset(float BaselineOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaselineOffset"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = BaselineOffset /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Embedded(Office_xp::MsoTriState* Embedded/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Embedded"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Embedded /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
FontDispT<T>::get_Embedded(void)
{
  Office_xp::MsoTriState Embedded;
  this->get_Embedded((Office_xp::MsoTriState*)&Embedded);
  return Embedded;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Embeddable(Office_xp::MsoTriState* Embeddable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Embeddable"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Embeddable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
FontDispT<T>::get_Embeddable(void)
{
  Office_xp::MsoTriState Embeddable;
  this->get_Embeddable((Office_xp::MsoTriState*)&Embeddable);
  return Embeddable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Size(float* Size/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Size /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
FontDispT<T>::get_Size(void)
{
  float Size;
  this->get_Size((float*)&Size);
  return Size;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Size(float Size/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = Size /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FontDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2015));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_NameFarEast(BSTR* NameFarEast/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameFarEast"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NameFarEast /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FontDispT<T>::get_NameFarEast(void)
{
  BSTR NameFarEast;
  this->get_NameFarEast((BSTR*)&NameFarEast);
  return NameFarEast;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_NameFarEast(BSTR NameFarEast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameFarEast"), DISPID(2016));
  TAutoArgs<1> _args;
  _args[1] = NameFarEast /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_NameAscii(BSTR* NameAscii/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameAscii"), DISPID(2017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NameAscii /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FontDispT<T>::get_NameAscii(void)
{
  BSTR NameAscii;
  this->get_NameAscii((BSTR*)&NameAscii);
  return NameAscii;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_NameAscii(BSTR NameAscii/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameAscii"), DISPID(2017));
  TAutoArgs<1> _args;
  _args[1] = NameAscii /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_AutoRotateNumbers(Office_xp::MsoTriState* AutoRotateNumbers/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoRotateNumbers"), DISPID(2018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoRotateNumbers /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
FontDispT<T>::get_AutoRotateNumbers(void)
{
  Office_xp::MsoTriState AutoRotateNumbers;
  this->get_AutoRotateNumbers((Office_xp::MsoTriState*)&AutoRotateNumbers);
  return AutoRotateNumbers;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_AutoRotateNumbers(Office_xp::MsoTriState AutoRotateNumbers/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoRotateNumbers"), DISPID(2018));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoRotateNumbers /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_NameOther(BSTR* NameOther/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameOther"), DISPID(2019));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NameOther /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FontDispT<T>::get_NameOther(void)
{
  BSTR NameOther;
  this->get_NameOther((BSTR*)&NameOther);
  return NameOther;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_NameOther(BSTR NameOther/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameOther"), DISPID(2019));
  TAutoArgs<1> _args;
  _args[1] = NameOther /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_NameComplexScript(BSTR* NameComplexScript/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameComplexScript"), DISPID(2020));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NameComplexScript /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FontDispT<T>::get_NameComplexScript(void)
{
  BSTR NameComplexScript;
  this->get_NameComplexScript((BSTR*)&NameComplexScript);
  return NameComplexScript;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_NameComplexScript(BSTR NameComplexScript/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameComplexScript"), DISPID(2020));
  TAutoArgs<1> _args;
  _args[1] = NameComplexScript /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ParagraphFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493496-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
ParagraphFormatDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ParagraphFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_Alignment(Powerpoint_xp::PpParagraphAlignment* Alignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Alignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpParagraphAlignment __fastcall
ParagraphFormatDispT<T>::get_Alignment(void)
{
  Powerpoint_xp::PpParagraphAlignment Alignment;
  this->get_Alignment((Powerpoint_xp::PpParagraphAlignment*)&Alignment);
  return Alignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_Alignment(Powerpoint_xp::PpParagraphAlignment Alignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)Alignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_Bullet(Powerpoint_xp::BulletFormat** Bullet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bullet"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::BulletFormat**)Bullet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::BulletFormat* __fastcall
ParagraphFormatDispT<T>::get_Bullet(void)
{
  Powerpoint_xp::BulletFormat* Bullet;
  this->get_Bullet((Powerpoint_xp::BulletFormat**)&Bullet);
  return Bullet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_LineRuleBefore(Office_xp::MsoTriState* LineRuleBefore/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineRuleBefore"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LineRuleBefore /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ParagraphFormatDispT<T>::get_LineRuleBefore(void)
{
  Office_xp::MsoTriState LineRuleBefore;
  this->get_LineRuleBefore((Office_xp::MsoTriState*)&LineRuleBefore);
  return LineRuleBefore;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_LineRuleBefore(Office_xp::MsoTriState LineRuleBefore/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineRuleBefore"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)LineRuleBefore /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_LineRuleAfter(Office_xp::MsoTriState* LineRuleAfter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineRuleAfter"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LineRuleAfter /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ParagraphFormatDispT<T>::get_LineRuleAfter(void)
{
  Office_xp::MsoTriState LineRuleAfter;
  this->get_LineRuleAfter((Office_xp::MsoTriState*)&LineRuleAfter);
  return LineRuleAfter;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_LineRuleAfter(Office_xp::MsoTriState LineRuleAfter/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineRuleAfter"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)LineRuleAfter /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_LineRuleWithin(Office_xp::MsoTriState* LineRuleWithin/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineRuleWithin"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LineRuleWithin /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ParagraphFormatDispT<T>::get_LineRuleWithin(void)
{
  Office_xp::MsoTriState LineRuleWithin;
  this->get_LineRuleWithin((Office_xp::MsoTriState*)&LineRuleWithin);
  return LineRuleWithin;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_LineRuleWithin(Office_xp::MsoTriState LineRuleWithin/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineRuleWithin"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)LineRuleWithin /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_SpaceBefore(float* SpaceBefore/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpaceBefore"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SpaceBefore /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ParagraphFormatDispT<T>::get_SpaceBefore(void)
{
  float SpaceBefore;
  this->get_SpaceBefore((float*)&SpaceBefore);
  return SpaceBefore;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_SpaceBefore(float SpaceBefore/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpaceBefore"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = SpaceBefore /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_SpaceAfter(float* SpaceAfter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpaceAfter"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SpaceAfter /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ParagraphFormatDispT<T>::get_SpaceAfter(void)
{
  float SpaceAfter;
  this->get_SpaceAfter((float*)&SpaceAfter);
  return SpaceAfter;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_SpaceAfter(float SpaceAfter/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpaceAfter"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = SpaceAfter /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_SpaceWithin(float* SpaceWithin/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpaceWithin"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SpaceWithin /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ParagraphFormatDispT<T>::get_SpaceWithin(void)
{
  float SpaceWithin;
  this->get_SpaceWithin((float*)&SpaceWithin);
  return SpaceWithin;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_SpaceWithin(float SpaceWithin/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpaceWithin"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = SpaceWithin /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_BaseLineAlignment(Powerpoint_xp::PpBaselineAlignment* BaseLineAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaseLineAlignment"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BaseLineAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpBaselineAlignment __fastcall
ParagraphFormatDispT<T>::get_BaseLineAlignment(void)
{
  Powerpoint_xp::PpBaselineAlignment BaseLineAlignment;
  this->get_BaseLineAlignment((Powerpoint_xp::PpBaselineAlignment*)&BaseLineAlignment);
  return BaseLineAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_BaseLineAlignment(Powerpoint_xp::PpBaselineAlignment BaseLineAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaseLineAlignment"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = (int)BaseLineAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_FarEastLineBreakControl(Office_xp::MsoTriState* FarEastLineBreakControl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FarEastLineBreakControl"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FarEastLineBreakControl /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ParagraphFormatDispT<T>::get_FarEastLineBreakControl(void)
{
  Office_xp::MsoTriState FarEastLineBreakControl;
  this->get_FarEastLineBreakControl((Office_xp::MsoTriState*)&FarEastLineBreakControl);
  return FarEastLineBreakControl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_FarEastLineBreakControl(Office_xp::MsoTriState FarEastLineBreakControl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FarEastLineBreakControl"), DISPID(2012));
  TAutoArgs<1> _args;
  _args[1] = (int)FarEastLineBreakControl /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_WordWrap(Office_xp::MsoTriState* WordWrap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)WordWrap /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ParagraphFormatDispT<T>::get_WordWrap(void)
{
  Office_xp::MsoTriState WordWrap;
  this->get_WordWrap((Office_xp::MsoTriState*)&WordWrap);
  return WordWrap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_WordWrap(Office_xp::MsoTriState WordWrap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = (int)WordWrap /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_HangingPunctuation(Office_xp::MsoTriState* HangingPunctuation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HangingPunctuation"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HangingPunctuation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
ParagraphFormatDispT<T>::get_HangingPunctuation(void)
{
  Office_xp::MsoTriState HangingPunctuation;
  this->get_HangingPunctuation((Office_xp::MsoTriState*)&HangingPunctuation);
  return HangingPunctuation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_HangingPunctuation(Office_xp::MsoTriState HangingPunctuation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HangingPunctuation"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = (int)HangingPunctuation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_TextDirection(Powerpoint_xp::PpDirection* TextDirection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextDirection"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TextDirection /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpDirection __fastcall
ParagraphFormatDispT<T>::get_TextDirection(void)
{
  Powerpoint_xp::PpDirection TextDirection;
  this->get_TextDirection((Powerpoint_xp::PpDirection*)&TextDirection);
  return TextDirection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_TextDirection(Powerpoint_xp::PpDirection TextDirection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextDirection"), DISPID(2015));
  TAutoArgs<1> _args;
  _args[1] = (int)TextDirection /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  BulletFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493497-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
BulletFormatDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BulletFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
BulletFormatDispT<T>::get_Visible(void)
{
  Office_xp::MsoTriState Visible;
  this->get_Visible((Office_xp::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::set_Visible(Office_xp::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_Character(int* Character/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Character"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Character /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
BulletFormatDispT<T>::get_Character(void)
{
  int Character;
  this->get_Character((int*)&Character);
  return Character;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::set_Character(int Character/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Character"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = Character /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_RelativeSize(float* RelativeSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelativeSize"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RelativeSize /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
BulletFormatDispT<T>::get_RelativeSize(void)
{
  float RelativeSize;
  this->get_RelativeSize((float*)&RelativeSize);
  return RelativeSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::set_RelativeSize(float RelativeSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelativeSize"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = RelativeSize /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_UseTextColor(Office_xp::MsoTriState* UseTextColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseTextColor"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)UseTextColor /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
BulletFormatDispT<T>::get_UseTextColor(void)
{
  Office_xp::MsoTriState UseTextColor;
  this->get_UseTextColor((Office_xp::MsoTriState*)&UseTextColor);
  return UseTextColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::set_UseTextColor(Office_xp::MsoTriState UseTextColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseTextColor"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)UseTextColor /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_UseTextFont(Office_xp::MsoTriState* UseTextFont/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseTextFont"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)UseTextFont /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
BulletFormatDispT<T>::get_UseTextFont(void)
{
  Office_xp::MsoTriState UseTextFont;
  this->get_UseTextFont((Office_xp::MsoTriState*)&UseTextFont);
  return UseTextFont;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::set_UseTextFont(Office_xp::MsoTriState UseTextFont/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseTextFont"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)UseTextFont /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_Font(Powerpoint_xp::Font** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Font**)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Font* __fastcall
BulletFormatDispT<T>::get_Font(void)
{
  Powerpoint_xp::Font* Font;
  this->get_Font((Powerpoint_xp::Font**)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_Type(Powerpoint_xp::PpBulletType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpBulletType __fastcall
BulletFormatDispT<T>::get_Type(void)
{
  Powerpoint_xp::PpBulletType Type;
  this->get_Type((Powerpoint_xp::PpBulletType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::set_Type(Powerpoint_xp::PpBulletType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_Style(Powerpoint_xp::PpNumberedBulletStyle* Style/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Style /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpNumberedBulletStyle __fastcall
BulletFormatDispT<T>::get_Style(void)
{
  Powerpoint_xp::PpNumberedBulletStyle Style;
  this->get_Style((Powerpoint_xp::PpNumberedBulletStyle*)&Style);
  return Style;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::set_Style(Powerpoint_xp::PpNumberedBulletStyle Style/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_StartValue(int* StartValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartValue"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(StartValue /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
BulletFormatDispT<T>::get_StartValue(void)
{
  int StartValue;
  this->get_StartValue((int*)&StartValue);
  return StartValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::set_StartValue(int StartValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartValue"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = StartValue /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::Picture(BSTR Picture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = Picture /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_Number(int* Number/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Number"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Number /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
BulletFormatDispT<T>::get_Number(void)
{
  int Number;
  this->get_Number((int*)&Number);
  return Number;
}

// *********************************************************************//
// DispIntf:  TextStyles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493498-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStylesDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
TextStylesDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStylesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextStylesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStylesDispT<T>::Item(Powerpoint_xp::PpTextStyleType Type/*[in]*/, 
                         Powerpoint_xp::TextStyle** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextStyle**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TextStyle* __fastcall
TextStylesDispT<T>::Item(Powerpoint_xp::PpTextStyleType Type/*[in]*/)
{
  Powerpoint_xp::TextStyle* Item;
  this->Item(Type, (Powerpoint_xp::TextStyle**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStylesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
TextStylesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStylesDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
TextStylesDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStylesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TextStylesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  TextStyle
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493499-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
TextStyleDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextStyleDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleDispT<T>::get_Ruler(Powerpoint_xp::Ruler** Ruler/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ruler"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Ruler**)Ruler /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Ruler* __fastcall
TextStyleDispT<T>::get_Ruler(void)
{
  Powerpoint_xp::Ruler* Ruler;
  this->get_Ruler((Powerpoint_xp::Ruler**)&Ruler);
  return Ruler;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleDispT<T>::get_TextFrame(Powerpoint_xp::TextFrame** TextFrame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFrame"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextFrame**)TextFrame /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::TextFrame* __fastcall
TextStyleDispT<T>::get_TextFrame(void)
{
  Powerpoint_xp::TextFrame* TextFrame;
  this->get_TextFrame((Powerpoint_xp::TextFrame**)&TextFrame);
  return TextFrame;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleDispT<T>::get_Levels(Powerpoint_xp::TextStyleLevels** Levels/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Levels"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextStyleLevels**)Levels /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::TextStyleLevels* __fastcall
TextStyleDispT<T>::get_Levels(void)
{
  Powerpoint_xp::TextStyleLevels* Levels;
  this->get_Levels((Powerpoint_xp::TextStyleLevels**)&Levels);
  return Levels;
}

// *********************************************************************//
// DispIntf:  TextStyleLevels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
TextStyleLevelsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextStyleLevelsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelsDispT<T>::Item(int Level/*[in]*/, 
                              Powerpoint_xp::TextStyleLevel** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Level /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::TextStyleLevel**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::TextStyleLevel* __fastcall
TextStyleLevelsDispT<T>::Item(int Level/*[in]*/)
{
  Powerpoint_xp::TextStyleLevel* Item;
  this->Item(Level, (Powerpoint_xp::TextStyleLevel**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
TextStyleLevelsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
TextStyleLevelsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TextStyleLevelsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  TextStyleLevel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
TextStyleLevelDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextStyleLevelDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelDispT<T>::get_ParagraphFormat(Powerpoint_xp::ParagraphFormat** ParagraphFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParagraphFormat"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ParagraphFormat**)ParagraphFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ParagraphFormat* __fastcall
TextStyleLevelDispT<T>::get_ParagraphFormat(void)
{
  Powerpoint_xp::ParagraphFormat* ParagraphFormat;
  this->get_ParagraphFormat((Powerpoint_xp::ParagraphFormat**)&ParagraphFormat);
  return ParagraphFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelDispT<T>::get_Font(Powerpoint_xp::Font** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Font**)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Font* __fastcall
TextStyleLevelDispT<T>::get_Font(void)
{
  Powerpoint_xp::Font* Font;
  this->get_Font((Powerpoint_xp::Font**)&Font);
  return Font;
}

// *********************************************************************//
// DispIntf:  HeaderFooter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
HeaderFooterDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
HeaderFooterDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::get_Visible(Office_xp::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
HeaderFooterDispT<T>::get_Visible(void)
{
  Office_xp::MsoTriState Visible;
  this->get_Visible((Office_xp::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::set_Visible(Office_xp::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::get_Text(BSTR* Text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
HeaderFooterDispT<T>::get_Text(void)
{
  BSTR Text;
  this->get_Text((BSTR*)&Text);
  return Text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::set_Text(BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::get_UseFormat(Office_xp::MsoTriState* UseFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseFormat"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)UseFormat /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
HeaderFooterDispT<T>::get_UseFormat(void)
{
  Office_xp::MsoTriState UseFormat;
  this->get_UseFormat((Office_xp::MsoTriState*)&UseFormat);
  return UseFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::set_UseFormat(Office_xp::MsoTriState UseFormat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseFormat"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)UseFormat /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::get_Format(Powerpoint_xp::PpDateTimeFormat* Format/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Format"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Format /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpDateTimeFormat __fastcall
HeaderFooterDispT<T>::get_Format(void)
{
  Powerpoint_xp::PpDateTimeFormat Format;
  this->get_Format((Powerpoint_xp::PpDateTimeFormat*)&Format);
  return Format;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::set_Format(Powerpoint_xp::PpDateTimeFormat Format/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Format"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Tags
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
TagsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TagsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::Item(BSTR Name/*[in]*/, BSTR* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Item /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
TagsDispT<T>::Item(BSTR Name/*[in]*/)
{
  BSTR Item;
  this->Item(Name, (BSTR*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::Add(BSTR Name/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<2> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::Delete(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::AddBinary(BSTR Name/*[in]*/, BSTR FilePath/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBinary"), DISPID(2005));
  TAutoArgs<2> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = FilePath /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::BinaryValue(BSTR Name/*[in]*/, long* BinaryValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BinaryValue"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(BinaryValue /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
TagsDispT<T>::BinaryValue(BSTR Name/*[in]*/)
{
  long BinaryValue;
  this->BinaryValue(Name, (long*)&BinaryValue);
  return BinaryValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::Name(int Index/*[in]*/, BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
TagsDispT<T>::Name(int Index/*[in]*/)
{
  BSTR Name;
  this->Name(Index, (BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::Value(int Index/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
TagsDispT<T>::Value(int Index/*[in]*/)
{
  BSTR Value;
  this->Value(Index, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
TagsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
TagsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TagsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// SmartIntf: TCOMOCXExtender
// Interface: OCXExtender
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/)
{
  return (*this)->get_Visible(Visible);
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::get_Visible(TOLEBOOL* Visible/*[out,retval]*/)
{
  return (*this)->get_Visible(VARIANT_BOOL*)Visible);
}

template <class T> TOLEBOOL __fastcall
TCOMOCXExtenderT<T>::get_Visible(void)
{
  VARIANT_BOOL Visible;
  OLECHECK(this->get_Visible((VARIANT_BOOL*)&Visible));
  return (TOLEBOOL)Visible;
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::set_Visible(VARIANT_BOOL Visible/*[in]*/)
{
  return (*this)->set_Visible(Visible);
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::set_Visible(TOLEBOOL Visible/*[in]*/)
{
  return (*this)->set_Visible(VARIANT_BOOL)Visible);
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::get_Left(float* Left/*[out,retval]*/)
{
  return (*this)->get_Left(Left);
}

template <class T> float __fastcall
TCOMOCXExtenderT<T>::get_Left(void)
{
  float Left;
  OLECHECK(this->get_Left((float*)&Left));
  return Left;
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::set_Left(float Left/*[in]*/)
{
  return (*this)->set_Left(Left);
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::get_Top(float* Top/*[out,retval]*/)
{
  return (*this)->get_Top(Top);
}

template <class T> float __fastcall
TCOMOCXExtenderT<T>::get_Top(void)
{
  float Top;
  OLECHECK(this->get_Top((float*)&Top));
  return Top;
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::set_Top(float Top/*[in]*/)
{
  return (*this)->set_Top(Top);
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::get_Height(float* Height/*[out,retval]*/)
{
  return (*this)->get_Height(Height);
}

template <class T> float __fastcall
TCOMOCXExtenderT<T>::get_Height(void)
{
  float Height;
  OLECHECK(this->get_Height((float*)&Height));
  return Height;
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::set_Height(float Height/*[in]*/)
{
  return (*this)->set_Height(Height);
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::get_Width(float* Width/*[out,retval]*/)
{
  return (*this)->get_Width(Width);
}

template <class T> float __fastcall
TCOMOCXExtenderT<T>::get_Width(void)
{
  float Width;
  OLECHECK(this->get_Width((float*)&Width));
  return Width;
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::set_Width(float Width/*[in]*/)
{
  return (*this)->set_Width(Width);
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/)
{
  return (*this)->get_ZOrderPosition(ZOrderPosition);
}

template <class T> int __fastcall
TCOMOCXExtenderT<T>::get_ZOrderPosition(void)
{
  int ZOrderPosition;
  OLECHECK(this->get_ZOrderPosition((int*)&ZOrderPosition));
  return ZOrderPosition;
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  return (*this)->get_Name(Name);
}

template <class T> BSTR __fastcall
TCOMOCXExtenderT<T>::get_Name(void)
{
  BSTR Name = 0;
  OLECHECK(this->get_Name((BSTR*)&Name));
  return Name;
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::set_Name(BSTR Name/*[in]*/)
{
  return (*this)->set_Name(Name);
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::get_AltHTML(BSTR* AltHTML/*[out,retval]*/)
{
  return (*this)->get_AltHTML(AltHTML);
}

template <class T> BSTR __fastcall
TCOMOCXExtenderT<T>::get_AltHTML(void)
{
  BSTR AltHTML = 0;
  OLECHECK(this->get_AltHTML((BSTR*)&AltHTML));
  return AltHTML;
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::set_AltHTML(BSTR AltHTML/*[in]*/)
{
  return (*this)->set_AltHTML(AltHTML);
}

// *********************************************************************//
// DispIntf:  OCXExtender
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(-2147418105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Visible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
OCXExtenderDispT<T>::get_Visible(void)
{
  VARIANT_BOOL Visible;
  this->get_Visible((VARIANT_BOOL*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::set_Visible(VARIANT_BOOL Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(-2147418105));
  TAutoArgs<1> _args;
  _args[1] = Visible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(-2147418109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
OCXExtenderDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(-2147418109));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(-2147418108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
OCXExtenderDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(-2147418108));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(-2147418107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
OCXExtenderDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(-2147418107));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(-2147418106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
OCXExtenderDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(-2147418106));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrderPosition"), DISPID(-2147417882));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ZOrderPosition /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
OCXExtenderDispT<T>::get_ZOrderPosition(void)
{
  int ZOrderPosition;
  this->get_ZOrderPosition((int*)&ZOrderPosition);
  return ZOrderPosition;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(-2147418112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
OCXExtenderDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(-2147418112));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::get_AltHTML(BSTR* AltHTML/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AltHTML"), DISPID(-2147417881));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AltHTML /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
OCXExtenderDispT<T>::get_AltHTML(void)
{
  BSTR AltHTML;
  this->get_AltHTML((BSTR*)&AltHTML);
  return AltHTML;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::set_AltHTML(BSTR AltHTML/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AltHTML"), DISPID(-2147417881));
  TAutoArgs<1> _args;
  _args[1] = AltHTML /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Table
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C3-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TableDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
TableDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TableDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TableDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TableDispT<T>::get_Columns(Powerpoint_xp::Columns** Columns/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Columns"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Columns**)Columns /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Columns* __fastcall
TableDispT<T>::get_Columns(void)
{
  Powerpoint_xp::Columns* Columns;
  this->get_Columns((Powerpoint_xp::Columns**)&Columns);
  return Columns;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TableDispT<T>::get_Rows(Powerpoint_xp::Rows** Rows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rows"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Rows**)Rows /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Rows* __fastcall
TableDispT<T>::get_Rows(void)
{
  Powerpoint_xp::Rows* Rows;
  this->get_Rows((Powerpoint_xp::Rows**)&Rows);
  return Rows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TableDispT<T>::Cell(int Row/*[in]*/, int Column/*[in]*/, Powerpoint_xp::Cell** Cell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cell"), DISPID(2005));
  TAutoArgs<2> _args;
  _args[1] = Row /*[VT_INT:0]*/;
  _args[2] = Column /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Cell**)Cell /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Cell* __fastcall
TableDispT<T>::Cell(int Row/*[in]*/, int Column/*[in]*/)
{
  Powerpoint_xp::Cell* Cell;
  this->Cell(Row, Column, (Powerpoint_xp::Cell**)&Cell);
  return Cell;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TableDispT<T>::get_TableDirection(Powerpoint_xp::PpDirection* TableDirection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableDirection"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TableDirection /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpDirection __fastcall
TableDispT<T>::get_TableDirection(void)
{
  Powerpoint_xp::PpDirection TableDirection;
  this->get_TableDirection((Powerpoint_xp::PpDirection*)&TableDirection);
  return TableDirection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TableDispT<T>::set_TableDirection(Powerpoint_xp::PpDirection TableDirection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableDirection"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)TableDirection /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TableDispT<T>::MergeBorders()
{
  _TDispID _dispid(*this, OLETEXT("MergeBorders"), DISPID(2007));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  Columns
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C4-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
ColumnsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ColumnsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnsDispT<T>::Item(int Index/*[in]*/, Powerpoint_xp::Column** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Column**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Column* __fastcall
ColumnsDispT<T>::Item(int Index/*[in]*/)
{
  Powerpoint_xp::Column* Item;
  this->Item(Index, (Powerpoint_xp::Column**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnsDispT<T>::Add(int BeforeColumn/*[in,def,opt]*/, Powerpoint_xp::Column** Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = BeforeColumn /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Column**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Column* __fastcall
ColumnsDispT<T>::Add(int BeforeColumn/*[in,def,opt]*/)
{
  Powerpoint_xp::Column* Add;
  this->Add(BeforeColumn, (Powerpoint_xp::Column**)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ColumnsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ColumnsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ColumnsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Column
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C5-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
ColumnDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ColumnDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnDispT<T>::get_Cells(Powerpoint_xp::CellRange** Cells/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cells"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::CellRange**)Cells /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::CellRange* __fastcall
ColumnDispT<T>::get_Cells(void)
{
  Powerpoint_xp::CellRange* Cells;
  this->get_Cells((Powerpoint_xp::CellRange**)&Cells);
  return Cells;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(2004));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2005));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ColumnDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Rows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C6-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
RowsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
RowsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowsDispT<T>::Item(int Index/*[in]*/, Powerpoint_xp::Row** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Row**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Row* __fastcall
RowsDispT<T>::Item(int Index/*[in]*/)
{
  Powerpoint_xp::Row* Item;
  this->Item(Index, (Powerpoint_xp::Row**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowsDispT<T>::Add(int BeforeRow/*[in,def,opt]*/, Powerpoint_xp::Row** Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = BeforeRow /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Row**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Row* __fastcall
RowsDispT<T>::Add(int BeforeRow/*[in,def,opt]*/)
{
  Powerpoint_xp::Row* Add;
  this->Add(BeforeRow, (Powerpoint_xp::Row**)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
RowsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
RowsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
RowsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Row
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C7-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
RowDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
RowDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowDispT<T>::get_Cells(Powerpoint_xp::CellRange** Cells/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cells"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::CellRange**)Cells /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::CellRange* __fastcall
RowDispT<T>::get_Cells(void)
{
  Powerpoint_xp::CellRange* Cells;
  this->get_Cells((Powerpoint_xp::CellRange**)&Cells);
  return Cells;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(2004));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2005));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
RowDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  CellRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C8-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellRangeDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
CellRangeDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellRangeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CellRangeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellRangeDispT<T>::Item(int Index/*[in]*/, Powerpoint_xp::Cell** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Cell**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Cell* __fastcall
CellRangeDispT<T>::Item(int Index/*[in]*/)
{
  Powerpoint_xp::Cell* Item;
  this->Item(Index, (Powerpoint_xp::Cell**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellRangeDispT<T>::get_Borders(Powerpoint_xp::Borders** Borders/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Borders"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Borders**)Borders /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Borders* __fastcall
CellRangeDispT<T>::get_Borders(void)
{
  Powerpoint_xp::Borders* Borders;
  this->get_Borders((Powerpoint_xp::Borders**)&Borders);
  return Borders;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellRangeDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
CellRangeDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellRangeDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
CellRangeDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellRangeDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CellRangeDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Cell
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
CellDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CellDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellDispT<T>::get_Shape(Powerpoint_xp::Shape** Shape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shape"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Shape /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
CellDispT<T>::get_Shape(void)
{
  Powerpoint_xp::Shape* Shape;
  this->get_Shape((Powerpoint_xp::Shape**)&Shape);
  return Shape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellDispT<T>::get_Borders(Powerpoint_xp::Borders** Borders/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Borders"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Borders**)Borders /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Borders* __fastcall
CellDispT<T>::get_Borders(void)
{
  Powerpoint_xp::Borders* Borders;
  this->get_Borders((Powerpoint_xp::Borders**)&Borders);
  return Borders;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellDispT<T>::Merge(Powerpoint_xp::Cell* MergeTo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Merge"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::Cell*)MergeTo /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellDispT<T>::Split(int NumRows/*[in]*/, int NumColumns/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Split"), DISPID(2006));
  TAutoArgs<2> _args;
  _args[1] = NumRows /*[VT_INT:0]*/;
  _args[2] = NumColumns /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(2007));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellDispT<T>::get_Selected(VARIANT_BOOL* Selected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Selected /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CellDispT<T>::get_Selected(void)
{
  VARIANT_BOOL Selected;
  this->get_Selected((VARIANT_BOOL*)&Selected);
  return Selected;
}

// *********************************************************************//
// DispIntf:  Borders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CA-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
BordersDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BordersDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::Item(Powerpoint_xp::PpBorderType BorderType/*[in]*/, 
                      Powerpoint_xp::LineFormat** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = (int)BorderType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::LineFormat**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::LineFormat* __fastcall
BordersDispT<T>::Item(Powerpoint_xp::PpBorderType BorderType/*[in]*/)
{
  Powerpoint_xp::LineFormat* Item;
  this->Item(BorderType, (Powerpoint_xp::LineFormat**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
BordersDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
BordersDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
BordersDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Panes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CB-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PanesDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
PanesDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PanesDispT<T>::Item(int Index/*[in]*/, Powerpoint_xp::Pane** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Pane**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Pane* __fastcall
PanesDispT<T>::Item(int Index/*[in]*/)
{
  Powerpoint_xp::Pane* Item;
  this->Item(Index, (Powerpoint_xp::Pane**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PanesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PanesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PanesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PanesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PanesDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
PanesDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PanesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PanesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Pane
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CC-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PaneDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PaneDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PaneDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(2001));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PaneDispT<T>::get_Active(Office_xp::MsoTriState* Active/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Active /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
PaneDispT<T>::get_Active(void)
{
  Office_xp::MsoTriState Active;
  this->get_Active((Office_xp::MsoTriState*)&Active);
  return Active;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PaneDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
PaneDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PaneDispT<T>::get_ViewType(Powerpoint_xp::PpViewType* ViewType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewType"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ViewType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpViewType __fastcall
PaneDispT<T>::get_ViewType(void)
{
  Powerpoint_xp::PpViewType ViewType;
  this->get_ViewType((Powerpoint_xp::PpViewType*)&ViewType);
  return ViewType;
}

// *********************************************************************//
// DispIntf:  DefaultWebOptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CD-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_IncludeNavigation(Office_xp::MsoTriState* IncludeNavigation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncludeNavigation"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)IncludeNavigation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_IncludeNavigation(void)
{
  Office_xp::MsoTriState IncludeNavigation;
  this->get_IncludeNavigation((Office_xp::MsoTriState*)&IncludeNavigation);
  return IncludeNavigation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_IncludeNavigation(Office_xp::MsoTriState IncludeNavigation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncludeNavigation"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = (int)IncludeNavigation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_FrameColors(Powerpoint_xp::PpFrameColors* FrameColors/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrameColors"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FrameColors /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpFrameColors __fastcall
DefaultWebOptionsDispT<T>::get_FrameColors(void)
{
  Powerpoint_xp::PpFrameColors FrameColors;
  this->get_FrameColors((Powerpoint_xp::PpFrameColors*)&FrameColors);
  return FrameColors;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_FrameColors(Powerpoint_xp::PpFrameColors FrameColors/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrameColors"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = (int)FrameColors /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_ResizeGraphics(Office_xp::MsoTriState* ResizeGraphics/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResizeGraphics"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ResizeGraphics /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_ResizeGraphics(void)
{
  Office_xp::MsoTriState ResizeGraphics;
  this->get_ResizeGraphics((Office_xp::MsoTriState*)&ResizeGraphics);
  return ResizeGraphics;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_ResizeGraphics(Office_xp::MsoTriState ResizeGraphics/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResizeGraphics"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)ResizeGraphics /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_ShowSlideAnimation(Office_xp::MsoTriState* ShowSlideAnimation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowSlideAnimation"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowSlideAnimation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_ShowSlideAnimation(void)
{
  Office_xp::MsoTriState ShowSlideAnimation;
  this->get_ShowSlideAnimation((Office_xp::MsoTriState*)&ShowSlideAnimation);
  return ShowSlideAnimation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_ShowSlideAnimation(Office_xp::MsoTriState ShowSlideAnimation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowSlideAnimation"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowSlideAnimation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_OrganizeInFolder(Office_xp::MsoTriState* OrganizeInFolder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrganizeInFolder"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)OrganizeInFolder /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_OrganizeInFolder(void)
{
  Office_xp::MsoTriState OrganizeInFolder;
  this->get_OrganizeInFolder((Office_xp::MsoTriState*)&OrganizeInFolder);
  return OrganizeInFolder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_OrganizeInFolder(Office_xp::MsoTriState OrganizeInFolder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrganizeInFolder"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)OrganizeInFolder /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_UseLongFileNames(Office_xp::MsoTriState* UseLongFileNames/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseLongFileNames"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)UseLongFileNames /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_UseLongFileNames(void)
{
  Office_xp::MsoTriState UseLongFileNames;
  this->get_UseLongFileNames((Office_xp::MsoTriState*)&UseLongFileNames);
  return UseLongFileNames;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_UseLongFileNames(Office_xp::MsoTriState UseLongFileNames/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseLongFileNames"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)UseLongFileNames /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_RelyOnVML(Office_xp::MsoTriState* RelyOnVML/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelyOnVML"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RelyOnVML /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_RelyOnVML(void)
{
  Office_xp::MsoTriState RelyOnVML;
  this->get_RelyOnVML((Office_xp::MsoTriState*)&RelyOnVML);
  return RelyOnVML;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_RelyOnVML(Office_xp::MsoTriState RelyOnVML/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelyOnVML"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)RelyOnVML /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_AllowPNG(Office_xp::MsoTriState* AllowPNG/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowPNG"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AllowPNG /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_AllowPNG(void)
{
  Office_xp::MsoTriState AllowPNG;
  this->get_AllowPNG((Office_xp::MsoTriState*)&AllowPNG);
  return AllowPNG;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_AllowPNG(Office_xp::MsoTriState AllowPNG/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowPNG"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)AllowPNG /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_ScreenSize(Office_xp::MsoScreenSize* ScreenSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScreenSize"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ScreenSize /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoScreenSize __fastcall
DefaultWebOptionsDispT<T>::get_ScreenSize(void)
{
  Office_xp::MsoScreenSize ScreenSize;
  this->get_ScreenSize((Office_xp::MsoScreenSize*)&ScreenSize);
  return ScreenSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_ScreenSize(Office_xp::MsoScreenSize ScreenSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScreenSize"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)ScreenSize /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_Encoding(Office_xp::MsoEncoding* Encoding/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Encoding"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Encoding /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoEncoding __fastcall
DefaultWebOptionsDispT<T>::get_Encoding(void)
{
  Office_xp::MsoEncoding Encoding;
  this->get_Encoding((Office_xp::MsoEncoding*)&Encoding);
  return Encoding;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_Encoding(Office_xp::MsoEncoding Encoding/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Encoding"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = (int)Encoding /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_UpdateLinksOnSave(Office_xp::MsoTriState* UpdateLinksOnSave/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UpdateLinksOnSave"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)UpdateLinksOnSave /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_UpdateLinksOnSave(void)
{
  Office_xp::MsoTriState UpdateLinksOnSave;
  this->get_UpdateLinksOnSave((Office_xp::MsoTriState*)&UpdateLinksOnSave);
  return UpdateLinksOnSave;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_UpdateLinksOnSave(Office_xp::MsoTriState UpdateLinksOnSave/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UpdateLinksOnSave"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = (int)UpdateLinksOnSave /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_CheckIfOfficeIsHTMLEditor(Office_xp::MsoTriState* CheckIfOfficeIsHTMLEditor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckIfOfficeIsHTMLEditor"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)CheckIfOfficeIsHTMLEditor /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_CheckIfOfficeIsHTMLEditor(void)
{
  Office_xp::MsoTriState CheckIfOfficeIsHTMLEditor;
  this->get_CheckIfOfficeIsHTMLEditor((Office_xp::MsoTriState*)&CheckIfOfficeIsHTMLEditor);
  return CheckIfOfficeIsHTMLEditor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_CheckIfOfficeIsHTMLEditor(Office_xp::MsoTriState CheckIfOfficeIsHTMLEditor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckIfOfficeIsHTMLEditor"), DISPID(2012));
  TAutoArgs<1> _args;
  _args[1] = (int)CheckIfOfficeIsHTMLEditor /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_AlwaysSaveInDefaultEncoding(Office_xp::MsoTriState* AlwaysSaveInDefaultEncoding/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlwaysSaveInDefaultEncoding"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AlwaysSaveInDefaultEncoding /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_AlwaysSaveInDefaultEncoding(void)
{
  Office_xp::MsoTriState AlwaysSaveInDefaultEncoding;
  this->get_AlwaysSaveInDefaultEncoding((Office_xp::MsoTriState*)&AlwaysSaveInDefaultEncoding);
  return AlwaysSaveInDefaultEncoding;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_AlwaysSaveInDefaultEncoding(Office_xp::MsoTriState AlwaysSaveInDefaultEncoding/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlwaysSaveInDefaultEncoding"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = (int)AlwaysSaveInDefaultEncoding /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_Fonts(Office_xp::WebPageFonts** Fonts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fonts"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::WebPageFonts**)Fonts /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::WebPageFonts* __fastcall
DefaultWebOptionsDispT<T>::get_Fonts(void)
{
  Office_xp::WebPageFonts* Fonts;
  this->get_Fonts((Office_xp::WebPageFonts**)&Fonts);
  return Fonts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_FolderSuffix(BSTR* FolderSuffix/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FolderSuffix"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FolderSuffix /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
DefaultWebOptionsDispT<T>::get_FolderSuffix(void)
{
  BSTR FolderSuffix;
  this->get_FolderSuffix((BSTR*)&FolderSuffix);
  return FolderSuffix;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_TargetBrowser(Office_xp::MsoTargetBrowser* TargetBrowser/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TargetBrowser"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TargetBrowser /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTargetBrowser __fastcall
DefaultWebOptionsDispT<T>::get_TargetBrowser(void)
{
  Office_xp::MsoTargetBrowser TargetBrowser;
  this->get_TargetBrowser((Office_xp::MsoTargetBrowser*)&TargetBrowser);
  return TargetBrowser;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_TargetBrowser(Office_xp::MsoTargetBrowser TargetBrowser/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TargetBrowser"), DISPID(2016));
  TAutoArgs<1> _args;
  _args[1] = (int)TargetBrowser /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_SaveNewWebPagesAsWebArchives(Office_xp::MsoTriState* SaveNewWebPagesAsWebArchives/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveNewWebPagesAsWebArchives"), DISPID(2017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SaveNewWebPagesAsWebArchives /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_SaveNewWebPagesAsWebArchives(void)
{
  Office_xp::MsoTriState SaveNewWebPagesAsWebArchives;
  this->get_SaveNewWebPagesAsWebArchives((Office_xp::MsoTriState*)&SaveNewWebPagesAsWebArchives);
  return SaveNewWebPagesAsWebArchives;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_SaveNewWebPagesAsWebArchives(Office_xp::MsoTriState SaveNewWebPagesAsWebArchives/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveNewWebPagesAsWebArchives"), DISPID(2017));
  TAutoArgs<1> _args;
  _args[1] = (int)SaveNewWebPagesAsWebArchives /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_HTMLVersion(Powerpoint_xp::PpHTMLVersion* HTMLVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLVersion"), DISPID(2018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HTMLVersion /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpHTMLVersion __fastcall
DefaultWebOptionsDispT<T>::get_HTMLVersion(void)
{
  Powerpoint_xp::PpHTMLVersion HTMLVersion;
  this->get_HTMLVersion((Powerpoint_xp::PpHTMLVersion*)&HTMLVersion);
  return HTMLVersion;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_HTMLVersion(Powerpoint_xp::PpHTMLVersion HTMLVersion/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLVersion"), DISPID(2018));
  TAutoArgs<1> _args;
  _args[1] = (int)HTMLVersion /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  WebOptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CE-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_IncludeNavigation(Office_xp::MsoTriState* IncludeNavigation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncludeNavigation"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)IncludeNavigation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
WebOptionsDispT<T>::get_IncludeNavigation(void)
{
  Office_xp::MsoTriState IncludeNavigation;
  this->get_IncludeNavigation((Office_xp::MsoTriState*)&IncludeNavigation);
  return IncludeNavigation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_IncludeNavigation(Office_xp::MsoTriState IncludeNavigation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncludeNavigation"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = (int)IncludeNavigation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_FrameColors(Powerpoint_xp::PpFrameColors* FrameColors/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrameColors"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FrameColors /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpFrameColors __fastcall
WebOptionsDispT<T>::get_FrameColors(void)
{
  Powerpoint_xp::PpFrameColors FrameColors;
  this->get_FrameColors((Powerpoint_xp::PpFrameColors*)&FrameColors);
  return FrameColors;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_FrameColors(Powerpoint_xp::PpFrameColors FrameColors/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrameColors"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = (int)FrameColors /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_ResizeGraphics(Office_xp::MsoTriState* ResizeGraphics/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResizeGraphics"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ResizeGraphics /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
WebOptionsDispT<T>::get_ResizeGraphics(void)
{
  Office_xp::MsoTriState ResizeGraphics;
  this->get_ResizeGraphics((Office_xp::MsoTriState*)&ResizeGraphics);
  return ResizeGraphics;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_ResizeGraphics(Office_xp::MsoTriState ResizeGraphics/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResizeGraphics"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)ResizeGraphics /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_ShowSlideAnimation(Office_xp::MsoTriState* ShowSlideAnimation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowSlideAnimation"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowSlideAnimation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
WebOptionsDispT<T>::get_ShowSlideAnimation(void)
{
  Office_xp::MsoTriState ShowSlideAnimation;
  this->get_ShowSlideAnimation((Office_xp::MsoTriState*)&ShowSlideAnimation);
  return ShowSlideAnimation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_ShowSlideAnimation(Office_xp::MsoTriState ShowSlideAnimation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowSlideAnimation"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowSlideAnimation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_OrganizeInFolder(Office_xp::MsoTriState* OrganizeInFolder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrganizeInFolder"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)OrganizeInFolder /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
WebOptionsDispT<T>::get_OrganizeInFolder(void)
{
  Office_xp::MsoTriState OrganizeInFolder;
  this->get_OrganizeInFolder((Office_xp::MsoTriState*)&OrganizeInFolder);
  return OrganizeInFolder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_OrganizeInFolder(Office_xp::MsoTriState OrganizeInFolder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrganizeInFolder"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)OrganizeInFolder /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_UseLongFileNames(Office_xp::MsoTriState* UseLongFileNames/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseLongFileNames"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)UseLongFileNames /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
WebOptionsDispT<T>::get_UseLongFileNames(void)
{
  Office_xp::MsoTriState UseLongFileNames;
  this->get_UseLongFileNames((Office_xp::MsoTriState*)&UseLongFileNames);
  return UseLongFileNames;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_UseLongFileNames(Office_xp::MsoTriState UseLongFileNames/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseLongFileNames"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)UseLongFileNames /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_RelyOnVML(Office_xp::MsoTriState* RelyOnVML/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelyOnVML"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RelyOnVML /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
WebOptionsDispT<T>::get_RelyOnVML(void)
{
  Office_xp::MsoTriState RelyOnVML;
  this->get_RelyOnVML((Office_xp::MsoTriState*)&RelyOnVML);
  return RelyOnVML;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_RelyOnVML(Office_xp::MsoTriState RelyOnVML/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelyOnVML"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)RelyOnVML /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_AllowPNG(Office_xp::MsoTriState* AllowPNG/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowPNG"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AllowPNG /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
WebOptionsDispT<T>::get_AllowPNG(void)
{
  Office_xp::MsoTriState AllowPNG;
  this->get_AllowPNG((Office_xp::MsoTriState*)&AllowPNG);
  return AllowPNG;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_AllowPNG(Office_xp::MsoTriState AllowPNG/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowPNG"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)AllowPNG /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_ScreenSize(Office_xp::MsoScreenSize* ScreenSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScreenSize"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ScreenSize /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoScreenSize __fastcall
WebOptionsDispT<T>::get_ScreenSize(void)
{
  Office_xp::MsoScreenSize ScreenSize;
  this->get_ScreenSize((Office_xp::MsoScreenSize*)&ScreenSize);
  return ScreenSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_ScreenSize(Office_xp::MsoScreenSize ScreenSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScreenSize"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)ScreenSize /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_Encoding(Office_xp::MsoEncoding* Encoding/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Encoding"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Encoding /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoEncoding __fastcall
WebOptionsDispT<T>::get_Encoding(void)
{
  Office_xp::MsoEncoding Encoding;
  this->get_Encoding((Office_xp::MsoEncoding*)&Encoding);
  return Encoding;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_Encoding(Office_xp::MsoEncoding Encoding/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Encoding"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = (int)Encoding /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_FolderSuffix(BSTR* FolderSuffix/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FolderSuffix"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FolderSuffix /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WebOptionsDispT<T>::get_FolderSuffix(void)
{
  BSTR FolderSuffix;
  this->get_FolderSuffix((BSTR*)&FolderSuffix);
  return FolderSuffix;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::UseDefaultFolderSuffix()
{
  _TDispID _dispid(*this, OLETEXT("UseDefaultFolderSuffix"), DISPID(2012));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_TargetBrowser(Office_xp::MsoTargetBrowser* TargetBrowser/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TargetBrowser"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TargetBrowser /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTargetBrowser __fastcall
WebOptionsDispT<T>::get_TargetBrowser(void)
{
  Office_xp::MsoTargetBrowser TargetBrowser;
  this->get_TargetBrowser((Office_xp::MsoTargetBrowser*)&TargetBrowser);
  return TargetBrowser;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_TargetBrowser(Office_xp::MsoTargetBrowser TargetBrowser/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TargetBrowser"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = (int)TargetBrowser /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_HTMLVersion(Powerpoint_xp::PpHTMLVersion* HTMLVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLVersion"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HTMLVersion /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpHTMLVersion __fastcall
WebOptionsDispT<T>::get_HTMLVersion(void)
{
  Powerpoint_xp::PpHTMLVersion HTMLVersion;
  this->get_HTMLVersion((Powerpoint_xp::PpHTMLVersion*)&HTMLVersion);
  return HTMLVersion;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_HTMLVersion(Powerpoint_xp::PpHTMLVersion HTMLVersion/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLVersion"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = (int)HTMLVersion /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PublishObjects
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CF-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
PublishObjectsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PublishObjectsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectsDispT<T>::Item(int Index/*[in]*/, Powerpoint_xp::PublishObject** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PublishObject**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::PublishObject* __fastcall
PublishObjectsDispT<T>::Item(int Index/*[in]*/)
{
  Powerpoint_xp::PublishObject* Item;
  this->Item(Index, (Powerpoint_xp::PublishObject**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PublishObjectsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
PublishObjectsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PublishObjectsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  PublishObject
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
PublishObjectDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PublishObjectDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::get_HTMLVersion(Powerpoint_xp::PpHTMLVersion* HTMLVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLVersion"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HTMLVersion /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpHTMLVersion __fastcall
PublishObjectDispT<T>::get_HTMLVersion(void)
{
  Powerpoint_xp::PpHTMLVersion HTMLVersion;
  this->get_HTMLVersion((Powerpoint_xp::PpHTMLVersion*)&HTMLVersion);
  return HTMLVersion;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::set_HTMLVersion(Powerpoint_xp::PpHTMLVersion HTMLVersion/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLVersion"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)HTMLVersion /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::get_SourceType(Powerpoint_xp::PpPublishSourceType* SourceType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceType"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SourceType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PpPublishSourceType __fastcall
PublishObjectDispT<T>::get_SourceType(void)
{
  Powerpoint_xp::PpPublishSourceType SourceType;
  this->get_SourceType((Powerpoint_xp::PpPublishSourceType*)&SourceType);
  return SourceType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::set_SourceType(Powerpoint_xp::PpPublishSourceType SourceType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceType"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)SourceType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::get_RangeStart(int* RangeStart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeStart"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RangeStart /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PublishObjectDispT<T>::get_RangeStart(void)
{
  int RangeStart;
  this->get_RangeStart((int*)&RangeStart);
  return RangeStart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::set_RangeStart(int RangeStart/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeStart"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = RangeStart /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::get_RangeEnd(int* RangeEnd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeEnd"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RangeEnd /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PublishObjectDispT<T>::get_RangeEnd(void)
{
  int RangeEnd;
  this->get_RangeEnd((int*)&RangeEnd);
  return RangeEnd;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::set_RangeEnd(int RangeEnd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeEnd"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = RangeEnd /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowName"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideShowName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PublishObjectDispT<T>::get_SlideShowName(void)
{
  BSTR SlideShowName;
  this->get_SlideShowName((BSTR*)&SlideShowName);
  return SlideShowName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::set_SlideShowName(BSTR SlideShowName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowName"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = SlideShowName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::get_SpeakerNotes(Office_xp::MsoTriState* SpeakerNotes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpeakerNotes"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SpeakerNotes /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
PublishObjectDispT<T>::get_SpeakerNotes(void)
{
  Office_xp::MsoTriState SpeakerNotes;
  this->get_SpeakerNotes((Office_xp::MsoTriState*)&SpeakerNotes);
  return SpeakerNotes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::set_SpeakerNotes(Office_xp::MsoTriState SpeakerNotes/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpeakerNotes"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)SpeakerNotes /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::get_FileName(BSTR* FileName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileName"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FileName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PublishObjectDispT<T>::get_FileName(void)
{
  BSTR FileName;
  this->get_FileName((BSTR*)&FileName);
  return FileName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::set_FileName(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileName"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::Publish()
{
  _TDispID _dispid(*this, OLETEXT("Publish"), DISPID(2010));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOM_PowerRex
// Interface: _PowerRex
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_PowerRexT<T>::OnAsfEncoderEvent(VARIANT erorCode/*[in]*/, VARIANT bstrErrorDesc/*[in]*/)
{
  return (*this)->OnAsfEncoderEvent(erorCode, bstrErrorDesc);
}

// *********************************************************************//
// DispIntf:  _PowerRex
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D3-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PowerRexDispT<T>::OnAsfEncoderEvent(VARIANT erorCode/*[in]*/, VARIANT bstrErrorDesc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAsfEncoderEvent"), DISPID(2001));
  TAutoArgs<2> _args;
  _args[1] = erorCode /*[VT_VARIANT:0]*/;
  _args[2] = bstrErrorDesc /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Comments
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D4-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommentsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
CommentsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommentsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommentsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommentsDispT<T>::Item(int Index/*[in]*/, Powerpoint_xp::Comment** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Comment**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Comment* __fastcall
CommentsDispT<T>::Item(int Index/*[in]*/)
{
  Powerpoint_xp::Comment* Item;
  this->Item(Index, (Powerpoint_xp::Comment**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommentsDispT<T>::Add(float Left/*[in]*/, float Top/*[in]*/, BSTR Author/*[in]*/, 
                      BSTR AuthorInitials/*[in]*/, BSTR Text/*[in]*/, 
                      Powerpoint_xp::Comment** Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<5> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Author /*[VT_BSTR:0]*/;
  _args[4] = AuthorInitials /*[VT_BSTR:0]*/;
  _args[5] = Text /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Comment**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Comment* __fastcall
CommentsDispT<T>::Add(float Left/*[in]*/, float Top/*[in]*/, BSTR Author/*[in]*/, 
                      BSTR AuthorInitials/*[in]*/, BSTR Text/*[in]*/)
{
  Powerpoint_xp::Comment* Add;
  this->Add(Left, Top, Author, AuthorInitials, Text, (Powerpoint_xp::Comment**)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommentsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
CommentsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommentsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommentsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommentsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommentsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Comment
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D5-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommentDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
CommentDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommentDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommentDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommentDispT<T>::get_Author(BSTR* Author/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Author"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Author /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommentDispT<T>::get_Author(void)
{
  BSTR Author;
  this->get_Author((BSTR*)&Author);
  return Author;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommentDispT<T>::get_AuthorInitials(BSTR* AuthorInitials/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthorInitials"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AuthorInitials /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommentDispT<T>::get_AuthorInitials(void)
{
  BSTR AuthorInitials;
  this->get_AuthorInitials((BSTR*)&AuthorInitials);
  return AuthorInitials;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommentDispT<T>::get_Text(BSTR* Text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommentDispT<T>::get_Text(void)
{
  BSTR Text;
  this->get_Text((BSTR*)&Text);
  return Text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommentDispT<T>::get_DateTime(DATE* DateTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateTime"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DateTime /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
CommentDispT<T>::get_DateTime(void)
{
  DATE DateTime;
  this->get_DateTime((DATE*)&DateTime);
  return DateTime;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommentDispT<T>::get_AuthorIndex(int* AuthorIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthorIndex"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AuthorIndex /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommentDispT<T>::get_AuthorIndex(void)
{
  int AuthorIndex;
  this->get_AuthorIndex((int*)&AuthorIndex);
  return AuthorIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommentDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
CommentDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommentDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
CommentDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommentDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2010));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  Designs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D6-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
DesignsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
DesignsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignsDispT<T>::Item(VARIANT Index/*[in]*/, Powerpoint_xp::Design** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Design**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Design* __fastcall
DesignsDispT<T>::Item(VARIANT Index/*[in]*/)
{
  Powerpoint_xp::Design* Item;
  this->Item(Index, (Powerpoint_xp::Design**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignsDispT<T>::Add(BSTR designName/*[in]*/, int Index/*[in,def,opt]*/, 
                     Powerpoint_xp::Design** Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<2> _args;
  _args[1] = designName /*[VT_BSTR:0]*/;
  _args[2] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Design**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Design* __fastcall
DesignsDispT<T>::Add(BSTR designName/*[in]*/, int Index/*[in,def,opt]*/)
{
  Powerpoint_xp::Design* Add;
  this->Add(designName, Index, (Powerpoint_xp::Design**)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignsDispT<T>::Load(BSTR TemplateName/*[in]*/, int Index/*[in,def,opt]*/, 
                      Powerpoint_xp::Design** Load/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Load"), DISPID(2004));
  TAutoArgs<2> _args;
  _args[1] = TemplateName /*[VT_BSTR:0]*/;
  _args[2] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Design**)Load /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Design* __fastcall
DesignsDispT<T>::Load(BSTR TemplateName/*[in]*/, int Index/*[in,def,opt]*/)
{
  Powerpoint_xp::Design* Load;
  this->Load(TemplateName, Index, (Powerpoint_xp::Design**)&Load);
  return Load;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignsDispT<T>::Clone(Powerpoint_xp::Design* pOriginal/*[in]*/, int Index/*[in,def,opt]*/, 
                       Powerpoint_xp::Design** Clone/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Clone"), DISPID(2005));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::Design*)pOriginal /*[VT_USERDEFINED:1]*/;
  _args[2] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Design**)Clone /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Design* __fastcall
DesignsDispT<T>::Clone(Powerpoint_xp::Design* pOriginal/*[in]*/, int Index/*[in,def,opt]*/)
{
  Powerpoint_xp::Design* Clone;
  this->Clone(pOriginal, Index, (Powerpoint_xp::Design**)&Clone);
  return Clone;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
DesignsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
DesignsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
DesignsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Design
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D7-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
DesignDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
DesignDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignDispT<T>::get_SlideMaster(Powerpoint_xp::_Master** SlideMaster/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideMaster"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::_Master**)SlideMaster /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::_Master* __fastcall
DesignDispT<T>::get_SlideMaster(void)
{
  Powerpoint_xp::_Master* SlideMaster;
  this->get_SlideMaster((Powerpoint_xp::_Master**)&SlideMaster);
  return SlideMaster;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignDispT<T>::get_TitleMaster(Powerpoint_xp::_Master** TitleMaster/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TitleMaster"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::_Master**)TitleMaster /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::_Master* __fastcall
DesignDispT<T>::get_TitleMaster(void)
{
  Powerpoint_xp::_Master* TitleMaster;
  this->get_TitleMaster((Powerpoint_xp::_Master**)&TitleMaster);
  return TitleMaster;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignDispT<T>::get_HasTitleMaster(Office_xp::MsoTriState* HasTitleMaster/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTitleMaster"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HasTitleMaster /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
DesignDispT<T>::get_HasTitleMaster(void)
{
  Office_xp::MsoTriState HasTitleMaster;
  this->get_HasTitleMaster((Office_xp::MsoTriState*)&HasTitleMaster);
  return HasTitleMaster;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignDispT<T>::AddTitleMaster(Powerpoint_xp::_Master** TitleMaster/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTitleMaster"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::_Master**)TitleMaster /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::_Master* __fastcall
DesignDispT<T>::AddTitleMaster(void)
{
  Powerpoint_xp::_Master* TitleMaster;
  this->AddTitleMaster((Powerpoint_xp::_Master**)&TitleMaster);
  return TitleMaster;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignDispT<T>::get_Index(int* Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Index /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
DesignDispT<T>::get_Index(void)
{
  int Index;
  this->get_Index((int*)&Index);
  return Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
DesignDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignDispT<T>::get_Preserved(Office_xp::MsoTriState* Preserved/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Preserved"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Preserved /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
DesignDispT<T>::get_Preserved(void)
{
  Office_xp::MsoTriState Preserved;
  this->get_Preserved((Office_xp::MsoTriState*)&Preserved);
  return Preserved;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignDispT<T>::set_Preserved(Office_xp::MsoTriState Preserved/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Preserved"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)Preserved /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignDispT<T>::MoveTo(int toPos/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveTo"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = toPos /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DesignDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2011));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  DiagramNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D8-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
DiagramNodeDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
DiagramNodeDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeDispT<T>::AddNode(Office_xp::MsoRelativeNodePosition Pos/*[in,def,opt]*/, 
                             Office_xp::MsoDiagramNodeType NodeType/*[in,def,opt]*/, 
                             Powerpoint_xp::DiagramNode** NewNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddNode"), DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = (int)Pos /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)NodeType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DiagramNode**)NewNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::DiagramNode* __fastcall
DiagramNodeDispT<T>::AddNode(Office_xp::MsoRelativeNodePosition Pos/*[in,def,opt]*/, 
                             Office_xp::MsoDiagramNodeType NodeType/*[in,def,opt]*/)
{
  Powerpoint_xp::DiagramNode* NewNode;
  this->AddNode(Pos, NodeType, (Powerpoint_xp::DiagramNode**)&NewNode);
  return NewNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeDispT<T>::MoveNode(Powerpoint_xp::DiagramNode* TargetNode/*[in]*/, 
                              Office_xp::MsoRelativeNodePosition Pos/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveNode"), DISPID(12));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::DiagramNode*)TargetNode /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Pos /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeDispT<T>::ReplaceNode(Powerpoint_xp::DiagramNode* TargetNode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReplaceNode"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::DiagramNode*)TargetNode /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeDispT<T>::SwapNode(Powerpoint_xp::DiagramNode* TargetNode/*[in]*/, 
                              VARIANT_BOOL SwapChildren/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SwapNode"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::DiagramNode*)TargetNode /*[VT_USERDEFINED:1]*/;
  _args[2] = SwapChildren /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeDispT<T>::CloneNode(VARIANT_BOOL CopyChildren/*[in]*/, 
                               Powerpoint_xp::DiagramNode* TargetNode/*[in]*/, 
                               Office_xp::MsoRelativeNodePosition Pos/*[in,def,opt]*/, 
                               Powerpoint_xp::DiagramNode** Node/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloneNode"), DISPID(15));
  TAutoArgs<3> _args;
  _args[1] = CopyChildren /*[VT_BOOL:0]*/;
  _args[2] = (LPDISPATCH)(Powerpoint_xp::DiagramNode*)TargetNode /*[VT_USERDEFINED:1]*/;
  _args[3] = (int)Pos /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DiagramNode**)Node /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::DiagramNode* __fastcall
DiagramNodeDispT<T>::CloneNode(VARIANT_BOOL CopyChildren/*[in]*/, 
                               Powerpoint_xp::DiagramNode* TargetNode/*[in]*/, 
                               Office_xp::MsoRelativeNodePosition Pos/*[in,def,opt]*/)
{
  Powerpoint_xp::DiagramNode* Node;
  this->CloneNode(CopyChildren, TargetNode, Pos, (Powerpoint_xp::DiagramNode**)&Node);
  return Node;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeDispT<T>::TransferChildren(Powerpoint_xp::DiagramNode* ReceivingNode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransferChildren"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::DiagramNode*)ReceivingNode /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeDispT<T>::NextNode(Powerpoint_xp::DiagramNode** NextNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NextNode"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DiagramNode**)NextNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::DiagramNode* __fastcall
DiagramNodeDispT<T>::NextNode(void)
{
  Powerpoint_xp::DiagramNode* NextNode;
  this->NextNode((Powerpoint_xp::DiagramNode**)&NextNode);
  return NextNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeDispT<T>::PrevNode(Powerpoint_xp::DiagramNode** PrevNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrevNode"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DiagramNode**)PrevNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::DiagramNode* __fastcall
DiagramNodeDispT<T>::PrevNode(void)
{
  Powerpoint_xp::DiagramNode* PrevNode;
  this->PrevNode((Powerpoint_xp::DiagramNode**)&PrevNode);
  return PrevNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
DiagramNodeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeDispT<T>::get_Children(Powerpoint_xp::DiagramNodeChildren** Children/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Children"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DiagramNodeChildren**)Children /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::DiagramNodeChildren* __fastcall
DiagramNodeDispT<T>::get_Children(void)
{
  Powerpoint_xp::DiagramNodeChildren* Children;
  this->get_Children((Powerpoint_xp::DiagramNodeChildren**)&Children);
  return Children;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeDispT<T>::get_Shape(Powerpoint_xp::Shape** Shape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shape"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Shape /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
DiagramNodeDispT<T>::get_Shape(void)
{
  Powerpoint_xp::Shape* Shape;
  this->get_Shape((Powerpoint_xp::Shape**)&Shape);
  return Shape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeDispT<T>::get_Root(Powerpoint_xp::DiagramNode** Root/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Root"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DiagramNode**)Root /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::DiagramNode* __fastcall
DiagramNodeDispT<T>::get_Root(void)
{
  Powerpoint_xp::DiagramNode* Root;
  this->get_Root((Powerpoint_xp::DiagramNode**)&Root);
  return Root;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeDispT<T>::get_Diagram(Powerpoint_xp::Diagram** Diagram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Diagram"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Diagram**)Diagram /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Diagram* __fastcall
DiagramNodeDispT<T>::get_Diagram(void)
{
  Powerpoint_xp::Diagram* Diagram;
  this->get_Diagram((Powerpoint_xp::Diagram**)&Diagram);
  return Diagram;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeDispT<T>::get_Layout(Office_xp::MsoOrgChartLayoutType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Layout"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoOrgChartLayoutType __fastcall
DiagramNodeDispT<T>::get_Layout(void)
{
  Office_xp::MsoOrgChartLayoutType Type;
  this->get_Layout((Office_xp::MsoOrgChartLayoutType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeDispT<T>::set_Layout(Office_xp::MsoOrgChartLayoutType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Layout"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeDispT<T>::get_TextShape(Powerpoint_xp::Shape** Shape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextShape"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Shape /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
DiagramNodeDispT<T>::get_TextShape(void)
{
  Powerpoint_xp::Shape* Shape;
  this->get_TextShape((Powerpoint_xp::Shape**)&Shape);
  return Shape;
}

// *********************************************************************//
// DispIntf:  DiagramNodeChildren
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeChildrenDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
DiagramNodeChildrenDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeChildrenDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
DiagramNodeChildrenDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeChildrenDispT<T>::get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunkEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
DiagramNodeChildrenDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunkEnum;
  this->get__NewEnum((LPUNKNOWN*)&ppunkEnum);
  return ppunkEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeChildrenDispT<T>::Item(VARIANT Index/*[in]*/, 
                                  Powerpoint_xp::DiagramNode** Node/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DiagramNode**)Node /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::DiagramNode* __fastcall
DiagramNodeChildrenDispT<T>::Item(VARIANT Index/*[in]*/)
{
  Powerpoint_xp::DiagramNode* Node;
  this->Item(Index, (Powerpoint_xp::DiagramNode**)&Node);
  return Node;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeChildrenDispT<T>::AddNode(VARIANT Index/*[in,def,opt]*/, 
                                     Office_xp::MsoDiagramNodeType NodeType/*[in,def,opt]*/, 
                                     Powerpoint_xp::DiagramNode** NewNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddNode"), DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  _args[2] = (int)NodeType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DiagramNode**)NewNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::DiagramNode* __fastcall
DiagramNodeChildrenDispT<T>::AddNode(VARIANT Index/*[in,def,opt]*/, 
                                     Office_xp::MsoDiagramNodeType NodeType/*[in,def,opt]*/)
{
  Powerpoint_xp::DiagramNode* NewNode;
  this->AddNode(Index, NodeType, (Powerpoint_xp::DiagramNode**)&NewNode);
  return NewNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeChildrenDispT<T>::SelectAll()
{
  _TDispID _dispid(*this, OLETEXT("SelectAll"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeChildrenDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
DiagramNodeChildrenDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeChildrenDispT<T>::get_Count(int* iDiagramNodes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(iDiagramNodes /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
DiagramNodeChildrenDispT<T>::get_Count(void)
{
  int iDiagramNodes;
  this->get_Count((int*)&iDiagramNodes);
  return iDiagramNodes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeChildrenDispT<T>::get_FirstChild(Powerpoint_xp::DiagramNode** First/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirstChild"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DiagramNode**)First /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::DiagramNode* __fastcall
DiagramNodeChildrenDispT<T>::get_FirstChild(void)
{
  Powerpoint_xp::DiagramNode* First;
  this->get_FirstChild((Powerpoint_xp::DiagramNode**)&First);
  return First;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodeChildrenDispT<T>::get_LastChild(Powerpoint_xp::DiagramNode** Last/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastChild"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DiagramNode**)Last /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::DiagramNode* __fastcall
DiagramNodeChildrenDispT<T>::get_LastChild(void)
{
  Powerpoint_xp::DiagramNode* Last;
  this->get_LastChild((Powerpoint_xp::DiagramNode**)&Last);
  return Last;
}

// *********************************************************************//
// DispIntf:  DiagramNodes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934DA-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodesDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
DiagramNodesDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodesDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
DiagramNodesDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodesDispT<T>::get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunkEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
DiagramNodesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunkEnum;
  this->get__NewEnum((LPUNKNOWN*)&ppunkEnum);
  return ppunkEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodesDispT<T>::Item(VARIANT Index/*[in]*/, Powerpoint_xp::DiagramNode** ppdn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DiagramNode**)ppdn /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::DiagramNode* __fastcall
DiagramNodesDispT<T>::Item(VARIANT Index/*[in]*/)
{
  Powerpoint_xp::DiagramNode* ppdn;
  this->Item(Index, (Powerpoint_xp::DiagramNode**)&ppdn);
  return ppdn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodesDispT<T>::SelectAll()
{
  _TDispID _dispid(*this, OLETEXT("SelectAll"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
DiagramNodesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramNodesDispT<T>::get_Count(int* iDiagramNodes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(iDiagramNodes /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
DiagramNodesDispT<T>::get_Count(void)
{
  int iDiagramNodes;
  this->get_Count((int*)&iDiagramNodes);
  return iDiagramNodes;
}

// *********************************************************************//
// DispIntf:  Diagram
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934DB-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
DiagramDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
DiagramDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
DiagramDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramDispT<T>::get_Nodes(Powerpoint_xp::DiagramNodes** Nodes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Nodes"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::DiagramNodes**)Nodes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::DiagramNodes* __fastcall
DiagramDispT<T>::get_Nodes(void)
{
  Powerpoint_xp::DiagramNodes* Nodes;
  this->get_Nodes((Powerpoint_xp::DiagramNodes**)&Nodes);
  return Nodes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramDispT<T>::get_Type(Office_xp::MsoDiagramType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoDiagramType __fastcall
DiagramDispT<T>::get_Type(void)
{
  Office_xp::MsoDiagramType Type;
  this->get_Type((Office_xp::MsoDiagramType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramDispT<T>::get_AutoLayout(Office_xp::MsoTriState* AutoLayout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLayout"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoLayout /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
DiagramDispT<T>::get_AutoLayout(void)
{
  Office_xp::MsoTriState AutoLayout;
  this->get_AutoLayout((Office_xp::MsoTriState*)&AutoLayout);
  return AutoLayout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramDispT<T>::set_AutoLayout(Office_xp::MsoTriState AutoLayout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLayout"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoLayout /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramDispT<T>::get_Reverse(Office_xp::MsoTriState* Reverse/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Reverse"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Reverse /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
DiagramDispT<T>::get_Reverse(void)
{
  Office_xp::MsoTriState Reverse;
  this->get_Reverse((Office_xp::MsoTriState*)&Reverse);
  return Reverse;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramDispT<T>::set_Reverse(Office_xp::MsoTriState Reverse/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Reverse"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = (int)Reverse /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramDispT<T>::get_AutoFormat(Office_xp::MsoTriState* AutoFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFormat"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoFormat /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
DiagramDispT<T>::get_AutoFormat(void)
{
  Office_xp::MsoTriState AutoFormat;
  this->get_AutoFormat((Office_xp::MsoTriState*)&AutoFormat);
  return AutoFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramDispT<T>::set_AutoFormat(Office_xp::MsoTriState AutoFormat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFormat"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoFormat /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DiagramDispT<T>::Convert(Office_xp::MsoDiagramType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Convert"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  TimeLine
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934DC-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimeLineDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
TimeLineDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimeLineDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TimeLineDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimeLineDispT<T>::get_MainSequence(Powerpoint_xp::Sequence** MainSequence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MainSequence"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Sequence**)MainSequence /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Sequence* __fastcall
TimeLineDispT<T>::get_MainSequence(void)
{
  Powerpoint_xp::Sequence* MainSequence;
  this->get_MainSequence((Powerpoint_xp::Sequence**)&MainSequence);
  return MainSequence;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimeLineDispT<T>::get_InteractiveSequences(Powerpoint_xp::Sequences** InteractiveSequences/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InteractiveSequences"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Sequences**)InteractiveSequences /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Sequences* __fastcall
TimeLineDispT<T>::get_InteractiveSequences(void)
{
  Powerpoint_xp::Sequences* InteractiveSequences;
  this->get_InteractiveSequences((Powerpoint_xp::Sequences**)&InteractiveSequences);
  return InteractiveSequences;
}

// *********************************************************************//
// DispIntf:  Sequences
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934DD-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequencesDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
SequencesDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequencesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SequencesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequencesDispT<T>::Item(int Index/*[in]*/, Powerpoint_xp::Sequence** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Sequence**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Sequence* __fastcall
SequencesDispT<T>::Item(int Index/*[in]*/)
{
  Powerpoint_xp::Sequence* Item;
  this->Item(Index, (Powerpoint_xp::Sequence**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequencesDispT<T>::Add(int Index/*[in,def,opt]*/, Powerpoint_xp::Sequence** Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Sequence**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Sequence* __fastcall
SequencesDispT<T>::Add(int Index/*[in,def,opt]*/)
{
  Powerpoint_xp::Sequence* Add;
  this->Add(Index, (Powerpoint_xp::Sequence**)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequencesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
SequencesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequencesDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
SequencesDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequencesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SequencesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Sequence
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934DE-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequenceDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
SequenceDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequenceDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SequenceDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequenceDispT<T>::Item(int Index/*[in]*/, Powerpoint_xp::Effect** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Effect**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Effect* __fastcall
SequenceDispT<T>::Item(int Index/*[in]*/)
{
  Powerpoint_xp::Effect* Item;
  this->Item(Index, (Powerpoint_xp::Effect**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequenceDispT<T>::AddEffect(Powerpoint_xp::Shape* Shape/*[in]*/, 
                            Powerpoint_xp::MsoAnimEffect effectId/*[in]*/, 
                            Powerpoint_xp::MsoAnimateByLevel Level/*[in,def,opt]*/, 
                            Powerpoint_xp::MsoAnimTriggerType trigger/*[in,def,opt]*/, 
                            int Index/*[in,def,opt]*/, 
                            Powerpoint_xp::Effect** Effect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEffect"), DISPID(2003));
  TAutoArgs<5> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::Shape*)Shape /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)effectId /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)Level /*[VT_USERDEFINED:0]*/;
  _args[4] = (int)trigger /*[VT_USERDEFINED:0]*/;
  _args[5] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Effect**)Effect /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Effect* __fastcall
SequenceDispT<T>::AddEffect(Powerpoint_xp::Shape* Shape/*[in]*/, 
                            Powerpoint_xp::MsoAnimEffect effectId/*[in]*/, 
                            Powerpoint_xp::MsoAnimateByLevel Level/*[in,def,opt]*/, 
                            Powerpoint_xp::MsoAnimTriggerType trigger/*[in,def,opt]*/, 
                            int Index/*[in,def,opt]*/)
{
  Powerpoint_xp::Effect* Effect;
  this->AddEffect(Shape, effectId, Level, trigger, Index, (Powerpoint_xp::Effect**)&Effect);
  return Effect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequenceDispT<T>::Clone(Powerpoint_xp::Effect* Effect/*[in]*/, int Index/*[in,def,opt]*/, 
                        Powerpoint_xp::Effect** Clone/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Clone"), DISPID(2004));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::Effect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[2] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Effect**)Clone /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Effect* __fastcall
SequenceDispT<T>::Clone(Powerpoint_xp::Effect* Effect/*[in]*/, int Index/*[in,def,opt]*/)
{
  Powerpoint_xp::Effect* Clone;
  this->Clone(Effect, Index, (Powerpoint_xp::Effect**)&Clone);
  return Clone;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequenceDispT<T>::FindFirstAnimationFor(Powerpoint_xp::Shape* Shape/*[in]*/, 
                                        Powerpoint_xp::Effect** FindFirstAnimationFor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindFirstAnimationFor"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::Shape*)Shape /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Effect**)FindFirstAnimationFor /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Effect* __fastcall
SequenceDispT<T>::FindFirstAnimationFor(Powerpoint_xp::Shape* Shape/*[in]*/)
{
  Powerpoint_xp::Effect* FindFirstAnimationFor;
  this->FindFirstAnimationFor(Shape, (Powerpoint_xp::Effect**)&FindFirstAnimationFor);
  return FindFirstAnimationFor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequenceDispT<T>::FindFirstAnimationForClick(int click/*[in]*/, 
                                             Powerpoint_xp::Effect** FindFirstAnimationForClick/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindFirstAnimationForClick"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = click /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Effect**)FindFirstAnimationForClick /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Effect* __fastcall
SequenceDispT<T>::FindFirstAnimationForClick(int click/*[in]*/)
{
  Powerpoint_xp::Effect* FindFirstAnimationForClick;
  this->FindFirstAnimationForClick(click, (Powerpoint_xp::Effect**)&FindFirstAnimationForClick);
  return FindFirstAnimationForClick;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequenceDispT<T>::ConvertToBuildLevel(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                      Powerpoint_xp::MsoAnimateByLevel Level/*[in]*/, 
                                      Powerpoint_xp::Effect** ConvertToBuildLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConvertToBuildLevel"), DISPID(2007));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::Effect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Level /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Effect**)ConvertToBuildLevel /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Effect* __fastcall
SequenceDispT<T>::ConvertToBuildLevel(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                      Powerpoint_xp::MsoAnimateByLevel Level/*[in]*/)
{
  Powerpoint_xp::Effect* ConvertToBuildLevel;
  this->ConvertToBuildLevel(Effect, Level, (Powerpoint_xp::Effect**)&ConvertToBuildLevel);
  return ConvertToBuildLevel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequenceDispT<T>::ConvertToAfterEffect(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                       Powerpoint_xp::MsoAnimAfterEffect After/*[in]*/, 
                                       Office_xp::MsoRGBType DimColor/*[in,def,opt]*/, 
                                       Powerpoint_xp::PpColorSchemeIndex DimSchemeColor/*[in,def,opt]*/
                                       , 
                                       Powerpoint_xp::Effect** ConvertToAfterEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConvertToAfterEffect"), DISPID(2008));
  TAutoArgs<4> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::Effect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)After /*[VT_USERDEFINED:0]*/;
  _args[3] = DimColor /*[VT_I4:0]*/;
  _args[4] = (int)DimSchemeColor /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Effect**)ConvertToAfterEffect /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Effect* __fastcall
SequenceDispT<T>::ConvertToAfterEffect(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                       Powerpoint_xp::MsoAnimAfterEffect After/*[in]*/, 
                                       Office_xp::MsoRGBType DimColor/*[in,def,opt]*/, 
                                       Powerpoint_xp::PpColorSchemeIndex DimSchemeColor/*[in,def,opt]*/)
{
  Powerpoint_xp::Effect* ConvertToAfterEffect;
  this->ConvertToAfterEffect(Effect, After, DimColor, DimSchemeColor, (Powerpoint_xp::Effect**)&ConvertToAfterEffect);
  return ConvertToAfterEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequenceDispT<T>::ConvertToAnimateBackground(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                             Office_xp::MsoTriState AnimateBackground/*[in]*/, 
                                             Powerpoint_xp::Effect** ConvertToAnimateBackground/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConvertToAnimateBackground"), DISPID(2009));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::Effect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)AnimateBackground /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Effect**)ConvertToAnimateBackground /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Effect* __fastcall
SequenceDispT<T>::ConvertToAnimateBackground(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                             Office_xp::MsoTriState AnimateBackground/*[in]*/)
{
  Powerpoint_xp::Effect* ConvertToAnimateBackground;
  this->ConvertToAnimateBackground(Effect, AnimateBackground, (Powerpoint_xp::Effect**)&ConvertToAnimateBackground);
  return ConvertToAnimateBackground;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequenceDispT<T>::ConvertToAnimateInReverse(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                            Office_xp::MsoTriState animateInReverse/*[in]*/, 
                                            Powerpoint_xp::Effect** ConvertToAnimateInReverse/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConvertToAnimateInReverse"), DISPID(2010));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::Effect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)animateInReverse /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Effect**)ConvertToAnimateInReverse /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Effect* __fastcall
SequenceDispT<T>::ConvertToAnimateInReverse(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                            Office_xp::MsoTriState animateInReverse/*[in]*/)
{
  Powerpoint_xp::Effect* ConvertToAnimateInReverse;
  this->ConvertToAnimateInReverse(Effect, animateInReverse, (Powerpoint_xp::Effect**)&ConvertToAnimateInReverse);
  return ConvertToAnimateInReverse;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequenceDispT<T>::ConvertToTextUnitEffect(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                          Powerpoint_xp::MsoAnimTextUnitEffect unitEffect/*[in]*/, 
                                          Powerpoint_xp::Effect** ConvertToTextUnitEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConvertToTextUnitEffect"), DISPID(2011));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::Effect*)Effect /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)unitEffect /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Effect**)ConvertToTextUnitEffect /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Effect* __fastcall
SequenceDispT<T>::ConvertToTextUnitEffect(Powerpoint_xp::Effect* Effect/*[in]*/, 
                                          Powerpoint_xp::MsoAnimTextUnitEffect unitEffect/*[in]*/)
{
  Powerpoint_xp::Effect* ConvertToTextUnitEffect;
  this->ConvertToTextUnitEffect(Effect, unitEffect, (Powerpoint_xp::Effect**)&ConvertToTextUnitEffect);
  return ConvertToTextUnitEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequenceDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
SequenceDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequenceDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
SequenceDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SequenceDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SequenceDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Effect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934DF-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
EffectDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
EffectDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::get_Shape(Powerpoint_xp::Shape** Shape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shape"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Shape /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
EffectDispT<T>::get_Shape(void)
{
  Powerpoint_xp::Shape* Shape;
  this->get_Shape((Powerpoint_xp::Shape**)&Shape);
  return Shape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::set_Shape(Powerpoint_xp::Shape* Shape/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shape"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::Shape*)Shape /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::MoveTo(int toPos/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveTo"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = toPos /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::MoveBefore(Powerpoint_xp::Effect* Effect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveBefore"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::Effect*)Effect /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::MoveAfter(Powerpoint_xp::Effect* Effect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveAfter"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::Effect*)Effect /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2007));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::get_Index(int* Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Index /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
EffectDispT<T>::get_Index(void)
{
  int Index;
  this->get_Index((int*)&Index);
  return Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::get_Timing(Powerpoint_xp::Timing** Timing/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Timing"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Timing**)Timing /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Timing* __fastcall
EffectDispT<T>::get_Timing(void)
{
  Powerpoint_xp::Timing* Timing;
  this->get_Timing((Powerpoint_xp::Timing**)&Timing);
  return Timing;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::get_EffectType(Powerpoint_xp::MsoAnimEffect* EffectType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EffectType"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EffectType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::MsoAnimEffect __fastcall
EffectDispT<T>::get_EffectType(void)
{
  Powerpoint_xp::MsoAnimEffect EffectType;
  this->get_EffectType((Powerpoint_xp::MsoAnimEffect*)&EffectType);
  return EffectType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::set_EffectType(Powerpoint_xp::MsoAnimEffect EffectType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EffectType"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = (int)EffectType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::get_EffectParameters(Powerpoint_xp::EffectParameters** EffectParameters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EffectParameters"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::EffectParameters**)EffectParameters /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::EffectParameters* __fastcall
EffectDispT<T>::get_EffectParameters(void)
{
  Powerpoint_xp::EffectParameters* EffectParameters;
  this->get_EffectParameters((Powerpoint_xp::EffectParameters**)&EffectParameters);
  return EffectParameters;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::get_TextRangeStart(int* TextRangeStart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextRangeStart"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TextRangeStart /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
EffectDispT<T>::get_TextRangeStart(void)
{
  int TextRangeStart;
  this->get_TextRangeStart((int*)&TextRangeStart);
  return TextRangeStart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::get_TextRangeLength(int* TextRangeLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextRangeLength"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TextRangeLength /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
EffectDispT<T>::get_TextRangeLength(void)
{
  int TextRangeLength;
  this->get_TextRangeLength((int*)&TextRangeLength);
  return TextRangeLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::get_Paragraph(int* Paragraph/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Paragraph"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Paragraph /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
EffectDispT<T>::get_Paragraph(void)
{
  int Paragraph;
  this->get_Paragraph((int*)&Paragraph);
  return Paragraph;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::set_Paragraph(int Paragraph/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Paragraph"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = Paragraph /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::get_DisplayName(BSTR* DisplayName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayName"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
EffectDispT<T>::get_DisplayName(void)
{
  BSTR DisplayName;
  this->get_DisplayName((BSTR*)&DisplayName);
  return DisplayName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::get_Exit(Office_xp::MsoTriState* Exit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Exit"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Exit /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
EffectDispT<T>::get_Exit(void)
{
  Office_xp::MsoTriState Exit;
  this->get_Exit((Office_xp::MsoTriState*)&Exit);
  return Exit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::set_Exit(Office_xp::MsoTriState Exit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Exit"), DISPID(2016));
  TAutoArgs<1> _args;
  _args[1] = (int)Exit /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::get_Behaviors(Powerpoint_xp::AnimationBehaviors** Behaviors/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Behaviors"), DISPID(2017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::AnimationBehaviors**)Behaviors /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::AnimationBehaviors* __fastcall
EffectDispT<T>::get_Behaviors(void)
{
  Powerpoint_xp::AnimationBehaviors* Behaviors;
  this->get_Behaviors((Powerpoint_xp::AnimationBehaviors**)&Behaviors);
  return Behaviors;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectDispT<T>::get_EffectInformation(Powerpoint_xp::EffectInformation** EffectInformation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EffectInformation"), DISPID(2018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::EffectInformation**)EffectInformation /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::EffectInformation* __fastcall
EffectDispT<T>::get_EffectInformation(void)
{
  Powerpoint_xp::EffectInformation* EffectInformation;
  this->get_EffectInformation((Powerpoint_xp::EffectInformation**)&EffectInformation);
  return EffectInformation;
}

// *********************************************************************//
// DispIntf:  Timing
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
TimingDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TimingDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::get_Duration(float* Duration/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Duration"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Duration /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TimingDispT<T>::get_Duration(void)
{
  float Duration;
  this->get_Duration((float*)&Duration);
  return Duration;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::set_Duration(float Duration/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Duration"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = Duration /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::get_TriggerType(Powerpoint_xp::MsoAnimTriggerType* TriggerType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TriggerType"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TriggerType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::MsoAnimTriggerType __fastcall
TimingDispT<T>::get_TriggerType(void)
{
  Powerpoint_xp::MsoAnimTriggerType TriggerType;
  this->get_TriggerType((Powerpoint_xp::MsoAnimTriggerType*)&TriggerType);
  return TriggerType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::set_TriggerType(Powerpoint_xp::MsoAnimTriggerType TriggerType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TriggerType"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)TriggerType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::get_TriggerDelayTime(float* TriggerDelayTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TriggerDelayTime"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TriggerDelayTime /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TimingDispT<T>::get_TriggerDelayTime(void)
{
  float TriggerDelayTime;
  this->get_TriggerDelayTime((float*)&TriggerDelayTime);
  return TriggerDelayTime;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::set_TriggerDelayTime(float TriggerDelayTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TriggerDelayTime"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = TriggerDelayTime /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::get_TriggerShape(Powerpoint_xp::Shape** TriggerShape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TriggerShape"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)TriggerShape /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
TimingDispT<T>::get_TriggerShape(void)
{
  Powerpoint_xp::Shape* TriggerShape;
  this->get_TriggerShape((Powerpoint_xp::Shape**)&TriggerShape);
  return TriggerShape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::set_TriggerShape(Powerpoint_xp::Shape* TriggerShape/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TriggerShape"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_xp::Shape*)TriggerShape /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::get_RepeatCount(int* RepeatCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RepeatCount"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RepeatCount /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
TimingDispT<T>::get_RepeatCount(void)
{
  int RepeatCount;
  this->get_RepeatCount((int*)&RepeatCount);
  return RepeatCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::set_RepeatCount(int RepeatCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RepeatCount"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = RepeatCount /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::get_RepeatDuration(float* RepeatDuration/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RepeatDuration"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RepeatDuration /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TimingDispT<T>::get_RepeatDuration(void)
{
  float RepeatDuration;
  this->get_RepeatDuration((float*)&RepeatDuration);
  return RepeatDuration;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::set_RepeatDuration(float RepeatDuration/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RepeatDuration"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = RepeatDuration /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::get_Speed(float* Speed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Speed"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Speed /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TimingDispT<T>::get_Speed(void)
{
  float Speed;
  this->get_Speed((float*)&Speed);
  return Speed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::set_Speed(float Speed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Speed"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = Speed /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::get_Accelerate(float* Accelerate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accelerate"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Accelerate /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TimingDispT<T>::get_Accelerate(void)
{
  float Accelerate;
  this->get_Accelerate((float*)&Accelerate);
  return Accelerate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::set_Accelerate(float Accelerate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accelerate"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = Accelerate /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::get_Decelerate(float* Decelerate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Decelerate"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Decelerate /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TimingDispT<T>::get_Decelerate(void)
{
  float Decelerate;
  this->get_Decelerate((float*)&Decelerate);
  return Decelerate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::set_Decelerate(float Decelerate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Decelerate"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = Decelerate /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::get_AutoReverse(Office_xp::MsoTriState* AutoReverse/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoReverse"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoReverse /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
TimingDispT<T>::get_AutoReverse(void)
{
  Office_xp::MsoTriState AutoReverse;
  this->get_AutoReverse((Office_xp::MsoTriState*)&AutoReverse);
  return AutoReverse;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::set_AutoReverse(Office_xp::MsoTriState AutoReverse/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoReverse"), DISPID(2012));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoReverse /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::get_SmoothStart(Office_xp::MsoTriState* SmoothStart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothStart"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SmoothStart /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
TimingDispT<T>::get_SmoothStart(void)
{
  Office_xp::MsoTriState SmoothStart;
  this->get_SmoothStart((Office_xp::MsoTriState*)&SmoothStart);
  return SmoothStart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::set_SmoothStart(Office_xp::MsoTriState SmoothStart/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothStart"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = (int)SmoothStart /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::get_SmoothEnd(Office_xp::MsoTriState* SmoothEnd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothEnd"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SmoothEnd /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
TimingDispT<T>::get_SmoothEnd(void)
{
  Office_xp::MsoTriState SmoothEnd;
  this->get_SmoothEnd((Office_xp::MsoTriState*)&SmoothEnd);
  return SmoothEnd;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::set_SmoothEnd(Office_xp::MsoTriState SmoothEnd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothEnd"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = (int)SmoothEnd /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::get_RewindAtEnd(Office_xp::MsoTriState* RewindAtEnd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewindAtEnd"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RewindAtEnd /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
TimingDispT<T>::get_RewindAtEnd(void)
{
  Office_xp::MsoTriState RewindAtEnd;
  this->get_RewindAtEnd((Office_xp::MsoTriState*)&RewindAtEnd);
  return RewindAtEnd;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::set_RewindAtEnd(Office_xp::MsoTriState RewindAtEnd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewindAtEnd"), DISPID(2015));
  TAutoArgs<1> _args;
  _args[1] = (int)RewindAtEnd /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::get_Restart(Powerpoint_xp::MsoAnimEffectRestart* Restart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Restart"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Restart /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::MsoAnimEffectRestart __fastcall
TimingDispT<T>::get_Restart(void)
{
  Powerpoint_xp::MsoAnimEffectRestart Restart;
  this->get_Restart((Powerpoint_xp::MsoAnimEffectRestart*)&Restart);
  return Restart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TimingDispT<T>::set_Restart(Powerpoint_xp::MsoAnimEffectRestart Restart/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Restart"), DISPID(2016));
  TAutoArgs<1> _args;
  _args[1] = (int)Restart /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  EffectParameters
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E1-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectParametersDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
EffectParametersDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectParametersDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
EffectParametersDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectParametersDispT<T>::get_Direction(Powerpoint_xp::MsoAnimDirection* Direction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Direction"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Direction /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::MsoAnimDirection __fastcall
EffectParametersDispT<T>::get_Direction(void)
{
  Powerpoint_xp::MsoAnimDirection Direction;
  this->get_Direction((Powerpoint_xp::MsoAnimDirection*)&Direction);
  return Direction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectParametersDispT<T>::set_Direction(Powerpoint_xp::MsoAnimDirection Direction/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Direction"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)Direction /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectParametersDispT<T>::get_Amount(float* Amount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Amount"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Amount /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
EffectParametersDispT<T>::get_Amount(void)
{
  float Amount;
  this->get_Amount((float*)&Amount);
  return Amount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectParametersDispT<T>::set_Amount(float Amount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Amount"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = Amount /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectParametersDispT<T>::get_Size(float* Size/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Size /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
EffectParametersDispT<T>::get_Size(void)
{
  float Size;
  this->get_Size((float*)&Size);
  return Size;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectParametersDispT<T>::set_Size(float Size/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = Size /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectParametersDispT<T>::get_Color2(Powerpoint_xp::ColorFormat** Color2/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color2"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorFormat**)Color2 /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorFormat* __fastcall
EffectParametersDispT<T>::get_Color2(void)
{
  Powerpoint_xp::ColorFormat* Color2;
  this->get_Color2((Powerpoint_xp::ColorFormat**)&Color2);
  return Color2;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectParametersDispT<T>::get_Relative(Office_xp::MsoTriState* Relative/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Relative"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Relative /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
EffectParametersDispT<T>::get_Relative(void)
{
  Office_xp::MsoTriState Relative;
  this->get_Relative((Office_xp::MsoTriState*)&Relative);
  return Relative;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectParametersDispT<T>::set_Relative(Office_xp::MsoTriState Relative/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Relative"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)Relative /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectParametersDispT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
EffectParametersDispT<T>::get_FontName(void)
{
  BSTR FontName;
  this->get_FontName((BSTR*)&FontName);
  return FontName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectParametersDispT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = FontName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  EffectInformation
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E2-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectInformationDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
EffectInformationDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectInformationDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
EffectInformationDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectInformationDispT<T>::get_AfterEffect(Powerpoint_xp::MsoAnimAfterEffect* AfterEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterEffect"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AfterEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::MsoAnimAfterEffect __fastcall
EffectInformationDispT<T>::get_AfterEffect(void)
{
  Powerpoint_xp::MsoAnimAfterEffect AfterEffect;
  this->get_AfterEffect((Powerpoint_xp::MsoAnimAfterEffect*)&AfterEffect);
  return AfterEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectInformationDispT<T>::get_AnimateBackground(Office_xp::MsoTriState* AnimateBackground/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimateBackground"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AnimateBackground /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
EffectInformationDispT<T>::get_AnimateBackground(void)
{
  Office_xp::MsoTriState AnimateBackground;
  this->get_AnimateBackground((Office_xp::MsoTriState*)&AnimateBackground);
  return AnimateBackground;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectInformationDispT<T>::get_AnimateTextInReverse(Office_xp::MsoTriState* AnimateTextInReverse/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimateTextInReverse"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AnimateTextInReverse /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
EffectInformationDispT<T>::get_AnimateTextInReverse(void)
{
  Office_xp::MsoTriState AnimateTextInReverse;
  this->get_AnimateTextInReverse((Office_xp::MsoTriState*)&AnimateTextInReverse);
  return AnimateTextInReverse;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectInformationDispT<T>::get_BuildByLevelEffect(Powerpoint_xp::MsoAnimateByLevel* BuildByLevelEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildByLevelEffect"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BuildByLevelEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::MsoAnimateByLevel __fastcall
EffectInformationDispT<T>::get_BuildByLevelEffect(void)
{
  Powerpoint_xp::MsoAnimateByLevel BuildByLevelEffect;
  this->get_BuildByLevelEffect((Powerpoint_xp::MsoAnimateByLevel*)&BuildByLevelEffect);
  return BuildByLevelEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectInformationDispT<T>::get_Dim(Powerpoint_xp::ColorFormat** Dim/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Dim"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorFormat**)Dim /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorFormat* __fastcall
EffectInformationDispT<T>::get_Dim(void)
{
  Powerpoint_xp::ColorFormat* Dim;
  this->get_Dim((Powerpoint_xp::ColorFormat**)&Dim);
  return Dim;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectInformationDispT<T>::get_PlaySettings(Powerpoint_xp::PlaySettings** PlaySettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlaySettings"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PlaySettings**)PlaySettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PlaySettings* __fastcall
EffectInformationDispT<T>::get_PlaySettings(void)
{
  Powerpoint_xp::PlaySettings* PlaySettings;
  this->get_PlaySettings((Powerpoint_xp::PlaySettings**)&PlaySettings);
  return PlaySettings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectInformationDispT<T>::get_SoundEffect(Powerpoint_xp::SoundEffect** SoundEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SoundEffect"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SoundEffect**)SoundEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::SoundEffect* __fastcall
EffectInformationDispT<T>::get_SoundEffect(void)
{
  Powerpoint_xp::SoundEffect* SoundEffect;
  this->get_SoundEffect((Powerpoint_xp::SoundEffect**)&SoundEffect);
  return SoundEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EffectInformationDispT<T>::get_TextUnitEffect(Powerpoint_xp::MsoAnimTextUnitEffect* TextUnitEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextUnitEffect"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TextUnitEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::MsoAnimTextUnitEffect __fastcall
EffectInformationDispT<T>::get_TextUnitEffect(void)
{
  Powerpoint_xp::MsoAnimTextUnitEffect TextUnitEffect;
  this->get_TextUnitEffect((Powerpoint_xp::MsoAnimTextUnitEffect*)&TextUnitEffect);
  return TextUnitEffect;
}

// *********************************************************************//
// DispIntf:  AnimationBehaviors
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E3-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
AnimationBehaviorsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AnimationBehaviorsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorsDispT<T>::Item(int Index/*[in]*/, 
                                 Powerpoint_xp::AnimationBehavior** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::AnimationBehavior**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::AnimationBehavior* __fastcall
AnimationBehaviorsDispT<T>::Item(int Index/*[in]*/)
{
  Powerpoint_xp::AnimationBehavior* Item;
  this->Item(Index, (Powerpoint_xp::AnimationBehavior**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorsDispT<T>::Add(Powerpoint_xp::MsoAnimType Type/*[in]*/, int Index/*[in,def,opt]*/, 
                                Powerpoint_xp::AnimationBehavior** Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<2> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::AnimationBehavior**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::AnimationBehavior* __fastcall
AnimationBehaviorsDispT<T>::Add(Powerpoint_xp::MsoAnimType Type/*[in]*/, int Index/*[in,def,opt]*/)
{
  Powerpoint_xp::AnimationBehavior* Add;
  this->Add(Type, Index, (Powerpoint_xp::AnimationBehavior**)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
AnimationBehaviorsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
AnimationBehaviorsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
AnimationBehaviorsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  AnimationBehavior
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E4-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
AnimationBehaviorDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AnimationBehaviorDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorDispT<T>::get_Additive(Powerpoint_xp::MsoAnimAdditive* Additive/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Additive"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Additive /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::MsoAnimAdditive __fastcall
AnimationBehaviorDispT<T>::get_Additive(void)
{
  Powerpoint_xp::MsoAnimAdditive Additive;
  this->get_Additive((Powerpoint_xp::MsoAnimAdditive*)&Additive);
  return Additive;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorDispT<T>::set_Additive(Powerpoint_xp::MsoAnimAdditive Additive/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Additive"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)Additive /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorDispT<T>::get_Accumulate(Powerpoint_xp::MsoAnimAccumulate* Accumulate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accumulate"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Accumulate /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::MsoAnimAccumulate __fastcall
AnimationBehaviorDispT<T>::get_Accumulate(void)
{
  Powerpoint_xp::MsoAnimAccumulate Accumulate;
  this->get_Accumulate((Powerpoint_xp::MsoAnimAccumulate*)&Accumulate);
  return Accumulate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorDispT<T>::set_Accumulate(Powerpoint_xp::MsoAnimAccumulate Accumulate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accumulate"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)Accumulate /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorDispT<T>::get_Type(Powerpoint_xp::MsoAnimType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::MsoAnimType __fastcall
AnimationBehaviorDispT<T>::get_Type(void)
{
  Powerpoint_xp::MsoAnimType Type;
  this->get_Type((Powerpoint_xp::MsoAnimType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorDispT<T>::set_Type(Powerpoint_xp::MsoAnimType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorDispT<T>::get_MotionEffect(Powerpoint_xp::MotionEffect** MotionEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MotionEffect"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::MotionEffect**)MotionEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::MotionEffect* __fastcall
AnimationBehaviorDispT<T>::get_MotionEffect(void)
{
  Powerpoint_xp::MotionEffect* MotionEffect;
  this->get_MotionEffect((Powerpoint_xp::MotionEffect**)&MotionEffect);
  return MotionEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorDispT<T>::get_ColorEffect(Powerpoint_xp::ColorEffect** ColorEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorEffect"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorEffect**)ColorEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorEffect* __fastcall
AnimationBehaviorDispT<T>::get_ColorEffect(void)
{
  Powerpoint_xp::ColorEffect* ColorEffect;
  this->get_ColorEffect((Powerpoint_xp::ColorEffect**)&ColorEffect);
  return ColorEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorDispT<T>::get_ScaleEffect(Powerpoint_xp::ScaleEffect** ScaleEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleEffect"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ScaleEffect**)ScaleEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ScaleEffect* __fastcall
AnimationBehaviorDispT<T>::get_ScaleEffect(void)
{
  Powerpoint_xp::ScaleEffect* ScaleEffect;
  this->get_ScaleEffect((Powerpoint_xp::ScaleEffect**)&ScaleEffect);
  return ScaleEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorDispT<T>::get_RotationEffect(Powerpoint_xp::RotationEffect** RotationEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotationEffect"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::RotationEffect**)RotationEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::RotationEffect* __fastcall
AnimationBehaviorDispT<T>::get_RotationEffect(void)
{
  Powerpoint_xp::RotationEffect* RotationEffect;
  this->get_RotationEffect((Powerpoint_xp::RotationEffect**)&RotationEffect);
  return RotationEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorDispT<T>::get_PropertyEffect(Powerpoint_xp::PropertyEffect** PropertyEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PropertyEffect"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PropertyEffect**)PropertyEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PropertyEffect* __fastcall
AnimationBehaviorDispT<T>::get_PropertyEffect(void)
{
  Powerpoint_xp::PropertyEffect* PropertyEffect;
  this->get_PropertyEffect((Powerpoint_xp::PropertyEffect**)&PropertyEffect);
  return PropertyEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorDispT<T>::get_Timing(Powerpoint_xp::Timing** Timing/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Timing"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Timing**)Timing /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Timing* __fastcall
AnimationBehaviorDispT<T>::get_Timing(void)
{
  Powerpoint_xp::Timing* Timing;
  this->get_Timing((Powerpoint_xp::Timing**)&Timing);
  return Timing;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2012));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorDispT<T>::get_CommandEffect(Powerpoint_xp::CommandEffect** CommandEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandEffect"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::CommandEffect**)CommandEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::CommandEffect* __fastcall
AnimationBehaviorDispT<T>::get_CommandEffect(void)
{
  Powerpoint_xp::CommandEffect* CommandEffect;
  this->get_CommandEffect((Powerpoint_xp::CommandEffect**)&CommandEffect);
  return CommandEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorDispT<T>::get_FilterEffect(Powerpoint_xp::FilterEffect** FilterEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterEffect"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::FilterEffect**)FilterEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::FilterEffect* __fastcall
AnimationBehaviorDispT<T>::get_FilterEffect(void)
{
  Powerpoint_xp::FilterEffect* FilterEffect;
  this->get_FilterEffect((Powerpoint_xp::FilterEffect**)&FilterEffect);
  return FilterEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationBehaviorDispT<T>::get_SetEffect(Powerpoint_xp::SetEffect** SetEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEffect"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::SetEffect**)SetEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::SetEffect* __fastcall
AnimationBehaviorDispT<T>::get_SetEffect(void)
{
  Powerpoint_xp::SetEffect* SetEffect;
  this->get_SetEffect((Powerpoint_xp::SetEffect**)&SetEffect);
  return SetEffect;
}

// *********************************************************************//
// DispIntf:  MotionEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E5-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MotionEffectDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
MotionEffectDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MotionEffectDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
MotionEffectDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MotionEffectDispT<T>::get_ByX(float* ByX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ByX"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ByX /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
MotionEffectDispT<T>::get_ByX(void)
{
  float ByX;
  this->get_ByX((float*)&ByX);
  return ByX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MotionEffectDispT<T>::set_ByX(float ByX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ByX"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = ByX /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MotionEffectDispT<T>::get_ByY(float* ByY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ByY"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ByY /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
MotionEffectDispT<T>::get_ByY(void)
{
  float ByY;
  this->get_ByY((float*)&ByY);
  return ByY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MotionEffectDispT<T>::set_ByY(float ByY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ByY"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = ByY /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MotionEffectDispT<T>::get_FromX(float* FromX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FromX"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FromX /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
MotionEffectDispT<T>::get_FromX(void)
{
  float FromX;
  this->get_FromX((float*)&FromX);
  return FromX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MotionEffectDispT<T>::set_FromX(float FromX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FromX"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = FromX /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MotionEffectDispT<T>::get_FromY(float* FromY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FromY"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FromY /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
MotionEffectDispT<T>::get_FromY(void)
{
  float FromY;
  this->get_FromY((float*)&FromY);
  return FromY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MotionEffectDispT<T>::set_FromY(float FromY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FromY"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = FromY /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MotionEffectDispT<T>::get_ToX(float* ToX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToX"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ToX /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
MotionEffectDispT<T>::get_ToX(void)
{
  float ToX;
  this->get_ToX((float*)&ToX);
  return ToX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MotionEffectDispT<T>::set_ToX(float ToX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToX"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = ToX /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MotionEffectDispT<T>::get_ToY(float* ToY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToY"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ToY /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
MotionEffectDispT<T>::get_ToY(void)
{
  float ToY;
  this->get_ToY((float*)&ToY);
  return ToY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MotionEffectDispT<T>::set_ToY(float ToY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToY"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = ToY /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MotionEffectDispT<T>::get_Path(BSTR* Path/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Path"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Path /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
MotionEffectDispT<T>::get_Path(void)
{
  BSTR Path;
  this->get_Path((BSTR*)&Path);
  return Path;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MotionEffectDispT<T>::set_Path(BSTR Path/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Path"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = Path /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ColorEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E6-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorEffectDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
ColorEffectDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorEffectDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ColorEffectDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorEffectDispT<T>::get_By(Powerpoint_xp::ColorFormat** By/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("By"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorFormat**)By /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorFormat* __fastcall
ColorEffectDispT<T>::get_By(void)
{
  Powerpoint_xp::ColorFormat* By;
  this->get_By((Powerpoint_xp::ColorFormat**)&By);
  return By;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorEffectDispT<T>::get_From(Powerpoint_xp::ColorFormat** From/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("From"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorFormat**)From /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorFormat* __fastcall
ColorEffectDispT<T>::get_From(void)
{
  Powerpoint_xp::ColorFormat* From;
  this->get_From((Powerpoint_xp::ColorFormat**)&From);
  return From;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorEffectDispT<T>::get_To(Powerpoint_xp::ColorFormat** To/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("To"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ColorFormat**)To /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::ColorFormat* __fastcall
ColorEffectDispT<T>::get_To(void)
{
  Powerpoint_xp::ColorFormat* To;
  this->get_To((Powerpoint_xp::ColorFormat**)&To);
  return To;
}

// *********************************************************************//
// DispIntf:  ScaleEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E7-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScaleEffectDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
ScaleEffectDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScaleEffectDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ScaleEffectDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScaleEffectDispT<T>::get_ByX(float* ByX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ByX"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ByX /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ScaleEffectDispT<T>::get_ByX(void)
{
  float ByX;
  this->get_ByX((float*)&ByX);
  return ByX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScaleEffectDispT<T>::set_ByX(float ByX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ByX"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = ByX /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScaleEffectDispT<T>::get_ByY(float* ByY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ByY"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ByY /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ScaleEffectDispT<T>::get_ByY(void)
{
  float ByY;
  this->get_ByY((float*)&ByY);
  return ByY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScaleEffectDispT<T>::set_ByY(float ByY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ByY"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = ByY /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScaleEffectDispT<T>::get_FromX(float* FromX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FromX"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FromX /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ScaleEffectDispT<T>::get_FromX(void)
{
  float FromX;
  this->get_FromX((float*)&FromX);
  return FromX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScaleEffectDispT<T>::set_FromX(float FromX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FromX"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = FromX /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScaleEffectDispT<T>::get_FromY(float* FromY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FromY"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FromY /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ScaleEffectDispT<T>::get_FromY(void)
{
  float FromY;
  this->get_FromY((float*)&FromY);
  return FromY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScaleEffectDispT<T>::set_FromY(float FromY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FromY"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = FromY /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScaleEffectDispT<T>::get_ToX(float* ToX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToX"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ToX /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ScaleEffectDispT<T>::get_ToX(void)
{
  float ToX;
  this->get_ToX((float*)&ToX);
  return ToX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScaleEffectDispT<T>::set_ToX(float ToX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToX"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = ToX /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScaleEffectDispT<T>::get_ToY(float* ToY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToY"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ToY /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ScaleEffectDispT<T>::get_ToY(void)
{
  float ToY;
  this->get_ToY((float*)&ToY);
  return ToY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScaleEffectDispT<T>::set_ToY(float ToY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToY"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = ToY /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  RotationEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E8-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RotationEffectDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
RotationEffectDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RotationEffectDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
RotationEffectDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RotationEffectDispT<T>::get_By(float* By/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("By"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(By /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
RotationEffectDispT<T>::get_By(void)
{
  float By;
  this->get_By((float*)&By);
  return By;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RotationEffectDispT<T>::set_By(float By/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("By"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = By /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RotationEffectDispT<T>::get_From(float* From/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("From"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(From /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
RotationEffectDispT<T>::get_From(void)
{
  float From;
  this->get_From((float*)&From);
  return From;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RotationEffectDispT<T>::set_From(float From/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("From"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = From /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RotationEffectDispT<T>::get_To(float* To/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("To"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(To /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
RotationEffectDispT<T>::get_To(void)
{
  float To;
  this->get_To((float*)&To);
  return To;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RotationEffectDispT<T>::set_To(float To/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("To"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = To /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PropertyEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934E9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyEffectDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
PropertyEffectDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyEffectDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PropertyEffectDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyEffectDispT<T>::get_Property(Powerpoint_xp::MsoAnimProperty* Property/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Property"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Property /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::MsoAnimProperty __fastcall
PropertyEffectDispT<T>::get_Property(void)
{
  Powerpoint_xp::MsoAnimProperty Property;
  this->get_Property((Powerpoint_xp::MsoAnimProperty*)&Property);
  return Property;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyEffectDispT<T>::set_Property(Powerpoint_xp::MsoAnimProperty Property/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Property"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)Property /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyEffectDispT<T>::get_Points(Powerpoint_xp::AnimationPoints** Points/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Points"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::AnimationPoints**)Points /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::AnimationPoints* __fastcall
PropertyEffectDispT<T>::get_Points(void)
{
  Powerpoint_xp::AnimationPoints* Points;
  this->get_Points((Powerpoint_xp::AnimationPoints**)&Points);
  return Points;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyEffectDispT<T>::get_From(VARIANT* From/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("From"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(From /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PropertyEffectDispT<T>::get_From(void)
{
  VARIANT From;
  this->get_From((VARIANT*)&From);
  return From;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyEffectDispT<T>::set_From(VARIANT From/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("From"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = From /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyEffectDispT<T>::get_To(VARIANT* To/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("To"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(To /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PropertyEffectDispT<T>::get_To(void)
{
  VARIANT To;
  this->get_To((VARIANT*)&To);
  return To;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyEffectDispT<T>::set_To(VARIANT To/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("To"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = To /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  AnimationPoints
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934EA-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationPointsDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
AnimationPointsDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationPointsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AnimationPointsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationPointsDispT<T>::Item(int Index/*[in]*/, 
                              Powerpoint_xp::AnimationPoint** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::AnimationPoint**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::AnimationPoint* __fastcall
AnimationPointsDispT<T>::Item(int Index/*[in]*/)
{
  Powerpoint_xp::AnimationPoint* Item;
  this->Item(Index, (Powerpoint_xp::AnimationPoint**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationPointsDispT<T>::Add(int Index/*[in,def,opt]*/, 
                             Powerpoint_xp::AnimationPoint** Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::AnimationPoint**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::AnimationPoint* __fastcall
AnimationPointsDispT<T>::Add(int Index/*[in,def,opt]*/)
{
  Powerpoint_xp::AnimationPoint* Add;
  this->Add(Index, (Powerpoint_xp::AnimationPoint**)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationPointsDispT<T>::get_Smooth(Office_xp::MsoTriState* Smooth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Smooth"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Smooth /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
AnimationPointsDispT<T>::get_Smooth(void)
{
  Office_xp::MsoTriState Smooth;
  this->get_Smooth((Office_xp::MsoTriState*)&Smooth);
  return Smooth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationPointsDispT<T>::set_Smooth(Office_xp::MsoTriState Smooth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Smooth"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)Smooth /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationPointsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
AnimationPointsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationPointsDispT<T>::_Index(int Index/*[in]*/, VARIANT* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
AnimationPointsDispT<T>::_Index(int Index/*[in]*/)
{
  VARIANT _Index;
  this->_Index(Index, (VARIANT*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationPointsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
AnimationPointsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  AnimationPoint
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934EB-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationPointDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
AnimationPointDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationPointDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AnimationPointDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationPointDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2003));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationPointDispT<T>::get_Time(float* Time/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Time"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Time /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
AnimationPointDispT<T>::get_Time(void)
{
  float Time;
  this->get_Time((float*)&Time);
  return Time;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationPointDispT<T>::set_Time(float Time/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Time"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = Time /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationPointDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
AnimationPointDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationPointDispT<T>::set_Value(VARIANT Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationPointDispT<T>::get_Formula(BSTR* Formula/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Formula"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Formula /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
AnimationPointDispT<T>::get_Formula(void)
{
  BSTR Formula;
  this->get_Formula((BSTR*)&Formula);
  return Formula;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationPointDispT<T>::set_Formula(BSTR Formula/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Formula"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = Formula /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  CanvasShapes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934EC-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CanvasShapesDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CanvasShapesDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CanvasShapesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::get_Count(int* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CanvasShapesDispT<T>::get_Count(void)
{
  int Count;
  this->get_Count((int*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::Item(VARIANT Index/*[in]*/, Powerpoint_xp::Shape** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
CanvasShapesDispT<T>::Item(VARIANT Index/*[in]*/)
{
  Powerpoint_xp::Shape* Item;
  this->Item(Index, (Powerpoint_xp::Shape**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
CanvasShapesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::AddCallout(Office_xp::MsoCalloutType Type/*[in]*/, float Left/*[in]*/, 
                                 float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                                 Powerpoint_xp::Shape** Callout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCallout"), DISPID(10));
  TAutoArgs<5> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Callout /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
CanvasShapesDispT<T>::AddCallout(Office_xp::MsoCalloutType Type/*[in]*/, float Left/*[in]*/, 
                                 float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Powerpoint_xp::Shape* Callout;
  this->AddCallout(Type, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Callout);
  return Callout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::AddConnector(Office_xp::MsoConnectorType Type/*[in]*/, float BeginX/*[in]*/, 
                                   float BeginY/*[in]*/, float EndX/*[in]*/, float EndY/*[in]*/, 
                                   Powerpoint_xp::Shape** Connector/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddConnector"), DISPID(11));
  TAutoArgs<5> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = BeginX /*[VT_R4:0]*/;
  _args[3] = BeginY /*[VT_R4:0]*/;
  _args[4] = EndX /*[VT_R4:0]*/;
  _args[5] = EndY /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Connector /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
CanvasShapesDispT<T>::AddConnector(Office_xp::MsoConnectorType Type/*[in]*/, float BeginX/*[in]*/, 
                                   float BeginY/*[in]*/, float EndX/*[in]*/, float EndY/*[in]*/)
{
  Powerpoint_xp::Shape* Connector;
  this->AddConnector(Type, BeginX, BeginY, EndX, EndY, (Powerpoint_xp::Shape**)&Connector);
  return Connector;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::AddCurve(VARIANT SafeArrayOfPoints/*[in]*/, 
                               Powerpoint_xp::Shape** Curve/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCurve"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = SafeArrayOfPoints /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Curve /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
CanvasShapesDispT<T>::AddCurve(VARIANT SafeArrayOfPoints/*[in]*/)
{
  Powerpoint_xp::Shape* Curve;
  this->AddCurve(SafeArrayOfPoints, (Powerpoint_xp::Shape**)&Curve);
  return Curve;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::AddLabel(Office_xp::MsoTextOrientation Orientation/*[in]*/, float Left/*[in]*/
                               , float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                               Powerpoint_xp::Shape** Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLabel"), DISPID(13));
  TAutoArgs<5> _args;
  _args[1] = (int)Orientation /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Label /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
CanvasShapesDispT<T>::AddLabel(Office_xp::MsoTextOrientation Orientation/*[in]*/, float Left/*[in]*/, 
                               float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Powerpoint_xp::Shape* Label;
  this->AddLabel(Orientation, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, float EndX/*[in]*/, 
                              float EndY/*[in]*/, Powerpoint_xp::Shape** Line/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLine"), DISPID(14));
  TAutoArgs<4> _args;
  _args[1] = BeginX /*[VT_R4:0]*/;
  _args[2] = BeginY /*[VT_R4:0]*/;
  _args[3] = EndX /*[VT_R4:0]*/;
  _args[4] = EndY /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Line /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
CanvasShapesDispT<T>::AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, float EndX/*[in]*/, 
                              float EndY/*[in]*/)
{
  Powerpoint_xp::Shape* Line;
  this->AddLine(BeginX, BeginY, EndX, EndY, (Powerpoint_xp::Shape**)&Line);
  return Line;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::AddPicture(BSTR FileName/*[in]*/, Office_xp::MsoTriState LinkToFile/*[in]*/, 
                                 Office_xp::MsoTriState SaveWithDocument/*[in]*/, float Left/*[in]*/
                                 , float Top/*[in]*/, float Width/*[in,def,opt]*/, 
                                 float Height/*[in,def,opt]*/, 
                                 Powerpoint_xp::Shape** Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPicture"), DISPID(15));
  TAutoArgs<7> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = (int)LinkToFile /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)SaveWithDocument /*[VT_USERDEFINED:0]*/;
  _args[4] = Left /*[VT_R4:0]*/;
  _args[5] = Top /*[VT_R4:0]*/;
  _args[6] = Width /*[VT_R4:0]*/;
  _args[7] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Picture /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
CanvasShapesDispT<T>::AddPicture(BSTR FileName/*[in]*/, Office_xp::MsoTriState LinkToFile/*[in]*/, 
                                 Office_xp::MsoTriState SaveWithDocument/*[in]*/, float Left/*[in]*/, 
                                 float Top/*[in]*/, float Width/*[in,def,opt]*/, 
                                 float Height/*[in,def,opt]*/)
{
  Powerpoint_xp::Shape* Picture;
  this->AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::AddPolyline(VARIANT SafeArrayOfPoints/*[in]*/, 
                                  Powerpoint_xp::Shape** Polyline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPolyline"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = SafeArrayOfPoints /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Polyline /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
CanvasShapesDispT<T>::AddPolyline(VARIANT SafeArrayOfPoints/*[in]*/)
{
  Powerpoint_xp::Shape* Polyline;
  this->AddPolyline(SafeArrayOfPoints, (Powerpoint_xp::Shape**)&Polyline);
  return Polyline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::AddShape(Office_xp::MsoAutoShapeType Type/*[in]*/, float Left/*[in]*/, 
                               float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                               Powerpoint_xp::Shape** Shape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddShape"), DISPID(17));
  TAutoArgs<5> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Shape /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
CanvasShapesDispT<T>::AddShape(Office_xp::MsoAutoShapeType Type/*[in]*/, float Left/*[in]*/, 
                               float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Powerpoint_xp::Shape* Shape;
  this->AddShape(Type, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Shape);
  return Shape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::AddTextEffect(Office_xp::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                                    BSTR Text/*[in]*/, BSTR FontName/*[in]*/, float FontSize/*[in]*/
                                    , Office_xp::MsoTriState FontBold/*[in]*/, 
                                    Office_xp::MsoTriState FontItalic/*[in]*/, float Left/*[in]*/, 
                                    float Top/*[in]*/, 
                                    Powerpoint_xp::Shape** TextEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTextEffect"), DISPID(18));
  TAutoArgs<8> _args;
  _args[1] = (int)PresetTextEffect /*[VT_USERDEFINED:0]*/;
  _args[2] = Text /*[VT_BSTR:0]*/;
  _args[3] = FontName /*[VT_BSTR:0]*/;
  _args[4] = FontSize /*[VT_R4:0]*/;
  _args[5] = (int)FontBold /*[VT_USERDEFINED:0]*/;
  _args[6] = (int)FontItalic /*[VT_USERDEFINED:0]*/;
  _args[7] = Left /*[VT_R4:0]*/;
  _args[8] = Top /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)TextEffect /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
CanvasShapesDispT<T>::AddTextEffect(Office_xp::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                                    BSTR Text/*[in]*/, BSTR FontName/*[in]*/, float FontSize/*[in]*/, 
                                    Office_xp::MsoTriState FontBold/*[in]*/, 
                                    Office_xp::MsoTriState FontItalic/*[in]*/, float Left/*[in]*/, 
                                    float Top/*[in]*/)
{
  Powerpoint_xp::Shape* TextEffect;
  this->AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, (Powerpoint_xp::Shape**)&TextEffect);
  return TextEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::AddTextbox(Office_xp::MsoTextOrientation Orientation/*[in]*/, 
                                 float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                 float Height/*[in]*/, 
                                 Powerpoint_xp::Shape** Textbox/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTextbox"), DISPID(19));
  TAutoArgs<5> _args;
  _args[1] = (int)Orientation /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Textbox /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
CanvasShapesDispT<T>::AddTextbox(Office_xp::MsoTextOrientation Orientation/*[in]*/, 
                                 float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                 float Height/*[in]*/)
{
  Powerpoint_xp::Shape* Textbox;
  this->AddTextbox(Orientation, Left, Top, Width, Height, (Powerpoint_xp::Shape**)&Textbox);
  return Textbox;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::BuildFreeform(Office_xp::MsoEditingType EditingType/*[in]*/, float X1/*[in]*/
                                    , float Y1/*[in]*/, 
                                    Powerpoint_xp::FreeformBuilder** FreeformBuilder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildFreeform"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = (int)EditingType /*[VT_USERDEFINED:0]*/;
  _args[2] = X1 /*[VT_R4:0]*/;
  _args[3] = Y1 /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::FreeformBuilder**)FreeformBuilder /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::FreeformBuilder* __fastcall
CanvasShapesDispT<T>::BuildFreeform(Office_xp::MsoEditingType EditingType/*[in]*/, float X1/*[in]*/, 
                                    float Y1/*[in]*/)
{
  Powerpoint_xp::FreeformBuilder* FreeformBuilder;
  this->BuildFreeform(EditingType, X1, Y1, (Powerpoint_xp::FreeformBuilder**)&FreeformBuilder);
  return FreeformBuilder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::Range(VARIANT Index/*[in]*/, Powerpoint_xp::ShapeRange** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Range"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::ShapeRange**)Range /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_xp::ShapeRange* __fastcall
CanvasShapesDispT<T>::Range(VARIANT Index/*[in]*/)
{
  Powerpoint_xp::ShapeRange* Range;
  this->Range(Index, (Powerpoint_xp::ShapeRange**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::SelectAll()
{
  _TDispID _dispid(*this, OLETEXT("SelectAll"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CanvasShapesDispT<T>::get_Background(Powerpoint_xp::Shape** Background/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Background"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::Shape**)Background /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::Shape* __fastcall
CanvasShapesDispT<T>::get_Background(void)
{
  Powerpoint_xp::Shape* Background;
  this->get_Background((Powerpoint_xp::Shape**)&Background);
  return Background;
}

// *********************************************************************//
// DispIntf:  AutoCorrect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934ED-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AutoCorrectDispT<T>::get_DisplayAutoCorrectOptions(VARIANT_BOOL* DisplayAutoCorrectOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayAutoCorrectOptions"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayAutoCorrectOptions /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
AutoCorrectDispT<T>::get_DisplayAutoCorrectOptions(void)
{
  VARIANT_BOOL DisplayAutoCorrectOptions;
  this->get_DisplayAutoCorrectOptions((VARIANT_BOOL*)&DisplayAutoCorrectOptions);
  return DisplayAutoCorrectOptions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AutoCorrectDispT<T>::set_DisplayAutoCorrectOptions(VARIANT_BOOL DisplayAutoCorrectOptions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayAutoCorrectOptions"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = DisplayAutoCorrectOptions /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AutoCorrectDispT<T>::get_DisplayAutoLayoutOptions(VARIANT_BOOL* DisplayAutoLayoutOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayAutoLayoutOptions"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayAutoLayoutOptions /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
AutoCorrectDispT<T>::get_DisplayAutoLayoutOptions(void)
{
  VARIANT_BOOL DisplayAutoLayoutOptions;
  this->get_DisplayAutoLayoutOptions((VARIANT_BOOL*)&DisplayAutoLayoutOptions);
  return DisplayAutoLayoutOptions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AutoCorrectDispT<T>::set_DisplayAutoLayoutOptions(VARIANT_BOOL DisplayAutoLayoutOptions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayAutoLayoutOptions"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = DisplayAutoLayoutOptions /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Options
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934EE-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OptionsDispT<T>::get_DisplayPasteOptions(Office_xp::MsoTriState* DisplayPasteOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayPasteOptions"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayPasteOptions /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
OptionsDispT<T>::get_DisplayPasteOptions(void)
{
  Office_xp::MsoTriState DisplayPasteOptions;
  this->get_DisplayPasteOptions((Office_xp::MsoTriState*)&DisplayPasteOptions);
  return DisplayPasteOptions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OptionsDispT<T>::set_DisplayPasteOptions(Office_xp::MsoTriState DisplayPasteOptions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayPasteOptions"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = (int)DisplayPasteOptions /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  CommandEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934EF-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandEffectDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
CommandEffectDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandEffectDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandEffectDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandEffectDispT<T>::get_Type(Powerpoint_xp::MsoAnimCommandType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::MsoAnimCommandType __fastcall
CommandEffectDispT<T>::get_Type(void)
{
  Powerpoint_xp::MsoAnimCommandType Type;
  this->get_Type((Powerpoint_xp::MsoAnimCommandType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandEffectDispT<T>::set_Type(Powerpoint_xp::MsoAnimCommandType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandEffectDispT<T>::get_Command(BSTR* Command/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Command"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Command /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandEffectDispT<T>::get_Command(void)
{
  BSTR Command;
  this->get_Command((BSTR*)&Command);
  return Command;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandEffectDispT<T>::set_Command(BSTR Command/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Command"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = Command /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  FilterEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934F0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FilterEffectDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
FilterEffectDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FilterEffectDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FilterEffectDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FilterEffectDispT<T>::get_Type(Powerpoint_xp::MsoAnimFilterEffectType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::MsoAnimFilterEffectType __fastcall
FilterEffectDispT<T>::get_Type(void)
{
  Powerpoint_xp::MsoAnimFilterEffectType Type;
  this->get_Type((Powerpoint_xp::MsoAnimFilterEffectType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FilterEffectDispT<T>::set_Type(Powerpoint_xp::MsoAnimFilterEffectType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FilterEffectDispT<T>::get_Subtype(Powerpoint_xp::MsoAnimFilterEffectSubtype* Subtype/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Subtype"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Subtype /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::MsoAnimFilterEffectSubtype __fastcall
FilterEffectDispT<T>::get_Subtype(void)
{
  Powerpoint_xp::MsoAnimFilterEffectSubtype Subtype;
  this->get_Subtype((Powerpoint_xp::MsoAnimFilterEffectSubtype*)&Subtype);
  return Subtype;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FilterEffectDispT<T>::set_Subtype(Powerpoint_xp::MsoAnimFilterEffectSubtype Subtype/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Subtype"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)Subtype /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FilterEffectDispT<T>::get_Reveal(Office_xp::MsoTriState* Reveal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Reveal"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Reveal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::MsoTriState __fastcall
FilterEffectDispT<T>::get_Reveal(void)
{
  Office_xp::MsoTriState Reveal;
  this->get_Reveal((Office_xp::MsoTriState*)&Reveal);
  return Reveal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FilterEffectDispT<T>::set_Reveal(Office_xp::MsoTriState Reveal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Reveal"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)Reveal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  SetEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934F1-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SetEffectDispT<T>::get_Application(Powerpoint_xp::PowerPointApplication** Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_xp::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::PowerPointApplication* __fastcall
SetEffectDispT<T>::get_Application(void)
{
  Powerpoint_xp::PowerPointApplication* Application;
  this->get_Application((Powerpoint_xp::PowerPointApplication**)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SetEffectDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SetEffectDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SetEffectDispT<T>::get_Property(Powerpoint_xp::MsoAnimProperty* Property/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Property"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Property /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_xp::MsoAnimProperty __fastcall
SetEffectDispT<T>::get_Property(void)
{
  Powerpoint_xp::MsoAnimProperty Property;
  this->get_Property((Powerpoint_xp::MsoAnimProperty*)&Property);
  return Property;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SetEffectDispT<T>::set_Property(Powerpoint_xp::MsoAnimProperty Property/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Property"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)Property /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SetEffectDispT<T>::get_To(VARIANT* To/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("To"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(To /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
SetEffectDispT<T>::get_To(void)
{
  VARIANT To;
  this->get_To((VARIANT*)&To);
  return To;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SetEffectDispT<T>::set_To(VARIANT To/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("To"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = To /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PowerPointGlobal
// Interface: TCOM_Global
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Global, _Global, &CLSID_PowerPointGlobal, &IID__Global> CoPowerPointGlobal;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PowerPointSlide
// Interface: TCOM_Slide
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Slide, _Slide, &CLSID_PowerPointSlide, &IID__Slide> CoPowerPointSlide;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PowerPointPresentation
// Interface: TCOM_Presentation
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Presentation, _Presentation, &CLSID_PowerPointPresentation, &IID__Presentation> CoPowerPointPresentation;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OLEControl
// Interface: TCOMOCXExtender
// *********************************************************************//
typedef TCoClassCreatorT<TCOMOCXExtender, OCXExtender, &CLSID_OLEControl, &IID_OCXExtender> CoOLEControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PowerPointApplication
// Interface: TCOM_Application
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Application, _Application, &CLSID_PowerPointApplication, &IID__Application> CoPowerPointApplication;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Master
// Interface: TCOM_Master
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Master, _Master, &CLSID_Master, &IID__Master> CoMaster;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PowerRex
// Interface: TCOM_PowerRex
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_PowerRex, _PowerRex, &CLSID_PowerRex, &IID__PowerRex> CoPowerRex;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : PowerPointSlide
// Event  Interface: SldEvents
// (NOTE: Interface is not IDispatch compatible - Empty proxy generated)
// *********************************************************************//
template <class T>
class TEvents_PowerPointSlide : public IConnectionPointImpl<T,
                                                 &IID_SldEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
protected:
  // No DispInterface wrapper found for Event Interface SldEvents;
};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : PowerPointPresentation
// Event  Interface: PresEvents
// (NOTE: Interface is not IDispatch compatible - Empty proxy generated)
// *********************************************************************//
template <class T>
class TEvents_PowerPointPresentation : public IConnectionPointImpl<T,
                                                 &IID_PresEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
protected:
  // No DispInterface wrapper found for Event Interface PresEvents;
};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : OLEControl
// Event Interface : OCXExtenderEvents
// *********************************************************************//
template <class T>
class TEvents_OLEControl : public IConnectionPointImpl<T,
                                                 &IID_OCXExtenderEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  HRESULT         Fire_GotFocus(void);
  HRESULT         Fire_LostFocus(void);
protected:
  OCXExtenderEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_OLEControl<T>::Fire_GotFocus(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.GotFocus();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_OLEControl<T>::Fire_LostFocus(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.LostFocus();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : PowerPointApplication
// Event Interface : EApplication
// *********************************************************************//
template <class T>
class TEvents_PowerPointApplication : public IConnectionPointImpl<T,
                                                 &IID_EApplication,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  HRESULT         Fire_WindowSelectionChange(Powerpoint_xp::Selection* Sel);
  HRESULT         Fire_WindowBeforeRightClick(Powerpoint_xp::Selection* Sel, VARIANT_BOOL* Cancel);
  HRESULT         Fire_WindowBeforeDoubleClick(Powerpoint_xp::Selection* Sel, VARIANT_BOOL* Cancel);
  HRESULT         Fire_PresentationClose(Powerpoint_xp::PowerPointPresentation* Pres);
  HRESULT         Fire_PresentationSave(Powerpoint_xp::PowerPointPresentation* Pres);
  HRESULT         Fire_PresentationOpen(Powerpoint_xp::PowerPointPresentation* Pres);
  HRESULT         Fire_NewPresentation(Powerpoint_xp::PowerPointPresentation* Pres);
  HRESULT         Fire_PresentationNewSlide(Powerpoint_xp::PowerPointSlide* Sld);
  HRESULT         Fire_WindowActivate(Powerpoint_xp::PowerPointPresentation* Pres, 
                                      Powerpoint_xp::DocumentWindow* Wn);
  HRESULT         Fire_WindowDeactivate(Powerpoint_xp::PowerPointPresentation* Pres, 
                                        Powerpoint_xp::DocumentWindow* Wn);
  HRESULT         Fire_SlideShowBegin(Powerpoint_xp::SlideShowWindow* Wn);
  HRESULT         Fire_SlideShowNextBuild(Powerpoint_xp::SlideShowWindow* Wn);
  HRESULT         Fire_SlideShowNextSlide(Powerpoint_xp::SlideShowWindow* Wn);
  HRESULT         Fire_SlideShowEnd(Powerpoint_xp::PowerPointPresentation* Pres);
  HRESULT         Fire_PresentationPrint(Powerpoint_xp::PowerPointPresentation* Pres);
  HRESULT         Fire_SlideSelectionChanged(Powerpoint_xp::SlideRange* SldRange);
  HRESULT         Fire_ColorSchemeChanged(Powerpoint_xp::SlideRange* SldRange);
  HRESULT         Fire_PresentationBeforeSave(Powerpoint_xp::PowerPointPresentation* Pres, 
                                              VARIANT_BOOL* Cancel);
  HRESULT         Fire_SlideShowNextClick(Powerpoint_xp::SlideShowWindow* Wn, 
                                          Powerpoint_xp::Effect* nEffect);
protected:
  EApplicationDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_PowerPointApplication<T>::Fire_WindowSelectionChange(Powerpoint_xp::Selection* Sel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.WindowSelectionChange(Sel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PowerPointApplication<T>::Fire_WindowBeforeRightClick(Powerpoint_xp::Selection* Sel, 
                                                              VARIANT_BOOL* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.WindowBeforeRightClick(Sel, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PowerPointApplication<T>::Fire_WindowBeforeDoubleClick(Powerpoint_xp::Selection* Sel, 
                                                               VARIANT_BOOL* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.WindowBeforeDoubleClick(Sel, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PowerPointApplication<T>::Fire_PresentationClose(Powerpoint_xp::PowerPointPresentation* Pres)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PresentationClose(Pres);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PowerPointApplication<T>::Fire_PresentationSave(Powerpoint_xp::PowerPointPresentation* Pres)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PresentationSave(Pres);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PowerPointApplication<T>::Fire_PresentationOpen(Powerpoint_xp::PowerPointPresentation* Pres)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PresentationOpen(Pres);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PowerPointApplication<T>::Fire_NewPresentation(Powerpoint_xp::PowerPointPresentation* Pres)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.NewPresentation(Pres);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PowerPointApplication<T>::Fire_PresentationNewSlide(Powerpoint_xp::PowerPointSlide* Sld)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PresentationNewSlide(Sld);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PowerPointApplication<T>::Fire_WindowActivate(Powerpoint_xp::PowerPointPresentation* Pres, 
                                                      Powerpoint_xp::DocumentWindow* Wn)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.WindowActivate(Pres, Wn);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PowerPointApplication<T>::Fire_WindowDeactivate(Powerpoint_xp::PowerPointPresentation* Pres, 
                                                        Powerpoint_xp::DocumentWindow* Wn)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.WindowDeactivate(Pres, Wn);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PowerPointApplication<T>::Fire_SlideShowBegin(Powerpoint_xp::SlideShowWindow* Wn)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SlideShowBegin(Wn);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PowerPointApplication<T>::Fire_SlideShowNextBuild(Powerpoint_xp::SlideShowWindow* Wn)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SlideShowNextBuild(Wn);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PowerPointApplication<T>::Fire_SlideShowNextSlide(Powerpoint_xp::SlideShowWindow* Wn)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SlideShowNextSlide(Wn);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PowerPointApplication<T>::Fire_SlideShowEnd(Powerpoint_xp::PowerPointPresentation* Pres)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SlideShowEnd(Pres);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PowerPointApplication<T>::Fire_PresentationPrint(Powerpoint_xp::PowerPointPresentation* Pres)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PresentationPrint(Pres);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PowerPointApplication<T>::Fire_SlideSelectionChanged(Powerpoint_xp::SlideRange* SldRange)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SlideSelectionChanged(SldRange);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PowerPointApplication<T>::Fire_ColorSchemeChanged(Powerpoint_xp::SlideRange* SldRange)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ColorSchemeChanged(SldRange);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PowerPointApplication<T>::Fire_PresentationBeforeSave(Powerpoint_xp::PowerPointPresentation* Pres, 
                                                              VARIANT_BOOL* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PresentationBeforeSave(Pres, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PowerPointApplication<T>::Fire_SlideShowNextClick(Powerpoint_xp::SlideShowWindow* Wn, 
                                                          Powerpoint_xp::Effect* nEffect)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SlideShowNextClick(Wn, nEffect);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Master
// Event  Interface: MasterEvents
// (NOTE: Interface is not IDispatch compatible - Empty proxy generated)
// *********************************************************************//
template <class T>
class TEvents_Master : public IConnectionPointImpl<T,
                                                 &IID_MasterEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
protected:
  // No DispInterface wrapper found for Event Interface MasterEvents;
};

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Powerpoint_xp

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Powerpoint_xp;
#endif

#pragma option pop

#endif // PowerPoint_XPH
