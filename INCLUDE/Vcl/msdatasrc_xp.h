// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.0.1.0.1.2  $
// File generated on 1/29/2002 1:27:43 PM from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\dev\riptide\typelib\typelib\typelibraries\testing\msdatsrc.tlb (1)
// LIBID: {7C0FFAB0-CD84-11D0-949A-00A0C91110ED}
// LCID: 0
// Helpfile: 
// HelpString: Microsoft Data Source Interfaces
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\stdole2.tlb)
// Parent TypeLibrary:
//   (0) v9.0 Access, (c:\program files\microsoft office\office10\msacc.olb)
// ************************************************************************ //
#ifndef   MSDATASRC_XPH
#define   MSDATASRC_XPH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Msdatasrc_xp
{

// *********************************************************************//
// HelpString: Microsoft Data Source Interfaces
// Version:    1.0
// *********************************************************************//

/*   **********************************************************

  Type Library Options: 
  Generate C++ Import file
  Expose namespace with 'using'.
  Generate files for dependant type libraries
  Map HRESULT to safecall on dual interfaces
  Place warnings in imported files
  Generate IDE registration for component wrappers
  Generate dispinterfaces
  Generate CoClassCreator wrappers
  Generate C++Builder 4.0 event wrappers for servers
  Generate VCL component wrappers for servers
  Force use of a _TLB file
  Ignore [PreDefined] flag
  Ignore Standard Type Libraries
  Show Debug Output
  Place comments in imported files
   ******************************************************** */

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_MSDATASRC;
extern __declspec (package) const GUID GUID_DataMember;
extern __declspec (package) const GUID IID_DataSourceListener;
extern __declspec (package) const GUID IID_DataSource;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{7C0FFAB2-CD84-11D0-949A-00A0C91110ED}") DataSourceListener;
typedef TComInterface<DataSourceListener, &IID_DataSourceListener> DataSourceListenerPtr;

interface DECLSPEC_UUID("{7C0FFAB3-CD84-11D0-949A-00A0C91110ED}") DataSource;
typedef TComInterface<DataSource, &IID_DataSource> DataSourcePtr;


// *********************************************************************//
// Declaration of Aliases defined in Type Library                         
// *********************************************************************//
typedef BSTR DataMember;
// *********************************************************************//
// Interface: DataSourceListener
// Flags:     (272) Hidden OleAutomation
// GUID:      {7C0FFAB2-CD84-11D0-949A-00A0C91110ED}
// *********************************************************************//
interface DataSourceListener  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE dataMemberChanged(Msdatasrc_xp::DataMember bstrDM/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE dataMemberAdded(Msdatasrc_xp::DataMember bstrDM/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE dataMemberRemoved(Msdatasrc_xp::DataMember bstrDM/*[in]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: DataSource
// Flags:     (256) OleAutomation
// GUID:      {7C0FFAB3-CD84-11D0-949A-00A0C91110ED}
// *********************************************************************//
interface DataSource  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE getDataMember(Msdatasrc_xp::DataMember bstrDM/*[in]*/, 
                                                  System::TGUID* riid/*[in]*/, 
                                                  LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getDataMemberName(long lIndex/*[in]*/, 
                                                      Msdatasrc_xp::DataMember* pbstrDM/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getDataMemberCount(long* plCount/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE addDataSourceListener(Msdatasrc_xp::DataSourceListener* pDSL/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE removeDataSourceListener(Msdatasrc_xp::DataSourceListener* pDSL/*[in]*/) = 0; // [-1]
};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<DataSourceListener>  TCOMDataSourceListener;

typedef TComInterface<DataSource>  TCOMDataSource;

#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Msdatasrc_xp

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Msdatasrc_xp;
#endif

#pragma option pop

#endif // MSDATASRC_XPH
