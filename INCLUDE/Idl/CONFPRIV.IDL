//
// Copyright (c) 1998-1999  Microsoft Corporation
//

cpp_quote("/* Copyright (c) 1998-1999  Microsoft Corporation  */")

///////////////////////////////////////////////////////////////////////////
// confpriv.idl : IDL source for IPconf msp private interfaces
/////////////////////////////////////////////////////////////////////////////

#ifndef __IPCONF_PRIVATE_IDL__
#define __IPCONF_PRIVATE_IDL__

import "tapi3if.idl";

// The maximum length of the info string is 256 bytes inluding EOS.
const unsigned long MAX_PARTICIPANT_TYPED_INFO_LENGTH		= 256; 

typedef enum PARTICIPANT_TYPED_INFO
{
    PTI_CANONICALNAME,
    PTI_NAME,
    PTI_EMAILADDRESS,
    PTI_PHONENUMBER,
    PTI_LOCATION,
    PTI_TOOL,
    PTI_NOTES,
    PTI_PRIVATE

} PARTICIPANT_TYPED_INFO;

typedef enum PARTICIPANT_EVENT
{
    PE_NEW_PARTICIPANT,
    PE_INFO_CHANGE,
    PE_PARTICIPANT_LEAVE,

    PE_NEW_SUBSTREAM,
    PE_SUBSTREAM_REMOVED,

    PE_SUBSTREAM_MAPPED,
    PE_SUBSTREAM_UNMAPPED,

    PE_PARTICIPANT_TIMEOUT,
    PE_PARTICIPANT_RECOVERED,

    PE_PARTICIPANT_ACTIVE,
    PE_PARTICIPANT_INACTIVE,

    PE_LOCAL_TALKING,
    PE_LOCAL_SILENT

} PARTICIPANT_EVENT;

/////////////////////////////////////////////////////////////////////////////
// Interface definitions
/////////////////////////////////////////////////////////////////////////////

[
    uuid(5899b820-5a34-11d2-95a0-00a0244d2298),
    helpstring("ITParticipant Interface"),
    pointer_default(unique),
    dual
]
interface ITParticipant : IDispatch
{
    [propget, id(1), helpstring("propertry ParticipantTypedInfo")]
    HRESULT ParticipantTypedInfo(
        [in] PARTICIPANT_TYPED_INFO InfoType,
        [out, retval] BSTR * ppInfo
        );

    [propget, id(2), helpstring("the media types of the participant")]
    HRESULT MediaTypes(
        [out, retval] long * plMediaType
        );

    [propput, id(3), helpstring("enable or disable a participant")]
    HRESULT Status(
        [in] ITStream * pITStream,
        [in] VARIANT_BOOL   fEnable
        );

    [propget, id(3), helpstring("the status of the participant")]
    HRESULT Status(
        [in] ITStream * pITStream,
        [out, retval] VARIANT_BOOL * pStatus
        );

    [propget, id(4), helpstring("get the streams that have the participant")]
    HRESULT Streams(
        [out, retval] VARIANT * pVariant
        );

    [id(6), hidden]
    HRESULT EnumerateStreams(
        [out, retval] IEnumStream ** ppEnumStream
        );
}


[
    uuid(39cbf055-f77a-11d2-a824-00c04f8ef6e3),
    helpstring("ITLocalParticipant interface"),
    pointer_default(unique),
    dual
]
interface ITLocalParticipant : IDispatch
{
    [propget, id(1), helpstring("propertry LocalParticipantTypedInfo")]
    HRESULT LocalParticipantTypedInfo(
        [in] PARTICIPANT_TYPED_INFO InfoType,
        [out, retval] BSTR * ppInfo
        );

    [propput, id(1), helpstring("propertry LocalParticipantTypedInfo")]
    HRESULT LocalParticipantTypedInfo(
        [in] PARTICIPANT_TYPED_INFO InfoType,
        [in] BSTR ppInfo
        );
}


[
    uuid(0a91b56c-5a35-11d2-95a0-00a0244d2298),
    helpstring("IEnumParticipant Interface"),
    hidden,
    pointer_default(unique)
]
interface IEnumParticipant : IUnknown
{

    HRESULT Next(
            [in] ULONG celt,
            [out] ITParticipant ** ppElements,
            [in,out,ptr] ULONG * pceltFetched
            );

    HRESULT Reset( void );

    HRESULT Skip (
            [in] ULONG celt
            );

    HRESULT Clone (
            [out, retval] IEnumParticipant ** ppEnum
            );
}


[
    uuid(d2ee6684-5a34-11d2-95a0-00a0244d2298),
    helpstring("ITParticipantControl Interface"),
    pointer_default(unique),
    dual
]
interface ITParticipantControl : IDispatch
{
    [id(1), hidden]
    HRESULT EnumerateParticipants(
            [out, retval] IEnumParticipant ** ppEnumParticipants
            );

    [propget, id(2), helpstring("property Participants")]
    HRESULT Participants(
            [out, retval] VARIANT * pVariant
            );
}


[
    uuid(2c679108-5a35-11d2-95a0-00a0244d2298),
    helpstring("ITParticipantSubStreamControl Interface"),
    pointer_default(unique),
    dual
]
interface ITParticipantSubStreamControl : IDispatch
{
    [propget, id(1), helpstring("get the substream that renders a participant")]
    HRESULT SubStreamFromParticipant(
            [in] ITParticipant * pParticipant,
            [out, retval] ITSubStream ** ppITSubStream
            );

    [propget, id(2), helpstring("get the participant rendered on a sub stream")]
    HRESULT ParticipantFromSubStream(
            [in] ITSubStream * pITSubStream,
            [out, retval] ITParticipant ** ppParticipant 
            );

    [id(3), helpstring("set participant on a sub stream")]
    HRESULT SwitchTerminalToSubStream(
            [in] ITTerminal * pITTerminal,
            [in] ITSubStream * pITSubStream
            );
}


[
    uuid(8bb35070-2dad-11d3-a580-00c04f8ef6e3),
    helpstring("ITParticipantEvent Interface"),
    pointer_default(unique),
    dual
]
interface ITParticipantEvent : IDispatch
{
    [propget, id(2), helpstring("property Event")]
    HRESULT Event(
			[out, retval] PARTICIPANT_EVENT * pParticipantEvent
			);
    
    [propget, id(3), helpstring("property participant")]
    HRESULT Participant(
            [out, retval] ITParticipant** ppParticipant
            );
    
    [propget, id(4), helpstring("property SubStream")]
    HRESULT SubStream(
            [out, retval] ITSubStream** ppSubStream
            );
}

#endif // __IPCONF_PRIVATE_IDL__
