//
// Copyright (c) 1998-1999  Microsoft Corporation
//

cpp_quote("/* Copyright (c) 1998-1999  Microsoft Corporation  */")

#ifndef __TAPI3IF_IDL__
#define __TAPI3IF_IDL__

import "oaidl.idl";
import "basetsd.h";

midl_pragma warning( disable: 2039 )

typedef long TAPI_DIGITMODE;

typedef enum ADDRESS_EVENT
{
    AE_STATE,
    AE_CAPSCHANGE,
    AE_RINGING,
    AE_CONFIGCHANGE,
    AE_FORWARD,
    AE_NEWTERMINAL,
    AE_REMOVETERMINAL

} ADDRESS_EVENT;

typedef enum ADDRESS_STATE
{
    AS_INSERVICE,
    AS_OUTOFSERVICE

} ADDRESS_STATE;

typedef enum CALL_STATE
{
    CS_IDLE,
    CS_INPROGRESS,
    CS_CONNECTED,
    CS_DISCONNECTED,
    CS_OFFERING,
    CS_HOLD,
    CS_QUEUED

} CALL_STATE;

typedef enum CALL_STATE_EVENT_CAUSE
{
    CEC_NONE,
    CEC_DISCONNECT_NORMAL,
    CEC_DISCONNECT_BUSY,
    CEC_DISCONNECT_BADADDRESS,
    CEC_DISCONNECT_NOANSWER,
    CEC_DISCONNECT_CANCELLED,
    CEC_DISCONNECT_REJECTED,
    CEC_DISCONNECT_FAILED

} CALL_STATE_EVENT_CAUSE;

typedef enum CALL_MEDIA_EVENT
{
    CME_NEW_STREAM,
    CME_STREAM_FAIL,
    CME_TERMINAL_FAIL,
    CME_STREAM_NOT_USED,
    CME_STREAM_ACTIVE,
    CME_STREAM_INACTIVE
            
} CALL_MEDIA_EVENT;

typedef enum CALL_MEDIA_EVENT_CAUSE
{
   CMC_UNKNOWN,
   CMC_BAD_DEVICE,
   CMC_CONNECT_FAIL,
   CMC_LOCAL_REQUEST,
   CMC_REMOTE_REQUEST,
   CMC_MEDIA_TIMEOUT,
   CMC_MEDIA_RECOVERED
            
} CALL_MEDIA_EVENT_CAUSE;

typedef enum DISCONNECT_CODE
{
    DC_NORMAL,
    DC_NOANSWER,
    DC_REJECTED

} DISCONNECT_CODE;

typedef enum TERMINAL_STATE
{
    TS_INUSE,
    TS_NOTINUSE

} TERMINAL_STATE;

typedef enum TERMINAL_DIRECTION
{
    TD_CAPTURE,
    TD_RENDER

} TERMINAL_DIRECTION;

typedef enum TERMINAL_TYPE
{
    TT_STATIC,
    TT_DYNAMIC

} TERMINAL_TYPE;

typedef enum CALL_PRIVILEGE
{
    CP_OWNER,
    CP_MONITOR

} CALL_PRIVILEGE;

typedef enum TAPI_EVENT
{
    TE_TAPIOBJECT       = 0x00000001,
    TE_ADDRESS          = 0x00000002,
    TE_CALLNOTIFICATION = 0x00000004,
    TE_CALLSTATE        = 0x00000008,
    TE_CALLMEDIA        = 0x00000010,
    TE_CALLHUB          = 0x00000020,
    TE_CALLINFOCHANGE   = 0x00000040,
    TE_PRIVATE          = 0x00000080,
    TE_REQUEST          = 0x00000100,
    TE_AGENT            = 0x00000200,
    TE_AGENTSESSION     = 0x00000400,
    TE_QOSEVENT         = 0x00000800,
    TE_AGENTHANDLER     = 0x00001000,
    TE_ACDGROUP         = 0x00002000,
    TE_QUEUE            = 0x00004000,
    TE_DIGITEVENT       = 0x00008000,
    TE_GENERATEEVENT    = 0x00010000

} TAPI_EVENT;

typedef enum CALL_NOTIFICATION_EVENT
{
    CNE_OWNER,
    CNE_MONITOR

} CALL_NOTIFICATION_EVENT;


typedef enum CALLHUB_EVENT
{
    CHE_CALLJOIN,
    CHE_CALLLEAVE,
    CHE_CALLHUBNEW,
    CHE_CALLHUBIDLE
    
} CALLHUB_EVENT;


typedef enum CALLHUB_STATE
{
    CHS_ACTIVE,
    CHS_IDLE
            
} CALLHUB_STATE;


typedef enum TAPIOBJECT_EVENT
{
    TE_ADDRESSCREATE,
    TE_ADDRESSREMOVE,
    TE_REINIT,
    TE_TRANSLATECHANGE,
    TE_ADDRESSCLOSE

} TAPIOBJECT_EVENT;

typedef enum TAPI_OBJECT_TYPE
{
    TOT_NONE,
    TOT_TAPI,
    TOT_ADDRESS,
    TOT_TERMINAL,
    TOT_CALL,
    TOT_CALLHUB

} TAPI_OBJECT_TYPE;

typedef enum QOS_SERVICE_LEVEL
{
    QSL_NEEDED = 1,
    QSL_IF_AVAILABLE = 2,
    QSL_BEST_EFFORT = 3

} QOS_SERVICE_LEVEL;

typedef enum QOS_EVENT
{
    QE_NOQOS = 1,
    QE_ADMISSIONFAILURE = 2,
    QE_POLICYFAILURE = 3,
    QE_GENERICERROR = 4
            
} QOS_EVENT;

typedef enum CALLINFOCHANGE_CAUSE
{
    CIC_OTHER,
    CIC_DEVSPECIFIC,
    CIC_BEARERMODE,
    CIC_RATE,
    CIC_APPSPECIFIC,
    CIC_CALLID,
    CIC_RELATEDCALLID,
    CIC_ORIGIN,
    CIC_REASON,
    CIC_COMPLETIONID,
    CIC_NUMOWNERINCR,
    CIC_NUMOWNERDECR,
    CIC_NUMMONITORS,
    CIC_TRUNK,
    CIC_CALLERID,
    CIC_CALLEDID,
    CIC_CONNECTEDID,
    CIC_REDIRECTIONID,
    CIC_REDIRECTINGID,
    CIC_USERUSERINFO,
    CIC_HIGHLEVELCOMP,
    CIC_LOWLEVELCOMP,
    CIC_CHARGINGINFO,
    CIC_TREATMENT,
    CIC_CALLDATA,
    CIC_PRIVILEGE,
    CIC_MEDIATYPE

} CALLINFOCHANGE_CAUSE;

typedef enum CALLINFO_LONG
{
    CIL_MEDIATYPESAVAILABLE,
    CIL_BEARERMODE,
    CIL_CALLERIDADDRESSTYPE,
    CIL_CALLEDIDADDRESSTYPE,
    CIL_CONNECTEDIDADDRESSTYPE,
    CIL_REDIRECTIONIDADDRESSTYPE,
    CIL_REDIRECTINGIDADDRESSTYPE,
    CIL_ORIGIN,
    CIL_REASON,
    CIL_APPSPECIFIC,
    CIL_CALLPARAMSFLAGS,
    CIL_CALLTREATMENT,
    CIL_MINRATE,
    CIL_MAXRATE,
    CIL_COUNTRYCODE,
    CIL_CALLID,
    CIL_RELATEDCALLID,
    CIL_COMPLETIONID,
    CIL_NUMBEROFOWNERS,
    CIL_NUMBEROFMONITORS,
    CIL_TRUNK,
    CIL_RATE

} CALLINFO_LONG;

typedef enum CALLINFO_STRING
{
    CIS_CALLERIDNAME,
    CIS_CALLERIDNUMBER,
    CIS_CALLEDIDNAME,
    CIS_CALLEDIDNUMBER,
    CIS_CONNECTEDIDNAME,
    CIS_CONNECTEDIDNUMBER,
    CIS_REDIRECTIONIDNAME,
    CIS_REDIRECTIONIDNUMBER,
    CIS_REDIRECTINGIDNAME,
    CIS_REDIRECTINGIDNUMBER,
    CIS_CALLEDPARTYFRIENDLYNAME,
    CIS_COMMENT,
    CIS_DISPLAYABLEADDRESS,
    CIS_CALLINGPARTYID

} CALLINFO_STRING;


typedef enum CALLINFO_BUFFER
{
    CIB_USERUSERINFO,
    CIB_DEVSPECIFICBUFFER,
    CIB_CALLDATABUFFER,
    CIB_CHARGINGINFOBUFFER,
    CIB_HIGHLEVELCOMPATIBILITYBUFFER,
    CIB_LOWLEVELCOMPATIBILITYBUFFER

} CALLINFO_BUFFER;



typedef enum ADDRESS_CAPABILITY
{
    AC_ADDRESSTYPES,
    AC_BEARERMODES,
    AC_MAXACTIVECALLS,
    AC_MAXONHOLDCALLS,
    AC_MAXONHOLDPENDINGCALLS,
    AC_MAXNUMCONFERENCE,
    AC_MAXNUMTRANSCONF,
    AC_MONITORDIGITSUPPORT,
    AC_GENERATEDIGITSUPPORT,
    AC_GENERATETONEMODES,
    AC_GENERATETONEMAXNUMFREQ,
    AC_MONITORTONEMAXNUMFREQ,
    AC_MONITORTONEMAXNUMENTRIES,
    AC_DEVCAPFLAGS,
    AC_ANSWERMODES,
    AC_LINEFEATURES,
    AC_SETTABLEDEVSTATUS,
    AC_PARKSUPPORT,
    AC_CALLERIDSUPPORT,
    AC_CALLEDIDSUPPORT,
    AC_CONNECTEDIDSUPPORT,
    AC_REDIRECTIONIDSUPPORT,
    AC_REDIRECTINGIDSUPPORT,
    AC_ADDRESSCAPFLAGS,
    AC_CALLFEATURES1,
    AC_CALLFEATURES2,
    AC_REMOVEFROMCONFCAPS,
    AC_REMOVEFROMCONFSTATE,
    AC_TRANSFERMODES,
    AC_ADDRESSFEATURES,
    AC_PREDICTIVEAUTOTRANSFERSTATES,
    AC_MAXCALLDATASIZE,
    AC_LINEID,
    AC_ADDRESSID,
    AC_FORWARDMODES,
    AC_MAXFORWARDENTRIES,
    AC_MAXSPECIFICENTRIES,
    AC_MINFWDNUMRINGS,
    AC_MAXFWDNUMRINGS,
    AC_MAXCALLCOMPLETIONS,
    AC_CALLCOMPLETIONCONDITIONS,
    AC_CALLCOMPLETIONMODES,
    AC_PERMANENTDEVICEID

} ADDRESS_CAPABILITY;


typedef enum ADDRESS_CAPABILITY_STRING
{
    ACS_PROTOCOL,
    ACS_ADDRESSDEVICESPECIFIC,
    ACS_LINEDEVICESPECIFIC,
    ACS_PROVIDERSPECIFIC,
    ACS_SWITCHSPECIFIC,
    ACS_PERMANENTDEVICEGUID
            
} ADDRESS_CAPABILITY_STRING;


typedef enum FULLDUPLEX_SUPPORT
{
    FDS_SUPPORTED,
    FDS_NOTSUPPORTED,
    FDS_UNKNOWN

} FULLDUPLEX_SUPPORT;


typedef enum FINISH_MODE
{
     FM_ASTRANSFER,
     FM_ASCONFERENCE

} FINISH_MODE;

// Dispach ID mapping constants
const DISPID  INTERFACEMASK                     = 0x00FF0000;
const DISPID  DISPIDMASK                        = 0x0000FFFF;
                               
// Tapi Object Interfaces
const DISPID  IDISPTAPI                         = 0x00010000;
const DISPID  IDISPTAPICALLCENTER               = 0x00020000;

// Call Object Interfaces
const DISPID  IDISPCALLINFO                     = 0x00010000;
const DISPID  IDISPBASICCALLCONTROL             = 0x00020000;
const DISPID  IDISPLEGACYCALLMEDIACONTROL       = 0x00030000;
const DISPID  IDISPAGGREGATEDMSPCALLOBJ         = 0x00040000;

// Address Object Interfaces
const DISPID  IDISPADDRESS                      = 0x00010000;
const DISPID  IDISPADDRESSCAPABILITIES          = 0x00020000;
const DISPID  IDISPMEDIASUPPORT                 = 0x00030000;
const DISPID  IDISPADDRESSTRANSLATION           = 0x00040000;
const DISPID  IDISPLEGACYADDRESSMEDIACONTROL    = 0x00050000;
const DISPID  IDISPAGGREGATEDMSPADDRESSOBJ      = 0x00060000;


// forward definitions
interface IEnumAddress;
interface IEnumCall;
interface IEnumTerminalClass;
interface IEnumTerminal;
interface IEnumLocation;
interface IEnumCallingCard;
interface IEnumBstr;
interface ITCollection;
interface ITTerminal;
interface ITAMTerminal;
interface ITTAPI;
interface ITMediaSupport;
interface ITTerminalSupport;
interface ITCallInfo;
interface ITCallHub;
interface ITBasicCallControl;
interface IEnumCallHub;
interface ITForwardInformation;
interface ITAddressTranslation;
interface ITAddressTranslationInfo;
interface ITLocationInfo;
interface ITCallingCard;
interface ITAddress;
interface ITStream;
interface ITStreamControl;
interface ITStream;
interface ITSubStreamControl;
interface ITSubStream;
interface IEnumStream;
interface IEnumSubStream;


[
   uuid( B1EFC382-9355-11d0-835C-00AA003CCABD ),
   helpstring("TAPI 3.0 ITTAPI interface"),
   pointer_default(unique),
   dual
]

interface ITTAPI : IDispatch
{
    [id(IDISPTAPI | 13), helpstring("Initialize")]
    HRESULT Initialize();

    [id(IDISPTAPI | 14), helpstring("Shutdown")]
    HRESULT Shutdown();

    [propget, id(IDISPTAPI | 1), helpstring("property Addresses")]
    HRESULT Addresses( 
            [out, retval] VARIANT * pVariant
            );

    [id(IDISPTAPI | 2), hidden, restricted, helpstring("method EnumerateAddresses")]
    HRESULT EnumerateAddresses(
            [out, retval] IEnumAddress ** ppEnumAddress
            );

    [id(IDISPTAPI | 3), helpstring("method RegisterCallNotifications")]
    HRESULT RegisterCallNotifications(
            [in]ITAddress * pAddress,
            [in]VARIANT_BOOL fMonitor,
            [in]VARIANT_BOOL fOwner,
            [in]long lMediaTypes,
            [in]long lCallbackInstance,
            [out,retval]long * plRegister
            );

    [id(IDISPTAPI | 4), helpstring("method UnregisterNotifications")]
    HRESULT UnregisterNotifications(
            [in] long lRegister
            );
    
    [propget, id(IDISPTAPI | 5), helpstring("property CallHubs")]
    HRESULT CallHubs(
                     [out, retval] VARIANT * pVariant
                    );

    [id(IDISPTAPI | 6), hidden, helpstring("method EnumerateCallHubs")]
    HRESULT EnumerateCallHubs(
                              [out, retval] IEnumCallHub ** ppEnumCallHub
                             );

    [id(IDISPTAPI | 7), helpstring("method SetCallHubTracking")]
    HRESULT SetCallHubTracking(
                               [in] VARIANT pAddresses,
                               [in] VARIANT_BOOL bTracking
                               );

    
    [id(IDISPTAPI | 8), hidden]
    HRESULT EnumeratePrivateTAPIObjects(
            [out] IEnumUnknown ** ppEnumUnknown
            );
    [propget, id(IDISPTAPI | 9), helpstring("property PrivateTAPIObjects")]
    HRESULT PrivateTAPIObjects(
            [out, retval] VARIANT * pVariant
            );

    [id(IDISPTAPI | 10), helpstring("method RegisterRequestRecipient")]
    HRESULT RegisterRequestRecipient(
            [in] long lRegistrationInstance,
            [in] long lRequestMode,
            [in] VARIANT_BOOL fEnable
            );

    [id(IDISPTAPI | 11), helpstring("method SetAssistedTelephonyPriority")]
    HRESULT SetAssistedTelephonyPriority(
            [in] BSTR pAppFilename,
            [in] VARIANT_BOOL fPriority
            );

    [id(IDISPTAPI | 12), helpstring("method SetApplicationPriority")]
    HRESULT SetApplicationPriority(
            [in] BSTR pAppFilename,
            [in] long lMediaType,
            [in] VARIANT_BOOL fPriority
            );

    [propput, id(IDISPTAPI | 15), helpstring("property EventFilter")]
    HRESULT EventFilter( 
            [in] long lFilterMask
            );
            
    [propget, id(IDISPTAPI | 15), helpstring("property EventFilter")]
    HRESULT EventFilter( 
            [out, retval] long * plFilterMask
            );

}

[
   uuid( B1EFC384-9355-11d0-835C-00AA003CCABD ),
   helpstring("TAPI 3.0 ITMediaSupport interface"),
   dual
]

interface ITMediaSupport : IDispatch
{
    [propget, id(IDISPMEDIASUPPORT | 1), helpstring("property MediaTypes")]
    HRESULT MediaTypes( 
            [out, retval] long * plMediaTypes
            );

    [id(IDISPMEDIASUPPORT | 2), helpstring("method QueryMediaType")]
    HRESULT QueryMediaType(
            [in] long lMediaType,
            [out, retval] VARIANT_BOOL * pfSupport
            );
}

[
    uuid( B1EFC385-9355-11d0-835C-00AA003CCABD ),
    helpstring("TAPI 3.0 ITTerminalSupport interface"),
    dual
]

interface ITTerminalSupport : IDispatch
{
    [propget, id(IDISPAGGREGATEDMSPADDRESSOBJ | 1), helpstring("property StaticTerminals")]
    HRESULT StaticTerminals( 
            [out, retval] VARIANT * pVariant
            );

    [id(IDISPAGGREGATEDMSPADDRESSOBJ | 2), hidden, helpstring("method EnumerateStaticTerminals")]
    HRESULT EnumerateStaticTerminals( 
            [out, retval] IEnumTerminal ** ppTerminalEnumerator 
            );

    [propget, id(IDISPAGGREGATEDMSPADDRESSOBJ | 3), helpstring("property DynamicTerminalClasses")]
    HRESULT DynamicTerminalClasses( 
            [out, retval] VARIANT * pVariant
            );

    [id(IDISPAGGREGATEDMSPADDRESSOBJ | 4), hidden, helpstring("method EnumerateDynamicTerminalClasses")]
    HRESULT EnumerateDynamicTerminalClasses(
            [out, retval] IEnumTerminalClass ** ppTerminalClassEnumerator
            );

    [id(IDISPAGGREGATEDMSPADDRESSOBJ | 5), helpstring("method CreateTerminal")]
    HRESULT CreateTerminal(
            [in] BSTR pTerminalClass,
            [in] long lMediaType,
            [in] TERMINAL_DIRECTION Direction,
            [out, retval] ITTerminal ** ppTerminal
            );

    [id(IDISPAGGREGATEDMSPADDRESSOBJ | 6), helpstring("method GetDefaultStaticTerminal")]
    HRESULT GetDefaultStaticTerminal(
            [in] long lMediaType,
            [in] TERMINAL_DIRECTION Direction,
            [out, retval] ITTerminal ** ppTerminal
            );
}

[
    uuid( B1EFC386-9355-11d0-835C-00AA003CCABD ),
    helpstring("TAPI 3.0 ITAddress interface"),
    dual
]

interface ITAddress : IDispatch
{
    [propget, id(IDISPADDRESS | 1), helpstring("property State")]
    HRESULT State( 
            [out, retval] ADDRESS_STATE * pAddressState 
            );

    [propget, id(IDISPADDRESS | 2), helpstring("property AddressName")]
    HRESULT AddressName( 
            [out, retval] BSTR *  ppName 
            );
        
    [propget, id(IDISPADDRESS | 3), helpstring("property ServiceProviderName")]
    HRESULT ServiceProviderName( 
            [out, retval] BSTR *  ppName 
            );

    [propget, id(IDISPADDRESS | 4), helpstring("property TAPIObject")]
    HRESULT TAPIObject(
            [out, retval] ITTAPI ** ppTapiObject
            );

    [id(IDISPADDRESS | 5), helpstring("method CreateCall")]
    HRESULT CreateCall(
            [in] BSTR pDestAddress,
            [in] long lAddressType,
            [in] long lMediaTypes,
            [out, retval] ITBasicCallControl ** ppCall 
            );

    [propget, id(IDISPADDRESS | 6), helpstring("property Calls")]
    HRESULT Calls(
            [out, retval] VARIANT * pVariant
            );

    [id(IDISPADDRESS | 7), hidden, helpstring("method EnumerateCalls")]
    HRESULT EnumerateCalls(
            [out, retval] IEnumCall ** ppCallEnum 
            );

    [propget, id(IDISPADDRESS | 8), helpstring("property DialableAddress")]
    HRESULT DialableAddress(
            [out,retval] BSTR * pDialableAddress
            );

    [id(IDISPADDRESS | 10), helpstring("method CreateForwardInfoObject")]
    HRESULT CreateForwardInfoObject(
            [out, retval] ITForwardInformation ** ppForwardInfo
            );

    [id(IDISPADDRESS | 11), helpstring("method Forward")]
    HRESULT Forward(
            [in] ITForwardInformation * pForwardInfo,
            [in] ITBasicCallControl * pCall
            );

    [propget, id(IDISPADDRESS | 12), helpstring("method Forward")]
    HRESULT CurrentForwardInfo(
            [out, retval] ITForwardInformation ** ppForwardInfo
            );

    [propput, id(IDISPADDRESS | 14), helpstring("property MessageWaiting")]
    HRESULT MessageWaiting(
            [in] VARIANT_BOOL  fMessageWaiting
            );

    [propget, id(IDISPADDRESS | 14), helpstring("property MessageWaiting")]
    HRESULT MessageWaiting(
            [out, retval] VARIANT_BOOL * pfMessageWaiting
            );

    [propput, id(IDISPADDRESS | 15), helpstring("property DoNotDisturb")]
    HRESULT DoNotDisturb(
            [in] VARIANT_BOOL  fDoNotDisturb
            );

    [propget, id(IDISPADDRESS | 15), helpstring("property DoNotDisturb")]
    HRESULT DoNotDisturb(
            [out, retval] VARIANT_BOOL * pfDoNotDisturb
            );

}

[
    uuid( 8DF232F5-821B-11d1-BB5C-00C04FB6809F ),
    helpstring("TAPI 3.0 ITAddressCapabilities interface"),
    dual
]
interface ITAddressCapabilities : IDispatch
{
    [propget, id(IDISPADDRESSCAPABILITIES | 1), helpstring("property AddressCapability")]
    HRESULT AddressCapability( 
            [in] ADDRESS_CAPABILITY AddressCap, 
            [out, retval] long * plCapability
            );

    [propget, id(IDISPADDRESSCAPABILITIES | 2), helpstring("property AddressCapabilityString")]
    HRESULT AddressCapabilityString(
            [in] ADDRESS_CAPABILITY_STRING AddressCapString,
            [out, retval] BSTR * ppCapabilityString
            );

    [propget, id(IDISPADDRESSCAPABILITIES | 3), helpstring("property CallTreatments")]
    HRESULT CallTreatments( [out, retval] VARIANT * pVariant );

    [id(IDISPADDRESSCAPABILITIES | 4), hidden]
    HRESULT EnumerateCallTreatments( [out, retval] IEnumBstr ** ppEnumCallTreatment );

    [propget, id(IDISPADDRESSCAPABILITIES | 5), helpstring("property CompletionMessages")]
    HRESULT CompletionMessages( [out, retval] VARIANT * pVariant );

    [id(IDISPADDRESSCAPABILITIES | 6), hidden]
    HRESULT EnumerateCompletionMessages( [out, retval] IEnumBstr ** ppEnumCompletionMessage );

    [propget, id(IDISPADDRESSCAPABILITIES | 7), helpstring("property DeviceClasses")]
    HRESULT DeviceClasses( [out, retval] VARIANT * pVariant );

    [id(IDISPADDRESSCAPABILITIES | 8), hidden]
    HRESULT EnumerateDeviceClasses( [out, retval] IEnumBstr ** ppEnumDeviceClass );
}

[
    uuid( B1EFC389-9355-11d0-835C-00AA003CCABD ),
    helpstring("TAPI 3.0 ITBasicCallControl interface"),
    dual
]
    
interface ITBasicCallControl : IDispatch
{

    [id(IDISPBASICCALLCONTROL | 3), helpstring("method Connect")]
    HRESULT Connect(
            [in] VARIANT_BOOL fSync
            );

    [id(IDISPBASICCALLCONTROL | 4), helpstring("method Answer")]
    HRESULT Answer();

    [id(IDISPBASICCALLCONTROL | 5), helpstring("method Disconnect")]
    HRESULT Disconnect( 
            [in] DISCONNECT_CODE code 
            );

    [id(IDISPBASICCALLCONTROL | 6), helpstring("method Hold")]
    HRESULT Hold( 
            [in] VARIANT_BOOL fHold 
            );

    [id(IDISPBASICCALLCONTROL | 7), helpstring("method HandoffDirect")]
    HRESULT HandoffDirect(
            [in] BSTR pApplicationName
            );

    [id(IDISPBASICCALLCONTROL | 8), helpstring("method HandoffIndirect")]
    HRESULT HandoffIndirect(
            [in] long lMediaType
            );

    [id(IDISPBASICCALLCONTROL | 9), helpstring("method Conference")]
    HRESULT Conference(
            [in] ITBasicCallControl * pCall,
            [in] VARIANT_BOOL fSync
            );

    [id(IDISPBASICCALLCONTROL | 10), helpstring("method Transfer")]
    HRESULT Transfer( 
            [in] ITBasicCallControl * pCall,
            [in] VARIANT_BOOL fSync
            );

    [id(IDISPBASICCALLCONTROL | 11), helpstring("method BlindTransfer")]
    HRESULT BlindTransfer( 
            [in] BSTR pDestAddress
            );
    [id(IDISPBASICCALLCONTROL | 12), helpstring("method SwapHold")]
    HRESULT SwapHold( 
            [in] ITBasicCallControl * pCall
            );
    [id(IDISPBASICCALLCONTROL | 13), helpstring("method ParkDirect")]
    HRESULT ParkDirect(
            [in] BSTR pParkAddress
            );
    [id(IDISPBASICCALLCONTROL | 14), helpstring("method ParkIndirect")]
    HRESULT ParkIndirect(
            [out, retval] BSTR * ppNonDirAddress
            );
    [id(IDISPBASICCALLCONTROL | 15), helpstring("method Unpark")]
    HRESULT Unpark();

    [id(IDISPBASICCALLCONTROL | 16), helpstring("method SetQOS")]
    HRESULT SetQOS(
            [in] long lMediaType,
            [in] QOS_SERVICE_LEVEL ServiceLevel
            );

    [id(IDISPBASICCALLCONTROL | 19), helpstring("method Pickup")]
    HRESULT Pickup(
            [in] BSTR pGroupID
            );

    [id(IDISPBASICCALLCONTROL | 20), helpstring("method Dial")]
    HRESULT Dial(
            [in] BSTR pDestAddress
            );

    [id(IDISPBASICCALLCONTROL | 21), helpstring("method Finish")]
    HRESULT Finish(
			[in]  FINISH_MODE   finishMode
			);

    [id(IDISPBASICCALLCONTROL | 22), helpstring("method RemoveFromConference")]
    HRESULT RemoveFromConference();

}

[
    uuid( 350F85D1-1227-11D3-83D4-00C04FB6809F ),
    helpstring("TAPI 3.0 ITCallInfo interface"),
    dual
]
    
interface ITCallInfo : IDispatch
{
    [propget, id(IDISPCALLINFO | 1), helpstring("property Address")]
    HRESULT Address(
            [out, retval] ITAddress ** ppAddress
            );

    [propget, id(IDISPCALLINFO | 2), helpstring("property CallState")]
    HRESULT CallState( 
            [out, retval] CALL_STATE * pCallState 
            );

    [propget, id(IDISPCALLINFO | 3), helpstring("property Privilege")]
    HRESULT Privilege(
            [out, retval] CALL_PRIVILEGE * pPrivilege
            );

    [propget, id(IDISPCALLINFO | 4), helpstring("property CallHub")]
    HRESULT CallHub(
                    [out,retval] ITCallHub ** ppCallHub
                   );

    [propget, id(IDISPCALLINFO | 5), helpstring("property CallInfoLong")]
    HRESULT CallInfoLong(
            [in] CALLINFO_LONG CallInfoLong,
            [out, retval] long * plCallInfoLongVal
            );

    [propput, id(IDISPCALLINFO | 5), helpstring("property CallInfoLong")]
    HRESULT CallInfoLong(
            [in] CALLINFO_LONG CallInfoLong,
            [in] long lCallInfoLongVal
            );

    [propget, id(IDISPCALLINFO | 6), helpstring("property CallInfoString")]
    HRESULT CallInfoString(
            [in] CALLINFO_STRING CallInfoString,
            [out, retval] BSTR * ppCallInfoString
            );

    [propput, id(IDISPCALLINFO | 6), helpstring("property CallInfoString")]
    HRESULT CallInfoString(
            [in] CALLINFO_STRING CallInfoString,
            [in] BSTR pCallInfoString
            );

    [propget, id(IDISPCALLINFO | 7), helpstring("property CallInfoBuffer")]
    HRESULT CallInfoBuffer(
            [in] CALLINFO_BUFFER CallInfoBuffer,
            [out, retval] VARIANT * ppCallInfoBuffer
            );

    [propput, id(IDISPCALLINFO | 7), helpstring("property CallInfoBuffer")]
    HRESULT CallInfoBuffer(
            [in] CALLINFO_BUFFER CallInfoBuffer,
            [in] VARIANT pCallInfoBuffer
            );

    [id(IDISPCALLINFO | 8), hidden]
    HRESULT GetCallInfoBuffer(
            [in] CALLINFO_BUFFER CallInfoBuffer,
            [out] DWORD * pdwSize,
            [out, size_is(,*pdwSize)] BYTE ** ppCallInfoBuffer
            );

    [id(IDISPCALLINFO | 9), hidden]
    HRESULT SetCallInfoBuffer(
            [in] CALLINFO_BUFFER CallInfoBuffer,
            [in] DWORD dwSize,
            [in, size_is(dwSize)] BYTE * pCallInfoBuffer
            );

    [id(IDISPCALLINFO | 10), helpstring("method ReleaseUserUserInfo")]
    HRESULT ReleaseUserUserInfo();
}


//
// Implemented by the MSP's Terminal objects.
//

[
    uuid( B1EFC38A-9355-11d0-835C-00AA003CCABD ),
    helpstring("TAPI 3.0 ITTerminal interface"),
    dual
]

interface ITTerminal : IDispatch
{
    [propget, id(1), helpstring("property Name")]
    HRESULT Name(
            [out, retval] BSTR * ppName
            );

    [propget, id(2), helpstring("property State")]
    HRESULT State( 
            [out, retval] TERMINAL_STATE * pTerminalState 
            );

    [propget, id(3), helpstring("property TerminalType")]
    HRESULT TerminalType(
            [out, retval] TERMINAL_TYPE * pType
            );

    // terminal class is actually a guid
    [propget, id(4), helpstring("property TerminalClass")] 
    HRESULT TerminalClass(
            [out, retval] BSTR * ppTerminalClass
            );

    [propget, id(5), helpstring("property MediaType")]
    HRESULT MediaType(
            [out, retval] long * plMediaType
            );

    [propget, id(6), helpstring("property Direction")]
    HRESULT Direction(
            [out, retval] TERMINAL_DIRECTION *pDirection
            );
}

[
    uuid( B1EFC38D-9355-11d0-835C-00AA003CCABD ),
    helpstring("TAPI 3.0 ITBasicAudioTerminal interface"),
    dual
]
    
interface ITBasicAudioTerminal : IDispatch
{
    [propput, id(1), helpstring("property Volume")]
    HRESULT Volume(
            [in] long lVolume
            );

    [propget, id(1), helpstring("property Volume")]
    HRESULT Volume(
            [out, retval] long * plVolume
            );

    [propput, id(2), helpstring("property Balance")]
    HRESULT Balance(
            [in] long lBalance
            );

    [propget, id(2), helpstring("property Balance")]
    HRESULT Balance(
            [out, retval] long * plBalance
            );
}

[
    uuid( A3C1544E-5B92-11d1-8F4E-00C04FB6809F ),
    helpstring("TAPI 3.0 ITCallHub interface"),
    dual
]
interface ITCallHub : IDispatch
{
    [id(1), helpstring("method Clear")]
    HRESULT Clear();

    [id(2), hidden, helpstring("method EnumerateCalls")]
    HRESULT EnumerateCalls( 
        [out, retval] IEnumCall ** ppEnumCall 
        );
    [propget, id(3), helpstring("property Calls")]
    HRESULT Calls(
        [out, retval] VARIANT * pCalls
        );
    [propget, id(4), helpstring("property NumCalls")]
    HRESULT NumCalls(
       [out, retval] long * plCalls
       );

    [propget, id(5), helpstring("property State")]
    HRESULT State(
                  [out, retval] CALLHUB_STATE * pState
                 );
}

[
    uuid(AB493640-4C0B-11D2-A046-00C04FB6809F),
    helpstring("TAPI 3.0 ITLegacyAddressMediaControl Interface"),
    hidden,
    pointer_default(unique)
]
interface ITLegacyAddressMediaControl : IUnknown
{
    [id(IDISPLEGACYADDRESSMEDIACONTROL | 1), hidden]
    HRESULT GetID(
        [in] BSTR pDeviceClass,
        [out] DWORD * pdwSize,
        [out, size_is(,*pdwSize)] BYTE ** ppDeviceID
        );

    [id(IDISPLEGACYADDRESSMEDIACONTROL | 2), hidden]
    HRESULT GetDevConfig(
        [in] BSTR pDeviceClass,
        [out] DWORD * pdwSize,
        [out, size_is(,*pdwSize)] BYTE ** ppDeviceConfig
        );

    [id(IDISPLEGACYADDRESSMEDIACONTROL | 3), hidden]
    HRESULT SetDevConfig(
        [in] BSTR pDeviceClass,
        [in] DWORD dwSize,
        [in, size_is(dwSize)] BYTE * pDeviceConfig
        );

}

[
    uuid(d624582f-cc23-4436-b8a5-47c625c8045d),
    helpstring("TAPI 3.0 ITLegacyCallMediaControl Interface"),
    pointer_default(unique)
]
interface ITLegacyCallMediaControl : IDispatch
{
    [id(IDISPLEGACYCALLMEDIACONTROL | 1), helpstring("method DetectDigits")]
    HRESULT DetectDigits(
            [in] TAPI_DIGITMODE DigitMode
            );
    [id(IDISPLEGACYCALLMEDIACONTROL | 2), helpstring("method GenerateDigits")]
    HRESULT GenerateDigits(
            [in] BSTR pDigits,
            [in] TAPI_DIGITMODE DigitMode
            );
    [id(IDISPLEGACYCALLMEDIACONTROL | 3), hidden]
    HRESULT GetID(
        [in] BSTR pDeviceClass,
        [out] DWORD * pdwSize,
        [out, size_is(,*pdwSize)] BYTE ** ppDeviceID
        );
    [id(IDISPLEGACYCALLMEDIACONTROL | 4), helpstring("method SetMediaType")]
    HRESULT SetMediaType(
        [in] long lMediaType
        );
    [id(IDISPLEGACYCALLMEDIACONTROL | 5), helpstring("method MonitorMedia")]
    HRESULT MonitorMedia(
        [in] long lMediaType
        );
}

[
    uuid( AE269CF4-935E-11d0-835C-00AA003CCABD ),
    helpstring("TAPI 3.0 IEnumTerminal Interface"),
    hidden,
    pointer_default(unique)
]
    
interface IEnumTerminal : IUnknown
{

    HRESULT Next(
            [in] ULONG celt,
            [out] ITTerminal ** ppElements,
            [in,out,ptr] ULONG * pceltFetched
            );

    HRESULT Reset( void );

    HRESULT Skip (
            [in] ULONG celt
            );

    HRESULT Clone (
            [out, retval] IEnumTerminal ** ppEnum
            );
}


[
    uuid( AE269CF5-935E-11d0-835C-00AA003CCABD ),
    helpstring("TAPI 3.0 IEnumTerminalClass interface"),
    hidden,
    pointer_default(unique)
]
    
interface IEnumTerminalClass : IUnknown
{

    HRESULT Next(
            [in] ULONG celt,
            [out, size_is(celt)] GUID * pElements,
            [in,out,ptr] ULONG * pceltFetched
            );

    HRESULT Reset( void );

    HRESULT Skip (
            [in] ULONG celt
            );

    HRESULT Clone (
            [out, retval] IEnumTerminalClass ** ppEnum
            );
}


[
    uuid( AE269CF6-935E-11d0-835C-00AA003CCABD ),
    helpstring("TAPI 3.0 IEnumCall interface"),
    hidden,
    pointer_default(unique)
]
    
interface IEnumCall : IUnknown
{

    HRESULT Next(
            [in] ULONG celt,
            [out] ITCallInfo ** ppElements,
            [in,out,ptr] ULONG * pceltFetched
            );

    HRESULT Reset( void );

    HRESULT Skip (
            [in] ULONG celt
            );

    HRESULT Clone (
            [out, retval] IEnumCall ** ppEnum
            );
}



[
    uuid( 1666FCA1-9363-11d0-835C-00AA003CCABD ),
    helpstring("TAPI 3.0 IEnumAddress interface"),
    hidden,
    pointer_default(unique)
]
    
interface IEnumAddress : IUnknown
{
    HRESULT Next(
            [in] ULONG celt,
            [out, size_is(celt)] ITAddress ** ppElements,
            [in,out,ptr] ULONG * pceltFetched
            );

    HRESULT Reset( void );

    HRESULT Skip (
            [in] ULONG celt
            );

    HRESULT Clone (
            [out, retval] IEnumAddress ** ppEnum
            );
}

[
    uuid( A3C15450-5B92-11d1-8F4E-00C04FB6809F ),
    helpstring("TAPI 3.0 IEnumCallHub interface"),
    hidden,
    pointer_default(unique)
]
interface IEnumCallHub : IUnknown
{

    HRESULT Next(
            [in] ULONG celt,
            [out, size_is(celt)] ITCallHub ** ppElements,
            [in,out,ptr] ULONG * pceltFetched
            );

    HRESULT Reset( void );

    HRESULT Skip (
            [in] ULONG celt
            );

    HRESULT Clone (
            [out, retval] IEnumCallHub ** ppEnum
            );
}

[
    uuid( 35372049-0BC6-11d2-A033-00C04FB6809F ),
    helpstring("TAPI 3.0 IEnumBstr interface"),
    hidden,
    pointer_default(unique)
]
interface IEnumBstr : IUnknown
{
    HRESULT Next(
            [in] ULONG celt,
            [out, size_is(celt)] BSTR * ppStrings,
            [in,out,ptr] ULONG * pceltFetched
            );

    HRESULT Reset( void );

    HRESULT Skip (
            [in] ULONG celt
            );

    HRESULT Clone (
            [out, retval] IEnumBstr ** ppEnum
            );
}
[
    uuid( 62F47097-95C9-11d0-835D-00AA003CCABD ),
    helpstring("TAPI 3.0 ITCallStateEvent Interface"),
    dual
]
interface ITCallStateEvent : IDispatch
{
    [propget, id(1), helpstring("property Call")]
    HRESULT Call(
            [out, retval] ITCallInfo ** ppCallInfo
    );

    [propget, id(2), helpstring("property State")]
    HRESULT State(
            [out, retval] CALL_STATE * pCallState
            );

    [propget, id(3), helpstring("property Cause")]
    HRESULT Cause(
            [out, retval] CALL_STATE_EVENT_CAUSE * pCEC
            );

    [propget, id(4), helpstring("property CallbackInstance")]
    HRESULT CallbackInstance(
            [out, retval] long * plCallbackInstance
            );
}


[
    uuid( FF36B87F-EC3A-11d0-8EE4-00C04FB6809F ),
    helpstring("TAPI 3.0 ITCallMediaEvent Interface"),
    dual
]
interface ITCallMediaEvent : IDispatch
{
    [propget, id(1), helpstring("property Call")]
    HRESULT Call(
            [out, retval] ITCallInfo ** ppCallInfo
            );
    
    [propget, id(2), helpstring("property Event")]
    HRESULT Event(
            [out, retval] CALL_MEDIA_EVENT * pCallMediaEvent
            );
    
    [propget, id(3), helpstring("property Error")]
    HRESULT Error(
            [out, retval] HRESULT * phrError
            );

    [propget, id(4), helpstring("property Terminal")]
    HRESULT Terminal(
            [out, retval] ITTerminal ** ppTerminal
            );

    [propget, id(5), helpstring("property Stream")]
    HRESULT Stream(
            [out, retval] ITStream ** ppStream
            );

    [propget, id(6), helpstring("property Cause")]
    HRESULT Cause(
            [out, retval] CALL_MEDIA_EVENT_CAUSE * pCause
            );
}

[

    uuid( 80D3BFAC-57D9-11d2-A04A-00C04FB6809F ),
    helpstring("TAPI 3.0 ITDigitDetectionEvent interface"),
    oleautomation
]
interface ITDigitDetectionEvent : IDispatch
{
    [propget, id(1), helpstring("property Call")]
    HRESULT Call( [out, retval] ITCallInfo ** ppCallInfo );

    [propget, id(2), helpstring("property Digit")]
    HRESULT Digit( [out, retval] unsigned char * pucDigit );

    [propget, id(3), helpstring("property DigitMode")]
    HRESULT DigitMode( [out, retval] TAPI_DIGITMODE * pDigitMode );

    [propget, id(4), helpstring("property TickCount")]
    HRESULT TickCount( [out, retval] long * plTickCount );

    [propget, id(5), helpstring("property CallbackInstance")]
    HRESULT CallbackInstance( [out, retval] long * plCallbackInstance );
}

[
    uuid(80D3BFAD-57D9-11d2-A04A-00C04FB6809F),
    helpstring("TAPI 3.0 ITDigitGenerationEvent interface"),
    dual
]
interface ITDigitGenerationEvent : IDispatch
{
    [propget, id(1), helpstring("property Call")]
    HRESULT Call( [out, retval] ITCallInfo ** ppCallInfo );

    [propget, id(2), helpstring("property GenerationTermination")]
    HRESULT GenerationTermination( [out, retval] long * plGenerationTermination );

    [propget, id(3), helpstring("property TickCount")]
    HRESULT TickCount( [out, retval] long * plTickCount );

    [propget, id(4), helpstring("property CallbackInstance")]
    HRESULT CallbackInstance( [out, retval] long * plCallbackInstance );
}

[
    uuid( F4854D48-937A-11d1-BB58-00C04FB6809F ),
    helpstring("TAPI 3.0 ITTAPIObjectEvent Interface"),
    dual
]
interface ITTAPIObjectEvent : IDispatch
{
    [propget, id(1), helpstring("property TAPIObject")]
    HRESULT TAPIObject(
        [out, retval] ITTAPI ** ppTAPIObject
        );

    [propget, id(2), helpstring("property Event")]
    HRESULT Event(
        [out, retval] TAPIOBJECT_EVENT * pEvent
        );

    [propget, id(3), helpstring("property Address")]
    HRESULT Address(
        [out, retval] ITAddress ** ppAddress
        );

    [propget, id(4), helpstring("property CallbackInstance")]
    HRESULT CallbackInstance(
        [out, retval] long * plCallbackInstance
        );
}


[
    uuid( EDDB9426-3B91-11d1-8F30-00C04FB6809F ),
    helpstring("TAPI 3.0 ITTAPIEventNotification Interface"),
    oleautomation
]
interface ITTAPIEventNotification : IUnknown
{
    [id(1), helpstring("method Event")]
    HRESULT Event(
            [in] TAPI_EVENT TapiEvent,
            [in] IDispatch * pEvent
            );
}


[
    uuid( A3C15451-5B92-11d1-8F4E-00C04FB6809F ),
    helpstring("TAPI 3.0 ITCallHubEvent Interface"),
    oleautomation
]
interface ITCallHubEvent : IDispatch
{
    [propget, id(1), helpstring("property Event")]
    HRESULT Event(
                  [out, retval] CALLHUB_EVENT * pEvent
                 );

    [propget, id(2), helpstring("property CallHub")]
    HRESULT CallHub(
                    [out, retval] ITCallHub ** ppCallHub
                   );

    [propget, id(3), helpstring("property Call")]
    HRESULT Call(
                 [out, retval] ITCallInfo ** ppCall
                );
}

[
    uuid( 831CE2D1-83B5-11d1-BB5C-00C04FB6809F ),
    helpstring("TAPI 3.0 ITAddressEvent interface"),
    oleautomation
]
interface ITAddressEvent : IDispatch
{
    [propget, id(1), helpstring("property Address")]
    HRESULT Address( [out, retval] ITAddress ** ppAddress );
    
    [propget, id(2), helpstring("property Event")]
    HRESULT Event( [out, retval] ADDRESS_EVENT * pEvent );

    [propget, id(3), helpstring("property Terminal")]
    HRESULT Terminal( [out, retval] ITTerminal ** ppTerminal );
}

[
    uuid( CFA3357C-AD77-11d1-BB68-00C04FB6809F ),
    helpstring("TAPI 3.0 ITQOSEvent Interface"),
    oleautomation
]
interface ITQOSEvent : IDispatch
{
    [propget, id(1), helpstring("property CallHub")]
    HRESULT Call( [out, retval] ITCallInfo ** ppCall );

    [propget, id(3), helpstring("property Event")]
    HRESULT Event( [out, retval] QOS_EVENT * pQosEvent );

    [propget, id(4), helpstring("property MediaType")]
    HRESULT MediaType( [out, retval] long * plMediaType );
}

[
    uuid( 5D4B65F9-E51C-11d1-A02F-00C04FB6809F ),
    helpstring("TAPI 3.0 ITCallInfoChangeEvent Interface"),
    oleautomation
]
interface ITCallInfoChangeEvent : IDispatch
{
    [ propget, id(1), helpstring("property Call") ]
    HRESULT Call( [out, retval] ITCallInfo ** ppCall );

    [ propget, id(2), helpstring("property Cause") ]
    HRESULT Cause( [out, retval] CALLINFOCHANGE_CAUSE * pCIC );

    [ propget, id(3), helpstring("property Callback Instance") ]
    HRESULT CallbackInstance( [out, retval] long * plCallbackInstance );
}


[
    uuid( AC48FFDF-F8C4-11d1-A030-00C04FB6809F ),
    helpstring("TAPI 3.0 ITRequest Interface"),
    oleautomation
]
interface ITRequest : IDispatch
{
    [ id(1), helpstring("method MakeCall") ]
    HRESULT MakeCall(
        [in] BSTR pDestAddress,
        [in] BSTR pAppName,
        [in] BSTR pCalledParty,
        [in] BSTR pComment
        );
}

[
    uuid(AC48FFDE-F8C4-11d1-A030-00C04FB6809F ),
    helpstring("TAPI 3.0 ITRequestEvent Interface"),
    oleautomation
]
interface ITRequestEvent : IDispatch
{
    [ propget, id(1), helpstring("property RegistrationInstance") ]
    HRESULT RegistrationInstance( [out, retval] long * plRegistrationInstance );

    [ propget, id(2), helpstring("property RequestMode") ]
    HRESULT RequestMode( [out, retval] long * plRequestMode );

    [ propget, id(3), helpstring("property DestAddress") ]
    HRESULT DestAddress( [out, retval] BSTR * ppDestAddress );

    [ propget, id(5), helpstring("property AppName") ]
    HRESULT AppName( [out, retval] BSTR * ppAppName );

    [ propget, id(6), helpstring("property CalledParty") ]
    HRESULT CalledParty( [out, retval] BSTR * ppCalledParty );

    [ propget, id(7), helpstring("property Comment") ]
    HRESULT Comment( [out, retval] BSTR * ppComment );
}


[
    object,
    public,
    uuid( 5EC5ACF2-9C02-11d0-8362-00AA003CCABD ),
    helpstring("TAPI 3.0 ITCollection interface"),
    dual
]
interface ITCollection : IDispatch
{
    [propget, helpstring("Returns number of items in collection.")]
    HRESULT Count(
            [out, retval] long * lCount
            );

    [propget, id(DISPID_VALUE), 
        helpstring("Given an index, returns an item in the collection.")]
    HRESULT Item(
            [in] long Index, 
            [out, retval] VARIANT * pVariant
            );

    [propget, restricted, id(DISPID_NEWENUM),
        helpstring("returns an enumerator for the collection.")]
        HRESULT _NewEnum(
            [out, retval] IUnknown ** ppNewEnum
            );
}


[
    uuid( 449F659E-88A3-11d1-BB5D-00C04FB6809F ),
    helpstring("TAPI 3.0 ITForwardInformation Interface"),
    dual
]
interface ITForwardInformation : IDispatch
{
    [propput, id(1), helpstring("property NumRingsNoAnswer")]
    HRESULT NumRingsNoAnswer( 
        [in] long lNumRings 
        );
    [propget, id(1), helpstring("property NumRingsNoAnswer")]
    HRESULT NumRingsNoAnswer( 
        [out, retval] long * plNumRings 
        );
    [id(2), helpstring("method SetForwardType")]
    HRESULT SetForwardType( 
        [in] long ForwardType, 
        [in] BSTR pDestAddress,
        [in] BSTR pCallerAddress
        );
    [propget, id(3), helpstring("property ForwardTypeDestination")]
    HRESULT ForwardTypeDestination( 
        [in] long ForwardType, 
        [out, retval] BSTR * ppDestAddress 
        );
    [propget, id(4), helpstring("property ForwardTypeCaller")]    
    HRESULT ForwardTypeCaller( 
        [in] long Forwardtype, 
        [out, retval] BSTR * ppCallerAddress 
        );
    [id(5),hidden]
    HRESULT GetForwardType(
        [in] long ForwardType,
        [out] BSTR * ppDestinationAddress,
        [out] BSTR * ppCallerAddress
        );
    [id(6), helpstring("method Clear")]
    HRESULT Clear();
}

[
    uuid( 0C4D8F03-8DDB-11d1-A09E-00805FC147D3 ),
    helpstring("TAPI 3.0 ITAddressTranslation Interface"),
    dual
]
interface ITAddressTranslation : IDispatch
{

    [id(IDISPADDRESSTRANSLATION | 1), helpstring("method TranslateAddress")]
    HRESULT TranslateAddress(
            [in] BSTR pAddressToTranslate,
            [in] long lCard,
            [in] long lTranslateOptions,
            [out, retval] ITAddressTranslationInfo ** ppTranslated
            );

    [id(IDISPADDRESSTRANSLATION | 2), helpstring("method TranslateDialog")]
    HRESULT TranslateDialog(
            [in] long hwndOwner,
            [in] BSTR pAddressIn
            );

    [id(IDISPADDRESSTRANSLATION | 3), hidden, helpstring("method EnumerateLocations")]
    HRESULT EnumerateLocations(
            [out, retval] IEnumLocation ** ppEnumLocation
            );
    [propget, id(IDISPADDRESSTRANSLATION | 4), helpstring("property Locations")]
    HRESULT Locations( 
            [out, retval] VARIANT * pVariant
            );
    [id(IDISPADDRESSTRANSLATION | 5), hidden, helpstring("method EnumerateCallingCards")]
    HRESULT EnumerateCallingCards(
            [out, retval] IEnumCallingCard ** ppEnumCallingCard 
            );
    [propget, id(IDISPADDRESSTRANSLATION | 6), helpstring("property CallingCards")]
    HRESULT CallingCards( 
            [out, retval] VARIANT * pVariant
            );
}



[
    uuid( AFC15945-8D40-11d1-A09E-00805FC147D3 ),
    helpstring("TAPI 3.0 ITAddressTranslationInfo Interface"),
    dual
]
interface ITAddressTranslationInfo : IDispatch
{
    [propget, id(1), helpstring("property Dialable String")]
    HRESULT DialableString( 
        [out, retval] BSTR * ppDialableString 
        );
    [propget, id(2), helpstring("property Displayable String")]
    HRESULT DisplayableString( 
        [out, retval] BSTR * ppDisplayableString 
        );
    [propget, id(3), helpstring("property Current Country Code")]    
    HRESULT CurrentCountryCode( 
        [out, retval] long * CountryCode
        );
    [propget, id(4), helpstring("property Destination Country Code")]    
    HRESULT DestinationCountryCode( 
        [out, retval] long * CountryCode
        );
    [propget, id(5), helpstring("property Translation Results")]    
    HRESULT TranslationResults( 
        [out, retval] long * plResults
        );
}

[
    uuid( 0C4D8EFF-8DDB-11d1-A09E-00805FC147D3 ),
    helpstring("TAPI 3.0 ITLocationInfo Interface"),
    dual
]
interface ITLocationInfo : IDispatch
{
    [propget, id(1), helpstring("property Permanent Location ID")]    
    HRESULT PermanentLocationID( 
        [out, retval] long * plLocationID
        );
    [propget, id(2), helpstring("property Country Code")]    
    HRESULT CountryCode( 
        [out, retval] long * plCountryCode
        );
    [propget, id(3), helpstring("property Country ID")]    
    HRESULT CountryID( 
        [out, retval] long * plCountryID
        );
    [propget, id(4), helpstring("property Options")]    
    HRESULT Options( 
        [out, retval] long * plOptions
        );
    [propget, id(5), helpstring("property Preferred Credit Card ID")]    
    HRESULT PreferredCardID( 
        [out, retval] long * plCardID
        );
    [propget, id(6), helpstring("property Location Name")]
    HRESULT LocationName( 
        [out, retval] BSTR * ppLocationName 
        );
    [propget, id(7), helpstring("property City/Area Code")]
    HRESULT CityCode( 
        [out, retval] BSTR * ppCode 
        );
    [propget, id(8), helpstring("property Local Access Code")]
    HRESULT LocalAccessCode( 
        [out, retval] BSTR * ppCode 
        );
    [propget, id(9), helpstring("property Long Distance Access Code")]
    HRESULT LongDistanceAccessCode( 
        [out, retval] BSTR * ppCode 
        );
    [propget, id(10), helpstring("property Toll Prefix List")]
    HRESULT TollPrefixList( 
        [out, retval] BSTR * ppTollList
        );
    [propget, id(11), helpstring("property Cancel Call Waiting Code")]
    HRESULT CancelCallWaitingCode( 
        [out, retval] BSTR * ppCode 
        );
}

[
    uuid( 0C4D8F01-8DDB-11d1-A09E-00805FC147D3 ),
    helpstring("TAPI 3.0 IEnumLocation interface"),
    hidden,
    pointer_default(unique)
]
    
interface IEnumLocation : IUnknown
{

    HRESULT Next(
            [in] ULONG celt,
            [out] ITLocationInfo ** ppElements,
            [in,out,ptr] ULONG * pceltFetched
            );

    HRESULT Reset( void );

    HRESULT Skip (
            [in] ULONG celt
            );

    HRESULT Clone (
            [out, retval] IEnumLocation ** ppEnum
            );
}

[
    uuid( 0C4D8F00-8DDB-11d1-A09E-00805FC147D3 ),
    helpstring("TAPI 3.0 ITCallingCard Interface"),
    dual
]
interface ITCallingCard : IDispatch
{
    [propget, id(1), helpstring("property Permanent Card ID")]    
    HRESULT PermanentCardID( 
        [out, retval] long * plCardID
        );
    [propget, id(2), helpstring("property Number Of Digits")]    
    HRESULT NumberOfDigits( 
        [out, retval] long * plDigits
        );
    [propget, id(3), helpstring("property Options")]    
    HRESULT Options( 
        [out, retval] long * plOptions
        );
    [propget, id(4), helpstring("property Card Name")]
    HRESULT CardName( 
        [out, retval] BSTR * ppCardName 
        );
    [propget, id(5), helpstring("property Same Area Dialing Rule")]
    HRESULT SameAreaDialingRule( 
        [out, retval] BSTR * ppRule 
        );
    [propget, id(6), helpstring("property Long Distance Dialing Rule")]
    HRESULT LongDistanceDialingRule( 
        [out, retval] BSTR * ppRule 
        );
    [propget, id(7), helpstring("property International Dialing Rule")]
    HRESULT InternationalDialingRule( 
        [out, retval] BSTR * ppRule 
        );
}

[
    uuid( 0C4D8F02-8DDB-11d1-A09E-00805FC147D3 ),
    helpstring("TAPI 3.0 IEnumCallingCard interface"),
    hidden,
    pointer_default(unique)
]
    
interface IEnumCallingCard : IUnknown
{

    HRESULT Next(
            [in] ULONG celt,
            [out] ITCallingCard ** ppElements,
            [in,out,ptr] ULONG * pceltFetched
            );

    HRESULT Reset( void );

    HRESULT Skip (
            [in] ULONG celt
            );

    HRESULT Clone (
            [out, retval] IEnumCallingCard ** ppEnum
            );
}


[
    uuid( 895801DF-3DD6-11d1-8F30-00C04FB6809F ),
    helpstring("TAPI 3.0 ITCallNotificationEvent interface"),
    dual
]

interface ITCallNotificationEvent : IDispatch
{
    [propget, id(1), helpstring("property Call")]
    HRESULT Call(
            [out,retval] ITCallInfo ** ppCall
            );

    [propget, id(2), helpstring("property Event")]
    HRESULT Event(
            [out,retval] CALL_NOTIFICATION_EVENT * pCallNotificationEvent
            );

    [propget, id(3), helpstring("property CallbackInstance")]
    HRESULT CallbackInstance(
            [out, retval] long * plCallbackInstance
            );

}

[
    uuid( f42a92cd-f74f-4cf7-abe8-5ce0c17a2206 ),
    helpstring("TAPI 3.0 ITPrivateData interface")
]
interface ITPrivateData : IUnknown
{
    [id(1)]
    HRESULT
    SendPrivateData(
        IUnknown * pObject,
        TAPI_OBJECT_TYPE ObjectType,
        BYTE * pBuffer,
        DWORD dwSize
        );

    [id(2)]
    HRESULT
    SendPrivateEvent(
        IUnknown         * pObject,
        TAPI_OBJECT_TYPE   ObjectType,
        long               lEventCode,
        IDispatch        * pEvent
        );
       
}

[
    uuid( 89A69E97-9119-11d1-BB60-00C04FB6809F ),
    helpstring("TAPI 3.0 ITPrivateReceiveData interface")
]
interface ITPrivateReceiveData : IUnknown
{
    [id(1)]
    HRESULT
    ReceivePrivateData(
        IUnknown * pPrivateObject,
        TAPI_OBJECT_TYPE ObjectType,
        BYTE * pBuffer,
        DWORD dwSize
        );
}
    
[
    uuid( 4FFB3DF5-9118-11d1-BB60-00C04FB6809F ),
    helpstring("TAPI 3.0 ITPrivateObjectFactory interface")
]
interface ITPrivateObjectFactory : IUnknown
{
    [id(1)]
    HRESULT
    CreatePrivateCommunication(
        ITPrivateData * pPrivateData,
        ITPrivateReceiveData ** ppPrivateReceiveData
        );

    [id(2)]
    HRESULT
    CreatePrivateTapi(
        IUnknown ** ppPrivateTapi
        );

    [id(3)]
    HRESULT
    CreatePrivateAddress(
        IUnknown * pOuterUnknown,
        IUnknown ** ppPrivateAddress
        );

    [id(4)]
    HRESULT
    CreatePrivateCall(
        BOOL fCallExists,
        IUnknown * pOuterUnknown,
        IUnknown ** ppPrivateCall
        );

    [id(5)]
    HRESULT
    CreatePrivateCallHub(
        IUnknown * pOuterUnknown,
        IUnknown ** ppPrivateCallHub
        );
}


[
    uuid( E9225295-C759-11d1-A02B-00C04FB6809F ),
    helpstring("TAPI 3.0 ITDispatchMapper interface")
]
interface ITDispatchMapper : IDispatch
{
    [id(1), helpstring("QueryDispatchInterface")]
    HRESULT
    QueryDispatchInterface(
        [in] BSTR pIID,
        [in] IDispatch * pInterfaceToMap,
        [out, retval] IDispatch ** ppReturnedInterface
        );
}


[
    uuid( EE3BD604-3868-11D2-A045-00C04FB6809F ),
    helpstring( "ITStreamControl interface" ),
    pointer_default(unique),
    dual
]
interface ITStreamControl : IDispatch
{
    [id(IDISPAGGREGATEDMSPCALLOBJ | 1), helpstring("method CreateStream")]
    HRESULT CreateStream(
        [in] long lMediaType,
        [in] TERMINAL_DIRECTION td,
        [out, retval] ITStream ** ppStream
        );

    [id(IDISPAGGREGATEDMSPCALLOBJ | 2), helpstring("method RemoveStream")]
    HRESULT RemoveStream(
        [in] ITStream * pStream
        );

    [id(IDISPAGGREGATEDMSPCALLOBJ | 3), hidden]
    HRESULT EnumerateStreams(
        [out] IEnumStream ** ppEnumStream
        );

    [propget, id(IDISPAGGREGATEDMSPCALLOBJ | 4), helpstring("property Streams")]
    HRESULT Streams(
        [out, retval] VARIANT * pVariant
        );

}


[
    uuid( EE3BD605-3868-11D2-A045-00C04FB6809F ),
    helpstring( "ITStream interface" ),
    pointer_default(unique),
    dual
]
interface ITStream : IDispatch
{
    [propget, id(1), helpstring("property MediaType")]
    HRESULT MediaType(
        [out, retval] long * plMediaType
        );

    [propget, id(2), helpstring("property Direction")]
    HRESULT Direction(
        [out, retval] TERMINAL_DIRECTION * pTD
        );

    [propget, id(3), helpstring("property Name")]
    HRESULT Name(
        [out, retval] BSTR * ppName
        );

    [id(4), helpstring("method StartStream")]
    HRESULT StartStream(void);

    [id(5), helpstring("method PauseStream")]
    HRESULT PauseStream(void);

    [id(6), helpstring("method StopStream")]
    HRESULT StopStream(void);

    [id(7), helpstring("method SelectTerminal")]
    HRESULT SelectTerminal(
        [in] ITTerminal * pTerminal
        );

    [id(8), helpstring("method UnselectTerminal")]
    HRESULT UnselectTerminal(
        [in] ITTerminal * pTerminal
        );

    [id(9), hidden]
    HRESULT EnumerateTerminals(
        [out] IEnumTerminal ** ppEnumTerminal
        );

    [propget, id(10), helpstring("property Terminals")]
    HRESULT Terminals(
        [out, retval] VARIANT * pTerminals
        );
}


[
    uuid( EE3BD606-3868-11d2-A045-00C04FB6809F ),
    helpstring( "IEnumStream interface" ),
    hidden,
    pointer_default(unique)
]
interface IEnumStream : IUnknown
{
    HRESULT Next(
            [in] ULONG celt,
            [out] ITStream ** ppElements,
            [in,out,ptr] ULONG * pceltFetched
            );

    HRESULT Reset( void );

    HRESULT Skip (
            [in] ULONG celt
            );

    HRESULT Clone (
            [out, retval] IEnumStream ** ppEnum
            );

}

[
    uuid( EE3BD607-3868-11D2-A045-00C04FB6809F ),
    helpstring( "ITSubStreamControl interface" ),
    pointer_default(unique),
    dual
]
interface ITSubStreamControl : IDispatch
{
    [id(1), helpstring("method CreateSubStream")]
    HRESULT CreateSubStream(
        [out, retval] ITSubStream ** ppSubStream
        );

    [id(2), helpstring("method RemoveSubStream")]
    HRESULT RemoveSubStream(
        [in] ITSubStream * pSubStream
        );

    [id(3), hidden]
    HRESULT EnumerateSubStreams(
        [out] IEnumSubStream ** ppEnumSubStream
        );

    [propget, id(4), helpstring("property SubStreams")]
    HRESULT SubStreams(
        [out, retval] VARIANT * pVariant
        );

}

[
    uuid( EE3BD608-3868-11D2-A045-00C04FB6809F ),
    helpstring( "ITSubStream interface" ),
    pointer_default(unique),
    dual
]
interface ITSubStream : IDispatch
{
    [id(1), helpstring("method StartStream")]
    HRESULT StartSubStream(void);

    [id(2), helpstring("method PauseStream")]
    HRESULT PauseSubStream(void);

    [id(3), helpstring("method StopStream")]
    HRESULT StopSubStream(void);

    [id(4), helpstring("method SelectTerminal")]
    HRESULT SelectTerminal(
        [in] ITTerminal * pTerminal
        );

    [id(5), helpstring("method UnselectTerminal")]
    HRESULT UnselectTerminal(
        [in] ITTerminal * pTerminal
        );

    [id(6), hidden]
    HRESULT EnumerateTerminals(
        [out] IEnumTerminal ** ppEnumTerminal
        );

    [propget, id(7), helpstring("property Terminals")]
    HRESULT Terminals(
        [out, retval] VARIANT * pTerminals
        );

    [propget, id(8), helpstring("property Stream")]
    HRESULT Stream(
        [out, retval] ITStream ** ppITStream
        );
}


[
    uuid( EE3BD609-3868-11d2-A045-00C04FB6809F ),
    helpstring( "IEnumSubStream interface" ),
    hidden,
    pointer_default(unique)
]
interface IEnumSubStream : IUnknown
{
    HRESULT Next(
            [in] ULONG celt,
            [out] ITSubStream ** ppElements,
            [in,out,ptr] ULONG * pceltFetched
            );

    HRESULT Reset( void );

    HRESULT Skip (
            [in] ULONG celt
            );

    HRESULT Clone (
            [out, retval] IEnumSubStream ** ppEnum
            );

}

[
    uuid( 207823EA-E252-11d2-B77E-0080C7135381 ),
    helpstring("ITLegacyWaveSupport")
]
interface ITLegacyWaveSupport : IDispatch
{
    HRESULT IsFullDuplex( [out] FULLDUPLEX_SUPPORT * pSupport );
}


[
    uuid( 0e269cd0-10d4-4121-9c22-9c85d625650d ),
    helpstring("TAPI 3.0 ITPrivateEvent Interface"),
    dual
]
interface ITPrivateEvent : IDispatch
{
    [propget, id(1), helpstring("property Address")]
    HRESULT Address(
        [out, retval] ITAddress ** ppAddress
        );        

    [propget, id(2), helpstring("property Call")]
    HRESULT Call(
        [out, retval] ITCallInfo ** ppCallInfo
        );
        
    [propget, id(3), helpstring("property CallHub")]
    HRESULT CallHub(
        [out, retval] ITCallHub ** ppCallHub
        );
        
    [propget, id(4), helpstring("property EventCode")]
    HRESULT EventCode(
        [out, retval] long * plEventCode
        );
    
    [propget, id(5), helpstring("property EventInterface")]
    HRESULT EventInterface(
        [out, retval] IDispatch ** pEventInterface
        );

}



cpp_quote("/****************************************")
cpp_quote(" * Terminal Classes")
cpp_quote(" ****************************************/")
cpp_quote("")
cpp_quote("// Video Windows - {F7438990-D6EB-11d0-82A6-00AA00B5CA1B}")
cpp_quote("EXTERN_C const CLSID CLSID_VideoWindowTerm;")
cpp_quote("")
cpp_quote("// Video input (camera) {AAF578EC-DC70-11d0-8ED3-00C04FB6809F}")
cpp_quote("EXTERN_C const CLSID CLSID_VideoInputTerminal;")
cpp_quote("")
cpp_quote("// Handset device {AAF578EB-DC70-11d0-8ED3-00C04FB6809F}")
cpp_quote("EXTERN_C const CLSID CLSID_HandsetTerminal;")
cpp_quote("")
cpp_quote("// Headset device {AAF578ED-DC70-11d0-8ED3-00C04FB6809F}")
cpp_quote("EXTERN_C const CLSID CLSID_HeadsetTerminal;")
cpp_quote("")
cpp_quote("// Speakerphone device {AAF578EE-DC70-11d0-8ED3-00C04FB6809F}")
cpp_quote("EXTERN_C const CLSID CLSID_SpeakerphoneTerminal;")
cpp_quote("")
cpp_quote("// Microphone (sound card) {AAF578EF-DC70-11d0-8ED3-00C04FB6809F}")
cpp_quote("EXTERN_C const CLSID CLSID_MicrophoneTerminal;")
cpp_quote("")
cpp_quote("// Speakers (sound card) {AAF578F0-DC70-11d0-8ED3-00C04FB6809F}")
cpp_quote("EXTERN_C const CLSID CLSID_SpeakersTerminal;")
cpp_quote("")
cpp_quote("// Media stream terminal {E2F7AEF7-4971-11D1-A671-006097C9A2E8}")
cpp_quote("EXTERN_C const CLSID CLSID_MediaStreamTerminal;")
cpp_quote("")
cpp_quote("// define the media modes")
cpp_quote("#define TAPIMEDIATYPE_AUDIO                     0x8")
cpp_quote("#define TAPIMEDIATYPE_VIDEO                     0x8000")
cpp_quote("#define TAPIMEDIATYPE_DATAMODEM                 0x10")
cpp_quote("#define TAPIMEDIATYPE_G3FAX                     0x20")
cpp_quote("")
cpp_quote("// {831CE2D6-83B5-11d1-BB5C-00C04FB6809F}")
cpp_quote("EXTERN_C const CLSID TAPIPROTOCOL_PSTN;")
cpp_quote("")
cpp_quote("// {831CE2D7-83B5-11d1-BB5C-00C04FB6809F}")
cpp_quote("EXTERN_C const CLSID TAPIPROTOCOL_H323;")
cpp_quote("")
cpp_quote("// {831CE2D8-83B5-11d1-BB5C-00C04FB6809F}")
cpp_quote("EXTERN_C const CLSID TAPIPROTOCOL_Multicast;")
cpp_quote("")
cpp_quote("#define __TapiConstants_MODULE_DEFINED__")


#endif // __TAPI3IF_IDL__
