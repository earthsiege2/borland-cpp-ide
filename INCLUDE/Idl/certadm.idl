//+--------------------------------------------------------------------------
//
// Microsoft Windows
// Copyright (C) Microsoft Corporation, 1996 - 1999
//
// File:        certadm.idl
//
// Contents:    IDL source for certadm.dll
//
//---------------------------------------------------------------------------

// This file will be processed by the MIDL tool to produce the type library
// (certadm.tlb) and marshalling code.

import "wtypes.idl";
import "certview.idl";

//+--------------------------------------------------------------------------
// ICertAdmin::IsValidCertificate() returned Disposition:

const LONG CA_DISP_INCOMPLETE =		0x00000000; // call did not complete
const LONG CA_DISP_ERROR =		0x00000001; // call failed
const LONG CA_DISP_REVOKED =		0x00000002; // cert revoked
const LONG CA_DISP_VALID =		0x00000003; // cert still valid
const LONG CA_DISP_INVALID =		0x00000004; // cert never issued
const LONG CA_DISP_UNDER_SUBMISSION =   0x00000005; // taken under submission

//+--------------------------------------------------------------------------
// ICertAdmin class -- local COM interface, implementation uses DCOM
//+--------------------------------------------------------------------------

[
    object,
    uuid(34df6950-7fb6-11d0-8817-00a0c903b83c),
    dual,
    helpstring("ICertAdmin Interface"),
    pointer_default(unique)
]

interface ICertAdmin: IDispatch
{
    import "oaidl.idl";

    HRESULT IsValidCertificate(
		[in] BSTR const strConfig,
		[in] BSTR const strSerialNumber,
		[out, retval] LONG *pDisposition);

    HRESULT GetRevocationReason(
		[out, retval] LONG *pReason);

    HRESULT RevokeCertificate(
		[in] BSTR const strConfig,
		[in] BSTR const strSerialNumber,
		[in] LONG Reason,
		[in] DATE Date);

    HRESULT SetRequestAttributes(
		[in] BSTR const strConfig,
		[in] LONG RequestId,
		[in] BSTR const strAttributes);

    HRESULT SetCertificateExtension(
		[in] BSTR const strConfig,
		[in] LONG RequestId,
		[in] BSTR const strExtensionName,
		[in] LONG Type,
		[in] LONG Flags,
		[in] VARIANT const *pvarValue);

    HRESULT DenyRequest(
		[in] BSTR const strConfig,
		[in] LONG RequestId);

    HRESULT ResubmitRequest(
		[in] BSTR const strConfig,
		[in] LONG RequestId,
		[out, retval] LONG *pDisposition);

    HRESULT PublishCRL(
		[in] BSTR const strConfig,
		[in] DATE Date);

    // See certcli.idl/certcli.h for CR_OUT_* Flags.

    HRESULT GetCRL(
		[in] BSTR const strConfig,
		[in] LONG Flags,
		[out, retval] BSTR *pstrCRL);

    HRESULT ImportCertificate(
        [in] BSTR const strConfig,
        [in] BSTR const strCertificate,
        [in] LONG Flags,
        [out, retval] LONG *pRequestID);

};


//+--------------------------------------------------------------------------
// certadm Type library
//+--------------------------------------------------------------------------

[
    uuid(35de99a0-7fb6-11d0-8817-00a0c903b83c),
    version(1.0),
    helpstring("CertAdm 1.0 Type Library")
]

library CERTADMINLib
{
    importlib("stdole2.tlb");

    [
	uuid(37eabaf0-7fb6-11d0-8817-00a0c903b83c),
	helpstring("CertAdmin Class")
    ]
    coclass CCertAdmin
    {
	[default] interface ICertAdmin;
    };

    [
	uuid(a12d0f7a-1e84-11d1-9bd6-00c04fb683fa),
	helpstring("CertView Class")
    ]
    coclass CCertView
    {
	[default] interface ICertView;
    };
};
