//
// Copyright (c) 1998-1999  Microsoft Corporation
//

cpp_quote("/* Copyright (c) 1998-1999  Microsoft Corporation  */")

// This file will be processed by the MIDL tool to
// produce the type library (termmgr.tlb) and marshalling code.


#ifndef __TERMINAL_MANAGER_IDL__
#define __TERMINAL_MANAGER_IDL__

// Doesn't seem to work: midl_pragma warning( disable: 2039 );

import "tapi3if.idl"; // for TERMINAL_STATE, etc.
import "tapi3ds.idl"; // for MST interfaces
import "strmif.idl";  // for IGraphBuilder, IBaseFilter, etc.
import "msp.idl";     // for MSP_HANDLE

//
// This interface is implemented on all DirectShow terminals. It provides
// methods for connection, disconnection, and dynamic filter graph control.
//

[
    uuid( AED6483B-3304-11d2-86F1-006008B0E5D2 ),
    helpstring("ITTerminalControl interface"),
    dual
]

interface ITTerminalControl : IUnknown
{
    [id(1), propget, helpstring("method get_AddressHandle")]
    HRESULT AddressHandle(
            [out]      MSP_HANDLE    * phtAddress
            );

    // enters each of the internal filters into the filter graph
    // connects the internal filters together (if applicable)
    // and returns a set of pins for connection
    [id(2), helpstring("method ConnectTerminal")]
    HRESULT ConnectTerminal(
            [in]      IGraphBuilder  * pGraph,
            [in]      DWORD            dwReserved,
            [in, out] DWORD          *  pdwNumPins,
            [out]     IPin          ** ppPins
            );

    [id(3), helpstring("method CompleteConnectTerminal")]
    HRESULT CompleteConnectTerminal(
            );

    // disconnects the internal filters and removes them from the filter graph
    // filter graph parameter is used for validation, to make sure the terminal
    // is disconnected from the same graph that it was originally connected to
    [id(4), helpstring("method DisconnectTerminal")] 
    HRESULT DisconnectTerminal(
            [in]      IGraphBuilder  * pGraph,
            [in]      DWORD            dwReserved
            );

    // stops the rightmost render filter in the terminal
    // (needed for dynamic filter graphs)
    [id(5), helpstring("method RunRenderFilter")] 
    HRESULT RunRenderFilter(
            );

    // stops the rightmost render filter in the terminal
    // (needed for dynamic filter graphs)
    [id(6), helpstring("method StopRenderFilter")] 
    HRESULT StopRenderFilter(
            );
}

[
    object,
    uuid(7170F2DE-9BE3-11D0-A009-00AA00B605A4),
    helpstring("ITTerminalManager Interface"),
    pointer_default(unique)
]
interface ITTerminalManager : IUnknown
{
    [id(1), helpstring("method GetDynamicTerminalClasses")]
    HRESULT GetDynamicTerminalClasses(
            [in]      DWORD                    dwMediaTypes,
            [in, out] DWORD                  * pdwNumClasses,
            [out]     IID                    * pTerminalClasses
            );

    [id(2), helpstring("method CreateDynamicTerminal")]
    HRESULT CreateDynamicTerminal(
            [in]      IUnknown               * pOuterUnknown,
            [in]      IID                      iidTerminalClass,
            [in]      DWORD                    dwMediaType,
            [in]      TERMINAL_DIRECTION       Direction,
            [in]      MSP_HANDLE               htAddress,
            [out]     ITTerminal            ** ppTerminal
            );
};

[
    uuid(28DCD85B-ACA4-11D0-A028-00AA00B605A4),
    version(1.0),
    helpstring("TAPI3 Terminal Manager 1.0 Type Library")
]
library TERMMGRLib
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    [
        uuid(7170F2E0-9BE3-11D0-A009-00AA00B605A4),
        helpstring("TAPI 3.0 TerminalManager Class")
    ]
    coclass TerminalManager
    {
        [default] interface ITTerminalManager;
    };
};


#endif // __TERMINAL_MANAGER_IDL__
