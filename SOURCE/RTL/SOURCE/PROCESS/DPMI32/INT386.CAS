/*-----------------------------------------------------------------------*
 * filename - int386.cas
 *
 * function(s)
 *        int386  - general 80386 software interrupt interface
 *        int386x - general 80386 software interrupt interface
 *-----------------------------------------------------------------------*/

/*
 *      C/C++ Run Time Library - Version 8.0
 *
 *      Copyright (c) 1994, 1997 by Borland International
 *      All Rights Reserved.
 *
 */
/* $Revision:   8.2  $        */


#pragma inline
#include <asmrules.h>
#include <dos.h>

/* Don't allow DPMI32 modules on Win32 */
void _RTLENTRY __disallowDPMI32onWin32(void);
#pragma extref __disallowDPMI32onWin32

/*-----------------------------------------------------------------------*

Name            int386  - general 80386 software interrupt interface

Usage           int int386(int intr_num, const union REGS *inregs,
			  union REGS *outregs);

Prototype in    dos.h

Description     Both of these functions execute an 80386 software
		interrupt specified by the argument intr_num.

		Before executing the software interrupt, both functions
		copy register values from inregs into the registers.

		In addition, int86x copies the segregs->x.ds,
		segregs->x.es, segregs->x.fs and segregs->gs values into
		the corresponding registers before executing the software
		interrupt.
		
		After the software interrupt returns, both functions
		copy the current register values to outregs, copy the
		status of the system carry flag to the x.cflag field
		in outregs, and copy the value of the 80386 flags register
		to the x.flags field in outregs.  In addition, int386x
		restores DS, and sets the segregs->es, segregs->ds,
		segregs->fs and the segregs->gs fields to the values of
		the corresponding segment registers.

		If the carry flag is set, it indicates that an error
		occurred.

		int386x allows you to invoke an 80386 software interrupt
		that takes a value of DS different from the default data
		segment, and/or that takes an argument in ES, FS or GS.

		Note that inregs can point to the same structure that
		outregs points to.

Return value    int386 and int386x return the value of EAX after completion
		of the software interrupt. If the carry flag is set
		(outregs->x.cflag != 0), indicating an error, these
		functions set _doserrno to the error code.

*------------------------------------------------------------------------*/
int _RTLENTRY int386(int intno, union REGS *inregs, union REGS *outregs)
{
    struct  SREGS   s;

    segread(&s);
    return int386x(intno, inregs, outregs, &s);
}


/*-----------------------------------------------------------------------*

Name            int386x  - general 80386 software interrupt interface

Usage           int int386x(int intr_num, const union REGS *inregs,
			    union REGS *outregs,struct SREGS *segregs);

Prototype in    dos.h

Description     see int386 above.

Return value    int386 and int386x return the value of EAX after completion
		of the software interrupt. If the carry flag is set
		(outregs->x.cflag != 0), indicating an error, these
		functions set _doserrno to the error code.

*------------------------------------------------------------------------*/
int _RTLENTRY int386x(int intno, union REGS *inregs, union REGS *outregs,
		      struct SREGS *segregs)
{
    extern void _RTLENTRY _genericInterrupt(int);
    
    unsigned long flags;

    asm
    {
	/* Save the segment registers */
	push    es
	push    ds
	push    fs
	push    gs

	/* Load the segment registers */
	mov     esi, segregs
	mov     es,  word ptr [esi].es
	mov     fs,  word ptr [esi].fs
	mov     gs,  word ptr [esi].gs
	mov     ds,  word ptr [esi].ds

	/* Load the CPU registers */
	mov     esi, inregs
	mov     eax, dword ptr [esi].x.eax
	mov     ebx, dword ptr [esi].x.ebx
	mov     ecx, dword ptr [esi].x.ecx
	mov     edx, dword ptr [esi].x.edx
	mov     edi, dword ptr [esi].x.edi
	mov     esi, dword ptr [esi].x.esi

	/* Generate the interrupt */
	clc
	push    intno
	call    _genericInterrupt
	
	/* Save the flags during the interrupt */
	pushfd
	pop     flags
	add     esp, 4

	/* Return the CPU registers */
	mov     esi, outregs
	mov     dword ptr [esi].x.eax, eax
	mov     dword ptr [esi].x.ebx, ebx
	mov     dword ptr [esi].x.ecx, ecx
	mov     dword ptr [esi].x.edx, edx
	mov     dword ptr [esi].x.esi, esi
	mov     dword ptr [esi].x.edi, edi
	
	/* Return the flags */
	mov     ebx, flags
	mov     dword ptr [esi].x.flags, ebx
	and     ebx, 1h
	mov     dword ptr [esi].x.cflag, ebx

	/* Return the segment registers */
	mov     esi, segregs
	mov     word ptr [esi].es, es
	mov     word ptr [esi].ds, ds
	mov     word ptr [esi].fs, fs
	mov     word ptr [esi].gs, gs

	/* Restore the segment registers */
	pop     gs
	pop     fs
	pop     ds
	pop     es

	test    ebx, ebx
	jnz     int386Ok
    }

    errno = _doserrno = _EAX;

int386Ok:
    return _EAX;
}

