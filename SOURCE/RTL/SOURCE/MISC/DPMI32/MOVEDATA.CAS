/*-----------------------------------------------------------------------*
 * filename - movedata.cas
 *
 * function(s)
 *        movedata - copy bytes
 *-----------------------------------------------------------------------*/

/*
 *      C/C++ Run Time Library - Version 2.0
 *
 *      Copyright (c) 1987, 1996 by Borland International
 *      All Rights Reserved.
 *
 */


#pragma  inline
#include <mem.h>
#include <dos.h>
#include <asmrules.h>

/* Don't allow DPMI32 modules on Win32 */
void _RTLENTRY __disallowDPMI32onWin32(void);
#pragma extref __disallowDPMI32onWin32

/*-----------------------------------------------------------------------*

Name            movedata - copy bytes

Usage           void movedata(unsigned srcseg, unsigned srcoff,
                              unsigned dstseg, unsigned dstoff, size_t n);

Prototype in    mem.h & string.h

Description     Copy of  n bytes from the  source address(srcseg:secoff) to
                the destination address  (dstseg:dstoff) without checks and
                as fast as possible. If the src and dst arrays overlap, the
                effect is not defined.

                Movedata is meant to be used to move far data in small data
                programs.  In  large  model  programs,  you  can use memcpy
                instead.

Return value    There is no return value

*------------------------------------------------------------------------*/
void _RTLENTRY _EXPFUNC movedata(unsigned srcseg, unsigned srcoff,
              unsigned dstseg, unsigned dstoff, size_t n)
{
    asm     push es
    asm     push ds
    asm     push edi
    asm     push esi
    asm     cld
    asm     mov  ecx, [n]
    asm     mov  esi, dword ptr [srcoff]
    asm     mov  edi, dword ptr [dstoff]
    asm     mov  es, W0(dstseg)
    asm     mov  ds, W0(srcseg)
    asm     push ecx
    asm     shr  ecx, 2
    asm     rep  movsd
    asm     pop  ecx
    asm     and  ecx, 3
    asm     rep  movsb
    asm     pop  esi
    asm     pop  edi
    asm     pop  ds
    asm     pop  es
}
