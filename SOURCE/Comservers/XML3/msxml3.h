// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.0.1.0.1.1  $
// File generated on 1/24/2002 7:03:17 PM from Type Library described below.

// ************************************************************************  //
// Type Lib: c:\winnt\system32\msxml3.dll (1)
// LIBID: {F5078F18-C551-11D3-89B9-0000F81FE221}
// LCID: 0
// Helpfile: 
// HelpString: Microsoft XML, v3.0
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\stdole2.tlb)
// ************************************************************************ //
#ifndef   MSXML3H
#define   MSXML3H

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0500)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Msxml3
{

// *********************************************************************//
// HelpString: Microsoft XML, v3.0
// Version:    3.0
// *********************************************************************//

/*   **********************************************************

  Type Library Options: 
  Set TLB filename (suffix ignored)
  Set OCX filename (suffix ignored)
  Generate C++ Import file
  Expose namespace with 'using'.
  Generate files for dependant type libraries
  Map HRESULT to safecall on dual interfaces
  Place warnings in imported files
  Generate IDE registration for component wrappers
  Generate dispinterfaces
  Generate CoClassCreator wrappers
  Generate C++Builder 4.0 event wrappers for servers
  Generate VCL component wrappers for servers
  Use declspec(__selectany) for GUIDs
  Ignore Standard Type Libraries
  Show Debug Output
  Place comments in imported files
   ******************************************************** */

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern "C" const __declspec(selectany) GUID LIBID_MSXML2 = {0xF5078F18, 0xC551, 0x11D3,{ 0x89, 0xB9, 0x00,0x00, 0xF8, 0x1F,0xE2, 0x21} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMImplementation = {0x2933BF8F, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMNode = {0x2933BF80, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID GUID_tagDOMNodeType = {0x00000000, 0x0000, 0x0000,{ 0x00, 0x00, 0x00,0x00, 0x00, 0x00,0x00, 0x00} };
extern "C" const __declspec(selectany) GUID GUID_DOMNodeType = {0x00000000, 0x0000, 0x0000,{ 0x00, 0x00, 0x00,0x00, 0x00, 0x00,0x00, 0x00} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMNodeList = {0x2933BF82, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMNamedNodeMap = {0x2933BF83, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMDocument = {0x2933BF81, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMDocumentType = {0x2933BF8B, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMElement = {0x2933BF86, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMAttribute = {0x2933BF85, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMDocumentFragment = {0x3EFAA413, 0x272F, 0x11D2,{ 0x83, 0x6F, 0x00,0x00, 0xF8, 0x7A,0x77, 0x82} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMCharacterData = {0x2933BF84, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMText = {0x2933BF87, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMComment = {0x2933BF88, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMCDATASection = {0x2933BF8A, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMProcessingInstruction = {0x2933BF89, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMEntityReference = {0x2933BF8E, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMParseError = {0x3EFAA426, 0x272F, 0x11D2,{ 0x83, 0x6F, 0x00,0x00, 0xF8, 0x7A,0x77, 0x82} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMSchemaCollection = {0x373984C8, 0xB845, 0x449B,{ 0x91, 0xE7, 0x45,0xAC, 0x83, 0x03,0x6A, 0xDE} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMDocument2 = {0x2933BF95, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMNotation = {0x2933BF8C, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMEntity = {0x2933BF8D, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID IID_IXTLRuntime = {0x3EFAA425, 0x272F, 0x11D2,{ 0x83, 0x6F, 0x00,0x00, 0xF8, 0x7A,0x77, 0x82} };
extern "C" const __declspec(selectany) GUID IID_IXSLTemplate = {0x2933BF93, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID IID_IXSLProcessor = {0x2933BF92, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID IID_ISAXXMLReader = {0xA4F96ED0, 0xF829, 0x476E,{ 0x81, 0xC0, 0xCD,0xC7, 0xBD, 0x2A,0x08, 0x02} };
extern "C" const __declspec(selectany) GUID IID_ISAXEntityResolver = {0x99BCA7BD, 0xE8C4, 0x4D5F,{ 0xA0, 0xCF, 0x6D,0x90, 0x79, 0x01,0xFF, 0x07} };
extern "C" const __declspec(selectany) GUID IID_ISAXContentHandler = {0x1545CDFA, 0x9E4E, 0x4497,{ 0xA8, 0xA4, 0x2B,0xF7, 0xD0, 0x11,0x2C, 0x44} };
extern "C" const __declspec(selectany) GUID IID_ISAXLocator = {0x9B7E472A, 0x0DE4, 0x4640,{ 0xBF, 0xF3, 0x84,0xD3, 0x8A, 0x05,0x1C, 0x31} };
extern "C" const __declspec(selectany) GUID IID_ISAXAttributes = {0xF078ABE1, 0x45D2, 0x4832,{ 0x91, 0xEA, 0x44,0x66, 0xCE, 0x2F,0x25, 0xC9} };
extern "C" const __declspec(selectany) GUID IID_ISAXDTDHandler = {0xE15C1BAF, 0xAFB3, 0x4D60,{ 0x8C, 0x36, 0x19,0xA8, 0xC4, 0x5D,0xEF, 0xED} };
extern "C" const __declspec(selectany) GUID IID_ISAXErrorHandler = {0xA60511C4, 0xCCF5, 0x479E,{ 0x98, 0xA3, 0xDC,0x8D, 0xC5, 0x45,0xB7, 0xD0} };
extern "C" const __declspec(selectany) GUID IID_ISAXXMLFilter = {0x70409222, 0xCA09, 0x4475,{ 0xAC, 0xB8, 0x40,0x31, 0x2F, 0xE8,0xD1, 0x45} };
extern "C" const __declspec(selectany) GUID IID_ISAXLexicalHandler = {0x7F85D5F5, 0x47A8, 0x4497,{ 0xBD, 0xA5, 0x84,0xBA, 0x04, 0x81,0x9E, 0xA6} };
extern "C" const __declspec(selectany) GUID IID_ISAXDeclHandler = {0x862629AC, 0x771A, 0x47B2,{ 0x83, 0x37, 0x4E,0x68, 0x43, 0xC1,0xBE, 0x90} };
extern "C" const __declspec(selectany) GUID IID_IVBSAXXMLReader = {0x8C033CAA, 0x6CD6, 0x4F73,{ 0xB7, 0x28, 0x45,0x31, 0xAF, 0x74,0x94, 0x5F} };
extern "C" const __declspec(selectany) GUID IID_IVBSAXEntityResolver = {0x0C05D096, 0xF45B, 0x4ACA,{ 0xAD, 0x1A, 0xAA,0x0B, 0xC2, 0x55,0x18, 0xDC} };
extern "C" const __declspec(selectany) GUID IID_IVBSAXContentHandler = {0x2ED7290A, 0x4DD5, 0x4B46,{ 0xBB, 0x26, 0x4E,0x41, 0x55, 0xE7,0x7F, 0xAA} };
extern "C" const __declspec(selectany) GUID IID_IVBSAXLocator = {0x796E7AC5, 0x5AA2, 0x4EFF,{ 0xAC, 0xAD, 0x3F,0xAA, 0xF0, 0x1A,0x32, 0x88} };
extern "C" const __declspec(selectany) GUID IID_IVBSAXAttributes = {0x10DC0586, 0x132B, 0x4CAC,{ 0x8B, 0xB3, 0xDB,0x00, 0xAC, 0x8B,0x7E, 0xE0} };
extern "C" const __declspec(selectany) GUID IID_IVBSAXDTDHandler = {0x24FB3297, 0x302D, 0x4620,{ 0xBA, 0x39, 0x3A,0x73, 0x2D, 0x85,0x05, 0x58} };
extern "C" const __declspec(selectany) GUID IID_IVBSAXErrorHandler = {0xD963D3FE, 0x173C, 0x4862,{ 0x90, 0x95, 0xB9,0x2F, 0x66, 0x99,0x5F, 0x52} };
extern "C" const __declspec(selectany) GUID IID_IVBSAXXMLFilter = {0x1299EB1B, 0x5B88, 0x433E,{ 0x82, 0xDE, 0x82,0xCA, 0x75, 0xAD,0x4E, 0x04} };
extern "C" const __declspec(selectany) GUID IID_IVBSAXLexicalHandler = {0x032AAC35, 0x8C0E, 0x4D9D,{ 0x97, 0x9F, 0xE3,0xB7, 0x02, 0x93,0x55, 0x76} };
extern "C" const __declspec(selectany) GUID IID_IVBSAXDeclHandler = {0xE8917260, 0x7579, 0x4BE1,{ 0xB5, 0xDD, 0x7A,0xFB, 0xFA, 0x6F,0x07, 0x7B} };
extern "C" const __declspec(selectany) GUID IID_IMXWriter = {0x4D7FF4BA, 0x1565, 0x4EA8,{ 0x94, 0xE1, 0x6E,0x72, 0x4A, 0x46,0xF9, 0x8D} };
extern "C" const __declspec(selectany) GUID IID_IMXAttributes = {0xF10D27CC, 0x3EC0, 0x415C,{ 0x8E, 0xD8, 0x77,0xAB, 0x1C, 0x5E,0x72, 0x62} };
extern "C" const __declspec(selectany) GUID IID_IMXReaderControl = {0x808F4E35, 0x8D5A, 0x4FBE,{ 0x84, 0x66, 0x33,0xA4, 0x12, 0x79,0xED, 0x30} };
extern "C" const __declspec(selectany) GUID IID_IXMLElementCollection = {0x65725580, 0x9B5D, 0x11D0,{ 0x9B, 0xFE, 0x00,0xC0, 0x4F, 0xC9,0x9C, 0x8E} };
extern "C" const __declspec(selectany) GUID IID_IXMLDocument = {0xF52E2B61, 0x18A1, 0x11D1,{ 0xB1, 0x05, 0x00,0x80, 0x5F, 0x49,0x91, 0x6B} };
extern "C" const __declspec(selectany) GUID IID_IXMLElement = {0x3F7F31AC, 0xE15F, 0x11D0,{ 0x9C, 0x25, 0x00,0xC0, 0x4F, 0xC9,0x9C, 0x8E} };
extern "C" const __declspec(selectany) GUID IID_IXMLDocument2 = {0x2B8DE2FE, 0x8D2D, 0x11D1,{ 0xB2, 0xFC, 0x00,0xC0, 0x4F, 0xD9,0x15, 0xA9} };
extern "C" const __declspec(selectany) GUID IID_IXMLElement2 = {0x2B8DE2FF, 0x8D2D, 0x11D1,{ 0xB2, 0xFC, 0x00,0xC0, 0x4F, 0xD9,0x15, 0xA9} };
extern "C" const __declspec(selectany) GUID IID_IXMLAttribute = {0xD4D4A0FC, 0x3B73, 0x11D1,{ 0xB2, 0xB4, 0x00,0xC0, 0x4F, 0xB9,0x25, 0x96} };
extern "C" const __declspec(selectany) GUID IID_IXMLError = {0x948C5AD3, 0xC58D, 0x11D0,{ 0x9C, 0x0B, 0x00,0xC0, 0x4F, 0xC9,0x9C, 0x8E} };
extern "C" const __declspec(selectany) GUID GUID__xml_error = {0x00000000, 0x0000, 0x0000,{ 0x00, 0x00, 0x00,0x00, 0x00, 0x00,0x00, 0x00} };
extern "C" const __declspec(selectany) GUID GUID_tagXMLEMEM_TYPE = {0x00000000, 0x0000, 0x0000,{ 0x00, 0x00, 0x00,0x00, 0x00, 0x00,0x00, 0x00} };
extern "C" const __declspec(selectany) GUID GUID_XMLELEM_TYPE = {0x00000000, 0x0000, 0x0000,{ 0x00, 0x00, 0x00,0x00, 0x00, 0x00,0x00, 0x00} };
extern "C" const __declspec(selectany) GUID IID_IXMLDOMSelection = {0xAA634FC7, 0x5888, 0x44A7,{ 0xA2, 0x57, 0x3A,0x47, 0x15, 0x0D,0x3A, 0x0E} };
extern "C" const __declspec(selectany) GUID DIID_XMLDOMDocumentEvents = {0x3EFAA427, 0x272F, 0x11D2,{ 0x83, 0x6F, 0x00,0x00, 0xF8, 0x7A,0x77, 0x82} };
extern "C" const __declspec(selectany) GUID IID_IDSOControl = {0x310AFA62, 0x0575, 0x11D2,{ 0x9C, 0xA9, 0x00,0x60, 0xB0, 0xEC,0x3D, 0x39} };
extern "C" const __declspec(selectany) GUID IID_IXMLHTTPRequest = {0xED8C108D, 0x4349, 0x11D2,{ 0x91, 0xA4, 0x00,0xC0, 0x4F, 0x79,0x69, 0xE8} };
extern "C" const __declspec(selectany) GUID GUID__SERVERXMLHTTP_OPTION = {0x00000000, 0x0000, 0x0000,{ 0x00, 0x00, 0x00,0x00, 0x00, 0x00,0x00, 0x00} };
extern "C" const __declspec(selectany) GUID GUID_SERVERXMLHTTP_OPTION = {0x00000000, 0x0000, 0x0000,{ 0x00, 0x00, 0x00,0x00, 0x00, 0x00,0x00, 0x00} };
extern "C" const __declspec(selectany) GUID GUID__SXH_SERVER_CERT_OPTION = {0x00000000, 0x0000, 0x0000,{ 0x00, 0x00, 0x00,0x00, 0x00, 0x00,0x00, 0x00} };
extern "C" const __declspec(selectany) GUID GUID_SXH_SERVER_CERT_OPTION = {0x00000000, 0x0000, 0x0000,{ 0x00, 0x00, 0x00,0x00, 0x00, 0x00,0x00, 0x00} };
extern "C" const __declspec(selectany) GUID IID_IServerXMLHTTPRequest = {0x2E9196BF, 0x13BA, 0x4DD4,{ 0x91, 0xCA, 0x6C,0x57, 0x1F, 0x28,0x14, 0x95} };
extern "C" const __declspec(selectany) GUID CLSID_msDOMDocument = {0xF6D90F11, 0x9C73, 0x11D3,{ 0xB3, 0x2E, 0x00,0xC0, 0x4F, 0x99,0x0B, 0xB4} };
extern "C" const __declspec(selectany) GUID CLSID_msDOMDocument26 = {0xF5078F1B, 0xC551, 0x11D3,{ 0x89, 0xB9, 0x00,0x00, 0xF8, 0x1F,0xE2, 0x21} };
extern "C" const __declspec(selectany) GUID CLSID_msDOMDocument30 = {0xF5078F32, 0xC551, 0x11D3,{ 0x89, 0xB9, 0x00,0x00, 0xF8, 0x1F,0xE2, 0x21} };
extern "C" const __declspec(selectany) GUID CLSID_msFreeThreadedDOMDocument = {0xF6D90F12, 0x9C73, 0x11D3,{ 0xB3, 0x2E, 0x00,0xC0, 0x4F, 0x99,0x0B, 0xB4} };
extern "C" const __declspec(selectany) GUID CLSID_msFreeThreadedDOMDocument26 = {0xF5078F1C, 0xC551, 0x11D3,{ 0x89, 0xB9, 0x00,0x00, 0xF8, 0x1F,0xE2, 0x21} };
extern "C" const __declspec(selectany) GUID CLSID_msFreeThreadedDOMDocument30 = {0xF5078F33, 0xC551, 0x11D3,{ 0x89, 0xB9, 0x00,0x00, 0xF8, 0x1F,0xE2, 0x21} };
extern "C" const __declspec(selectany) GUID CLSID_msXMLSchemaCache = {0x373984C9, 0xB845, 0x449B,{ 0x91, 0xE7, 0x45,0xAC, 0x83, 0x03,0x6A, 0xDE} };
extern "C" const __declspec(selectany) GUID CLSID_msXMLSchemaCache26 = {0xF5078F1D, 0xC551, 0x11D3,{ 0x89, 0xB9, 0x00,0x00, 0xF8, 0x1F,0xE2, 0x21} };
extern "C" const __declspec(selectany) GUID CLSID_msXMLSchemaCache30 = {0xF5078F34, 0xC551, 0x11D3,{ 0x89, 0xB9, 0x00,0x00, 0xF8, 0x1F,0xE2, 0x21} };
extern "C" const __declspec(selectany) GUID CLSID_msXSLTemplate = {0x2933BF94, 0x7B36, 0x11D2,{ 0xB2, 0x0E, 0x00,0xC0, 0x4F, 0x98,0x3E, 0x60} };
extern "C" const __declspec(selectany) GUID CLSID_msXSLTemplate26 = {0xF5078F21, 0xC551, 0x11D3,{ 0x89, 0xB9, 0x00,0x00, 0xF8, 0x1F,0xE2, 0x21} };
extern "C" const __declspec(selectany) GUID CLSID_msXSLTemplate30 = {0xF5078F36, 0xC551, 0x11D3,{ 0x89, 0xB9, 0x00,0x00, 0xF8, 0x1F,0xE2, 0x21} };
extern "C" const __declspec(selectany) GUID CLSID_msDSOControl = {0xF6D90F14, 0x9C73, 0x11D3,{ 0xB3, 0x2E, 0x00,0xC0, 0x4F, 0x99,0x0B, 0xB4} };
extern "C" const __declspec(selectany) GUID CLSID_msDSOControl26 = {0xF5078F1F, 0xC551, 0x11D3,{ 0x89, 0xB9, 0x00,0x00, 0xF8, 0x1F,0xE2, 0x21} };
extern "C" const __declspec(selectany) GUID CLSID_msDSOControl30 = {0xF5078F39, 0xC551, 0x11D3,{ 0x89, 0xB9, 0x00,0x00, 0xF8, 0x1F,0xE2, 0x21} };
extern "C" const __declspec(selectany) GUID CLSID_msXMLHTTP = {0xF6D90F16, 0x9C73, 0x11D3,{ 0xB3, 0x2E, 0x00,0xC0, 0x4F, 0x99,0x0B, 0xB4} };
extern "C" const __declspec(selectany) GUID CLSID_msXMLHTTP26 = {0xF5078F1E, 0xC551, 0x11D3,{ 0x89, 0xB9, 0x00,0x00, 0xF8, 0x1F,0xE2, 0x21} };
extern "C" const __declspec(selectany) GUID CLSID_msXMLHTTP30 = {0xF5078F35, 0xC551, 0x11D3,{ 0x89, 0xB9, 0x00,0x00, 0xF8, 0x1F,0xE2, 0x21} };
extern "C" const __declspec(selectany) GUID CLSID_msServerXMLHTTP = {0xAFBA6B42, 0x5692, 0x48EA,{ 0x81, 0x41, 0xDC,0x51, 0x7D, 0xCF,0x0E, 0xF1} };
extern "C" const __declspec(selectany) GUID CLSID_msServerXMLHTTP30 = {0xAFB40FFD, 0xB609, 0x40A3,{ 0x98, 0x28, 0xF8,0x8B, 0xBE, 0x11,0xE4, 0xE3} };
extern "C" const __declspec(selectany) GUID CLSID_msSAXXMLReader = {0x079AA557, 0x4A18, 0x424A,{ 0x8E, 0xEE, 0xE3,0x9F, 0x0A, 0x8D,0x41, 0xB9} };
extern "C" const __declspec(selectany) GUID CLSID_msSAXXMLReader30 = {0x3124C396, 0xFB13, 0x4836,{ 0xA6, 0xAD, 0x13,0x17, 0xF1, 0x71,0x36, 0x88} };
extern "C" const __declspec(selectany) GUID CLSID_msMXXMLWriter = {0xFC220AD8, 0xA72A, 0x4EE8,{ 0x92, 0x6E, 0x0B,0x7A, 0xD1, 0x52,0xA0, 0x20} };
extern "C" const __declspec(selectany) GUID CLSID_msMXXMLWriter30 = {0x3D813DFE, 0x6C91, 0x4A4E,{ 0x8F, 0x41, 0x04,0x34, 0x6A, 0x84,0x1D, 0x9C} };
extern "C" const __declspec(selectany) GUID CLSID_msSAXAttributes = {0x4DD441AD, 0x526D, 0x4A77,{ 0x9F, 0x1B, 0x98,0x41, 0xED, 0x80,0x2F, 0xB0} };
extern "C" const __declspec(selectany) GUID CLSID_msSAXAttributes30 = {0x3E784A01, 0xF3AE, 0x4DC0,{ 0x93, 0x54, 0x95,0x26, 0xB9, 0x37,0x0E, 0xBA} };
extern "C" const __declspec(selectany) GUID CLSID_XMLDocument = {0xCFC399AF, 0xD876, 0x11D0,{ 0x9C, 0x10, 0x00,0xC0, 0x4F, 0xC9,0x9C, 0x8E} };

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      tagDOMNodeType;
struct    tag_xml_error;
typedef   tag_xml_error _xml_error;

enum      tagXMLEMEM_TYPE;
enum      _SERVERXMLHTTP_OPTION;
enum      _SXH_SERVER_CERT_OPTION;
interface DECLSPEC_UUID("{2933BF8F-7B36-11D2-B20E-00C04F983E60}") IXMLDOMImplementation;
typedef TComInterface<IXMLDOMImplementation, &IID_IXMLDOMImplementation> IXMLDOMImplementationPtr;

interface DECLSPEC_UUID("{2933BF80-7B36-11D2-B20E-00C04F983E60}") IXMLDOMNode;
typedef TComInterface<IXMLDOMNode, &IID_IXMLDOMNode> IXMLDOMNodePtr;

interface DECLSPEC_UUID("{2933BF82-7B36-11D2-B20E-00C04F983E60}") IXMLDOMNodeList;
typedef TComInterface<IXMLDOMNodeList, &IID_IXMLDOMNodeList> IXMLDOMNodeListPtr;

interface DECLSPEC_UUID("{2933BF83-7B36-11D2-B20E-00C04F983E60}") IXMLDOMNamedNodeMap;
typedef TComInterface<IXMLDOMNamedNodeMap, &IID_IXMLDOMNamedNodeMap> IXMLDOMNamedNodeMapPtr;

interface DECLSPEC_UUID("{2933BF81-7B36-11D2-B20E-00C04F983E60}") IXMLDOMDocument;
typedef TComInterface<IXMLDOMDocument, &IID_IXMLDOMDocument> IXMLDOMDocumentPtr;

interface DECLSPEC_UUID("{2933BF8B-7B36-11D2-B20E-00C04F983E60}") IXMLDOMDocumentType;
typedef TComInterface<IXMLDOMDocumentType, &IID_IXMLDOMDocumentType> IXMLDOMDocumentTypePtr;

interface DECLSPEC_UUID("{2933BF86-7B36-11D2-B20E-00C04F983E60}") IXMLDOMElement;
typedef TComInterface<IXMLDOMElement, &IID_IXMLDOMElement> IXMLDOMElementPtr;

interface DECLSPEC_UUID("{2933BF85-7B36-11D2-B20E-00C04F983E60}") IXMLDOMAttribute;
typedef TComInterface<IXMLDOMAttribute, &IID_IXMLDOMAttribute> IXMLDOMAttributePtr;

interface DECLSPEC_UUID("{3EFAA413-272F-11D2-836F-0000F87A7782}") IXMLDOMDocumentFragment;
typedef TComInterface<IXMLDOMDocumentFragment, &IID_IXMLDOMDocumentFragment> IXMLDOMDocumentFragmentPtr;

interface DECLSPEC_UUID("{2933BF84-7B36-11D2-B20E-00C04F983E60}") IXMLDOMCharacterData;
typedef TComInterface<IXMLDOMCharacterData, &IID_IXMLDOMCharacterData> IXMLDOMCharacterDataPtr;

interface DECLSPEC_UUID("{2933BF87-7B36-11D2-B20E-00C04F983E60}") IXMLDOMText;
typedef TComInterface<IXMLDOMText, &IID_IXMLDOMText> IXMLDOMTextPtr;

interface DECLSPEC_UUID("{2933BF88-7B36-11D2-B20E-00C04F983E60}") IXMLDOMComment;
typedef TComInterface<IXMLDOMComment, &IID_IXMLDOMComment> IXMLDOMCommentPtr;

interface DECLSPEC_UUID("{2933BF8A-7B36-11D2-B20E-00C04F983E60}") IXMLDOMCDATASection;
typedef TComInterface<IXMLDOMCDATASection, &IID_IXMLDOMCDATASection> IXMLDOMCDATASectionPtr;

interface DECLSPEC_UUID("{2933BF89-7B36-11D2-B20E-00C04F983E60}") IXMLDOMProcessingInstruction;
typedef TComInterface<IXMLDOMProcessingInstruction, &IID_IXMLDOMProcessingInstruction> IXMLDOMProcessingInstructionPtr;

interface DECLSPEC_UUID("{2933BF8E-7B36-11D2-B20E-00C04F983E60}") IXMLDOMEntityReference;
typedef TComInterface<IXMLDOMEntityReference, &IID_IXMLDOMEntityReference> IXMLDOMEntityReferencePtr;

interface DECLSPEC_UUID("{3EFAA426-272F-11D2-836F-0000F87A7782}") IXMLDOMParseError;
typedef TComInterface<IXMLDOMParseError, &IID_IXMLDOMParseError> IXMLDOMParseErrorPtr;

interface DECLSPEC_UUID("{373984C8-B845-449B-91E7-45AC83036ADE}") IXMLDOMSchemaCollection;
typedef TComInterface<IXMLDOMSchemaCollection, &IID_IXMLDOMSchemaCollection> IXMLDOMSchemaCollectionPtr;

interface DECLSPEC_UUID("{2933BF95-7B36-11D2-B20E-00C04F983E60}") IXMLDOMDocument2;
typedef TComInterface<IXMLDOMDocument2, &IID_IXMLDOMDocument2> IXMLDOMDocument2Ptr;

interface DECLSPEC_UUID("{2933BF8C-7B36-11D2-B20E-00C04F983E60}") IXMLDOMNotation;
typedef TComInterface<IXMLDOMNotation, &IID_IXMLDOMNotation> IXMLDOMNotationPtr;

interface DECLSPEC_UUID("{2933BF8D-7B36-11D2-B20E-00C04F983E60}") IXMLDOMEntity;
typedef TComInterface<IXMLDOMEntity, &IID_IXMLDOMEntity> IXMLDOMEntityPtr;

interface DECLSPEC_UUID("{3EFAA425-272F-11D2-836F-0000F87A7782}") IXTLRuntime;
typedef TComInterface<IXTLRuntime, &IID_IXTLRuntime> IXTLRuntimePtr;

interface DECLSPEC_UUID("{2933BF93-7B36-11D2-B20E-00C04F983E60}") IXSLTemplate;
typedef TComInterface<IXSLTemplate, &IID_IXSLTemplate> IXSLTemplatePtr;

interface DECLSPEC_UUID("{2933BF92-7B36-11D2-B20E-00C04F983E60}") IXSLProcessor;
typedef TComInterface<IXSLProcessor, &IID_IXSLProcessor> IXSLProcessorPtr;

interface DECLSPEC_UUID("{A4F96ED0-F829-476E-81C0-CDC7BD2A0802}") ISAXXMLReader;
typedef TComInterface<ISAXXMLReader, &IID_ISAXXMLReader> ISAXXMLReaderPtr;

interface DECLSPEC_UUID("{99BCA7BD-E8C4-4D5F-A0CF-6D907901FF07}") ISAXEntityResolver;
typedef TComInterface<ISAXEntityResolver, &IID_ISAXEntityResolver> ISAXEntityResolverPtr;

interface DECLSPEC_UUID("{1545CDFA-9E4E-4497-A8A4-2BF7D0112C44}") ISAXContentHandler;
typedef TComInterface<ISAXContentHandler, &IID_ISAXContentHandler> ISAXContentHandlerPtr;

interface DECLSPEC_UUID("{9B7E472A-0DE4-4640-BFF3-84D38A051C31}") ISAXLocator;
typedef TComInterface<ISAXLocator, &IID_ISAXLocator> ISAXLocatorPtr;

interface DECLSPEC_UUID("{F078ABE1-45D2-4832-91EA-4466CE2F25C9}") ISAXAttributes;
typedef TComInterface<ISAXAttributes, &IID_ISAXAttributes> ISAXAttributesPtr;

interface DECLSPEC_UUID("{E15C1BAF-AFB3-4D60-8C36-19A8C45DEFED}") ISAXDTDHandler;
typedef TComInterface<ISAXDTDHandler, &IID_ISAXDTDHandler> ISAXDTDHandlerPtr;

interface DECLSPEC_UUID("{A60511C4-CCF5-479E-98A3-DC8DC545B7D0}") ISAXErrorHandler;
typedef TComInterface<ISAXErrorHandler, &IID_ISAXErrorHandler> ISAXErrorHandlerPtr;

interface DECLSPEC_UUID("{70409222-CA09-4475-ACB8-40312FE8D145}") ISAXXMLFilter;
typedef TComInterface<ISAXXMLFilter, &IID_ISAXXMLFilter> ISAXXMLFilterPtr;

interface DECLSPEC_UUID("{7F85D5F5-47A8-4497-BDA5-84BA04819EA6}") ISAXLexicalHandler;
typedef TComInterface<ISAXLexicalHandler, &IID_ISAXLexicalHandler> ISAXLexicalHandlerPtr;

interface DECLSPEC_UUID("{862629AC-771A-47B2-8337-4E6843C1BE90}") ISAXDeclHandler;
typedef TComInterface<ISAXDeclHandler, &IID_ISAXDeclHandler> ISAXDeclHandlerPtr;

interface DECLSPEC_UUID("{8C033CAA-6CD6-4F73-B728-4531AF74945F}") IVBSAXXMLReader;
typedef TComInterface<IVBSAXXMLReader, &IID_IVBSAXXMLReader> IVBSAXXMLReaderPtr;

interface DECLSPEC_UUID("{0C05D096-F45B-4ACA-AD1A-AA0BC25518DC}") IVBSAXEntityResolver;
typedef TComInterface<IVBSAXEntityResolver, &IID_IVBSAXEntityResolver> IVBSAXEntityResolverPtr;

interface DECLSPEC_UUID("{2ED7290A-4DD5-4B46-BB26-4E4155E77FAA}") IVBSAXContentHandler;
typedef TComInterface<IVBSAXContentHandler, &IID_IVBSAXContentHandler> IVBSAXContentHandlerPtr;

interface DECLSPEC_UUID("{796E7AC5-5AA2-4EFF-ACAD-3FAAF01A3288}") IVBSAXLocator;
typedef TComInterface<IVBSAXLocator, &IID_IVBSAXLocator> IVBSAXLocatorPtr;

interface DECLSPEC_UUID("{10DC0586-132B-4CAC-8BB3-DB00AC8B7EE0}") IVBSAXAttributes;
typedef TComInterface<IVBSAXAttributes, &IID_IVBSAXAttributes> IVBSAXAttributesPtr;

interface DECLSPEC_UUID("{24FB3297-302D-4620-BA39-3A732D850558}") IVBSAXDTDHandler;
typedef TComInterface<IVBSAXDTDHandler, &IID_IVBSAXDTDHandler> IVBSAXDTDHandlerPtr;

interface DECLSPEC_UUID("{D963D3FE-173C-4862-9095-B92F66995F52}") IVBSAXErrorHandler;
typedef TComInterface<IVBSAXErrorHandler, &IID_IVBSAXErrorHandler> IVBSAXErrorHandlerPtr;

interface DECLSPEC_UUID("{1299EB1B-5B88-433E-82DE-82CA75AD4E04}") IVBSAXXMLFilter;
typedef TComInterface<IVBSAXXMLFilter, &IID_IVBSAXXMLFilter> IVBSAXXMLFilterPtr;

interface DECLSPEC_UUID("{032AAC35-8C0E-4D9D-979F-E3B702935576}") IVBSAXLexicalHandler;
typedef TComInterface<IVBSAXLexicalHandler, &IID_IVBSAXLexicalHandler> IVBSAXLexicalHandlerPtr;

interface DECLSPEC_UUID("{E8917260-7579-4BE1-B5DD-7AFBFA6F077B}") IVBSAXDeclHandler;
typedef TComInterface<IVBSAXDeclHandler, &IID_IVBSAXDeclHandler> IVBSAXDeclHandlerPtr;

interface DECLSPEC_UUID("{4D7FF4BA-1565-4EA8-94E1-6E724A46F98D}") IMXWriter;
typedef TComInterface<IMXWriter, &IID_IMXWriter> IMXWriterPtr;

interface DECLSPEC_UUID("{F10D27CC-3EC0-415C-8ED8-77AB1C5E7262}") IMXAttributes;
typedef TComInterface<IMXAttributes, &IID_IMXAttributes> IMXAttributesPtr;

interface DECLSPEC_UUID("{808F4E35-8D5A-4FBE-8466-33A41279ED30}") IMXReaderControl;
typedef TComInterface<IMXReaderControl, &IID_IMXReaderControl> IMXReaderControlPtr;

interface DECLSPEC_UUID("{65725580-9B5D-11D0-9BFE-00C04FC99C8E}") IXMLElementCollection;
typedef TComInterface<IXMLElementCollection, &IID_IXMLElementCollection> IXMLElementCollectionPtr;

interface DECLSPEC_UUID("{F52E2B61-18A1-11D1-B105-00805F49916B}") IXMLDocument;
typedef TComInterface<IXMLDocument, &IID_IXMLDocument> IXMLDocumentPtr;

interface DECLSPEC_UUID("{3F7F31AC-E15F-11D0-9C25-00C04FC99C8E}") IXMLElement;
typedef TComInterface<IXMLElement, &IID_IXMLElement> IXMLElementPtr;

interface DECLSPEC_UUID("{2B8DE2FE-8D2D-11D1-B2FC-00C04FD915A9}") IXMLDocument2;
typedef TComInterface<IXMLDocument2, &IID_IXMLDocument2> IXMLDocument2Ptr;

interface DECLSPEC_UUID("{2B8DE2FF-8D2D-11D1-B2FC-00C04FD915A9}") IXMLElement2;
typedef TComInterface<IXMLElement2, &IID_IXMLElement2> IXMLElement2Ptr;

interface DECLSPEC_UUID("{D4D4A0FC-3B73-11D1-B2B4-00C04FB92596}") IXMLAttribute;
typedef TComInterface<IXMLAttribute, &IID_IXMLAttribute> IXMLAttributePtr;

interface DECLSPEC_UUID("{948C5AD3-C58D-11D0-9C0B-00C04FC99C8E}") IXMLError;
typedef TComInterface<IXMLError, &IID_IXMLError> IXMLErrorPtr;

interface DECLSPEC_UUID("{AA634FC7-5888-44A7-A257-3A47150D3A0E}") IXMLDOMSelection;
typedef TComInterface<IXMLDOMSelection, &IID_IXMLDOMSelection> IXMLDOMSelectionPtr;

interface DECLSPEC_UUID("{3EFAA427-272F-11D2-836F-0000F87A7782}") XMLDOMDocumentEvents;
typedef TComInterface<XMLDOMDocumentEvents, &DIID_XMLDOMDocumentEvents> XMLDOMDocumentEventsPtr;

interface DECLSPEC_UUID("{310AFA62-0575-11D2-9CA9-0060B0EC3D39}") IDSOControl;
typedef TComInterface<IDSOControl, &IID_IDSOControl> IDSOControlPtr;

interface DECLSPEC_UUID("{ED8C108D-4349-11D2-91A4-00C04F7969E8}") IXMLHTTPRequest;
typedef TComInterface<IXMLHTTPRequest, &IID_IXMLHTTPRequest> IXMLHTTPRequestPtr;

interface DECLSPEC_UUID("{2E9196BF-13BA-4DD4-91CA-6C571F281495}") IServerXMLHTTPRequest;
typedef TComInterface<IServerXMLHTTPRequest, &IID_IServerXMLHTTPRequest> IServerXMLHTTPRequestPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IXMLDOMDocument2 msDOMDocument;
typedef IXMLDOMDocument2Ptr msDOMDocumentPtr;
typedef IXMLDOMDocument2 msDOMDocument26;
typedef IXMLDOMDocument2Ptr msDOMDocument26Ptr;
typedef IXMLDOMDocument2 msDOMDocument30;
typedef IXMLDOMDocument2Ptr msDOMDocument30Ptr;
typedef IXMLDOMDocument2 msFreeThreadedDOMDocument;
typedef IXMLDOMDocument2Ptr msFreeThreadedDOMDocumentPtr;
typedef IXMLDOMDocument2 msFreeThreadedDOMDocument26;
typedef IXMLDOMDocument2Ptr msFreeThreadedDOMDocument26Ptr;
typedef IXMLDOMDocument2 msFreeThreadedDOMDocument30;
typedef IXMLDOMDocument2Ptr msFreeThreadedDOMDocument30Ptr;
typedef IXMLDOMSchemaCollection msXMLSchemaCache;
typedef IXMLDOMSchemaCollectionPtr msXMLSchemaCachePtr;
typedef IXMLDOMSchemaCollection msXMLSchemaCache26;
typedef IXMLDOMSchemaCollectionPtr msXMLSchemaCache26Ptr;
typedef IXMLDOMSchemaCollection msXMLSchemaCache30;
typedef IXMLDOMSchemaCollectionPtr msXMLSchemaCache30Ptr;
typedef IXSLTemplate msXSLTemplate;
typedef IXSLTemplatePtr msXSLTemplatePtr;
typedef IXSLTemplate msXSLTemplate26;
typedef IXSLTemplatePtr msXSLTemplate26Ptr;
typedef IXSLTemplate msXSLTemplate30;
typedef IXSLTemplatePtr msXSLTemplate30Ptr;
typedef IDSOControl msDSOControl;
typedef IDSOControlPtr msDSOControlPtr;
typedef IDSOControl msDSOControl26;
typedef IDSOControlPtr msDSOControl26Ptr;
typedef IDSOControl msDSOControl30;
typedef IDSOControlPtr msDSOControl30Ptr;
typedef IXMLHTTPRequest msXMLHTTP;
typedef IXMLHTTPRequestPtr msXMLHTTPPtr;
typedef IXMLHTTPRequest msXMLHTTP26;
typedef IXMLHTTPRequestPtr msXMLHTTP26Ptr;
typedef IXMLHTTPRequest msXMLHTTP30;
typedef IXMLHTTPRequestPtr msXMLHTTP30Ptr;
typedef IServerXMLHTTPRequest msServerXMLHTTP;
typedef IServerXMLHTTPRequestPtr msServerXMLHTTPPtr;
typedef IServerXMLHTTPRequest msServerXMLHTTP30;
typedef IServerXMLHTTPRequestPtr msServerXMLHTTP30Ptr;
typedef IVBSAXXMLReader msSAXXMLReader;
typedef IVBSAXXMLReaderPtr msSAXXMLReaderPtr;
typedef IVBSAXXMLReader msSAXXMLReader30;
typedef IVBSAXXMLReaderPtr msSAXXMLReader30Ptr;
typedef IMXWriter msMXXMLWriter;
typedef IMXWriterPtr msMXXMLWriterPtr;
typedef IMXWriter msMXXMLWriter30;
typedef IMXWriterPtr msMXXMLWriter30Ptr;
typedef IMXAttributes msSAXAttributes;
typedef IMXAttributesPtr msSAXAttributesPtr;
typedef IMXAttributes msSAXAttributes30;
typedef IMXAttributesPtr msSAXAttributes30Ptr;
typedef IXMLDocument2 XMLDocument;
typedef IXMLDocument2Ptr XMLDocumentPtr;

#define LIBID_OF_msDOMDocument (&LIBID_MSXML2)
#define LIBID_OF_msDOMDocument26 (&LIBID_MSXML2)
#define LIBID_OF_msDOMDocument30 (&LIBID_MSXML2)
#define LIBID_OF_msFreeThreadedDOMDocument (&LIBID_MSXML2)
#define LIBID_OF_msFreeThreadedDOMDocument26 (&LIBID_MSXML2)
#define LIBID_OF_msFreeThreadedDOMDocument30 (&LIBID_MSXML2)
#define LIBID_OF_msXMLSchemaCache (&LIBID_MSXML2)
#define LIBID_OF_msXMLSchemaCache26 (&LIBID_MSXML2)
#define LIBID_OF_msXMLSchemaCache30 (&LIBID_MSXML2)
#define LIBID_OF_msXSLTemplate (&LIBID_MSXML2)
#define LIBID_OF_msXSLTemplate26 (&LIBID_MSXML2)
#define LIBID_OF_msXSLTemplate30 (&LIBID_MSXML2)
#define LIBID_OF_msDSOControl (&LIBID_MSXML2)
#define LIBID_OF_msDSOControl26 (&LIBID_MSXML2)
#define LIBID_OF_msDSOControl30 (&LIBID_MSXML2)
#define LIBID_OF_msXMLHTTP (&LIBID_MSXML2)
#define LIBID_OF_msXMLHTTP26 (&LIBID_MSXML2)
#define LIBID_OF_msXMLHTTP30 (&LIBID_MSXML2)
#define LIBID_OF_msServerXMLHTTP (&LIBID_MSXML2)
#define LIBID_OF_msServerXMLHTTP30 (&LIBID_MSXML2)
#define LIBID_OF_msSAXXMLReader (&LIBID_MSXML2)
#define LIBID_OF_msSAXXMLReader30 (&LIBID_MSXML2)
#define LIBID_OF_msMXXMLWriter (&LIBID_MSXML2)
#define LIBID_OF_msMXXMLWriter30 (&LIBID_MSXML2)
#define LIBID_OF_msSAXAttributes (&LIBID_MSXML2)
#define LIBID_OF_msSAXAttributes30 (&LIBID_MSXML2)
#define LIBID_OF_XMLDocument (&LIBID_MSXML2)

// *********************************************************************//
// Declaration of Aliases defined in Type Library                         
// *********************************************************************//
typedef Msxml3::tagDOMNodeType DOMNodeType;
typedef Msxml3::tagXMLEMEM_TYPE XMLELEM_TYPE;
typedef Msxml3::_SERVERXMLHTTP_OPTION SERVERXMLHTTP_OPTION;
typedef Msxml3::_SXH_SERVER_CERT_OPTION SXH_SERVER_CERT_OPTION;

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum tagDOMNodeType
{
  NODE_INVALID = 0, 
  NODE_ELEMENT = 1, 
  NODE_ATTRIBUTE = 2, 
  NODE_TEXT = 3, 
  NODE_CDATA_SECTION = 4, 
  NODE_ENTITY_REFERENCE = 5, 
  NODE_ENTITY = 6, 
  NODE_PROCESSING_INSTRUCTION = 7, 
  NODE_COMMENT = 8, 
  NODE_DOCUMENT = 9, 
  NODE_DOCUMENT_TYPE = 10, 
  NODE_DOCUMENT_FRAGMENT = 11, 
  NODE_NOTATION = 12
} tagDOMNodeType;

typedef enum tagXMLEMEM_TYPE
{
  XMLELEMTYPE_ELEMENT = 0, 
  XMLELEMTYPE_TEXT = 1, 
  XMLELEMTYPE_COMMENT = 2, 
  XMLELEMTYPE_DOCUMENT = 3, 
  XMLELEMTYPE_DTD = 4, 
  XMLELEMTYPE_PI = 5, 
  XMLELEMTYPE_OTHER = 6
} tagXMLEMEM_TYPE;

typedef enum _SERVERXMLHTTP_OPTION
{
  SXH_OPTION_URL_CODEPAGE = 0, 
  SXH_OPTION_ESCAPE_PERCENT_IN_URL = 1, 
  SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS = 2, 
  SXH_OPTION_SELECT_CLIENT_SSL_CERT = 3
} _SERVERXMLHTTP_OPTION;

typedef enum _SXH_SERVER_CERT_OPTION
{
  SXH_SERVER_CERT_IGNORE_UNKNOWN_CA = 256, 
  SXH_SERVER_CERT_IGNORE_WRONG_USAGE = 512, 
  SXH_SERVER_CERT_IGNORE_CERT_CN_INVALID = 4096, 
  SXH_SERVER_CERT_IGNORE_CERT_DATE_INVALID = 8192, 
  SXH_SERVER_CERT_IGNORE_ALL_SERVER_ERRORS = 13056
} _SXH_SERVER_CERT_OPTION;


// *********************************************************************//
// Declaration of Structures and Unions defined in Type Library           
// *********************************************************************//
struct tag_xml_error
{
  unsigned _nLine;
  BSTR _pchBuf;
  unsigned _cchBuf;
  unsigned _ich;
  BSTR _pszFound;
  BSTR _pszExpected;
  unsigned_long _reserved1;
  unsigned_long _reserved2;
};

// *********************************************************************//
// Interface: IXMLDOMImplementation
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8F-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMImplementation  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE hasFeature(BSTR feature/*[in]*/, BSTR version/*[in]*/, 
                                               VARIANT_BOOL* hasFeature/*[out,retval]*/) = 0; // [145]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall hasFeature(BSTR feature/*[in]*/, BSTR version/*[in]*/)
  {
    VARIANT_BOOL hasFeature;
    OLECHECK(this->hasFeature(feature, version, (VARIANT_BOOL*)&hasFeature));
    return hasFeature;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF80-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMNode  : public IDispatch
{
public:
  // [2] name of the node
  virtual HRESULT STDMETHODCALLTYPE get_nodeName(BSTR* name/*[out,retval]*/) = 0;
  // [3] value stored in the node
  virtual HRESULT STDMETHODCALLTYPE get_nodeValue(VARIANT* value/*[out,retval]*/) = 0;
  // [3] value stored in the node
  virtual HRESULT STDMETHODCALLTYPE set_nodeValue(VARIANT value/*[in]*/) = 0;
  // [4] the node's type
  virtual HRESULT STDMETHODCALLTYPE get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/) = 0;
  // [6] parent of the node
  virtual HRESULT STDMETHODCALLTYPE get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/) = 0;
  // [7] the collection of the node's children
  virtual HRESULT STDMETHODCALLTYPE get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/) = 0;
  // [8] first child of the node
  virtual HRESULT STDMETHODCALLTYPE get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/) = 0;
  // [9] last child of the node
  virtual HRESULT STDMETHODCALLTYPE get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/) = 0;
  // [10] left sibling of the node
  virtual HRESULT STDMETHODCALLTYPE get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/) = 0;
  // [11] right sibling of the node
  virtual HRESULT STDMETHODCALLTYPE get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/) = 0;
  // [12] the collection of the node's attributes
  virtual HRESULT STDMETHODCALLTYPE get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/) = 0;
  // [13] insert a child node
  virtual HRESULT STDMETHODCALLTYPE insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                 VARIANT refChild/*[in]*/, 
                                                 Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/) = 0;
  // [14] replace a child node
  virtual HRESULT STDMETHODCALLTYPE replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                 Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                                 Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/) = 0;
  // [15] remove a child node
  virtual HRESULT STDMETHODCALLTYPE removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                                Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/) = 0;
  // [16] append a child node
  virtual HRESULT STDMETHODCALLTYPE appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/) = 0; // [17]
  // [18] document that contains the node
  virtual HRESULT STDMETHODCALLTYPE get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                              Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/) = 0; // [19]
  // [21] the type of node in string form
  virtual HRESULT STDMETHODCALLTYPE get_nodeTypeString(BSTR* nodeType/*[out,retval]*/) = 0;
  // [24] text content of the node and subtree
  virtual HRESULT STDMETHODCALLTYPE get_text(BSTR* text/*[out,retval]*/) = 0;
  // [24] text content of the node and subtree
  virtual HRESULT STDMETHODCALLTYPE set_text(BSTR text/*[in]*/) = 0;
  // [22] indicates whether node is a default value
  virtual HRESULT STDMETHODCALLTYPE get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/) = 0;
  // [23] pointer to the definition of the node in the DTD or schema
  virtual HRESULT STDMETHODCALLTYPE get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/) = 0;
  // [25] get the strongly typed value of the node
  virtual HRESULT STDMETHODCALLTYPE get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/) = 0;
  // [25] get the strongly typed value of the node
  virtual HRESULT STDMETHODCALLTYPE set_nodeTypedValue(VARIANT typedValue/*[in]*/) = 0;
  // [26] the data type of the node
  virtual HRESULT STDMETHODCALLTYPE get_dataType(VARIANT* dataTypeName/*[out,retval]*/) = 0;
  // [26] the data type of the node
  virtual HRESULT STDMETHODCALLTYPE set_dataType(BSTR dataTypeName/*[in]*/) = 0;
  // [27] return the XML source for the node and each of its descendants
  virtual HRESULT STDMETHODCALLTYPE get_xml(BSTR* xmlString/*[out,retval]*/) = 0;
  // [28] apply the stylesheet to the subtree
  virtual HRESULT STDMETHODCALLTYPE transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                  BSTR* xmlString/*[out,retval]*/) = 0;
  // [29] execute query on the subtree
  virtual HRESULT STDMETHODCALLTYPE selectNodes(BSTR queryString/*[in]*/, 
                                                Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/) = 0;
  // [30] execute query on the subtree
  virtual HRESULT STDMETHODCALLTYPE selectSingleNode(BSTR queryString/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/) = 0;
  // [31] has sub-tree been completely parsed
  virtual HRESULT STDMETHODCALLTYPE get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/) = 0;
  // [32] the URI for the namespace applying to the node
  virtual HRESULT STDMETHODCALLTYPE get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/) = 0;
  // [33] the prefix for the namespace applying to the node
  virtual HRESULT STDMETHODCALLTYPE get_prefix(BSTR* prefixString/*[out,retval]*/) = 0;
  // [34] the base name of the node (nodename with the prefix stripped off)
  virtual HRESULT STDMETHODCALLTYPE get_baseName(BSTR* nameString/*[out,retval]*/) = 0;
  // [35] apply the stylesheet to the subtree, returning the result through a document or a stream
  virtual HRESULT STDMETHODCALLTYPE transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                          VARIANT outputObject/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_nodeName(void)
  {
    BSTR name = 0;
    OLECHECK(this->get_nodeName((BSTR*)&name));
    return name;
  }

  VARIANT __fastcall get_nodeValue(void)
  {
    VARIANT value;
    OLECHECK(this->get_nodeValue((VARIANT*)&value));
    return value;
  }

  Msxml3::DOMNodeType __fastcall get_nodeType(void)
  {
    Msxml3::DOMNodeType type;
    OLECHECK(this->get_nodeType((Msxml3::DOMNodeType*)&type));
    return type;
  }

  Msxml3::IXMLDOMNode* __fastcall get_parentNode(void)
  {
    Msxml3::IXMLDOMNode* parent;
    OLECHECK(this->get_parentNode((Msxml3::IXMLDOMNode**)&parent));
    return parent;
  }

  Msxml3::IXMLDOMNodeList* __fastcall get_childNodes(void)
  {
    Msxml3::IXMLDOMNodeList* childList;
    OLECHECK(this->get_childNodes((Msxml3::IXMLDOMNodeList**)&childList));
    return childList;
  }

  Msxml3::IXMLDOMNode* __fastcall get_firstChild(void)
  {
    Msxml3::IXMLDOMNode* firstChild;
    OLECHECK(this->get_firstChild((Msxml3::IXMLDOMNode**)&firstChild));
    return firstChild;
  }

  Msxml3::IXMLDOMNode* __fastcall get_lastChild(void)
  {
    Msxml3::IXMLDOMNode* lastChild;
    OLECHECK(this->get_lastChild((Msxml3::IXMLDOMNode**)&lastChild));
    return lastChild;
  }

  Msxml3::IXMLDOMNode* __fastcall get_previousSibling(void)
  {
    Msxml3::IXMLDOMNode* previousSibling;
    OLECHECK(this->get_previousSibling((Msxml3::IXMLDOMNode**)&previousSibling));
    return previousSibling;
  }

  Msxml3::IXMLDOMNode* __fastcall get_nextSibling(void)
  {
    Msxml3::IXMLDOMNode* nextSibling;
    OLECHECK(this->get_nextSibling((Msxml3::IXMLDOMNode**)&nextSibling));
    return nextSibling;
  }

  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_attributes(void)
  {
    Msxml3::IXMLDOMNamedNodeMap* attributeMap;
    OLECHECK(this->get_attributes((Msxml3::IXMLDOMNamedNodeMap**)&attributeMap));
    return attributeMap;
  }

  Msxml3::IXMLDOMNode* __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               VARIANT refChild/*[in]*/)
  {
    Msxml3::IXMLDOMNode* outNewChild;
    OLECHECK(this->insertBefore(newChild, refChild, (Msxml3::IXMLDOMNode**)&outNewChild));
    return outNewChild;
  }

  Msxml3::IXMLDOMNode* __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               Msxml3::IXMLDOMNode* oldChild/*[in]*/)
  {
    Msxml3::IXMLDOMNode* outOldChild;
    OLECHECK(this->replaceChild(newChild, oldChild, (Msxml3::IXMLDOMNode**)&outOldChild));
    return outOldChild;
  }

  Msxml3::IXMLDOMNode* __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/)
  {
    Msxml3::IXMLDOMNode* oldChild;
    OLECHECK(this->removeChild(childNode, (Msxml3::IXMLDOMNode**)&oldChild));
    return oldChild;
  }

  Msxml3::IXMLDOMNode* __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/)
  {
    Msxml3::IXMLDOMNode* outNewChild;
    OLECHECK(this->appendChild(newChild, (Msxml3::IXMLDOMNode**)&outNewChild));
    return outNewChild;
  }

  VARIANT_BOOL __fastcall hasChildNodes(void)
  {
    VARIANT_BOOL hasChild;
    OLECHECK(this->hasChildNodes((VARIANT_BOOL*)&hasChild));
    return hasChild;
  }

  Msxml3::IXMLDOMDocument* __fastcall get_ownerDocument(void)
  {
    Msxml3::IXMLDOMDocument* DOMDocument;
    OLECHECK(this->get_ownerDocument((Msxml3::IXMLDOMDocument**)&DOMDocument));
    return DOMDocument;
  }

  Msxml3::IXMLDOMNode* __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/)
  {
    Msxml3::IXMLDOMNode* cloneRoot;
    OLECHECK(this->cloneNode(deep, (Msxml3::IXMLDOMNode**)&cloneRoot));
    return cloneRoot;
  }

  BSTR __fastcall get_nodeTypeString(void)
  {
    BSTR nodeType = 0;
    OLECHECK(this->get_nodeTypeString((BSTR*)&nodeType));
    return nodeType;
  }

  BSTR __fastcall get_text(void)
  {
    BSTR text = 0;
    OLECHECK(this->get_text((BSTR*)&text));
    return text;
  }

  VARIANT_BOOL __fastcall get_specified(void)
  {
    VARIANT_BOOL isSpecified;
    OLECHECK(this->get_specified((VARIANT_BOOL*)&isSpecified));
    return isSpecified;
  }

  Msxml3::IXMLDOMNode* __fastcall get_definition(void)
  {
    Msxml3::IXMLDOMNode* definitionNode;
    OLECHECK(this->get_definition((Msxml3::IXMLDOMNode**)&definitionNode));
    return definitionNode;
  }

  VARIANT __fastcall get_nodeTypedValue(void)
  {
    VARIANT typedValue;
    OLECHECK(this->get_nodeTypedValue((VARIANT*)&typedValue));
    return typedValue;
  }

  VARIANT __fastcall get_dataType(void)
  {
    VARIANT dataTypeName;
    OLECHECK(this->get_dataType((VARIANT*)&dataTypeName));
    return dataTypeName;
  }

  BSTR __fastcall get_xml(void)
  {
    BSTR xmlString = 0;
    OLECHECK(this->get_xml((BSTR*)&xmlString));
    return xmlString;
  }

  BSTR __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/)
  {
    BSTR xmlString = 0;
    OLECHECK(this->transformNode(stylesheet, (BSTR*)&xmlString));
    return xmlString;
  }

  Msxml3::IXMLDOMNodeList* __fastcall selectNodes(BSTR queryString/*[in]*/)
  {
    Msxml3::IXMLDOMNodeList* resultList;
    OLECHECK(this->selectNodes(queryString, (Msxml3::IXMLDOMNodeList**)&resultList));
    return resultList;
  }

  Msxml3::IXMLDOMNode* __fastcall selectSingleNode(BSTR queryString/*[in]*/)
  {
    Msxml3::IXMLDOMNode* resultNode;
    OLECHECK(this->selectSingleNode(queryString, (Msxml3::IXMLDOMNode**)&resultNode));
    return resultNode;
  }

  VARIANT_BOOL __fastcall get_parsed(void)
  {
    VARIANT_BOOL isParsed;
    OLECHECK(this->get_parsed((VARIANT_BOOL*)&isParsed));
    return isParsed;
  }

  BSTR __fastcall get_namespaceURI(void)
  {
    BSTR namespaceURI = 0;
    OLECHECK(this->get_namespaceURI((BSTR*)&namespaceURI));
    return namespaceURI;
  }

  BSTR __fastcall get_prefix(void)
  {
    BSTR prefixString = 0;
    OLECHECK(this->get_prefix((BSTR*)&prefixString));
    return prefixString;
  }

  BSTR __fastcall get_baseName(void)
  {
    BSTR nameString = 0;
    OLECHECK(this->get_baseName((BSTR*)&nameString));
    return nameString;
  }


  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml3::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml3::IXMLDOMNode* parentNode = {read = get_parentNode};
  __property   Msxml3::IXMLDOMNodeList* childNodes = {read = get_childNodes};
  __property   Msxml3::IXMLDOMNode* firstChild = {read = get_firstChild};
  __property   Msxml3::IXMLDOMNode* lastChild = {read = get_lastChild};
  __property   Msxml3::IXMLDOMNode* previousSibling = {read = get_previousSibling};
  __property   Msxml3::IXMLDOMNode* nextSibling = {read = get_nextSibling};
  __property   Msxml3::IXMLDOMNamedNodeMap* attributes = {read = get_attributes};
  __property   Msxml3::IXMLDOMDocument* ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text};
  __property   VARIANT_BOOL    specified = {read = get_specified};
  __property   Msxml3::IXMLDOMNode* definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   VARIANT_BOOL    parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMNodeList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF82-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMNodeList  : public IDispatch
{
public:
  // [0] collection of nodes
  virtual HRESULT STDMETHODCALLTYPE get_item(long index/*[in]*/, 
                                             Msxml3::IXMLDOMNode** listItem/*[out,retval]*/) = 0;
  // [74] number of nodes in the collection
  virtual HRESULT STDMETHODCALLTYPE get_length(long* listLength/*[out,retval]*/) = 0;
  // [76] get next node from iterator
  virtual HRESULT STDMETHODCALLTYPE nextNode(Msxml3::IXMLDOMNode** nextItem/*[out,retval]*/) = 0;
  // [77] reset the position of iterator
  virtual HRESULT STDMETHODCALLTYPE reset(void) = 0;
  virtual HRESULT STDMETHODCALLTYPE get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msxml3::IXMLDOMNode* __fastcall get_item(long index/*[in]*/)
  {
    Msxml3::IXMLDOMNode* listItem;
    OLECHECK(this->get_item(index, (Msxml3::IXMLDOMNode**)&listItem));
    return listItem;
  }

  long __fastcall get_length(void)
  {
    long listLength;
    OLECHECK(this->get_length((long*)&listLength));
    return listLength;
  }

  Msxml3::IXMLDOMNode* __fastcall nextNode(void)
  {
    Msxml3::IXMLDOMNode* nextItem;
    OLECHECK(this->nextNode((Msxml3::IXMLDOMNode**)&nextItem));
    return nextItem;
  }

  LPUNKNOWN __fastcall get__newEnum(void)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->get__newEnum((LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }


  __property   long            length = {read = get_length};
  __property   LPUNKNOWN       _newEnum = {read = get__newEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMNamedNodeMap
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF83-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMNamedNodeMap  : public IDispatch
{
public:
  // [83] lookup item by name
  virtual HRESULT STDMETHODCALLTYPE getNamedItem(BSTR name/*[in]*/, 
                                                 Msxml3::IXMLDOMNode** namedItem/*[out,retval]*/) = 0;
  // [84] set item by name
  virtual HRESULT STDMETHODCALLTYPE setNamedItem(Msxml3::IXMLDOMNode* newItem/*[in]*/, 
                                                 Msxml3::IXMLDOMNode** nameItem/*[out,retval]*/) = 0;
  // [85] remove item by name
  virtual HRESULT STDMETHODCALLTYPE removeNamedItem(BSTR name/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** namedItem/*[out,retval]*/) = 0;
  // [0] collection of nodes
  virtual HRESULT STDMETHODCALLTYPE get_item(long index/*[in]*/, 
                                             Msxml3::IXMLDOMNode** listItem/*[out,retval]*/) = 0;
  // [74] number of nodes in the collection
  virtual HRESULT STDMETHODCALLTYPE get_length(long* listLength/*[out,retval]*/) = 0;
  // [87] lookup the item by name and namespace
  virtual HRESULT STDMETHODCALLTYPE getQualifiedItem(BSTR baseName/*[in]*/, 
                                                     BSTR namespaceURI/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** qualifiedItem/*[out,retval]*/) = 0;
  // [88] remove the item by name and namespace
  virtual HRESULT STDMETHODCALLTYPE removeQualifiedItem(BSTR baseName/*[in]*/, 
                                                        BSTR namespaceURI/*[in]*/, 
                                                        Msxml3::IXMLDOMNode** qualifiedItem/*[out,retval]*/) = 0;
  // [89] get next node from iterator
  virtual HRESULT STDMETHODCALLTYPE nextNode(Msxml3::IXMLDOMNode** nextItem/*[out,retval]*/) = 0;
  // [90] reset the position of iterator
  virtual HRESULT STDMETHODCALLTYPE reset(void) = 0;
  virtual HRESULT STDMETHODCALLTYPE get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msxml3::IXMLDOMNode* __fastcall getNamedItem(BSTR name/*[in]*/)
  {
    Msxml3::IXMLDOMNode* namedItem;
    OLECHECK(this->getNamedItem(name, (Msxml3::IXMLDOMNode**)&namedItem));
    return namedItem;
  }

  Msxml3::IXMLDOMNode* __fastcall setNamedItem(Msxml3::IXMLDOMNode* newItem/*[in]*/)
  {
    Msxml3::IXMLDOMNode* nameItem;
    OLECHECK(this->setNamedItem(newItem, (Msxml3::IXMLDOMNode**)&nameItem));
    return nameItem;
  }

  Msxml3::IXMLDOMNode* __fastcall removeNamedItem(BSTR name/*[in]*/)
  {
    Msxml3::IXMLDOMNode* namedItem;
    OLECHECK(this->removeNamedItem(name, (Msxml3::IXMLDOMNode**)&namedItem));
    return namedItem;
  }

  Msxml3::IXMLDOMNode* __fastcall get_item(long index/*[in]*/)
  {
    Msxml3::IXMLDOMNode* listItem;
    OLECHECK(this->get_item(index, (Msxml3::IXMLDOMNode**)&listItem));
    return listItem;
  }

  long __fastcall get_length(void)
  {
    long listLength;
    OLECHECK(this->get_length((long*)&listLength));
    return listLength;
  }

  Msxml3::IXMLDOMNode* __fastcall getQualifiedItem(BSTR baseName/*[in]*/, BSTR namespaceURI/*[in]*/)
  {
    Msxml3::IXMLDOMNode* qualifiedItem;
    OLECHECK(this->getQualifiedItem(baseName, namespaceURI, (Msxml3::IXMLDOMNode**)&qualifiedItem));
    return qualifiedItem;
  }

  Msxml3::IXMLDOMNode* __fastcall removeQualifiedItem(BSTR baseName/*[in]*/, 
                                                      BSTR namespaceURI/*[in]*/)
  {
    Msxml3::IXMLDOMNode* qualifiedItem;
    OLECHECK(this->removeQualifiedItem(baseName, namespaceURI, (Msxml3::IXMLDOMNode**)&qualifiedItem));
    return qualifiedItem;
  }

  Msxml3::IXMLDOMNode* __fastcall nextNode(void)
  {
    Msxml3::IXMLDOMNode* nextItem;
    OLECHECK(this->nextNode((Msxml3::IXMLDOMNode**)&nextItem));
    return nextItem;
  }

  LPUNKNOWN __fastcall get__newEnum(void)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->get__newEnum((LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }


  __property   long            length = {read = get_length};
  __property   LPUNKNOWN       _newEnum = {read = get__newEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMDocument
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF81-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMDocument  : public Msxml3::IXMLDOMNode
{
public:
  // [38] node corresponding to the DOCTYPE
  virtual HRESULT STDMETHODCALLTYPE get_doctype(Msxml3::IXMLDOMDocumentType** documentType/*[out,retval]*/) = 0;
  // [39] info on this DOM implementation
  virtual HRESULT STDMETHODCALLTYPE get_implementation(Msxml3::IXMLDOMImplementation** impl/*[out,retval]*/) = 0;
  // [40] the root of the tree
  virtual HRESULT STDMETHODCALLTYPE get_documentElement(Msxml3::IXMLDOMElement** DOMElement/*[out,retval]*/) = 0;
  // [40] the root of the tree
  virtual HRESULT STDMETHODCALLTYPE _set_documentElement(Msxml3::IXMLDOMElement* DOMElement/*[in]*/) = 0;
  // [41] create an Element node
  virtual HRESULT STDMETHODCALLTYPE createElement(BSTR tagName/*[in]*/, 
                                                  Msxml3::IXMLDOMElement** element/*[out,retval]*/) = 0;
  // [42] create a DocumentFragment node
  virtual HRESULT STDMETHODCALLTYPE createDocumentFragment(Msxml3::IXMLDOMDocumentFragment** docFrag/*[out,retval]*/) = 0;
  // [43] create a text node
  virtual HRESULT STDMETHODCALLTYPE createTextNode(BSTR data/*[in]*/, 
                                                   Msxml3::IXMLDOMCharacterData** text/*[out,retval]*/) = 0;
  // [44] create a comment node
  virtual HRESULT STDMETHODCALLTYPE createComment(BSTR data/*[in]*/, 
                                                  Msxml3::IXMLDOMComment** comment/*[out,retval]*/) = 0;
  // [45] create a CDATA section node
  virtual HRESULT STDMETHODCALLTYPE createCDATASection(BSTR data/*[in]*/, 
                                                       Msxml3::IXMLDOMCDATASection** cdata/*[out,retval]*/) = 0;
  // [46] create a processing instruction node
  virtual HRESULT STDMETHODCALLTYPE createProcessingInstruction(BSTR target/*[in]*/, 
                                                                BSTR data/*[in]*/, 
                                                                Msxml3::IXMLDOMProcessingInstruction** pi/*[out,retval]*/) = 0;
  // [47] create an attribute node
  virtual HRESULT STDMETHODCALLTYPE createAttribute(BSTR name/*[in]*/, 
                                                    Msxml3::IXMLDOMAttribute** attribute/*[out,retval]*/) = 0;
  // [49] create an entity reference node
  virtual HRESULT STDMETHODCALLTYPE createEntityReference(BSTR name/*[in]*/, 
                                                          Msxml3::IXMLDOMEntityReference** entityRef/*[out,retval]*/) = 0;
  // [50] build a list of elements by name
  virtual HRESULT STDMETHODCALLTYPE getElementsByTagName(BSTR tagName/*[in]*/, 
                                                         Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/) = 0;
  // [54] create a node of the specified node type and name
  virtual HRESULT STDMETHODCALLTYPE createNode(VARIANT type/*[in]*/, BSTR name/*[in]*/, 
                                               BSTR namespaceURI/*[in]*/, 
                                               Msxml3::IXMLDOMNode** node/*[out,retval]*/) = 0;
  // [56] retrieve node from it's ID
  virtual HRESULT STDMETHODCALLTYPE nodeFromID(BSTR idString/*[in]*/, 
                                               Msxml3::IXMLDOMNode** node/*[out,retval]*/) = 0;
  // [58] load document from the specified XML source
  virtual HRESULT STDMETHODCALLTYPE load(VARIANT xmlSource/*[in]*/, 
                                         VARIANT_BOOL* isSuccessful/*[out,retval]*/) = 0;
  // [-525] get the state of the XML document
  virtual HRESULT STDMETHODCALLTYPE get_readyState(long* value/*[out,retval]*/) = 0;
  // [59] get the last parser error
  virtual HRESULT STDMETHODCALLTYPE get_parseError(Msxml3::IXMLDOMParseError** errorObj/*[out,retval]*/) = 0;
  // [60] get the URL for the loaded XML document
  virtual HRESULT STDMETHODCALLTYPE get_url(BSTR* urlString/*[out,retval]*/) = 0;
  // [61] flag for asynchronous download
  virtual HRESULT STDMETHODCALLTYPE get_async(VARIANT_BOOL* isAsync/*[out,retval]*/) = 0;
  // [61] flag for asynchronous download
  virtual HRESULT STDMETHODCALLTYPE set_async(VARIANT_BOOL isAsync/*[in]*/) = 0;
  // [62] abort an asynchronous download
  virtual HRESULT STDMETHODCALLTYPE abort(void) = 0;
  // [63] load the document from a string
  virtual HRESULT STDMETHODCALLTYPE loadXML(BSTR bstrXML/*[in]*/, 
                                            VARIANT_BOOL* isSuccessful/*[out,retval]*/) = 0;
  // [64] save the document to a specified destination
  virtual HRESULT STDMETHODCALLTYPE save(VARIANT destination/*[in]*/) = 0;
  // [65] indicates whether the parser performs validation
  virtual HRESULT STDMETHODCALLTYPE get_validateOnParse(VARIANT_BOOL* isValidating/*[out,retval]*/) = 0;
  // [65] indicates whether the parser performs validation
  virtual HRESULT STDMETHODCALLTYPE set_validateOnParse(VARIANT_BOOL isValidating/*[in]*/) = 0;
  // [66] indicates whether the parser resolves references to external DTD/Entities/Schema
  virtual HRESULT STDMETHODCALLTYPE get_resolveExternals(VARIANT_BOOL* isResolving/*[out,retval]*/) = 0;
  // [66] indicates whether the parser resolves references to external DTD/Entities/Schema
  virtual HRESULT STDMETHODCALLTYPE set_resolveExternals(VARIANT_BOOL isResolving/*[in]*/) = 0;
  // [67] indicates whether the parser preserves whitespace
  virtual HRESULT STDMETHODCALLTYPE get_preserveWhiteSpace(VARIANT_BOOL* isPreserving/*[out,retval]*/) = 0;
  // [67] indicates whether the parser preserves whitespace
  virtual HRESULT STDMETHODCALLTYPE set_preserveWhiteSpace(VARIANT_BOOL isPreserving/*[in]*/) = 0;
  // [68] register a readystatechange event handler
  virtual HRESULT STDMETHODCALLTYPE set_onreadystatechange(VARIANT Param1/*[in]*/) = 0;
  // [69] register an ondataavailable event handler
  virtual HRESULT STDMETHODCALLTYPE set_ondataavailable(VARIANT Param1/*[in]*/) = 0;
  // [70] register an ontransformnode event handler
  virtual HRESULT STDMETHODCALLTYPE set_ontransformnode(VARIANT Param1/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msxml3::IXMLDOMDocumentType* __fastcall get_doctype(void)
  {
    Msxml3::IXMLDOMDocumentType* documentType;
    OLECHECK(this->get_doctype((Msxml3::IXMLDOMDocumentType**)&documentType));
    return documentType;
  }

  Msxml3::IXMLDOMImplementation* __fastcall get_implementation(void)
  {
    Msxml3::IXMLDOMImplementation* impl;
    OLECHECK(this->get_implementation((Msxml3::IXMLDOMImplementation**)&impl));
    return impl;
  }

  Msxml3::IXMLDOMElement* __fastcall get_documentElement(void)
  {
    Msxml3::IXMLDOMElement* DOMElement;
    OLECHECK(this->get_documentElement((Msxml3::IXMLDOMElement**)&DOMElement));
    return DOMElement;
  }

  Msxml3::IXMLDOMElement* __fastcall createElement(BSTR tagName/*[in]*/)
  {
    Msxml3::IXMLDOMElement* element;
    OLECHECK(this->createElement(tagName, (Msxml3::IXMLDOMElement**)&element));
    return element;
  }

  Msxml3::IXMLDOMDocumentFragment* __fastcall createDocumentFragment(void)
  {
    Msxml3::IXMLDOMDocumentFragment* docFrag;
    OLECHECK(this->createDocumentFragment((Msxml3::IXMLDOMDocumentFragment**)&docFrag));
    return docFrag;
  }

  Msxml3::IXMLDOMCharacterData* __fastcall createTextNode(BSTR data/*[in]*/)
  {
    Msxml3::IXMLDOMCharacterData* text;
    OLECHECK(this->createTextNode(data, (Msxml3::IXMLDOMCharacterData**)&text));
    return text;
  }

  Msxml3::IXMLDOMComment* __fastcall createComment(BSTR data/*[in]*/)
  {
    Msxml3::IXMLDOMComment* comment;
    OLECHECK(this->createComment(data, (Msxml3::IXMLDOMComment**)&comment));
    return comment;
  }

  Msxml3::IXMLDOMCDATASection* __fastcall createCDATASection(BSTR data/*[in]*/)
  {
    Msxml3::IXMLDOMCDATASection* cdata;
    OLECHECK(this->createCDATASection(data, (Msxml3::IXMLDOMCDATASection**)&cdata));
    return cdata;
  }

  Msxml3::IXMLDOMProcessingInstruction* __fastcall createProcessingInstruction(BSTR target/*[in]*/, 
                                                                               BSTR data/*[in]*/)
  {
    Msxml3::IXMLDOMProcessingInstruction* pi;
    OLECHECK(this->createProcessingInstruction(target, data, (Msxml3::IXMLDOMProcessingInstruction**)&pi));
    return pi;
  }

  Msxml3::IXMLDOMAttribute* __fastcall createAttribute(BSTR name/*[in]*/)
  {
    Msxml3::IXMLDOMAttribute* attribute;
    OLECHECK(this->createAttribute(name, (Msxml3::IXMLDOMAttribute**)&attribute));
    return attribute;
  }

  Msxml3::IXMLDOMEntityReference* __fastcall createEntityReference(BSTR name/*[in]*/)
  {
    Msxml3::IXMLDOMEntityReference* entityRef;
    OLECHECK(this->createEntityReference(name, (Msxml3::IXMLDOMEntityReference**)&entityRef));
    return entityRef;
  }

  Msxml3::IXMLDOMNodeList* __fastcall getElementsByTagName(BSTR tagName/*[in]*/)
  {
    Msxml3::IXMLDOMNodeList* resultList;
    OLECHECK(this->getElementsByTagName(tagName, (Msxml3::IXMLDOMNodeList**)&resultList));
    return resultList;
  }

  Msxml3::IXMLDOMNode* __fastcall createNode(VARIANT type/*[in]*/, BSTR name/*[in]*/, 
                                             BSTR namespaceURI/*[in]*/)
  {
    Msxml3::IXMLDOMNode* node;
    OLECHECK(this->createNode(type, name, namespaceURI, (Msxml3::IXMLDOMNode**)&node));
    return node;
  }

  Msxml3::IXMLDOMNode* __fastcall nodeFromID(BSTR idString/*[in]*/)
  {
    Msxml3::IXMLDOMNode* node;
    OLECHECK(this->nodeFromID(idString, (Msxml3::IXMLDOMNode**)&node));
    return node;
  }

  VARIANT_BOOL __fastcall load(VARIANT xmlSource/*[in]*/)
  {
    VARIANT_BOOL isSuccessful;
    OLECHECK(this->load(xmlSource, (VARIANT_BOOL*)&isSuccessful));
    return isSuccessful;
  }

  long __fastcall get_readyState(void)
  {
    long value;
    OLECHECK(this->get_readyState((long*)&value));
    return value;
  }

  Msxml3::IXMLDOMParseError* __fastcall get_parseError(void)
  {
    Msxml3::IXMLDOMParseError* errorObj;
    OLECHECK(this->get_parseError((Msxml3::IXMLDOMParseError**)&errorObj));
    return errorObj;
  }

  BSTR __fastcall get_url(void)
  {
    BSTR urlString = 0;
    OLECHECK(this->get_url((BSTR*)&urlString));
    return urlString;
  }

  VARIANT_BOOL __fastcall get_async(void)
  {
    VARIANT_BOOL isAsync;
    OLECHECK(this->get_async((VARIANT_BOOL*)&isAsync));
    return isAsync;
  }

  VARIANT_BOOL __fastcall loadXML(BSTR bstrXML/*[in]*/)
  {
    VARIANT_BOOL isSuccessful;
    OLECHECK(this->loadXML(bstrXML, (VARIANT_BOOL*)&isSuccessful));
    return isSuccessful;
  }

  VARIANT_BOOL __fastcall get_validateOnParse(void)
  {
    VARIANT_BOOL isValidating;
    OLECHECK(this->get_validateOnParse((VARIANT_BOOL*)&isValidating));
    return isValidating;
  }

  VARIANT_BOOL __fastcall get_resolveExternals(void)
  {
    VARIANT_BOOL isResolving;
    OLECHECK(this->get_resolveExternals((VARIANT_BOOL*)&isResolving));
    return isResolving;
  }

  VARIANT_BOOL __fastcall get_preserveWhiteSpace(void)
  {
    VARIANT_BOOL isPreserving;
    OLECHECK(this->get_preserveWhiteSpace((VARIANT_BOOL*)&isPreserving));
    return isPreserving;
  }


  __property   Msxml3::IXMLDOMDocumentType* doctype = {read = get_doctype};
  __property   Msxml3::IXMLDOMImplementation* implementation = {read = get_implementation};
  __property   Msxml3::IXMLDOMElement* documentElement = {read = get_documentElement, write = _set_documentElement};
  __property   long            readyState = {read = get_readyState};
  __property   Msxml3::IXMLDOMParseError* parseError = {read = get_parseError};
  __property   BSTR            url = {read = get_url};
  __property   VARIANT_BOOL    async = {read = get_async, write = set_async};
  __property   VARIANT_BOOL    validateOnParse = {read = get_validateOnParse, write = set_validateOnParse};
  __property   VARIANT_BOOL    resolveExternals = {read = get_resolveExternals, write = set_resolveExternals};
  __property   VARIANT_BOOL    preserveWhiteSpace = {read = get_preserveWhiteSpace, write = set_preserveWhiteSpace};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMDocumentType
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8B-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMDocumentType  : public Msxml3::IXMLDOMNode
{
public:
  // [131] name of the document type (root of the tree)
  virtual HRESULT STDMETHODCALLTYPE get_name(BSTR* rootName/*[out,retval]*/) = 0;
  // [132] a list of entities in the document
  virtual HRESULT STDMETHODCALLTYPE get_entities(Msxml3::IXMLDOMNamedNodeMap** entityMap/*[out,retval]*/) = 0;
  // [133] a list of notations in the document
  virtual HRESULT STDMETHODCALLTYPE get_notations(Msxml3::IXMLDOMNamedNodeMap** notationMap/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_name(void)
  {
    BSTR rootName = 0;
    OLECHECK(this->get_name((BSTR*)&rootName));
    return rootName;
  }

  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_entities(void)
  {
    Msxml3::IXMLDOMNamedNodeMap* entityMap;
    OLECHECK(this->get_entities((Msxml3::IXMLDOMNamedNodeMap**)&entityMap));
    return entityMap;
  }

  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_notations(void)
  {
    Msxml3::IXMLDOMNamedNodeMap* notationMap;
    OLECHECK(this->get_notations((Msxml3::IXMLDOMNamedNodeMap**)&notationMap));
    return notationMap;
  }


  __property   BSTR            name = {read = get_name};
  __property   Msxml3::IXMLDOMNamedNodeMap* entities = {read = get_entities};
  __property   Msxml3::IXMLDOMNamedNodeMap* notations = {read = get_notations};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMElement
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF86-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMElement  : public Msxml3::IXMLDOMNode
{
public:
  // [97] get the tagName of the element
  virtual HRESULT STDMETHODCALLTYPE get_tagName(BSTR* tagName/*[out,retval]*/) = 0;
  // [99] look up the string value of an attribute by name
  virtual HRESULT STDMETHODCALLTYPE getAttribute(BSTR name/*[in]*/, VARIANT* value/*[out,retval]*/) = 0;
  // [100] set the string value of an attribute by name
  virtual HRESULT STDMETHODCALLTYPE setAttribute(BSTR name/*[in]*/, VARIANT value/*[in]*/) = 0;
  // [101] remove an attribute by name
  virtual HRESULT STDMETHODCALLTYPE removeAttribute(BSTR name/*[in]*/) = 0;
  // [102] look up the attribute node by name
  virtual HRESULT STDMETHODCALLTYPE getAttributeNode(BSTR name/*[in]*/, 
                                                     Msxml3::IXMLDOMAttribute** attributeNode/*[out,retval]*/) = 0;
  // [103] set the specified attribute on the element
  virtual HRESULT STDMETHODCALLTYPE setAttributeNode(Msxml3::IXMLDOMAttribute* DOMAttribute/*[in]*/, 
                                                     Msxml3::IXMLDOMAttribute** attributeNode/*[out,retval]*/) = 0;
  // [104] remove the specified attribute
  virtual HRESULT STDMETHODCALLTYPE removeAttributeNode(Msxml3::IXMLDOMAttribute* DOMAttribute/*[in]*/, 
                                                        Msxml3::IXMLDOMAttribute** attributeNode/*[out,retval]*/) = 0;
  // [105] build a list of elements by name
  virtual HRESULT STDMETHODCALLTYPE getElementsByTagName(BSTR tagName/*[in]*/, 
                                                         Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/) = 0;
  // [106] collapse all adjacent text nodes in sub-tree
  virtual HRESULT STDMETHODCALLTYPE normalize(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_tagName(void)
  {
    BSTR tagName = 0;
    OLECHECK(this->get_tagName((BSTR*)&tagName));
    return tagName;
  }

  VARIANT __fastcall getAttribute(BSTR name/*[in]*/)
  {
    VARIANT value;
    OLECHECK(this->getAttribute(name, (VARIANT*)&value));
    return value;
  }

  Msxml3::IXMLDOMAttribute* __fastcall getAttributeNode(BSTR name/*[in]*/)
  {
    Msxml3::IXMLDOMAttribute* attributeNode;
    OLECHECK(this->getAttributeNode(name, (Msxml3::IXMLDOMAttribute**)&attributeNode));
    return attributeNode;
  }

  Msxml3::IXMLDOMAttribute* __fastcall setAttributeNode(Msxml3::IXMLDOMAttribute* DOMAttribute/*[in]*/)
  {
    Msxml3::IXMLDOMAttribute* attributeNode;
    OLECHECK(this->setAttributeNode(DOMAttribute, (Msxml3::IXMLDOMAttribute**)&attributeNode));
    return attributeNode;
  }

  Msxml3::IXMLDOMAttribute* __fastcall removeAttributeNode(Msxml3::IXMLDOMAttribute* DOMAttribute/*[in]*/)
  {
    Msxml3::IXMLDOMAttribute* attributeNode;
    OLECHECK(this->removeAttributeNode(DOMAttribute, (Msxml3::IXMLDOMAttribute**)&attributeNode));
    return attributeNode;
  }

  Msxml3::IXMLDOMNodeList* __fastcall getElementsByTagName(BSTR tagName/*[in]*/)
  {
    Msxml3::IXMLDOMNodeList* resultList;
    OLECHECK(this->getElementsByTagName(tagName, (Msxml3::IXMLDOMNodeList**)&resultList));
    return resultList;
  }


  __property   BSTR            tagName = {read = get_tagName};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMAttribute
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF85-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMAttribute  : public Msxml3::IXMLDOMNode
{
public:
  // [118] get name of the attribute
  virtual HRESULT STDMETHODCALLTYPE get_name(BSTR* attributeName/*[out,retval]*/) = 0;
  // [120] string value of the attribute
  virtual HRESULT STDMETHODCALLTYPE get_value(VARIANT* attributeValue/*[out,retval]*/) = 0;
  // [120] string value of the attribute
  virtual HRESULT STDMETHODCALLTYPE set_value(VARIANT attributeValue/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_name(void)
  {
    BSTR attributeName = 0;
    OLECHECK(this->get_name((BSTR*)&attributeName));
    return attributeName;
  }

  VARIANT __fastcall get_value(void)
  {
    VARIANT attributeValue;
    OLECHECK(this->get_value((VARIANT*)&attributeValue));
    return attributeValue;
  }


  __property   BSTR            name = {read = get_name};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMDocumentFragment
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EFAA413-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
interface IXMLDOMDocumentFragment  : public Msxml3::IXMLDOMNode
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMCharacterData
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF84-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMCharacterData  : public Msxml3::IXMLDOMNode
{
public:
  // [109] value of the node
  virtual HRESULT STDMETHODCALLTYPE get_data(BSTR* data/*[out,retval]*/) = 0;
  // [109] value of the node
  virtual HRESULT STDMETHODCALLTYPE set_data(BSTR data/*[in]*/) = 0;
  // [110] number of characters in value
  virtual HRESULT STDMETHODCALLTYPE get_length(long* dataLength/*[out,retval]*/) = 0;
  // [111] retrieve substring of value
  virtual HRESULT STDMETHODCALLTYPE substringData(long offset/*[in]*/, long count/*[in]*/, 
                                                  BSTR* data/*[out,retval]*/) = 0;
  // [112] append string to value
  virtual HRESULT STDMETHODCALLTYPE appendData(BSTR data/*[in]*/) = 0;
  // [113] insert string into value
  virtual HRESULT STDMETHODCALLTYPE insertData(long offset/*[in]*/, BSTR data/*[in]*/) = 0;
  // [114] delete string within the value
  virtual HRESULT STDMETHODCALLTYPE deleteData(long offset/*[in]*/, long count/*[in]*/) = 0;
  // [115] replace string within the value
  virtual HRESULT STDMETHODCALLTYPE replaceData(long offset/*[in]*/, long count/*[in]*/, 
                                                BSTR data/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_data(void)
  {
    BSTR data = 0;
    OLECHECK(this->get_data((BSTR*)&data));
    return data;
  }

  long __fastcall get_length(void)
  {
    long dataLength;
    OLECHECK(this->get_length((long*)&dataLength));
    return dataLength;
  }

  BSTR __fastcall substringData(long offset/*[in]*/, long count/*[in]*/)
  {
    BSTR data = 0;
    OLECHECK(this->substringData(offset, count, (BSTR*)&data));
    return data;
  }


  __property   BSTR            data = {read = get_data};
  __property   long            length = {read = get_length};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMText
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF87-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMText  : public Msxml3::IXMLDOMCharacterData
{
public:
  // [123] split the text node into two text nodes at the position specified
  virtual HRESULT STDMETHODCALLTYPE splitText(long offset/*[in]*/, 
                                              Msxml3::IXMLDOMCharacterData** rightHandTextNode/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msxml3::IXMLDOMCharacterData* __fastcall splitText(long offset/*[in]*/)
  {
    Msxml3::IXMLDOMCharacterData* rightHandTextNode;
    OLECHECK(this->splitText(offset, (Msxml3::IXMLDOMCharacterData**)&rightHandTextNode));
    return rightHandTextNode;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMComment
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF88-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMComment  : public Msxml3::IXMLDOMCharacterData
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMCDATASection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8A-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMCDATASection  : public Msxml3::IXMLDOMText
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMProcessingInstruction
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF89-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMProcessingInstruction  : public Msxml3::IXMLDOMNode
{
public:
  // [127] the target
  virtual HRESULT STDMETHODCALLTYPE get_target(BSTR* name/*[out,retval]*/) = 0;
  // [128] the data
  virtual HRESULT STDMETHODCALLTYPE get_data(BSTR* value/*[out,retval]*/) = 0;
  // [128] the data
  virtual HRESULT STDMETHODCALLTYPE set_data(BSTR value/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_target(void)
  {
    BSTR name = 0;
    OLECHECK(this->get_target((BSTR*)&name));
    return name;
  }

  BSTR __fastcall get_data(void)
  {
    BSTR value = 0;
    OLECHECK(this->get_data((BSTR*)&value));
    return value;
  }


  __property   BSTR            target = {read = get_target};
  __property   BSTR            data = {read = get_data};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMEntityReference
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8E-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMEntityReference  : public Msxml3::IXMLDOMNode
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMParseError
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EFAA426-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
interface IXMLDOMParseError  : public IDispatch
{
public:
  // [0] the error code
  virtual HRESULT STDMETHODCALLTYPE get_errorCode(long* errorCode/*[out,retval]*/) = 0;
  // [179] the URL of the XML document containing the error
  virtual HRESULT STDMETHODCALLTYPE get_url(BSTR* urlString/*[out,retval]*/) = 0;
  // [180] the cause of the error
  virtual HRESULT STDMETHODCALLTYPE get_reason(BSTR* reasonString/*[out,retval]*/) = 0;
  // [181] the data where the error occurred
  virtual HRESULT STDMETHODCALLTYPE get_srcText(BSTR* sourceString/*[out,retval]*/) = 0;
  // [182] the line number in the XML document where the error occurred
  virtual HRESULT STDMETHODCALLTYPE get_line(long* lineNumber/*[out,retval]*/) = 0;
  // [183] the character position in the line containing the error
  virtual HRESULT STDMETHODCALLTYPE get_linepos(long* linePosition/*[out,retval]*/) = 0;
  // [184] the absolute file position in the XML document containing the error
  virtual HRESULT STDMETHODCALLTYPE get_filepos(long* filePosition/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_errorCode(void)
  {
    long errorCode;
    OLECHECK(this->get_errorCode((long*)&errorCode));
    return errorCode;
  }

  BSTR __fastcall get_url(void)
  {
    BSTR urlString = 0;
    OLECHECK(this->get_url((BSTR*)&urlString));
    return urlString;
  }

  BSTR __fastcall get_reason(void)
  {
    BSTR reasonString = 0;
    OLECHECK(this->get_reason((BSTR*)&reasonString));
    return reasonString;
  }

  BSTR __fastcall get_srcText(void)
  {
    BSTR sourceString = 0;
    OLECHECK(this->get_srcText((BSTR*)&sourceString));
    return sourceString;
  }

  long __fastcall get_line(void)
  {
    long lineNumber;
    OLECHECK(this->get_line((long*)&lineNumber));
    return lineNumber;
  }

  long __fastcall get_linepos(void)
  {
    long linePosition;
    OLECHECK(this->get_linepos((long*)&linePosition));
    return linePosition;
  }

  long __fastcall get_filepos(void)
  {
    long filePosition;
    OLECHECK(this->get_filepos((long*)&filePosition));
    return filePosition;
  }


  __property   long            errorCode = {read = get_errorCode};
  __property   BSTR            url = {read = get_url};
  __property   BSTR            reason = {read = get_reason};
  __property   BSTR            srcText = {read = get_srcText};
  __property   long            line = {read = get_line};
  __property   long            linepos = {read = get_linepos};
  __property   long            filepos = {read = get_filepos};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMSchemaCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {373984C8-B845-449B-91E7-45AC83036ADE}
// *********************************************************************//
interface IXMLDOMSchemaCollection  : public IDispatch
{
public:
  // [3] add a new schema
  virtual HRESULT STDMETHODCALLTYPE add(BSTR namespaceURI/*[in]*/, VARIANT var/*[in]*/) = 0;
  // [4] lookup schema by namespaceURI
  virtual HRESULT STDMETHODCALLTYPE get(BSTR namespaceURI/*[in]*/, 
                                        Msxml3::IXMLDOMNode** schemaNode/*[out,retval]*/) = 0;
  // [5] remove schema by namespaceURI
  virtual HRESULT STDMETHODCALLTYPE remove(BSTR namespaceURI/*[in]*/) = 0;
  // [6] number of schema in collection
  virtual HRESULT STDMETHODCALLTYPE get_length(long* length/*[out,retval]*/) = 0;
  // [0] Get namespaceURI for schema by index
  virtual HRESULT STDMETHODCALLTYPE get_namespaceURI(long index/*[in]*/, 
                                                     BSTR* length/*[out,retval]*/) = 0;
  // [8] copye & merge other collection into this one
  virtual HRESULT STDMETHODCALLTYPE addCollection(Msxml3::IXMLDOMSchemaCollection* otherCollection/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msxml3::IXMLDOMNode* __fastcall get(BSTR namespaceURI/*[in]*/)
  {
    Msxml3::IXMLDOMNode* schemaNode;
    OLECHECK(this->get(namespaceURI, (Msxml3::IXMLDOMNode**)&schemaNode));
    return schemaNode;
  }

  long __fastcall get_length(void)
  {
    long length;
    OLECHECK(this->get_length((long*)&length));
    return length;
  }

  BSTR __fastcall get_namespaceURI(long index/*[in]*/)
  {
    BSTR length = 0;
    OLECHECK(this->get_namespaceURI(index, (BSTR*)&length));
    return length;
  }

  LPUNKNOWN __fastcall get__newEnum(void)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->get__newEnum((LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }


  __property   long            length = {read = get_length};
  __property   LPUNKNOWN       _newEnum = {read = get__newEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMDocument2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF95-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMDocument2  : public Msxml3::IXMLDOMDocument
{
public:
  // [201] A collection of all namespaces for this document
  virtual HRESULT STDMETHODCALLTYPE get_namespaces(Msxml3::IXMLDOMSchemaCollection** namespaceCollection/*[out,retval]*/) = 0;
  // [202] The associated schema cache
  virtual HRESULT STDMETHODCALLTYPE get_schemas(VARIANT* otherCollection/*[out,retval]*/) = 0;
  // [202] The associated schema cache
  virtual HRESULT STDMETHODCALLTYPE _set_schemas(VARIANT otherCollection/*[in]*/) = 0;
  // [203] perform runtime validation on the currently loaded XML document
  virtual HRESULT STDMETHODCALLTYPE validate(Msxml3::IXMLDOMParseError** errorObj/*[out,retval]*/) = 0;
  // [204] set the value of the named property
  virtual HRESULT STDMETHODCALLTYPE setProperty(BSTR name/*[in]*/, VARIANT value/*[in]*/) = 0;
  // [205] get the value of the named property
  virtual HRESULT STDMETHODCALLTYPE getProperty(BSTR name/*[in]*/, VARIANT* value/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msxml3::IXMLDOMSchemaCollection* __fastcall get_namespaces(void)
  {
    Msxml3::IXMLDOMSchemaCollection* namespaceCollection;
    OLECHECK(this->get_namespaces((Msxml3::IXMLDOMSchemaCollection**)&namespaceCollection));
    return namespaceCollection;
  }

  VARIANT __fastcall get_schemas(void)
  {
    VARIANT otherCollection;
    OLECHECK(this->get_schemas((VARIANT*)&otherCollection));
    return otherCollection;
  }

  Msxml3::IXMLDOMParseError* __fastcall validate(void)
  {
    Msxml3::IXMLDOMParseError* errorObj;
    OLECHECK(this->validate((Msxml3::IXMLDOMParseError**)&errorObj));
    return errorObj;
  }

  VARIANT __fastcall getProperty(BSTR name/*[in]*/)
  {
    VARIANT value;
    OLECHECK(this->getProperty(name, (VARIANT*)&value));
    return value;
  }


  __property   Msxml3::IXMLDOMSchemaCollection* namespaces = {read = get_namespaces};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMNotation
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8C-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMNotation  : public Msxml3::IXMLDOMNode
{
public:
  // [136] the public ID
  virtual HRESULT STDMETHODCALLTYPE get_publicId(VARIANT* publicId/*[out,retval]*/) = 0;
  // [137] the system ID
  virtual HRESULT STDMETHODCALLTYPE get_systemId(VARIANT* systemId/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_publicId(void)
  {
    VARIANT publicId;
    OLECHECK(this->get_publicId((VARIANT*)&publicId));
    return publicId;
  }

  VARIANT __fastcall get_systemId(void)
  {
    VARIANT systemId;
    OLECHECK(this->get_systemId((VARIANT*)&systemId));
    return systemId;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMEntity
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8D-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMEntity  : public Msxml3::IXMLDOMNode
{
public:
  // [140] the public ID
  virtual HRESULT STDMETHODCALLTYPE get_publicId(VARIANT* publicId/*[out,retval]*/) = 0;
  // [141] the system ID
  virtual HRESULT STDMETHODCALLTYPE get_systemId(VARIANT* systemId/*[out,retval]*/) = 0;
  // [142] the name of the notation
  virtual HRESULT STDMETHODCALLTYPE get_notationName(BSTR* name/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_publicId(void)
  {
    VARIANT publicId;
    OLECHECK(this->get_publicId((VARIANT*)&publicId));
    return publicId;
  }

  VARIANT __fastcall get_systemId(void)
  {
    VARIANT systemId;
    OLECHECK(this->get_systemId((VARIANT*)&systemId));
    return systemId;
  }

  BSTR __fastcall get_notationName(void)
  {
    BSTR name = 0;
    OLECHECK(this->get_notationName((BSTR*)&name));
    return name;
  }


  __property   BSTR            notationName = {read = get_notationName};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXTLRuntime
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EFAA425-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
interface IXTLRuntime  : public Msxml3::IXMLDOMNode
{
public:
  virtual HRESULT STDMETHODCALLTYPE uniqueID(Msxml3::IXMLDOMNode* pNode/*[in]*/, 
                                             long* pID/*[out,retval]*/) = 0; // [187]
  virtual HRESULT STDMETHODCALLTYPE depth(Msxml3::IXMLDOMNode* pNode/*[in]*/, 
                                          long* pDepth/*[out,retval]*/) = 0; // [188]
  virtual HRESULT STDMETHODCALLTYPE childNumber(Msxml3::IXMLDOMNode* pNode/*[in]*/, 
                                                long* pNumber/*[out,retval]*/) = 0; // [189]
  virtual HRESULT STDMETHODCALLTYPE ancestorChildNumber(BSTR bstrNodeName/*[in]*/, 
                                                        Msxml3::IXMLDOMNode* pNode/*[in]*/, 
                                                        long* pNumber/*[out,retval]*/) = 0; // [190]
  virtual HRESULT STDMETHODCALLTYPE absoluteChildNumber(Msxml3::IXMLDOMNode* pNode/*[in]*/, 
                                                        long* pNumber/*[out,retval]*/) = 0; // [191]
  virtual HRESULT STDMETHODCALLTYPE formatIndex(long lIndex/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                                BSTR* pbstrFormattedString/*[out,retval]*/) = 0; // [192]
  virtual HRESULT STDMETHODCALLTYPE formatNumber(double dblNumber/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                                 BSTR* pbstrFormattedString/*[out,retval]*/) = 0; // [193]
  virtual HRESULT STDMETHODCALLTYPE formatDate(VARIANT varDate/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                               VARIANT varDestLocale/*[in,opt]*/, 
                                               BSTR* pbstrFormattedString/*[out,retval]*/) = 0; // [194]
  virtual HRESULT STDMETHODCALLTYPE formatTime(VARIANT varTime/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                               VARIANT varDestLocale/*[in,opt]*/, 
                                               BSTR* pbstrFormattedString/*[out,retval]*/) = 0; // [195]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall uniqueID(Msxml3::IXMLDOMNode* pNode/*[in]*/)
  {
    long pID;
    OLECHECK(this->uniqueID(pNode, (long*)&pID));
    return pID;
  }

  long __fastcall depth(Msxml3::IXMLDOMNode* pNode/*[in]*/)
  {
    long pDepth;
    OLECHECK(this->depth(pNode, (long*)&pDepth));
    return pDepth;
  }

  long __fastcall childNumber(Msxml3::IXMLDOMNode* pNode/*[in]*/)
  {
    long pNumber;
    OLECHECK(this->childNumber(pNode, (long*)&pNumber));
    return pNumber;
  }

  long __fastcall ancestorChildNumber(BSTR bstrNodeName/*[in]*/, Msxml3::IXMLDOMNode* pNode/*[in]*/)
  {
    long pNumber;
    OLECHECK(this->ancestorChildNumber(bstrNodeName, pNode, (long*)&pNumber));
    return pNumber;
  }

  long __fastcall absoluteChildNumber(Msxml3::IXMLDOMNode* pNode/*[in]*/)
  {
    long pNumber;
    OLECHECK(this->absoluteChildNumber(pNode, (long*)&pNumber));
    return pNumber;
  }

  BSTR __fastcall formatIndex(long lIndex/*[in]*/, BSTR bstrFormat/*[in]*/)
  {
    BSTR pbstrFormattedString = 0;
    OLECHECK(this->formatIndex(lIndex, bstrFormat, (BSTR*)&pbstrFormattedString));
    return pbstrFormattedString;
  }

  BSTR __fastcall formatNumber(double dblNumber/*[in]*/, BSTR bstrFormat/*[in]*/)
  {
    BSTR pbstrFormattedString = 0;
    OLECHECK(this->formatNumber(dblNumber, bstrFormat, (BSTR*)&pbstrFormattedString));
    return pbstrFormattedString;
  }

  BSTR __fastcall formatDate(VARIANT varDate/*[in]*/, BSTR bstrFormat/*[in]*/, 
                             VARIANT varDestLocale/*[in,opt]*/= TNoParam())
  {
    BSTR pbstrFormattedString = 0;
    OLECHECK(this->formatDate(varDate, bstrFormat, varDestLocale, (BSTR*)&pbstrFormattedString));
    return pbstrFormattedString;
  }

  BSTR __fastcall formatTime(VARIANT varTime/*[in]*/, BSTR bstrFormat/*[in]*/, 
                             VARIANT varDestLocale/*[in,opt]*/= TNoParam())
  {
    BSTR pbstrFormattedString = 0;
    OLECHECK(this->formatTime(varTime, bstrFormat, varDestLocale, (BSTR*)&pbstrFormattedString));
    return pbstrFormattedString;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXSLTemplate
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF93-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXSLTemplate  : public IDispatch
{
public:
  // [2] stylesheet to use with processors
  virtual HRESULT STDMETHODCALLTYPE _set_stylesheet(Msxml3::IXMLDOMNode* stylesheet/*[in]*/) = 0;
  // [2] stylesheet to use with processors
  virtual HRESULT STDMETHODCALLTYPE get_stylesheet(Msxml3::IXMLDOMNode** stylesheet/*[out,retval]*/) = 0;
  // [3] create a new processor object
  virtual HRESULT STDMETHODCALLTYPE createProcessor(Msxml3::IXSLProcessor** ppProcessor/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msxml3::IXMLDOMNode* __fastcall get_stylesheet(void)
  {
    Msxml3::IXMLDOMNode* stylesheet;
    OLECHECK(this->get_stylesheet((Msxml3::IXMLDOMNode**)&stylesheet));
    return stylesheet;
  }

  Msxml3::IXSLProcessor* __fastcall createProcessor(void)
  {
    Msxml3::IXSLProcessor* ppProcessor;
    OLECHECK(this->createProcessor((Msxml3::IXSLProcessor**)&ppProcessor));
    return ppProcessor;
  }


  __property   Msxml3::IXMLDOMNode* stylesheet = {read = get_stylesheet, write = _set_stylesheet};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXSLProcessor
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF92-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXSLProcessor  : public IDispatch
{
public:
  // [2] XML input tree to transform
  virtual HRESULT STDMETHODCALLTYPE set_input(VARIANT pVar/*[in]*/) = 0;
  // [2] XML input tree to transform
  virtual HRESULT STDMETHODCALLTYPE get_input(VARIANT* pVar/*[out,retval]*/) = 0;
  // [3] template object used to create this processor object
  virtual HRESULT STDMETHODCALLTYPE get_ownerTemplate(Msxml3::IXSLTemplate** ppTemplate/*[out,retval]*/) = 0;
  // [4] set XSL mode and it's namespace
  virtual HRESULT STDMETHODCALLTYPE setStartMode(BSTR mode/*[in]*/, 
                                                 BSTR namespaceURI/*[in,def,opt]*/) = 0;
  // [5] starting XSL mode
  virtual HRESULT STDMETHODCALLTYPE get_startMode(BSTR* mode/*[out,retval]*/) = 0;
  // [6] namespace of starting XSL mode
  virtual HRESULT STDMETHODCALLTYPE get_startModeURI(BSTR* namespaceURI/*[out,retval]*/) = 0;
  // [7] custom stream object for transform output
  virtual HRESULT STDMETHODCALLTYPE set_output(VARIANT pOutput/*[in]*/) = 0;
  // [7] custom stream object for transform output
  virtual HRESULT STDMETHODCALLTYPE get_output(VARIANT* pOutput/*[out,retval]*/) = 0;
  // [8] start/resume the XSL transformation process
  virtual HRESULT STDMETHODCALLTYPE transform(VARIANT_BOOL* pDone/*[out,retval]*/) = 0;
  // [9] reset state of processor and abort current transform
  virtual HRESULT STDMETHODCALLTYPE reset(void) = 0;
  // [10] current state of the processor
  virtual HRESULT STDMETHODCALLTYPE get_readyState(long* pReadyState/*[out,retval]*/) = 0;
  // [11] set <xsl:param> values
  virtual HRESULT STDMETHODCALLTYPE addParameter(BSTR baseName/*[in]*/, VARIANT parameter/*[in]*/, 
                                                 BSTR namespaceURI/*[in,def,opt]*/) = 0;
  // [12] pass object to stylesheet
  virtual HRESULT STDMETHODCALLTYPE addObject(LPDISPATCH obj/*[in]*/, BSTR namespaceURI/*[in]*/) = 0;
  // [13] current stylesheet being used
  virtual HRESULT STDMETHODCALLTYPE get_stylesheet(Msxml3::IXMLDOMNode** stylesheet/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_input(void)
  {
    VARIANT pVar;
    OLECHECK(this->get_input((VARIANT*)&pVar));
    return pVar;
  }

  Msxml3::IXSLTemplate* __fastcall get_ownerTemplate(void)
  {
    Msxml3::IXSLTemplate* ppTemplate;
    OLECHECK(this->get_ownerTemplate((Msxml3::IXSLTemplate**)&ppTemplate));
    return ppTemplate;
  }

  BSTR __fastcall get_startMode(void)
  {
    BSTR mode = 0;
    OLECHECK(this->get_startMode((BSTR*)&mode));
    return mode;
  }

  BSTR __fastcall get_startModeURI(void)
  {
    BSTR namespaceURI = 0;
    OLECHECK(this->get_startModeURI((BSTR*)&namespaceURI));
    return namespaceURI;
  }

  VARIANT __fastcall get_output(void)
  {
    VARIANT pOutput;
    OLECHECK(this->get_output((VARIANT*)&pOutput));
    return pOutput;
  }

  VARIANT_BOOL __fastcall transform(void)
  {
    VARIANT_BOOL pDone;
    OLECHECK(this->transform((VARIANT_BOOL*)&pDone));
    return pDone;
  }

  long __fastcall get_readyState(void)
  {
    long pReadyState;
    OLECHECK(this->get_readyState((long*)&pReadyState));
    return pReadyState;
  }

  Msxml3::IXMLDOMNode* __fastcall get_stylesheet(void)
  {
    Msxml3::IXMLDOMNode* stylesheet;
    OLECHECK(this->get_stylesheet((Msxml3::IXMLDOMNode**)&stylesheet));
    return stylesheet;
  }


  __property   Msxml3::IXSLTemplate* ownerTemplate = {read = get_ownerTemplate};
  __property   BSTR            startMode = {read = get_startMode};
  __property   BSTR            startModeURI = {read = get_startModeURI};
  __property   long            readyState = {read = get_readyState};
  __property   Msxml3::IXMLDOMNode* stylesheet = {read = get_stylesheet};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISAXXMLReader
// Flags:     (16) Hidden
// GUID:      {A4F96ED0-F829-476E-81C0-CDC7BD2A0802}
// *********************************************************************//
interface ISAXXMLReader  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE getFeature(unsigned_short* pwchName/*[in]*/, 
                                               VARIANT_BOOL* pvfValue/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE putFeature(unsigned_short* pwchName/*[in]*/, 
                                               VARIANT_BOOL vfValue/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getProperty(unsigned_short* pwchName/*[in]*/, 
                                                VARIANT* pvarValue/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE putProperty(unsigned_short* pwchName/*[in]*/, 
                                                VARIANT varValue/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getEntityResolver(Msxml3::ISAXEntityResolver** ppResolver/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE putEntityResolver(Msxml3::ISAXEntityResolver* pResolver/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getContentHandler(Msxml3::ISAXContentHandler** ppHandler/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE putContentHandler(Msxml3::ISAXContentHandler* pHandler/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getDTDHandler(Msxml3::ISAXDTDHandler** ppHandler/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE putDTDHandler(Msxml3::ISAXDTDHandler* pHandler/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getErrorHandler(Msxml3::ISAXErrorHandler** ppHandler/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE putErrorHandler(Msxml3::ISAXErrorHandler* pHandler/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getBaseURL(unsigned_short** ppwchBaseUrl/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE putBaseURL(unsigned_short* pwchBaseUrl/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getSecureBaseURL(unsigned_short** ppwchSecureBaseUrl/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE putSecureBaseURL(unsigned_short* pwchSecureBaseUrl/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE parse(VARIANT varInput/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE parseURL(unsigned_short* pwchUrl/*[in]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: ISAXEntityResolver
// Flags:     (16) Hidden
// GUID:      {99BCA7BD-E8C4-4D5F-A0CF-6D907901FF07}
// *********************************************************************//
interface ISAXEntityResolver  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE resolveEntity(unsigned_short* pwchPublicId/*[in]*/, 
                                                  unsigned_short* pwchSystemId/*[in]*/, 
                                                  VARIANT* pvarInput/*[out,retval]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: ISAXContentHandler
// Flags:     (16) Hidden
// GUID:      {1545CDFA-9E4E-4497-A8A4-2BF7D0112C44}
// *********************************************************************//
interface ISAXContentHandler  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE putDocumentLocator(Msxml3::ISAXLocator* pLocator/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE startDocument(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE endDocument(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE startPrefixMapping(unsigned_short* pwchPrefix/*[in]*/, 
                                                       int cchPrefix/*[in]*/, 
                                                       unsigned_short* pwchUri/*[in]*/, 
                                                       int cchUri/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE endPrefixMapping(unsigned_short* pwchPrefix/*[in]*/, 
                                                     int cchPrefix/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE startElement(unsigned_short* pwchNamespaceUri/*[in]*/, 
                                                 int cchNamespaceUri/*[in]*/, 
                                                 unsigned_short* pwchLocalName/*[in]*/, 
                                                 int cchLocalName/*[in]*/, 
                                                 unsigned_short* pwchQName/*[in]*/, 
                                                 int cchQName/*[in]*/, 
                                                 Msxml3::ISAXAttributes* pAttributes/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE endElement(unsigned_short* pwchNamespaceUri/*[in]*/, 
                                               int cchNamespaceUri/*[in]*/, 
                                               unsigned_short* pwchLocalName/*[in]*/, 
                                               int cchLocalName/*[in]*/, 
                                               unsigned_short* pwchQName/*[in]*/, 
                                               int cchQName/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE characters(unsigned_short* pwchChars/*[in]*/, 
                                               int cchChars/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ignorableWhitespace(unsigned_short* pwchChars/*[in]*/, 
                                                        int cchChars/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE processingInstruction(unsigned_short* pwchTarget/*[in]*/, 
                                                          int cchTarget/*[in]*/, 
                                                          unsigned_short* pwchData/*[in]*/, 
                                                          int cchData/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE skippedEntity(unsigned_short* pwchName/*[in]*/, 
                                                  int cchName/*[in]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: ISAXLocator
// Flags:     (16) Hidden
// GUID:      {9B7E472A-0DE4-4640-BFF3-84D38A051C31}
// *********************************************************************//
interface ISAXLocator  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE getColumnNumber(int* pnColumn/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getLineNumber(int* pnLine/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getPublicId(unsigned_short** ppwchPublicId/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getSystemId(unsigned_short** ppwchSystemId/*[out,retval]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: ISAXAttributes
// Flags:     (16) Hidden
// GUID:      {F078ABE1-45D2-4832-91EA-4466CE2F25C9}
// *********************************************************************//
interface ISAXAttributes  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE getLength(int* pnLength/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getURI(int nIndex/*[in]*/, unsigned_short** ppwchUri/*[out]*/, 
                                           int* pcchUri/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getLocalName(int nIndex/*[in]*/, 
                                                 unsigned_short** ppwchLocalName/*[out]*/, 
                                                 int* pcchLocalName/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getQName(int nIndex/*[in]*/, 
                                             unsigned_short** ppwchQName/*[out]*/, 
                                             int* pcchQName/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getName(int nIndex/*[in]*/, unsigned_short** ppwchUri/*[out]*/, 
                                            int* pcchUri/*[out]*/, 
                                            unsigned_short** ppwchLocalName/*[out]*/, 
                                            int* pcchLocalName/*[out]*/, 
                                            unsigned_short** ppwchQName/*[out]*/, 
                                            int* pcchQName/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getIndexFromName(unsigned_short* pwchUri/*[in]*/, 
                                                     int cchUri/*[in]*/, 
                                                     unsigned_short* pwchLocalName/*[in]*/, 
                                                     int cchLocalName/*[in]*/, 
                                                     int* pnIndex/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getIndexFromQName(unsigned_short* pwchQName/*[in]*/, 
                                                      int cchQName/*[in]*/, 
                                                      int* pnIndex/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getType(int nIndex/*[in]*/, unsigned_short** ppwchType/*[out]*/, 
                                            int* pcchType/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getTypeFromName(unsigned_short* pwchUri/*[in]*/, 
                                                    int cchUri/*[in]*/, 
                                                    unsigned_short* pwchLocalName/*[in]*/, 
                                                    int cchLocalName/*[in]*/, 
                                                    unsigned_short** ppwchType/*[out]*/, 
                                                    int* pcchType/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getTypeFromQName(unsigned_short* pwchQName/*[in]*/, 
                                                     int cchQName/*[in]*/, 
                                                     unsigned_short** ppwchType/*[out]*/, 
                                                     int* pcchType/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getValue(int nIndex/*[in]*/, 
                                             unsigned_short** ppwchValue/*[out]*/, 
                                             int* pcchValue/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getValueFromName(unsigned_short* pwchUri/*[in]*/, 
                                                     int cchUri/*[in]*/, 
                                                     unsigned_short* pwchLocalName/*[in]*/, 
                                                     int cchLocalName/*[in]*/, 
                                                     unsigned_short** ppwchValue/*[out]*/, 
                                                     int* pcchValue/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE getValueFromQName(unsigned_short* pwchQName/*[in]*/, 
                                                      int cchQName/*[in]*/, 
                                                      unsigned_short** ppwchValue/*[out]*/, 
                                                      int* pcchValue/*[out]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: ISAXDTDHandler
// Flags:     (16) Hidden
// GUID:      {E15C1BAF-AFB3-4D60-8C36-19A8C45DEFED}
// *********************************************************************//
interface ISAXDTDHandler  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE notationDecl(unsigned_short* pwchName/*[in]*/, 
                                                 int cchName/*[in]*/, 
                                                 unsigned_short* pwchPublicId/*[in]*/, 
                                                 int cchPublicId/*[in]*/, 
                                                 unsigned_short* pwchSystemId/*[in]*/, 
                                                 int cchSystemId/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE unparsedEntityDecl(unsigned_short* pwchName/*[in]*/, 
                                                       int cchName/*[in]*/, 
                                                       unsigned_short* pwchPublicId/*[in]*/, 
                                                       int cchPublicId/*[in]*/, 
                                                       unsigned_short* pwchSystemId/*[in]*/, 
                                                       int cchSystemId/*[in]*/, 
                                                       unsigned_short* pwchNotationName/*[in]*/, 
                                                       int cchNotationName/*[in]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: ISAXErrorHandler
// Flags:     (16) Hidden
// GUID:      {A60511C4-CCF5-479E-98A3-DC8DC545B7D0}
// *********************************************************************//
interface ISAXErrorHandler  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE error(Msxml3::ISAXLocator* pLocator/*[in]*/, 
                                          unsigned_short* pwchErrorMessage/*[in]*/, 
                                          HRESULT hrErrorCode/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE fatalError(Msxml3::ISAXLocator* pLocator/*[in]*/, 
                                               unsigned_short* pwchErrorMessage/*[in]*/, 
                                               HRESULT hrErrorCode/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ignorableWarning(Msxml3::ISAXLocator* pLocator/*[in]*/, 
                                                     unsigned_short* pwchErrorMessage/*[in]*/, 
                                                     HRESULT hrErrorCode/*[in]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: ISAXXMLFilter
// Flags:     (16) Hidden
// GUID:      {70409222-CA09-4475-ACB8-40312FE8D145}
// *********************************************************************//
interface ISAXXMLFilter  : public Msxml3::ISAXXMLReader
{
public:
  virtual HRESULT STDMETHODCALLTYPE getParent(Msxml3::ISAXXMLReader** ppReader/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE putParent(Msxml3::ISAXXMLReader* pReader/*[in]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: ISAXLexicalHandler
// Flags:     (16) Hidden
// GUID:      {7F85D5F5-47A8-4497-BDA5-84BA04819EA6}
// *********************************************************************//
interface ISAXLexicalHandler  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE startDTD(unsigned_short* pwchName/*[in]*/, int cchName/*[in]*/, 
                                             unsigned_short* pwchPublicId/*[in]*/, 
                                             int cchPublicId/*[in]*/, 
                                             unsigned_short* pwchSystemId/*[in]*/, 
                                             int cchSystemId/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE endDTD(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE startEntity(unsigned_short* pwchName/*[in]*/, 
                                                int cchName/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE endEntity(unsigned_short* pwchName/*[in]*/, int cchName/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE startCDATA(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE endCDATA(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE comment(unsigned_short* pwchChars/*[in]*/, int cchChars/*[in]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: ISAXDeclHandler
// Flags:     (16) Hidden
// GUID:      {862629AC-771A-47B2-8337-4E6843C1BE90}
// *********************************************************************//
interface ISAXDeclHandler  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE elementDecl(unsigned_short* pwchName/*[in]*/, 
                                                int cchName/*[in]*/, 
                                                unsigned_short* pwchModel/*[in]*/, 
                                                int cchModel/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE attributeDecl(unsigned_short* pwchElementName/*[in]*/, 
                                                  int cchElementName/*[in]*/, 
                                                  unsigned_short* pwchAttributeName/*[in]*/, 
                                                  int cchAttributeName/*[in]*/, 
                                                  unsigned_short* pwchType/*[in]*/, 
                                                  int cchType/*[in]*/, 
                                                  unsigned_short* pwchValueDefault/*[in]*/, 
                                                  int cchValueDefault/*[in]*/, 
                                                  unsigned_short* pwchValue/*[in]*/, 
                                                  int cchValue/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE internalEntityDecl(unsigned_short* pwchName/*[in]*/, 
                                                       int cchName/*[in]*/, 
                                                       unsigned_short* pwchValue/*[in]*/, 
                                                       int cchValue/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE externalEntityDecl(unsigned_short* pwchName/*[in]*/, 
                                                       int cchName/*[in]*/, 
                                                       unsigned_short* pwchPublicId/*[in]*/, 
                                                       int cchPublicId/*[in]*/, 
                                                       unsigned_short* pwchSystemId/*[in]*/, 
                                                       int cchSystemId/*[in]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IVBSAXXMLReader
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8C033CAA-6CD6-4F73-B728-4531AF74945F}
// *********************************************************************//
interface IVBSAXXMLReader  : public IDispatch
{
public:
  // [1282] Look up the value of a feature.
  virtual HRESULT STDMETHODCALLTYPE getFeature(BSTR strName/*[in]*/, 
                                               VARIANT_BOOL* fValue/*[out,retval]*/) = 0;
  // [1283] Set the state of a feature.
  virtual HRESULT STDMETHODCALLTYPE putFeature(BSTR strName/*[in]*/, VARIANT_BOOL fValue/*[in]*/) = 0;
  // [1284] Look up the value of a property.
  virtual HRESULT STDMETHODCALLTYPE getProperty(BSTR strName/*[in]*/, 
                                                VARIANT* varValue/*[out,retval]*/) = 0;
  // [1285] Set the value of a property.
  virtual HRESULT STDMETHODCALLTYPE putProperty(BSTR strName/*[in]*/, VARIANT varValue/*[in]*/) = 0;
  // [1286] Allow an application to register an entity resolver or look up the current entity resolver.
  virtual HRESULT STDMETHODCALLTYPE get_entityResolver(Msxml3::IVBSAXEntityResolver** oResolver/*[out,retval]*/) = 0;
  // [1286] Allow an application to register an entity resolver or look up the current entity resolver.
  virtual HRESULT STDMETHODCALLTYPE _set_entityResolver(Msxml3::IVBSAXEntityResolver* oResolver/*[in]*/) = 0;
  // [1287] Allow an application to register a content event handler or look up the current content event handler.
  virtual HRESULT STDMETHODCALLTYPE get_contentHandler(Msxml3::IVBSAXContentHandler** oHandler/*[out,retval]*/) = 0;
  // [1287] Allow an application to register a content event handler or look up the current content event handler.
  virtual HRESULT STDMETHODCALLTYPE _set_contentHandler(Msxml3::IVBSAXContentHandler* oHandler/*[in]*/) = 0;
  // [1288] Allow an application to register a DTD event handler or look up the current DTD event handler.
  virtual HRESULT STDMETHODCALLTYPE get_dtdHandler(Msxml3::IVBSAXDTDHandler** oHandler/*[out,retval]*/) = 0;
  // [1288] Allow an application to register a DTD event handler or look up the current DTD event handler.
  virtual HRESULT STDMETHODCALLTYPE _set_dtdHandler(Msxml3::IVBSAXDTDHandler* oHandler/*[in]*/) = 0;
  // [1289] Allow an application to register an error event handler or look up the current error event handler.
  virtual HRESULT STDMETHODCALLTYPE get_errorHandler(Msxml3::IVBSAXErrorHandler** oHandler/*[out,retval]*/) = 0;
  // [1289] Allow an application to register an error event handler or look up the current error event handler.
  virtual HRESULT STDMETHODCALLTYPE _set_errorHandler(Msxml3::IVBSAXErrorHandler* oHandler/*[in]*/) = 0;
  // [1290] Set or get the base URL for the document.
  virtual HRESULT STDMETHODCALLTYPE get_baseURL(BSTR* strBaseURL/*[out,retval]*/) = 0;
  // [1290] Set or get the base URL for the document.
  virtual HRESULT STDMETHODCALLTYPE set_baseURL(BSTR strBaseURL/*[in]*/) = 0;
  // [1291] Set or get the secure base URL for the document.
  virtual HRESULT STDMETHODCALLTYPE get_secureBaseURL(BSTR* strSecureBaseURL/*[out,retval]*/) = 0;
  // [1291] Set or get the secure base URL for the document.
  virtual HRESULT STDMETHODCALLTYPE set_secureBaseURL(BSTR strSecureBaseURL/*[in]*/) = 0;
  // [1292] Parse an XML document.
  virtual HRESULT STDMETHODCALLTYPE parse(VARIANT varInput/*[in]*/) = 0;
  // [1293] Parse an XML document from a system identifier (URI).
  virtual HRESULT STDMETHODCALLTYPE parseURL(BSTR strURL/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall getFeature(BSTR strName/*[in]*/)
  {
    VARIANT_BOOL fValue;
    OLECHECK(this->getFeature(strName, (VARIANT_BOOL*)&fValue));
    return fValue;
  }

  VARIANT __fastcall getProperty(BSTR strName/*[in]*/)
  {
    VARIANT varValue;
    OLECHECK(this->getProperty(strName, (VARIANT*)&varValue));
    return varValue;
  }

  Msxml3::IVBSAXEntityResolver* __fastcall get_entityResolver(void)
  {
    Msxml3::IVBSAXEntityResolver* oResolver;
    OLECHECK(this->get_entityResolver((Msxml3::IVBSAXEntityResolver**)&oResolver));
    return oResolver;
  }

  Msxml3::IVBSAXContentHandler* __fastcall get_contentHandler(void)
  {
    Msxml3::IVBSAXContentHandler* oHandler;
    OLECHECK(this->get_contentHandler((Msxml3::IVBSAXContentHandler**)&oHandler));
    return oHandler;
  }

  Msxml3::IVBSAXDTDHandler* __fastcall get_dtdHandler(void)
  {
    Msxml3::IVBSAXDTDHandler* oHandler;
    OLECHECK(this->get_dtdHandler((Msxml3::IVBSAXDTDHandler**)&oHandler));
    return oHandler;
  }

  Msxml3::IVBSAXErrorHandler* __fastcall get_errorHandler(void)
  {
    Msxml3::IVBSAXErrorHandler* oHandler;
    OLECHECK(this->get_errorHandler((Msxml3::IVBSAXErrorHandler**)&oHandler));
    return oHandler;
  }

  BSTR __fastcall get_baseURL(void)
  {
    BSTR strBaseURL = 0;
    OLECHECK(this->get_baseURL((BSTR*)&strBaseURL));
    return strBaseURL;
  }

  BSTR __fastcall get_secureBaseURL(void)
  {
    BSTR strSecureBaseURL = 0;
    OLECHECK(this->get_secureBaseURL((BSTR*)&strSecureBaseURL));
    return strSecureBaseURL;
  }


  __property   Msxml3::IVBSAXEntityResolver* entityResolver = {read = get_entityResolver, write = _set_entityResolver};
  __property   Msxml3::IVBSAXContentHandler* contentHandler = {read = get_contentHandler, write = _set_contentHandler};
  __property   Msxml3::IVBSAXDTDHandler* dtdHandler = {read = get_dtdHandler, write = _set_dtdHandler};
  __property   Msxml3::IVBSAXErrorHandler* errorHandler = {read = get_errorHandler, write = _set_errorHandler};
  __property   BSTR            baseURL = {read = get_baseURL};
  __property   BSTR            secureBaseURL = {read = get_secureBaseURL};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVBSAXEntityResolver
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0C05D096-F45B-4ACA-AD1A-AA0BC25518DC}
// *********************************************************************//
interface IVBSAXEntityResolver  : public IDispatch
{
public:
  // [1319] Allow the application to resolve external entities.
  virtual HRESULT STDMETHODCALLTYPE resolveEntity(BSTR* strPublicId/*[in,out]*/, 
                                                  BSTR* strSystemId/*[in,out]*/, 
                                                  VARIANT* varInput/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall resolveEntity(BSTR* strPublicId/*[in,out]*/, BSTR* strSystemId/*[in,out]*/)
  {
    VARIANT varInput;
    OLECHECK(this->resolveEntity(strPublicId, strSystemId, (VARIANT*)&varInput));
    return varInput;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVBSAXContentHandler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2ED7290A-4DD5-4B46-BB26-4E4155E77FAA}
// *********************************************************************//
interface IVBSAXContentHandler  : public IDispatch
{
public:
  // [1322] Receive an object for locating the origin of SAX document events.
  virtual HRESULT STDMETHODCALLTYPE _set_documentLocator(Msxml3::IVBSAXLocator* Param1/*[in]*/) = 0;
  // [1323] Receive notification of the beginning of a document.
  virtual HRESULT STDMETHODCALLTYPE startDocument(void) = 0;
  // [1324] Receive notification of the end of a document.
  virtual HRESULT STDMETHODCALLTYPE endDocument(void) = 0;
  // [1325] Begin the scope of a prefix-URI Namespace mapping.
  virtual HRESULT STDMETHODCALLTYPE startPrefixMapping(BSTR* strPrefix/*[in,out]*/, 
                                                       BSTR* strURI/*[in,out]*/) = 0;
  // [1326] End the scope of a prefix-URI mapping.
  virtual HRESULT STDMETHODCALLTYPE endPrefixMapping(BSTR* strPrefix/*[in,out]*/) = 0;
  // [1327] Receive notification of the beginning of an element.
  virtual HRESULT STDMETHODCALLTYPE startElement(BSTR* strNamespaceURI/*[in,out]*/, 
                                                 BSTR* strLocalName/*[in,out]*/, 
                                                 BSTR* strQName/*[in,out]*/, 
                                                 Msxml3::IVBSAXAttributes* oAttributes/*[in]*/) = 0;
  // [1328] Receive notification of the end of an element.
  virtual HRESULT STDMETHODCALLTYPE endElement(BSTR* strNamespaceURI/*[in,out]*/, 
                                               BSTR* strLocalName/*[in,out]*/, 
                                               BSTR* strQName/*[in,out]*/) = 0;
  // [1329] Receive notification of character data.
  virtual HRESULT STDMETHODCALLTYPE characters(BSTR* strChars/*[in,out]*/) = 0;
  // [1330] Receive notification of ignorable whitespace in element content.
  virtual HRESULT STDMETHODCALLTYPE ignorableWhitespace(BSTR* strChars/*[in,out]*/) = 0;
  // [1331] Receive notification of a processing instruction.
  virtual HRESULT STDMETHODCALLTYPE processingInstruction(BSTR* strTarget/*[in,out]*/, 
                                                          BSTR* strData/*[in,out]*/) = 0;
  // [1332] Receive notification of a skipped entity.
  virtual HRESULT STDMETHODCALLTYPE skippedEntity(BSTR* strName/*[in,out]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)


  __property   Msxml3::IVBSAXLocator* documentLocator = {write = _set_documentLocator};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVBSAXLocator
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {796E7AC5-5AA2-4EFF-ACAD-3FAAF01A3288}
// *********************************************************************//
interface IVBSAXLocator  : public IDispatch
{
public:
  // [1313] Get the column number where the current document event ends.
  virtual HRESULT STDMETHODCALLTYPE get_columnNumber(int* nColumn/*[out,retval]*/) = 0;
  // [1314] Get the line number where the current document event ends.
  virtual HRESULT STDMETHODCALLTYPE get_lineNumber(int* nLine/*[out,retval]*/) = 0;
  // [1315] Get the public identifier for the current document event.
  virtual HRESULT STDMETHODCALLTYPE get_publicId(BSTR* strPublicId/*[out,retval]*/) = 0;
  // [1316] Get the system identifier for the current document event.
  virtual HRESULT STDMETHODCALLTYPE get_systemId(BSTR* strSystemId/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_columnNumber(void)
  {
    int nColumn;
    OLECHECK(this->get_columnNumber((int*)&nColumn));
    return nColumn;
  }

  int __fastcall get_lineNumber(void)
  {
    int nLine;
    OLECHECK(this->get_lineNumber((int*)&nLine));
    return nLine;
  }

  BSTR __fastcall get_publicId(void)
  {
    BSTR strPublicId = 0;
    OLECHECK(this->get_publicId((BSTR*)&strPublicId));
    return strPublicId;
  }

  BSTR __fastcall get_systemId(void)
  {
    BSTR strSystemId = 0;
    OLECHECK(this->get_systemId((BSTR*)&strSystemId));
    return strSystemId;
  }


  __property   int             columnNumber = {read = get_columnNumber};
  __property   int             lineNumber = {read = get_lineNumber};
  __property   BSTR            publicId = {read = get_publicId};
  __property   BSTR            systemId = {read = get_systemId};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVBSAXAttributes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10DC0586-132B-4CAC-8BB3-DB00AC8B7EE0}
// *********************************************************************//
interface IVBSAXAttributes  : public IDispatch
{
public:
  // [1344] Get the number of attributes in the list.
  virtual HRESULT STDMETHODCALLTYPE get_length(int* nLength/*[out,retval]*/) = 0;
  // [1345] Look up an attribute's Namespace URI by index.
  virtual HRESULT STDMETHODCALLTYPE getURI(int nIndex/*[in]*/, BSTR* strURI/*[out,retval]*/) = 0;
  // [1346] Look up an attribute's local name by index.
  virtual HRESULT STDMETHODCALLTYPE getLocalName(int nIndex/*[in]*/, 
                                                 BSTR* strLocalName/*[out,retval]*/) = 0;
  // [1347] Look up an attribute's XML 1.0 qualified name by index.
  virtual HRESULT STDMETHODCALLTYPE getQName(int nIndex/*[in]*/, BSTR* strQName/*[out,retval]*/) = 0;
  // [1348] Look up the index of an attribute by Namespace name.
  virtual HRESULT STDMETHODCALLTYPE getIndexFromName(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/, 
                                                     int* nIndex/*[out,retval]*/) = 0;
  // [1349] Look up the index of an attribute by XML 1.0 qualified name.
  virtual HRESULT STDMETHODCALLTYPE getIndexFromQName(BSTR strQName/*[in]*/, 
                                                      int* nIndex/*[out,retval]*/) = 0;
  // [1350] Look up an attribute's type by index.
  virtual HRESULT STDMETHODCALLTYPE getType(int nIndex/*[in]*/, BSTR* strType/*[out,retval]*/) = 0;
  // [1351] Look up an attribute's type by Namespace name.
  virtual HRESULT STDMETHODCALLTYPE getTypeFromName(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/, 
                                                    BSTR* strType/*[out,retval]*/) = 0;
  // [1352] Look up an attribute's type by XML 1.0 qualified name.
  virtual HRESULT STDMETHODCALLTYPE getTypeFromQName(BSTR strQName/*[in]*/, 
                                                     BSTR* strType/*[out,retval]*/) = 0;
  // [1353] Look up an attribute's value by index.
  virtual HRESULT STDMETHODCALLTYPE getValue(int nIndex/*[in]*/, BSTR* strValue/*[out,retval]*/) = 0;
  // [1354] Look up an attribute's value by Namespace name.
  virtual HRESULT STDMETHODCALLTYPE getValueFromName(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/, 
                                                     BSTR* strValue/*[out,retval]*/) = 0;
  // [1355] Look up an attribute's value by XML 1.0 qualified name.
  virtual HRESULT STDMETHODCALLTYPE getValueFromQName(BSTR strQName/*[in]*/, 
                                                      BSTR* strValue/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_length(void)
  {
    int nLength;
    OLECHECK(this->get_length((int*)&nLength));
    return nLength;
  }

  BSTR __fastcall getURI(int nIndex/*[in]*/)
  {
    BSTR strURI = 0;
    OLECHECK(this->getURI(nIndex, (BSTR*)&strURI));
    return strURI;
  }

  BSTR __fastcall getLocalName(int nIndex/*[in]*/)
  {
    BSTR strLocalName = 0;
    OLECHECK(this->getLocalName(nIndex, (BSTR*)&strLocalName));
    return strLocalName;
  }

  BSTR __fastcall getQName(int nIndex/*[in]*/)
  {
    BSTR strQName = 0;
    OLECHECK(this->getQName(nIndex, (BSTR*)&strQName));
    return strQName;
  }

  int __fastcall getIndexFromName(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/)
  {
    int nIndex;
    OLECHECK(this->getIndexFromName(strURI, strLocalName, (int*)&nIndex));
    return nIndex;
  }

  int __fastcall getIndexFromQName(BSTR strQName/*[in]*/)
  {
    int nIndex;
    OLECHECK(this->getIndexFromQName(strQName, (int*)&nIndex));
    return nIndex;
  }

  BSTR __fastcall getType(int nIndex/*[in]*/)
  {
    BSTR strType = 0;
    OLECHECK(this->getType(nIndex, (BSTR*)&strType));
    return strType;
  }

  BSTR __fastcall getTypeFromName(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/)
  {
    BSTR strType = 0;
    OLECHECK(this->getTypeFromName(strURI, strLocalName, (BSTR*)&strType));
    return strType;
  }

  BSTR __fastcall getTypeFromQName(BSTR strQName/*[in]*/)
  {
    BSTR strType = 0;
    OLECHECK(this->getTypeFromQName(strQName, (BSTR*)&strType));
    return strType;
  }

  BSTR __fastcall getValue(int nIndex/*[in]*/)
  {
    BSTR strValue = 0;
    OLECHECK(this->getValue(nIndex, (BSTR*)&strValue));
    return strValue;
  }

  BSTR __fastcall getValueFromName(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/)
  {
    BSTR strValue = 0;
    OLECHECK(this->getValueFromName(strURI, strLocalName, (BSTR*)&strValue));
    return strValue;
  }

  BSTR __fastcall getValueFromQName(BSTR strQName/*[in]*/)
  {
    BSTR strValue = 0;
    OLECHECK(this->getValueFromQName(strQName, (BSTR*)&strValue));
    return strValue;
  }


  __property   int             length = {read = get_length};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVBSAXDTDHandler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {24FB3297-302D-4620-BA39-3A732D850558}
// *********************************************************************//
interface IVBSAXDTDHandler  : public IDispatch
{
public:
  // [1335] Receive notification of a notation declaration event.
  virtual HRESULT STDMETHODCALLTYPE notationDecl(BSTR* strName/*[in,out]*/, 
                                                 BSTR* strPublicId/*[in,out]*/, 
                                                 BSTR* strSystemId/*[in,out]*/) = 0;
  // [1336] Receive notification of an unparsed entity declaration event.
  virtual HRESULT STDMETHODCALLTYPE unparsedEntityDecl(BSTR* strName/*[in,out]*/, 
                                                       BSTR* strPublicId/*[in,out]*/, 
                                                       BSTR* strSystemId/*[in,out]*/, 
                                                       BSTR* strNotationName/*[in,out]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVBSAXErrorHandler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D963D3FE-173C-4862-9095-B92F66995F52}
// *********************************************************************//
interface IVBSAXErrorHandler  : public IDispatch
{
public:
  // [1339] Receive notification of a recoverable error.
  virtual HRESULT STDMETHODCALLTYPE error(Msxml3::IVBSAXLocator* oLocator/*[in]*/, 
                                          BSTR* strErrorMessage/*[in,out]*/, long nErrorCode/*[in]*/) = 0;
  // [1340] Receive notification of a non-recoverable error.
  virtual HRESULT STDMETHODCALLTYPE fatalError(Msxml3::IVBSAXLocator* oLocator/*[in]*/, 
                                               BSTR* strErrorMessage/*[in,out]*/, 
                                               long nErrorCode/*[in]*/) = 0;
  // [1341] Receive notification of an ignorable warning.
  virtual HRESULT STDMETHODCALLTYPE ignorableWarning(Msxml3::IVBSAXLocator* oLocator/*[in]*/, 
                                                     BSTR* strErrorMessage/*[in,out]*/, 
                                                     long nErrorCode/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVBSAXXMLFilter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1299EB1B-5B88-433E-82DE-82CA75AD4E04}
// *********************************************************************//
interface IVBSAXXMLFilter  : public IDispatch
{
public:
  // [1309] Set or get the parent reader
  virtual HRESULT STDMETHODCALLTYPE get_parent(Msxml3::IVBSAXXMLReader** oReader/*[out,retval]*/) = 0;
  // [1309] Set or get the parent reader
  virtual HRESULT STDMETHODCALLTYPE _set_parent(Msxml3::IVBSAXXMLReader* oReader/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msxml3::IVBSAXXMLReader* __fastcall get_parent(void)
  {
    Msxml3::IVBSAXXMLReader* oReader;
    OLECHECK(this->get_parent((Msxml3::IVBSAXXMLReader**)&oReader));
    return oReader;
  }


  __property   Msxml3::IVBSAXXMLReader* parent = {read = get_parent, write = _set_parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVBSAXLexicalHandler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {032AAC35-8C0E-4D9D-979F-E3B702935576}
// *********************************************************************//
interface IVBSAXLexicalHandler  : public IDispatch
{
public:
  // [1358] Report the start of DTD declarations, if any.
  virtual HRESULT STDMETHODCALLTYPE startDTD(BSTR* strName/*[in,out]*/, 
                                             BSTR* strPublicId/*[in,out]*/, 
                                             BSTR* strSystemId/*[in,out]*/) = 0;
  // [1359] Report the end of DTD declarations.
  virtual HRESULT STDMETHODCALLTYPE endDTD(void) = 0;
  // [1360] Report the beginning of some internal and external XML entities.
  virtual HRESULT STDMETHODCALLTYPE startEntity(BSTR* strName/*[in,out]*/) = 0;
  // [1361] Report the end of an entity.
  virtual HRESULT STDMETHODCALLTYPE endEntity(BSTR* strName/*[in,out]*/) = 0;
  // [1362] Report the start of a CDATA section.
  virtual HRESULT STDMETHODCALLTYPE startCDATA(void) = 0;
  // [1363] Report the end of a CDATA section.
  virtual HRESULT STDMETHODCALLTYPE endCDATA(void) = 0;
  // [1364] Report an XML comment anywhere in the document.
  virtual HRESULT STDMETHODCALLTYPE comment(BSTR* strChars/*[in,out]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVBSAXDeclHandler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E8917260-7579-4BE1-B5DD-7AFBFA6F077B}
// *********************************************************************//
interface IVBSAXDeclHandler  : public IDispatch
{
public:
  // [1367] Report an element type declaration.
  virtual HRESULT STDMETHODCALLTYPE elementDecl(BSTR* strName/*[in,out]*/, 
                                                BSTR* strModel/*[in,out]*/) = 0;
  // [1368] Report an attribute type declaration.
  virtual HRESULT STDMETHODCALLTYPE attributeDecl(BSTR* strElementName/*[in,out]*/, 
                                                  BSTR* strAttributeName/*[in,out]*/, 
                                                  BSTR* strType/*[in,out]*/, 
                                                  BSTR* strValueDefault/*[in,out]*/, 
                                                  BSTR* strValue/*[in,out]*/) = 0;
  // [1369] Report an internal entity declaration.
  virtual HRESULT STDMETHODCALLTYPE internalEntityDecl(BSTR* strName/*[in,out]*/, 
                                                       BSTR* strValue/*[in,out]*/) = 0;
  // [1370] Report a parsed external entity declaration.
  virtual HRESULT STDMETHODCALLTYPE externalEntityDecl(BSTR* strName/*[in,out]*/, 
                                                       BSTR* strPublicId/*[in,out]*/, 
                                                       BSTR* strSystemId/*[in,out]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMXWriter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4D7FF4BA-1565-4EA8-94E1-6E724A46F98D}
// *********************************************************************//
interface IMXWriter  : public IDispatch
{
public:
  // [1385] Set or get the output.
  virtual HRESULT STDMETHODCALLTYPE set_output(VARIANT varDestination/*[in]*/) = 0;
  // [1385] Set or get the output.
  virtual HRESULT STDMETHODCALLTYPE get_output(VARIANT* varDestination/*[out,retval]*/) = 0;
  // [1387] Set or get the output encoding.
  virtual HRESULT STDMETHODCALLTYPE set_encoding(BSTR strEncoding/*[in]*/) = 0;
  // [1387] Set or get the output encoding.
  virtual HRESULT STDMETHODCALLTYPE get_encoding(BSTR* strEncoding/*[out,retval]*/) = 0;
  // [1388] Determine whether or not to write the byte order mark
  virtual HRESULT STDMETHODCALLTYPE set_byteOrderMark(VARIANT_BOOL fWriteByteOrderMark/*[in]*/) = 0;
  // [1388] Determine whether or not to write the byte order mark
  virtual HRESULT STDMETHODCALLTYPE get_byteOrderMark(VARIANT_BOOL* fWriteByteOrderMark/*[out,retval]*/) = 0;
  // [1389] Enable or disable auto indent mode.
  virtual HRESULT STDMETHODCALLTYPE set_indent(VARIANT_BOOL fIndentMode/*[in]*/) = 0;
  // [1389] Enable or disable auto indent mode.
  virtual HRESULT STDMETHODCALLTYPE get_indent(VARIANT_BOOL* fIndentMode/*[out,retval]*/) = 0;
  // [1390] Set or get the standalone document declaration.
  virtual HRESULT STDMETHODCALLTYPE set_standalone(VARIANT_BOOL fValue/*[in]*/) = 0;
  // [1390] Set or get the standalone document declaration.
  virtual HRESULT STDMETHODCALLTYPE get_standalone(VARIANT_BOOL* fValue/*[out,retval]*/) = 0;
  // [1391] Determine whether or not to omit the XML declaration.
  virtual HRESULT STDMETHODCALLTYPE set_omitXMLDeclaration(VARIANT_BOOL fValue/*[in]*/) = 0;
  // [1391] Determine whether or not to omit the XML declaration.
  virtual HRESULT STDMETHODCALLTYPE get_omitXMLDeclaration(VARIANT_BOOL* fValue/*[out,retval]*/) = 0;
  // [1392] Set or get the xml version info.
  virtual HRESULT STDMETHODCALLTYPE set_version(BSTR strVersion/*[in]*/) = 0;
  // [1392] Set or get the xml version info.
  virtual HRESULT STDMETHODCALLTYPE get_version(BSTR* strVersion/*[out,retval]*/) = 0;
  // [1393] When enabled, the writer no longer escapes out its input when writing it out.
  virtual HRESULT STDMETHODCALLTYPE set_disableOutputEscaping(VARIANT_BOOL fValue/*[in]*/) = 0;
  // [1393] When enabled, the writer no longer escapes out its input when writing it out.
  virtual HRESULT STDMETHODCALLTYPE get_disableOutputEscaping(VARIANT_BOOL* fValue/*[out,retval]*/) = 0;
  // [1394] Flushes all writer buffers forcing the writer to write to the underlying output object
  virtual HRESULT STDMETHODCALLTYPE flush(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_output(void)
  {
    VARIANT varDestination;
    OLECHECK(this->get_output((VARIANT*)&varDestination));
    return varDestination;
  }

  BSTR __fastcall get_encoding(void)
  {
    BSTR strEncoding = 0;
    OLECHECK(this->get_encoding((BSTR*)&strEncoding));
    return strEncoding;
  }

  VARIANT_BOOL __fastcall get_byteOrderMark(void)
  {
    VARIANT_BOOL fWriteByteOrderMark;
    OLECHECK(this->get_byteOrderMark((VARIANT_BOOL*)&fWriteByteOrderMark));
    return fWriteByteOrderMark;
  }

  VARIANT_BOOL __fastcall get_indent(void)
  {
    VARIANT_BOOL fIndentMode;
    OLECHECK(this->get_indent((VARIANT_BOOL*)&fIndentMode));
    return fIndentMode;
  }

  VARIANT_BOOL __fastcall get_standalone(void)
  {
    VARIANT_BOOL fValue;
    OLECHECK(this->get_standalone((VARIANT_BOOL*)&fValue));
    return fValue;
  }

  VARIANT_BOOL __fastcall get_omitXMLDeclaration(void)
  {
    VARIANT_BOOL fValue;
    OLECHECK(this->get_omitXMLDeclaration((VARIANT_BOOL*)&fValue));
    return fValue;
  }

  BSTR __fastcall get_version(void)
  {
    BSTR strVersion = 0;
    OLECHECK(this->get_version((BSTR*)&strVersion));
    return strVersion;
  }

  VARIANT_BOOL __fastcall get_disableOutputEscaping(void)
  {
    VARIANT_BOOL fValue;
    OLECHECK(this->get_disableOutputEscaping((VARIANT_BOOL*)&fValue));
    return fValue;
  }


  __property   BSTR            encoding = {read = get_encoding, write = set_encoding};
  __property   VARIANT_BOOL    byteOrderMark = {read = get_byteOrderMark, write = set_byteOrderMark};
  __property   VARIANT_BOOL    indent = {read = get_indent, write = set_indent};
  __property   VARIANT_BOOL    standalone = {read = get_standalone, write = set_standalone};
  __property   VARIANT_BOOL    omitXMLDeclaration = {read = get_omitXMLDeclaration, write = set_omitXMLDeclaration};
  __property   BSTR            version = {read = get_version, write = set_version};
  __property   VARIANT_BOOL    disableOutputEscaping = {read = get_disableOutputEscaping, write = set_disableOutputEscaping};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMXAttributes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F10D27CC-3EC0-415C-8ED8-77AB1C5E7262}
// *********************************************************************//
interface IMXAttributes  : public IDispatch
{
public:
  // [1373] Add an attribute to the end of the list.
  virtual HRESULT STDMETHODCALLTYPE addAttribute(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/, 
                                                 BSTR strQName/*[in]*/, BSTR strType/*[in]*/, 
                                                 BSTR strValue/*[in]*/) = 0;
  // [1383] Add an attribute, whose value is equal to the indexed attribute in the input attributes object, to the end of the list.
  virtual HRESULT STDMETHODCALLTYPE addAttributeFromIndex(VARIANT varAtts/*[in]*/, 
                                                          int nIndex/*[in]*/) = 0;
  // [1374] Clear the attribute list for reuse.
  virtual HRESULT STDMETHODCALLTYPE clear(void) = 0;
  // [1375] Remove an attribute from the list.
  virtual HRESULT STDMETHODCALLTYPE removeAttribute(int nIndex/*[in]*/) = 0;
  // [1376] Set an attribute in the list.
  virtual HRESULT STDMETHODCALLTYPE setAttribute(int nIndex/*[in]*/, BSTR strURI/*[in]*/, 
                                                 BSTR strLocalName/*[in]*/, BSTR strQName/*[in]*/, 
                                                 BSTR strType/*[in]*/, BSTR strValue/*[in]*/) = 0;
  // [1377] Copy an entire Attributes object.
  virtual HRESULT STDMETHODCALLTYPE setAttributes(VARIANT varAtts/*[in]*/) = 0;
  // [1378] Set the local name of a specific attribute.
  virtual HRESULT STDMETHODCALLTYPE setLocalName(int nIndex/*[in]*/, BSTR strLocalName/*[in]*/) = 0;
  // [1379] Set the qualified name of a specific attribute.
  virtual HRESULT STDMETHODCALLTYPE setQName(int nIndex/*[in]*/, BSTR strQName/*[in]*/) = 0;
  // [1380] Set the type of a specific attribute.
  virtual HRESULT STDMETHODCALLTYPE setType(int nIndex/*[in]*/, BSTR strType/*[in]*/) = 0;
  // [1381] Set the Namespace URI of a specific attribute.
  virtual HRESULT STDMETHODCALLTYPE setURI(int nIndex/*[in]*/, BSTR strURI/*[in]*/) = 0;
  // [1382] Set the value of a specific attribute.
  virtual HRESULT STDMETHODCALLTYPE setValue(int nIndex/*[in]*/, BSTR strValue/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMXReaderControl
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {808F4E35-8D5A-4FBE-8466-33A41279ED30}
// *********************************************************************//
interface IMXReaderControl  : public IDispatch
{
public:
  // [1398] Abort the reader
  virtual HRESULT STDMETHODCALLTYPE abort(void) = 0;
  // [1399] Resume the reader
  virtual HRESULT STDMETHODCALLTYPE resume(void) = 0;
  // [1400] Suspend the reader
  virtual HRESULT STDMETHODCALLTYPE suspend(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLElementCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {65725580-9B5D-11D0-9BFE-00C04FC99C8E}
// *********************************************************************//
interface IXMLElementCollection  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_length(long p/*[in]*/) = 0; // [65537]
  virtual HRESULT STDMETHODCALLTYPE get_length(long* p/*[out,retval]*/) = 0; // [65537]
  virtual HRESULT STDMETHODCALLTYPE get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/) = 0; // [-4]
  // [65539] get current item, or (optional) by index and name.
  virtual HRESULT STDMETHODCALLTYPE item(VARIANT var1/*[in,opt]*/, VARIANT var2/*[in,opt]*/, 
                                         LPDISPATCH* ppDisp/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_length(void)
  {
    long p;
    OLECHECK(this->get_length((long*)&p));
    return p;
  }

  LPUNKNOWN __fastcall get__newEnum(void)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->get__newEnum((LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }

  LPDISPATCH __fastcall item(VARIANT var1/*[in,opt]*/= TNoParam(), 
                             VARIANT var2/*[in,opt]*/= TNoParam())
  {
    LPDISPATCH ppDisp;
    OLECHECK(this->item(var1, var2, (LPDISPATCH*)&ppDisp));
    return ppDisp;
  }


  __property   long            length = {read = get_length, write = set_length};
  __property   LPUNKNOWN       _newEnum = {read = get__newEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDocument
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F52E2B61-18A1-11D1-B105-00805F49916B}
// *********************************************************************//
interface IXMLDocument  : public IDispatch
{
public:
  // [65637] get root IXMLElement of the XML document.
  virtual HRESULT STDMETHODCALLTYPE get_root(Msxml3::IXMLElement** p/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_fileSize(BSTR* p/*[out,retval]*/) = 0; // [65638]
  virtual HRESULT STDMETHODCALLTYPE get_fileModifiedDate(BSTR* p/*[out,retval]*/) = 0; // [65639]
  virtual HRESULT STDMETHODCALLTYPE get_fileUpdatedDate(BSTR* p/*[out,retval]*/) = 0; // [65640]
  // [65641] set URL to load an XML document from the URL.
  virtual HRESULT STDMETHODCALLTYPE get_url(BSTR* p/*[out,retval]*/) = 0;
  // [65641] set URL to load an XML document from the URL.
  virtual HRESULT STDMETHODCALLTYPE set_url(BSTR p/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_mimeType(BSTR* p/*[out,retval]*/) = 0; // [65642]
  // [65643] get ready state.
  virtual HRESULT STDMETHODCALLTYPE get_readyState(long* pl/*[out,retval]*/) = 0;
  // [65645] get encoding.
  virtual HRESULT STDMETHODCALLTYPE get_charset(BSTR* p/*[out,retval]*/) = 0;
  // [65645] get encoding.
  virtual HRESULT STDMETHODCALLTYPE set_charset(BSTR p/*[in]*/) = 0;
  // [65646] get XML version number.
  virtual HRESULT STDMETHODCALLTYPE get_version(BSTR* p/*[out,retval]*/) = 0;
  // [65647] get document type.
  virtual HRESULT STDMETHODCALLTYPE get_doctype(BSTR* p/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_dtdURL(BSTR* p/*[out,retval]*/) = 0; // [65648]
  // [65644] create different types of IXMLElements.
  virtual HRESULT STDMETHODCALLTYPE createElement(VARIANT vType/*[in]*/, VARIANT var1/*[in,opt]*/, 
                                                  Msxml3::IXMLElement** ppElem/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msxml3::IXMLElement* __fastcall get_root(void)
  {
    Msxml3::IXMLElement* p;
    OLECHECK(this->get_root((Msxml3::IXMLElement**)&p));
    return p;
  }

  BSTR __fastcall get_fileSize(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_fileSize((BSTR*)&p));
    return p;
  }

  BSTR __fastcall get_fileModifiedDate(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_fileModifiedDate((BSTR*)&p));
    return p;
  }

  BSTR __fastcall get_fileUpdatedDate(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_fileUpdatedDate((BSTR*)&p));
    return p;
  }

  BSTR __fastcall get_url(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_url((BSTR*)&p));
    return p;
  }

  BSTR __fastcall get_mimeType(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_mimeType((BSTR*)&p));
    return p;
  }

  long __fastcall get_readyState(void)
  {
    long pl;
    OLECHECK(this->get_readyState((long*)&pl));
    return pl;
  }

  BSTR __fastcall get_charset(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_charset((BSTR*)&p));
    return p;
  }

  BSTR __fastcall get_version(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_version((BSTR*)&p));
    return p;
  }

  BSTR __fastcall get_doctype(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_doctype((BSTR*)&p));
    return p;
  }

  BSTR __fastcall get_dtdURL(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_dtdURL((BSTR*)&p));
    return p;
  }

  Msxml3::IXMLElement* __fastcall createElement(VARIANT vType/*[in]*/, 
                                                VARIANT var1/*[in,opt]*/= TNoParam())
  {
    Msxml3::IXMLElement* ppElem;
    OLECHECK(this->createElement(vType, var1, (Msxml3::IXMLElement**)&ppElem));
    return ppElem;
  }


  __property   Msxml3::IXMLElement* root = {read = get_root};
  __property   BSTR            fileSize = {read = get_fileSize};
  __property   BSTR            fileModifiedDate = {read = get_fileModifiedDate};
  __property   BSTR            fileUpdatedDate = {read = get_fileUpdatedDate};
  __property   BSTR            url = {read = get_url};
  __property   BSTR            mimeType = {read = get_mimeType};
  __property   long            readyState = {read = get_readyState};
  __property   BSTR            charset = {read = get_charset};
  __property   BSTR            version = {read = get_version};
  __property   BSTR            doctype = {read = get_doctype};
  __property   BSTR            dtdURL = {read = get_dtdURL};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLElement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3F7F31AC-E15F-11D0-9C25-00C04FC99C8E}
// *********************************************************************//
interface IXMLElement  : public IDispatch
{
public:
  // [65737] get tag name.
  virtual HRESULT STDMETHODCALLTYPE get_tagName(BSTR* p/*[out,retval]*/) = 0;
  // [65737] get tag name.
  virtual HRESULT STDMETHODCALLTYPE set_tagName(BSTR p/*[in]*/) = 0;
  // [65738] get parent IXMLElement.
  virtual HRESULT STDMETHODCALLTYPE get_parent(Msxml3::IXMLElement** ppParent/*[out,retval]*/) = 0;
  // [65739] set attribute.
  virtual HRESULT STDMETHODCALLTYPE setAttribute(BSTR strPropertyName/*[in]*/, 
                                                 VARIANT PropertyValue/*[in]*/) = 0;
  // [65740] get attribute.
  virtual HRESULT STDMETHODCALLTYPE getAttribute(BSTR strPropertyName/*[in]*/, 
                                                 VARIANT* PropertyValue/*[out,retval]*/) = 0;
  // [65741] remove attribute.
  virtual HRESULT STDMETHODCALLTYPE removeAttribute(BSTR strPropertyName/*[in]*/) = 0;
  // [65742] get a IXMLElementCollection of children.
  virtual HRESULT STDMETHODCALLTYPE get_children(Msxml3::IXMLElementCollection** pp/*[out,retval]*/) = 0;
  // [65743] get type of this IXMLElement.
  virtual HRESULT STDMETHODCALLTYPE get_type(long* plType/*[out,retval]*/) = 0;
  // [65744] get text.
  virtual HRESULT STDMETHODCALLTYPE get_text(BSTR* p/*[out,retval]*/) = 0;
  // [65744] get text.
  virtual HRESULT STDMETHODCALLTYPE set_text(BSTR p/*[in]*/) = 0;
  // [65745] add a child.
  virtual HRESULT STDMETHODCALLTYPE addChild(Msxml3::IXMLElement* pChildElem/*[in]*/, long lIndex, 
                                             long lReserved) = 0;
  // [65746] remove a child.
  virtual HRESULT STDMETHODCALLTYPE removeChild(Msxml3::IXMLElement* pChildElem/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_tagName(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_tagName((BSTR*)&p));
    return p;
  }

  Msxml3::IXMLElement* __fastcall get_parent(void)
  {
    Msxml3::IXMLElement* ppParent;
    OLECHECK(this->get_parent((Msxml3::IXMLElement**)&ppParent));
    return ppParent;
  }

  VARIANT __fastcall getAttribute(BSTR strPropertyName/*[in]*/)
  {
    VARIANT PropertyValue;
    OLECHECK(this->getAttribute(strPropertyName, (VARIANT*)&PropertyValue));
    return PropertyValue;
  }

  Msxml3::IXMLElementCollection* __fastcall get_children(void)
  {
    Msxml3::IXMLElementCollection* pp;
    OLECHECK(this->get_children((Msxml3::IXMLElementCollection**)&pp));
    return pp;
  }

  long __fastcall get_type(void)
  {
    long plType;
    OLECHECK(this->get_type((long*)&plType));
    return plType;
  }

  BSTR __fastcall get_text(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_text((BSTR*)&p));
    return p;
  }


  __property   BSTR            tagName = {read = get_tagName};
  __property   Msxml3::IXMLElement* parent = {read = get_parent};
  __property   Msxml3::IXMLElementCollection* children = {read = get_children};
  __property   long            type = {read = get_type};
  __property   BSTR            text = {read = get_text};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDocument2
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2B8DE2FE-8D2D-11D1-B2FC-00C04FD915A9}
// *********************************************************************//
interface IXMLDocument2  : public IDispatch
{
public:
  // [65637] get root IXMLElement of the XML document.
   HRESULT STDMETHODCALLTYPE get_root(Msxml3::IXMLElement2** p/*[out,retval]*/);
   HRESULT STDMETHODCALLTYPE get_fileSize(BSTR* p/*[out,retval]*/); // [65638]
   HRESULT STDMETHODCALLTYPE get_fileModifiedDate(BSTR* p/*[out,retval]*/); // [65639]
   HRESULT STDMETHODCALLTYPE get_fileUpdatedDate(BSTR* p/*[out,retval]*/); // [65640]
  // [65641] set URL to load an XML document from the URL.
   HRESULT STDMETHODCALLTYPE get_url(BSTR* p/*[out,retval]*/);
  // [65641] set URL to load an XML document from the URL.
   HRESULT STDMETHODCALLTYPE set_url(BSTR p/*[in]*/);
   HRESULT STDMETHODCALLTYPE get_mimeType(BSTR* p/*[out,retval]*/); // [65642]
  // [65643] get ready state.
   HRESULT STDMETHODCALLTYPE get_readyState(long* pl/*[out,retval]*/);
  // [65645] get encoding.
   HRESULT STDMETHODCALLTYPE get_charset(BSTR* p/*[out,retval]*/);
  // [65645] get encoding.
   HRESULT STDMETHODCALLTYPE set_charset(BSTR p/*[in]*/);
  // [65646] get XML version number.
   HRESULT STDMETHODCALLTYPE get_version(BSTR* p/*[out,retval]*/);
  // [65647] get document type.
   HRESULT STDMETHODCALLTYPE get_doctype(BSTR* p/*[out,retval]*/);
   HRESULT STDMETHODCALLTYPE get_dtdURL(BSTR* p/*[out,retval]*/); // [65648]
  // [65644] create different types of IXMLElements.
   HRESULT STDMETHODCALLTYPE createElement(VARIANT vType/*[in]*/, VARIANT var1/*[in,opt]*/, 
                                           Msxml3::IXMLElement2** ppElem/*[out,retval]*/);
  // [65649] get asynchronous loading flag.
   HRESULT STDMETHODCALLTYPE get_async(VARIANT_BOOL* pf/*[out,retval]*/);
  // [65649] get asynchronous loading flag.
   HRESULT STDMETHODCALLTYPE set_async(VARIANT_BOOL pf/*[in]*/);
};

// *********************************************************************//
// Interface: IXMLElement2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2B8DE2FF-8D2D-11D1-B2FC-00C04FD915A9}
// *********************************************************************//
interface IXMLElement2  : public IDispatch
{
public:
  // [65737] get tag name.
  virtual HRESULT STDMETHODCALLTYPE get_tagName(BSTR* p/*[out,retval]*/) = 0;
  // [65737] get tag name.
  virtual HRESULT STDMETHODCALLTYPE set_tagName(BSTR p/*[in]*/) = 0;
  // [65738] get parent IXMLElement.
  virtual HRESULT STDMETHODCALLTYPE get_parent(Msxml3::IXMLElement2** ppParent/*[out,retval]*/) = 0;
  // [65739] set attribute.
  virtual HRESULT STDMETHODCALLTYPE setAttribute(BSTR strPropertyName/*[in]*/, 
                                                 VARIANT PropertyValue/*[in]*/) = 0;
  // [65740] get attribute.
  virtual HRESULT STDMETHODCALLTYPE getAttribute(BSTR strPropertyName/*[in]*/, 
                                                 VARIANT* PropertyValue/*[out,retval]*/) = 0;
  // [65741] remove attribute.
  virtual HRESULT STDMETHODCALLTYPE removeAttribute(BSTR strPropertyName/*[in]*/) = 0;
  // [65742] get a IXMLElementCollection of all children.
  virtual HRESULT STDMETHODCALLTYPE get_children(Msxml3::IXMLElementCollection** pp/*[out,retval]*/) = 0;
  // [65743] get type of this IXMLElement.
  virtual HRESULT STDMETHODCALLTYPE get_type(long* plType/*[out,retval]*/) = 0;
  // [65744] get text.
  virtual HRESULT STDMETHODCALLTYPE get_text(BSTR* p/*[out,retval]*/) = 0;
  // [65744] get text.
  virtual HRESULT STDMETHODCALLTYPE set_text(BSTR p/*[in]*/) = 0;
  // [65745] add a child.
  virtual HRESULT STDMETHODCALLTYPE addChild(Msxml3::IXMLElement2* pChildElem/*[in]*/, long lIndex, 
                                             long lReserved) = 0;
  // [65746] remove a child.
  virtual HRESULT STDMETHODCALLTYPE removeChild(Msxml3::IXMLElement2* pChildElem/*[in]*/) = 0;
  // [65747] get a IXMLElementCollection of all attributes.
  virtual HRESULT STDMETHODCALLTYPE get_attributes(Msxml3::IXMLElementCollection** pp/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_tagName(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_tagName((BSTR*)&p));
    return p;
  }

  Msxml3::IXMLElement2* __fastcall get_parent(void)
  {
    Msxml3::IXMLElement2* ppParent;
    OLECHECK(this->get_parent((Msxml3::IXMLElement2**)&ppParent));
    return ppParent;
  }

  VARIANT __fastcall getAttribute(BSTR strPropertyName/*[in]*/)
  {
    VARIANT PropertyValue;
    OLECHECK(this->getAttribute(strPropertyName, (VARIANT*)&PropertyValue));
    return PropertyValue;
  }

  Msxml3::IXMLElementCollection* __fastcall get_children(void)
  {
    Msxml3::IXMLElementCollection* pp;
    OLECHECK(this->get_children((Msxml3::IXMLElementCollection**)&pp));
    return pp;
  }

  long __fastcall get_type(void)
  {
    long plType;
    OLECHECK(this->get_type((long*)&plType));
    return plType;
  }

  BSTR __fastcall get_text(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_text((BSTR*)&p));
    return p;
  }

  Msxml3::IXMLElementCollection* __fastcall get_attributes(void)
  {
    Msxml3::IXMLElementCollection* pp;
    OLECHECK(this->get_attributes((Msxml3::IXMLElementCollection**)&pp));
    return pp;
  }


  __property   BSTR            tagName = {read = get_tagName};
  __property   Msxml3::IXMLElement2* parent = {read = get_parent};
  __property   Msxml3::IXMLElementCollection* children = {read = get_children};
  __property   long            type = {read = get_type};
  __property   BSTR            text = {read = get_text};
  __property   Msxml3::IXMLElementCollection* attributes = {read = get_attributes};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLAttribute
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D4D4A0FC-3B73-11D1-B2B4-00C04FB92596}
// *********************************************************************//
interface IXMLAttribute  : public IDispatch
{
public:
  // [65937] get attribute name.
  virtual HRESULT STDMETHODCALLTYPE get_name(BSTR* n/*[out,retval]*/) = 0;
  // [65938] get attribute value.
  virtual HRESULT STDMETHODCALLTYPE get_value(BSTR* v/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_name(void)
  {
    BSTR n = 0;
    OLECHECK(this->get_name((BSTR*)&n));
    return n;
  }

  BSTR __fastcall get_value(void)
  {
    BSTR v = 0;
    OLECHECK(this->get_value((BSTR*)&v));
    return v;
  }


  __property   BSTR            name = {read = get_name};
  __property   BSTR            value = {read = get_value};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLError
// Flags:     (16) Hidden
// GUID:      {948C5AD3-C58D-11D0-9C0B-00C04FC99C8E}
// *********************************************************************//
interface IXMLError  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE GetErrorInfo(Msxml3::_xml_error* pErrorReturn) = 0; // [-1]
};

// *********************************************************************//
// Interface: IXMLDOMSelection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AA634FC7-5888-44A7-A257-3A47150D3A0E}
// *********************************************************************//
interface IXMLDOMSelection  : public Msxml3::IXMLDOMNodeList
{
public:
  // [81] selection expression
  virtual HRESULT STDMETHODCALLTYPE get_expr(BSTR* expression/*[out,retval]*/) = 0;
  // [81] selection expression
  virtual HRESULT STDMETHODCALLTYPE set_expr(BSTR expression/*[in]*/) = 0;
  // [82] nodes to apply selection expression to
  virtual HRESULT STDMETHODCALLTYPE get_context(Msxml3::IXMLDOMNode** ppNode/*[out,retval]*/) = 0;
  // [82] nodes to apply selection expression to
  virtual HRESULT STDMETHODCALLTYPE _set_context(Msxml3::IXMLDOMNode* ppNode/*[in]*/) = 0;
  // [83] gets the next node without advancing the list position
  virtual HRESULT STDMETHODCALLTYPE peekNode(Msxml3::IXMLDOMNode** ppNode/*[out,retval]*/) = 0;
  // [84] checks to see if the node matches the pattern
  virtual HRESULT STDMETHODCALLTYPE matches(Msxml3::IXMLDOMNode* pNode/*[in]*/, 
                                            Msxml3::IXMLDOMNode** ppNode/*[out,retval]*/) = 0;
  // [85] removes the next node
  virtual HRESULT STDMETHODCALLTYPE removeNext(Msxml3::IXMLDOMNode** ppNode/*[out,retval]*/) = 0;
  // [86] removes all the nodes that match the selection
  virtual HRESULT STDMETHODCALLTYPE removeAll(void) = 0;
  // [87] clone this object with the same position and context
  virtual HRESULT STDMETHODCALLTYPE clone(Msxml3::IXMLDOMSelection** ppNode/*[out,retval]*/) = 0;
  // [88] get the value of the named property
  virtual HRESULT STDMETHODCALLTYPE getProperty(BSTR name/*[in]*/, VARIANT* value/*[out,retval]*/) = 0;
  // [89] set the value of the named property
  virtual HRESULT STDMETHODCALLTYPE setProperty(BSTR name/*[in]*/, VARIANT value/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_expr(void)
  {
    BSTR expression = 0;
    OLECHECK(this->get_expr((BSTR*)&expression));
    return expression;
  }

  Msxml3::IXMLDOMNode* __fastcall get_context(void)
  {
    Msxml3::IXMLDOMNode* ppNode;
    OLECHECK(this->get_context((Msxml3::IXMLDOMNode**)&ppNode));
    return ppNode;
  }

  Msxml3::IXMLDOMNode* __fastcall peekNode(void)
  {
    Msxml3::IXMLDOMNode* ppNode;
    OLECHECK(this->peekNode((Msxml3::IXMLDOMNode**)&ppNode));
    return ppNode;
  }

  Msxml3::IXMLDOMNode* __fastcall matches(Msxml3::IXMLDOMNode* pNode/*[in]*/)
  {
    Msxml3::IXMLDOMNode* ppNode;
    OLECHECK(this->matches(pNode, (Msxml3::IXMLDOMNode**)&ppNode));
    return ppNode;
  }

  Msxml3::IXMLDOMNode* __fastcall removeNext(void)
  {
    Msxml3::IXMLDOMNode* ppNode;
    OLECHECK(this->removeNext((Msxml3::IXMLDOMNode**)&ppNode));
    return ppNode;
  }

  Msxml3::IXMLDOMSelection* __fastcall clone(void)
  {
    Msxml3::IXMLDOMSelection* ppNode;
    OLECHECK(this->clone((Msxml3::IXMLDOMSelection**)&ppNode));
    return ppNode;
  }

  VARIANT __fastcall getProperty(BSTR name/*[in]*/)
  {
    VARIANT value;
    OLECHECK(this->getProperty(name, (VARIANT*)&value));
    return value;
  }


  __property   BSTR            expr = {read = get_expr};
  __property   Msxml3::IXMLDOMNode* context = {read = get_context, write = _set_context};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: XMLDOMDocumentEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {3EFAA427-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
interface XMLDOMDocumentEvents : public TDispWrapper<IDispatch>
{
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ondataavailable()
  {
    _TDispID _dispid(/* ondataavailable */ DISPID(198));
    return OleFunction(_dispid);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall onreadystatechange()
  {
    _TDispID _dispid(/* onreadystatechange */ DISPID(-609));
    return OleFunction(_dispid);
  }


};
// *********************************************************************//
// Interface: IDSOControl
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {310AFA62-0575-11D2-9CA9-0060B0EC3D39}
// *********************************************************************//
interface IDSOControl  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_XMLDocument(Msxml3::IXMLDOMDocument** ppDoc/*[out,retval]*/) = 0; // [65537]
  virtual HRESULT STDMETHODCALLTYPE set_XMLDocument(Msxml3::IXMLDOMDocument* ppDoc/*[in]*/) = 0; // [65537]
  virtual HRESULT STDMETHODCALLTYPE get_JavaDSOCompatible(long* fJavaDSOCompatible/*[out,retval]*/) = 0; // [65538]
  virtual HRESULT STDMETHODCALLTYPE set_JavaDSOCompatible(long fJavaDSOCompatible/*[in]*/) = 0; // [65538]
  virtual HRESULT STDMETHODCALLTYPE get_readyState(long* state/*[out,retval]*/) = 0; // [-525]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msxml3::IXMLDOMDocument* __fastcall get_XMLDocument(void)
  {
    Msxml3::IXMLDOMDocument* ppDoc;
    OLECHECK(this->get_XMLDocument((Msxml3::IXMLDOMDocument**)&ppDoc));
    return ppDoc;
  }

  long __fastcall get_JavaDSOCompatible(void)
  {
    long fJavaDSOCompatible;
    OLECHECK(this->get_JavaDSOCompatible((long*)&fJavaDSOCompatible));
    return fJavaDSOCompatible;
  }

  long __fastcall get_readyState(void)
  {
    long state;
    OLECHECK(this->get_readyState((long*)&state));
    return state;
  }


  __property   Msxml3::IXMLDOMDocument* XMLDocument = {read = get_XMLDocument, write = set_XMLDocument};
  __property   long            JavaDSOCompatible = {read = get_JavaDSOCompatible, write = set_JavaDSOCompatible};
  __property   long            readyState = {read = get_readyState};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLHTTPRequest
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ED8C108D-4349-11D2-91A4-00C04F7969E8}
// *********************************************************************//
interface IXMLHTTPRequest  : public IDispatch
{
public:
  // [1] Open HTTP connection
  virtual HRESULT STDMETHODCALLTYPE open(BSTR bstrMethod/*[in]*/, BSTR bstrUrl/*[in]*/, 
                                         VARIANT varAsync/*[in,opt]*/= TNoParam(), 
                                         VARIANT bstrUser/*[in,opt]*/= TNoParam(), 
                                         VARIANT bstrPassword/*[in,opt]*/= TNoParam()) = 0;
  // [2] Add HTTP request header
  virtual HRESULT STDMETHODCALLTYPE setRequestHeader(BSTR bstrHeader/*[in]*/, BSTR bstrValue/*[in]*/) = 0;
  // [3] Get HTTP response header
  virtual HRESULT STDMETHODCALLTYPE getResponseHeader(BSTR bstrHeader/*[in]*/, 
                                                      BSTR* pbstrValue/*[out,retval]*/) = 0;
  // [4] Get all HTTP response headers
  virtual HRESULT STDMETHODCALLTYPE getAllResponseHeaders(BSTR* pbstrHeaders/*[out,retval]*/) = 0;
  // [5] Send HTTP request
  virtual HRESULT STDMETHODCALLTYPE send(VARIANT varBody/*[in,opt]*/= TNoParam()) = 0;
  // [6] Abort HTTP request
  virtual HRESULT STDMETHODCALLTYPE abort(void) = 0;
  // [7] Get HTTP status code
  virtual HRESULT STDMETHODCALLTYPE get_status(long* plStatus/*[out,retval]*/) = 0;
  // [8] Get HTTP status text
  virtual HRESULT STDMETHODCALLTYPE get_statusText(BSTR* pbstrStatus/*[out,retval]*/) = 0;
  // [9] Get response body
  virtual HRESULT STDMETHODCALLTYPE get_responseXML(LPDISPATCH* ppBody/*[out,retval]*/) = 0;
  // [10] Get response body
  virtual HRESULT STDMETHODCALLTYPE get_responseText(BSTR* pbstrBody/*[out,retval]*/) = 0;
  // [11] Get response body
  virtual HRESULT STDMETHODCALLTYPE get_responseBody(VARIANT* pvarBody/*[out,retval]*/) = 0;
  // [12] Get response body
  virtual HRESULT STDMETHODCALLTYPE get_responseStream(VARIANT* pvarBody/*[out,retval]*/) = 0;
  // [13] Get ready state
  virtual HRESULT STDMETHODCALLTYPE get_readyState(long* plState/*[out,retval]*/) = 0;
  // [14] Register a complete event handler
  virtual HRESULT STDMETHODCALLTYPE set_onreadystatechange(LPDISPATCH Param1/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall getResponseHeader(BSTR bstrHeader/*[in]*/)
  {
    BSTR pbstrValue = 0;
    OLECHECK(this->getResponseHeader(bstrHeader, (BSTR*)&pbstrValue));
    return pbstrValue;
  }

  BSTR __fastcall getAllResponseHeaders(void)
  {
    BSTR pbstrHeaders = 0;
    OLECHECK(this->getAllResponseHeaders((BSTR*)&pbstrHeaders));
    return pbstrHeaders;
  }

  long __fastcall get_status(void)
  {
    long plStatus;
    OLECHECK(this->get_status((long*)&plStatus));
    return plStatus;
  }

  BSTR __fastcall get_statusText(void)
  {
    BSTR pbstrStatus = 0;
    OLECHECK(this->get_statusText((BSTR*)&pbstrStatus));
    return pbstrStatus;
  }

  LPDISPATCH __fastcall get_responseXML(void)
  {
    LPDISPATCH ppBody;
    OLECHECK(this->get_responseXML((LPDISPATCH*)&ppBody));
    return ppBody;
  }

  BSTR __fastcall get_responseText(void)
  {
    BSTR pbstrBody = 0;
    OLECHECK(this->get_responseText((BSTR*)&pbstrBody));
    return pbstrBody;
  }

  VARIANT __fastcall get_responseBody(void)
  {
    VARIANT pvarBody;
    OLECHECK(this->get_responseBody((VARIANT*)&pvarBody));
    return pvarBody;
  }

  VARIANT __fastcall get_responseStream(void)
  {
    VARIANT pvarBody;
    OLECHECK(this->get_responseStream((VARIANT*)&pvarBody));
    return pvarBody;
  }

  long __fastcall get_readyState(void)
  {
    long plState;
    OLECHECK(this->get_readyState((long*)&plState));
    return plState;
  }


  __property   long            status = {read = get_status};
  __property   BSTR            statusText = {read = get_statusText};
  __property   LPDISPATCH      responseXML = {read = get_responseXML};
  __property   BSTR            responseText = {read = get_responseText};
  __property   long            readyState = {read = get_readyState};
  __property   LPDISPATCH      onreadystatechange = {write = set_onreadystatechange};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IServerXMLHTTPRequest
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2E9196BF-13BA-4DD4-91CA-6C571F281495}
// *********************************************************************//
interface IServerXMLHTTPRequest  : public Msxml3::IXMLHTTPRequest
{
public:
  // [15] Specify timeout settings (in milliseconds)
  virtual HRESULT STDMETHODCALLTYPE setTimeouts(long resolveTimeout/*[in]*/, 
                                                long connectTimeout/*[in]*/, 
                                                long sendTimeout/*[in]*/, 
                                                long receiveTimeout/*[in]*/) = 0;
  // [16] Wait for asynchronous send to complete, with optional timeout (in seconds)
  virtual HRESULT STDMETHODCALLTYPE waitForResponse(VARIANT timeoutInSeconds/*[in,opt]*/, 
                                                    VARIANT_BOOL* isSuccessful/*[out,retval]*/) = 0;
  // [17] Get an option value
  virtual HRESULT STDMETHODCALLTYPE getOption(Msxml3::SERVERXMLHTTP_OPTION option/*[in]*/, 
                                              VARIANT* value/*[out,retval]*/) = 0;
  // [18] Set an option value
  virtual HRESULT STDMETHODCALLTYPE setOption(Msxml3::SERVERXMLHTTP_OPTION option/*[in]*/, 
                                              VARIANT value/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall waitForResponse(VARIANT timeoutInSeconds/*[in,opt]*/= TNoParam())
  {
    VARIANT_BOOL isSuccessful;
    OLECHECK(this->waitForResponse(timeoutInSeconds, (VARIANT_BOOL*)&isSuccessful));
    return isSuccessful;
  }

  VARIANT __fastcall getOption(Msxml3::SERVERXMLHTTP_OPTION option/*[in]*/)
  {
    VARIANT value;
    OLECHECK(this->getOption(option, (VARIANT*)&value));
    return value;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<IXMLDOMImplementation>  TCOMIXMLDOMImplementation;

// *********************************************************************//
// DispIntf:  IXMLDOMImplementation
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8F-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMImplementationDispT : public TAutoDriver<IXMLDOMImplementation>
{
public:
  IXMLDOMImplementationDispT(){}

  IXMLDOMImplementationDispT(IXMLDOMImplementation *pintf)
  {
    TAutoDriver<IXMLDOMImplementation>::Bind(pintf, false);
  }

  IXMLDOMImplementationDispT(IXMLDOMImplementationPtr pintf)
  {
    TAutoDriver<IXMLDOMImplementation>::Bind(pintf, true);
  }

  IXMLDOMImplementationDispT& operator=(IXMLDOMImplementation *pintf)
  {
    TAutoDriver<IXMLDOMImplementation>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMImplementationDispT& operator=(IXMLDOMImplementationPtr pintf)
  {
    TAutoDriver<IXMLDOMImplementation>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall hasFeature(BSTR feature/*[in]*/, BSTR version/*[in]*/, 
                                                   VARIANT_BOOL* hasFeature/*[out,retval]*/);
  VARIANT_BOOL    __fastcall hasFeature(BSTR feature/*[in]*/, BSTR version/*[in]*/);

};
typedef IXMLDOMImplementationDispT<IXMLDOMImplementation> IXMLDOMImplementationDisp;

typedef TComInterface<IXMLDOMNode>  TCOMIXMLDOMNode;

// *********************************************************************//
// DispIntf:  IXMLDOMNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF80-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMNodeDispT : public TAutoDriver<IXMLDOMNode>
{
public:
  IXMLDOMNodeDispT(){}

  IXMLDOMNodeDispT(IXMLDOMNode *pintf)
  {
    TAutoDriver<IXMLDOMNode>::Bind(pintf, false);
  }

  IXMLDOMNodeDispT(IXMLDOMNodePtr pintf)
  {
    TAutoDriver<IXMLDOMNode>::Bind(pintf, true);
  }

  IXMLDOMNodeDispT& operator=(IXMLDOMNode *pintf)
  {
    TAutoDriver<IXMLDOMNode>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMNodeDispT& operator=(IXMLDOMNodePtr pintf)
  {
    TAutoDriver<IXMLDOMNode>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeValue(VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall get_nodeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeValue(VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/);
  Msxml3::DOMNodeType __fastcall get_nodeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_parentNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall get_childNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_firstChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_lastChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_previousSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_nextSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/);
  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_attributes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     VARIANT refChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               VARIANT refChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               Msxml3::IXMLDOMNode* oldChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/);
  VARIANT_BOOL    __fastcall hasChildNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/);
  Msxml3::IXMLDOMDocument* __fastcall get_ownerDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                                  Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_text(BSTR text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_specified(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_definition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/);
  VARIANT         __fastcall get_nodeTypedValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeTypedValue(VARIANT typedValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_dataType(VARIANT* dataTypeName/*[out,retval]*/);
  VARIANT         __fastcall get_dataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                      BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                                    Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                                         Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_parsed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/
                                                              , VARIANT outputObject/*[in]*/);

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml3::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml3::IXMLDOMNode* parentNode = {read = get_parentNode};
  __property   Msxml3::IXMLDOMNodeList* childNodes = {read = get_childNodes};
  __property   Msxml3::IXMLDOMNode* firstChild = {read = get_firstChild};
  __property   Msxml3::IXMLDOMNode* lastChild = {read = get_lastChild};
  __property   Msxml3::IXMLDOMNode* previousSibling = {read = get_previousSibling};
  __property   Msxml3::IXMLDOMNode* nextSibling = {read = get_nextSibling};
  __property   Msxml3::IXMLDOMNamedNodeMap* attributes = {read = get_attributes};
  __property   Msxml3::IXMLDOMDocument* ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text};
  __property   VARIANT_BOOL    specified = {read = get_specified};
  __property   Msxml3::IXMLDOMNode* definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   VARIANT_BOOL    parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMNodeDispT<IXMLDOMNode> IXMLDOMNodeDisp;

typedef TComInterface<IXMLDOMNodeList>  TCOMIXMLDOMNodeList;

// *********************************************************************//
// DispIntf:  IXMLDOMNodeList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF82-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMNodeListDispT : public TAutoDriver<IXMLDOMNodeList>
{
public:
  IXMLDOMNodeListDispT(){}

  IXMLDOMNodeListDispT(IXMLDOMNodeList *pintf)
  {
    TAutoDriver<IXMLDOMNodeList>::Bind(pintf, false);
  }

  IXMLDOMNodeListDispT(IXMLDOMNodeListPtr pintf)
  {
    TAutoDriver<IXMLDOMNodeList>::Bind(pintf, true);
  }

  IXMLDOMNodeListDispT& operator=(IXMLDOMNodeList *pintf)
  {
    TAutoDriver<IXMLDOMNodeList>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMNodeListDispT& operator=(IXMLDOMNodeListPtr pintf)
  {
    TAutoDriver<IXMLDOMNodeList>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_item(long index/*[in]*/, 
                                                 Msxml3::IXMLDOMNode** listItem/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_item(long index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_length(long* listLength/*[out,retval]*/);
  long            __fastcall get_length(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall nextNode(Msxml3::IXMLDOMNode** nextItem/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall nextNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall reset();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__newEnum(void);

  __property   long            length = {read = get_length};
  __property   LPUNKNOWN       _newEnum = {read = get__newEnum};
};
typedef IXMLDOMNodeListDispT<IXMLDOMNodeList> IXMLDOMNodeListDisp;

typedef TComInterface<IXMLDOMNamedNodeMap>  TCOMIXMLDOMNamedNodeMap;

// *********************************************************************//
// DispIntf:  IXMLDOMNamedNodeMap
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF83-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMNamedNodeMapDispT : public TAutoDriver<IXMLDOMNamedNodeMap>
{
public:
  IXMLDOMNamedNodeMapDispT(){}

  IXMLDOMNamedNodeMapDispT(IXMLDOMNamedNodeMap *pintf)
  {
    TAutoDriver<IXMLDOMNamedNodeMap>::Bind(pintf, false);
  }

  IXMLDOMNamedNodeMapDispT(IXMLDOMNamedNodeMapPtr pintf)
  {
    TAutoDriver<IXMLDOMNamedNodeMap>::Bind(pintf, true);
  }

  IXMLDOMNamedNodeMapDispT& operator=(IXMLDOMNamedNodeMap *pintf)
  {
    TAutoDriver<IXMLDOMNamedNodeMap>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMNamedNodeMapDispT& operator=(IXMLDOMNamedNodeMapPtr pintf)
  {
    TAutoDriver<IXMLDOMNamedNodeMap>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall getNamedItem(BSTR name/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** namedItem/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall getNamedItem(BSTR name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setNamedItem(Msxml3::IXMLDOMNode* newItem/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** nameItem/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall setNamedItem(Msxml3::IXMLDOMNode* newItem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeNamedItem(BSTR name/*[in]*/, 
                                                        Msxml3::IXMLDOMNode** namedItem/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall removeNamedItem(BSTR name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_item(long index/*[in]*/, 
                                                 Msxml3::IXMLDOMNode** listItem/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_item(long index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_length(long* listLength/*[out,retval]*/);
  long            __fastcall get_length(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getQualifiedItem(BSTR baseName/*[in]*/, 
                                                         BSTR namespaceURI/*[in]*/, 
                                                         Msxml3::IXMLDOMNode** qualifiedItem/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall getQualifiedItem(BSTR baseName/*[in]*/, BSTR namespaceURI/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeQualifiedItem(BSTR baseName/*[in]*/, 
                                                            BSTR namespaceURI/*[in]*/, 
                                                            Msxml3::IXMLDOMNode** qualifiedItem/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall removeQualifiedItem(BSTR baseName/*[in]*/, 
                                                      BSTR namespaceURI/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall nextNode(Msxml3::IXMLDOMNode** nextItem/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall nextNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall reset();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__newEnum(void);

  __property   long            length = {read = get_length};
  __property   LPUNKNOWN       _newEnum = {read = get__newEnum};
};
typedef IXMLDOMNamedNodeMapDispT<IXMLDOMNamedNodeMap> IXMLDOMNamedNodeMapDisp;

typedef TComInterface<IXMLDOMDocument>  TCOMIXMLDOMDocument;

// *********************************************************************//
// DispIntf:  IXMLDOMDocument
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF81-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMDocumentDispT : public TAutoDriver<IXMLDOMDocument>
{
public:
  IXMLDOMDocumentDispT(){}

  IXMLDOMDocumentDispT(IXMLDOMDocument *pintf)
  {
    TAutoDriver<IXMLDOMDocument>::Bind(pintf, false);
  }

  IXMLDOMDocumentDispT(IXMLDOMDocumentPtr pintf)
  {
    TAutoDriver<IXMLDOMDocument>::Bind(pintf, true);
  }

  IXMLDOMDocumentDispT& operator=(IXMLDOMDocument *pintf)
  {
    TAutoDriver<IXMLDOMDocument>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMDocumentDispT& operator=(IXMLDOMDocumentPtr pintf)
  {
    TAutoDriver<IXMLDOMDocument>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_doctype(Msxml3::IXMLDOMDocumentType** documentType/*[out,retval]*/);
  Msxml3::IXMLDOMDocumentType* __fastcall get_doctype(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_implementation(Msxml3::IXMLDOMImplementation** impl/*[out,retval]*/);
  Msxml3::IXMLDOMImplementation* __fastcall get_implementation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_documentElement(Msxml3::IXMLDOMElement** DOMElement/*[out,retval]*/);
  Msxml3::IXMLDOMElement* __fastcall get_documentElement(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_documentElement(Msxml3::IXMLDOMElement* DOMElement/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createElement(BSTR tagName/*[in]*/, 
                                                      Msxml3::IXMLDOMElement** element/*[out,retval]*/);
  Msxml3::IXMLDOMElement* __fastcall createElement(BSTR tagName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createDocumentFragment(Msxml3::IXMLDOMDocumentFragment** docFrag/*[out,retval]*/);
  Msxml3::IXMLDOMDocumentFragment* __fastcall createDocumentFragment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createTextNode(BSTR data/*[in]*/, 
                                                       Msxml3::IXMLDOMCharacterData** text/*[out,retval]*/);
  Msxml3::IXMLDOMCharacterData* __fastcall createTextNode(BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createComment(BSTR data/*[in]*/, 
                                                      Msxml3::IXMLDOMComment** comment/*[out,retval]*/);
  Msxml3::IXMLDOMComment* __fastcall createComment(BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createCDATASection(BSTR data/*[in]*/, 
                                                           Msxml3::IXMLDOMCDATASection** cdata/*[out,retval]*/);
  Msxml3::IXMLDOMCDATASection* __fastcall createCDATASection(BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createProcessingInstruction(BSTR target/*[in]*/, 
                                                                    BSTR data/*[in]*/, 
                                                                    Msxml3::IXMLDOMProcessingInstruction** pi/*[out,retval]*/);
  Msxml3::IXMLDOMProcessingInstruction* __fastcall createProcessingInstruction(BSTR target/*[in]*/, 
                                                                               BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createAttribute(BSTR name/*[in]*/, 
                                                        Msxml3::IXMLDOMAttribute** attribute/*[out,retval]*/);
  Msxml3::IXMLDOMAttribute* __fastcall createAttribute(BSTR name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createEntityReference(BSTR name/*[in]*/, 
                                                              Msxml3::IXMLDOMEntityReference** entityRef/*[out,retval]*/);
  Msxml3::IXMLDOMEntityReference* __fastcall createEntityReference(BSTR name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getElementsByTagName(BSTR tagName/*[in]*/, 
                                                             Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall getElementsByTagName(BSTR tagName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createNode(VARIANT type/*[in]*/, BSTR name/*[in]*/, 
                                                   BSTR namespaceURI/*[in]*/, 
                                                   Msxml3::IXMLDOMNode** node/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall createNode(VARIANT type/*[in]*/, BSTR name/*[in]*/, 
                                             BSTR namespaceURI/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall nodeFromID(BSTR idString/*[in]*/, 
                                                   Msxml3::IXMLDOMNode** node/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall nodeFromID(BSTR idString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall load(VARIANT xmlSource/*[in]*/, 
                                             VARIANT_BOOL* isSuccessful/*[out,retval]*/);
  VARIANT_BOOL    __fastcall load(VARIANT xmlSource/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_readyState(long* value/*[out,retval]*/);
  long            __fastcall get_readyState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parseError(Msxml3::IXMLDOMParseError** errorObj/*[out,retval]*/);
  Msxml3::IXMLDOMParseError* __fastcall get_parseError(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_url(BSTR* urlString/*[out,retval]*/);
  BSTR            __fastcall get_url(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_async(VARIANT_BOOL* isAsync/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_async(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_async(VARIANT_BOOL isAsync/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall abort();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall loadXML(BSTR bstrXML/*[in]*/, 
                                                VARIANT_BOOL* isSuccessful/*[out,retval]*/);
  VARIANT_BOOL    __fastcall loadXML(BSTR bstrXML/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall save(VARIANT destination/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_validateOnParse(VARIANT_BOOL* isValidating/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_validateOnParse(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_validateOnParse(VARIANT_BOOL isValidating/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_resolveExternals(VARIANT_BOOL* isResolving/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_resolveExternals(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_resolveExternals(VARIANT_BOOL isResolving/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_preserveWhiteSpace(VARIANT_BOOL* isPreserving/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_preserveWhiteSpace(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_preserveWhiteSpace(VARIANT_BOOL isPreserving/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_onreadystatechange(VARIANT Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ondataavailable(VARIANT Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ontransformnode(VARIANT Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeValue(VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall get_nodeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeValue(VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/);
  Msxml3::DOMNodeType __fastcall get_nodeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_parentNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall get_childNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_firstChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_lastChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_previousSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_nextSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/);
  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_attributes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     VARIANT refChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               VARIANT refChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               Msxml3::IXMLDOMNode* oldChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/);
  VARIANT_BOOL    __fastcall hasChildNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/);
  Msxml3::IXMLDOMDocument* __fastcall get_ownerDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                                  Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_text(BSTR text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_specified(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_definition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/);
  VARIANT         __fastcall get_nodeTypedValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeTypedValue(VARIANT typedValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_dataType(VARIANT* dataTypeName/*[out,retval]*/);
  VARIANT         __fastcall get_dataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                      BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                                    Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                                         Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_parsed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/
                                                              , VARIANT outputObject/*[in]*/);

  __property   Msxml3::IXMLDOMDocumentType* doctype = {read = get_doctype};
  __property   Msxml3::IXMLDOMImplementation* implementation = {read = get_implementation};
  __property   Msxml3::IXMLDOMElement* documentElement = {read = get_documentElement, write = _set_documentElement};
  __property   long            readyState = {read = get_readyState};
  __property   Msxml3::IXMLDOMParseError* parseError = {read = get_parseError};
  __property   BSTR            url = {read = get_url};
  __property   VARIANT_BOOL    async = {read = get_async, write = set_async};
  __property   VARIANT_BOOL    validateOnParse = {read = get_validateOnParse, write = set_validateOnParse};
  __property   VARIANT_BOOL    resolveExternals = {read = get_resolveExternals, write = set_resolveExternals};
  __property   VARIANT_BOOL    preserveWhiteSpace = {read = get_preserveWhiteSpace, write = set_preserveWhiteSpace};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml3::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml3::IXMLDOMNode* parentNode = {read = get_parentNode};
  __property   Msxml3::IXMLDOMNodeList* childNodes = {read = get_childNodes};
  __property   Msxml3::IXMLDOMNode* firstChild = {read = get_firstChild};
  __property   Msxml3::IXMLDOMNode* lastChild = {read = get_lastChild};
  __property   Msxml3::IXMLDOMNode* previousSibling = {read = get_previousSibling};
  __property   Msxml3::IXMLDOMNode* nextSibling = {read = get_nextSibling};
  __property   Msxml3::IXMLDOMNamedNodeMap* attributes = {read = get_attributes};
  __property   Msxml3::IXMLDOMDocument* ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text};
  __property   VARIANT_BOOL    specified = {read = get_specified};
  __property   Msxml3::IXMLDOMNode* definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   VARIANT_BOOL    parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMDocumentDispT<IXMLDOMDocument> IXMLDOMDocumentDisp;

typedef TComInterface<IXMLDOMDocumentType>  TCOMIXMLDOMDocumentType;

// *********************************************************************//
// DispIntf:  IXMLDOMDocumentType
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8B-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMDocumentTypeDispT : public TAutoDriver<IXMLDOMDocumentType>
{
public:
  IXMLDOMDocumentTypeDispT(){}

  IXMLDOMDocumentTypeDispT(IXMLDOMDocumentType *pintf)
  {
    TAutoDriver<IXMLDOMDocumentType>::Bind(pintf, false);
  }

  IXMLDOMDocumentTypeDispT(IXMLDOMDocumentTypePtr pintf)
  {
    TAutoDriver<IXMLDOMDocumentType>::Bind(pintf, true);
  }

  IXMLDOMDocumentTypeDispT& operator=(IXMLDOMDocumentType *pintf)
  {
    TAutoDriver<IXMLDOMDocumentType>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMDocumentTypeDispT& operator=(IXMLDOMDocumentTypePtr pintf)
  {
    TAutoDriver<IXMLDOMDocumentType>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_name(BSTR* rootName/*[out,retval]*/);
  BSTR            __fastcall get_name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_entities(Msxml3::IXMLDOMNamedNodeMap** entityMap/*[out,retval]*/);
  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_entities(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_notations(Msxml3::IXMLDOMNamedNodeMap** notationMap/*[out,retval]*/);
  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_notations(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeValue(VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall get_nodeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeValue(VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/);
  Msxml3::DOMNodeType __fastcall get_nodeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_parentNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall get_childNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_firstChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_lastChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_previousSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_nextSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/);
  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_attributes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     VARIANT refChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               VARIANT refChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               Msxml3::IXMLDOMNode* oldChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/);
  VARIANT_BOOL    __fastcall hasChildNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/);
  Msxml3::IXMLDOMDocument* __fastcall get_ownerDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                                  Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_text(BSTR text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_specified(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_definition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/);
  VARIANT         __fastcall get_nodeTypedValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeTypedValue(VARIANT typedValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_dataType(VARIANT* dataTypeName/*[out,retval]*/);
  VARIANT         __fastcall get_dataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                      BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                                    Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                                         Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_parsed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/
                                                              , VARIANT outputObject/*[in]*/);

  __property   BSTR            name = {read = get_name};
  __property   Msxml3::IXMLDOMNamedNodeMap* entities = {read = get_entities};
  __property   Msxml3::IXMLDOMNamedNodeMap* notations = {read = get_notations};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml3::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml3::IXMLDOMNode* parentNode = {read = get_parentNode};
  __property   Msxml3::IXMLDOMNodeList* childNodes = {read = get_childNodes};
  __property   Msxml3::IXMLDOMNode* firstChild = {read = get_firstChild};
  __property   Msxml3::IXMLDOMNode* lastChild = {read = get_lastChild};
  __property   Msxml3::IXMLDOMNode* previousSibling = {read = get_previousSibling};
  __property   Msxml3::IXMLDOMNode* nextSibling = {read = get_nextSibling};
  __property   Msxml3::IXMLDOMNamedNodeMap* attributes = {read = get_attributes};
  __property   Msxml3::IXMLDOMDocument* ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text};
  __property   VARIANT_BOOL    specified = {read = get_specified};
  __property   Msxml3::IXMLDOMNode* definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   VARIANT_BOOL    parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMDocumentTypeDispT<IXMLDOMDocumentType> IXMLDOMDocumentTypeDisp;

typedef TComInterface<IXMLDOMElement>  TCOMIXMLDOMElement;

// *********************************************************************//
// DispIntf:  IXMLDOMElement
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF86-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMElementDispT : public TAutoDriver<IXMLDOMElement>
{
public:
  IXMLDOMElementDispT(){}

  IXMLDOMElementDispT(IXMLDOMElement *pintf)
  {
    TAutoDriver<IXMLDOMElement>::Bind(pintf, false);
  }

  IXMLDOMElementDispT(IXMLDOMElementPtr pintf)
  {
    TAutoDriver<IXMLDOMElement>::Bind(pintf, true);
  }

  IXMLDOMElementDispT& operator=(IXMLDOMElement *pintf)
  {
    TAutoDriver<IXMLDOMElement>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMElementDispT& operator=(IXMLDOMElementPtr pintf)
  {
    TAutoDriver<IXMLDOMElement>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_tagName(BSTR* tagName/*[out,retval]*/);
  BSTR            __fastcall get_tagName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getAttribute(BSTR name/*[in]*/, 
                                                     VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall getAttribute(BSTR name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setAttribute(BSTR name/*[in]*/, VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeAttribute(BSTR name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getAttributeNode(BSTR name/*[in]*/, 
                                                         Msxml3::IXMLDOMAttribute** attributeNode/*[out,retval]*/);
  Msxml3::IXMLDOMAttribute* __fastcall getAttributeNode(BSTR name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setAttributeNode(Msxml3::IXMLDOMAttribute* DOMAttribute/*[in]*/
                                                         , 
                                                         Msxml3::IXMLDOMAttribute** attributeNode/*[out,retval]*/);
  Msxml3::IXMLDOMAttribute* __fastcall setAttributeNode(Msxml3::IXMLDOMAttribute* DOMAttribute/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeAttributeNode(Msxml3::IXMLDOMAttribute* DOMAttribute/*[in]*/
                                                            , 
                                                            Msxml3::IXMLDOMAttribute** attributeNode/*[out,retval]*/);
  Msxml3::IXMLDOMAttribute* __fastcall removeAttributeNode(Msxml3::IXMLDOMAttribute* DOMAttribute/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getElementsByTagName(BSTR tagName/*[in]*/, 
                                                             Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall getElementsByTagName(BSTR tagName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall normalize();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeValue(VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall get_nodeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeValue(VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/);
  Msxml3::DOMNodeType __fastcall get_nodeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_parentNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall get_childNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_firstChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_lastChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_previousSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_nextSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/);
  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_attributes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     VARIANT refChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               VARIANT refChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               Msxml3::IXMLDOMNode* oldChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/);
  VARIANT_BOOL    __fastcall hasChildNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/);
  Msxml3::IXMLDOMDocument* __fastcall get_ownerDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                                  Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_text(BSTR text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_specified(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_definition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/);
  VARIANT         __fastcall get_nodeTypedValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeTypedValue(VARIANT typedValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_dataType(VARIANT* dataTypeName/*[out,retval]*/);
  VARIANT         __fastcall get_dataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                      BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                                    Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                                         Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_parsed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/
                                                              , VARIANT outputObject/*[in]*/);

  __property   BSTR            tagName = {read = get_tagName};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml3::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml3::IXMLDOMNode* parentNode = {read = get_parentNode};
  __property   Msxml3::IXMLDOMNodeList* childNodes = {read = get_childNodes};
  __property   Msxml3::IXMLDOMNode* firstChild = {read = get_firstChild};
  __property   Msxml3::IXMLDOMNode* lastChild = {read = get_lastChild};
  __property   Msxml3::IXMLDOMNode* previousSibling = {read = get_previousSibling};
  __property   Msxml3::IXMLDOMNode* nextSibling = {read = get_nextSibling};
  __property   Msxml3::IXMLDOMNamedNodeMap* attributes = {read = get_attributes};
  __property   Msxml3::IXMLDOMDocument* ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text};
  __property   VARIANT_BOOL    specified = {read = get_specified};
  __property   Msxml3::IXMLDOMNode* definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   VARIANT_BOOL    parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMElementDispT<IXMLDOMElement> IXMLDOMElementDisp;

typedef TComInterface<IXMLDOMAttribute>  TCOMIXMLDOMAttribute;

// *********************************************************************//
// DispIntf:  IXMLDOMAttribute
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF85-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMAttributeDispT : public TAutoDriver<IXMLDOMAttribute>
{
public:
  IXMLDOMAttributeDispT(){}

  IXMLDOMAttributeDispT(IXMLDOMAttribute *pintf)
  {
    TAutoDriver<IXMLDOMAttribute>::Bind(pintf, false);
  }

  IXMLDOMAttributeDispT(IXMLDOMAttributePtr pintf)
  {
    TAutoDriver<IXMLDOMAttribute>::Bind(pintf, true);
  }

  IXMLDOMAttributeDispT& operator=(IXMLDOMAttribute *pintf)
  {
    TAutoDriver<IXMLDOMAttribute>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMAttributeDispT& operator=(IXMLDOMAttributePtr pintf)
  {
    TAutoDriver<IXMLDOMAttribute>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_name(BSTR* attributeName/*[out,retval]*/);
  BSTR            __fastcall get_name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_value(VARIANT* attributeValue/*[out,retval]*/);
  VARIANT         __fastcall get_value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_value(VARIANT attributeValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeValue(VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall get_nodeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeValue(VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/);
  Msxml3::DOMNodeType __fastcall get_nodeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_parentNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall get_childNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_firstChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_lastChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_previousSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_nextSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/);
  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_attributes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     VARIANT refChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               VARIANT refChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               Msxml3::IXMLDOMNode* oldChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/);
  VARIANT_BOOL    __fastcall hasChildNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/);
  Msxml3::IXMLDOMDocument* __fastcall get_ownerDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                                  Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_text(BSTR text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_specified(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_definition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/);
  VARIANT         __fastcall get_nodeTypedValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeTypedValue(VARIANT typedValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_dataType(VARIANT* dataTypeName/*[out,retval]*/);
  VARIANT         __fastcall get_dataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                      BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                                    Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                                         Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_parsed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/
                                                              , VARIANT outputObject/*[in]*/);

  __property   BSTR            name = {read = get_name};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml3::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml3::IXMLDOMNode* parentNode = {read = get_parentNode};
  __property   Msxml3::IXMLDOMNodeList* childNodes = {read = get_childNodes};
  __property   Msxml3::IXMLDOMNode* firstChild = {read = get_firstChild};
  __property   Msxml3::IXMLDOMNode* lastChild = {read = get_lastChild};
  __property   Msxml3::IXMLDOMNode* previousSibling = {read = get_previousSibling};
  __property   Msxml3::IXMLDOMNode* nextSibling = {read = get_nextSibling};
  __property   Msxml3::IXMLDOMNamedNodeMap* attributes = {read = get_attributes};
  __property   Msxml3::IXMLDOMDocument* ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text};
  __property   VARIANT_BOOL    specified = {read = get_specified};
  __property   Msxml3::IXMLDOMNode* definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   VARIANT_BOOL    parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMAttributeDispT<IXMLDOMAttribute> IXMLDOMAttributeDisp;

typedef TComInterface<IXMLDOMDocumentFragment>  TCOMIXMLDOMDocumentFragment;

// *********************************************************************//
// DispIntf:  IXMLDOMDocumentFragment
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EFAA413-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
template<class T>
class IXMLDOMDocumentFragmentDispT : public TAutoDriver<IXMLDOMDocumentFragment>
{
public:
  IXMLDOMDocumentFragmentDispT(){}

  IXMLDOMDocumentFragmentDispT(IXMLDOMDocumentFragment *pintf)
  {
    TAutoDriver<IXMLDOMDocumentFragment>::Bind(pintf, false);
  }

  IXMLDOMDocumentFragmentDispT(IXMLDOMDocumentFragmentPtr pintf)
  {
    TAutoDriver<IXMLDOMDocumentFragment>::Bind(pintf, true);
  }

  IXMLDOMDocumentFragmentDispT& operator=(IXMLDOMDocumentFragment *pintf)
  {
    TAutoDriver<IXMLDOMDocumentFragment>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMDocumentFragmentDispT& operator=(IXMLDOMDocumentFragmentPtr pintf)
  {
    TAutoDriver<IXMLDOMDocumentFragment>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeValue(VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall get_nodeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeValue(VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/);
  Msxml3::DOMNodeType __fastcall get_nodeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_parentNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall get_childNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_firstChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_lastChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_previousSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_nextSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/);
  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_attributes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     VARIANT refChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               VARIANT refChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               Msxml3::IXMLDOMNode* oldChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/);
  VARIANT_BOOL    __fastcall hasChildNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/);
  Msxml3::IXMLDOMDocument* __fastcall get_ownerDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                                  Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_text(BSTR text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_specified(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_definition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/);
  VARIANT         __fastcall get_nodeTypedValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeTypedValue(VARIANT typedValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_dataType(VARIANT* dataTypeName/*[out,retval]*/);
  VARIANT         __fastcall get_dataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                      BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                                    Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                                         Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_parsed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/
                                                              , VARIANT outputObject/*[in]*/);


  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml3::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml3::IXMLDOMNode* parentNode = {read = get_parentNode};
  __property   Msxml3::IXMLDOMNodeList* childNodes = {read = get_childNodes};
  __property   Msxml3::IXMLDOMNode* firstChild = {read = get_firstChild};
  __property   Msxml3::IXMLDOMNode* lastChild = {read = get_lastChild};
  __property   Msxml3::IXMLDOMNode* previousSibling = {read = get_previousSibling};
  __property   Msxml3::IXMLDOMNode* nextSibling = {read = get_nextSibling};
  __property   Msxml3::IXMLDOMNamedNodeMap* attributes = {read = get_attributes};
  __property   Msxml3::IXMLDOMDocument* ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text};
  __property   VARIANT_BOOL    specified = {read = get_specified};
  __property   Msxml3::IXMLDOMNode* definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   VARIANT_BOOL    parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMDocumentFragmentDispT<IXMLDOMDocumentFragment> IXMLDOMDocumentFragmentDisp;

typedef TComInterface<IXMLDOMCharacterData>  TCOMIXMLDOMCharacterData;

// *********************************************************************//
// DispIntf:  IXMLDOMCharacterData
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF84-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMCharacterDataDispT : public TAutoDriver<IXMLDOMCharacterData>
{
public:
  IXMLDOMCharacterDataDispT(){}

  IXMLDOMCharacterDataDispT(IXMLDOMCharacterData *pintf)
  {
    TAutoDriver<IXMLDOMCharacterData>::Bind(pintf, false);
  }

  IXMLDOMCharacterDataDispT(IXMLDOMCharacterDataPtr pintf)
  {
    TAutoDriver<IXMLDOMCharacterData>::Bind(pintf, true);
  }

  IXMLDOMCharacterDataDispT& operator=(IXMLDOMCharacterData *pintf)
  {
    TAutoDriver<IXMLDOMCharacterData>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMCharacterDataDispT& operator=(IXMLDOMCharacterDataPtr pintf)
  {
    TAutoDriver<IXMLDOMCharacterData>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_data(BSTR* data/*[out,retval]*/);
  BSTR            __fastcall get_data(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_data(BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_length(long* dataLength/*[out,retval]*/);
  long            __fastcall get_length(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall substringData(long offset/*[in]*/, long count/*[in]*/, 
                                                      BSTR* data/*[out,retval]*/);
  BSTR            __fastcall substringData(long offset/*[in]*/, long count/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendData(BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertData(long offset/*[in]*/, BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall deleteData(long offset/*[in]*/, long count/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceData(long offset/*[in]*/, long count/*[in]*/, 
                                                    BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeValue(VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall get_nodeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeValue(VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/);
  Msxml3::DOMNodeType __fastcall get_nodeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_parentNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall get_childNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_firstChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_lastChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_previousSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_nextSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/);
  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_attributes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     VARIANT refChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               VARIANT refChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               Msxml3::IXMLDOMNode* oldChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/);
  VARIANT_BOOL    __fastcall hasChildNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/);
  Msxml3::IXMLDOMDocument* __fastcall get_ownerDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                                  Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_text(BSTR text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_specified(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_definition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/);
  VARIANT         __fastcall get_nodeTypedValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeTypedValue(VARIANT typedValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_dataType(VARIANT* dataTypeName/*[out,retval]*/);
  VARIANT         __fastcall get_dataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                      BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                                    Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                                         Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_parsed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/
                                                              , VARIANT outputObject/*[in]*/);

  __property   BSTR            data = {read = get_data};
  __property   long            length = {read = get_length};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml3::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml3::IXMLDOMNode* parentNode = {read = get_parentNode};
  __property   Msxml3::IXMLDOMNodeList* childNodes = {read = get_childNodes};
  __property   Msxml3::IXMLDOMNode* firstChild = {read = get_firstChild};
  __property   Msxml3::IXMLDOMNode* lastChild = {read = get_lastChild};
  __property   Msxml3::IXMLDOMNode* previousSibling = {read = get_previousSibling};
  __property   Msxml3::IXMLDOMNode* nextSibling = {read = get_nextSibling};
  __property   Msxml3::IXMLDOMNamedNodeMap* attributes = {read = get_attributes};
  __property   Msxml3::IXMLDOMDocument* ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text};
  __property   VARIANT_BOOL    specified = {read = get_specified};
  __property   Msxml3::IXMLDOMNode* definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   VARIANT_BOOL    parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMCharacterDataDispT<IXMLDOMCharacterData> IXMLDOMCharacterDataDisp;

typedef TComInterface<IXMLDOMText>  TCOMIXMLDOMText;

// *********************************************************************//
// DispIntf:  IXMLDOMText
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF87-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMTextDispT : public TAutoDriver<IXMLDOMText>
{
public:
  IXMLDOMTextDispT(){}

  IXMLDOMTextDispT(IXMLDOMText *pintf)
  {
    TAutoDriver<IXMLDOMText>::Bind(pintf, false);
  }

  IXMLDOMTextDispT(IXMLDOMTextPtr pintf)
  {
    TAutoDriver<IXMLDOMText>::Bind(pintf, true);
  }

  IXMLDOMTextDispT& operator=(IXMLDOMText *pintf)
  {
    TAutoDriver<IXMLDOMText>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMTextDispT& operator=(IXMLDOMTextPtr pintf)
  {
    TAutoDriver<IXMLDOMText>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall splitText(long offset/*[in]*/, 
                                                  Msxml3::IXMLDOMCharacterData** rightHandTextNode/*[out,retval]*/);
  Msxml3::IXMLDOMCharacterData* __fastcall splitText(long offset/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_data(BSTR* data/*[out,retval]*/);
  BSTR            __fastcall get_data(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_data(BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_length(long* dataLength/*[out,retval]*/);
  long            __fastcall get_length(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall substringData(long offset/*[in]*/, long count/*[in]*/, 
                                                      BSTR* data/*[out,retval]*/);
  BSTR            __fastcall substringData(long offset/*[in]*/, long count/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendData(BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertData(long offset/*[in]*/, BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall deleteData(long offset/*[in]*/, long count/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceData(long offset/*[in]*/, long count/*[in]*/, 
                                                    BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeValue(VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall get_nodeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeValue(VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/);
  Msxml3::DOMNodeType __fastcall get_nodeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_parentNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall get_childNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_firstChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_lastChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_previousSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_nextSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/);
  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_attributes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     VARIANT refChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               VARIANT refChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               Msxml3::IXMLDOMNode* oldChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/);
  VARIANT_BOOL    __fastcall hasChildNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/);
  Msxml3::IXMLDOMDocument* __fastcall get_ownerDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                                  Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_text(BSTR text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_specified(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_definition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/);
  VARIANT         __fastcall get_nodeTypedValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeTypedValue(VARIANT typedValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_dataType(VARIANT* dataTypeName/*[out,retval]*/);
  VARIANT         __fastcall get_dataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                      BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                                    Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                                         Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_parsed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/
                                                              , VARIANT outputObject/*[in]*/);


  __property   BSTR            data = {read = get_data};
  __property   long            length = {read = get_length};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml3::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml3::IXMLDOMNode* parentNode = {read = get_parentNode};
  __property   Msxml3::IXMLDOMNodeList* childNodes = {read = get_childNodes};
  __property   Msxml3::IXMLDOMNode* firstChild = {read = get_firstChild};
  __property   Msxml3::IXMLDOMNode* lastChild = {read = get_lastChild};
  __property   Msxml3::IXMLDOMNode* previousSibling = {read = get_previousSibling};
  __property   Msxml3::IXMLDOMNode* nextSibling = {read = get_nextSibling};
  __property   Msxml3::IXMLDOMNamedNodeMap* attributes = {read = get_attributes};
  __property   Msxml3::IXMLDOMDocument* ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text};
  __property   VARIANT_BOOL    specified = {read = get_specified};
  __property   Msxml3::IXMLDOMNode* definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   VARIANT_BOOL    parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMTextDispT<IXMLDOMText> IXMLDOMTextDisp;

typedef TComInterface<IXMLDOMComment>  TCOMIXMLDOMComment;

// *********************************************************************//
// DispIntf:  IXMLDOMComment
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF88-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMCommentDispT : public TAutoDriver<IXMLDOMComment>
{
public:
  IXMLDOMCommentDispT(){}

  IXMLDOMCommentDispT(IXMLDOMComment *pintf)
  {
    TAutoDriver<IXMLDOMComment>::Bind(pintf, false);
  }

  IXMLDOMCommentDispT(IXMLDOMCommentPtr pintf)
  {
    TAutoDriver<IXMLDOMComment>::Bind(pintf, true);
  }

  IXMLDOMCommentDispT& operator=(IXMLDOMComment *pintf)
  {
    TAutoDriver<IXMLDOMComment>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMCommentDispT& operator=(IXMLDOMCommentPtr pintf)
  {
    TAutoDriver<IXMLDOMComment>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_data(BSTR* data/*[out,retval]*/);
  BSTR            __fastcall get_data(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_data(BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_length(long* dataLength/*[out,retval]*/);
  long            __fastcall get_length(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall substringData(long offset/*[in]*/, long count/*[in]*/, 
                                                      BSTR* data/*[out,retval]*/);
  BSTR            __fastcall substringData(long offset/*[in]*/, long count/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendData(BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertData(long offset/*[in]*/, BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall deleteData(long offset/*[in]*/, long count/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceData(long offset/*[in]*/, long count/*[in]*/, 
                                                    BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeValue(VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall get_nodeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeValue(VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/);
  Msxml3::DOMNodeType __fastcall get_nodeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_parentNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall get_childNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_firstChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_lastChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_previousSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_nextSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/);
  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_attributes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     VARIANT refChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               VARIANT refChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               Msxml3::IXMLDOMNode* oldChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/);
  VARIANT_BOOL    __fastcall hasChildNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/);
  Msxml3::IXMLDOMDocument* __fastcall get_ownerDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                                  Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_text(BSTR text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_specified(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_definition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/);
  VARIANT         __fastcall get_nodeTypedValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeTypedValue(VARIANT typedValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_dataType(VARIANT* dataTypeName/*[out,retval]*/);
  VARIANT         __fastcall get_dataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                      BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                                    Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                                         Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_parsed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/
                                                              , VARIANT outputObject/*[in]*/);


  __property   BSTR            data = {read = get_data};
  __property   long            length = {read = get_length};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml3::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml3::IXMLDOMNode* parentNode = {read = get_parentNode};
  __property   Msxml3::IXMLDOMNodeList* childNodes = {read = get_childNodes};
  __property   Msxml3::IXMLDOMNode* firstChild = {read = get_firstChild};
  __property   Msxml3::IXMLDOMNode* lastChild = {read = get_lastChild};
  __property   Msxml3::IXMLDOMNode* previousSibling = {read = get_previousSibling};
  __property   Msxml3::IXMLDOMNode* nextSibling = {read = get_nextSibling};
  __property   Msxml3::IXMLDOMNamedNodeMap* attributes = {read = get_attributes};
  __property   Msxml3::IXMLDOMDocument* ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text};
  __property   VARIANT_BOOL    specified = {read = get_specified};
  __property   Msxml3::IXMLDOMNode* definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   VARIANT_BOOL    parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMCommentDispT<IXMLDOMComment> IXMLDOMCommentDisp;

typedef TComInterface<IXMLDOMCDATASection>  TCOMIXMLDOMCDATASection;

// *********************************************************************//
// DispIntf:  IXMLDOMCDATASection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8A-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMCDATASectionDispT : public TAutoDriver<IXMLDOMCDATASection>
{
public:
  IXMLDOMCDATASectionDispT(){}

  IXMLDOMCDATASectionDispT(IXMLDOMCDATASection *pintf)
  {
    TAutoDriver<IXMLDOMCDATASection>::Bind(pintf, false);
  }

  IXMLDOMCDATASectionDispT(IXMLDOMCDATASectionPtr pintf)
  {
    TAutoDriver<IXMLDOMCDATASection>::Bind(pintf, true);
  }

  IXMLDOMCDATASectionDispT& operator=(IXMLDOMCDATASection *pintf)
  {
    TAutoDriver<IXMLDOMCDATASection>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMCDATASectionDispT& operator=(IXMLDOMCDATASectionPtr pintf)
  {
    TAutoDriver<IXMLDOMCDATASection>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall splitText(long offset/*[in]*/, 
                                                  Msxml3::IXMLDOMCharacterData** rightHandTextNode/*[out,retval]*/);
  Msxml3::IXMLDOMCharacterData* __fastcall splitText(long offset/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_data(BSTR* data/*[out,retval]*/);
  BSTR            __fastcall get_data(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_data(BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_length(long* dataLength/*[out,retval]*/);
  long            __fastcall get_length(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall substringData(long offset/*[in]*/, long count/*[in]*/, 
                                                      BSTR* data/*[out,retval]*/);
  BSTR            __fastcall substringData(long offset/*[in]*/, long count/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendData(BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertData(long offset/*[in]*/, BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall deleteData(long offset/*[in]*/, long count/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceData(long offset/*[in]*/, long count/*[in]*/, 
                                                    BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeValue(VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall get_nodeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeValue(VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/);
  Msxml3::DOMNodeType __fastcall get_nodeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_parentNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall get_childNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_firstChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_lastChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_previousSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_nextSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/);
  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_attributes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     VARIANT refChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               VARIANT refChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               Msxml3::IXMLDOMNode* oldChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/);
  VARIANT_BOOL    __fastcall hasChildNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/);
  Msxml3::IXMLDOMDocument* __fastcall get_ownerDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                                  Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_text(BSTR text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_specified(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_definition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/);
  VARIANT         __fastcall get_nodeTypedValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeTypedValue(VARIANT typedValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_dataType(VARIANT* dataTypeName/*[out,retval]*/);
  VARIANT         __fastcall get_dataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                      BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                                    Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                                         Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_parsed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/
                                                              , VARIANT outputObject/*[in]*/);



  __property   BSTR            data = {read = get_data};
  __property   long            length = {read = get_length};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml3::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml3::IXMLDOMNode* parentNode = {read = get_parentNode};
  __property   Msxml3::IXMLDOMNodeList* childNodes = {read = get_childNodes};
  __property   Msxml3::IXMLDOMNode* firstChild = {read = get_firstChild};
  __property   Msxml3::IXMLDOMNode* lastChild = {read = get_lastChild};
  __property   Msxml3::IXMLDOMNode* previousSibling = {read = get_previousSibling};
  __property   Msxml3::IXMLDOMNode* nextSibling = {read = get_nextSibling};
  __property   Msxml3::IXMLDOMNamedNodeMap* attributes = {read = get_attributes};
  __property   Msxml3::IXMLDOMDocument* ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text};
  __property   VARIANT_BOOL    specified = {read = get_specified};
  __property   Msxml3::IXMLDOMNode* definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   VARIANT_BOOL    parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMCDATASectionDispT<IXMLDOMCDATASection> IXMLDOMCDATASectionDisp;

typedef TComInterface<IXMLDOMProcessingInstruction>  TCOMIXMLDOMProcessingInstruction;

// *********************************************************************//
// DispIntf:  IXMLDOMProcessingInstruction
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF89-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMProcessingInstructionDispT : public TAutoDriver<IXMLDOMProcessingInstruction>
{
public:
  IXMLDOMProcessingInstructionDispT(){}

  IXMLDOMProcessingInstructionDispT(IXMLDOMProcessingInstruction *pintf)
  {
    TAutoDriver<IXMLDOMProcessingInstruction>::Bind(pintf, false);
  }

  IXMLDOMProcessingInstructionDispT(IXMLDOMProcessingInstructionPtr pintf)
  {
    TAutoDriver<IXMLDOMProcessingInstruction>::Bind(pintf, true);
  }

  IXMLDOMProcessingInstructionDispT& operator=(IXMLDOMProcessingInstruction *pintf)
  {
    TAutoDriver<IXMLDOMProcessingInstruction>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMProcessingInstructionDispT& operator=(IXMLDOMProcessingInstructionPtr pintf)
  {
    TAutoDriver<IXMLDOMProcessingInstruction>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_target(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_target(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_data(BSTR* value/*[out,retval]*/);
  BSTR            __fastcall get_data(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_data(BSTR value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeValue(VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall get_nodeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeValue(VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/);
  Msxml3::DOMNodeType __fastcall get_nodeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_parentNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall get_childNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_firstChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_lastChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_previousSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_nextSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/);
  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_attributes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     VARIANT refChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               VARIANT refChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               Msxml3::IXMLDOMNode* oldChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/);
  VARIANT_BOOL    __fastcall hasChildNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/);
  Msxml3::IXMLDOMDocument* __fastcall get_ownerDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                                  Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_text(BSTR text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_specified(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_definition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/);
  VARIANT         __fastcall get_nodeTypedValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeTypedValue(VARIANT typedValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_dataType(VARIANT* dataTypeName/*[out,retval]*/);
  VARIANT         __fastcall get_dataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                      BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                                    Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                                         Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_parsed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/
                                                              , VARIANT outputObject/*[in]*/);

  __property   BSTR            target = {read = get_target};
  __property   BSTR            data = {read = get_data};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml3::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml3::IXMLDOMNode* parentNode = {read = get_parentNode};
  __property   Msxml3::IXMLDOMNodeList* childNodes = {read = get_childNodes};
  __property   Msxml3::IXMLDOMNode* firstChild = {read = get_firstChild};
  __property   Msxml3::IXMLDOMNode* lastChild = {read = get_lastChild};
  __property   Msxml3::IXMLDOMNode* previousSibling = {read = get_previousSibling};
  __property   Msxml3::IXMLDOMNode* nextSibling = {read = get_nextSibling};
  __property   Msxml3::IXMLDOMNamedNodeMap* attributes = {read = get_attributes};
  __property   Msxml3::IXMLDOMDocument* ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text};
  __property   VARIANT_BOOL    specified = {read = get_specified};
  __property   Msxml3::IXMLDOMNode* definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   VARIANT_BOOL    parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMProcessingInstructionDispT<IXMLDOMProcessingInstruction> IXMLDOMProcessingInstructionDisp;

typedef TComInterface<IXMLDOMEntityReference>  TCOMIXMLDOMEntityReference;

// *********************************************************************//
// DispIntf:  IXMLDOMEntityReference
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8E-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMEntityReferenceDispT : public TAutoDriver<IXMLDOMEntityReference>
{
public:
  IXMLDOMEntityReferenceDispT(){}

  IXMLDOMEntityReferenceDispT(IXMLDOMEntityReference *pintf)
  {
    TAutoDriver<IXMLDOMEntityReference>::Bind(pintf, false);
  }

  IXMLDOMEntityReferenceDispT(IXMLDOMEntityReferencePtr pintf)
  {
    TAutoDriver<IXMLDOMEntityReference>::Bind(pintf, true);
  }

  IXMLDOMEntityReferenceDispT& operator=(IXMLDOMEntityReference *pintf)
  {
    TAutoDriver<IXMLDOMEntityReference>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMEntityReferenceDispT& operator=(IXMLDOMEntityReferencePtr pintf)
  {
    TAutoDriver<IXMLDOMEntityReference>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeValue(VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall get_nodeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeValue(VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/);
  Msxml3::DOMNodeType __fastcall get_nodeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_parentNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall get_childNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_firstChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_lastChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_previousSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_nextSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/);
  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_attributes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     VARIANT refChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               VARIANT refChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               Msxml3::IXMLDOMNode* oldChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/);
  VARIANT_BOOL    __fastcall hasChildNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/);
  Msxml3::IXMLDOMDocument* __fastcall get_ownerDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                                  Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_text(BSTR text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_specified(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_definition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/);
  VARIANT         __fastcall get_nodeTypedValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeTypedValue(VARIANT typedValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_dataType(VARIANT* dataTypeName/*[out,retval]*/);
  VARIANT         __fastcall get_dataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                      BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                                    Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                                         Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_parsed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/
                                                              , VARIANT outputObject/*[in]*/);


  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml3::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml3::IXMLDOMNode* parentNode = {read = get_parentNode};
  __property   Msxml3::IXMLDOMNodeList* childNodes = {read = get_childNodes};
  __property   Msxml3::IXMLDOMNode* firstChild = {read = get_firstChild};
  __property   Msxml3::IXMLDOMNode* lastChild = {read = get_lastChild};
  __property   Msxml3::IXMLDOMNode* previousSibling = {read = get_previousSibling};
  __property   Msxml3::IXMLDOMNode* nextSibling = {read = get_nextSibling};
  __property   Msxml3::IXMLDOMNamedNodeMap* attributes = {read = get_attributes};
  __property   Msxml3::IXMLDOMDocument* ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text};
  __property   VARIANT_BOOL    specified = {read = get_specified};
  __property   Msxml3::IXMLDOMNode* definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   VARIANT_BOOL    parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMEntityReferenceDispT<IXMLDOMEntityReference> IXMLDOMEntityReferenceDisp;

typedef TComInterface<IXMLDOMParseError>  TCOMIXMLDOMParseError;

// *********************************************************************//
// DispIntf:  IXMLDOMParseError
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EFAA426-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
template<class T>
class IXMLDOMParseErrorDispT : public TAutoDriver<IXMLDOMParseError>
{
public:
  IXMLDOMParseErrorDispT(){}

  IXMLDOMParseErrorDispT(IXMLDOMParseError *pintf)
  {
    TAutoDriver<IXMLDOMParseError>::Bind(pintf, false);
  }

  IXMLDOMParseErrorDispT(IXMLDOMParseErrorPtr pintf)
  {
    TAutoDriver<IXMLDOMParseError>::Bind(pintf, true);
  }

  IXMLDOMParseErrorDispT& operator=(IXMLDOMParseError *pintf)
  {
    TAutoDriver<IXMLDOMParseError>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMParseErrorDispT& operator=(IXMLDOMParseErrorPtr pintf)
  {
    TAutoDriver<IXMLDOMParseError>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_errorCode(long* errorCode/*[out,retval]*/);
  long            __fastcall get_errorCode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_url(BSTR* urlString/*[out,retval]*/);
  BSTR            __fastcall get_url(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_reason(BSTR* reasonString/*[out,retval]*/);
  BSTR            __fastcall get_reason(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_srcText(BSTR* sourceString/*[out,retval]*/);
  BSTR            __fastcall get_srcText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_line(long* lineNumber/*[out,retval]*/);
  long            __fastcall get_line(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_linepos(long* linePosition/*[out,retval]*/);
  long            __fastcall get_linepos(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_filepos(long* filePosition/*[out,retval]*/);
  long            __fastcall get_filepos(void);

  __property   long            errorCode = {read = get_errorCode};
  __property   BSTR            url = {read = get_url};
  __property   BSTR            reason = {read = get_reason};
  __property   BSTR            srcText = {read = get_srcText};
  __property   long            line = {read = get_line};
  __property   long            linepos = {read = get_linepos};
  __property   long            filepos = {read = get_filepos};
};
typedef IXMLDOMParseErrorDispT<IXMLDOMParseError> IXMLDOMParseErrorDisp;

// *********************************************************************//
// SmartIntf: TCOMIXMLDOMSchemaCollection
// Interface: IXMLDOMSchemaCollection
// *********************************************************************//
template <class T /* IXMLDOMSchemaCollection */ >
class TCOMIXMLDOMSchemaCollectionT : public TComInterface<IXMLDOMSchemaCollection>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIXMLDOMSchemaCollectionT() {}
  TCOMIXMLDOMSchemaCollectionT(IXMLDOMSchemaCollection *intf, bool addRef = false) : TComInterface<IXMLDOMSchemaCollection>(intf, addRef) {}
  TCOMIXMLDOMSchemaCollectionT(const TCOMIXMLDOMSchemaCollectionT& src) : TComInterface<IXMLDOMSchemaCollection>(src) {}
  TCOMIXMLDOMSchemaCollectionT& operator=(const TCOMIXMLDOMSchemaCollectionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall add(BSTR namespaceURI/*[in]*/, VARIANT var/*[in]*/);
  HRESULT         __fastcall get(BSTR namespaceURI/*[in]*/, 
                                 Msxml3::IXMLDOMNode** schemaNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get(BSTR namespaceURI/*[in]*/);
  HRESULT         __fastcall remove(BSTR namespaceURI/*[in]*/);
  HRESULT         __fastcall get_length(long* length/*[out,retval]*/);
  long            __fastcall get_length(void);
  HRESULT         __fastcall get_namespaceURI(long index/*[in]*/, BSTR* length/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(long index/*[in]*/);
  HRESULT         __fastcall addCollection(Msxml3::IXMLDOMSchemaCollection* otherCollection/*[in]*/);
  HRESULT         __fastcall get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__newEnum(void);

  __property   long            length = {read = get_length};
  __property   LPUNKNOWN       _newEnum = {read = get__newEnum};
};
typedef TCOMIXMLDOMSchemaCollectionT<IXMLDOMSchemaCollection> TCOMIXMLDOMSchemaCollection;

// *********************************************************************//
// DispIntf:  IXMLDOMSchemaCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {373984C8-B845-449B-91E7-45AC83036ADE}
// *********************************************************************//
template<class T>
class IXMLDOMSchemaCollectionDispT : public TAutoDriver<IXMLDOMSchemaCollection>
{
public:
  IXMLDOMSchemaCollectionDispT(){}

  IXMLDOMSchemaCollectionDispT(IXMLDOMSchemaCollection *pintf)
  {
    TAutoDriver<IXMLDOMSchemaCollection>::Bind(pintf, false);
  }

  IXMLDOMSchemaCollectionDispT(IXMLDOMSchemaCollectionPtr pintf)
  {
    TAutoDriver<IXMLDOMSchemaCollection>::Bind(pintf, true);
  }

  IXMLDOMSchemaCollectionDispT& operator=(IXMLDOMSchemaCollection *pintf)
  {
    TAutoDriver<IXMLDOMSchemaCollection>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMSchemaCollectionDispT& operator=(IXMLDOMSchemaCollectionPtr pintf)
  {
    TAutoDriver<IXMLDOMSchemaCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_msXMLSchemaCache));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_msXMLSchemaCache);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall add(BSTR namespaceURI/*[in]*/, VARIANT var/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get(BSTR namespaceURI/*[in]*/, 
                                            Msxml3::IXMLDOMNode** schemaNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get(BSTR namespaceURI/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall remove(BSTR namespaceURI/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_length(long* length/*[out,retval]*/);
  long            __fastcall get_length(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_namespaceURI(long index/*[in]*/, 
                                                         BSTR* length/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(long index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall addCollection(Msxml3::IXMLDOMSchemaCollection* otherCollection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__newEnum(void);

  __property   long            length = {read = get_length};
  __property   LPUNKNOWN       _newEnum = {read = get__newEnum};
};
typedef IXMLDOMSchemaCollectionDispT<IXMLDOMSchemaCollection> IXMLDOMSchemaCollectionDisp;

// *********************************************************************//
// SmartIntf: TCOMIXMLDOMDocument2
// Interface: IXMLDOMDocument2
// *********************************************************************//
template <class T /* IXMLDOMDocument2 */ >
class TCOMIXMLDOMDocument2T : public TComInterface<IXMLDOMDocument2>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIXMLDOMDocument2T() {}
  TCOMIXMLDOMDocument2T(IXMLDOMDocument2 *intf, bool addRef = false) : TComInterface<IXMLDOMDocument2>(intf, addRef) {}
  TCOMIXMLDOMDocument2T(const TCOMIXMLDOMDocument2T& src) : TComInterface<IXMLDOMDocument2>(src) {}
  TCOMIXMLDOMDocument2T& operator=(const TCOMIXMLDOMDocument2T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_namespaces(Msxml3::IXMLDOMSchemaCollection** namespaceCollection/*[out,retval]*/);
  HRESULT         __fastcall get_namespaces(Msxml3::IXMLDOMSchemaCollectionPtr* namespaceCollection/*[out,retval]*/);
  Msxml3::IXMLDOMSchemaCollectionPtr __fastcall get_namespaces(void);
  HRESULT         __fastcall get_schemas(VARIANT* otherCollection/*[out,retval]*/);
  VARIANT         __fastcall get_schemas(void);
  HRESULT         __fastcall _set_schemas(VARIANT otherCollection/*[in]*/);
  HRESULT         __fastcall validate(Msxml3::IXMLDOMParseError** errorObj/*[out,retval]*/);
  Msxml3::IXMLDOMParseError* __fastcall validate(void);
  HRESULT         __fastcall setProperty(BSTR name/*[in]*/, VARIANT value/*[in]*/);
  HRESULT         __fastcall getProperty(BSTR name/*[in]*/, VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall getProperty(BSTR name/*[in]*/);

  __property   Msxml3::IXMLDOMSchemaCollectionPtr namespaces = {read = get_namespaces};
};
typedef TCOMIXMLDOMDocument2T<IXMLDOMDocument2> TCOMIXMLDOMDocument2;

// *********************************************************************//
// DispIntf:  IXMLDOMDocument2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF95-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMDocument2DispT : public TAutoDriver<IXMLDOMDocument2>
{
public:
  IXMLDOMDocument2DispT(){}

  IXMLDOMDocument2DispT(IXMLDOMDocument2 *pintf)
  {
    TAutoDriver<IXMLDOMDocument2>::Bind(pintf, false);
  }

  IXMLDOMDocument2DispT(IXMLDOMDocument2Ptr pintf)
  {
    TAutoDriver<IXMLDOMDocument2>::Bind(pintf, true);
  }

  IXMLDOMDocument2DispT& operator=(IXMLDOMDocument2 *pintf)
  {
    TAutoDriver<IXMLDOMDocument2>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMDocument2DispT& operator=(IXMLDOMDocument2Ptr pintf)
  {
    TAutoDriver<IXMLDOMDocument2>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_msDOMDocument));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_msDOMDocument);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_namespaces(Msxml3::IXMLDOMSchemaCollection** namespaceCollection/*[out,retval]*/);
  Msxml3::IXMLDOMSchemaCollection* __fastcall get_namespaces(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_schemas(VARIANT* otherCollection/*[out,retval]*/);
  VARIANT         __fastcall get_schemas(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_schemas(VARIANT otherCollection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall validate(Msxml3::IXMLDOMParseError** errorObj/*[out,retval]*/);
  Msxml3::IXMLDOMParseError* __fastcall validate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setProperty(BSTR name/*[in]*/, VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getProperty(BSTR name/*[in]*/, 
                                                    VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall getProperty(BSTR name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_doctype(Msxml3::IXMLDOMDocumentType** documentType/*[out,retval]*/);
  Msxml3::IXMLDOMDocumentType* __fastcall get_doctype(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_implementation(Msxml3::IXMLDOMImplementation** impl/*[out,retval]*/);
  Msxml3::IXMLDOMImplementation* __fastcall get_implementation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_documentElement(Msxml3::IXMLDOMElement** DOMElement/*[out,retval]*/);
  Msxml3::IXMLDOMElement* __fastcall get_documentElement(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_documentElement(Msxml3::IXMLDOMElement* DOMElement/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createElement(BSTR tagName/*[in]*/, 
                                                      Msxml3::IXMLDOMElement** element/*[out,retval]*/);
  Msxml3::IXMLDOMElement* __fastcall createElement(BSTR tagName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createDocumentFragment(Msxml3::IXMLDOMDocumentFragment** docFrag/*[out,retval]*/);
  Msxml3::IXMLDOMDocumentFragment* __fastcall createDocumentFragment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createTextNode(BSTR data/*[in]*/, 
                                                       Msxml3::IXMLDOMCharacterData** text/*[out,retval]*/);
  Msxml3::IXMLDOMCharacterData* __fastcall createTextNode(BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createComment(BSTR data/*[in]*/, 
                                                      Msxml3::IXMLDOMComment** comment/*[out,retval]*/);
  Msxml3::IXMLDOMComment* __fastcall createComment(BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createCDATASection(BSTR data/*[in]*/, 
                                                           Msxml3::IXMLDOMCDATASection** cdata/*[out,retval]*/);
  Msxml3::IXMLDOMCDATASection* __fastcall createCDATASection(BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createProcessingInstruction(BSTR target/*[in]*/, 
                                                                    BSTR data/*[in]*/, 
                                                                    Msxml3::IXMLDOMProcessingInstruction** pi/*[out,retval]*/);
  Msxml3::IXMLDOMProcessingInstruction* __fastcall createProcessingInstruction(BSTR target/*[in]*/, 
                                                                               BSTR data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createAttribute(BSTR name/*[in]*/, 
                                                        Msxml3::IXMLDOMAttribute** attribute/*[out,retval]*/);
  Msxml3::IXMLDOMAttribute* __fastcall createAttribute(BSTR name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createEntityReference(BSTR name/*[in]*/, 
                                                              Msxml3::IXMLDOMEntityReference** entityRef/*[out,retval]*/);
  Msxml3::IXMLDOMEntityReference* __fastcall createEntityReference(BSTR name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getElementsByTagName(BSTR tagName/*[in]*/, 
                                                             Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall getElementsByTagName(BSTR tagName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createNode(VARIANT type/*[in]*/, BSTR name/*[in]*/, 
                                                   BSTR namespaceURI/*[in]*/, 
                                                   Msxml3::IXMLDOMNode** node/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall createNode(VARIANT type/*[in]*/, BSTR name/*[in]*/, 
                                             BSTR namespaceURI/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall nodeFromID(BSTR idString/*[in]*/, 
                                                   Msxml3::IXMLDOMNode** node/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall nodeFromID(BSTR idString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall load(VARIANT xmlSource/*[in]*/, 
                                             VARIANT_BOOL* isSuccessful/*[out,retval]*/);
  VARIANT_BOOL    __fastcall load(VARIANT xmlSource/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_readyState(long* value/*[out,retval]*/);
  long            __fastcall get_readyState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parseError(Msxml3::IXMLDOMParseError** errorObj/*[out,retval]*/);
  Msxml3::IXMLDOMParseError* __fastcall get_parseError(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_url(BSTR* urlString/*[out,retval]*/);
  BSTR            __fastcall get_url(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_async(VARIANT_BOOL* isAsync/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_async(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_async(VARIANT_BOOL isAsync/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall abort();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall loadXML(BSTR bstrXML/*[in]*/, 
                                                VARIANT_BOOL* isSuccessful/*[out,retval]*/);
  VARIANT_BOOL    __fastcall loadXML(BSTR bstrXML/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall save(VARIANT destination/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_validateOnParse(VARIANT_BOOL* isValidating/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_validateOnParse(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_validateOnParse(VARIANT_BOOL isValidating/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_resolveExternals(VARIANT_BOOL* isResolving/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_resolveExternals(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_resolveExternals(VARIANT_BOOL isResolving/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_preserveWhiteSpace(VARIANT_BOOL* isPreserving/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_preserveWhiteSpace(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_preserveWhiteSpace(VARIANT_BOOL isPreserving/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_onreadystatechange(VARIANT Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ondataavailable(VARIANT Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ontransformnode(VARIANT Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeValue(VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall get_nodeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeValue(VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/);
  Msxml3::DOMNodeType __fastcall get_nodeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_parentNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall get_childNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_firstChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_lastChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_previousSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_nextSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/);
  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_attributes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     VARIANT refChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               VARIANT refChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               Msxml3::IXMLDOMNode* oldChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/);
  VARIANT_BOOL    __fastcall hasChildNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/);
  Msxml3::IXMLDOMDocument* __fastcall get_ownerDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                                  Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_text(BSTR text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_specified(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_definition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/);
  VARIANT         __fastcall get_nodeTypedValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeTypedValue(VARIANT typedValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_dataType(VARIANT* dataTypeName/*[out,retval]*/);
  VARIANT         __fastcall get_dataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                      BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                                    Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                                         Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_parsed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/
                                                              , VARIANT outputObject/*[in]*/);

  __property   Msxml3::IXMLDOMSchemaCollection* namespaces = {read = get_namespaces};

  __property   Msxml3::IXMLDOMDocumentType* doctype = {read = get_doctype};
  __property   Msxml3::IXMLDOMImplementation* implementation = {read = get_implementation};
  __property   Msxml3::IXMLDOMElement* documentElement = {read = get_documentElement, write = _set_documentElement};
  __property   long            readyState = {read = get_readyState};
  __property   Msxml3::IXMLDOMParseError* parseError = {read = get_parseError};
  __property   BSTR            url = {read = get_url};
  __property   VARIANT_BOOL    async = {read = get_async, write = set_async};
  __property   VARIANT_BOOL    validateOnParse = {read = get_validateOnParse, write = set_validateOnParse};
  __property   VARIANT_BOOL    resolveExternals = {read = get_resolveExternals, write = set_resolveExternals};
  __property   VARIANT_BOOL    preserveWhiteSpace = {read = get_preserveWhiteSpace, write = set_preserveWhiteSpace};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml3::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml3::IXMLDOMNode* parentNode = {read = get_parentNode};
  __property   Msxml3::IXMLDOMNodeList* childNodes = {read = get_childNodes};
  __property   Msxml3::IXMLDOMNode* firstChild = {read = get_firstChild};
  __property   Msxml3::IXMLDOMNode* lastChild = {read = get_lastChild};
  __property   Msxml3::IXMLDOMNode* previousSibling = {read = get_previousSibling};
  __property   Msxml3::IXMLDOMNode* nextSibling = {read = get_nextSibling};
  __property   Msxml3::IXMLDOMNamedNodeMap* attributes = {read = get_attributes};
  __property   Msxml3::IXMLDOMDocument* ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text};
  __property   VARIANT_BOOL    specified = {read = get_specified};
  __property   Msxml3::IXMLDOMNode* definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   VARIANT_BOOL    parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMDocument2DispT<IXMLDOMDocument2> IXMLDOMDocument2Disp;

typedef TComInterface<IXMLDOMNotation>  TCOMIXMLDOMNotation;

// *********************************************************************//
// DispIntf:  IXMLDOMNotation
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8C-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMNotationDispT : public TAutoDriver<IXMLDOMNotation>
{
public:
  IXMLDOMNotationDispT(){}

  IXMLDOMNotationDispT(IXMLDOMNotation *pintf)
  {
    TAutoDriver<IXMLDOMNotation>::Bind(pintf, false);
  }

  IXMLDOMNotationDispT(IXMLDOMNotationPtr pintf)
  {
    TAutoDriver<IXMLDOMNotation>::Bind(pintf, true);
  }

  IXMLDOMNotationDispT& operator=(IXMLDOMNotation *pintf)
  {
    TAutoDriver<IXMLDOMNotation>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMNotationDispT& operator=(IXMLDOMNotationPtr pintf)
  {
    TAutoDriver<IXMLDOMNotation>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_publicId(VARIANT* publicId/*[out,retval]*/);
  VARIANT         __fastcall get_publicId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_systemId(VARIANT* systemId/*[out,retval]*/);
  VARIANT         __fastcall get_systemId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeValue(VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall get_nodeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeValue(VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/);
  Msxml3::DOMNodeType __fastcall get_nodeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_parentNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall get_childNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_firstChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_lastChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_previousSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_nextSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/);
  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_attributes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     VARIANT refChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               VARIANT refChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               Msxml3::IXMLDOMNode* oldChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/);
  VARIANT_BOOL    __fastcall hasChildNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/);
  Msxml3::IXMLDOMDocument* __fastcall get_ownerDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                                  Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_text(BSTR text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_specified(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_definition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/);
  VARIANT         __fastcall get_nodeTypedValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeTypedValue(VARIANT typedValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_dataType(VARIANT* dataTypeName/*[out,retval]*/);
  VARIANT         __fastcall get_dataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                      BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                                    Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                                         Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_parsed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/
                                                              , VARIANT outputObject/*[in]*/);


  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml3::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml3::IXMLDOMNode* parentNode = {read = get_parentNode};
  __property   Msxml3::IXMLDOMNodeList* childNodes = {read = get_childNodes};
  __property   Msxml3::IXMLDOMNode* firstChild = {read = get_firstChild};
  __property   Msxml3::IXMLDOMNode* lastChild = {read = get_lastChild};
  __property   Msxml3::IXMLDOMNode* previousSibling = {read = get_previousSibling};
  __property   Msxml3::IXMLDOMNode* nextSibling = {read = get_nextSibling};
  __property   Msxml3::IXMLDOMNamedNodeMap* attributes = {read = get_attributes};
  __property   Msxml3::IXMLDOMDocument* ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text};
  __property   VARIANT_BOOL    specified = {read = get_specified};
  __property   Msxml3::IXMLDOMNode* definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   VARIANT_BOOL    parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMNotationDispT<IXMLDOMNotation> IXMLDOMNotationDisp;

typedef TComInterface<IXMLDOMEntity>  TCOMIXMLDOMEntity;

// *********************************************************************//
// DispIntf:  IXMLDOMEntity
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8D-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMEntityDispT : public TAutoDriver<IXMLDOMEntity>
{
public:
  IXMLDOMEntityDispT(){}

  IXMLDOMEntityDispT(IXMLDOMEntity *pintf)
  {
    TAutoDriver<IXMLDOMEntity>::Bind(pintf, false);
  }

  IXMLDOMEntityDispT(IXMLDOMEntityPtr pintf)
  {
    TAutoDriver<IXMLDOMEntity>::Bind(pintf, true);
  }

  IXMLDOMEntityDispT& operator=(IXMLDOMEntity *pintf)
  {
    TAutoDriver<IXMLDOMEntity>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMEntityDispT& operator=(IXMLDOMEntityPtr pintf)
  {
    TAutoDriver<IXMLDOMEntity>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_publicId(VARIANT* publicId/*[out,retval]*/);
  VARIANT         __fastcall get_publicId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_systemId(VARIANT* systemId/*[out,retval]*/);
  VARIANT         __fastcall get_systemId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_notationName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_notationName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeValue(VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall get_nodeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeValue(VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/);
  Msxml3::DOMNodeType __fastcall get_nodeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_parentNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall get_childNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_firstChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_lastChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_previousSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_nextSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/);
  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_attributes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     VARIANT refChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               VARIANT refChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               Msxml3::IXMLDOMNode* oldChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/);
  VARIANT_BOOL    __fastcall hasChildNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/);
  Msxml3::IXMLDOMDocument* __fastcall get_ownerDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                                  Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_text(BSTR text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_specified(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_definition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/);
  VARIANT         __fastcall get_nodeTypedValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeTypedValue(VARIANT typedValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_dataType(VARIANT* dataTypeName/*[out,retval]*/);
  VARIANT         __fastcall get_dataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                      BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                                    Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                                         Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_parsed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/
                                                              , VARIANT outputObject/*[in]*/);

  __property   BSTR            notationName = {read = get_notationName};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml3::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml3::IXMLDOMNode* parentNode = {read = get_parentNode};
  __property   Msxml3::IXMLDOMNodeList* childNodes = {read = get_childNodes};
  __property   Msxml3::IXMLDOMNode* firstChild = {read = get_firstChild};
  __property   Msxml3::IXMLDOMNode* lastChild = {read = get_lastChild};
  __property   Msxml3::IXMLDOMNode* previousSibling = {read = get_previousSibling};
  __property   Msxml3::IXMLDOMNode* nextSibling = {read = get_nextSibling};
  __property   Msxml3::IXMLDOMNamedNodeMap* attributes = {read = get_attributes};
  __property   Msxml3::IXMLDOMDocument* ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text};
  __property   VARIANT_BOOL    specified = {read = get_specified};
  __property   Msxml3::IXMLDOMNode* definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   VARIANT_BOOL    parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMEntityDispT<IXMLDOMEntity> IXMLDOMEntityDisp;

typedef TComInterface<IXTLRuntime>  TCOMIXTLRuntime;

// *********************************************************************//
// DispIntf:  IXTLRuntime
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EFAA425-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
template<class T>
class IXTLRuntimeDispT : public TAutoDriver<IXTLRuntime>
{
public:
  IXTLRuntimeDispT(){}

  IXTLRuntimeDispT(IXTLRuntime *pintf)
  {
    TAutoDriver<IXTLRuntime>::Bind(pintf, false);
  }

  IXTLRuntimeDispT(IXTLRuntimePtr pintf)
  {
    TAutoDriver<IXTLRuntime>::Bind(pintf, true);
  }

  IXTLRuntimeDispT& operator=(IXTLRuntime *pintf)
  {
    TAutoDriver<IXTLRuntime>::Bind(pintf, false);
    return *this;
  }

  IXTLRuntimeDispT& operator=(IXTLRuntimePtr pintf)
  {
    TAutoDriver<IXTLRuntime>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall uniqueID(Msxml3::IXMLDOMNode* pNode/*[in]*/, 
                                                 long* pID/*[out,retval]*/);
  long            __fastcall uniqueID(Msxml3::IXMLDOMNode* pNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall depth(Msxml3::IXMLDOMNode* pNode/*[in]*/, 
                                              long* pDepth/*[out,retval]*/);
  long            __fastcall depth(Msxml3::IXMLDOMNode* pNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall childNumber(Msxml3::IXMLDOMNode* pNode/*[in]*/, 
                                                    long* pNumber/*[out,retval]*/);
  long            __fastcall childNumber(Msxml3::IXMLDOMNode* pNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ancestorChildNumber(BSTR bstrNodeName/*[in]*/, 
                                                            Msxml3::IXMLDOMNode* pNode/*[in]*/, 
                                                            long* pNumber/*[out,retval]*/);
  long            __fastcall ancestorChildNumber(BSTR bstrNodeName/*[in]*/, 
                                                 Msxml3::IXMLDOMNode* pNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall absoluteChildNumber(Msxml3::IXMLDOMNode* pNode/*[in]*/, 
                                                            long* pNumber/*[out,retval]*/);
  long            __fastcall absoluteChildNumber(Msxml3::IXMLDOMNode* pNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall formatIndex(long lIndex/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                                    BSTR* pbstrFormattedString/*[out,retval]*/);
  BSTR            __fastcall formatIndex(long lIndex/*[in]*/, BSTR bstrFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall formatNumber(double dblNumber/*[in]*/, 
                                                     BSTR bstrFormat/*[in]*/, 
                                                     BSTR* pbstrFormattedString/*[out,retval]*/);
  BSTR            __fastcall formatNumber(double dblNumber/*[in]*/, BSTR bstrFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall formatDate(VARIANT varDate/*[in]*/, BSTR bstrFormat/*[in]*/
                                                   , VARIANT varDestLocale/*[in,opt]*/, 
                                                   BSTR* pbstrFormattedString/*[out,retval]*/);
  BSTR            __fastcall formatDate(VARIANT varDate/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                        VARIANT varDestLocale/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall formatTime(VARIANT varTime/*[in]*/, BSTR bstrFormat/*[in]*/
                                                   , VARIANT varDestLocale/*[in,opt]*/, 
                                                   BSTR* pbstrFormattedString/*[out,retval]*/);
  BSTR            __fastcall formatTime(VARIANT varTime/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                        VARIANT varDestLocale/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeValue(VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall get_nodeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeValue(VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/);
  Msxml3::DOMNodeType __fastcall get_nodeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_parentNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall get_childNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_firstChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_lastChild(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_previousSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_nextSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/);
  Msxml3::IXMLDOMNamedNodeMap* __fastcall get_attributes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     VARIANT refChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               VARIANT refChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                                     Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                               Msxml3::IXMLDOMNode* oldChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                    Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/);
  VARIANT_BOOL    __fastcall hasChildNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/);
  Msxml3::IXMLDOMDocument* __fastcall get_ownerDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                                  Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall cloneNode(VARIANT_BOOL deep/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_text(BSTR text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_specified(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_definition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/);
  VARIANT         __fastcall get_nodeTypedValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_nodeTypedValue(VARIANT typedValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_dataType(VARIANT* dataTypeName/*[out,retval]*/);
  VARIANT         __fastcall get_dataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                      BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                                    Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/);
  Msxml3::IXMLDOMNodeList* __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                                         Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_parsed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/
                                                              , VARIANT outputObject/*[in]*/);


  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml3::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml3::IXMLDOMNode* parentNode = {read = get_parentNode};
  __property   Msxml3::IXMLDOMNodeList* childNodes = {read = get_childNodes};
  __property   Msxml3::IXMLDOMNode* firstChild = {read = get_firstChild};
  __property   Msxml3::IXMLDOMNode* lastChild = {read = get_lastChild};
  __property   Msxml3::IXMLDOMNode* previousSibling = {read = get_previousSibling};
  __property   Msxml3::IXMLDOMNode* nextSibling = {read = get_nextSibling};
  __property   Msxml3::IXMLDOMNamedNodeMap* attributes = {read = get_attributes};
  __property   Msxml3::IXMLDOMDocument* ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text};
  __property   VARIANT_BOOL    specified = {read = get_specified};
  __property   Msxml3::IXMLDOMNode* definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   VARIANT_BOOL    parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXTLRuntimeDispT<IXTLRuntime> IXTLRuntimeDisp;

// *********************************************************************//
// SmartIntf: TCOMIXSLTemplate
// Interface: IXSLTemplate
// *********************************************************************//
template <class T /* IXSLTemplate */ >
class TCOMIXSLTemplateT : public TComInterface<IXSLTemplate>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIXSLTemplateT() {}
  TCOMIXSLTemplateT(IXSLTemplate *intf, bool addRef = false) : TComInterface<IXSLTemplate>(intf, addRef) {}
  TCOMIXSLTemplateT(const TCOMIXSLTemplateT& src) : TComInterface<IXSLTemplate>(src) {}
  TCOMIXSLTemplateT& operator=(const TCOMIXSLTemplateT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall _set_stylesheet(Msxml3::IXMLDOMNode* stylesheet/*[in]*/);
  HRESULT         __fastcall _set_stylesheet(Msxml3::IXMLDOMNodePtr stylesheet/*[in]*/);
  HRESULT         __fastcall get_stylesheet(Msxml3::IXMLDOMNode** stylesheet/*[out,retval]*/);
  HRESULT         __fastcall get_stylesheet(Msxml3::IXMLDOMNodePtr* stylesheet/*[out,retval]*/);
  Msxml3::IXMLDOMNodePtr __fastcall get_stylesheet(void);
  HRESULT         __fastcall createProcessor(Msxml3::IXSLProcessor** ppProcessor/*[out,retval]*/);
  Msxml3::IXSLProcessor* __fastcall createProcessor(void);

  __property   Msxml3::IXMLDOMNodePtr stylesheet = {write = _set_stylesheet};
};
typedef TCOMIXSLTemplateT<IXSLTemplate> TCOMIXSLTemplate;

// *********************************************************************//
// DispIntf:  IXSLTemplate
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF93-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXSLTemplateDispT : public TAutoDriver<IXSLTemplate>
{
public:
  IXSLTemplateDispT(){}

  IXSLTemplateDispT(IXSLTemplate *pintf)
  {
    TAutoDriver<IXSLTemplate>::Bind(pintf, false);
  }

  IXSLTemplateDispT(IXSLTemplatePtr pintf)
  {
    TAutoDriver<IXSLTemplate>::Bind(pintf, true);
  }

  IXSLTemplateDispT& operator=(IXSLTemplate *pintf)
  {
    TAutoDriver<IXSLTemplate>::Bind(pintf, false);
    return *this;
  }

  IXSLTemplateDispT& operator=(IXSLTemplatePtr pintf)
  {
    TAutoDriver<IXSLTemplate>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_msXSLTemplate));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_msXSLTemplate);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_stylesheet(Msxml3::IXMLDOMNode* stylesheet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_stylesheet(Msxml3::IXMLDOMNode** stylesheet/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_stylesheet(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createProcessor(Msxml3::IXSLProcessor** ppProcessor/*[out,retval]*/);
  Msxml3::IXSLProcessor* __fastcall createProcessor(void);

  __property   Msxml3::IXMLDOMNode* stylesheet = {read = get_stylesheet, write = _set_stylesheet};
};
typedef IXSLTemplateDispT<IXSLTemplate> IXSLTemplateDisp;

typedef TComInterface<IXSLProcessor>  TCOMIXSLProcessor;

// *********************************************************************//
// DispIntf:  IXSLProcessor
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF92-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXSLProcessorDispT : public TAutoDriver<IXSLProcessor>
{
public:
  IXSLProcessorDispT(){}

  IXSLProcessorDispT(IXSLProcessor *pintf)
  {
    TAutoDriver<IXSLProcessor>::Bind(pintf, false);
  }

  IXSLProcessorDispT(IXSLProcessorPtr pintf)
  {
    TAutoDriver<IXSLProcessor>::Bind(pintf, true);
  }

  IXSLProcessorDispT& operator=(IXSLProcessor *pintf)
  {
    TAutoDriver<IXSLProcessor>::Bind(pintf, false);
    return *this;
  }

  IXSLProcessorDispT& operator=(IXSLProcessorPtr pintf)
  {
    TAutoDriver<IXSLProcessor>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_input(VARIANT pVar/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_input(VARIANT* pVar/*[out,retval]*/);
  VARIANT         __fastcall get_input(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ownerTemplate(Msxml3::IXSLTemplate** ppTemplate/*[out,retval]*/);
  Msxml3::IXSLTemplate* __fastcall get_ownerTemplate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setStartMode(BSTR mode/*[in]*/, 
                                                     BSTR namespaceURI/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_startMode(BSTR* mode/*[out,retval]*/);
  BSTR            __fastcall get_startMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_startModeURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_startModeURI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_output(VARIANT pOutput/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_output(VARIANT* pOutput/*[out,retval]*/);
  VARIANT         __fastcall get_output(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall transform(VARIANT_BOOL* pDone/*[out,retval]*/);
  VARIANT_BOOL    __fastcall transform(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall reset();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_readyState(long* pReadyState/*[out,retval]*/);
  long            __fastcall get_readyState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall addParameter(BSTR baseName/*[in]*/, 
                                                     VARIANT parameter/*[in]*/, 
                                                     BSTR namespaceURI/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall addObject(LPDISPATCH obj/*[in]*/, BSTR namespaceURI/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_stylesheet(Msxml3::IXMLDOMNode** stylesheet/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_stylesheet(void);

  __property   Msxml3::IXSLTemplate* ownerTemplate = {read = get_ownerTemplate};
  __property   BSTR            startMode = {read = get_startMode};
  __property   BSTR            startModeURI = {read = get_startModeURI};
  __property   long            readyState = {read = get_readyState};
  __property   Msxml3::IXMLDOMNode* stylesheet = {read = get_stylesheet};
};
typedef IXSLProcessorDispT<IXSLProcessor> IXSLProcessorDisp;

typedef TComInterface<ISAXXMLReader>  TCOMISAXXMLReader;

typedef TComInterface<ISAXEntityResolver>  TCOMISAXEntityResolver;

typedef TComInterface<ISAXContentHandler>  TCOMISAXContentHandler;

typedef TComInterface<ISAXLocator>  TCOMISAXLocator;

typedef TComInterface<ISAXAttributes>  TCOMISAXAttributes;

typedef TComInterface<ISAXDTDHandler>  TCOMISAXDTDHandler;

typedef TComInterface<ISAXErrorHandler>  TCOMISAXErrorHandler;

typedef TComInterface<ISAXXMLFilter>  TCOMISAXXMLFilter;

typedef TComInterface<ISAXLexicalHandler>  TCOMISAXLexicalHandler;

typedef TComInterface<ISAXDeclHandler>  TCOMISAXDeclHandler;

// *********************************************************************//
// SmartIntf: TCOMIVBSAXXMLReader
// Interface: IVBSAXXMLReader
// *********************************************************************//
template <class T /* IVBSAXXMLReader */ >
class TCOMIVBSAXXMLReaderT : public TComInterface<IVBSAXXMLReader>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIVBSAXXMLReaderT() {}
  TCOMIVBSAXXMLReaderT(IVBSAXXMLReader *intf, bool addRef = false) : TComInterface<IVBSAXXMLReader>(intf, addRef) {}
  TCOMIVBSAXXMLReaderT(const TCOMIVBSAXXMLReaderT& src) : TComInterface<IVBSAXXMLReader>(src) {}
  TCOMIVBSAXXMLReaderT& operator=(const TCOMIVBSAXXMLReaderT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall getFeature(BSTR strName/*[in]*/, VARIANT_BOOL* fValue/*[out,retval]*/);
  VARIANT_BOOL    __fastcall getFeature(BSTR strName/*[in]*/);
  HRESULT         __fastcall putFeature(BSTR strName/*[in]*/, VARIANT_BOOL fValue/*[in]*/);
  HRESULT         __fastcall getProperty(BSTR strName/*[in]*/, VARIANT* varValue/*[out,retval]*/);
  VARIANT         __fastcall getProperty(BSTR strName/*[in]*/);
  HRESULT         __fastcall putProperty(BSTR strName/*[in]*/, VARIANT varValue/*[in]*/);
  HRESULT         __fastcall get_entityResolver(Msxml3::IVBSAXEntityResolver** oResolver/*[out,retval]*/);
  HRESULT         __fastcall get_entityResolver(Msxml3::IVBSAXEntityResolverPtr* oResolver/*[out,retval]*/);
  Msxml3::IVBSAXEntityResolverPtr __fastcall get_entityResolver(void);
  HRESULT         __fastcall _set_entityResolver(Msxml3::IVBSAXEntityResolver* oResolver/*[in]*/);
  HRESULT         __fastcall _set_entityResolver(Msxml3::IVBSAXEntityResolverPtr oResolver/*[in]*/);
  HRESULT         __fastcall get_contentHandler(Msxml3::IVBSAXContentHandler** oHandler/*[out,retval]*/);
  HRESULT         __fastcall get_contentHandler(Msxml3::IVBSAXContentHandlerPtr* oHandler/*[out,retval]*/);
  Msxml3::IVBSAXContentHandlerPtr __fastcall get_contentHandler(void);
  HRESULT         __fastcall _set_contentHandler(Msxml3::IVBSAXContentHandler* oHandler/*[in]*/);
  HRESULT         __fastcall _set_contentHandler(Msxml3::IVBSAXContentHandlerPtr oHandler/*[in]*/);
  HRESULT         __fastcall get_dtdHandler(Msxml3::IVBSAXDTDHandler** oHandler/*[out,retval]*/);
  HRESULT         __fastcall get_dtdHandler(Msxml3::IVBSAXDTDHandlerPtr* oHandler/*[out,retval]*/);
  Msxml3::IVBSAXDTDHandlerPtr __fastcall get_dtdHandler(void);
  HRESULT         __fastcall _set_dtdHandler(Msxml3::IVBSAXDTDHandler* oHandler/*[in]*/);
  HRESULT         __fastcall _set_dtdHandler(Msxml3::IVBSAXDTDHandlerPtr oHandler/*[in]*/);
  HRESULT         __fastcall get_errorHandler(Msxml3::IVBSAXErrorHandler** oHandler/*[out,retval]*/);
  HRESULT         __fastcall get_errorHandler(Msxml3::IVBSAXErrorHandlerPtr* oHandler/*[out,retval]*/);
  Msxml3::IVBSAXErrorHandlerPtr __fastcall get_errorHandler(void);
  HRESULT         __fastcall _set_errorHandler(Msxml3::IVBSAXErrorHandler* oHandler/*[in]*/);
  HRESULT         __fastcall _set_errorHandler(Msxml3::IVBSAXErrorHandlerPtr oHandler/*[in]*/);
  HRESULT         __fastcall get_baseURL(BSTR* strBaseURL/*[out,retval]*/);
  BSTR            __fastcall get_baseURL(void);
  HRESULT         __fastcall set_baseURL(BSTR strBaseURL/*[in]*/);
  HRESULT         __fastcall get_secureBaseURL(BSTR* strSecureBaseURL/*[out,retval]*/);
  BSTR            __fastcall get_secureBaseURL(void);
  HRESULT         __fastcall set_secureBaseURL(BSTR strSecureBaseURL/*[in]*/);
  HRESULT         __fastcall parse(VARIANT varInput/*[in]*/);
  HRESULT         __fastcall parseURL(BSTR strURL/*[in]*/);

  __property   Msxml3::IVBSAXEntityResolverPtr entityResolver = {read = get_entityResolver, write = _set_entityResolver};
  __property   Msxml3::IVBSAXContentHandlerPtr contentHandler = {read = get_contentHandler, write = _set_contentHandler};
  __property   Msxml3::IVBSAXDTDHandlerPtr dtdHandler = {read = get_dtdHandler, write = _set_dtdHandler};
  __property   Msxml3::IVBSAXErrorHandlerPtr errorHandler = {read = get_errorHandler, write = _set_errorHandler};
  __property   BSTR            baseURL = {read = get_baseURL};
  __property   BSTR            secureBaseURL = {read = get_secureBaseURL};
};
typedef TCOMIVBSAXXMLReaderT<IVBSAXXMLReader> TCOMIVBSAXXMLReader;

// *********************************************************************//
// DispIntf:  IVBSAXXMLReader
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8C033CAA-6CD6-4F73-B728-4531AF74945F}
// *********************************************************************//
template<class T>
class IVBSAXXMLReaderDispT : public TAutoDriver<IVBSAXXMLReader>
{
public:
  IVBSAXXMLReaderDispT(){}

  IVBSAXXMLReaderDispT(IVBSAXXMLReader *pintf)
  {
    TAutoDriver<IVBSAXXMLReader>::Bind(pintf, false);
  }

  IVBSAXXMLReaderDispT(IVBSAXXMLReaderPtr pintf)
  {
    TAutoDriver<IVBSAXXMLReader>::Bind(pintf, true);
  }

  IVBSAXXMLReaderDispT& operator=(IVBSAXXMLReader *pintf)
  {
    TAutoDriver<IVBSAXXMLReader>::Bind(pintf, false);
    return *this;
  }

  IVBSAXXMLReaderDispT& operator=(IVBSAXXMLReaderPtr pintf)
  {
    TAutoDriver<IVBSAXXMLReader>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_msSAXXMLReader));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_msSAXXMLReader);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall getFeature(BSTR strName/*[in]*/, 
                                                   VARIANT_BOOL* fValue/*[out,retval]*/);
  VARIANT_BOOL    __fastcall getFeature(BSTR strName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall putFeature(BSTR strName/*[in]*/, VARIANT_BOOL fValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getProperty(BSTR strName/*[in]*/, 
                                                    VARIANT* varValue/*[out,retval]*/);
  VARIANT         __fastcall getProperty(BSTR strName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall putProperty(BSTR strName/*[in]*/, VARIANT varValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_entityResolver(Msxml3::IVBSAXEntityResolver** oResolver/*[out,retval]*/);
  Msxml3::IVBSAXEntityResolver* __fastcall get_entityResolver(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_entityResolver(Msxml3::IVBSAXEntityResolver* oResolver/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_contentHandler(Msxml3::IVBSAXContentHandler** oHandler/*[out,retval]*/);
  Msxml3::IVBSAXContentHandler* __fastcall get_contentHandler(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_contentHandler(Msxml3::IVBSAXContentHandler* oHandler/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_dtdHandler(Msxml3::IVBSAXDTDHandler** oHandler/*[out,retval]*/);
  Msxml3::IVBSAXDTDHandler* __fastcall get_dtdHandler(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_dtdHandler(Msxml3::IVBSAXDTDHandler* oHandler/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_errorHandler(Msxml3::IVBSAXErrorHandler** oHandler/*[out,retval]*/);
  Msxml3::IVBSAXErrorHandler* __fastcall get_errorHandler(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_errorHandler(Msxml3::IVBSAXErrorHandler* oHandler/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_baseURL(BSTR* strBaseURL/*[out,retval]*/);
  BSTR            __fastcall get_baseURL(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_baseURL(BSTR strBaseURL/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_secureBaseURL(BSTR* strSecureBaseURL/*[out,retval]*/);
  BSTR            __fastcall get_secureBaseURL(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_secureBaseURL(BSTR strSecureBaseURL/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall parse(VARIANT varInput/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall parseURL(BSTR strURL/*[in]*/);

  __property   Msxml3::IVBSAXEntityResolver* entityResolver = {read = get_entityResolver, write = _set_entityResolver};
  __property   Msxml3::IVBSAXContentHandler* contentHandler = {read = get_contentHandler, write = _set_contentHandler};
  __property   Msxml3::IVBSAXDTDHandler* dtdHandler = {read = get_dtdHandler, write = _set_dtdHandler};
  __property   Msxml3::IVBSAXErrorHandler* errorHandler = {read = get_errorHandler, write = _set_errorHandler};
  __property   BSTR            baseURL = {read = get_baseURL};
  __property   BSTR            secureBaseURL = {read = get_secureBaseURL};
};
typedef IVBSAXXMLReaderDispT<IVBSAXXMLReader> IVBSAXXMLReaderDisp;

typedef TComInterface<IVBSAXEntityResolver>  TCOMIVBSAXEntityResolver;

// *********************************************************************//
// DispIntf:  IVBSAXEntityResolver
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0C05D096-F45B-4ACA-AD1A-AA0BC25518DC}
// *********************************************************************//
template<class T>
class IVBSAXEntityResolverDispT : public TAutoDriver<IVBSAXEntityResolver>
{
public:
  IVBSAXEntityResolverDispT(){}

  IVBSAXEntityResolverDispT(IVBSAXEntityResolver *pintf)
  {
    TAutoDriver<IVBSAXEntityResolver>::Bind(pintf, false);
  }

  IVBSAXEntityResolverDispT(IVBSAXEntityResolverPtr pintf)
  {
    TAutoDriver<IVBSAXEntityResolver>::Bind(pintf, true);
  }

  IVBSAXEntityResolverDispT& operator=(IVBSAXEntityResolver *pintf)
  {
    TAutoDriver<IVBSAXEntityResolver>::Bind(pintf, false);
    return *this;
  }

  IVBSAXEntityResolverDispT& operator=(IVBSAXEntityResolverPtr pintf)
  {
    TAutoDriver<IVBSAXEntityResolver>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall resolveEntity(BSTR* strPublicId/*[in,out]*/, 
                                                      BSTR* strSystemId/*[in,out]*/, 
                                                      VARIANT* varInput/*[out,retval]*/);
  VARIANT         __fastcall resolveEntity(BSTR* strPublicId/*[in,out]*/, 
                                           BSTR* strSystemId/*[in,out]*/);

};
typedef IVBSAXEntityResolverDispT<IVBSAXEntityResolver> IVBSAXEntityResolverDisp;

typedef TComInterface<IVBSAXContentHandler>  TCOMIVBSAXContentHandler;

// *********************************************************************//
// DispIntf:  IVBSAXContentHandler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2ED7290A-4DD5-4B46-BB26-4E4155E77FAA}
// *********************************************************************//
template<class T>
class IVBSAXContentHandlerDispT : public TAutoDriver<IVBSAXContentHandler>
{
public:
  IVBSAXContentHandlerDispT(){}

  IVBSAXContentHandlerDispT(IVBSAXContentHandler *pintf)
  {
    TAutoDriver<IVBSAXContentHandler>::Bind(pintf, false);
  }

  IVBSAXContentHandlerDispT(IVBSAXContentHandlerPtr pintf)
  {
    TAutoDriver<IVBSAXContentHandler>::Bind(pintf, true);
  }

  IVBSAXContentHandlerDispT& operator=(IVBSAXContentHandler *pintf)
  {
    TAutoDriver<IVBSAXContentHandler>::Bind(pintf, false);
    return *this;
  }

  IVBSAXContentHandlerDispT& operator=(IVBSAXContentHandlerPtr pintf)
  {
    TAutoDriver<IVBSAXContentHandler>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_documentLocator(Msxml3::IVBSAXLocator* Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall startDocument();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall endDocument();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall startPrefixMapping(BSTR* strPrefix/*[in,out]*/, 
                                                           BSTR* strURI/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall endPrefixMapping(BSTR* strPrefix/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall startElement(BSTR* strNamespaceURI/*[in,out]*/, 
                                                     BSTR* strLocalName/*[in,out]*/, 
                                                     BSTR* strQName/*[in,out]*/, 
                                                     Msxml3::IVBSAXAttributes* oAttributes/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall endElement(BSTR* strNamespaceURI/*[in,out]*/, 
                                                   BSTR* strLocalName/*[in,out]*/, 
                                                   BSTR* strQName/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall characters(BSTR* strChars/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ignorableWhitespace(BSTR* strChars/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall processingInstruction(BSTR* strTarget/*[in,out]*/, 
                                                              BSTR* strData/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall skippedEntity(BSTR* strName/*[in,out]*/);

  __property   Msxml3::IVBSAXLocator* documentLocator = {write = _set_documentLocator};
};
typedef IVBSAXContentHandlerDispT<IVBSAXContentHandler> IVBSAXContentHandlerDisp;

typedef TComInterface<IVBSAXLocator>  TCOMIVBSAXLocator;

// *********************************************************************//
// DispIntf:  IVBSAXLocator
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {796E7AC5-5AA2-4EFF-ACAD-3FAAF01A3288}
// *********************************************************************//
template<class T>
class IVBSAXLocatorDispT : public TAutoDriver<IVBSAXLocator>
{
public:
  IVBSAXLocatorDispT(){}

  IVBSAXLocatorDispT(IVBSAXLocator *pintf)
  {
    TAutoDriver<IVBSAXLocator>::Bind(pintf, false);
  }

  IVBSAXLocatorDispT(IVBSAXLocatorPtr pintf)
  {
    TAutoDriver<IVBSAXLocator>::Bind(pintf, true);
  }

  IVBSAXLocatorDispT& operator=(IVBSAXLocator *pintf)
  {
    TAutoDriver<IVBSAXLocator>::Bind(pintf, false);
    return *this;
  }

  IVBSAXLocatorDispT& operator=(IVBSAXLocatorPtr pintf)
  {
    TAutoDriver<IVBSAXLocator>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_columnNumber(int* nColumn/*[out,retval]*/);
  int             __fastcall get_columnNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_lineNumber(int* nLine/*[out,retval]*/);
  int             __fastcall get_lineNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_publicId(BSTR* strPublicId/*[out,retval]*/);
  BSTR            __fastcall get_publicId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_systemId(BSTR* strSystemId/*[out,retval]*/);
  BSTR            __fastcall get_systemId(void);

  __property   int             columnNumber = {read = get_columnNumber};
  __property   int             lineNumber = {read = get_lineNumber};
  __property   BSTR            publicId = {read = get_publicId};
  __property   BSTR            systemId = {read = get_systemId};
};
typedef IVBSAXLocatorDispT<IVBSAXLocator> IVBSAXLocatorDisp;

typedef TComInterface<IVBSAXAttributes>  TCOMIVBSAXAttributes;

// *********************************************************************//
// DispIntf:  IVBSAXAttributes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10DC0586-132B-4CAC-8BB3-DB00AC8B7EE0}
// *********************************************************************//
template<class T>
class IVBSAXAttributesDispT : public TAutoDriver<IVBSAXAttributes>
{
public:
  IVBSAXAttributesDispT(){}

  IVBSAXAttributesDispT(IVBSAXAttributes *pintf)
  {
    TAutoDriver<IVBSAXAttributes>::Bind(pintf, false);
  }

  IVBSAXAttributesDispT(IVBSAXAttributesPtr pintf)
  {
    TAutoDriver<IVBSAXAttributes>::Bind(pintf, true);
  }

  IVBSAXAttributesDispT& operator=(IVBSAXAttributes *pintf)
  {
    TAutoDriver<IVBSAXAttributes>::Bind(pintf, false);
    return *this;
  }

  IVBSAXAttributesDispT& operator=(IVBSAXAttributesPtr pintf)
  {
    TAutoDriver<IVBSAXAttributes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_length(int* nLength/*[out,retval]*/);
  int             __fastcall get_length(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getURI(int nIndex/*[in]*/, BSTR* strURI/*[out,retval]*/);
  BSTR            __fastcall getURI(int nIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getLocalName(int nIndex/*[in]*/, 
                                                     BSTR* strLocalName/*[out,retval]*/);
  BSTR            __fastcall getLocalName(int nIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getQName(int nIndex/*[in]*/, BSTR* strQName/*[out,retval]*/);
  BSTR            __fastcall getQName(int nIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getIndexFromName(BSTR strURI/*[in]*/, 
                                                         BSTR strLocalName/*[in]*/, 
                                                         int* nIndex/*[out,retval]*/);
  int             __fastcall getIndexFromName(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getIndexFromQName(BSTR strQName/*[in]*/, 
                                                          int* nIndex/*[out,retval]*/);
  int             __fastcall getIndexFromQName(BSTR strQName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getType(int nIndex/*[in]*/, BSTR* strType/*[out,retval]*/);
  BSTR            __fastcall getType(int nIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getTypeFromName(BSTR strURI/*[in]*/, 
                                                        BSTR strLocalName/*[in]*/, 
                                                        BSTR* strType/*[out,retval]*/);
  BSTR            __fastcall getTypeFromName(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getTypeFromQName(BSTR strQName/*[in]*/, 
                                                         BSTR* strType/*[out,retval]*/);
  BSTR            __fastcall getTypeFromQName(BSTR strQName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getValue(int nIndex/*[in]*/, BSTR* strValue/*[out,retval]*/);
  BSTR            __fastcall getValue(int nIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getValueFromName(BSTR strURI/*[in]*/, 
                                                         BSTR strLocalName/*[in]*/, 
                                                         BSTR* strValue/*[out,retval]*/);
  BSTR            __fastcall getValueFromName(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getValueFromQName(BSTR strQName/*[in]*/, 
                                                          BSTR* strValue/*[out,retval]*/);
  BSTR            __fastcall getValueFromQName(BSTR strQName/*[in]*/);

  __property   int             length = {read = get_length};
};
typedef IVBSAXAttributesDispT<IVBSAXAttributes> IVBSAXAttributesDisp;

typedef TComInterface<IVBSAXDTDHandler>  TCOMIVBSAXDTDHandler;

// *********************************************************************//
// DispIntf:  IVBSAXDTDHandler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {24FB3297-302D-4620-BA39-3A732D850558}
// *********************************************************************//
template<class T>
class IVBSAXDTDHandlerDispT : public TAutoDriver<IVBSAXDTDHandler>
{
public:
  IVBSAXDTDHandlerDispT(){}

  IVBSAXDTDHandlerDispT(IVBSAXDTDHandler *pintf)
  {
    TAutoDriver<IVBSAXDTDHandler>::Bind(pintf, false);
  }

  IVBSAXDTDHandlerDispT(IVBSAXDTDHandlerPtr pintf)
  {
    TAutoDriver<IVBSAXDTDHandler>::Bind(pintf, true);
  }

  IVBSAXDTDHandlerDispT& operator=(IVBSAXDTDHandler *pintf)
  {
    TAutoDriver<IVBSAXDTDHandler>::Bind(pintf, false);
    return *this;
  }

  IVBSAXDTDHandlerDispT& operator=(IVBSAXDTDHandlerPtr pintf)
  {
    TAutoDriver<IVBSAXDTDHandler>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall notationDecl(BSTR* strName/*[in,out]*/, 
                                                     BSTR* strPublicId/*[in,out]*/, 
                                                     BSTR* strSystemId/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall unparsedEntityDecl(BSTR* strName/*[in,out]*/, 
                                                           BSTR* strPublicId/*[in,out]*/, 
                                                           BSTR* strSystemId/*[in,out]*/, 
                                                           BSTR* strNotationName/*[in,out]*/);

};
typedef IVBSAXDTDHandlerDispT<IVBSAXDTDHandler> IVBSAXDTDHandlerDisp;

typedef TComInterface<IVBSAXErrorHandler>  TCOMIVBSAXErrorHandler;

// *********************************************************************//
// DispIntf:  IVBSAXErrorHandler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D963D3FE-173C-4862-9095-B92F66995F52}
// *********************************************************************//
template<class T>
class IVBSAXErrorHandlerDispT : public TAutoDriver<IVBSAXErrorHandler>
{
public:
  IVBSAXErrorHandlerDispT(){}

  IVBSAXErrorHandlerDispT(IVBSAXErrorHandler *pintf)
  {
    TAutoDriver<IVBSAXErrorHandler>::Bind(pintf, false);
  }

  IVBSAXErrorHandlerDispT(IVBSAXErrorHandlerPtr pintf)
  {
    TAutoDriver<IVBSAXErrorHandler>::Bind(pintf, true);
  }

  IVBSAXErrorHandlerDispT& operator=(IVBSAXErrorHandler *pintf)
  {
    TAutoDriver<IVBSAXErrorHandler>::Bind(pintf, false);
    return *this;
  }

  IVBSAXErrorHandlerDispT& operator=(IVBSAXErrorHandlerPtr pintf)
  {
    TAutoDriver<IVBSAXErrorHandler>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall error(Msxml3::IVBSAXLocator* oLocator/*[in]*/, 
                                              BSTR* strErrorMessage/*[in,out]*/, 
                                              long nErrorCode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall fatalError(Msxml3::IVBSAXLocator* oLocator/*[in]*/, 
                                                   BSTR* strErrorMessage/*[in,out]*/, 
                                                   long nErrorCode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ignorableWarning(Msxml3::IVBSAXLocator* oLocator/*[in]*/, 
                                                         BSTR* strErrorMessage/*[in,out]*/, 
                                                         long nErrorCode/*[in]*/);

};
typedef IVBSAXErrorHandlerDispT<IVBSAXErrorHandler> IVBSAXErrorHandlerDisp;

typedef TComInterface<IVBSAXXMLFilter>  TCOMIVBSAXXMLFilter;

// *********************************************************************//
// DispIntf:  IVBSAXXMLFilter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1299EB1B-5B88-433E-82DE-82CA75AD4E04}
// *********************************************************************//
template<class T>
class IVBSAXXMLFilterDispT : public TAutoDriver<IVBSAXXMLFilter>
{
public:
  IVBSAXXMLFilterDispT(){}

  IVBSAXXMLFilterDispT(IVBSAXXMLFilter *pintf)
  {
    TAutoDriver<IVBSAXXMLFilter>::Bind(pintf, false);
  }

  IVBSAXXMLFilterDispT(IVBSAXXMLFilterPtr pintf)
  {
    TAutoDriver<IVBSAXXMLFilter>::Bind(pintf, true);
  }

  IVBSAXXMLFilterDispT& operator=(IVBSAXXMLFilter *pintf)
  {
    TAutoDriver<IVBSAXXMLFilter>::Bind(pintf, false);
    return *this;
  }

  IVBSAXXMLFilterDispT& operator=(IVBSAXXMLFilterPtr pintf)
  {
    TAutoDriver<IVBSAXXMLFilter>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parent(Msxml3::IVBSAXXMLReader** oReader/*[out,retval]*/);
  Msxml3::IVBSAXXMLReader* __fastcall get_parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_parent(Msxml3::IVBSAXXMLReader* oReader/*[in]*/);

  __property   Msxml3::IVBSAXXMLReader* parent = {read = get_parent, write = _set_parent};
};
typedef IVBSAXXMLFilterDispT<IVBSAXXMLFilter> IVBSAXXMLFilterDisp;

typedef TComInterface<IVBSAXLexicalHandler>  TCOMIVBSAXLexicalHandler;

// *********************************************************************//
// DispIntf:  IVBSAXLexicalHandler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {032AAC35-8C0E-4D9D-979F-E3B702935576}
// *********************************************************************//
template<class T>
class IVBSAXLexicalHandlerDispT : public TAutoDriver<IVBSAXLexicalHandler>
{
public:
  IVBSAXLexicalHandlerDispT(){}

  IVBSAXLexicalHandlerDispT(IVBSAXLexicalHandler *pintf)
  {
    TAutoDriver<IVBSAXLexicalHandler>::Bind(pintf, false);
  }

  IVBSAXLexicalHandlerDispT(IVBSAXLexicalHandlerPtr pintf)
  {
    TAutoDriver<IVBSAXLexicalHandler>::Bind(pintf, true);
  }

  IVBSAXLexicalHandlerDispT& operator=(IVBSAXLexicalHandler *pintf)
  {
    TAutoDriver<IVBSAXLexicalHandler>::Bind(pintf, false);
    return *this;
  }

  IVBSAXLexicalHandlerDispT& operator=(IVBSAXLexicalHandlerPtr pintf)
  {
    TAutoDriver<IVBSAXLexicalHandler>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall startDTD(BSTR* strName/*[in,out]*/, 
                                                 BSTR* strPublicId/*[in,out]*/, 
                                                 BSTR* strSystemId/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall endDTD();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall startEntity(BSTR* strName/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall endEntity(BSTR* strName/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall startCDATA();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall endCDATA();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall comment(BSTR* strChars/*[in,out]*/);

};
typedef IVBSAXLexicalHandlerDispT<IVBSAXLexicalHandler> IVBSAXLexicalHandlerDisp;

typedef TComInterface<IVBSAXDeclHandler>  TCOMIVBSAXDeclHandler;

// *********************************************************************//
// DispIntf:  IVBSAXDeclHandler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E8917260-7579-4BE1-B5DD-7AFBFA6F077B}
// *********************************************************************//
template<class T>
class IVBSAXDeclHandlerDispT : public TAutoDriver<IVBSAXDeclHandler>
{
public:
  IVBSAXDeclHandlerDispT(){}

  IVBSAXDeclHandlerDispT(IVBSAXDeclHandler *pintf)
  {
    TAutoDriver<IVBSAXDeclHandler>::Bind(pintf, false);
  }

  IVBSAXDeclHandlerDispT(IVBSAXDeclHandlerPtr pintf)
  {
    TAutoDriver<IVBSAXDeclHandler>::Bind(pintf, true);
  }

  IVBSAXDeclHandlerDispT& operator=(IVBSAXDeclHandler *pintf)
  {
    TAutoDriver<IVBSAXDeclHandler>::Bind(pintf, false);
    return *this;
  }

  IVBSAXDeclHandlerDispT& operator=(IVBSAXDeclHandlerPtr pintf)
  {
    TAutoDriver<IVBSAXDeclHandler>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall elementDecl(BSTR* strName/*[in,out]*/, 
                                                    BSTR* strModel/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall attributeDecl(BSTR* strElementName/*[in,out]*/, 
                                                      BSTR* strAttributeName/*[in,out]*/, 
                                                      BSTR* strType/*[in,out]*/, 
                                                      BSTR* strValueDefault/*[in,out]*/, 
                                                      BSTR* strValue/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall internalEntityDecl(BSTR* strName/*[in,out]*/, 
                                                           BSTR* strValue/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall externalEntityDecl(BSTR* strName/*[in,out]*/, 
                                                           BSTR* strPublicId/*[in,out]*/, 
                                                           BSTR* strSystemId/*[in,out]*/);

};
typedef IVBSAXDeclHandlerDispT<IVBSAXDeclHandler> IVBSAXDeclHandlerDisp;

// *********************************************************************//
// SmartIntf: TCOMIMXWriter
// Interface: IMXWriter
// *********************************************************************//
template <class T /* IMXWriter */ >
class TCOMIMXWriterT : public TComInterface<IMXWriter>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMXWriterT() {}
  TCOMIMXWriterT(IMXWriter *intf, bool addRef = false) : TComInterface<IMXWriter>(intf, addRef) {}
  TCOMIMXWriterT(const TCOMIMXWriterT& src) : TComInterface<IMXWriter>(src) {}
  TCOMIMXWriterT& operator=(const TCOMIMXWriterT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_output(VARIANT varDestination/*[in]*/);
  HRESULT         __fastcall get_output(VARIANT* varDestination/*[out,retval]*/);
  VARIANT         __fastcall get_output(void);
  HRESULT         __fastcall set_encoding(BSTR strEncoding/*[in]*/);
  HRESULT         __fastcall get_encoding(BSTR* strEncoding/*[out,retval]*/);
  BSTR            __fastcall get_encoding(void);
  HRESULT         __fastcall set_byteOrderMark(VARIANT_BOOL fWriteByteOrderMark/*[in]*/);
  HRESULT         __fastcall set_byteOrderMark(TOLEBOOL fWriteByteOrderMark/*[in]*/);
  HRESULT         __fastcall get_byteOrderMark(VARIANT_BOOL* fWriteByteOrderMark/*[out,retval]*/);
  HRESULT         __fastcall get_byteOrderMark(TOLEBOOL* fWriteByteOrderMark/*[out,retval]*/);
  TOLEBOOL        __fastcall get_byteOrderMark(void);
  HRESULT         __fastcall set_indent(VARIANT_BOOL fIndentMode/*[in]*/);
  HRESULT         __fastcall set_indent(TOLEBOOL fIndentMode/*[in]*/);
  HRESULT         __fastcall get_indent(VARIANT_BOOL* fIndentMode/*[out,retval]*/);
  HRESULT         __fastcall get_indent(TOLEBOOL* fIndentMode/*[out,retval]*/);
  TOLEBOOL        __fastcall get_indent(void);
  HRESULT         __fastcall set_standalone(VARIANT_BOOL fValue/*[in]*/);
  HRESULT         __fastcall set_standalone(TOLEBOOL fValue/*[in]*/);
  HRESULT         __fastcall get_standalone(VARIANT_BOOL* fValue/*[out,retval]*/);
  HRESULT         __fastcall get_standalone(TOLEBOOL* fValue/*[out,retval]*/);
  TOLEBOOL        __fastcall get_standalone(void);
  HRESULT         __fastcall set_omitXMLDeclaration(VARIANT_BOOL fValue/*[in]*/);
  HRESULT         __fastcall set_omitXMLDeclaration(TOLEBOOL fValue/*[in]*/);
  HRESULT         __fastcall get_omitXMLDeclaration(VARIANT_BOOL* fValue/*[out,retval]*/);
  HRESULT         __fastcall get_omitXMLDeclaration(TOLEBOOL* fValue/*[out,retval]*/);
  TOLEBOOL        __fastcall get_omitXMLDeclaration(void);
  HRESULT         __fastcall set_version(BSTR strVersion/*[in]*/);
  HRESULT         __fastcall get_version(BSTR* strVersion/*[out,retval]*/);
  BSTR            __fastcall get_version(void);
  HRESULT         __fastcall set_disableOutputEscaping(VARIANT_BOOL fValue/*[in]*/);
  HRESULT         __fastcall set_disableOutputEscaping(TOLEBOOL fValue/*[in]*/);
  HRESULT         __fastcall get_disableOutputEscaping(VARIANT_BOOL* fValue/*[out,retval]*/);
  HRESULT         __fastcall get_disableOutputEscaping(TOLEBOOL* fValue/*[out,retval]*/);
  TOLEBOOL        __fastcall get_disableOutputEscaping(void);
  HRESULT         __fastcall flush(void);

  __property   BSTR            encoding = {read = get_encoding, write = set_encoding};
  __property   TOLEBOOL        byteOrderMark = {write = set_byteOrderMark};
  __property   TOLEBOOL        indent = {write = set_indent};
  __property   TOLEBOOL        standalone = {write = set_standalone};
  __property   TOLEBOOL        omitXMLDeclaration = {write = set_omitXMLDeclaration};
  __property   BSTR            version = {read = get_version, write = set_version};
  __property   TOLEBOOL        disableOutputEscaping = {write = set_disableOutputEscaping};
};
typedef TCOMIMXWriterT<IMXWriter> TCOMIMXWriter;

// *********************************************************************//
// DispIntf:  IMXWriter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4D7FF4BA-1565-4EA8-94E1-6E724A46F98D}
// *********************************************************************//
template<class T>
class IMXWriterDispT : public TAutoDriver<IMXWriter>
{
public:
  IMXWriterDispT(){}

  IMXWriterDispT(IMXWriter *pintf)
  {
    TAutoDriver<IMXWriter>::Bind(pintf, false);
  }

  IMXWriterDispT(IMXWriterPtr pintf)
  {
    TAutoDriver<IMXWriter>::Bind(pintf, true);
  }

  IMXWriterDispT& operator=(IMXWriter *pintf)
  {
    TAutoDriver<IMXWriter>::Bind(pintf, false);
    return *this;
  }

  IMXWriterDispT& operator=(IMXWriterPtr pintf)
  {
    TAutoDriver<IMXWriter>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_msMXXMLWriter));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_msMXXMLWriter);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_output(VARIANT varDestination/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_output(VARIANT* varDestination/*[out,retval]*/);
  VARIANT         __fastcall get_output(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_encoding(BSTR strEncoding/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_encoding(BSTR* strEncoding/*[out,retval]*/);
  BSTR            __fastcall get_encoding(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_byteOrderMark(VARIANT_BOOL fWriteByteOrderMark/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_byteOrderMark(VARIANT_BOOL* fWriteByteOrderMark/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_byteOrderMark(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_indent(VARIANT_BOOL fIndentMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_indent(VARIANT_BOOL* fIndentMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_indent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_standalone(VARIANT_BOOL fValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_standalone(VARIANT_BOOL* fValue/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_standalone(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_omitXMLDeclaration(VARIANT_BOOL fValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_omitXMLDeclaration(VARIANT_BOOL* fValue/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_omitXMLDeclaration(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_version(BSTR strVersion/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_version(BSTR* strVersion/*[out,retval]*/);
  BSTR            __fastcall get_version(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_disableOutputEscaping(VARIANT_BOOL fValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_disableOutputEscaping(VARIANT_BOOL* fValue/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_disableOutputEscaping(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall flush();

  __property   BSTR            encoding = {read = get_encoding, write = set_encoding};
  __property   VARIANT_BOOL    byteOrderMark = {read = get_byteOrderMark, write = set_byteOrderMark};
  __property   VARIANT_BOOL    indent = {read = get_indent, write = set_indent};
  __property   VARIANT_BOOL    standalone = {read = get_standalone, write = set_standalone};
  __property   VARIANT_BOOL    omitXMLDeclaration = {read = get_omitXMLDeclaration, write = set_omitXMLDeclaration};
  __property   BSTR            version = {read = get_version, write = set_version};
  __property   VARIANT_BOOL    disableOutputEscaping = {read = get_disableOutputEscaping, write = set_disableOutputEscaping};
};
typedef IMXWriterDispT<IMXWriter> IMXWriterDisp;

// *********************************************************************//
// SmartIntf: TCOMIMXAttributes
// Interface: IMXAttributes
// *********************************************************************//
template <class T /* IMXAttributes */ >
class TCOMIMXAttributesT : public TComInterface<IMXAttributes>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMXAttributesT() {}
  TCOMIMXAttributesT(IMXAttributes *intf, bool addRef = false) : TComInterface<IMXAttributes>(intf, addRef) {}
  TCOMIMXAttributesT(const TCOMIMXAttributesT& src) : TComInterface<IMXAttributes>(src) {}
  TCOMIMXAttributesT& operator=(const TCOMIMXAttributesT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall addAttribute(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/, 
                                          BSTR strQName/*[in]*/, BSTR strType/*[in]*/, 
                                          BSTR strValue/*[in]*/);
  HRESULT         __fastcall addAttributeFromIndex(VARIANT varAtts/*[in]*/, int nIndex/*[in]*/);
  HRESULT         __fastcall clear(void);
  HRESULT         __fastcall removeAttribute(int nIndex/*[in]*/);
  HRESULT         __fastcall setAttribute(int nIndex/*[in]*/, BSTR strURI/*[in]*/, 
                                          BSTR strLocalName/*[in]*/, BSTR strQName/*[in]*/, 
                                          BSTR strType/*[in]*/, BSTR strValue/*[in]*/);
  HRESULT         __fastcall setAttributes(VARIANT varAtts/*[in]*/);
  HRESULT         __fastcall setLocalName(int nIndex/*[in]*/, BSTR strLocalName/*[in]*/);
  HRESULT         __fastcall setQName(int nIndex/*[in]*/, BSTR strQName/*[in]*/);
  HRESULT         __fastcall setType(int nIndex/*[in]*/, BSTR strType/*[in]*/);
  HRESULT         __fastcall setURI(int nIndex/*[in]*/, BSTR strURI/*[in]*/);
  HRESULT         __fastcall setValue(int nIndex/*[in]*/, BSTR strValue/*[in]*/);

};
typedef TCOMIMXAttributesT<IMXAttributes> TCOMIMXAttributes;

// *********************************************************************//
// DispIntf:  IMXAttributes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F10D27CC-3EC0-415C-8ED8-77AB1C5E7262}
// *********************************************************************//
template<class T>
class IMXAttributesDispT : public TAutoDriver<IMXAttributes>
{
public:
  IMXAttributesDispT(){}

  IMXAttributesDispT(IMXAttributes *pintf)
  {
    TAutoDriver<IMXAttributes>::Bind(pintf, false);
  }

  IMXAttributesDispT(IMXAttributesPtr pintf)
  {
    TAutoDriver<IMXAttributes>::Bind(pintf, true);
  }

  IMXAttributesDispT& operator=(IMXAttributes *pintf)
  {
    TAutoDriver<IMXAttributes>::Bind(pintf, false);
    return *this;
  }

  IMXAttributesDispT& operator=(IMXAttributesPtr pintf)
  {
    TAutoDriver<IMXAttributes>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_msSAXAttributes));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_msSAXAttributes);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall addAttribute(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/
                                                     , BSTR strQName/*[in]*/, BSTR strType/*[in]*/, 
                                                     BSTR strValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall addAttributeFromIndex(VARIANT varAtts/*[in]*/, 
                                                              int nIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeAttribute(int nIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setAttribute(int nIndex/*[in]*/, BSTR strURI/*[in]*/, 
                                                     BSTR strLocalName/*[in]*/, 
                                                     BSTR strQName/*[in]*/, BSTR strType/*[in]*/, 
                                                     BSTR strValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setAttributes(VARIANT varAtts/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setLocalName(int nIndex/*[in]*/, BSTR strLocalName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setQName(int nIndex/*[in]*/, BSTR strQName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setType(int nIndex/*[in]*/, BSTR strType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setURI(int nIndex/*[in]*/, BSTR strURI/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setValue(int nIndex/*[in]*/, BSTR strValue/*[in]*/);

};
typedef IMXAttributesDispT<IMXAttributes> IMXAttributesDisp;

typedef TComInterface<IMXReaderControl>  TCOMIMXReaderControl;

// *********************************************************************//
// DispIntf:  IMXReaderControl
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {808F4E35-8D5A-4FBE-8466-33A41279ED30}
// *********************************************************************//
template<class T>
class IMXReaderControlDispT : public TAutoDriver<IMXReaderControl>
{
public:
  IMXReaderControlDispT(){}

  IMXReaderControlDispT(IMXReaderControl *pintf)
  {
    TAutoDriver<IMXReaderControl>::Bind(pintf, false);
  }

  IMXReaderControlDispT(IMXReaderControlPtr pintf)
  {
    TAutoDriver<IMXReaderControl>::Bind(pintf, true);
  }

  IMXReaderControlDispT& operator=(IMXReaderControl *pintf)
  {
    TAutoDriver<IMXReaderControl>::Bind(pintf, false);
    return *this;
  }

  IMXReaderControlDispT& operator=(IMXReaderControlPtr pintf)
  {
    TAutoDriver<IMXReaderControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall abort();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall resume();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall suspend();

};
typedef IMXReaderControlDispT<IMXReaderControl> IMXReaderControlDisp;

typedef TComInterface<IXMLElementCollection>  TCOMIXMLElementCollection;

// *********************************************************************//
// DispIntf:  IXMLElementCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {65725580-9B5D-11D0-9BFE-00C04FC99C8E}
// *********************************************************************//
template<class T>
class IXMLElementCollectionDispT : public TAutoDriver<IXMLElementCollection>
{
public:
  IXMLElementCollectionDispT(){}

  IXMLElementCollectionDispT(IXMLElementCollection *pintf)
  {
    TAutoDriver<IXMLElementCollection>::Bind(pintf, false);
  }

  IXMLElementCollectionDispT(IXMLElementCollectionPtr pintf)
  {
    TAutoDriver<IXMLElementCollection>::Bind(pintf, true);
  }

  IXMLElementCollectionDispT& operator=(IXMLElementCollection *pintf)
  {
    TAutoDriver<IXMLElementCollection>::Bind(pintf, false);
    return *this;
  }

  IXMLElementCollectionDispT& operator=(IXMLElementCollectionPtr pintf)
  {
    TAutoDriver<IXMLElementCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_length(long p/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_length(long* p/*[out,retval]*/);
  long            __fastcall get_length(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__newEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall item(VARIANT var1/*[in,opt]*/, VARIANT var2/*[in,opt]*/, 
                                             LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall item(VARIANT var1/*[in,opt]*/= TNoParam(), 
                                  VARIANT var2/*[in,opt]*/= TNoParam());

  __property   long            length = {read = get_length, write = set_length};
  __property   LPUNKNOWN       _newEnum = {read = get__newEnum};
};
typedef IXMLElementCollectionDispT<IXMLElementCollection> IXMLElementCollectionDisp;

typedef TComInterface<IXMLDocument>  TCOMIXMLDocument;

// *********************************************************************//
// DispIntf:  IXMLDocument
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F52E2B61-18A1-11D1-B105-00805F49916B}
// *********************************************************************//
template<class T>
class IXMLDocumentDispT : public TAutoDriver<IXMLDocument>
{
public:
  IXMLDocumentDispT(){}

  IXMLDocumentDispT(IXMLDocument *pintf)
  {
    TAutoDriver<IXMLDocument>::Bind(pintf, false);
  }

  IXMLDocumentDispT(IXMLDocumentPtr pintf)
  {
    TAutoDriver<IXMLDocument>::Bind(pintf, true);
  }

  IXMLDocumentDispT& operator=(IXMLDocument *pintf)
  {
    TAutoDriver<IXMLDocument>::Bind(pintf, false);
    return *this;
  }

  IXMLDocumentDispT& operator=(IXMLDocumentPtr pintf)
  {
    TAutoDriver<IXMLDocument>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_root(Msxml3::IXMLElement** p/*[out,retval]*/);
  Msxml3::IXMLElement* __fastcall get_root(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_fileSize(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_fileSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_fileModifiedDate(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_fileModifiedDate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_fileUpdatedDate(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_fileUpdatedDate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_url(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_url(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_url(BSTR p/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_mimeType(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_mimeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_readyState(long* pl/*[out,retval]*/);
  long            __fastcall get_readyState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_charset(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_charset(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_charset(BSTR p/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_version(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_version(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_doctype(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_doctype(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_dtdURL(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_dtdURL(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createElement(VARIANT vType/*[in]*/, 
                                                      VARIANT var1/*[in,opt]*/, 
                                                      Msxml3::IXMLElement** ppElem/*[out,retval]*/);
  Msxml3::IXMLElement* __fastcall createElement(VARIANT vType/*[in]*/, 
                                                VARIANT var1/*[in,opt]*/= TNoParam());

  __property   Msxml3::IXMLElement* root = {read = get_root};
  __property   BSTR            fileSize = {read = get_fileSize};
  __property   BSTR            fileModifiedDate = {read = get_fileModifiedDate};
  __property   BSTR            fileUpdatedDate = {read = get_fileUpdatedDate};
  __property   BSTR            url = {read = get_url};
  __property   BSTR            mimeType = {read = get_mimeType};
  __property   long            readyState = {read = get_readyState};
  __property   BSTR            charset = {read = get_charset};
  __property   BSTR            version = {read = get_version};
  __property   BSTR            doctype = {read = get_doctype};
  __property   BSTR            dtdURL = {read = get_dtdURL};
};
typedef IXMLDocumentDispT<IXMLDocument> IXMLDocumentDisp;

typedef TComInterface<IXMLElement>  TCOMIXMLElement;

// *********************************************************************//
// DispIntf:  IXMLElement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3F7F31AC-E15F-11D0-9C25-00C04FC99C8E}
// *********************************************************************//
template<class T>
class IXMLElementDispT : public TAutoDriver<IXMLElement>
{
public:
  IXMLElementDispT(){}

  IXMLElementDispT(IXMLElement *pintf)
  {
    TAutoDriver<IXMLElement>::Bind(pintf, false);
  }

  IXMLElementDispT(IXMLElementPtr pintf)
  {
    TAutoDriver<IXMLElement>::Bind(pintf, true);
  }

  IXMLElementDispT& operator=(IXMLElement *pintf)
  {
    TAutoDriver<IXMLElement>::Bind(pintf, false);
    return *this;
  }

  IXMLElementDispT& operator=(IXMLElementPtr pintf)
  {
    TAutoDriver<IXMLElement>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_tagName(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_tagName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_tagName(BSTR p/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parent(Msxml3::IXMLElement** ppParent/*[out,retval]*/);
  Msxml3::IXMLElement* __fastcall get_parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setAttribute(BSTR strPropertyName/*[in]*/, 
                                                     VARIANT PropertyValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getAttribute(BSTR strPropertyName/*[in]*/, 
                                                     VARIANT* PropertyValue/*[out,retval]*/);
  VARIANT         __fastcall getAttribute(BSTR strPropertyName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeAttribute(BSTR strPropertyName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_children(Msxml3::IXMLElementCollection** pp/*[out,retval]*/);
  Msxml3::IXMLElementCollection* __fastcall get_children(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_type(long* plType/*[out,retval]*/);
  long            __fastcall get_type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_text(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_text(BSTR p/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall addChild(Msxml3::IXMLElement* pChildElem/*[in]*/, 
                                                 long lIndex, long lReserved);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeChild(Msxml3::IXMLElement* pChildElem/*[in]*/);

  __property   BSTR            tagName = {read = get_tagName};
  __property   Msxml3::IXMLElement* parent = {read = get_parent};
  __property   Msxml3::IXMLElementCollection* children = {read = get_children};
  __property   long            type = {read = get_type};
  __property   BSTR            text = {read = get_text};
};
typedef IXMLElementDispT<IXMLElement> IXMLElementDisp;

// *********************************************************************//
// DispIntf:  IXMLDocument2
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2B8DE2FE-8D2D-11D1-B2FC-00C04FD915A9}
// *********************************************************************//
template<class T>
class IXMLDocument2DispT : public TAutoDriver<IXMLDocument2>
{
public:
  IXMLDocument2DispT(){}

  IXMLDocument2DispT(IXMLDocument2 *pintf)
  {
    TAutoDriver<IXMLDocument2>::Bind(pintf, false);
  }

  IXMLDocument2DispT(IXMLDocument2Ptr pintf)
  {
    TAutoDriver<IXMLDocument2>::Bind(pintf, true);
  }

  IXMLDocument2DispT& operator=(IXMLDocument2 *pintf)
  {
    TAutoDriver<IXMLDocument2>::Bind(pintf, false);
    return *this;
  }

  IXMLDocument2DispT& operator=(IXMLDocument2Ptr pintf)
  {
    TAutoDriver<IXMLDocument2>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_XMLDocument));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_XMLDocument);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_root(Msxml3::IXMLElement2** p/*[out,retval]*/);
  Msxml3::IXMLElement2* __fastcall get_root(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_fileSize(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_fileSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_fileModifiedDate(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_fileModifiedDate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_fileUpdatedDate(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_fileUpdatedDate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_url(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_url(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_url(BSTR p/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_mimeType(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_mimeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_readyState(long* pl/*[out,retval]*/);
  long            __fastcall get_readyState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_charset(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_charset(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_charset(BSTR p/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_version(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_version(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_doctype(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_doctype(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_dtdURL(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_dtdURL(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall createElement(VARIANT vType/*[in]*/, 
                                                      VARIANT var1/*[in,opt]*/, 
                                                      Msxml3::IXMLElement2** ppElem/*[out,retval]*/);
  Msxml3::IXMLElement2* __fastcall createElement(VARIANT vType/*[in]*/, 
                                                 VARIANT var1/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_async(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_async(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_async(VARIANT_BOOL pf/*[in]*/);

  __property   Msxml3::IXMLElement2* root = {read = get_root};
  __property   BSTR            fileSize = {read = get_fileSize};
  __property   BSTR            fileModifiedDate = {read = get_fileModifiedDate};
  __property   BSTR            fileUpdatedDate = {read = get_fileUpdatedDate};
  __property   BSTR            url = {read = get_url};
  __property   BSTR            mimeType = {read = get_mimeType};
  __property   long            readyState = {read = get_readyState};
  __property   BSTR            charset = {read = get_charset};
  __property   BSTR            version = {read = get_version};
  __property   BSTR            doctype = {read = get_doctype};
  __property   BSTR            dtdURL = {read = get_dtdURL};
  __property   VARIANT_BOOL    async = {read = get_async, write = set_async};
};
typedef IXMLDocument2DispT<IXMLDocument2> IXMLDocument2Disp;

typedef TComInterface<IXMLElement2>  TCOMIXMLElement2;

// *********************************************************************//
// DispIntf:  IXMLElement2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2B8DE2FF-8D2D-11D1-B2FC-00C04FD915A9}
// *********************************************************************//
template<class T>
class IXMLElement2DispT : public TAutoDriver<IXMLElement2>
{
public:
  IXMLElement2DispT(){}

  IXMLElement2DispT(IXMLElement2 *pintf)
  {
    TAutoDriver<IXMLElement2>::Bind(pintf, false);
  }

  IXMLElement2DispT(IXMLElement2Ptr pintf)
  {
    TAutoDriver<IXMLElement2>::Bind(pintf, true);
  }

  IXMLElement2DispT& operator=(IXMLElement2 *pintf)
  {
    TAutoDriver<IXMLElement2>::Bind(pintf, false);
    return *this;
  }

  IXMLElement2DispT& operator=(IXMLElement2Ptr pintf)
  {
    TAutoDriver<IXMLElement2>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_tagName(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_tagName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_tagName(BSTR p/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_parent(Msxml3::IXMLElement2** ppParent/*[out,retval]*/);
  Msxml3::IXMLElement2* __fastcall get_parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setAttribute(BSTR strPropertyName/*[in]*/, 
                                                     VARIANT PropertyValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getAttribute(BSTR strPropertyName/*[in]*/, 
                                                     VARIANT* PropertyValue/*[out,retval]*/);
  VARIANT         __fastcall getAttribute(BSTR strPropertyName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeAttribute(BSTR strPropertyName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_children(Msxml3::IXMLElementCollection** pp/*[out,retval]*/);
  Msxml3::IXMLElementCollection* __fastcall get_children(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_type(long* plType/*[out,retval]*/);
  long            __fastcall get_type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_text(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_text(BSTR p/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall addChild(Msxml3::IXMLElement2* pChildElem/*[in]*/, 
                                                 long lIndex, long lReserved);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeChild(Msxml3::IXMLElement2* pChildElem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_attributes(Msxml3::IXMLElementCollection** pp/*[out,retval]*/);
  Msxml3::IXMLElementCollection* __fastcall get_attributes(void);

  __property   BSTR            tagName = {read = get_tagName};
  __property   Msxml3::IXMLElement2* parent = {read = get_parent};
  __property   Msxml3::IXMLElementCollection* children = {read = get_children};
  __property   long            type = {read = get_type};
  __property   BSTR            text = {read = get_text};
  __property   Msxml3::IXMLElementCollection* attributes = {read = get_attributes};
};
typedef IXMLElement2DispT<IXMLElement2> IXMLElement2Disp;

typedef TComInterface<IXMLAttribute>  TCOMIXMLAttribute;

// *********************************************************************//
// DispIntf:  IXMLAttribute
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D4D4A0FC-3B73-11D1-B2B4-00C04FB92596}
// *********************************************************************//
template<class T>
class IXMLAttributeDispT : public TAutoDriver<IXMLAttribute>
{
public:
  IXMLAttributeDispT(){}

  IXMLAttributeDispT(IXMLAttribute *pintf)
  {
    TAutoDriver<IXMLAttribute>::Bind(pintf, false);
  }

  IXMLAttributeDispT(IXMLAttributePtr pintf)
  {
    TAutoDriver<IXMLAttribute>::Bind(pintf, true);
  }

  IXMLAttributeDispT& operator=(IXMLAttribute *pintf)
  {
    TAutoDriver<IXMLAttribute>::Bind(pintf, false);
    return *this;
  }

  IXMLAttributeDispT& operator=(IXMLAttributePtr pintf)
  {
    TAutoDriver<IXMLAttribute>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_name(BSTR* n/*[out,retval]*/);
  BSTR            __fastcall get_name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_value(BSTR* v/*[out,retval]*/);
  BSTR            __fastcall get_value(void);

  __property   BSTR            name = {read = get_name};
  __property   BSTR            value = {read = get_value};
};
typedef IXMLAttributeDispT<IXMLAttribute> IXMLAttributeDisp;

typedef TComInterface<IXMLError>  TCOMIXMLError;

typedef TComInterface<IXMLDOMSelection>  TCOMIXMLDOMSelection;

// *********************************************************************//
// DispIntf:  IXMLDOMSelection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AA634FC7-5888-44A7-A257-3A47150D3A0E}
// *********************************************************************//
template<class T>
class IXMLDOMSelectionDispT : public TAutoDriver<IXMLDOMSelection>
{
public:
  IXMLDOMSelectionDispT(){}

  IXMLDOMSelectionDispT(IXMLDOMSelection *pintf)
  {
    TAutoDriver<IXMLDOMSelection>::Bind(pintf, false);
  }

  IXMLDOMSelectionDispT(IXMLDOMSelectionPtr pintf)
  {
    TAutoDriver<IXMLDOMSelection>::Bind(pintf, true);
  }

  IXMLDOMSelectionDispT& operator=(IXMLDOMSelection *pintf)
  {
    TAutoDriver<IXMLDOMSelection>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMSelectionDispT& operator=(IXMLDOMSelectionPtr pintf)
  {
    TAutoDriver<IXMLDOMSelection>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_expr(BSTR* expression/*[out,retval]*/);
  BSTR            __fastcall get_expr(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_expr(BSTR expression/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_context(Msxml3::IXMLDOMNode** ppNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_context(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_context(Msxml3::IXMLDOMNode* ppNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall peekNode(Msxml3::IXMLDOMNode** ppNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall peekNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall matches(Msxml3::IXMLDOMNode* pNode/*[in]*/, 
                                                Msxml3::IXMLDOMNode** ppNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall matches(Msxml3::IXMLDOMNode* pNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeNext(Msxml3::IXMLDOMNode** ppNode/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall removeNext(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall removeAll();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall clone(Msxml3::IXMLDOMSelection** ppNode/*[out,retval]*/);
  Msxml3::IXMLDOMSelection* __fastcall clone(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getProperty(BSTR name/*[in]*/, 
                                                    VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall getProperty(BSTR name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setProperty(BSTR name/*[in]*/, VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_item(long index/*[in]*/, 
                                                 Msxml3::IXMLDOMNode** listItem/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall get_item(long index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_length(long* listLength/*[out,retval]*/);
  long            __fastcall get_length(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall nextNode(Msxml3::IXMLDOMNode** nextItem/*[out,retval]*/);
  Msxml3::IXMLDOMNode* __fastcall nextNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall reset();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__newEnum(void);

  __property   BSTR            expr = {read = get_expr};
  __property   Msxml3::IXMLDOMNode* context = {read = get_context, write = _set_context};

  __property   long            length = {read = get_length};
  __property   LPUNKNOWN       _newEnum = {read = get__newEnum};
};
typedef IXMLDOMSelectionDispT<IXMLDOMSelection> IXMLDOMSelectionDisp;

// *********************************************************************//
// DispIntf:  XMLDOMDocumentEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {3EFAA427-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
template <class T>
class XMLDOMDocumentEventsDispT : public TAutoDriver<XMLDOMDocumentEvents>
{
public:
  XMLDOMDocumentEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall ondataavailable();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall onreadystatechange();

};
typedef XMLDOMDocumentEventsDispT<XMLDOMDocumentEvents> XMLDOMDocumentEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIDSOControl
// Interface: IDSOControl
// *********************************************************************//
template <class T /* IDSOControl */ >
class TCOMIDSOControlT : public TComInterface<IDSOControl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIDSOControlT() {}
  TCOMIDSOControlT(IDSOControl *intf, bool addRef = false) : TComInterface<IDSOControl>(intf, addRef) {}
  TCOMIDSOControlT(const TCOMIDSOControlT& src) : TComInterface<IDSOControl>(src) {}
  TCOMIDSOControlT& operator=(const TCOMIDSOControlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_XMLDocument(Msxml3::IXMLDOMDocument** ppDoc/*[out,retval]*/);
  HRESULT         __fastcall get_XMLDocument(Msxml3::IXMLDOMDocumentPtr* ppDoc/*[out,retval]*/);
  Msxml3::IXMLDOMDocumentPtr __fastcall get_XMLDocument(void);
  HRESULT         __fastcall set_XMLDocument(Msxml3::IXMLDOMDocument* ppDoc/*[in]*/);
  HRESULT         __fastcall set_XMLDocument(Msxml3::IXMLDOMDocumentPtr ppDoc/*[in]*/);
  HRESULT         __fastcall get_JavaDSOCompatible(long* fJavaDSOCompatible/*[out,retval]*/);
  long            __fastcall get_JavaDSOCompatible(void);
  HRESULT         __fastcall set_JavaDSOCompatible(long fJavaDSOCompatible/*[in]*/);
  HRESULT         __fastcall get_readyState(long* state/*[out,retval]*/);
  long            __fastcall get_readyState(void);

  __property   Msxml3::IXMLDOMDocumentPtr XMLDocument = {read = get_XMLDocument, write = set_XMLDocument};
  __property   long            JavaDSOCompatible = {read = get_JavaDSOCompatible, write = set_JavaDSOCompatible};
  __property   long            readyState = {read = get_readyState};
};
typedef TCOMIDSOControlT<IDSOControl> TCOMIDSOControl;

// *********************************************************************//
// DispIntf:  IDSOControl
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {310AFA62-0575-11D2-9CA9-0060B0EC3D39}
// *********************************************************************//
template<class T>
class IDSOControlDispT : public TAutoDriver<IDSOControl>
{
public:
  IDSOControlDispT(){}

  IDSOControlDispT(IDSOControl *pintf)
  {
    TAutoDriver<IDSOControl>::Bind(pintf, false);
  }

  IDSOControlDispT(IDSOControlPtr pintf)
  {
    TAutoDriver<IDSOControl>::Bind(pintf, true);
  }

  IDSOControlDispT& operator=(IDSOControl *pintf)
  {
    TAutoDriver<IDSOControl>::Bind(pintf, false);
    return *this;
  }

  IDSOControlDispT& operator=(IDSOControlPtr pintf)
  {
    TAutoDriver<IDSOControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_msDSOControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_msDSOControl);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_XMLDocument(Msxml3::IXMLDOMDocument** ppDoc/*[out,retval]*/);
  Msxml3::IXMLDOMDocument* __fastcall get_XMLDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_XMLDocument(Msxml3::IXMLDOMDocument* ppDoc/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_JavaDSOCompatible(long* fJavaDSOCompatible/*[out,retval]*/);
  long            __fastcall get_JavaDSOCompatible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_JavaDSOCompatible(long fJavaDSOCompatible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_readyState(long* state/*[out,retval]*/);
  long            __fastcall get_readyState(void);

  __property   Msxml3::IXMLDOMDocument* XMLDocument = {read = get_XMLDocument, write = set_XMLDocument};
  __property   long            JavaDSOCompatible = {read = get_JavaDSOCompatible, write = set_JavaDSOCompatible};
  __property   long            readyState = {read = get_readyState};
};
typedef IDSOControlDispT<IDSOControl> IDSOControlDisp;

// *********************************************************************//
// SmartIntf: TCOMIXMLHTTPRequest
// Interface: IXMLHTTPRequest
// *********************************************************************//
template <class T /* IXMLHTTPRequest */ >
class TCOMIXMLHTTPRequestT : public TComInterface<IXMLHTTPRequest>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIXMLHTTPRequestT() {}
  TCOMIXMLHTTPRequestT(IXMLHTTPRequest *intf, bool addRef = false) : TComInterface<IXMLHTTPRequest>(intf, addRef) {}
  TCOMIXMLHTTPRequestT(const TCOMIXMLHTTPRequestT& src) : TComInterface<IXMLHTTPRequest>(src) {}
  TCOMIXMLHTTPRequestT& operator=(const TCOMIXMLHTTPRequestT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall open(BSTR bstrMethod/*[in]*/, BSTR bstrUrl/*[in]*/, 
                                  VARIANT varAsync/*[in,opt]*/= TNoParam(), 
                                  VARIANT bstrUser/*[in,opt]*/= TNoParam(), 
                                  VARIANT bstrPassword/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall setRequestHeader(BSTR bstrHeader/*[in]*/, BSTR bstrValue/*[in]*/);
  HRESULT         __fastcall getResponseHeader(BSTR bstrHeader/*[in]*/, 
                                               BSTR* pbstrValue/*[out,retval]*/);
  BSTR            __fastcall getResponseHeader(BSTR bstrHeader/*[in]*/);
  HRESULT         __fastcall getAllResponseHeaders(BSTR* pbstrHeaders/*[out,retval]*/);
  BSTR            __fastcall getAllResponseHeaders(void);
  HRESULT         __fastcall send(VARIANT varBody/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall abort(void);
  HRESULT         __fastcall get_status(long* plStatus/*[out,retval]*/);
  long            __fastcall get_status(void);
  HRESULT         __fastcall get_statusText(BSTR* pbstrStatus/*[out,retval]*/);
  BSTR            __fastcall get_statusText(void);
  HRESULT         __fastcall get_responseXML(LPDISPATCH* ppBody/*[out,retval]*/);
  LPDISPATCH      __fastcall get_responseXML(void);
  HRESULT         __fastcall get_responseText(BSTR* pbstrBody/*[out,retval]*/);
  BSTR            __fastcall get_responseText(void);
  HRESULT         __fastcall get_responseBody(VARIANT* pvarBody/*[out,retval]*/);
  VARIANT         __fastcall get_responseBody(void);
  HRESULT         __fastcall get_responseStream(VARIANT* pvarBody/*[out,retval]*/);
  VARIANT         __fastcall get_responseStream(void);
  HRESULT         __fastcall get_readyState(long* plState/*[out,retval]*/);
  long            __fastcall get_readyState(void);
  HRESULT         __fastcall set_onreadystatechange(LPDISPATCH Param1/*[in]*/);

  __property   long            status = {read = get_status};
  __property   BSTR            statusText = {read = get_statusText};
  __property   LPDISPATCH      responseXML = {read = get_responseXML};
  __property   BSTR            responseText = {read = get_responseText};
  __property   long            readyState = {read = get_readyState};
  __property   LPDISPATCH      onreadystatechange = {write = set_onreadystatechange};
};
typedef TCOMIXMLHTTPRequestT<IXMLHTTPRequest> TCOMIXMLHTTPRequest;

// *********************************************************************//
// DispIntf:  IXMLHTTPRequest
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ED8C108D-4349-11D2-91A4-00C04F7969E8}
// *********************************************************************//
template<class T>
class IXMLHTTPRequestDispT : public TAutoDriver<IXMLHTTPRequest>
{
public:
  IXMLHTTPRequestDispT(){}

  IXMLHTTPRequestDispT(IXMLHTTPRequest *pintf)
  {
    TAutoDriver<IXMLHTTPRequest>::Bind(pintf, false);
  }

  IXMLHTTPRequestDispT(IXMLHTTPRequestPtr pintf)
  {
    TAutoDriver<IXMLHTTPRequest>::Bind(pintf, true);
  }

  IXMLHTTPRequestDispT& operator=(IXMLHTTPRequest *pintf)
  {
    TAutoDriver<IXMLHTTPRequest>::Bind(pintf, false);
    return *this;
  }

  IXMLHTTPRequestDispT& operator=(IXMLHTTPRequestPtr pintf)
  {
    TAutoDriver<IXMLHTTPRequest>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_msXMLHTTP));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_msXMLHTTP);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall open(BSTR bstrMethod/*[in]*/, BSTR bstrUrl/*[in]*/, 
                                             VARIANT varAsync/*[in,opt]*/= TNoParam(), 
                                             VARIANT bstrUser/*[in,opt]*/= TNoParam(), 
                                             VARIANT bstrPassword/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setRequestHeader(BSTR bstrHeader/*[in]*/, 
                                                         BSTR bstrValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getResponseHeader(BSTR bstrHeader/*[in]*/, 
                                                          BSTR* pbstrValue/*[out,retval]*/);
  BSTR            __fastcall getResponseHeader(BSTR bstrHeader/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getAllResponseHeaders(BSTR* pbstrHeaders/*[out,retval]*/);
  BSTR            __fastcall getAllResponseHeaders(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall send(VARIANT varBody/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall abort();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_status(long* plStatus/*[out,retval]*/);
  long            __fastcall get_status(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_statusText(BSTR* pbstrStatus/*[out,retval]*/);
  BSTR            __fastcall get_statusText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_responseXML(LPDISPATCH* ppBody/*[out,retval]*/);
  LPDISPATCH      __fastcall get_responseXML(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_responseText(BSTR* pbstrBody/*[out,retval]*/);
  BSTR            __fastcall get_responseText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_responseBody(VARIANT* pvarBody/*[out,retval]*/);
  VARIANT         __fastcall get_responseBody(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_responseStream(VARIANT* pvarBody/*[out,retval]*/);
  VARIANT         __fastcall get_responseStream(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_readyState(long* plState/*[out,retval]*/);
  long            __fastcall get_readyState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_onreadystatechange(LPDISPATCH Param1/*[in]*/);

  __property   long            status = {read = get_status};
  __property   BSTR            statusText = {read = get_statusText};
  __property   LPDISPATCH      responseXML = {read = get_responseXML};
  __property   BSTR            responseText = {read = get_responseText};
  __property   long            readyState = {read = get_readyState};
  __property   LPDISPATCH      onreadystatechange = {write = set_onreadystatechange};
};
typedef IXMLHTTPRequestDispT<IXMLHTTPRequest> IXMLHTTPRequestDisp;

// *********************************************************************//
// SmartIntf: TCOMIServerXMLHTTPRequest
// Interface: IServerXMLHTTPRequest
// *********************************************************************//
template <class T /* IServerXMLHTTPRequest */ >
class TCOMIServerXMLHTTPRequestT : public TComInterface<IServerXMLHTTPRequest>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIServerXMLHTTPRequestT() {}
  TCOMIServerXMLHTTPRequestT(IServerXMLHTTPRequest *intf, bool addRef = false) : TComInterface<IServerXMLHTTPRequest>(intf, addRef) {}
  TCOMIServerXMLHTTPRequestT(const TCOMIServerXMLHTTPRequestT& src) : TComInterface<IServerXMLHTTPRequest>(src) {}
  TCOMIServerXMLHTTPRequestT& operator=(const TCOMIServerXMLHTTPRequestT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall setTimeouts(long resolveTimeout/*[in]*/, long connectTimeout/*[in]*/, 
                                         long sendTimeout/*[in]*/, long receiveTimeout/*[in]*/);
  HRESULT         __fastcall waitForResponse(VARIANT timeoutInSeconds/*[in,opt]*/, 
                                             VARIANT_BOOL* isSuccessful/*[out,retval]*/);
  VARIANT_BOOL    __fastcall waitForResponse(VARIANT timeoutInSeconds/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall getOption(Msxml3::SERVERXMLHTTP_OPTION option/*[in]*/, 
                                       VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall getOption(Msxml3::SERVERXMLHTTP_OPTION option/*[in]*/);
  HRESULT         __fastcall setOption(Msxml3::SERVERXMLHTTP_OPTION option/*[in]*/, 
                                       VARIANT value/*[in]*/);

};
typedef TCOMIServerXMLHTTPRequestT<IServerXMLHTTPRequest> TCOMIServerXMLHTTPRequest;

// *********************************************************************//
// DispIntf:  IServerXMLHTTPRequest
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2E9196BF-13BA-4DD4-91CA-6C571F281495}
// *********************************************************************//
template<class T>
class IServerXMLHTTPRequestDispT : public TAutoDriver<IServerXMLHTTPRequest>
{
public:
  IServerXMLHTTPRequestDispT(){}

  IServerXMLHTTPRequestDispT(IServerXMLHTTPRequest *pintf)
  {
    TAutoDriver<IServerXMLHTTPRequest>::Bind(pintf, false);
  }

  IServerXMLHTTPRequestDispT(IServerXMLHTTPRequestPtr pintf)
  {
    TAutoDriver<IServerXMLHTTPRequest>::Bind(pintf, true);
  }

  IServerXMLHTTPRequestDispT& operator=(IServerXMLHTTPRequest *pintf)
  {
    TAutoDriver<IServerXMLHTTPRequest>::Bind(pintf, false);
    return *this;
  }

  IServerXMLHTTPRequestDispT& operator=(IServerXMLHTTPRequestPtr pintf)
  {
    TAutoDriver<IServerXMLHTTPRequest>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_msServerXMLHTTP));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_msServerXMLHTTP);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall setTimeouts(long resolveTimeout/*[in]*/, 
                                                    long connectTimeout/*[in]*/, 
                                                    long sendTimeout/*[in]*/, 
                                                    long receiveTimeout/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall waitForResponse(VARIANT timeoutInSeconds/*[in,opt]*/, 
                                                        VARIANT_BOOL* isSuccessful/*[out,retval]*/);
  VARIANT_BOOL    __fastcall waitForResponse(VARIANT timeoutInSeconds/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getOption(Msxml3::SERVERXMLHTTP_OPTION option/*[in]*/, 
                                                  VARIANT* value/*[out,retval]*/);
  VARIANT         __fastcall getOption(Msxml3::SERVERXMLHTTP_OPTION option/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setOption(Msxml3::SERVERXMLHTTP_OPTION option/*[in]*/, 
                                                  VARIANT value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall open(BSTR bstrMethod/*[in]*/, BSTR bstrUrl/*[in]*/, 
                                             VARIANT varAsync/*[in,opt]*/= TNoParam(), 
                                             VARIANT bstrUser/*[in,opt]*/= TNoParam(), 
                                             VARIANT bstrPassword/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setRequestHeader(BSTR bstrHeader/*[in]*/, 
                                                         BSTR bstrValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getResponseHeader(BSTR bstrHeader/*[in]*/, 
                                                          BSTR* pbstrValue/*[out,retval]*/);
  BSTR            __fastcall getResponseHeader(BSTR bstrHeader/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getAllResponseHeaders(BSTR* pbstrHeaders/*[out,retval]*/);
  BSTR            __fastcall getAllResponseHeaders(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall send(VARIANT varBody/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall abort();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_status(long* plStatus/*[out,retval]*/);
  long            __fastcall get_status(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_statusText(BSTR* pbstrStatus/*[out,retval]*/);
  BSTR            __fastcall get_statusText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_responseXML(LPDISPATCH* ppBody/*[out,retval]*/);
  LPDISPATCH      __fastcall get_responseXML(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_responseText(BSTR* pbstrBody/*[out,retval]*/);
  BSTR            __fastcall get_responseText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_responseBody(VARIANT* pvarBody/*[out,retval]*/);
  VARIANT         __fastcall get_responseBody(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_responseStream(VARIANT* pvarBody/*[out,retval]*/);
  VARIANT         __fastcall get_responseStream(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_readyState(long* plState/*[out,retval]*/);
  long            __fastcall get_readyState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_onreadystatechange(LPDISPATCH Param1/*[in]*/);


  __property   long            status = {read = get_status};
  __property   BSTR            statusText = {read = get_statusText};
  __property   LPDISPATCH      responseXML = {read = get_responseXML};
  __property   BSTR            responseText = {read = get_responseText};
  __property   long            readyState = {read = get_readyState};
  __property   LPDISPATCH      onreadystatechange = {write = set_onreadystatechange};
};
typedef IServerXMLHTTPRequestDispT<IServerXMLHTTPRequest> IServerXMLHTTPRequestDisp;

// *********************************************************************//
// DispIntf:  IXMLDOMImplementation
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8F-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMImplementationDispT<T>::hasFeature(BSTR feature/*[in]*/, BSTR version/*[in]*/, 
                                          VARIANT_BOOL* hasFeature/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasFeature"), DISPID(145));
  TAutoArgs<2> _args;
  _args[1] = feature /*[VT_BSTR:0]*/;
  _args[2] = version /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(hasFeature /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMImplementationDispT<T>::hasFeature(BSTR feature/*[in]*/, BSTR version/*[in]*/)
{
  VARIANT_BOOL hasFeature;
  this->hasFeature(feature, version, (VARIANT_BOOL*)&hasFeature);
  return hasFeature;
}

// *********************************************************************//
// DispIntf:  IXMLDOMNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF80-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNodeDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_nodeValue(VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMNodeDispT<T>::get_nodeValue(void)
{
  VARIANT value;
  this->get_nodeValue((VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::set_nodeValue(VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::DOMNodeType __fastcall
IXMLDOMNodeDispT<T>::get_nodeType(void)
{
  Msxml3::DOMNodeType type;
  this->get_nodeType((Msxml3::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNodeDispT<T>::get_parentNode(void)
{
  Msxml3::IXMLDOMNode* parent;
  this->get_parentNode((Msxml3::IXMLDOMNode**)&parent);
  return parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMNodeDispT<T>::get_childNodes(void)
{
  Msxml3::IXMLDOMNodeList* childList;
  this->get_childNodes((Msxml3::IXMLDOMNodeList**)&childList);
  return childList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNodeDispT<T>::get_firstChild(void)
{
  Msxml3::IXMLDOMNode* firstChild;
  this->get_firstChild((Msxml3::IXMLDOMNode**)&firstChild);
  return firstChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNodeDispT<T>::get_lastChild(void)
{
  Msxml3::IXMLDOMNode* lastChild;
  this->get_lastChild((Msxml3::IXMLDOMNode**)&lastChild);
  return lastChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNodeDispT<T>::get_previousSibling(void)
{
  Msxml3::IXMLDOMNode* previousSibling;
  this->get_previousSibling((Msxml3::IXMLDOMNode**)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNodeDispT<T>::get_nextSibling(void)
{
  Msxml3::IXMLDOMNode* nextSibling;
  this->get_nextSibling((Msxml3::IXMLDOMNode**)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNamedNodeMap* __fastcall
IXMLDOMNodeDispT<T>::get_attributes(void)
{
  Msxml3::IXMLDOMNamedNodeMap* attributeMap;
  this->get_attributes((Msxml3::IXMLDOMNamedNodeMap**)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, VARIANT refChild/*[in]*/, 
                                  Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNodeDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, VARIANT refChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->insertBefore(newChild, refChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                  Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                  Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNodeDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                  Msxml3::IXMLDOMNode* oldChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml3::IXMLDOMNode**)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                 Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNodeDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/)
{
  Msxml3::IXMLDOMNode* oldChild;
  this->removeChild(childNode, (Msxml3::IXMLDOMNode**)&oldChild);
  return oldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                 Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNodeDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->appendChild(newChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMNodeDispT<T>::hasChildNodes(void)
{
  VARIANT_BOOL hasChild;
  this->hasChildNodes((VARIANT_BOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocument* __fastcall
IXMLDOMNodeDispT<T>::get_ownerDocument(void)
{
  Msxml3::IXMLDOMDocument* DOMDocument;
  this->get_ownerDocument((Msxml3::IXMLDOMDocument**)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/, 
                               Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNodeDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/)
{
  Msxml3::IXMLDOMNode* cloneRoot;
  this->cloneNode(deep, (Msxml3::IXMLDOMNode**)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNodeDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNodeDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMNodeDispT<T>::get_specified(void)
{
  VARIANT_BOOL isSpecified;
  this->get_specified((VARIANT_BOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNodeDispT<T>::get_definition(void)
{
  Msxml3::IXMLDOMNode* definitionNode;
  this->get_definition((Msxml3::IXMLDOMNode**)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMNodeDispT<T>::get_nodeTypedValue(void)
{
  VARIANT typedValue;
  this->get_nodeTypedValue((VARIANT*)&typedValue);
  return typedValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::set_nodeTypedValue(VARIANT typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_dataType(VARIANT* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMNodeDispT<T>::get_dataType(void)
{
  VARIANT dataTypeName;
  this->get_dataType((VARIANT*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNodeDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                   BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNodeDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                 Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMNodeDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNodeList* resultList;
  this->selectNodes(queryString, (Msxml3::IXMLDOMNodeList**)&resultList);
  return resultList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                      Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNodeDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNode* resultNode;
  this->selectSingleNode(queryString, (Msxml3::IXMLDOMNode**)&resultNode);
  return resultNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMNodeDispT<T>::get_parsed(void)
{
  VARIANT_BOOL isParsed;
  this->get_parsed((VARIANT_BOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNodeDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNodeDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNodeDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeDispT<T>::transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                           VARIANT outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMNodeList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF82-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeListDispT<T>::get_item(long index/*[in]*/, Msxml3::IXMLDOMNode** listItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)listItem /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNodeListDispT<T>::get_item(long index/*[in]*/)
{
  Msxml3::IXMLDOMNode* listItem;
  this->get_item(index, (Msxml3::IXMLDOMNode**)&listItem);
  return listItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeListDispT<T>::get_length(long* listLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(74));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(listLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMNodeListDispT<T>::get_length(void)
{
  long listLength;
  this->get_length((long*)&listLength);
  return listLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeListDispT<T>::nextNode(Msxml3::IXMLDOMNode** nextItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextNode"), DISPID(76));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nextItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNodeListDispT<T>::nextNode(void)
{
  Msxml3::IXMLDOMNode* nextItem;
  this->nextNode((Msxml3::IXMLDOMNode**)&nextItem);
  return nextItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeListDispT<T>::reset()
{
  _TDispID _dispid(*this, OLETEXT("reset"), DISPID(77));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNodeListDispT<T>::get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_newEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IXMLDOMNodeListDispT<T>::get__newEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__newEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

// *********************************************************************//
// DispIntf:  IXMLDOMNamedNodeMap
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF83-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNamedNodeMapDispT<T>::getNamedItem(BSTR name/*[in]*/, 
                                          Msxml3::IXMLDOMNode** namedItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getNamedItem"), DISPID(83));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)namedItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNamedNodeMapDispT<T>::getNamedItem(BSTR name/*[in]*/)
{
  Msxml3::IXMLDOMNode* namedItem;
  this->getNamedItem(name, (Msxml3::IXMLDOMNode**)&namedItem);
  return namedItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNamedNodeMapDispT<T>::setNamedItem(Msxml3::IXMLDOMNode* newItem/*[in]*/, 
                                          Msxml3::IXMLDOMNode** nameItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("setNamedItem"), DISPID(84));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newItem /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nameItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNamedNodeMapDispT<T>::setNamedItem(Msxml3::IXMLDOMNode* newItem/*[in]*/)
{
  Msxml3::IXMLDOMNode* nameItem;
  this->setNamedItem(newItem, (Msxml3::IXMLDOMNode**)&nameItem);
  return nameItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNamedNodeMapDispT<T>::removeNamedItem(BSTR name/*[in]*/, 
                                             Msxml3::IXMLDOMNode** namedItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeNamedItem"), DISPID(85));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)namedItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNamedNodeMapDispT<T>::removeNamedItem(BSTR name/*[in]*/)
{
  Msxml3::IXMLDOMNode* namedItem;
  this->removeNamedItem(name, (Msxml3::IXMLDOMNode**)&namedItem);
  return namedItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNamedNodeMapDispT<T>::get_item(long index/*[in]*/, 
                                      Msxml3::IXMLDOMNode** listItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)listItem /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNamedNodeMapDispT<T>::get_item(long index/*[in]*/)
{
  Msxml3::IXMLDOMNode* listItem;
  this->get_item(index, (Msxml3::IXMLDOMNode**)&listItem);
  return listItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNamedNodeMapDispT<T>::get_length(long* listLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(74));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(listLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMNamedNodeMapDispT<T>::get_length(void)
{
  long listLength;
  this->get_length((long*)&listLength);
  return listLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNamedNodeMapDispT<T>::getQualifiedItem(BSTR baseName/*[in]*/, BSTR namespaceURI/*[in]*/, 
                                              Msxml3::IXMLDOMNode** qualifiedItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getQualifiedItem"), DISPID(87));
  TAutoArgs<2> _args;
  _args[1] = baseName /*[VT_BSTR:0]*/;
  _args[2] = namespaceURI /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)qualifiedItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNamedNodeMapDispT<T>::getQualifiedItem(BSTR baseName/*[in]*/, BSTR namespaceURI/*[in]*/)
{
  Msxml3::IXMLDOMNode* qualifiedItem;
  this->getQualifiedItem(baseName, namespaceURI, (Msxml3::IXMLDOMNode**)&qualifiedItem);
  return qualifiedItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNamedNodeMapDispT<T>::removeQualifiedItem(BSTR baseName/*[in]*/, BSTR namespaceURI/*[in]*/, 
                                                 Msxml3::IXMLDOMNode** qualifiedItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeQualifiedItem"), DISPID(88));
  TAutoArgs<2> _args;
  _args[1] = baseName /*[VT_BSTR:0]*/;
  _args[2] = namespaceURI /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)qualifiedItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNamedNodeMapDispT<T>::removeQualifiedItem(BSTR baseName/*[in]*/, BSTR namespaceURI/*[in]*/)
{
  Msxml3::IXMLDOMNode* qualifiedItem;
  this->removeQualifiedItem(baseName, namespaceURI, (Msxml3::IXMLDOMNode**)&qualifiedItem);
  return qualifiedItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNamedNodeMapDispT<T>::nextNode(Msxml3::IXMLDOMNode** nextItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextNode"), DISPID(89));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nextItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNamedNodeMapDispT<T>::nextNode(void)
{
  Msxml3::IXMLDOMNode* nextItem;
  this->nextNode((Msxml3::IXMLDOMNode**)&nextItem);
  return nextItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNamedNodeMapDispT<T>::reset()
{
  _TDispID _dispid(*this, OLETEXT("reset"), DISPID(90));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNamedNodeMapDispT<T>::get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_newEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IXMLDOMNamedNodeMapDispT<T>::get__newEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__newEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

// *********************************************************************//
// DispIntf:  IXMLDOMDocument
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF81-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_doctype(Msxml3::IXMLDOMDocumentType** documentType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("doctype"), DISPID(38));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocumentType**)documentType /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocumentType* __fastcall
IXMLDOMDocumentDispT<T>::get_doctype(void)
{
  Msxml3::IXMLDOMDocumentType* documentType;
  this->get_doctype((Msxml3::IXMLDOMDocumentType**)&documentType);
  return documentType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_implementation(Msxml3::IXMLDOMImplementation** impl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("implementation"), DISPID(39));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMImplementation**)impl /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMImplementation* __fastcall
IXMLDOMDocumentDispT<T>::get_implementation(void)
{
  Msxml3::IXMLDOMImplementation* impl;
  this->get_implementation((Msxml3::IXMLDOMImplementation**)&impl);
  return impl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_documentElement(Msxml3::IXMLDOMElement** DOMElement/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("documentElement"), DISPID(40));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMElement**)DOMElement /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMElement* __fastcall
IXMLDOMDocumentDispT<T>::get_documentElement(void)
{
  Msxml3::IXMLDOMElement* DOMElement;
  this->get_documentElement((Msxml3::IXMLDOMElement**)&DOMElement);
  return DOMElement;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::_set_documentElement(Msxml3::IXMLDOMElement* DOMElement/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("documentElement"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMElement*)DOMElement /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::createElement(BSTR tagName/*[in]*/, 
                                       Msxml3::IXMLDOMElement** element/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createElement"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = tagName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMElement**)element /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMElement* __fastcall
IXMLDOMDocumentDispT<T>::createElement(BSTR tagName/*[in]*/)
{
  Msxml3::IXMLDOMElement* element;
  this->createElement(tagName, (Msxml3::IXMLDOMElement**)&element);
  return element;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::createDocumentFragment(Msxml3::IXMLDOMDocumentFragment** docFrag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createDocumentFragment"), DISPID(42));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocumentFragment**)docFrag /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocumentFragment* __fastcall
IXMLDOMDocumentDispT<T>::createDocumentFragment(void)
{
  Msxml3::IXMLDOMDocumentFragment* docFrag;
  this->createDocumentFragment((Msxml3::IXMLDOMDocumentFragment**)&docFrag);
  return docFrag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::createTextNode(BSTR data/*[in]*/, 
                                        Msxml3::IXMLDOMCharacterData** text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createTextNode"), DISPID(43));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMCharacterData**)text /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMCharacterData* __fastcall
IXMLDOMDocumentDispT<T>::createTextNode(BSTR data/*[in]*/)
{
  Msxml3::IXMLDOMCharacterData* text;
  this->createTextNode(data, (Msxml3::IXMLDOMCharacterData**)&text);
  return text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::createComment(BSTR data/*[in]*/, 
                                       Msxml3::IXMLDOMComment** comment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createComment"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMComment**)comment /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMComment* __fastcall
IXMLDOMDocumentDispT<T>::createComment(BSTR data/*[in]*/)
{
  Msxml3::IXMLDOMComment* comment;
  this->createComment(data, (Msxml3::IXMLDOMComment**)&comment);
  return comment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::createCDATASection(BSTR data/*[in]*/, 
                                            Msxml3::IXMLDOMCDATASection** cdata/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createCDATASection"), DISPID(45));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMCDATASection**)cdata /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMCDATASection* __fastcall
IXMLDOMDocumentDispT<T>::createCDATASection(BSTR data/*[in]*/)
{
  Msxml3::IXMLDOMCDATASection* cdata;
  this->createCDATASection(data, (Msxml3::IXMLDOMCDATASection**)&cdata);
  return cdata;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::createProcessingInstruction(BSTR target/*[in]*/, BSTR data/*[in]*/, 
                                                     Msxml3::IXMLDOMProcessingInstruction** pi/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createProcessingInstruction"), DISPID(46));
  TAutoArgs<2> _args;
  _args[1] = target /*[VT_BSTR:0]*/;
  _args[2] = data /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMProcessingInstruction**)pi /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMProcessingInstruction* __fastcall
IXMLDOMDocumentDispT<T>::createProcessingInstruction(BSTR target/*[in]*/, BSTR data/*[in]*/)
{
  Msxml3::IXMLDOMProcessingInstruction* pi;
  this->createProcessingInstruction(target, data, (Msxml3::IXMLDOMProcessingInstruction**)&pi);
  return pi;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::createAttribute(BSTR name/*[in]*/, 
                                         Msxml3::IXMLDOMAttribute** attribute/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createAttribute"), DISPID(47));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMAttribute**)attribute /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMAttribute* __fastcall
IXMLDOMDocumentDispT<T>::createAttribute(BSTR name/*[in]*/)
{
  Msxml3::IXMLDOMAttribute* attribute;
  this->createAttribute(name, (Msxml3::IXMLDOMAttribute**)&attribute);
  return attribute;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::createEntityReference(BSTR name/*[in]*/, 
                                               Msxml3::IXMLDOMEntityReference** entityRef/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createEntityReference"), DISPID(49));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMEntityReference**)entityRef /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMEntityReference* __fastcall
IXMLDOMDocumentDispT<T>::createEntityReference(BSTR name/*[in]*/)
{
  Msxml3::IXMLDOMEntityReference* entityRef;
  this->createEntityReference(name, (Msxml3::IXMLDOMEntityReference**)&entityRef);
  return entityRef;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::getElementsByTagName(BSTR tagName/*[in]*/, 
                                              Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getElementsByTagName"), DISPID(50));
  TAutoArgs<1> _args;
  _args[1] = tagName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMDocumentDispT<T>::getElementsByTagName(BSTR tagName/*[in]*/)
{
  Msxml3::IXMLDOMNodeList* resultList;
  this->getElementsByTagName(tagName, (Msxml3::IXMLDOMNodeList**)&resultList);
  return resultList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::createNode(VARIANT type/*[in]*/, BSTR name/*[in]*/, 
                                    BSTR namespaceURI/*[in]*/, 
                                    Msxml3::IXMLDOMNode** node/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createNode"), DISPID(54));
  TAutoArgs<3> _args;
  _args[1] = type /*[VT_VARIANT:0]*/;
  _args[2] = name /*[VT_BSTR:0]*/;
  _args[3] = namespaceURI /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)node /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentDispT<T>::createNode(VARIANT type/*[in]*/, BSTR name/*[in]*/, 
                                    BSTR namespaceURI/*[in]*/)
{
  Msxml3::IXMLDOMNode* node;
  this->createNode(type, name, namespaceURI, (Msxml3::IXMLDOMNode**)&node);
  return node;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::nodeFromID(BSTR idString/*[in]*/, 
                                    Msxml3::IXMLDOMNode** node/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeFromID"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = idString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)node /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentDispT<T>::nodeFromID(BSTR idString/*[in]*/)
{
  Msxml3::IXMLDOMNode* node;
  this->nodeFromID(idString, (Msxml3::IXMLDOMNode**)&node);
  return node;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::load(VARIANT xmlSource/*[in]*/, VARIANT_BOOL* isSuccessful/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("load"), DISPID(58));
  TAutoArgs<1> _args;
  _args[1] = xmlSource /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(isSuccessful /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocumentDispT<T>::load(VARIANT xmlSource/*[in]*/)
{
  VARIANT_BOOL isSuccessful;
  this->load(xmlSource, (VARIANT_BOOL*)&isSuccessful);
  return isSuccessful;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_readyState(long* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("readyState"), DISPID(-525));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMDocumentDispT<T>::get_readyState(void)
{
  long value;
  this->get_readyState((long*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_parseError(Msxml3::IXMLDOMParseError** errorObj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parseError"), DISPID(59));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMParseError**)errorObj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMParseError* __fastcall
IXMLDOMDocumentDispT<T>::get_parseError(void)
{
  Msxml3::IXMLDOMParseError* errorObj;
  this->get_parseError((Msxml3::IXMLDOMParseError**)&errorObj);
  return errorObj;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_url(BSTR* urlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("url"), DISPID(60));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(urlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentDispT<T>::get_url(void)
{
  BSTR urlString;
  this->get_url((BSTR*)&urlString);
  return urlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_async(VARIANT_BOOL* isAsync/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("async"), DISPID(61));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isAsync /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocumentDispT<T>::get_async(void)
{
  VARIANT_BOOL isAsync;
  this->get_async((VARIANT_BOOL*)&isAsync);
  return isAsync;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::set_async(VARIANT_BOOL isAsync/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("async"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = isAsync /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::abort()
{
  _TDispID _dispid(*this, OLETEXT("abort"), DISPID(62));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::loadXML(BSTR bstrXML/*[in]*/, VARIANT_BOOL* isSuccessful/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("loadXML"), DISPID(63));
  TAutoArgs<1> _args;
  _args[1] = bstrXML /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(isSuccessful /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocumentDispT<T>::loadXML(BSTR bstrXML/*[in]*/)
{
  VARIANT_BOOL isSuccessful;
  this->loadXML(bstrXML, (VARIANT_BOOL*)&isSuccessful);
  return isSuccessful;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::save(VARIANT destination/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("save"), DISPID(64));
  TAutoArgs<1> _args;
  _args[1] = destination /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_validateOnParse(VARIANT_BOOL* isValidating/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("validateOnParse"), DISPID(65));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isValidating /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocumentDispT<T>::get_validateOnParse(void)
{
  VARIANT_BOOL isValidating;
  this->get_validateOnParse((VARIANT_BOOL*)&isValidating);
  return isValidating;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::set_validateOnParse(VARIANT_BOOL isValidating/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("validateOnParse"), DISPID(65));
  TAutoArgs<1> _args;
  _args[1] = isValidating /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_resolveExternals(VARIANT_BOOL* isResolving/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("resolveExternals"), DISPID(66));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isResolving /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocumentDispT<T>::get_resolveExternals(void)
{
  VARIANT_BOOL isResolving;
  this->get_resolveExternals((VARIANT_BOOL*)&isResolving);
  return isResolving;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::set_resolveExternals(VARIANT_BOOL isResolving/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("resolveExternals"), DISPID(66));
  TAutoArgs<1> _args;
  _args[1] = isResolving /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_preserveWhiteSpace(VARIANT_BOOL* isPreserving/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("preserveWhiteSpace"), DISPID(67));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isPreserving /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocumentDispT<T>::get_preserveWhiteSpace(void)
{
  VARIANT_BOOL isPreserving;
  this->get_preserveWhiteSpace((VARIANT_BOOL*)&isPreserving);
  return isPreserving;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::set_preserveWhiteSpace(VARIANT_BOOL isPreserving/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("preserveWhiteSpace"), DISPID(67));
  TAutoArgs<1> _args;
  _args[1] = isPreserving /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::set_onreadystatechange(VARIANT Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("onreadystatechange"), DISPID(68));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::set_ondataavailable(VARIANT Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ondataavailable"), DISPID(69));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::set_ontransformnode(VARIANT Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ontransformnode"), DISPID(70));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_nodeValue(VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMDocumentDispT<T>::get_nodeValue(void)
{
  VARIANT value;
  this->get_nodeValue((VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::set_nodeValue(VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::DOMNodeType __fastcall
IXMLDOMDocumentDispT<T>::get_nodeType(void)
{
  Msxml3::DOMNodeType type;
  this->get_nodeType((Msxml3::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentDispT<T>::get_parentNode(void)
{
  Msxml3::IXMLDOMNode* parent;
  this->get_parentNode((Msxml3::IXMLDOMNode**)&parent);
  return parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMDocumentDispT<T>::get_childNodes(void)
{
  Msxml3::IXMLDOMNodeList* childList;
  this->get_childNodes((Msxml3::IXMLDOMNodeList**)&childList);
  return childList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentDispT<T>::get_firstChild(void)
{
  Msxml3::IXMLDOMNode* firstChild;
  this->get_firstChild((Msxml3::IXMLDOMNode**)&firstChild);
  return firstChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentDispT<T>::get_lastChild(void)
{
  Msxml3::IXMLDOMNode* lastChild;
  this->get_lastChild((Msxml3::IXMLDOMNode**)&lastChild);
  return lastChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentDispT<T>::get_previousSibling(void)
{
  Msxml3::IXMLDOMNode* previousSibling;
  this->get_previousSibling((Msxml3::IXMLDOMNode**)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentDispT<T>::get_nextSibling(void)
{
  Msxml3::IXMLDOMNode* nextSibling;
  this->get_nextSibling((Msxml3::IXMLDOMNode**)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNamedNodeMap* __fastcall
IXMLDOMDocumentDispT<T>::get_attributes(void)
{
  Msxml3::IXMLDOMNamedNodeMap* attributeMap;
  this->get_attributes((Msxml3::IXMLDOMNamedNodeMap**)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                      VARIANT refChild/*[in]*/, 
                                      Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                      VARIANT refChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->insertBefore(newChild, refChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                      Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                      Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                      Msxml3::IXMLDOMNode* oldChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml3::IXMLDOMNode**)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                     Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/)
{
  Msxml3::IXMLDOMNode* oldChild;
  this->removeChild(childNode, (Msxml3::IXMLDOMNode**)&oldChild);
  return oldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                     Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->appendChild(newChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocumentDispT<T>::hasChildNodes(void)
{
  VARIANT_BOOL hasChild;
  this->hasChildNodes((VARIANT_BOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocument* __fastcall
IXMLDOMDocumentDispT<T>::get_ownerDocument(void)
{
  Msxml3::IXMLDOMDocument* DOMDocument;
  this->get_ownerDocument((Msxml3::IXMLDOMDocument**)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                   Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/)
{
  Msxml3::IXMLDOMNode* cloneRoot;
  this->cloneNode(deep, (Msxml3::IXMLDOMNode**)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocumentDispT<T>::get_specified(void)
{
  VARIANT_BOOL isSpecified;
  this->get_specified((VARIANT_BOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentDispT<T>::get_definition(void)
{
  Msxml3::IXMLDOMNode* definitionNode;
  this->get_definition((Msxml3::IXMLDOMNode**)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMDocumentDispT<T>::get_nodeTypedValue(void)
{
  VARIANT typedValue;
  this->get_nodeTypedValue((VARIANT*)&typedValue);
  return typedValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::set_nodeTypedValue(VARIANT typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_dataType(VARIANT* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMDocumentDispT<T>::get_dataType(void)
{
  VARIANT dataTypeName;
  this->get_dataType((VARIANT*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                       BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                     Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMDocumentDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNodeList* resultList;
  this->selectNodes(queryString, (Msxml3::IXMLDOMNodeList**)&resultList);
  return resultList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                          Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNode* resultNode;
  this->selectSingleNode(queryString, (Msxml3::IXMLDOMNode**)&resultNode);
  return resultNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocumentDispT<T>::get_parsed(void)
{
  VARIANT_BOOL isParsed;
  this->get_parsed((VARIANT_BOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentDispT<T>::transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                               VARIANT outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMDocumentType
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8B-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_name(BSTR* rootName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("name"), DISPID(131));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(rootName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentTypeDispT<T>::get_name(void)
{
  BSTR rootName;
  this->get_name((BSTR*)&rootName);
  return rootName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_entities(Msxml3::IXMLDOMNamedNodeMap** entityMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("entities"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNamedNodeMap**)entityMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNamedNodeMap* __fastcall
IXMLDOMDocumentTypeDispT<T>::get_entities(void)
{
  Msxml3::IXMLDOMNamedNodeMap* entityMap;
  this->get_entities((Msxml3::IXMLDOMNamedNodeMap**)&entityMap);
  return entityMap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_notations(Msxml3::IXMLDOMNamedNodeMap** notationMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("notations"), DISPID(133));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNamedNodeMap**)notationMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNamedNodeMap* __fastcall
IXMLDOMDocumentTypeDispT<T>::get_notations(void)
{
  Msxml3::IXMLDOMNamedNodeMap* notationMap;
  this->get_notations((Msxml3::IXMLDOMNamedNodeMap**)&notationMap);
  return notationMap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeValue(VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeValue(void)
{
  VARIANT value;
  this->get_nodeValue((VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::set_nodeValue(VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::DOMNodeType __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeType(void)
{
  Msxml3::DOMNodeType type;
  this->get_nodeType((Msxml3::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentTypeDispT<T>::get_parentNode(void)
{
  Msxml3::IXMLDOMNode* parent;
  this->get_parentNode((Msxml3::IXMLDOMNode**)&parent);
  return parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMDocumentTypeDispT<T>::get_childNodes(void)
{
  Msxml3::IXMLDOMNodeList* childList;
  this->get_childNodes((Msxml3::IXMLDOMNodeList**)&childList);
  return childList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentTypeDispT<T>::get_firstChild(void)
{
  Msxml3::IXMLDOMNode* firstChild;
  this->get_firstChild((Msxml3::IXMLDOMNode**)&firstChild);
  return firstChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentTypeDispT<T>::get_lastChild(void)
{
  Msxml3::IXMLDOMNode* lastChild;
  this->get_lastChild((Msxml3::IXMLDOMNode**)&lastChild);
  return lastChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentTypeDispT<T>::get_previousSibling(void)
{
  Msxml3::IXMLDOMNode* previousSibling;
  this->get_previousSibling((Msxml3::IXMLDOMNode**)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nextSibling(void)
{
  Msxml3::IXMLDOMNode* nextSibling;
  this->get_nextSibling((Msxml3::IXMLDOMNode**)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNamedNodeMap* __fastcall
IXMLDOMDocumentTypeDispT<T>::get_attributes(void)
{
  Msxml3::IXMLDOMNamedNodeMap* attributeMap;
  this->get_attributes((Msxml3::IXMLDOMNamedNodeMap**)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                          VARIANT refChild/*[in]*/, 
                                          Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentTypeDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                          VARIANT refChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->insertBefore(newChild, refChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                          Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                          Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentTypeDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                          Msxml3::IXMLDOMNode* oldChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml3::IXMLDOMNode**)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                         Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentTypeDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/)
{
  Msxml3::IXMLDOMNode* oldChild;
  this->removeChild(childNode, (Msxml3::IXMLDOMNode**)&oldChild);
  return oldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                         Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentTypeDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->appendChild(newChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocumentTypeDispT<T>::hasChildNodes(void)
{
  VARIANT_BOOL hasChild;
  this->hasChildNodes((VARIANT_BOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocument* __fastcall
IXMLDOMDocumentTypeDispT<T>::get_ownerDocument(void)
{
  Msxml3::IXMLDOMDocument* DOMDocument;
  this->get_ownerDocument((Msxml3::IXMLDOMDocument**)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                       Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentTypeDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/)
{
  Msxml3::IXMLDOMNode* cloneRoot;
  this->cloneNode(deep, (Msxml3::IXMLDOMNode**)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentTypeDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocumentTypeDispT<T>::get_specified(void)
{
  VARIANT_BOOL isSpecified;
  this->get_specified((VARIANT_BOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentTypeDispT<T>::get_definition(void)
{
  Msxml3::IXMLDOMNode* definitionNode;
  this->get_definition((Msxml3::IXMLDOMNode**)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeTypedValue(void)
{
  VARIANT typedValue;
  this->get_nodeTypedValue((VARIANT*)&typedValue);
  return typedValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::set_nodeTypedValue(VARIANT typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_dataType(VARIANT* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_dataType(void)
{
  VARIANT dataTypeName;
  this->get_dataType((VARIANT*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentTypeDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                           BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentTypeDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                         Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMDocumentTypeDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNodeList* resultList;
  this->selectNodes(queryString, (Msxml3::IXMLDOMNodeList**)&resultList);
  return resultList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                              Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentTypeDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNode* resultNode;
  this->selectSingleNode(queryString, (Msxml3::IXMLDOMNode**)&resultNode);
  return resultNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocumentTypeDispT<T>::get_parsed(void)
{
  VARIANT_BOOL isParsed;
  this->get_parsed((VARIANT_BOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentTypeDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentTypeDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentTypeDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentTypeDispT<T>::transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                   VARIANT outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMElement
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF86-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_tagName(BSTR* tagName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("tagName"), DISPID(97));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(tagName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMElementDispT<T>::get_tagName(void)
{
  BSTR tagName;
  this->get_tagName((BSTR*)&tagName);
  return tagName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::getAttribute(BSTR name/*[in]*/, VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAttribute"), DISPID(99));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMElementDispT<T>::getAttribute(BSTR name/*[in]*/)
{
  VARIANT value;
  this->getAttribute(name, (VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::setAttribute(BSTR name/*[in]*/, VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setAttribute"), DISPID(100));
  TAutoArgs<2> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  _args[2] = value /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::removeAttribute(BSTR name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeAttribute"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::getAttributeNode(BSTR name/*[in]*/, 
                                         Msxml3::IXMLDOMAttribute** attributeNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAttributeNode"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMAttribute**)attributeNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMAttribute* __fastcall
IXMLDOMElementDispT<T>::getAttributeNode(BSTR name/*[in]*/)
{
  Msxml3::IXMLDOMAttribute* attributeNode;
  this->getAttributeNode(name, (Msxml3::IXMLDOMAttribute**)&attributeNode);
  return attributeNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::setAttributeNode(Msxml3::IXMLDOMAttribute* DOMAttribute/*[in]*/, 
                                         Msxml3::IXMLDOMAttribute** attributeNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("setAttributeNode"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMAttribute*)DOMAttribute /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMAttribute**)attributeNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMAttribute* __fastcall
IXMLDOMElementDispT<T>::setAttributeNode(Msxml3::IXMLDOMAttribute* DOMAttribute/*[in]*/)
{
  Msxml3::IXMLDOMAttribute* attributeNode;
  this->setAttributeNode(DOMAttribute, (Msxml3::IXMLDOMAttribute**)&attributeNode);
  return attributeNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::removeAttributeNode(Msxml3::IXMLDOMAttribute* DOMAttribute/*[in]*/, 
                                            Msxml3::IXMLDOMAttribute** attributeNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeAttributeNode"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMAttribute*)DOMAttribute /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMAttribute**)attributeNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMAttribute* __fastcall
IXMLDOMElementDispT<T>::removeAttributeNode(Msxml3::IXMLDOMAttribute* DOMAttribute/*[in]*/)
{
  Msxml3::IXMLDOMAttribute* attributeNode;
  this->removeAttributeNode(DOMAttribute, (Msxml3::IXMLDOMAttribute**)&attributeNode);
  return attributeNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::getElementsByTagName(BSTR tagName/*[in]*/, 
                                             Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getElementsByTagName"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = tagName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMElementDispT<T>::getElementsByTagName(BSTR tagName/*[in]*/)
{
  Msxml3::IXMLDOMNodeList* resultList;
  this->getElementsByTagName(tagName, (Msxml3::IXMLDOMNodeList**)&resultList);
  return resultList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::normalize()
{
  _TDispID _dispid(*this, OLETEXT("normalize"), DISPID(106));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMElementDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_nodeValue(VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMElementDispT<T>::get_nodeValue(void)
{
  VARIANT value;
  this->get_nodeValue((VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::set_nodeValue(VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::DOMNodeType __fastcall
IXMLDOMElementDispT<T>::get_nodeType(void)
{
  Msxml3::DOMNodeType type;
  this->get_nodeType((Msxml3::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMElementDispT<T>::get_parentNode(void)
{
  Msxml3::IXMLDOMNode* parent;
  this->get_parentNode((Msxml3::IXMLDOMNode**)&parent);
  return parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMElementDispT<T>::get_childNodes(void)
{
  Msxml3::IXMLDOMNodeList* childList;
  this->get_childNodes((Msxml3::IXMLDOMNodeList**)&childList);
  return childList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMElementDispT<T>::get_firstChild(void)
{
  Msxml3::IXMLDOMNode* firstChild;
  this->get_firstChild((Msxml3::IXMLDOMNode**)&firstChild);
  return firstChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMElementDispT<T>::get_lastChild(void)
{
  Msxml3::IXMLDOMNode* lastChild;
  this->get_lastChild((Msxml3::IXMLDOMNode**)&lastChild);
  return lastChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMElementDispT<T>::get_previousSibling(void)
{
  Msxml3::IXMLDOMNode* previousSibling;
  this->get_previousSibling((Msxml3::IXMLDOMNode**)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMElementDispT<T>::get_nextSibling(void)
{
  Msxml3::IXMLDOMNode* nextSibling;
  this->get_nextSibling((Msxml3::IXMLDOMNode**)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNamedNodeMap* __fastcall
IXMLDOMElementDispT<T>::get_attributes(void)
{
  Msxml3::IXMLDOMNamedNodeMap* attributeMap;
  this->get_attributes((Msxml3::IXMLDOMNamedNodeMap**)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, VARIANT refChild/*[in]*/
                                     , Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMElementDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, VARIANT refChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->insertBefore(newChild, refChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                     Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMElementDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml3::IXMLDOMNode**)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                    Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMElementDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/)
{
  Msxml3::IXMLDOMNode* oldChild;
  this->removeChild(childNode, (Msxml3::IXMLDOMNode**)&oldChild);
  return oldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                    Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMElementDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->appendChild(newChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMElementDispT<T>::hasChildNodes(void)
{
  VARIANT_BOOL hasChild;
  this->hasChildNodes((VARIANT_BOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocument* __fastcall
IXMLDOMElementDispT<T>::get_ownerDocument(void)
{
  Msxml3::IXMLDOMDocument* DOMDocument;
  this->get_ownerDocument((Msxml3::IXMLDOMDocument**)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                  Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMElementDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/)
{
  Msxml3::IXMLDOMNode* cloneRoot;
  this->cloneNode(deep, (Msxml3::IXMLDOMNode**)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMElementDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMElementDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMElementDispT<T>::get_specified(void)
{
  VARIANT_BOOL isSpecified;
  this->get_specified((VARIANT_BOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMElementDispT<T>::get_definition(void)
{
  Msxml3::IXMLDOMNode* definitionNode;
  this->get_definition((Msxml3::IXMLDOMNode**)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMElementDispT<T>::get_nodeTypedValue(void)
{
  VARIANT typedValue;
  this->get_nodeTypedValue((VARIANT*)&typedValue);
  return typedValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::set_nodeTypedValue(VARIANT typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_dataType(VARIANT* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMElementDispT<T>::get_dataType(void)
{
  VARIANT dataTypeName;
  this->get_dataType((VARIANT*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMElementDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                      BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMElementDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                    Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMElementDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNodeList* resultList;
  this->selectNodes(queryString, (Msxml3::IXMLDOMNodeList**)&resultList);
  return resultList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                         Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMElementDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNode* resultNode;
  this->selectSingleNode(queryString, (Msxml3::IXMLDOMNode**)&resultNode);
  return resultNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMElementDispT<T>::get_parsed(void)
{
  VARIANT_BOOL isParsed;
  this->get_parsed((VARIANT_BOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMElementDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMElementDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMElementDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMElementDispT<T>::transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                              VARIANT outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMAttribute
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF85-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_name(BSTR* attributeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("name"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(attributeName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMAttributeDispT<T>::get_name(void)
{
  BSTR attributeName;
  this->get_name((BSTR*)&attributeName);
  return attributeName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_value(VARIANT* attributeValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("value"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(attributeValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMAttributeDispT<T>::get_value(void)
{
  VARIANT attributeValue;
  this->get_value((VARIANT*)&attributeValue);
  return attributeValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::set_value(VARIANT attributeValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("value"), DISPID(120));
  TAutoArgs<1> _args;
  _args[1] = attributeValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMAttributeDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_nodeValue(VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMAttributeDispT<T>::get_nodeValue(void)
{
  VARIANT value;
  this->get_nodeValue((VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::set_nodeValue(VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::DOMNodeType __fastcall
IXMLDOMAttributeDispT<T>::get_nodeType(void)
{
  Msxml3::DOMNodeType type;
  this->get_nodeType((Msxml3::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMAttributeDispT<T>::get_parentNode(void)
{
  Msxml3::IXMLDOMNode* parent;
  this->get_parentNode((Msxml3::IXMLDOMNode**)&parent);
  return parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMAttributeDispT<T>::get_childNodes(void)
{
  Msxml3::IXMLDOMNodeList* childList;
  this->get_childNodes((Msxml3::IXMLDOMNodeList**)&childList);
  return childList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMAttributeDispT<T>::get_firstChild(void)
{
  Msxml3::IXMLDOMNode* firstChild;
  this->get_firstChild((Msxml3::IXMLDOMNode**)&firstChild);
  return firstChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMAttributeDispT<T>::get_lastChild(void)
{
  Msxml3::IXMLDOMNode* lastChild;
  this->get_lastChild((Msxml3::IXMLDOMNode**)&lastChild);
  return lastChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMAttributeDispT<T>::get_previousSibling(void)
{
  Msxml3::IXMLDOMNode* previousSibling;
  this->get_previousSibling((Msxml3::IXMLDOMNode**)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMAttributeDispT<T>::get_nextSibling(void)
{
  Msxml3::IXMLDOMNode* nextSibling;
  this->get_nextSibling((Msxml3::IXMLDOMNode**)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNamedNodeMap* __fastcall
IXMLDOMAttributeDispT<T>::get_attributes(void)
{
  Msxml3::IXMLDOMNamedNodeMap* attributeMap;
  this->get_attributes((Msxml3::IXMLDOMNamedNodeMap**)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                       VARIANT refChild/*[in]*/, 
                                       Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMAttributeDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                       VARIANT refChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->insertBefore(newChild, refChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                       Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                       Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMAttributeDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                       Msxml3::IXMLDOMNode* oldChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml3::IXMLDOMNode**)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                      Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMAttributeDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/)
{
  Msxml3::IXMLDOMNode* oldChild;
  this->removeChild(childNode, (Msxml3::IXMLDOMNode**)&oldChild);
  return oldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                      Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMAttributeDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->appendChild(newChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMAttributeDispT<T>::hasChildNodes(void)
{
  VARIANT_BOOL hasChild;
  this->hasChildNodes((VARIANT_BOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocument* __fastcall
IXMLDOMAttributeDispT<T>::get_ownerDocument(void)
{
  Msxml3::IXMLDOMDocument* DOMDocument;
  this->get_ownerDocument((Msxml3::IXMLDOMDocument**)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                    Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMAttributeDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/)
{
  Msxml3::IXMLDOMNode* cloneRoot;
  this->cloneNode(deep, (Msxml3::IXMLDOMNode**)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMAttributeDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMAttributeDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMAttributeDispT<T>::get_specified(void)
{
  VARIANT_BOOL isSpecified;
  this->get_specified((VARIANT_BOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMAttributeDispT<T>::get_definition(void)
{
  Msxml3::IXMLDOMNode* definitionNode;
  this->get_definition((Msxml3::IXMLDOMNode**)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMAttributeDispT<T>::get_nodeTypedValue(void)
{
  VARIANT typedValue;
  this->get_nodeTypedValue((VARIANT*)&typedValue);
  return typedValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::set_nodeTypedValue(VARIANT typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_dataType(VARIANT* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMAttributeDispT<T>::get_dataType(void)
{
  VARIANT dataTypeName;
  this->get_dataType((VARIANT*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMAttributeDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                        BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMAttributeDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                      Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMAttributeDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNodeList* resultList;
  this->selectNodes(queryString, (Msxml3::IXMLDOMNodeList**)&resultList);
  return resultList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                           Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMAttributeDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNode* resultNode;
  this->selectSingleNode(queryString, (Msxml3::IXMLDOMNode**)&resultNode);
  return resultNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMAttributeDispT<T>::get_parsed(void)
{
  VARIANT_BOOL isParsed;
  this->get_parsed((VARIANT_BOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMAttributeDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMAttributeDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMAttributeDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMAttributeDispT<T>::transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                VARIANT outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMDocumentFragment
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EFAA413-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeValue(VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeValue(void)
{
  VARIANT value;
  this->get_nodeValue((VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::set_nodeValue(VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::DOMNodeType __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeType(void)
{
  Msxml3::DOMNodeType type;
  this->get_nodeType((Msxml3::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_parentNode(void)
{
  Msxml3::IXMLDOMNode* parent;
  this->get_parentNode((Msxml3::IXMLDOMNode**)&parent);
  return parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_childNodes(void)
{
  Msxml3::IXMLDOMNodeList* childList;
  this->get_childNodes((Msxml3::IXMLDOMNodeList**)&childList);
  return childList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_firstChild(void)
{
  Msxml3::IXMLDOMNode* firstChild;
  this->get_firstChild((Msxml3::IXMLDOMNode**)&firstChild);
  return firstChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_lastChild(void)
{
  Msxml3::IXMLDOMNode* lastChild;
  this->get_lastChild((Msxml3::IXMLDOMNode**)&lastChild);
  return lastChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_previousSibling(void)
{
  Msxml3::IXMLDOMNode* previousSibling;
  this->get_previousSibling((Msxml3::IXMLDOMNode**)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nextSibling(void)
{
  Msxml3::IXMLDOMNode* nextSibling;
  this->get_nextSibling((Msxml3::IXMLDOMNode**)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNamedNodeMap* __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_attributes(void)
{
  Msxml3::IXMLDOMNamedNodeMap* attributeMap;
  this->get_attributes((Msxml3::IXMLDOMNamedNodeMap**)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                              VARIANT refChild/*[in]*/, 
                                              Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentFragmentDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                              VARIANT refChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->insertBefore(newChild, refChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                              Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                              Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentFragmentDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                              Msxml3::IXMLDOMNode* oldChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml3::IXMLDOMNode**)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                             Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentFragmentDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/)
{
  Msxml3::IXMLDOMNode* oldChild;
  this->removeChild(childNode, (Msxml3::IXMLDOMNode**)&oldChild);
  return oldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                             Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentFragmentDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->appendChild(newChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocumentFragmentDispT<T>::hasChildNodes(void)
{
  VARIANT_BOOL hasChild;
  this->hasChildNodes((VARIANT_BOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocument* __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_ownerDocument(void)
{
  Msxml3::IXMLDOMDocument* DOMDocument;
  this->get_ownerDocument((Msxml3::IXMLDOMDocument**)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                           Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentFragmentDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/)
{
  Msxml3::IXMLDOMNode* cloneRoot;
  this->cloneNode(deep, (Msxml3::IXMLDOMNode**)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_specified(void)
{
  VARIANT_BOOL isSpecified;
  this->get_specified((VARIANT_BOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_definition(void)
{
  Msxml3::IXMLDOMNode* definitionNode;
  this->get_definition((Msxml3::IXMLDOMNode**)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeTypedValue(void)
{
  VARIANT typedValue;
  this->get_nodeTypedValue((VARIANT*)&typedValue);
  return typedValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::set_nodeTypedValue(VARIANT typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_dataType(VARIANT* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_dataType(void)
{
  VARIANT dataTypeName;
  this->get_dataType((VARIANT*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                               BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentFragmentDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                             Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMDocumentFragmentDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNodeList* resultList;
  this->selectNodes(queryString, (Msxml3::IXMLDOMNodeList**)&resultList);
  return resultList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                                  Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocumentFragmentDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNode* resultNode;
  this->selectSingleNode(queryString, (Msxml3::IXMLDOMNode**)&resultNode);
  return resultNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_parsed(void)
{
  VARIANT_BOOL isParsed;
  this->get_parsed((VARIANT_BOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocumentFragmentDispT<T>::transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                       VARIANT outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMCharacterData
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF84-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_data(BSTR* data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(data /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::get_data(void)
{
  BSTR data;
  this->get_data((BSTR*)&data);
  return data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::set_data(BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_length(long* dataLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMCharacterDataDispT<T>::get_length(void)
{
  long dataLength;
  this->get_length((long*)&dataLength);
  return dataLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::substringData(long offset/*[in]*/, long count/*[in]*/, 
                                            BSTR* data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("substringData"), DISPID(111));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  return OutRetValSetterPtr(data /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::substringData(long offset/*[in]*/, long count/*[in]*/)
{
  BSTR data;
  this->substringData(offset, count, (BSTR*)&data);
  return data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::appendData(BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendData"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::insertData(long offset/*[in]*/, BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertData"), DISPID(113));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::deleteData(long offset/*[in]*/, long count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("deleteData"), DISPID(114));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::replaceData(long offset/*[in]*/, long count/*[in]*/, BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceData"), DISPID(115));
  TAutoArgs<3> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  _args[3] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeValue(VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeValue(void)
{
  VARIANT value;
  this->get_nodeValue((VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::set_nodeValue(VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::DOMNodeType __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeType(void)
{
  Msxml3::DOMNodeType type;
  this->get_nodeType((Msxml3::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCharacterDataDispT<T>::get_parentNode(void)
{
  Msxml3::IXMLDOMNode* parent;
  this->get_parentNode((Msxml3::IXMLDOMNode**)&parent);
  return parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMCharacterDataDispT<T>::get_childNodes(void)
{
  Msxml3::IXMLDOMNodeList* childList;
  this->get_childNodes((Msxml3::IXMLDOMNodeList**)&childList);
  return childList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCharacterDataDispT<T>::get_firstChild(void)
{
  Msxml3::IXMLDOMNode* firstChild;
  this->get_firstChild((Msxml3::IXMLDOMNode**)&firstChild);
  return firstChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCharacterDataDispT<T>::get_lastChild(void)
{
  Msxml3::IXMLDOMNode* lastChild;
  this->get_lastChild((Msxml3::IXMLDOMNode**)&lastChild);
  return lastChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCharacterDataDispT<T>::get_previousSibling(void)
{
  Msxml3::IXMLDOMNode* previousSibling;
  this->get_previousSibling((Msxml3::IXMLDOMNode**)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCharacterDataDispT<T>::get_nextSibling(void)
{
  Msxml3::IXMLDOMNode* nextSibling;
  this->get_nextSibling((Msxml3::IXMLDOMNode**)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNamedNodeMap* __fastcall
IXMLDOMCharacterDataDispT<T>::get_attributes(void)
{
  Msxml3::IXMLDOMNamedNodeMap* attributeMap;
  this->get_attributes((Msxml3::IXMLDOMNamedNodeMap**)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                           VARIANT refChild/*[in]*/, 
                                           Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCharacterDataDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                           VARIANT refChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->insertBefore(newChild, refChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                           Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                           Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCharacterDataDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                           Msxml3::IXMLDOMNode* oldChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml3::IXMLDOMNode**)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                          Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCharacterDataDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/)
{
  Msxml3::IXMLDOMNode* oldChild;
  this->removeChild(childNode, (Msxml3::IXMLDOMNode**)&oldChild);
  return oldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                          Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCharacterDataDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->appendChild(newChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMCharacterDataDispT<T>::hasChildNodes(void)
{
  VARIANT_BOOL hasChild;
  this->hasChildNodes((VARIANT_BOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocument* __fastcall
IXMLDOMCharacterDataDispT<T>::get_ownerDocument(void)
{
  Msxml3::IXMLDOMDocument* DOMDocument;
  this->get_ownerDocument((Msxml3::IXMLDOMDocument**)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                        Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCharacterDataDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/)
{
  Msxml3::IXMLDOMNode* cloneRoot;
  this->cloneNode(deep, (Msxml3::IXMLDOMNode**)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMCharacterDataDispT<T>::get_specified(void)
{
  VARIANT_BOOL isSpecified;
  this->get_specified((VARIANT_BOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCharacterDataDispT<T>::get_definition(void)
{
  Msxml3::IXMLDOMNode* definitionNode;
  this->get_definition((Msxml3::IXMLDOMNode**)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeTypedValue(void)
{
  VARIANT typedValue;
  this->get_nodeTypedValue((VARIANT*)&typedValue);
  return typedValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::set_nodeTypedValue(VARIANT typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_dataType(VARIANT* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMCharacterDataDispT<T>::get_dataType(void)
{
  VARIANT dataTypeName;
  this->get_dataType((VARIANT*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                            BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                          Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMCharacterDataDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNodeList* resultList;
  this->selectNodes(queryString, (Msxml3::IXMLDOMNodeList**)&resultList);
  return resultList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                               Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCharacterDataDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNode* resultNode;
  this->selectSingleNode(queryString, (Msxml3::IXMLDOMNode**)&resultNode);
  return resultNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMCharacterDataDispT<T>::get_parsed(void)
{
  VARIANT_BOOL isParsed;
  this->get_parsed((VARIANT_BOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCharacterDataDispT<T>::transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                    VARIANT outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMText
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF87-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::splitText(long offset/*[in]*/, 
                               Msxml3::IXMLDOMCharacterData** rightHandTextNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("splitText"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMCharacterData**)rightHandTextNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMCharacterData* __fastcall
IXMLDOMTextDispT<T>::splitText(long offset/*[in]*/)
{
  Msxml3::IXMLDOMCharacterData* rightHandTextNode;
  this->splitText(offset, (Msxml3::IXMLDOMCharacterData**)&rightHandTextNode);
  return rightHandTextNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_data(BSTR* data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(data /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::get_data(void)
{
  BSTR data;
  this->get_data((BSTR*)&data);
  return data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::set_data(BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_length(long* dataLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMTextDispT<T>::get_length(void)
{
  long dataLength;
  this->get_length((long*)&dataLength);
  return dataLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::substringData(long offset/*[in]*/, long count/*[in]*/, 
                                   BSTR* data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("substringData"), DISPID(111));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  return OutRetValSetterPtr(data /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::substringData(long offset/*[in]*/, long count/*[in]*/)
{
  BSTR data;
  this->substringData(offset, count, (BSTR*)&data);
  return data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::appendData(BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendData"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::insertData(long offset/*[in]*/, BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertData"), DISPID(113));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::deleteData(long offset/*[in]*/, long count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("deleteData"), DISPID(114));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::replaceData(long offset/*[in]*/, long count/*[in]*/, BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceData"), DISPID(115));
  TAutoArgs<3> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  _args[3] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_nodeValue(VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMTextDispT<T>::get_nodeValue(void)
{
  VARIANT value;
  this->get_nodeValue((VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::set_nodeValue(VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::DOMNodeType __fastcall
IXMLDOMTextDispT<T>::get_nodeType(void)
{
  Msxml3::DOMNodeType type;
  this->get_nodeType((Msxml3::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMTextDispT<T>::get_parentNode(void)
{
  Msxml3::IXMLDOMNode* parent;
  this->get_parentNode((Msxml3::IXMLDOMNode**)&parent);
  return parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMTextDispT<T>::get_childNodes(void)
{
  Msxml3::IXMLDOMNodeList* childList;
  this->get_childNodes((Msxml3::IXMLDOMNodeList**)&childList);
  return childList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMTextDispT<T>::get_firstChild(void)
{
  Msxml3::IXMLDOMNode* firstChild;
  this->get_firstChild((Msxml3::IXMLDOMNode**)&firstChild);
  return firstChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMTextDispT<T>::get_lastChild(void)
{
  Msxml3::IXMLDOMNode* lastChild;
  this->get_lastChild((Msxml3::IXMLDOMNode**)&lastChild);
  return lastChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMTextDispT<T>::get_previousSibling(void)
{
  Msxml3::IXMLDOMNode* previousSibling;
  this->get_previousSibling((Msxml3::IXMLDOMNode**)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMTextDispT<T>::get_nextSibling(void)
{
  Msxml3::IXMLDOMNode* nextSibling;
  this->get_nextSibling((Msxml3::IXMLDOMNode**)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNamedNodeMap* __fastcall
IXMLDOMTextDispT<T>::get_attributes(void)
{
  Msxml3::IXMLDOMNamedNodeMap* attributeMap;
  this->get_attributes((Msxml3::IXMLDOMNamedNodeMap**)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, VARIANT refChild/*[in]*/, 
                                  Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMTextDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, VARIANT refChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->insertBefore(newChild, refChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                  Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                  Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMTextDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                  Msxml3::IXMLDOMNode* oldChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml3::IXMLDOMNode**)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                 Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMTextDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/)
{
  Msxml3::IXMLDOMNode* oldChild;
  this->removeChild(childNode, (Msxml3::IXMLDOMNode**)&oldChild);
  return oldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                 Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMTextDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->appendChild(newChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMTextDispT<T>::hasChildNodes(void)
{
  VARIANT_BOOL hasChild;
  this->hasChildNodes((VARIANT_BOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocument* __fastcall
IXMLDOMTextDispT<T>::get_ownerDocument(void)
{
  Msxml3::IXMLDOMDocument* DOMDocument;
  this->get_ownerDocument((Msxml3::IXMLDOMDocument**)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/, 
                               Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMTextDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/)
{
  Msxml3::IXMLDOMNode* cloneRoot;
  this->cloneNode(deep, (Msxml3::IXMLDOMNode**)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMTextDispT<T>::get_specified(void)
{
  VARIANT_BOOL isSpecified;
  this->get_specified((VARIANT_BOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMTextDispT<T>::get_definition(void)
{
  Msxml3::IXMLDOMNode* definitionNode;
  this->get_definition((Msxml3::IXMLDOMNode**)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMTextDispT<T>::get_nodeTypedValue(void)
{
  VARIANT typedValue;
  this->get_nodeTypedValue((VARIANT*)&typedValue);
  return typedValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::set_nodeTypedValue(VARIANT typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_dataType(VARIANT* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMTextDispT<T>::get_dataType(void)
{
  VARIANT dataTypeName;
  this->get_dataType((VARIANT*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                   BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                 Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMTextDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNodeList* resultList;
  this->selectNodes(queryString, (Msxml3::IXMLDOMNodeList**)&resultList);
  return resultList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                      Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMTextDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNode* resultNode;
  this->selectSingleNode(queryString, (Msxml3::IXMLDOMNode**)&resultNode);
  return resultNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMTextDispT<T>::get_parsed(void)
{
  VARIANT_BOOL isParsed;
  this->get_parsed((VARIANT_BOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMTextDispT<T>::transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                           VARIANT outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMComment
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF88-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_data(BSTR* data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(data /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::get_data(void)
{
  BSTR data;
  this->get_data((BSTR*)&data);
  return data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::set_data(BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_length(long* dataLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMCommentDispT<T>::get_length(void)
{
  long dataLength;
  this->get_length((long*)&dataLength);
  return dataLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::substringData(long offset/*[in]*/, long count/*[in]*/, 
                                      BSTR* data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("substringData"), DISPID(111));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  return OutRetValSetterPtr(data /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::substringData(long offset/*[in]*/, long count/*[in]*/)
{
  BSTR data;
  this->substringData(offset, count, (BSTR*)&data);
  return data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::appendData(BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendData"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::insertData(long offset/*[in]*/, BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertData"), DISPID(113));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::deleteData(long offset/*[in]*/, long count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("deleteData"), DISPID(114));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::replaceData(long offset/*[in]*/, long count/*[in]*/, BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceData"), DISPID(115));
  TAutoArgs<3> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  _args[3] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_nodeValue(VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMCommentDispT<T>::get_nodeValue(void)
{
  VARIANT value;
  this->get_nodeValue((VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::set_nodeValue(VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::DOMNodeType __fastcall
IXMLDOMCommentDispT<T>::get_nodeType(void)
{
  Msxml3::DOMNodeType type;
  this->get_nodeType((Msxml3::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCommentDispT<T>::get_parentNode(void)
{
  Msxml3::IXMLDOMNode* parent;
  this->get_parentNode((Msxml3::IXMLDOMNode**)&parent);
  return parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMCommentDispT<T>::get_childNodes(void)
{
  Msxml3::IXMLDOMNodeList* childList;
  this->get_childNodes((Msxml3::IXMLDOMNodeList**)&childList);
  return childList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCommentDispT<T>::get_firstChild(void)
{
  Msxml3::IXMLDOMNode* firstChild;
  this->get_firstChild((Msxml3::IXMLDOMNode**)&firstChild);
  return firstChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCommentDispT<T>::get_lastChild(void)
{
  Msxml3::IXMLDOMNode* lastChild;
  this->get_lastChild((Msxml3::IXMLDOMNode**)&lastChild);
  return lastChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCommentDispT<T>::get_previousSibling(void)
{
  Msxml3::IXMLDOMNode* previousSibling;
  this->get_previousSibling((Msxml3::IXMLDOMNode**)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCommentDispT<T>::get_nextSibling(void)
{
  Msxml3::IXMLDOMNode* nextSibling;
  this->get_nextSibling((Msxml3::IXMLDOMNode**)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNamedNodeMap* __fastcall
IXMLDOMCommentDispT<T>::get_attributes(void)
{
  Msxml3::IXMLDOMNamedNodeMap* attributeMap;
  this->get_attributes((Msxml3::IXMLDOMNamedNodeMap**)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, VARIANT refChild/*[in]*/
                                     , Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCommentDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, VARIANT refChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->insertBefore(newChild, refChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                     Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCommentDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                     Msxml3::IXMLDOMNode* oldChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml3::IXMLDOMNode**)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                    Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCommentDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/)
{
  Msxml3::IXMLDOMNode* oldChild;
  this->removeChild(childNode, (Msxml3::IXMLDOMNode**)&oldChild);
  return oldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                    Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCommentDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->appendChild(newChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMCommentDispT<T>::hasChildNodes(void)
{
  VARIANT_BOOL hasChild;
  this->hasChildNodes((VARIANT_BOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocument* __fastcall
IXMLDOMCommentDispT<T>::get_ownerDocument(void)
{
  Msxml3::IXMLDOMDocument* DOMDocument;
  this->get_ownerDocument((Msxml3::IXMLDOMDocument**)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                  Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCommentDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/)
{
  Msxml3::IXMLDOMNode* cloneRoot;
  this->cloneNode(deep, (Msxml3::IXMLDOMNode**)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMCommentDispT<T>::get_specified(void)
{
  VARIANT_BOOL isSpecified;
  this->get_specified((VARIANT_BOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCommentDispT<T>::get_definition(void)
{
  Msxml3::IXMLDOMNode* definitionNode;
  this->get_definition((Msxml3::IXMLDOMNode**)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMCommentDispT<T>::get_nodeTypedValue(void)
{
  VARIANT typedValue;
  this->get_nodeTypedValue((VARIANT*)&typedValue);
  return typedValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::set_nodeTypedValue(VARIANT typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_dataType(VARIANT* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMCommentDispT<T>::get_dataType(void)
{
  VARIANT dataTypeName;
  this->get_dataType((VARIANT*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                      BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                    Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMCommentDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNodeList* resultList;
  this->selectNodes(queryString, (Msxml3::IXMLDOMNodeList**)&resultList);
  return resultList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                         Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCommentDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNode* resultNode;
  this->selectSingleNode(queryString, (Msxml3::IXMLDOMNode**)&resultNode);
  return resultNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMCommentDispT<T>::get_parsed(void)
{
  VARIANT_BOOL isParsed;
  this->get_parsed((VARIANT_BOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCommentDispT<T>::transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                              VARIANT outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMCDATASection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8A-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::splitText(long offset/*[in]*/, 
                                       Msxml3::IXMLDOMCharacterData** rightHandTextNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("splitText"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMCharacterData**)rightHandTextNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMCharacterData* __fastcall
IXMLDOMCDATASectionDispT<T>::splitText(long offset/*[in]*/)
{
  Msxml3::IXMLDOMCharacterData* rightHandTextNode;
  this->splitText(offset, (Msxml3::IXMLDOMCharacterData**)&rightHandTextNode);
  return rightHandTextNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_data(BSTR* data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(data /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::get_data(void)
{
  BSTR data;
  this->get_data((BSTR*)&data);
  return data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::set_data(BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_length(long* dataLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMCDATASectionDispT<T>::get_length(void)
{
  long dataLength;
  this->get_length((long*)&dataLength);
  return dataLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::substringData(long offset/*[in]*/, long count/*[in]*/, 
                                           BSTR* data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("substringData"), DISPID(111));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  return OutRetValSetterPtr(data /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::substringData(long offset/*[in]*/, long count/*[in]*/)
{
  BSTR data;
  this->substringData(offset, count, (BSTR*)&data);
  return data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::appendData(BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendData"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::insertData(long offset/*[in]*/, BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertData"), DISPID(113));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::deleteData(long offset/*[in]*/, long count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("deleteData"), DISPID(114));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::replaceData(long offset/*[in]*/, long count/*[in]*/, BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceData"), DISPID(115));
  TAutoArgs<3> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  _args[3] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeValue(VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeValue(void)
{
  VARIANT value;
  this->get_nodeValue((VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::set_nodeValue(VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::DOMNodeType __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeType(void)
{
  Msxml3::DOMNodeType type;
  this->get_nodeType((Msxml3::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCDATASectionDispT<T>::get_parentNode(void)
{
  Msxml3::IXMLDOMNode* parent;
  this->get_parentNode((Msxml3::IXMLDOMNode**)&parent);
  return parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMCDATASectionDispT<T>::get_childNodes(void)
{
  Msxml3::IXMLDOMNodeList* childList;
  this->get_childNodes((Msxml3::IXMLDOMNodeList**)&childList);
  return childList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCDATASectionDispT<T>::get_firstChild(void)
{
  Msxml3::IXMLDOMNode* firstChild;
  this->get_firstChild((Msxml3::IXMLDOMNode**)&firstChild);
  return firstChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCDATASectionDispT<T>::get_lastChild(void)
{
  Msxml3::IXMLDOMNode* lastChild;
  this->get_lastChild((Msxml3::IXMLDOMNode**)&lastChild);
  return lastChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCDATASectionDispT<T>::get_previousSibling(void)
{
  Msxml3::IXMLDOMNode* previousSibling;
  this->get_previousSibling((Msxml3::IXMLDOMNode**)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCDATASectionDispT<T>::get_nextSibling(void)
{
  Msxml3::IXMLDOMNode* nextSibling;
  this->get_nextSibling((Msxml3::IXMLDOMNode**)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNamedNodeMap* __fastcall
IXMLDOMCDATASectionDispT<T>::get_attributes(void)
{
  Msxml3::IXMLDOMNamedNodeMap* attributeMap;
  this->get_attributes((Msxml3::IXMLDOMNamedNodeMap**)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                          VARIANT refChild/*[in]*/, 
                                          Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCDATASectionDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                          VARIANT refChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->insertBefore(newChild, refChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                          Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                          Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCDATASectionDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                          Msxml3::IXMLDOMNode* oldChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml3::IXMLDOMNode**)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                         Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCDATASectionDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/)
{
  Msxml3::IXMLDOMNode* oldChild;
  this->removeChild(childNode, (Msxml3::IXMLDOMNode**)&oldChild);
  return oldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                         Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCDATASectionDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->appendChild(newChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMCDATASectionDispT<T>::hasChildNodes(void)
{
  VARIANT_BOOL hasChild;
  this->hasChildNodes((VARIANT_BOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocument* __fastcall
IXMLDOMCDATASectionDispT<T>::get_ownerDocument(void)
{
  Msxml3::IXMLDOMDocument* DOMDocument;
  this->get_ownerDocument((Msxml3::IXMLDOMDocument**)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                       Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCDATASectionDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/)
{
  Msxml3::IXMLDOMNode* cloneRoot;
  this->cloneNode(deep, (Msxml3::IXMLDOMNode**)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMCDATASectionDispT<T>::get_specified(void)
{
  VARIANT_BOOL isSpecified;
  this->get_specified((VARIANT_BOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCDATASectionDispT<T>::get_definition(void)
{
  Msxml3::IXMLDOMNode* definitionNode;
  this->get_definition((Msxml3::IXMLDOMNode**)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeTypedValue(void)
{
  VARIANT typedValue;
  this->get_nodeTypedValue((VARIANT*)&typedValue);
  return typedValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::set_nodeTypedValue(VARIANT typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_dataType(VARIANT* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMCDATASectionDispT<T>::get_dataType(void)
{
  VARIANT dataTypeName;
  this->get_dataType((VARIANT*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                           BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                         Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMCDATASectionDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNodeList* resultList;
  this->selectNodes(queryString, (Msxml3::IXMLDOMNodeList**)&resultList);
  return resultList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                              Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMCDATASectionDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNode* resultNode;
  this->selectSingleNode(queryString, (Msxml3::IXMLDOMNode**)&resultNode);
  return resultNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMCDATASectionDispT<T>::get_parsed(void)
{
  VARIANT_BOOL isParsed;
  this->get_parsed((VARIANT_BOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMCDATASectionDispT<T>::transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                   VARIANT outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMProcessingInstruction
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF89-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_target(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("target"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_target(void)
{
  BSTR name;
  this->get_target((BSTR*)&name);
  return name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_data(BSTR* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(128));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_data(void)
{
  BSTR value;
  this->get_data((BSTR*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::set_data(BSTR value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(128));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeValue(VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeValue(void)
{
  VARIANT value;
  this->get_nodeValue((VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::set_nodeValue(VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::DOMNodeType __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeType(void)
{
  Msxml3::DOMNodeType type;
  this->get_nodeType((Msxml3::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_parentNode(void)
{
  Msxml3::IXMLDOMNode* parent;
  this->get_parentNode((Msxml3::IXMLDOMNode**)&parent);
  return parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_childNodes(void)
{
  Msxml3::IXMLDOMNodeList* childList;
  this->get_childNodes((Msxml3::IXMLDOMNodeList**)&childList);
  return childList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_firstChild(void)
{
  Msxml3::IXMLDOMNode* firstChild;
  this->get_firstChild((Msxml3::IXMLDOMNode**)&firstChild);
  return firstChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_lastChild(void)
{
  Msxml3::IXMLDOMNode* lastChild;
  this->get_lastChild((Msxml3::IXMLDOMNode**)&lastChild);
  return lastChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_previousSibling(void)
{
  Msxml3::IXMLDOMNode* previousSibling;
  this->get_previousSibling((Msxml3::IXMLDOMNode**)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nextSibling(void)
{
  Msxml3::IXMLDOMNode* nextSibling;
  this->get_nextSibling((Msxml3::IXMLDOMNode**)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNamedNodeMap* __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_attributes(void)
{
  Msxml3::IXMLDOMNamedNodeMap* attributeMap;
  this->get_attributes((Msxml3::IXMLDOMNamedNodeMap**)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                   VARIANT refChild/*[in]*/, 
                                                   Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMProcessingInstructionDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                   VARIANT refChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->insertBefore(newChild, refChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                   Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                                   Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMProcessingInstructionDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                   Msxml3::IXMLDOMNode* oldChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml3::IXMLDOMNode**)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                                  Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMProcessingInstructionDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/)
{
  Msxml3::IXMLDOMNode* oldChild;
  this->removeChild(childNode, (Msxml3::IXMLDOMNode**)&oldChild);
  return oldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                                  Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMProcessingInstructionDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->appendChild(newChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMProcessingInstructionDispT<T>::hasChildNodes(void)
{
  VARIANT_BOOL hasChild;
  this->hasChildNodes((VARIANT_BOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocument* __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_ownerDocument(void)
{
  Msxml3::IXMLDOMDocument* DOMDocument;
  this->get_ownerDocument((Msxml3::IXMLDOMDocument**)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                                Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMProcessingInstructionDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/)
{
  Msxml3::IXMLDOMNode* cloneRoot;
  this->cloneNode(deep, (Msxml3::IXMLDOMNode**)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_specified(void)
{
  VARIANT_BOOL isSpecified;
  this->get_specified((VARIANT_BOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_definition(void)
{
  Msxml3::IXMLDOMNode* definitionNode;
  this->get_definition((Msxml3::IXMLDOMNode**)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeTypedValue(void)
{
  VARIANT typedValue;
  this->get_nodeTypedValue((VARIANT*)&typedValue);
  return typedValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::set_nodeTypedValue(VARIANT typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_dataType(VARIANT* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_dataType(void)
{
  VARIANT dataTypeName;
  this->get_dataType((VARIANT*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                    BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                                  Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMProcessingInstructionDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNodeList* resultList;
  this->selectNodes(queryString, (Msxml3::IXMLDOMNodeList**)&resultList);
  return resultList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                                       Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMProcessingInstructionDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNode* resultNode;
  this->selectSingleNode(queryString, (Msxml3::IXMLDOMNode**)&resultNode);
  return resultNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_parsed(void)
{
  VARIANT_BOOL isParsed;
  this->get_parsed((VARIANT_BOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMProcessingInstructionDispT<T>::transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/
                                                            , VARIANT outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMEntityReference
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8E-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeValue(VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeValue(void)
{
  VARIANT value;
  this->get_nodeValue((VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::set_nodeValue(VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::DOMNodeType __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeType(void)
{
  Msxml3::DOMNodeType type;
  this->get_nodeType((Msxml3::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityReferenceDispT<T>::get_parentNode(void)
{
  Msxml3::IXMLDOMNode* parent;
  this->get_parentNode((Msxml3::IXMLDOMNode**)&parent);
  return parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMEntityReferenceDispT<T>::get_childNodes(void)
{
  Msxml3::IXMLDOMNodeList* childList;
  this->get_childNodes((Msxml3::IXMLDOMNodeList**)&childList);
  return childList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityReferenceDispT<T>::get_firstChild(void)
{
  Msxml3::IXMLDOMNode* firstChild;
  this->get_firstChild((Msxml3::IXMLDOMNode**)&firstChild);
  return firstChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityReferenceDispT<T>::get_lastChild(void)
{
  Msxml3::IXMLDOMNode* lastChild;
  this->get_lastChild((Msxml3::IXMLDOMNode**)&lastChild);
  return lastChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityReferenceDispT<T>::get_previousSibling(void)
{
  Msxml3::IXMLDOMNode* previousSibling;
  this->get_previousSibling((Msxml3::IXMLDOMNode**)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nextSibling(void)
{
  Msxml3::IXMLDOMNode* nextSibling;
  this->get_nextSibling((Msxml3::IXMLDOMNode**)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNamedNodeMap* __fastcall
IXMLDOMEntityReferenceDispT<T>::get_attributes(void)
{
  Msxml3::IXMLDOMNamedNodeMap* attributeMap;
  this->get_attributes((Msxml3::IXMLDOMNamedNodeMap**)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                             VARIANT refChild/*[in]*/, 
                                             Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityReferenceDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                             VARIANT refChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->insertBefore(newChild, refChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                             Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                             Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityReferenceDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                             Msxml3::IXMLDOMNode* oldChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml3::IXMLDOMNode**)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                            Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityReferenceDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/)
{
  Msxml3::IXMLDOMNode* oldChild;
  this->removeChild(childNode, (Msxml3::IXMLDOMNode**)&oldChild);
  return oldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                            Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityReferenceDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->appendChild(newChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMEntityReferenceDispT<T>::hasChildNodes(void)
{
  VARIANT_BOOL hasChild;
  this->hasChildNodes((VARIANT_BOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocument* __fastcall
IXMLDOMEntityReferenceDispT<T>::get_ownerDocument(void)
{
  Msxml3::IXMLDOMDocument* DOMDocument;
  this->get_ownerDocument((Msxml3::IXMLDOMDocument**)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                          Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityReferenceDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/)
{
  Msxml3::IXMLDOMNode* cloneRoot;
  this->cloneNode(deep, (Msxml3::IXMLDOMNode**)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityReferenceDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMEntityReferenceDispT<T>::get_specified(void)
{
  VARIANT_BOOL isSpecified;
  this->get_specified((VARIANT_BOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityReferenceDispT<T>::get_definition(void)
{
  Msxml3::IXMLDOMNode* definitionNode;
  this->get_definition((Msxml3::IXMLDOMNode**)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeTypedValue(void)
{
  VARIANT typedValue;
  this->get_nodeTypedValue((VARIANT*)&typedValue);
  return typedValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::set_nodeTypedValue(VARIANT typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_dataType(VARIANT* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_dataType(void)
{
  VARIANT dataTypeName;
  this->get_dataType((VARIANT*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityReferenceDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                              BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityReferenceDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                            Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMEntityReferenceDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNodeList* resultList;
  this->selectNodes(queryString, (Msxml3::IXMLDOMNodeList**)&resultList);
  return resultList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                                 Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityReferenceDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNode* resultNode;
  this->selectSingleNode(queryString, (Msxml3::IXMLDOMNode**)&resultNode);
  return resultNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMEntityReferenceDispT<T>::get_parsed(void)
{
  VARIANT_BOOL isParsed;
  this->get_parsed((VARIANT_BOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityReferenceDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityReferenceDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityReferenceDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityReferenceDispT<T>::transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                      VARIANT outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMParseError
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EFAA426-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMParseErrorDispT<T>::get_errorCode(long* errorCode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("errorCode"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(errorCode /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMParseErrorDispT<T>::get_errorCode(void)
{
  long errorCode;
  this->get_errorCode((long*)&errorCode);
  return errorCode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMParseErrorDispT<T>::get_url(BSTR* urlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("url"), DISPID(179));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(urlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMParseErrorDispT<T>::get_url(void)
{
  BSTR urlString;
  this->get_url((BSTR*)&urlString);
  return urlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMParseErrorDispT<T>::get_reason(BSTR* reasonString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("reason"), DISPID(180));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(reasonString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMParseErrorDispT<T>::get_reason(void)
{
  BSTR reasonString;
  this->get_reason((BSTR*)&reasonString);
  return reasonString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMParseErrorDispT<T>::get_srcText(BSTR* sourceString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("srcText"), DISPID(181));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(sourceString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMParseErrorDispT<T>::get_srcText(void)
{
  BSTR sourceString;
  this->get_srcText((BSTR*)&sourceString);
  return sourceString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMParseErrorDispT<T>::get_line(long* lineNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("line"), DISPID(182));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lineNumber /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMParseErrorDispT<T>::get_line(void)
{
  long lineNumber;
  this->get_line((long*)&lineNumber);
  return lineNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMParseErrorDispT<T>::get_linepos(long* linePosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("linepos"), DISPID(183));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(linePosition /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMParseErrorDispT<T>::get_linepos(void)
{
  long linePosition;
  this->get_linepos((long*)&linePosition);
  return linePosition;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMParseErrorDispT<T>::get_filepos(long* filePosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("filepos"), DISPID(184));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(filePosition /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMParseErrorDispT<T>::get_filepos(void)
{
  long filePosition;
  this->get_filepos((long*)&filePosition);
  return filePosition;
}

// *********************************************************************//
// SmartIntf: TCOMIXMLDOMSchemaCollection
// Interface: IXMLDOMSchemaCollection
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIXMLDOMSchemaCollectionT<T>::add(BSTR namespaceURI/*[in]*/, VARIANT var/*[in]*/)
{
  return (*this)->add(namespaceURI, var);
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMSchemaCollectionT<T>::get(BSTR namespaceURI/*[in]*/, 
                                     Msxml3::IXMLDOMNode** schemaNode/*[out,retval]*/)
{
  return (*this)->get(namespaceURI, schemaNode);
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
TCOMIXMLDOMSchemaCollectionT<T>::get(BSTR namespaceURI/*[in]*/)
{
  Msxml3::IXMLDOMNode* schemaNode;
  OLECHECK(this->get(, (Msxml3::IXMLDOMNode**)&schemaNode));
  return schemaNode;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMSchemaCollectionT<T>::remove(BSTR namespaceURI/*[in]*/)
{
  return (*this)->remove(namespaceURI);
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMSchemaCollectionT<T>::get_length(long* length/*[out,retval]*/)
{
  return (*this)->get_length(length);
}

template <class T> long __fastcall
TCOMIXMLDOMSchemaCollectionT<T>::get_length(void)
{
  long length;
  OLECHECK(this->get_length((long*)&length));
  return length;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMSchemaCollectionT<T>::get_namespaceURI(long index/*[in]*/, BSTR* length/*[out,retval]*/)
{
  return (*this)->get_namespaceURI(index, length);
}

template <class T> BSTR __fastcall
TCOMIXMLDOMSchemaCollectionT<T>::get_namespaceURI(long index/*[in]*/)
{
  BSTR length = 0;
  OLECHECK(this->get_namespaceURI(, (BSTR*)&length));
  return length;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMSchemaCollectionT<T>::addCollection(Msxml3::IXMLDOMSchemaCollection* otherCollection/*[in]*/)
{
  return (*this)->addCollection(otherCollection);
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMSchemaCollectionT<T>::get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  return (*this)->get__newEnum(ppUnk);
}

template <class T> LPUNKNOWN __fastcall
TCOMIXMLDOMSchemaCollectionT<T>::get__newEnum(void)
{
  LPUNKNOWN ppUnk;
  OLECHECK(this->get__newEnum((LPUNKNOWN*)&ppUnk));
  return ppUnk;
}

// *********************************************************************//
// DispIntf:  IXMLDOMSchemaCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {373984C8-B845-449B-91E7-45AC83036ADE}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSchemaCollectionDispT<T>::add(BSTR namespaceURI/*[in]*/, VARIANT var/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("add"), DISPID(3));
  TAutoArgs<2> _args;
  _args[1] = namespaceURI /*[VT_BSTR:0]*/;
  _args[2] = var /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSchemaCollectionDispT<T>::get(BSTR namespaceURI/*[in]*/, 
                                     Msxml3::IXMLDOMNode** schemaNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("get"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = namespaceURI /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)schemaNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMSchemaCollectionDispT<T>::get(BSTR namespaceURI/*[in]*/)
{
  Msxml3::IXMLDOMNode* schemaNode;
  this->get(namespaceURI, (Msxml3::IXMLDOMNode**)&schemaNode);
  return schemaNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSchemaCollectionDispT<T>::remove(BSTR namespaceURI/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = namespaceURI /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSchemaCollectionDispT<T>::get_length(long* length/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(length /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMSchemaCollectionDispT<T>::get_length(void)
{
  long length;
  this->get_length((long*)&length);
  return length;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSchemaCollectionDispT<T>::get_namespaceURI(long index/*[in]*/, BSTR* length/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(length /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMSchemaCollectionDispT<T>::get_namespaceURI(long index/*[in]*/)
{
  BSTR length;
  this->get_namespaceURI(index, (BSTR*)&length);
  return length;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSchemaCollectionDispT<T>::addCollection(Msxml3::IXMLDOMSchemaCollection* otherCollection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("addCollection"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMSchemaCollection*)otherCollection /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSchemaCollectionDispT<T>::get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_newEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IXMLDOMSchemaCollectionDispT<T>::get__newEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__newEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

// *********************************************************************//
// SmartIntf: TCOMIXMLDOMDocument2
// Interface: IXMLDOMDocument2
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIXMLDOMDocument2T<T>::get_namespaces(Msxml3::IXMLDOMSchemaCollection** namespaceCollection/*[out,retval]*/)
{
  return (*this)->get_namespaces(namespaceCollection);
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocument2T<T>::get_namespaces(Msxml3::IXMLDOMSchemaCollectionPtr* namespaceCollection/*[out,retval]*/)
{
  return (*this)->get_namespaces(IXMLDOMSchemaCollection**)namespaceCollection);
}

template <class T> Msxml3::IXMLDOMSchemaCollectionPtr __fastcall
TCOMIXMLDOMDocument2T<T>::get_namespaces(void)
{
  Msxml3::IXMLDOMSchemaCollection* namespaceCollection;
  OLECHECK(this->get_namespaces((Msxml3::IXMLDOMSchemaCollection**)&namespaceCollection));
  return (Msxml3::IXMLDOMSchemaCollectionPtr)namespaceCollection;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocument2T<T>::get_schemas(VARIANT* otherCollection/*[out,retval]*/)
{
  return (*this)->get_schemas(otherCollection);
}

template <class T> VARIANT __fastcall
TCOMIXMLDOMDocument2T<T>::get_schemas(void)
{
  VARIANT otherCollection;
  OLECHECK(this->get_schemas((VARIANT*)&otherCollection));
  return otherCollection;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocument2T<T>::_set_schemas(VARIANT otherCollection/*[in]*/)
{
  return (*this)->_set_schemas(otherCollection);
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocument2T<T>::validate(Msxml3::IXMLDOMParseError** errorObj/*[out,retval]*/)
{
  return (*this)->validate(errorObj);
}

template <class T> Msxml3::IXMLDOMParseError* __fastcall
TCOMIXMLDOMDocument2T<T>::validate(void)
{
  Msxml3::IXMLDOMParseError* errorObj;
  OLECHECK(this->validate((Msxml3::IXMLDOMParseError**)&errorObj));
  return errorObj;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocument2T<T>::setProperty(BSTR name/*[in]*/, VARIANT value/*[in]*/)
{
  return (*this)->setProperty(name, value);
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocument2T<T>::getProperty(BSTR name/*[in]*/, VARIANT* value/*[out,retval]*/)
{
  return (*this)->getProperty(name, value);
}

template <class T> VARIANT __fastcall
TCOMIXMLDOMDocument2T<T>::getProperty(BSTR name/*[in]*/)
{
  VARIANT value;
  OLECHECK(this->getProperty(, (VARIANT*)&value));
  return value;
}

// *********************************************************************//
// DispIntf:  IXMLDOMDocument2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF95-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_namespaces(Msxml3::IXMLDOMSchemaCollection** namespaceCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaces"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMSchemaCollection**)namespaceCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMSchemaCollection* __fastcall
IXMLDOMDocument2DispT<T>::get_namespaces(void)
{
  Msxml3::IXMLDOMSchemaCollection* namespaceCollection;
  this->get_namespaces((Msxml3::IXMLDOMSchemaCollection**)&namespaceCollection);
  return namespaceCollection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_schemas(VARIANT* otherCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("schemas"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(otherCollection /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMDocument2DispT<T>::get_schemas(void)
{
  VARIANT otherCollection;
  this->get_schemas((VARIANT*)&otherCollection);
  return otherCollection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::_set_schemas(VARIANT otherCollection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("schemas"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = otherCollection /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::validate(Msxml3::IXMLDOMParseError** errorObj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("validate"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMParseError**)errorObj /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMParseError* __fastcall
IXMLDOMDocument2DispT<T>::validate(void)
{
  Msxml3::IXMLDOMParseError* errorObj;
  this->validate((Msxml3::IXMLDOMParseError**)&errorObj);
  return errorObj;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::setProperty(BSTR name/*[in]*/, VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setProperty"), DISPID(204));
  TAutoArgs<2> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  _args[2] = value /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::getProperty(BSTR name/*[in]*/, VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getProperty"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMDocument2DispT<T>::getProperty(BSTR name/*[in]*/)
{
  VARIANT value;
  this->getProperty(name, (VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_doctype(Msxml3::IXMLDOMDocumentType** documentType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("doctype"), DISPID(38));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocumentType**)documentType /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocumentType* __fastcall
IXMLDOMDocument2DispT<T>::get_doctype(void)
{
  Msxml3::IXMLDOMDocumentType* documentType;
  this->get_doctype((Msxml3::IXMLDOMDocumentType**)&documentType);
  return documentType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_implementation(Msxml3::IXMLDOMImplementation** impl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("implementation"), DISPID(39));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMImplementation**)impl /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMImplementation* __fastcall
IXMLDOMDocument2DispT<T>::get_implementation(void)
{
  Msxml3::IXMLDOMImplementation* impl;
  this->get_implementation((Msxml3::IXMLDOMImplementation**)&impl);
  return impl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_documentElement(Msxml3::IXMLDOMElement** DOMElement/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("documentElement"), DISPID(40));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMElement**)DOMElement /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMElement* __fastcall
IXMLDOMDocument2DispT<T>::get_documentElement(void)
{
  Msxml3::IXMLDOMElement* DOMElement;
  this->get_documentElement((Msxml3::IXMLDOMElement**)&DOMElement);
  return DOMElement;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::_set_documentElement(Msxml3::IXMLDOMElement* DOMElement/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("documentElement"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMElement*)DOMElement /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::createElement(BSTR tagName/*[in]*/, 
                                        Msxml3::IXMLDOMElement** element/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createElement"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = tagName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMElement**)element /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMElement* __fastcall
IXMLDOMDocument2DispT<T>::createElement(BSTR tagName/*[in]*/)
{
  Msxml3::IXMLDOMElement* element;
  this->createElement(tagName, (Msxml3::IXMLDOMElement**)&element);
  return element;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::createDocumentFragment(Msxml3::IXMLDOMDocumentFragment** docFrag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createDocumentFragment"), DISPID(42));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocumentFragment**)docFrag /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocumentFragment* __fastcall
IXMLDOMDocument2DispT<T>::createDocumentFragment(void)
{
  Msxml3::IXMLDOMDocumentFragment* docFrag;
  this->createDocumentFragment((Msxml3::IXMLDOMDocumentFragment**)&docFrag);
  return docFrag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::createTextNode(BSTR data/*[in]*/, 
                                         Msxml3::IXMLDOMCharacterData** text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createTextNode"), DISPID(43));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMCharacterData**)text /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMCharacterData* __fastcall
IXMLDOMDocument2DispT<T>::createTextNode(BSTR data/*[in]*/)
{
  Msxml3::IXMLDOMCharacterData* text;
  this->createTextNode(data, (Msxml3::IXMLDOMCharacterData**)&text);
  return text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::createComment(BSTR data/*[in]*/, 
                                        Msxml3::IXMLDOMComment** comment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createComment"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMComment**)comment /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMComment* __fastcall
IXMLDOMDocument2DispT<T>::createComment(BSTR data/*[in]*/)
{
  Msxml3::IXMLDOMComment* comment;
  this->createComment(data, (Msxml3::IXMLDOMComment**)&comment);
  return comment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::createCDATASection(BSTR data/*[in]*/, 
                                             Msxml3::IXMLDOMCDATASection** cdata/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createCDATASection"), DISPID(45));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMCDATASection**)cdata /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMCDATASection* __fastcall
IXMLDOMDocument2DispT<T>::createCDATASection(BSTR data/*[in]*/)
{
  Msxml3::IXMLDOMCDATASection* cdata;
  this->createCDATASection(data, (Msxml3::IXMLDOMCDATASection**)&cdata);
  return cdata;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::createProcessingInstruction(BSTR target/*[in]*/, BSTR data/*[in]*/, 
                                                      Msxml3::IXMLDOMProcessingInstruction** pi/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createProcessingInstruction"), DISPID(46));
  TAutoArgs<2> _args;
  _args[1] = target /*[VT_BSTR:0]*/;
  _args[2] = data /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMProcessingInstruction**)pi /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMProcessingInstruction* __fastcall
IXMLDOMDocument2DispT<T>::createProcessingInstruction(BSTR target/*[in]*/, BSTR data/*[in]*/)
{
  Msxml3::IXMLDOMProcessingInstruction* pi;
  this->createProcessingInstruction(target, data, (Msxml3::IXMLDOMProcessingInstruction**)&pi);
  return pi;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::createAttribute(BSTR name/*[in]*/, 
                                          Msxml3::IXMLDOMAttribute** attribute/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createAttribute"), DISPID(47));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMAttribute**)attribute /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMAttribute* __fastcall
IXMLDOMDocument2DispT<T>::createAttribute(BSTR name/*[in]*/)
{
  Msxml3::IXMLDOMAttribute* attribute;
  this->createAttribute(name, (Msxml3::IXMLDOMAttribute**)&attribute);
  return attribute;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::createEntityReference(BSTR name/*[in]*/, 
                                                Msxml3::IXMLDOMEntityReference** entityRef/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createEntityReference"), DISPID(49));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMEntityReference**)entityRef /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMEntityReference* __fastcall
IXMLDOMDocument2DispT<T>::createEntityReference(BSTR name/*[in]*/)
{
  Msxml3::IXMLDOMEntityReference* entityRef;
  this->createEntityReference(name, (Msxml3::IXMLDOMEntityReference**)&entityRef);
  return entityRef;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::getElementsByTagName(BSTR tagName/*[in]*/, 
                                               Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getElementsByTagName"), DISPID(50));
  TAutoArgs<1> _args;
  _args[1] = tagName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMDocument2DispT<T>::getElementsByTagName(BSTR tagName/*[in]*/)
{
  Msxml3::IXMLDOMNodeList* resultList;
  this->getElementsByTagName(tagName, (Msxml3::IXMLDOMNodeList**)&resultList);
  return resultList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::createNode(VARIANT type/*[in]*/, BSTR name/*[in]*/, 
                                     BSTR namespaceURI/*[in]*/, 
                                     Msxml3::IXMLDOMNode** node/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createNode"), DISPID(54));
  TAutoArgs<3> _args;
  _args[1] = type /*[VT_VARIANT:0]*/;
  _args[2] = name /*[VT_BSTR:0]*/;
  _args[3] = namespaceURI /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)node /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocument2DispT<T>::createNode(VARIANT type/*[in]*/, BSTR name/*[in]*/, 
                                     BSTR namespaceURI/*[in]*/)
{
  Msxml3::IXMLDOMNode* node;
  this->createNode(type, name, namespaceURI, (Msxml3::IXMLDOMNode**)&node);
  return node;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::nodeFromID(BSTR idString/*[in]*/, 
                                     Msxml3::IXMLDOMNode** node/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeFromID"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = idString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)node /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocument2DispT<T>::nodeFromID(BSTR idString/*[in]*/)
{
  Msxml3::IXMLDOMNode* node;
  this->nodeFromID(idString, (Msxml3::IXMLDOMNode**)&node);
  return node;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::load(VARIANT xmlSource/*[in]*/, VARIANT_BOOL* isSuccessful/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("load"), DISPID(58));
  TAutoArgs<1> _args;
  _args[1] = xmlSource /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(isSuccessful /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocument2DispT<T>::load(VARIANT xmlSource/*[in]*/)
{
  VARIANT_BOOL isSuccessful;
  this->load(xmlSource, (VARIANT_BOOL*)&isSuccessful);
  return isSuccessful;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_readyState(long* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("readyState"), DISPID(-525));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMDocument2DispT<T>::get_readyState(void)
{
  long value;
  this->get_readyState((long*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_parseError(Msxml3::IXMLDOMParseError** errorObj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parseError"), DISPID(59));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMParseError**)errorObj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMParseError* __fastcall
IXMLDOMDocument2DispT<T>::get_parseError(void)
{
  Msxml3::IXMLDOMParseError* errorObj;
  this->get_parseError((Msxml3::IXMLDOMParseError**)&errorObj);
  return errorObj;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_url(BSTR* urlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("url"), DISPID(60));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(urlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocument2DispT<T>::get_url(void)
{
  BSTR urlString;
  this->get_url((BSTR*)&urlString);
  return urlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_async(VARIANT_BOOL* isAsync/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("async"), DISPID(61));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isAsync /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocument2DispT<T>::get_async(void)
{
  VARIANT_BOOL isAsync;
  this->get_async((VARIANT_BOOL*)&isAsync);
  return isAsync;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::set_async(VARIANT_BOOL isAsync/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("async"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = isAsync /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::abort()
{
  _TDispID _dispid(*this, OLETEXT("abort"), DISPID(62));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::loadXML(BSTR bstrXML/*[in]*/, VARIANT_BOOL* isSuccessful/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("loadXML"), DISPID(63));
  TAutoArgs<1> _args;
  _args[1] = bstrXML /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(isSuccessful /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocument2DispT<T>::loadXML(BSTR bstrXML/*[in]*/)
{
  VARIANT_BOOL isSuccessful;
  this->loadXML(bstrXML, (VARIANT_BOOL*)&isSuccessful);
  return isSuccessful;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::save(VARIANT destination/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("save"), DISPID(64));
  TAutoArgs<1> _args;
  _args[1] = destination /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_validateOnParse(VARIANT_BOOL* isValidating/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("validateOnParse"), DISPID(65));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isValidating /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocument2DispT<T>::get_validateOnParse(void)
{
  VARIANT_BOOL isValidating;
  this->get_validateOnParse((VARIANT_BOOL*)&isValidating);
  return isValidating;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::set_validateOnParse(VARIANT_BOOL isValidating/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("validateOnParse"), DISPID(65));
  TAutoArgs<1> _args;
  _args[1] = isValidating /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_resolveExternals(VARIANT_BOOL* isResolving/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("resolveExternals"), DISPID(66));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isResolving /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocument2DispT<T>::get_resolveExternals(void)
{
  VARIANT_BOOL isResolving;
  this->get_resolveExternals((VARIANT_BOOL*)&isResolving);
  return isResolving;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::set_resolveExternals(VARIANT_BOOL isResolving/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("resolveExternals"), DISPID(66));
  TAutoArgs<1> _args;
  _args[1] = isResolving /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_preserveWhiteSpace(VARIANT_BOOL* isPreserving/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("preserveWhiteSpace"), DISPID(67));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isPreserving /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocument2DispT<T>::get_preserveWhiteSpace(void)
{
  VARIANT_BOOL isPreserving;
  this->get_preserveWhiteSpace((VARIANT_BOOL*)&isPreserving);
  return isPreserving;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::set_preserveWhiteSpace(VARIANT_BOOL isPreserving/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("preserveWhiteSpace"), DISPID(67));
  TAutoArgs<1> _args;
  _args[1] = isPreserving /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::set_onreadystatechange(VARIANT Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("onreadystatechange"), DISPID(68));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::set_ondataavailable(VARIANT Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ondataavailable"), DISPID(69));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::set_ontransformnode(VARIANT Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ontransformnode"), DISPID(70));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocument2DispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_nodeValue(VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMDocument2DispT<T>::get_nodeValue(void)
{
  VARIANT value;
  this->get_nodeValue((VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::set_nodeValue(VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::DOMNodeType __fastcall
IXMLDOMDocument2DispT<T>::get_nodeType(void)
{
  Msxml3::DOMNodeType type;
  this->get_nodeType((Msxml3::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocument2DispT<T>::get_parentNode(void)
{
  Msxml3::IXMLDOMNode* parent;
  this->get_parentNode((Msxml3::IXMLDOMNode**)&parent);
  return parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMDocument2DispT<T>::get_childNodes(void)
{
  Msxml3::IXMLDOMNodeList* childList;
  this->get_childNodes((Msxml3::IXMLDOMNodeList**)&childList);
  return childList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocument2DispT<T>::get_firstChild(void)
{
  Msxml3::IXMLDOMNode* firstChild;
  this->get_firstChild((Msxml3::IXMLDOMNode**)&firstChild);
  return firstChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocument2DispT<T>::get_lastChild(void)
{
  Msxml3::IXMLDOMNode* lastChild;
  this->get_lastChild((Msxml3::IXMLDOMNode**)&lastChild);
  return lastChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocument2DispT<T>::get_previousSibling(void)
{
  Msxml3::IXMLDOMNode* previousSibling;
  this->get_previousSibling((Msxml3::IXMLDOMNode**)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocument2DispT<T>::get_nextSibling(void)
{
  Msxml3::IXMLDOMNode* nextSibling;
  this->get_nextSibling((Msxml3::IXMLDOMNode**)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNamedNodeMap* __fastcall
IXMLDOMDocument2DispT<T>::get_attributes(void)
{
  Msxml3::IXMLDOMNamedNodeMap* attributeMap;
  this->get_attributes((Msxml3::IXMLDOMNamedNodeMap**)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                       VARIANT refChild/*[in]*/, 
                                       Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocument2DispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                       VARIANT refChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->insertBefore(newChild, refChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                       Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                       Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocument2DispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                       Msxml3::IXMLDOMNode* oldChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml3::IXMLDOMNode**)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                      Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocument2DispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/)
{
  Msxml3::IXMLDOMNode* oldChild;
  this->removeChild(childNode, (Msxml3::IXMLDOMNode**)&oldChild);
  return oldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                      Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocument2DispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->appendChild(newChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocument2DispT<T>::hasChildNodes(void)
{
  VARIANT_BOOL hasChild;
  this->hasChildNodes((VARIANT_BOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocument* __fastcall
IXMLDOMDocument2DispT<T>::get_ownerDocument(void)
{
  Msxml3::IXMLDOMDocument* DOMDocument;
  this->get_ownerDocument((Msxml3::IXMLDOMDocument**)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                    Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocument2DispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/)
{
  Msxml3::IXMLDOMNode* cloneRoot;
  this->cloneNode(deep, (Msxml3::IXMLDOMNode**)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocument2DispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocument2DispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocument2DispT<T>::get_specified(void)
{
  VARIANT_BOOL isSpecified;
  this->get_specified((VARIANT_BOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocument2DispT<T>::get_definition(void)
{
  Msxml3::IXMLDOMNode* definitionNode;
  this->get_definition((Msxml3::IXMLDOMNode**)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMDocument2DispT<T>::get_nodeTypedValue(void)
{
  VARIANT typedValue;
  this->get_nodeTypedValue((VARIANT*)&typedValue);
  return typedValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::set_nodeTypedValue(VARIANT typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_dataType(VARIANT* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMDocument2DispT<T>::get_dataType(void)
{
  VARIANT dataTypeName;
  this->get_dataType((VARIANT*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocument2DispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                        BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocument2DispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                      Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMDocument2DispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNodeList* resultList;
  this->selectNodes(queryString, (Msxml3::IXMLDOMNodeList**)&resultList);
  return resultList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                           Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMDocument2DispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNode* resultNode;
  this->selectSingleNode(queryString, (Msxml3::IXMLDOMNode**)&resultNode);
  return resultNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMDocument2DispT<T>::get_parsed(void)
{
  VARIANT_BOOL isParsed;
  this->get_parsed((VARIANT_BOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocument2DispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocument2DispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocument2DispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMDocument2DispT<T>::transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                                VARIANT outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMNotation
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8C-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_publicId(VARIANT* publicId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("publicId"), DISPID(136));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(publicId /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMNotationDispT<T>::get_publicId(void)
{
  VARIANT publicId;
  this->get_publicId((VARIANT*)&publicId);
  return publicId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_systemId(VARIANT* systemId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("systemId"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(systemId /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMNotationDispT<T>::get_systemId(void)
{
  VARIANT systemId;
  this->get_systemId((VARIANT*)&systemId);
  return systemId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNotationDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_nodeValue(VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMNotationDispT<T>::get_nodeValue(void)
{
  VARIANT value;
  this->get_nodeValue((VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::set_nodeValue(VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::DOMNodeType __fastcall
IXMLDOMNotationDispT<T>::get_nodeType(void)
{
  Msxml3::DOMNodeType type;
  this->get_nodeType((Msxml3::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNotationDispT<T>::get_parentNode(void)
{
  Msxml3::IXMLDOMNode* parent;
  this->get_parentNode((Msxml3::IXMLDOMNode**)&parent);
  return parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMNotationDispT<T>::get_childNodes(void)
{
  Msxml3::IXMLDOMNodeList* childList;
  this->get_childNodes((Msxml3::IXMLDOMNodeList**)&childList);
  return childList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNotationDispT<T>::get_firstChild(void)
{
  Msxml3::IXMLDOMNode* firstChild;
  this->get_firstChild((Msxml3::IXMLDOMNode**)&firstChild);
  return firstChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNotationDispT<T>::get_lastChild(void)
{
  Msxml3::IXMLDOMNode* lastChild;
  this->get_lastChild((Msxml3::IXMLDOMNode**)&lastChild);
  return lastChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNotationDispT<T>::get_previousSibling(void)
{
  Msxml3::IXMLDOMNode* previousSibling;
  this->get_previousSibling((Msxml3::IXMLDOMNode**)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNotationDispT<T>::get_nextSibling(void)
{
  Msxml3::IXMLDOMNode* nextSibling;
  this->get_nextSibling((Msxml3::IXMLDOMNode**)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNamedNodeMap* __fastcall
IXMLDOMNotationDispT<T>::get_attributes(void)
{
  Msxml3::IXMLDOMNamedNodeMap* attributeMap;
  this->get_attributes((Msxml3::IXMLDOMNamedNodeMap**)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                      VARIANT refChild/*[in]*/, 
                                      Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNotationDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                      VARIANT refChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->insertBefore(newChild, refChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                      Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                      Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNotationDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                      Msxml3::IXMLDOMNode* oldChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml3::IXMLDOMNode**)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                     Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNotationDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/)
{
  Msxml3::IXMLDOMNode* oldChild;
  this->removeChild(childNode, (Msxml3::IXMLDOMNode**)&oldChild);
  return oldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                     Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNotationDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->appendChild(newChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMNotationDispT<T>::hasChildNodes(void)
{
  VARIANT_BOOL hasChild;
  this->hasChildNodes((VARIANT_BOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocument* __fastcall
IXMLDOMNotationDispT<T>::get_ownerDocument(void)
{
  Msxml3::IXMLDOMDocument* DOMDocument;
  this->get_ownerDocument((Msxml3::IXMLDOMDocument**)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                   Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNotationDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/)
{
  Msxml3::IXMLDOMNode* cloneRoot;
  this->cloneNode(deep, (Msxml3::IXMLDOMNode**)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNotationDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNotationDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMNotationDispT<T>::get_specified(void)
{
  VARIANT_BOOL isSpecified;
  this->get_specified((VARIANT_BOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNotationDispT<T>::get_definition(void)
{
  Msxml3::IXMLDOMNode* definitionNode;
  this->get_definition((Msxml3::IXMLDOMNode**)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMNotationDispT<T>::get_nodeTypedValue(void)
{
  VARIANT typedValue;
  this->get_nodeTypedValue((VARIANT*)&typedValue);
  return typedValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::set_nodeTypedValue(VARIANT typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_dataType(VARIANT* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMNotationDispT<T>::get_dataType(void)
{
  VARIANT dataTypeName;
  this->get_dataType((VARIANT*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNotationDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                       BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNotationDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                     Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMNotationDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNodeList* resultList;
  this->selectNodes(queryString, (Msxml3::IXMLDOMNodeList**)&resultList);
  return resultList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                          Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMNotationDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNode* resultNode;
  this->selectSingleNode(queryString, (Msxml3::IXMLDOMNode**)&resultNode);
  return resultNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMNotationDispT<T>::get_parsed(void)
{
  VARIANT_BOOL isParsed;
  this->get_parsed((VARIANT_BOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNotationDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNotationDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNotationDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMNotationDispT<T>::transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                               VARIANT outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMEntity
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8D-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_publicId(VARIANT* publicId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("publicId"), DISPID(140));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(publicId /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMEntityDispT<T>::get_publicId(void)
{
  VARIANT publicId;
  this->get_publicId((VARIANT*)&publicId);
  return publicId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_systemId(VARIANT* systemId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("systemId"), DISPID(141));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(systemId /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMEntityDispT<T>::get_systemId(void)
{
  VARIANT systemId;
  this->get_systemId((VARIANT*)&systemId);
  return systemId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_notationName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("notationName"), DISPID(142));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityDispT<T>::get_notationName(void)
{
  BSTR name;
  this->get_notationName((BSTR*)&name);
  return name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_nodeValue(VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMEntityDispT<T>::get_nodeValue(void)
{
  VARIANT value;
  this->get_nodeValue((VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::set_nodeValue(VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::DOMNodeType __fastcall
IXMLDOMEntityDispT<T>::get_nodeType(void)
{
  Msxml3::DOMNodeType type;
  this->get_nodeType((Msxml3::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityDispT<T>::get_parentNode(void)
{
  Msxml3::IXMLDOMNode* parent;
  this->get_parentNode((Msxml3::IXMLDOMNode**)&parent);
  return parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMEntityDispT<T>::get_childNodes(void)
{
  Msxml3::IXMLDOMNodeList* childList;
  this->get_childNodes((Msxml3::IXMLDOMNodeList**)&childList);
  return childList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityDispT<T>::get_firstChild(void)
{
  Msxml3::IXMLDOMNode* firstChild;
  this->get_firstChild((Msxml3::IXMLDOMNode**)&firstChild);
  return firstChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityDispT<T>::get_lastChild(void)
{
  Msxml3::IXMLDOMNode* lastChild;
  this->get_lastChild((Msxml3::IXMLDOMNode**)&lastChild);
  return lastChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityDispT<T>::get_previousSibling(void)
{
  Msxml3::IXMLDOMNode* previousSibling;
  this->get_previousSibling((Msxml3::IXMLDOMNode**)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityDispT<T>::get_nextSibling(void)
{
  Msxml3::IXMLDOMNode* nextSibling;
  this->get_nextSibling((Msxml3::IXMLDOMNode**)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNamedNodeMap* __fastcall
IXMLDOMEntityDispT<T>::get_attributes(void)
{
  Msxml3::IXMLDOMNamedNodeMap* attributeMap;
  this->get_attributes((Msxml3::IXMLDOMNamedNodeMap**)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, VARIANT refChild/*[in]*/
                                    , Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, VARIANT refChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->insertBefore(newChild, refChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                    Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                    Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                    Msxml3::IXMLDOMNode* oldChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml3::IXMLDOMNode**)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                   Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/)
{
  Msxml3::IXMLDOMNode* oldChild;
  this->removeChild(childNode, (Msxml3::IXMLDOMNode**)&oldChild);
  return oldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                   Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->appendChild(newChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMEntityDispT<T>::hasChildNodes(void)
{
  VARIANT_BOOL hasChild;
  this->hasChildNodes((VARIANT_BOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocument* __fastcall
IXMLDOMEntityDispT<T>::get_ownerDocument(void)
{
  Msxml3::IXMLDOMDocument* DOMDocument;
  this->get_ownerDocument((Msxml3::IXMLDOMDocument**)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/, 
                                 Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/)
{
  Msxml3::IXMLDOMNode* cloneRoot;
  this->cloneNode(deep, (Msxml3::IXMLDOMNode**)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMEntityDispT<T>::get_specified(void)
{
  VARIANT_BOOL isSpecified;
  this->get_specified((VARIANT_BOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityDispT<T>::get_definition(void)
{
  Msxml3::IXMLDOMNode* definitionNode;
  this->get_definition((Msxml3::IXMLDOMNode**)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMEntityDispT<T>::get_nodeTypedValue(void)
{
  VARIANT typedValue;
  this->get_nodeTypedValue((VARIANT*)&typedValue);
  return typedValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::set_nodeTypedValue(VARIANT typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_dataType(VARIANT* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMEntityDispT<T>::get_dataType(void)
{
  VARIANT dataTypeName;
  this->get_dataType((VARIANT*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                     BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                   Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXMLDOMEntityDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNodeList* resultList;
  this->selectNodes(queryString, (Msxml3::IXMLDOMNodeList**)&resultList);
  return resultList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                        Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMEntityDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNode* resultNode;
  this->selectSingleNode(queryString, (Msxml3::IXMLDOMNode**)&resultNode);
  return resultNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXMLDOMEntityDispT<T>::get_parsed(void)
{
  VARIANT_BOOL isParsed;
  this->get_parsed((VARIANT_BOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMEntityDispT<T>::transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                             VARIANT outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXTLRuntime
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EFAA425-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::uniqueID(Msxml3::IXMLDOMNode* pNode/*[in]*/, long* pID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("uniqueID"), DISPID(187));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)pNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pID /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IXTLRuntimeDispT<T>::uniqueID(Msxml3::IXMLDOMNode* pNode/*[in]*/)
{
  long pID;
  this->uniqueID(pNode, (long*)&pID);
  return pID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::depth(Msxml3::IXMLDOMNode* pNode/*[in]*/, long* pDepth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("depth"), DISPID(188));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)pNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pDepth /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IXTLRuntimeDispT<T>::depth(Msxml3::IXMLDOMNode* pNode/*[in]*/)
{
  long pDepth;
  this->depth(pNode, (long*)&pDepth);
  return pDepth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::childNumber(Msxml3::IXMLDOMNode* pNode/*[in]*/, long* pNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNumber"), DISPID(189));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)pNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pNumber /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IXTLRuntimeDispT<T>::childNumber(Msxml3::IXMLDOMNode* pNode/*[in]*/)
{
  long pNumber;
  this->childNumber(pNode, (long*)&pNumber);
  return pNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::ancestorChildNumber(BSTR bstrNodeName/*[in]*/, 
                                         Msxml3::IXMLDOMNode* pNode/*[in]*/, 
                                         long* pNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ancestorChildNumber"), DISPID(190));
  TAutoArgs<2> _args;
  _args[1] = bstrNodeName /*[VT_BSTR:0]*/;
  _args[2] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)pNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pNumber /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IXTLRuntimeDispT<T>::ancestorChildNumber(BSTR bstrNodeName/*[in]*/, 
                                         Msxml3::IXMLDOMNode* pNode/*[in]*/)
{
  long pNumber;
  this->ancestorChildNumber(bstrNodeName, pNode, (long*)&pNumber);
  return pNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::absoluteChildNumber(Msxml3::IXMLDOMNode* pNode/*[in]*/, 
                                         long* pNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("absoluteChildNumber"), DISPID(191));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)pNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pNumber /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IXTLRuntimeDispT<T>::absoluteChildNumber(Msxml3::IXMLDOMNode* pNode/*[in]*/)
{
  long pNumber;
  this->absoluteChildNumber(pNode, (long*)&pNumber);
  return pNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::formatIndex(long lIndex/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                 BSTR* pbstrFormattedString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("formatIndex"), DISPID(192));
  TAutoArgs<2> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  _args[2] = bstrFormat /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrFormattedString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::formatIndex(long lIndex/*[in]*/, BSTR bstrFormat/*[in]*/)
{
  BSTR pbstrFormattedString;
  this->formatIndex(lIndex, bstrFormat, (BSTR*)&pbstrFormattedString);
  return pbstrFormattedString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::formatNumber(double dblNumber/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                  BSTR* pbstrFormattedString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("formatNumber"), DISPID(193));
  TAutoArgs<2> _args;
  _args[1] = dblNumber /*[VT_R8:0]*/;
  _args[2] = bstrFormat /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrFormattedString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::formatNumber(double dblNumber/*[in]*/, BSTR bstrFormat/*[in]*/)
{
  BSTR pbstrFormattedString;
  this->formatNumber(dblNumber, bstrFormat, (BSTR*)&pbstrFormattedString);
  return pbstrFormattedString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::formatDate(VARIANT varDate/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                VARIANT varDestLocale/*[in,opt]*/, 
                                BSTR* pbstrFormattedString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("formatDate"), DISPID(194));
  TAutoArgs<3> _args;
  _args[1] = varDate /*[VT_VARIANT:0]*/;
  _args[2] = bstrFormat /*[VT_BSTR:0]*/;
  _args[3] = varDestLocale /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pbstrFormattedString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::formatDate(VARIANT varDate/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                VARIANT varDestLocale/*[in,opt]*/)
{
  BSTR pbstrFormattedString;
  this->formatDate(varDate, bstrFormat, varDestLocale, (BSTR*)&pbstrFormattedString);
  return pbstrFormattedString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::formatTime(VARIANT varTime/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                VARIANT varDestLocale/*[in,opt]*/, 
                                BSTR* pbstrFormattedString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("formatTime"), DISPID(195));
  TAutoArgs<3> _args;
  _args[1] = varTime /*[VT_VARIANT:0]*/;
  _args[2] = bstrFormat /*[VT_BSTR:0]*/;
  _args[3] = varDestLocale /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pbstrFormattedString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::formatTime(VARIANT varTime/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                VARIANT varDestLocale/*[in,opt]*/)
{
  BSTR pbstrFormattedString;
  this->formatTime(varTime, bstrFormat, varDestLocale, (BSTR*)&pbstrFormattedString);
  return pbstrFormattedString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_nodeValue(VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXTLRuntimeDispT<T>::get_nodeValue(void)
{
  VARIANT value;
  this->get_nodeValue((VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::set_nodeValue(VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_nodeType(Msxml3::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::DOMNodeType __fastcall
IXTLRuntimeDispT<T>::get_nodeType(void)
{
  Msxml3::DOMNodeType type;
  this->get_nodeType((Msxml3::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_parentNode(Msxml3::IXMLDOMNode** parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXTLRuntimeDispT<T>::get_parentNode(void)
{
  Msxml3::IXMLDOMNode* parent;
  this->get_parentNode((Msxml3::IXMLDOMNode**)&parent);
  return parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_childNodes(Msxml3::IXMLDOMNodeList** childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXTLRuntimeDispT<T>::get_childNodes(void)
{
  Msxml3::IXMLDOMNodeList* childList;
  this->get_childNodes((Msxml3::IXMLDOMNodeList**)&childList);
  return childList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_firstChild(Msxml3::IXMLDOMNode** firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXTLRuntimeDispT<T>::get_firstChild(void)
{
  Msxml3::IXMLDOMNode* firstChild;
  this->get_firstChild((Msxml3::IXMLDOMNode**)&firstChild);
  return firstChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_lastChild(Msxml3::IXMLDOMNode** lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXTLRuntimeDispT<T>::get_lastChild(void)
{
  Msxml3::IXMLDOMNode* lastChild;
  this->get_lastChild((Msxml3::IXMLDOMNode**)&lastChild);
  return lastChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_previousSibling(Msxml3::IXMLDOMNode** previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXTLRuntimeDispT<T>::get_previousSibling(void)
{
  Msxml3::IXMLDOMNode* previousSibling;
  this->get_previousSibling((Msxml3::IXMLDOMNode**)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_nextSibling(Msxml3::IXMLDOMNode** nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXTLRuntimeDispT<T>::get_nextSibling(void)
{
  Msxml3::IXMLDOMNode* nextSibling;
  this->get_nextSibling((Msxml3::IXMLDOMNode**)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_attributes(Msxml3::IXMLDOMNamedNodeMap** attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNamedNodeMap* __fastcall
IXTLRuntimeDispT<T>::get_attributes(void)
{
  Msxml3::IXMLDOMNamedNodeMap* attributeMap;
  this->get_attributes((Msxml3::IXMLDOMNamedNodeMap**)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, VARIANT refChild/*[in]*/, 
                                  Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXTLRuntimeDispT<T>::insertBefore(Msxml3::IXMLDOMNode* newChild/*[in]*/, VARIANT refChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->insertBefore(newChild, refChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                  Msxml3::IXMLDOMNode* oldChild/*[in]*/, 
                                  Msxml3::IXMLDOMNode** outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXTLRuntimeDispT<T>::replaceChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                  Msxml3::IXMLDOMNode* oldChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml3::IXMLDOMNode**)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/, 
                                 Msxml3::IXMLDOMNode** oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXTLRuntimeDispT<T>::removeChild(Msxml3::IXMLDOMNode* childNode/*[in]*/)
{
  Msxml3::IXMLDOMNode* oldChild;
  this->removeChild(childNode, (Msxml3::IXMLDOMNode**)&oldChild);
  return oldChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/, 
                                 Msxml3::IXMLDOMNode** outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXTLRuntimeDispT<T>::appendChild(Msxml3::IXMLDOMNode* newChild/*[in]*/)
{
  Msxml3::IXMLDOMNode* outNewChild;
  this->appendChild(newChild, (Msxml3::IXMLDOMNode**)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::hasChildNodes(VARIANT_BOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXTLRuntimeDispT<T>::hasChildNodes(void)
{
  VARIANT_BOOL hasChild;
  this->hasChildNodes((VARIANT_BOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_ownerDocument(Msxml3::IXMLDOMDocument** DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocument* __fastcall
IXTLRuntimeDispT<T>::get_ownerDocument(void)
{
  Msxml3::IXMLDOMDocument* DOMDocument;
  this->get_ownerDocument((Msxml3::IXMLDOMDocument**)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/, 
                               Msxml3::IXMLDOMNode** cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXTLRuntimeDispT<T>::cloneNode(VARIANT_BOOL deep/*[in]*/)
{
  Msxml3::IXMLDOMNode* cloneRoot;
  this->cloneNode(deep, (Msxml3::IXMLDOMNode**)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_specified(VARIANT_BOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXTLRuntimeDispT<T>::get_specified(void)
{
  VARIANT_BOOL isSpecified;
  this->get_specified((VARIANT_BOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_definition(Msxml3::IXMLDOMNode** definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXTLRuntimeDispT<T>::get_definition(void)
{
  Msxml3::IXMLDOMNode* definitionNode;
  this->get_definition((Msxml3::IXMLDOMNode**)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_nodeTypedValue(VARIANT* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXTLRuntimeDispT<T>::get_nodeTypedValue(void)
{
  VARIANT typedValue;
  this->get_nodeTypedValue((VARIANT*)&typedValue);
  return typedValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::set_nodeTypedValue(VARIANT typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_dataType(VARIANT* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXTLRuntimeDispT<T>::get_dataType(void)
{
  VARIANT dataTypeName;
  this->get_dataType((VARIANT*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                   BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::transformNode(Msxml3::IXMLDOMNode* stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                 Msxml3::IXMLDOMNodeList** resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNodeList* __fastcall
IXTLRuntimeDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNodeList* resultList;
  this->selectNodes(queryString, (Msxml3::IXMLDOMNodeList**)&resultList);
  return resultList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                      Msxml3::IXMLDOMNode** resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXTLRuntimeDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml3::IXMLDOMNode* resultNode;
  this->selectSingleNode(queryString, (Msxml3::IXMLDOMNode**)&resultNode);
  return resultNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_parsed(VARIANT_BOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXTLRuntimeDispT<T>::get_parsed(void)
{
  VARIANT_BOOL isParsed;
  this->get_parsed((VARIANT_BOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXTLRuntimeDispT<T>::transformNodeToObject(Msxml3::IXMLDOMNode* stylesheet/*[in]*/, 
                                           VARIANT outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIXSLTemplate
// Interface: IXSLTemplate
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIXSLTemplateT<T>::_set_stylesheet(Msxml3::IXMLDOMNode* stylesheet/*[in]*/)
{
  return (*this)->_set_stylesheet(stylesheet);
}

template <class T> HRESULT __fastcall
TCOMIXSLTemplateT<T>::_set_stylesheet(Msxml3::IXMLDOMNodePtr stylesheet/*[in]*/)
{
  return (*this)->_set_stylesheet(IXMLDOMNode*)stylesheet);
}

template <class T> HRESULT __fastcall
TCOMIXSLTemplateT<T>::get_stylesheet(Msxml3::IXMLDOMNode** stylesheet/*[out,retval]*/)
{
  return (*this)->get_stylesheet(stylesheet);
}

template <class T> HRESULT __fastcall
TCOMIXSLTemplateT<T>::get_stylesheet(Msxml3::IXMLDOMNodePtr* stylesheet/*[out,retval]*/)
{
  return (*this)->get_stylesheet(IXMLDOMNode**)stylesheet);
}

template <class T> Msxml3::IXMLDOMNodePtr __fastcall
TCOMIXSLTemplateT<T>::get_stylesheet(void)
{
  Msxml3::IXMLDOMNode* stylesheet;
  OLECHECK(this->get_stylesheet((Msxml3::IXMLDOMNode**)&stylesheet));
  return (Msxml3::IXMLDOMNodePtr)stylesheet;
}

template <class T> HRESULT __fastcall
TCOMIXSLTemplateT<T>::createProcessor(Msxml3::IXSLProcessor** ppProcessor/*[out,retval]*/)
{
  return (*this)->createProcessor(ppProcessor);
}

template <class T> Msxml3::IXSLProcessor* __fastcall
TCOMIXSLTemplateT<T>::createProcessor(void)
{
  Msxml3::IXSLProcessor* ppProcessor;
  OLECHECK(this->createProcessor((Msxml3::IXSLProcessor**)&ppProcessor));
  return ppProcessor;
}

// *********************************************************************//
// DispIntf:  IXSLTemplate
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF93-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXSLTemplateDispT<T>::_set_stylesheet(Msxml3::IXMLDOMNode* stylesheet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("stylesheet"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXSLTemplateDispT<T>::get_stylesheet(Msxml3::IXMLDOMNode** stylesheet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("stylesheet"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)stylesheet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXSLTemplateDispT<T>::get_stylesheet(void)
{
  Msxml3::IXMLDOMNode* stylesheet;
  this->get_stylesheet((Msxml3::IXMLDOMNode**)&stylesheet);
  return stylesheet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXSLTemplateDispT<T>::createProcessor(Msxml3::IXSLProcessor** ppProcessor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createProcessor"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXSLProcessor**)ppProcessor /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXSLProcessor* __fastcall
IXSLTemplateDispT<T>::createProcessor(void)
{
  Msxml3::IXSLProcessor* ppProcessor;
  this->createProcessor((Msxml3::IXSLProcessor**)&ppProcessor);
  return ppProcessor;
}

// *********************************************************************//
// DispIntf:  IXSLProcessor
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF92-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXSLProcessorDispT<T>::set_input(VARIANT pVar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("input"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVar /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXSLProcessorDispT<T>::get_input(VARIANT* pVar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("input"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVar /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXSLProcessorDispT<T>::get_input(void)
{
  VARIANT pVar;
  this->get_input((VARIANT*)&pVar);
  return pVar;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXSLProcessorDispT<T>::get_ownerTemplate(Msxml3::IXSLTemplate** ppTemplate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerTemplate"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXSLTemplate**)ppTemplate /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXSLTemplate* __fastcall
IXSLProcessorDispT<T>::get_ownerTemplate(void)
{
  Msxml3::IXSLTemplate* ppTemplate;
  this->get_ownerTemplate((Msxml3::IXSLTemplate**)&ppTemplate);
  return ppTemplate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXSLProcessorDispT<T>::setStartMode(BSTR mode/*[in]*/, BSTR namespaceURI/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("setStartMode"), DISPID(4));
  TAutoArgs<2> _args;
  _args[1] = mode /*[VT_BSTR:0]*/;
  _args[2] = namespaceURI /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXSLProcessorDispT<T>::get_startMode(BSTR* mode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("startMode"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(mode /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXSLProcessorDispT<T>::get_startMode(void)
{
  BSTR mode;
  this->get_startMode((BSTR*)&mode);
  return mode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXSLProcessorDispT<T>::get_startModeURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("startModeURI"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXSLProcessorDispT<T>::get_startModeURI(void)
{
  BSTR namespaceURI;
  this->get_startModeURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXSLProcessorDispT<T>::set_output(VARIANT pOutput/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("output"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pOutput /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXSLProcessorDispT<T>::get_output(VARIANT* pOutput/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("output"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pOutput /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXSLProcessorDispT<T>::get_output(void)
{
  VARIANT pOutput;
  this->get_output((VARIANT*)&pOutput);
  return pOutput;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXSLProcessorDispT<T>::transform(VARIANT_BOOL* pDone/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transform"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDone /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IXSLProcessorDispT<T>::transform(void)
{
  VARIANT_BOOL pDone;
  this->transform((VARIANT_BOOL*)&pDone);
  return pDone;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXSLProcessorDispT<T>::reset()
{
  _TDispID _dispid(*this, OLETEXT("reset"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXSLProcessorDispT<T>::get_readyState(long* pReadyState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("readyState"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReadyState /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXSLProcessorDispT<T>::get_readyState(void)
{
  long pReadyState;
  this->get_readyState((long*)&pReadyState);
  return pReadyState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXSLProcessorDispT<T>::addParameter(BSTR baseName/*[in]*/, VARIANT parameter/*[in]*/, 
                                    BSTR namespaceURI/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("addParameter"), DISPID(11));
  TAutoArgs<3> _args;
  _args[1] = baseName /*[VT_BSTR:0]*/;
  _args[2] = parameter /*[VT_VARIANT:0]*/;
  _args[3] = namespaceURI /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXSLProcessorDispT<T>::addObject(LPDISPATCH obj/*[in]*/, BSTR namespaceURI/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("addObject"), DISPID(12));
  TAutoArgs<2> _args;
  _args[1] = obj /*[VT_DISPATCH:0]*/;
  _args[2] = namespaceURI /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXSLProcessorDispT<T>::get_stylesheet(Msxml3::IXMLDOMNode** stylesheet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("stylesheet"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)stylesheet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXSLProcessorDispT<T>::get_stylesheet(void)
{
  Msxml3::IXMLDOMNode* stylesheet;
  this->get_stylesheet((Msxml3::IXMLDOMNode**)&stylesheet);
  return stylesheet;
}

// *********************************************************************//
// SmartIntf: TCOMIVBSAXXMLReader
// Interface: IVBSAXXMLReader
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::getFeature(BSTR strName/*[in]*/, VARIANT_BOOL* fValue/*[out,retval]*/)
{
  return (*this)->getFeature(strName, fValue);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIVBSAXXMLReaderT<T>::getFeature(BSTR strName/*[in]*/)
{
  VARIANT_BOOL fValue;
  OLECHECK(this->getFeature(, (VARIANT_BOOL*)&fValue));
  return fValue;
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::putFeature(BSTR strName/*[in]*/, VARIANT_BOOL fValue/*[in]*/)
{
  return (*this)->putFeature(strName, fValue);
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::getProperty(BSTR strName/*[in]*/, VARIANT* varValue/*[out,retval]*/)
{
  return (*this)->getProperty(strName, varValue);
}

template <class T> VARIANT __fastcall
TCOMIVBSAXXMLReaderT<T>::getProperty(BSTR strName/*[in]*/)
{
  VARIANT varValue;
  OLECHECK(this->getProperty(, (VARIANT*)&varValue));
  return varValue;
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::putProperty(BSTR strName/*[in]*/, VARIANT varValue/*[in]*/)
{
  return (*this)->putProperty(strName, varValue);
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::get_entityResolver(Msxml3::IVBSAXEntityResolver** oResolver/*[out,retval]*/)
{
  return (*this)->get_entityResolver(oResolver);
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::get_entityResolver(Msxml3::IVBSAXEntityResolverPtr* oResolver/*[out,retval]*/)
{
  return (*this)->get_entityResolver(IVBSAXEntityResolver**)oResolver);
}

template <class T> Msxml3::IVBSAXEntityResolverPtr __fastcall
TCOMIVBSAXXMLReaderT<T>::get_entityResolver(void)
{
  Msxml3::IVBSAXEntityResolver* oResolver;
  OLECHECK(this->get_entityResolver((Msxml3::IVBSAXEntityResolver**)&oResolver));
  return (Msxml3::IVBSAXEntityResolverPtr)oResolver;
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::_set_entityResolver(Msxml3::IVBSAXEntityResolver* oResolver/*[in]*/)
{
  return (*this)->_set_entityResolver(oResolver);
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::_set_entityResolver(Msxml3::IVBSAXEntityResolverPtr oResolver/*[in]*/)
{
  return (*this)->_set_entityResolver(IVBSAXEntityResolver*)oResolver);
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::get_contentHandler(Msxml3::IVBSAXContentHandler** oHandler/*[out,retval]*/)
{
  return (*this)->get_contentHandler(oHandler);
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::get_contentHandler(Msxml3::IVBSAXContentHandlerPtr* oHandler/*[out,retval]*/)
{
  return (*this)->get_contentHandler(IVBSAXContentHandler**)oHandler);
}

template <class T> Msxml3::IVBSAXContentHandlerPtr __fastcall
TCOMIVBSAXXMLReaderT<T>::get_contentHandler(void)
{
  Msxml3::IVBSAXContentHandler* oHandler;
  OLECHECK(this->get_contentHandler((Msxml3::IVBSAXContentHandler**)&oHandler));
  return (Msxml3::IVBSAXContentHandlerPtr)oHandler;
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::_set_contentHandler(Msxml3::IVBSAXContentHandler* oHandler/*[in]*/)
{
  return (*this)->_set_contentHandler(oHandler);
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::_set_contentHandler(Msxml3::IVBSAXContentHandlerPtr oHandler/*[in]*/)
{
  return (*this)->_set_contentHandler(IVBSAXContentHandler*)oHandler);
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::get_dtdHandler(Msxml3::IVBSAXDTDHandler** oHandler/*[out,retval]*/)
{
  return (*this)->get_dtdHandler(oHandler);
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::get_dtdHandler(Msxml3::IVBSAXDTDHandlerPtr* oHandler/*[out,retval]*/)
{
  return (*this)->get_dtdHandler(IVBSAXDTDHandler**)oHandler);
}

template <class T> Msxml3::IVBSAXDTDHandlerPtr __fastcall
TCOMIVBSAXXMLReaderT<T>::get_dtdHandler(void)
{
  Msxml3::IVBSAXDTDHandler* oHandler;
  OLECHECK(this->get_dtdHandler((Msxml3::IVBSAXDTDHandler**)&oHandler));
  return (Msxml3::IVBSAXDTDHandlerPtr)oHandler;
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::_set_dtdHandler(Msxml3::IVBSAXDTDHandler* oHandler/*[in]*/)
{
  return (*this)->_set_dtdHandler(oHandler);
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::_set_dtdHandler(Msxml3::IVBSAXDTDHandlerPtr oHandler/*[in]*/)
{
  return (*this)->_set_dtdHandler(IVBSAXDTDHandler*)oHandler);
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::get_errorHandler(Msxml3::IVBSAXErrorHandler** oHandler/*[out,retval]*/)
{
  return (*this)->get_errorHandler(oHandler);
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::get_errorHandler(Msxml3::IVBSAXErrorHandlerPtr* oHandler/*[out,retval]*/)
{
  return (*this)->get_errorHandler(IVBSAXErrorHandler**)oHandler);
}

template <class T> Msxml3::IVBSAXErrorHandlerPtr __fastcall
TCOMIVBSAXXMLReaderT<T>::get_errorHandler(void)
{
  Msxml3::IVBSAXErrorHandler* oHandler;
  OLECHECK(this->get_errorHandler((Msxml3::IVBSAXErrorHandler**)&oHandler));
  return (Msxml3::IVBSAXErrorHandlerPtr)oHandler;
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::_set_errorHandler(Msxml3::IVBSAXErrorHandler* oHandler/*[in]*/)
{
  return (*this)->_set_errorHandler(oHandler);
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::_set_errorHandler(Msxml3::IVBSAXErrorHandlerPtr oHandler/*[in]*/)
{
  return (*this)->_set_errorHandler(IVBSAXErrorHandler*)oHandler);
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::get_baseURL(BSTR* strBaseURL/*[out,retval]*/)
{
  return (*this)->get_baseURL(strBaseURL);
}

template <class T> BSTR __fastcall
TCOMIVBSAXXMLReaderT<T>::get_baseURL(void)
{
  BSTR strBaseURL = 0;
  OLECHECK(this->get_baseURL((BSTR*)&strBaseURL));
  return strBaseURL;
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::set_baseURL(BSTR strBaseURL/*[in]*/)
{
  return (*this)->set_baseURL(strBaseURL);
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::get_secureBaseURL(BSTR* strSecureBaseURL/*[out,retval]*/)
{
  return (*this)->get_secureBaseURL(strSecureBaseURL);
}

template <class T> BSTR __fastcall
TCOMIVBSAXXMLReaderT<T>::get_secureBaseURL(void)
{
  BSTR strSecureBaseURL = 0;
  OLECHECK(this->get_secureBaseURL((BSTR*)&strSecureBaseURL));
  return strSecureBaseURL;
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::set_secureBaseURL(BSTR strSecureBaseURL/*[in]*/)
{
  return (*this)->set_secureBaseURL(strSecureBaseURL);
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::parse(VARIANT varInput/*[in]*/)
{
  return (*this)->parse(varInput);
}

template <class T> HRESULT __fastcall
TCOMIVBSAXXMLReaderT<T>::parseURL(BSTR strURL/*[in]*/)
{
  return (*this)->parseURL(strURL);
}

// *********************************************************************//
// DispIntf:  IVBSAXXMLReader
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8C033CAA-6CD6-4F73-B728-4531AF74945F}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLReaderDispT<T>::getFeature(BSTR strName/*[in]*/, VARIANT_BOOL* fValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getFeature"), DISPID(1282));
  TAutoArgs<1> _args;
  _args[1] = strName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(fValue /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IVBSAXXMLReaderDispT<T>::getFeature(BSTR strName/*[in]*/)
{
  VARIANT_BOOL fValue;
  this->getFeature(strName, (VARIANT_BOOL*)&fValue);
  return fValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLReaderDispT<T>::putFeature(BSTR strName/*[in]*/, VARIANT_BOOL fValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("putFeature"), DISPID(1283));
  TAutoArgs<2> _args;
  _args[1] = strName /*[VT_BSTR:0]*/;
  _args[2] = fValue /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLReaderDispT<T>::getProperty(BSTR strName/*[in]*/, VARIANT* varValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getProperty"), DISPID(1284));
  TAutoArgs<1> _args;
  _args[1] = strName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(varValue /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IVBSAXXMLReaderDispT<T>::getProperty(BSTR strName/*[in]*/)
{
  VARIANT varValue;
  this->getProperty(strName, (VARIANT*)&varValue);
  return varValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLReaderDispT<T>::putProperty(BSTR strName/*[in]*/, VARIANT varValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("putProperty"), DISPID(1285));
  TAutoArgs<2> _args;
  _args[1] = strName /*[VT_BSTR:0]*/;
  _args[2] = varValue /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLReaderDispT<T>::get_entityResolver(Msxml3::IVBSAXEntityResolver** oResolver/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("entityResolver"), DISPID(1286));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IVBSAXEntityResolver**)oResolver /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IVBSAXEntityResolver* __fastcall
IVBSAXXMLReaderDispT<T>::get_entityResolver(void)
{
  Msxml3::IVBSAXEntityResolver* oResolver;
  this->get_entityResolver((Msxml3::IVBSAXEntityResolver**)&oResolver);
  return oResolver;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLReaderDispT<T>::_set_entityResolver(Msxml3::IVBSAXEntityResolver* oResolver/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("entityResolver"), DISPID(1286));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IVBSAXEntityResolver*)oResolver /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLReaderDispT<T>::get_contentHandler(Msxml3::IVBSAXContentHandler** oHandler/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("contentHandler"), DISPID(1287));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IVBSAXContentHandler**)oHandler /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IVBSAXContentHandler* __fastcall
IVBSAXXMLReaderDispT<T>::get_contentHandler(void)
{
  Msxml3::IVBSAXContentHandler* oHandler;
  this->get_contentHandler((Msxml3::IVBSAXContentHandler**)&oHandler);
  return oHandler;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLReaderDispT<T>::_set_contentHandler(Msxml3::IVBSAXContentHandler* oHandler/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("contentHandler"), DISPID(1287));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IVBSAXContentHandler*)oHandler /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLReaderDispT<T>::get_dtdHandler(Msxml3::IVBSAXDTDHandler** oHandler/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dtdHandler"), DISPID(1288));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IVBSAXDTDHandler**)oHandler /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IVBSAXDTDHandler* __fastcall
IVBSAXXMLReaderDispT<T>::get_dtdHandler(void)
{
  Msxml3::IVBSAXDTDHandler* oHandler;
  this->get_dtdHandler((Msxml3::IVBSAXDTDHandler**)&oHandler);
  return oHandler;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLReaderDispT<T>::_set_dtdHandler(Msxml3::IVBSAXDTDHandler* oHandler/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dtdHandler"), DISPID(1288));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IVBSAXDTDHandler*)oHandler /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLReaderDispT<T>::get_errorHandler(Msxml3::IVBSAXErrorHandler** oHandler/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("errorHandler"), DISPID(1289));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IVBSAXErrorHandler**)oHandler /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IVBSAXErrorHandler* __fastcall
IVBSAXXMLReaderDispT<T>::get_errorHandler(void)
{
  Msxml3::IVBSAXErrorHandler* oHandler;
  this->get_errorHandler((Msxml3::IVBSAXErrorHandler**)&oHandler);
  return oHandler;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLReaderDispT<T>::_set_errorHandler(Msxml3::IVBSAXErrorHandler* oHandler/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("errorHandler"), DISPID(1289));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IVBSAXErrorHandler*)oHandler /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLReaderDispT<T>::get_baseURL(BSTR* strBaseURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseURL"), DISPID(1290));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(strBaseURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVBSAXXMLReaderDispT<T>::get_baseURL(void)
{
  BSTR strBaseURL;
  this->get_baseURL((BSTR*)&strBaseURL);
  return strBaseURL;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLReaderDispT<T>::set_baseURL(BSTR strBaseURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseURL"), DISPID(1290));
  TAutoArgs<1> _args;
  _args[1] = strBaseURL /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLReaderDispT<T>::get_secureBaseURL(BSTR* strSecureBaseURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("secureBaseURL"), DISPID(1291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(strSecureBaseURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVBSAXXMLReaderDispT<T>::get_secureBaseURL(void)
{
  BSTR strSecureBaseURL;
  this->get_secureBaseURL((BSTR*)&strSecureBaseURL);
  return strSecureBaseURL;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLReaderDispT<T>::set_secureBaseURL(BSTR strSecureBaseURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("secureBaseURL"), DISPID(1291));
  TAutoArgs<1> _args;
  _args[1] = strSecureBaseURL /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLReaderDispT<T>::parse(VARIANT varInput/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("parse"), DISPID(1292));
  TAutoArgs<1> _args;
  _args[1] = varInput /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLReaderDispT<T>::parseURL(BSTR strURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("parseURL"), DISPID(1293));
  TAutoArgs<1> _args;
  _args[1] = strURL /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IVBSAXEntityResolver
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0C05D096-F45B-4ACA-AD1A-AA0BC25518DC}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXEntityResolverDispT<T>::resolveEntity(BSTR* strPublicId/*[in,out]*/, 
                                            BSTR* strSystemId/*[in,out]*/, 
                                            VARIANT* varInput/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("resolveEntity"), DISPID(1319));
  TAutoArgs<2> _args;
  _args[1] = strPublicId /*[VT_BSTR:1]*/;
  _args[2] = strSystemId /*[VT_BSTR:1]*/;
  return OutRetValSetterPtr(varInput /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IVBSAXEntityResolverDispT<T>::resolveEntity(BSTR* strPublicId/*[in,out]*/, 
                                            BSTR* strSystemId/*[in,out]*/)
{
  VARIANT varInput;
  this->resolveEntity(strPublicId, strSystemId, (VARIANT*)&varInput);
  return varInput;
}

// *********************************************************************//
// DispIntf:  IVBSAXContentHandler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2ED7290A-4DD5-4B46-BB26-4E4155E77FAA}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXContentHandlerDispT<T>::_set_documentLocator(Msxml3::IVBSAXLocator* Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("documentLocator"), DISPID(1322));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IVBSAXLocator*)Param1 /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXContentHandlerDispT<T>::startDocument()
{
  _TDispID _dispid(*this, OLETEXT("startDocument"), DISPID(1323));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXContentHandlerDispT<T>::endDocument()
{
  _TDispID _dispid(*this, OLETEXT("endDocument"), DISPID(1324));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXContentHandlerDispT<T>::startPrefixMapping(BSTR* strPrefix/*[in,out]*/, 
                                                 BSTR* strURI/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("startPrefixMapping"), DISPID(1325));
  TAutoArgs<2> _args;
  _args[1] = strPrefix /*[VT_BSTR:1]*/;
  _args[2] = strURI /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXContentHandlerDispT<T>::endPrefixMapping(BSTR* strPrefix/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("endPrefixMapping"), DISPID(1326));
  TAutoArgs<1> _args;
  _args[1] = strPrefix /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXContentHandlerDispT<T>::startElement(BSTR* strNamespaceURI/*[in,out]*/, 
                                           BSTR* strLocalName/*[in,out]*/, 
                                           BSTR* strQName/*[in,out]*/, 
                                           Msxml3::IVBSAXAttributes* oAttributes/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("startElement"), DISPID(1327));
  TAutoArgs<4> _args;
  _args[1] = strNamespaceURI /*[VT_BSTR:1]*/;
  _args[2] = strLocalName /*[VT_BSTR:1]*/;
  _args[3] = strQName /*[VT_BSTR:1]*/;
  _args[4] = (LPDISPATCH)(Msxml3::IVBSAXAttributes*)oAttributes /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXContentHandlerDispT<T>::endElement(BSTR* strNamespaceURI/*[in,out]*/, 
                                         BSTR* strLocalName/*[in,out]*/, BSTR* strQName/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("endElement"), DISPID(1328));
  TAutoArgs<3> _args;
  _args[1] = strNamespaceURI /*[VT_BSTR:1]*/;
  _args[2] = strLocalName /*[VT_BSTR:1]*/;
  _args[3] = strQName /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXContentHandlerDispT<T>::characters(BSTR* strChars/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("characters"), DISPID(1329));
  TAutoArgs<1> _args;
  _args[1] = strChars /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXContentHandlerDispT<T>::ignorableWhitespace(BSTR* strChars/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ignorableWhitespace"), DISPID(1330));
  TAutoArgs<1> _args;
  _args[1] = strChars /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXContentHandlerDispT<T>::processingInstruction(BSTR* strTarget/*[in,out]*/, 
                                                    BSTR* strData/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("processingInstruction"), DISPID(1331));
  TAutoArgs<2> _args;
  _args[1] = strTarget /*[VT_BSTR:1]*/;
  _args[2] = strData /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXContentHandlerDispT<T>::skippedEntity(BSTR* strName/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("skippedEntity"), DISPID(1332));
  TAutoArgs<1> _args;
  _args[1] = strName /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IVBSAXLocator
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {796E7AC5-5AA2-4EFF-ACAD-3FAAF01A3288}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXLocatorDispT<T>::get_columnNumber(int* nColumn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("columnNumber"), DISPID(1313));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nColumn /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IVBSAXLocatorDispT<T>::get_columnNumber(void)
{
  int nColumn;
  this->get_columnNumber((int*)&nColumn);
  return nColumn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXLocatorDispT<T>::get_lineNumber(int* nLine/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lineNumber"), DISPID(1314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nLine /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IVBSAXLocatorDispT<T>::get_lineNumber(void)
{
  int nLine;
  this->get_lineNumber((int*)&nLine);
  return nLine;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXLocatorDispT<T>::get_publicId(BSTR* strPublicId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("publicId"), DISPID(1315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(strPublicId /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVBSAXLocatorDispT<T>::get_publicId(void)
{
  BSTR strPublicId;
  this->get_publicId((BSTR*)&strPublicId);
  return strPublicId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXLocatorDispT<T>::get_systemId(BSTR* strSystemId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("systemId"), DISPID(1316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(strSystemId /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVBSAXLocatorDispT<T>::get_systemId(void)
{
  BSTR strSystemId;
  this->get_systemId((BSTR*)&strSystemId);
  return strSystemId;
}

// *********************************************************************//
// DispIntf:  IVBSAXAttributes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10DC0586-132B-4CAC-8BB3-DB00AC8B7EE0}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXAttributesDispT<T>::get_length(int* nLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(1344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nLength /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IVBSAXAttributesDispT<T>::get_length(void)
{
  int nLength;
  this->get_length((int*)&nLength);
  return nLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXAttributesDispT<T>::getURI(int nIndex/*[in]*/, BSTR* strURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getURI"), DISPID(1345));
  TAutoArgs<1> _args;
  _args[1] = nIndex /*[VT_INT:0]*/;
  return OutRetValSetterPtr(strURI /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IVBSAXAttributesDispT<T>::getURI(int nIndex/*[in]*/)
{
  BSTR strURI;
  this->getURI(nIndex, (BSTR*)&strURI);
  return strURI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXAttributesDispT<T>::getLocalName(int nIndex/*[in]*/, BSTR* strLocalName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getLocalName"), DISPID(1346));
  TAutoArgs<1> _args;
  _args[1] = nIndex /*[VT_INT:0]*/;
  return OutRetValSetterPtr(strLocalName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IVBSAXAttributesDispT<T>::getLocalName(int nIndex/*[in]*/)
{
  BSTR strLocalName;
  this->getLocalName(nIndex, (BSTR*)&strLocalName);
  return strLocalName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXAttributesDispT<T>::getQName(int nIndex/*[in]*/, BSTR* strQName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getQName"), DISPID(1347));
  TAutoArgs<1> _args;
  _args[1] = nIndex /*[VT_INT:0]*/;
  return OutRetValSetterPtr(strQName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IVBSAXAttributesDispT<T>::getQName(int nIndex/*[in]*/)
{
  BSTR strQName;
  this->getQName(nIndex, (BSTR*)&strQName);
  return strQName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXAttributesDispT<T>::getIndexFromName(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/, 
                                           int* nIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getIndexFromName"), DISPID(1348));
  TAutoArgs<2> _args;
  _args[1] = strURI /*[VT_BSTR:0]*/;
  _args[2] = strLocalName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(nIndex /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IVBSAXAttributesDispT<T>::getIndexFromName(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/)
{
  int nIndex;
  this->getIndexFromName(strURI, strLocalName, (int*)&nIndex);
  return nIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXAttributesDispT<T>::getIndexFromQName(BSTR strQName/*[in]*/, int* nIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getIndexFromQName"), DISPID(1349));
  TAutoArgs<1> _args;
  _args[1] = strQName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(nIndex /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IVBSAXAttributesDispT<T>::getIndexFromQName(BSTR strQName/*[in]*/)
{
  int nIndex;
  this->getIndexFromQName(strQName, (int*)&nIndex);
  return nIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXAttributesDispT<T>::getType(int nIndex/*[in]*/, BSTR* strType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getType"), DISPID(1350));
  TAutoArgs<1> _args;
  _args[1] = nIndex /*[VT_INT:0]*/;
  return OutRetValSetterPtr(strType /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IVBSAXAttributesDispT<T>::getType(int nIndex/*[in]*/)
{
  BSTR strType;
  this->getType(nIndex, (BSTR*)&strType);
  return strType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXAttributesDispT<T>::getTypeFromName(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/, 
                                          BSTR* strType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getTypeFromName"), DISPID(1351));
  TAutoArgs<2> _args;
  _args[1] = strURI /*[VT_BSTR:0]*/;
  _args[2] = strLocalName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(strType /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IVBSAXAttributesDispT<T>::getTypeFromName(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/)
{
  BSTR strType;
  this->getTypeFromName(strURI, strLocalName, (BSTR*)&strType);
  return strType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXAttributesDispT<T>::getTypeFromQName(BSTR strQName/*[in]*/, BSTR* strType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getTypeFromQName"), DISPID(1352));
  TAutoArgs<1> _args;
  _args[1] = strQName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(strType /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IVBSAXAttributesDispT<T>::getTypeFromQName(BSTR strQName/*[in]*/)
{
  BSTR strType;
  this->getTypeFromQName(strQName, (BSTR*)&strType);
  return strType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXAttributesDispT<T>::getValue(int nIndex/*[in]*/, BSTR* strValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getValue"), DISPID(1353));
  TAutoArgs<1> _args;
  _args[1] = nIndex /*[VT_INT:0]*/;
  return OutRetValSetterPtr(strValue /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IVBSAXAttributesDispT<T>::getValue(int nIndex/*[in]*/)
{
  BSTR strValue;
  this->getValue(nIndex, (BSTR*)&strValue);
  return strValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXAttributesDispT<T>::getValueFromName(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/, 
                                           BSTR* strValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getValueFromName"), DISPID(1354));
  TAutoArgs<2> _args;
  _args[1] = strURI /*[VT_BSTR:0]*/;
  _args[2] = strLocalName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(strValue /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IVBSAXAttributesDispT<T>::getValueFromName(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/)
{
  BSTR strValue;
  this->getValueFromName(strURI, strLocalName, (BSTR*)&strValue);
  return strValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXAttributesDispT<T>::getValueFromQName(BSTR strQName/*[in]*/, BSTR* strValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getValueFromQName"), DISPID(1355));
  TAutoArgs<1> _args;
  _args[1] = strQName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(strValue /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IVBSAXAttributesDispT<T>::getValueFromQName(BSTR strQName/*[in]*/)
{
  BSTR strValue;
  this->getValueFromQName(strQName, (BSTR*)&strValue);
  return strValue;
}

// *********************************************************************//
// DispIntf:  IVBSAXDTDHandler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {24FB3297-302D-4620-BA39-3A732D850558}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXDTDHandlerDispT<T>::notationDecl(BSTR* strName/*[in,out]*/, BSTR* strPublicId/*[in,out]*/, 
                                       BSTR* strSystemId/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("notationDecl"), DISPID(1335));
  TAutoArgs<3> _args;
  _args[1] = strName /*[VT_BSTR:1]*/;
  _args[2] = strPublicId /*[VT_BSTR:1]*/;
  _args[3] = strSystemId /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXDTDHandlerDispT<T>::unparsedEntityDecl(BSTR* strName/*[in,out]*/, 
                                             BSTR* strPublicId/*[in,out]*/, 
                                             BSTR* strSystemId/*[in,out]*/, 
                                             BSTR* strNotationName/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("unparsedEntityDecl"), DISPID(1336));
  TAutoArgs<4> _args;
  _args[1] = strName /*[VT_BSTR:1]*/;
  _args[2] = strPublicId /*[VT_BSTR:1]*/;
  _args[3] = strSystemId /*[VT_BSTR:1]*/;
  _args[4] = strNotationName /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IVBSAXErrorHandler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D963D3FE-173C-4862-9095-B92F66995F52}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXErrorHandlerDispT<T>::error(Msxml3::IVBSAXLocator* oLocator/*[in]*/, 
                                  BSTR* strErrorMessage/*[in,out]*/, long nErrorCode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("error"), DISPID(1339));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IVBSAXLocator*)oLocator /*[VT_USERDEFINED:1]*/;
  _args[2] = strErrorMessage /*[VT_BSTR:1]*/;
  _args[3] = nErrorCode /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXErrorHandlerDispT<T>::fatalError(Msxml3::IVBSAXLocator* oLocator/*[in]*/, 
                                       BSTR* strErrorMessage/*[in,out]*/, long nErrorCode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fatalError"), DISPID(1340));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IVBSAXLocator*)oLocator /*[VT_USERDEFINED:1]*/;
  _args[2] = strErrorMessage /*[VT_BSTR:1]*/;
  _args[3] = nErrorCode /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXErrorHandlerDispT<T>::ignorableWarning(Msxml3::IVBSAXLocator* oLocator/*[in]*/, 
                                             BSTR* strErrorMessage/*[in,out]*/, 
                                             long nErrorCode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ignorableWarning"), DISPID(1341));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IVBSAXLocator*)oLocator /*[VT_USERDEFINED:1]*/;
  _args[2] = strErrorMessage /*[VT_BSTR:1]*/;
  _args[3] = nErrorCode /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IVBSAXXMLFilter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1299EB1B-5B88-433E-82DE-82CA75AD4E04}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLFilterDispT<T>::get_parent(Msxml3::IVBSAXXMLReader** oReader/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parent"), DISPID(1309));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IVBSAXXMLReader**)oReader /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IVBSAXXMLReader* __fastcall
IVBSAXXMLFilterDispT<T>::get_parent(void)
{
  Msxml3::IVBSAXXMLReader* oReader;
  this->get_parent((Msxml3::IVBSAXXMLReader**)&oReader);
  return oReader;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXXMLFilterDispT<T>::_set_parent(Msxml3::IVBSAXXMLReader* oReader/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("parent"), DISPID(1309));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IVBSAXXMLReader*)oReader /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IVBSAXLexicalHandler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {032AAC35-8C0E-4D9D-979F-E3B702935576}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXLexicalHandlerDispT<T>::startDTD(BSTR* strName/*[in,out]*/, BSTR* strPublicId/*[in,out]*/, 
                                       BSTR* strSystemId/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("startDTD"), DISPID(1358));
  TAutoArgs<3> _args;
  _args[1] = strName /*[VT_BSTR:1]*/;
  _args[2] = strPublicId /*[VT_BSTR:1]*/;
  _args[3] = strSystemId /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXLexicalHandlerDispT<T>::endDTD()
{
  _TDispID _dispid(*this, OLETEXT("endDTD"), DISPID(1359));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXLexicalHandlerDispT<T>::startEntity(BSTR* strName/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("startEntity"), DISPID(1360));
  TAutoArgs<1> _args;
  _args[1] = strName /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXLexicalHandlerDispT<T>::endEntity(BSTR* strName/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("endEntity"), DISPID(1361));
  TAutoArgs<1> _args;
  _args[1] = strName /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXLexicalHandlerDispT<T>::startCDATA()
{
  _TDispID _dispid(*this, OLETEXT("startCDATA"), DISPID(1362));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXLexicalHandlerDispT<T>::endCDATA()
{
  _TDispID _dispid(*this, OLETEXT("endCDATA"), DISPID(1363));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXLexicalHandlerDispT<T>::comment(BSTR* strChars/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("comment"), DISPID(1364));
  TAutoArgs<1> _args;
  _args[1] = strChars /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IVBSAXDeclHandler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E8917260-7579-4BE1-B5DD-7AFBFA6F077B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXDeclHandlerDispT<T>::elementDecl(BSTR* strName/*[in,out]*/, BSTR* strModel/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("elementDecl"), DISPID(1367));
  TAutoArgs<2> _args;
  _args[1] = strName /*[VT_BSTR:1]*/;
  _args[2] = strModel /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXDeclHandlerDispT<T>::attributeDecl(BSTR* strElementName/*[in,out]*/, 
                                         BSTR* strAttributeName/*[in,out]*/, 
                                         BSTR* strType/*[in,out]*/, 
                                         BSTR* strValueDefault/*[in,out]*/, 
                                         BSTR* strValue/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributeDecl"), DISPID(1368));
  TAutoArgs<5> _args;
  _args[1] = strElementName /*[VT_BSTR:1]*/;
  _args[2] = strAttributeName /*[VT_BSTR:1]*/;
  _args[3] = strType /*[VT_BSTR:1]*/;
  _args[4] = strValueDefault /*[VT_BSTR:1]*/;
  _args[5] = strValue /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXDeclHandlerDispT<T>::internalEntityDecl(BSTR* strName/*[in,out]*/, BSTR* strValue/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("internalEntityDecl"), DISPID(1369));
  TAutoArgs<2> _args;
  _args[1] = strName /*[VT_BSTR:1]*/;
  _args[2] = strValue /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBSAXDeclHandlerDispT<T>::externalEntityDecl(BSTR* strName/*[in,out]*/, 
                                              BSTR* strPublicId/*[in,out]*/, 
                                              BSTR* strSystemId/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("externalEntityDecl"), DISPID(1370));
  TAutoArgs<3> _args;
  _args[1] = strName /*[VT_BSTR:1]*/;
  _args[2] = strPublicId /*[VT_BSTR:1]*/;
  _args[3] = strSystemId /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIMXWriter
// Interface: IMXWriter
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::set_output(VARIANT varDestination/*[in]*/)
{
  return (*this)->set_output(varDestination);
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::get_output(VARIANT* varDestination/*[out,retval]*/)
{
  return (*this)->get_output(varDestination);
}

template <class T> VARIANT __fastcall
TCOMIMXWriterT<T>::get_output(void)
{
  VARIANT varDestination;
  OLECHECK(this->get_output((VARIANT*)&varDestination));
  return varDestination;
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::set_encoding(BSTR strEncoding/*[in]*/)
{
  return (*this)->set_encoding(strEncoding);
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::get_encoding(BSTR* strEncoding/*[out,retval]*/)
{
  return (*this)->get_encoding(strEncoding);
}

template <class T> BSTR __fastcall
TCOMIMXWriterT<T>::get_encoding(void)
{
  BSTR strEncoding = 0;
  OLECHECK(this->get_encoding((BSTR*)&strEncoding));
  return strEncoding;
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::set_byteOrderMark(VARIANT_BOOL fWriteByteOrderMark/*[in]*/)
{
  return (*this)->set_byteOrderMark(fWriteByteOrderMark);
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::set_byteOrderMark(TOLEBOOL fWriteByteOrderMark/*[in]*/)
{
  return (*this)->set_byteOrderMark(VARIANT_BOOL)fWriteByteOrderMark);
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::get_byteOrderMark(VARIANT_BOOL* fWriteByteOrderMark/*[out,retval]*/)
{
  return (*this)->get_byteOrderMark(fWriteByteOrderMark);
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::get_byteOrderMark(TOLEBOOL* fWriteByteOrderMark/*[out,retval]*/)
{
  return (*this)->get_byteOrderMark(VARIANT_BOOL*)fWriteByteOrderMark);
}

template <class T> TOLEBOOL __fastcall
TCOMIMXWriterT<T>::get_byteOrderMark(void)
{
  VARIANT_BOOL fWriteByteOrderMark;
  OLECHECK(this->get_byteOrderMark((VARIANT_BOOL*)&fWriteByteOrderMark));
  return (TOLEBOOL)fWriteByteOrderMark;
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::set_indent(VARIANT_BOOL fIndentMode/*[in]*/)
{
  return (*this)->set_indent(fIndentMode);
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::set_indent(TOLEBOOL fIndentMode/*[in]*/)
{
  return (*this)->set_indent(VARIANT_BOOL)fIndentMode);
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::get_indent(VARIANT_BOOL* fIndentMode/*[out,retval]*/)
{
  return (*this)->get_indent(fIndentMode);
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::get_indent(TOLEBOOL* fIndentMode/*[out,retval]*/)
{
  return (*this)->get_indent(VARIANT_BOOL*)fIndentMode);
}

template <class T> TOLEBOOL __fastcall
TCOMIMXWriterT<T>::get_indent(void)
{
  VARIANT_BOOL fIndentMode;
  OLECHECK(this->get_indent((VARIANT_BOOL*)&fIndentMode));
  return (TOLEBOOL)fIndentMode;
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::set_standalone(VARIANT_BOOL fValue/*[in]*/)
{
  return (*this)->set_standalone(fValue);
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::set_standalone(TOLEBOOL fValue/*[in]*/)
{
  return (*this)->set_standalone(VARIANT_BOOL)fValue);
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::get_standalone(VARIANT_BOOL* fValue/*[out,retval]*/)
{
  return (*this)->get_standalone(fValue);
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::get_standalone(TOLEBOOL* fValue/*[out,retval]*/)
{
  return (*this)->get_standalone(VARIANT_BOOL*)fValue);
}

template <class T> TOLEBOOL __fastcall
TCOMIMXWriterT<T>::get_standalone(void)
{
  VARIANT_BOOL fValue;
  OLECHECK(this->get_standalone((VARIANT_BOOL*)&fValue));
  return (TOLEBOOL)fValue;
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::set_omitXMLDeclaration(VARIANT_BOOL fValue/*[in]*/)
{
  return (*this)->set_omitXMLDeclaration(fValue);
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::set_omitXMLDeclaration(TOLEBOOL fValue/*[in]*/)
{
  return (*this)->set_omitXMLDeclaration(VARIANT_BOOL)fValue);
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::get_omitXMLDeclaration(VARIANT_BOOL* fValue/*[out,retval]*/)
{
  return (*this)->get_omitXMLDeclaration(fValue);
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::get_omitXMLDeclaration(TOLEBOOL* fValue/*[out,retval]*/)
{
  return (*this)->get_omitXMLDeclaration(VARIANT_BOOL*)fValue);
}

template <class T> TOLEBOOL __fastcall
TCOMIMXWriterT<T>::get_omitXMLDeclaration(void)
{
  VARIANT_BOOL fValue;
  OLECHECK(this->get_omitXMLDeclaration((VARIANT_BOOL*)&fValue));
  return (TOLEBOOL)fValue;
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::set_version(BSTR strVersion/*[in]*/)
{
  return (*this)->set_version(strVersion);
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::get_version(BSTR* strVersion/*[out,retval]*/)
{
  return (*this)->get_version(strVersion);
}

template <class T> BSTR __fastcall
TCOMIMXWriterT<T>::get_version(void)
{
  BSTR strVersion = 0;
  OLECHECK(this->get_version((BSTR*)&strVersion));
  return strVersion;
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::set_disableOutputEscaping(VARIANT_BOOL fValue/*[in]*/)
{
  return (*this)->set_disableOutputEscaping(fValue);
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::set_disableOutputEscaping(TOLEBOOL fValue/*[in]*/)
{
  return (*this)->set_disableOutputEscaping(VARIANT_BOOL)fValue);
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::get_disableOutputEscaping(VARIANT_BOOL* fValue/*[out,retval]*/)
{
  return (*this)->get_disableOutputEscaping(fValue);
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::get_disableOutputEscaping(TOLEBOOL* fValue/*[out,retval]*/)
{
  return (*this)->get_disableOutputEscaping(VARIANT_BOOL*)fValue);
}

template <class T> TOLEBOOL __fastcall
TCOMIMXWriterT<T>::get_disableOutputEscaping(void)
{
  VARIANT_BOOL fValue;
  OLECHECK(this->get_disableOutputEscaping((VARIANT_BOOL*)&fValue));
  return (TOLEBOOL)fValue;
}

template <class T> HRESULT __fastcall
TCOMIMXWriterT<T>::flush(void)
{
  return (*this)->flush();
}

// *********************************************************************//
// DispIntf:  IMXWriter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4D7FF4BA-1565-4EA8-94E1-6E724A46F98D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXWriterDispT<T>::set_output(VARIANT varDestination/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("output"), DISPID(1385));
  TAutoArgs<1> _args;
  _args[1] = varDestination /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXWriterDispT<T>::get_output(VARIANT* varDestination/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("output"), DISPID(1385));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(varDestination /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMXWriterDispT<T>::get_output(void)
{
  VARIANT varDestination;
  this->get_output((VARIANT*)&varDestination);
  return varDestination;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXWriterDispT<T>::set_encoding(BSTR strEncoding/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("encoding"), DISPID(1387));
  TAutoArgs<1> _args;
  _args[1] = strEncoding /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXWriterDispT<T>::get_encoding(BSTR* strEncoding/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("encoding"), DISPID(1387));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(strEncoding /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMXWriterDispT<T>::get_encoding(void)
{
  BSTR strEncoding;
  this->get_encoding((BSTR*)&strEncoding);
  return strEncoding;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXWriterDispT<T>::set_byteOrderMark(VARIANT_BOOL fWriteByteOrderMark/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("byteOrderMark"), DISPID(1388));
  TAutoArgs<1> _args;
  _args[1] = fWriteByteOrderMark /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXWriterDispT<T>::get_byteOrderMark(VARIANT_BOOL* fWriteByteOrderMark/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("byteOrderMark"), DISPID(1388));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fWriteByteOrderMark /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMXWriterDispT<T>::get_byteOrderMark(void)
{
  VARIANT_BOOL fWriteByteOrderMark;
  this->get_byteOrderMark((VARIANT_BOOL*)&fWriteByteOrderMark);
  return fWriteByteOrderMark;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXWriterDispT<T>::set_indent(VARIANT_BOOL fIndentMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("indent"), DISPID(1389));
  TAutoArgs<1> _args;
  _args[1] = fIndentMode /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXWriterDispT<T>::get_indent(VARIANT_BOOL* fIndentMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("indent"), DISPID(1389));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fIndentMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMXWriterDispT<T>::get_indent(void)
{
  VARIANT_BOOL fIndentMode;
  this->get_indent((VARIANT_BOOL*)&fIndentMode);
  return fIndentMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXWriterDispT<T>::set_standalone(VARIANT_BOOL fValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("standalone"), DISPID(1390));
  TAutoArgs<1> _args;
  _args[1] = fValue /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXWriterDispT<T>::get_standalone(VARIANT_BOOL* fValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("standalone"), DISPID(1390));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fValue /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMXWriterDispT<T>::get_standalone(void)
{
  VARIANT_BOOL fValue;
  this->get_standalone((VARIANT_BOOL*)&fValue);
  return fValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXWriterDispT<T>::set_omitXMLDeclaration(VARIANT_BOOL fValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("omitXMLDeclaration"), DISPID(1391));
  TAutoArgs<1> _args;
  _args[1] = fValue /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXWriterDispT<T>::get_omitXMLDeclaration(VARIANT_BOOL* fValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("omitXMLDeclaration"), DISPID(1391));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fValue /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMXWriterDispT<T>::get_omitXMLDeclaration(void)
{
  VARIANT_BOOL fValue;
  this->get_omitXMLDeclaration((VARIANT_BOOL*)&fValue);
  return fValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXWriterDispT<T>::set_version(BSTR strVersion/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("version"), DISPID(1392));
  TAutoArgs<1> _args;
  _args[1] = strVersion /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXWriterDispT<T>::get_version(BSTR* strVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("version"), DISPID(1392));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(strVersion /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMXWriterDispT<T>::get_version(void)
{
  BSTR strVersion;
  this->get_version((BSTR*)&strVersion);
  return strVersion;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXWriterDispT<T>::set_disableOutputEscaping(VARIANT_BOOL fValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("disableOutputEscaping"), DISPID(1393));
  TAutoArgs<1> _args;
  _args[1] = fValue /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXWriterDispT<T>::get_disableOutputEscaping(VARIANT_BOOL* fValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("disableOutputEscaping"), DISPID(1393));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fValue /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMXWriterDispT<T>::get_disableOutputEscaping(void)
{
  VARIANT_BOOL fValue;
  this->get_disableOutputEscaping((VARIANT_BOOL*)&fValue);
  return fValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXWriterDispT<T>::flush()
{
  _TDispID _dispid(*this, OLETEXT("flush"), DISPID(1394));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIMXAttributes
// Interface: IMXAttributes
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMXAttributesT<T>::addAttribute(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/, 
                                    BSTR strQName/*[in]*/, BSTR strType/*[in]*/, 
                                    BSTR strValue/*[in]*/)
{
  return (*this)->addAttribute(strURI, strLocalName, strQName, strType, strValue);
}

template <class T> HRESULT __fastcall
TCOMIMXAttributesT<T>::addAttributeFromIndex(VARIANT varAtts/*[in]*/, int nIndex/*[in]*/)
{
  return (*this)->addAttributeFromIndex(varAtts, nIndex);
}

template <class T> HRESULT __fastcall
TCOMIMXAttributesT<T>::clear(void)
{
  return (*this)->clear();
}

template <class T> HRESULT __fastcall
TCOMIMXAttributesT<T>::removeAttribute(int nIndex/*[in]*/)
{
  return (*this)->removeAttribute(nIndex);
}

template <class T> HRESULT __fastcall
TCOMIMXAttributesT<T>::setAttribute(int nIndex/*[in]*/, BSTR strURI/*[in]*/, 
                                    BSTR strLocalName/*[in]*/, BSTR strQName/*[in]*/, 
                                    BSTR strType/*[in]*/, BSTR strValue/*[in]*/)
{
  return (*this)->setAttribute(nIndex, strURI, strLocalName, strQName, strType, strValue);
}

template <class T> HRESULT __fastcall
TCOMIMXAttributesT<T>::setAttributes(VARIANT varAtts/*[in]*/)
{
  return (*this)->setAttributes(varAtts);
}

template <class T> HRESULT __fastcall
TCOMIMXAttributesT<T>::setLocalName(int nIndex/*[in]*/, BSTR strLocalName/*[in]*/)
{
  return (*this)->setLocalName(nIndex, strLocalName);
}

template <class T> HRESULT __fastcall
TCOMIMXAttributesT<T>::setQName(int nIndex/*[in]*/, BSTR strQName/*[in]*/)
{
  return (*this)->setQName(nIndex, strQName);
}

template <class T> HRESULT __fastcall
TCOMIMXAttributesT<T>::setType(int nIndex/*[in]*/, BSTR strType/*[in]*/)
{
  return (*this)->setType(nIndex, strType);
}

template <class T> HRESULT __fastcall
TCOMIMXAttributesT<T>::setURI(int nIndex/*[in]*/, BSTR strURI/*[in]*/)
{
  return (*this)->setURI(nIndex, strURI);
}

template <class T> HRESULT __fastcall
TCOMIMXAttributesT<T>::setValue(int nIndex/*[in]*/, BSTR strValue/*[in]*/)
{
  return (*this)->setValue(nIndex, strValue);
}

// *********************************************************************//
// DispIntf:  IMXAttributes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F10D27CC-3EC0-415C-8ED8-77AB1C5E7262}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXAttributesDispT<T>::addAttribute(BSTR strURI/*[in]*/, BSTR strLocalName/*[in]*/, 
                                    BSTR strQName/*[in]*/, BSTR strType/*[in]*/, 
                                    BSTR strValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("addAttribute"), DISPID(1373));
  TAutoArgs<5> _args;
  _args[1] = strURI /*[VT_BSTR:0]*/;
  _args[2] = strLocalName /*[VT_BSTR:0]*/;
  _args[3] = strQName /*[VT_BSTR:0]*/;
  _args[4] = strType /*[VT_BSTR:0]*/;
  _args[5] = strValue /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXAttributesDispT<T>::addAttributeFromIndex(VARIANT varAtts/*[in]*/, int nIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("addAttributeFromIndex"), DISPID(1383));
  TAutoArgs<2> _args;
  _args[1] = varAtts /*[VT_VARIANT:0]*/;
  _args[2] = nIndex /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXAttributesDispT<T>::clear()
{
  _TDispID _dispid(*this, OLETEXT("clear"), DISPID(1374));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXAttributesDispT<T>::removeAttribute(int nIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeAttribute"), DISPID(1375));
  TAutoArgs<1> _args;
  _args[1] = nIndex /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXAttributesDispT<T>::setAttribute(int nIndex/*[in]*/, BSTR strURI/*[in]*/, 
                                    BSTR strLocalName/*[in]*/, BSTR strQName/*[in]*/, 
                                    BSTR strType/*[in]*/, BSTR strValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setAttribute"), DISPID(1376));
  TAutoArgs<6> _args;
  _args[1] = nIndex /*[VT_INT:0]*/;
  _args[2] = strURI /*[VT_BSTR:0]*/;
  _args[3] = strLocalName /*[VT_BSTR:0]*/;
  _args[4] = strQName /*[VT_BSTR:0]*/;
  _args[5] = strType /*[VT_BSTR:0]*/;
  _args[6] = strValue /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXAttributesDispT<T>::setAttributes(VARIANT varAtts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setAttributes"), DISPID(1377));
  TAutoArgs<1> _args;
  _args[1] = varAtts /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXAttributesDispT<T>::setLocalName(int nIndex/*[in]*/, BSTR strLocalName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setLocalName"), DISPID(1378));
  TAutoArgs<2> _args;
  _args[1] = nIndex /*[VT_INT:0]*/;
  _args[2] = strLocalName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXAttributesDispT<T>::setQName(int nIndex/*[in]*/, BSTR strQName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setQName"), DISPID(1379));
  TAutoArgs<2> _args;
  _args[1] = nIndex /*[VT_INT:0]*/;
  _args[2] = strQName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXAttributesDispT<T>::setType(int nIndex/*[in]*/, BSTR strType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setType"), DISPID(1380));
  TAutoArgs<2> _args;
  _args[1] = nIndex /*[VT_INT:0]*/;
  _args[2] = strType /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXAttributesDispT<T>::setURI(int nIndex/*[in]*/, BSTR strURI/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setURI"), DISPID(1381));
  TAutoArgs<2> _args;
  _args[1] = nIndex /*[VT_INT:0]*/;
  _args[2] = strURI /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXAttributesDispT<T>::setValue(int nIndex/*[in]*/, BSTR strValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setValue"), DISPID(1382));
  TAutoArgs<2> _args;
  _args[1] = nIndex /*[VT_INT:0]*/;
  _args[2] = strValue /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMXReaderControl
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {808F4E35-8D5A-4FBE-8466-33A41279ED30}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXReaderControlDispT<T>::abort()
{
  _TDispID _dispid(*this, OLETEXT("abort"), DISPID(1398));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXReaderControlDispT<T>::resume()
{
  _TDispID _dispid(*this, OLETEXT("resume"), DISPID(1399));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMXReaderControlDispT<T>::suspend()
{
  _TDispID _dispid(*this, OLETEXT("suspend"), DISPID(1400));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IXMLElementCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {65725580-9B5D-11D0-9BFE-00C04FC99C8E}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElementCollectionDispT<T>::set_length(long p/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(65537));
  TAutoArgs<1> _args;
  _args[1] = p /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElementCollectionDispT<T>::get_length(long* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(65537));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLElementCollectionDispT<T>::get_length(void)
{
  long p;
  this->get_length((long*)&p);
  return p;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElementCollectionDispT<T>::get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_newEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IXMLElementCollectionDispT<T>::get__newEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__newEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElementCollectionDispT<T>::item(VARIANT var1/*[in,opt]*/, VARIANT var2/*[in,opt]*/, 
                                    LPDISPATCH* ppDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("item"), DISPID(65539));
  TAutoArgs<2> _args;
  _args[1] = var1 /*[VT_VARIANT:0]*/;
  _args[2] = var2 /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppDisp /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IXMLElementCollectionDispT<T>::item(VARIANT var1/*[in,opt]*/, VARIANT var2/*[in,opt]*/)
{
  LPDISPATCH ppDisp;
  this->item(var1, var2, (LPDISPATCH*)&ppDisp);
  return ppDisp;
}

// *********************************************************************//
// DispIntf:  IXMLDocument
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F52E2B61-18A1-11D1-B105-00805F49916B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDocumentDispT<T>::get_root(Msxml3::IXMLElement** p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("root"), DISPID(65637));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLElement**)p /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLElement* __fastcall
IXMLDocumentDispT<T>::get_root(void)
{
  Msxml3::IXMLElement* p;
  this->get_root((Msxml3::IXMLElement**)&p);
  return p;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDocumentDispT<T>::get_fileSize(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fileSize"), DISPID(65638));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDocumentDispT<T>::get_fileSize(void)
{
  BSTR p;
  this->get_fileSize((BSTR*)&p);
  return p;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDocumentDispT<T>::get_fileModifiedDate(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fileModifiedDate"), DISPID(65639));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDocumentDispT<T>::get_fileModifiedDate(void)
{
  BSTR p;
  this->get_fileModifiedDate((BSTR*)&p);
  return p;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDocumentDispT<T>::get_fileUpdatedDate(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fileUpdatedDate"), DISPID(65640));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDocumentDispT<T>::get_fileUpdatedDate(void)
{
  BSTR p;
  this->get_fileUpdatedDate((BSTR*)&p);
  return p;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDocumentDispT<T>::get_url(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("url"), DISPID(65641));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDocumentDispT<T>::get_url(void)
{
  BSTR p;
  this->get_url((BSTR*)&p);
  return p;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDocumentDispT<T>::set_url(BSTR p/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("url"), DISPID(65641));
  TAutoArgs<1> _args;
  _args[1] = p /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDocumentDispT<T>::get_mimeType(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mimeType"), DISPID(65642));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDocumentDispT<T>::get_mimeType(void)
{
  BSTR p;
  this->get_mimeType((BSTR*)&p);
  return p;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDocumentDispT<T>::get_readyState(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("readyState"), DISPID(65643));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDocumentDispT<T>::get_readyState(void)
{
  long pl;
  this->get_readyState((long*)&pl);
  return pl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDocumentDispT<T>::get_charset(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("charset"), DISPID(65645));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDocumentDispT<T>::get_charset(void)
{
  BSTR p;
  this->get_charset((BSTR*)&p);
  return p;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDocumentDispT<T>::set_charset(BSTR p/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("charset"), DISPID(65645));
  TAutoArgs<1> _args;
  _args[1] = p /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDocumentDispT<T>::get_version(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("version"), DISPID(65646));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDocumentDispT<T>::get_version(void)
{
  BSTR p;
  this->get_version((BSTR*)&p);
  return p;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDocumentDispT<T>::get_doctype(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("doctype"), DISPID(65647));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDocumentDispT<T>::get_doctype(void)
{
  BSTR p;
  this->get_doctype((BSTR*)&p);
  return p;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDocumentDispT<T>::get_dtdURL(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dtdURL"), DISPID(65648));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDocumentDispT<T>::get_dtdURL(void)
{
  BSTR p;
  this->get_dtdURL((BSTR*)&p);
  return p;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDocumentDispT<T>::createElement(VARIANT vType/*[in]*/, VARIANT var1/*[in,opt]*/, 
                                    Msxml3::IXMLElement** ppElem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createElement"), DISPID(65644));
  TAutoArgs<2> _args;
  _args[1] = vType /*[VT_VARIANT:0]*/;
  _args[2] = var1 /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLElement**)ppElem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLElement* __fastcall
IXMLDocumentDispT<T>::createElement(VARIANT vType/*[in]*/, VARIANT var1/*[in,opt]*/)
{
  Msxml3::IXMLElement* ppElem;
  this->createElement(vType, var1, (Msxml3::IXMLElement**)&ppElem);
  return ppElem;
}

// *********************************************************************//
// DispIntf:  IXMLElement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3F7F31AC-E15F-11D0-9C25-00C04FC99C8E}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElementDispT<T>::get_tagName(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("tagName"), DISPID(65737));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLElementDispT<T>::get_tagName(void)
{
  BSTR p;
  this->get_tagName((BSTR*)&p);
  return p;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElementDispT<T>::set_tagName(BSTR p/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("tagName"), DISPID(65737));
  TAutoArgs<1> _args;
  _args[1] = p /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElementDispT<T>::get_parent(Msxml3::IXMLElement** ppParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parent"), DISPID(65738));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLElement**)ppParent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLElement* __fastcall
IXMLElementDispT<T>::get_parent(void)
{
  Msxml3::IXMLElement* ppParent;
  this->get_parent((Msxml3::IXMLElement**)&ppParent);
  return ppParent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElementDispT<T>::setAttribute(BSTR strPropertyName/*[in]*/, VARIANT PropertyValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setAttribute"), DISPID(65739));
  TAutoArgs<2> _args;
  _args[1] = strPropertyName /*[VT_BSTR:0]*/;
  _args[2] = PropertyValue /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElementDispT<T>::getAttribute(BSTR strPropertyName/*[in]*/, 
                                  VARIANT* PropertyValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAttribute"), DISPID(65740));
  TAutoArgs<1> _args;
  _args[1] = strPropertyName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(PropertyValue /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLElementDispT<T>::getAttribute(BSTR strPropertyName/*[in]*/)
{
  VARIANT PropertyValue;
  this->getAttribute(strPropertyName, (VARIANT*)&PropertyValue);
  return PropertyValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElementDispT<T>::removeAttribute(BSTR strPropertyName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeAttribute"), DISPID(65741));
  TAutoArgs<1> _args;
  _args[1] = strPropertyName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElementDispT<T>::get_children(Msxml3::IXMLElementCollection** pp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("children"), DISPID(65742));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLElementCollection**)pp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLElementCollection* __fastcall
IXMLElementDispT<T>::get_children(void)
{
  Msxml3::IXMLElementCollection* pp;
  this->get_children((Msxml3::IXMLElementCollection**)&pp);
  return pp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElementDispT<T>::get_type(long* plType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("type"), DISPID(65743));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLElementDispT<T>::get_type(void)
{
  long plType;
  this->get_type((long*)&plType);
  return plType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElementDispT<T>::get_text(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(65744));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLElementDispT<T>::get_text(void)
{
  BSTR p;
  this->get_text((BSTR*)&p);
  return p;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElementDispT<T>::set_text(BSTR p/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(65744));
  TAutoArgs<1> _args;
  _args[1] = p /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElementDispT<T>::addChild(Msxml3::IXMLElement* pChildElem/*[in]*/, long lIndex, long lReserved)
{
  _TDispID _dispid(*this, OLETEXT("addChild"), DISPID(65745));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLElement*)pChildElem /*[VT_USERDEFINED:1]*/;
  _args[2] = lIndex /*[VT_I4:0]*/;
  _args[3] = lReserved /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElementDispT<T>::removeChild(Msxml3::IXMLElement* pChildElem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(65746));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLElement*)pChildElem /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLElement2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2B8DE2FF-8D2D-11D1-B2FC-00C04FD915A9}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElement2DispT<T>::get_tagName(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("tagName"), DISPID(65737));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLElement2DispT<T>::get_tagName(void)
{
  BSTR p;
  this->get_tagName((BSTR*)&p);
  return p;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElement2DispT<T>::set_tagName(BSTR p/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("tagName"), DISPID(65737));
  TAutoArgs<1> _args;
  _args[1] = p /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElement2DispT<T>::get_parent(Msxml3::IXMLElement2** ppParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parent"), DISPID(65738));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLElement2**)ppParent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLElement2* __fastcall
IXMLElement2DispT<T>::get_parent(void)
{
  Msxml3::IXMLElement2* ppParent;
  this->get_parent((Msxml3::IXMLElement2**)&ppParent);
  return ppParent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElement2DispT<T>::setAttribute(BSTR strPropertyName/*[in]*/, VARIANT PropertyValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setAttribute"), DISPID(65739));
  TAutoArgs<2> _args;
  _args[1] = strPropertyName /*[VT_BSTR:0]*/;
  _args[2] = PropertyValue /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElement2DispT<T>::getAttribute(BSTR strPropertyName/*[in]*/, 
                                   VARIANT* PropertyValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAttribute"), DISPID(65740));
  TAutoArgs<1> _args;
  _args[1] = strPropertyName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(PropertyValue /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLElement2DispT<T>::getAttribute(BSTR strPropertyName/*[in]*/)
{
  VARIANT PropertyValue;
  this->getAttribute(strPropertyName, (VARIANT*)&PropertyValue);
  return PropertyValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElement2DispT<T>::removeAttribute(BSTR strPropertyName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeAttribute"), DISPID(65741));
  TAutoArgs<1> _args;
  _args[1] = strPropertyName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElement2DispT<T>::get_children(Msxml3::IXMLElementCollection** pp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("children"), DISPID(65742));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLElementCollection**)pp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLElementCollection* __fastcall
IXMLElement2DispT<T>::get_children(void)
{
  Msxml3::IXMLElementCollection* pp;
  this->get_children((Msxml3::IXMLElementCollection**)&pp);
  return pp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElement2DispT<T>::get_type(long* plType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("type"), DISPID(65743));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLElement2DispT<T>::get_type(void)
{
  long plType;
  this->get_type((long*)&plType);
  return plType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElement2DispT<T>::get_text(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(65744));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLElement2DispT<T>::get_text(void)
{
  BSTR p;
  this->get_text((BSTR*)&p);
  return p;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElement2DispT<T>::set_text(BSTR p/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(65744));
  TAutoArgs<1> _args;
  _args[1] = p /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElement2DispT<T>::addChild(Msxml3::IXMLElement2* pChildElem/*[in]*/, long lIndex, long lReserved)
{
  _TDispID _dispid(*this, OLETEXT("addChild"), DISPID(65745));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLElement2*)pChildElem /*[VT_USERDEFINED:1]*/;
  _args[2] = lIndex /*[VT_I4:0]*/;
  _args[3] = lReserved /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElement2DispT<T>::removeChild(Msxml3::IXMLElement2* pChildElem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(65746));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLElement2*)pChildElem /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLElement2DispT<T>::get_attributes(Msxml3::IXMLElementCollection** pp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(65747));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLElementCollection**)pp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLElementCollection* __fastcall
IXMLElement2DispT<T>::get_attributes(void)
{
  Msxml3::IXMLElementCollection* pp;
  this->get_attributes((Msxml3::IXMLElementCollection**)&pp);
  return pp;
}

// *********************************************************************//
// DispIntf:  IXMLAttribute
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D4D4A0FC-3B73-11D1-B2B4-00C04FB92596}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLAttributeDispT<T>::get_name(BSTR* n/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("name"), DISPID(65937));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(n /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLAttributeDispT<T>::get_name(void)
{
  BSTR n;
  this->get_name((BSTR*)&n);
  return n;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLAttributeDispT<T>::get_value(BSTR* v/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("value"), DISPID(65938));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(v /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLAttributeDispT<T>::get_value(void)
{
  BSTR v;
  this->get_value((BSTR*)&v);
  return v;
}

// *********************************************************************//
// DispIntf:  IXMLDOMSelection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AA634FC7-5888-44A7-A257-3A47150D3A0E}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSelectionDispT<T>::get_expr(BSTR* expression/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("expr"), DISPID(81));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(expression /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMSelectionDispT<T>::get_expr(void)
{
  BSTR expression;
  this->get_expr((BSTR*)&expression);
  return expression;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSelectionDispT<T>::set_expr(BSTR expression/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("expr"), DISPID(81));
  TAutoArgs<1> _args;
  _args[1] = expression /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSelectionDispT<T>::get_context(Msxml3::IXMLDOMNode** ppNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("context"), DISPID(82));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)ppNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMSelectionDispT<T>::get_context(void)
{
  Msxml3::IXMLDOMNode* ppNode;
  this->get_context((Msxml3::IXMLDOMNode**)&ppNode);
  return ppNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSelectionDispT<T>::_set_context(Msxml3::IXMLDOMNode* ppNode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("context"), DISPID(82));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)ppNode /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSelectionDispT<T>::peekNode(Msxml3::IXMLDOMNode** ppNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("peekNode"), DISPID(83));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)ppNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMSelectionDispT<T>::peekNode(void)
{
  Msxml3::IXMLDOMNode* ppNode;
  this->peekNode((Msxml3::IXMLDOMNode**)&ppNode);
  return ppNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSelectionDispT<T>::matches(Msxml3::IXMLDOMNode* pNode/*[in]*/, 
                                  Msxml3::IXMLDOMNode** ppNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("matches"), DISPID(84));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMNode*)pNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)ppNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMSelectionDispT<T>::matches(Msxml3::IXMLDOMNode* pNode/*[in]*/)
{
  Msxml3::IXMLDOMNode* ppNode;
  this->matches(pNode, (Msxml3::IXMLDOMNode**)&ppNode);
  return ppNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSelectionDispT<T>::removeNext(Msxml3::IXMLDOMNode** ppNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeNext"), DISPID(85));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)ppNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMSelectionDispT<T>::removeNext(void)
{
  Msxml3::IXMLDOMNode* ppNode;
  this->removeNext((Msxml3::IXMLDOMNode**)&ppNode);
  return ppNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSelectionDispT<T>::removeAll()
{
  _TDispID _dispid(*this, OLETEXT("removeAll"), DISPID(86));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSelectionDispT<T>::clone(Msxml3::IXMLDOMSelection** ppNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("clone"), DISPID(87));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMSelection**)ppNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMSelection* __fastcall
IXMLDOMSelectionDispT<T>::clone(void)
{
  Msxml3::IXMLDOMSelection* ppNode;
  this->clone((Msxml3::IXMLDOMSelection**)&ppNode);
  return ppNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSelectionDispT<T>::getProperty(BSTR name/*[in]*/, VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getProperty"), DISPID(88));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLDOMSelectionDispT<T>::getProperty(BSTR name/*[in]*/)
{
  VARIANT value;
  this->getProperty(name, (VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSelectionDispT<T>::setProperty(BSTR name/*[in]*/, VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setProperty"), DISPID(89));
  TAutoArgs<2> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  _args[2] = value /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSelectionDispT<T>::get_item(long index/*[in]*/, 
                                   Msxml3::IXMLDOMNode** listItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)listItem /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMSelectionDispT<T>::get_item(long index/*[in]*/)
{
  Msxml3::IXMLDOMNode* listItem;
  this->get_item(index, (Msxml3::IXMLDOMNode**)&listItem);
  return listItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSelectionDispT<T>::get_length(long* listLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(74));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(listLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMSelectionDispT<T>::get_length(void)
{
  long listLength;
  this->get_length((long*)&listLength);
  return listLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSelectionDispT<T>::nextNode(Msxml3::IXMLDOMNode** nextItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextNode"), DISPID(76));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMNode**)nextItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMNode* __fastcall
IXMLDOMSelectionDispT<T>::nextNode(void)
{
  Msxml3::IXMLDOMNode* nextItem;
  this->nextNode((Msxml3::IXMLDOMNode**)&nextItem);
  return nextItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSelectionDispT<T>::reset()
{
  _TDispID _dispid(*this, OLETEXT("reset"), DISPID(77));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLDOMSelectionDispT<T>::get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_newEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IXMLDOMSelectionDispT<T>::get__newEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__newEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

// *********************************************************************//
// DispIntf:  XMLDOMDocumentEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {3EFAA427-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
XMLDOMDocumentEventsDispT<T>::ondataavailable()
{
  _TDispID _dispid(/* ondataavailable */ DISPID(198));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
XMLDOMDocumentEventsDispT<T>::onreadystatechange()
{
  _TDispID _dispid(/* onreadystatechange */ DISPID(-609));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIDSOControl
// Interface: IDSOControl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIDSOControlT<T>::get_XMLDocument(Msxml3::IXMLDOMDocument** ppDoc/*[out,retval]*/)
{
  return (*this)->get_XMLDocument(ppDoc);
}

template <class T> HRESULT __fastcall
TCOMIDSOControlT<T>::get_XMLDocument(Msxml3::IXMLDOMDocumentPtr* ppDoc/*[out,retval]*/)
{
  return (*this)->get_XMLDocument(IXMLDOMDocument**)ppDoc);
}

template <class T> Msxml3::IXMLDOMDocumentPtr __fastcall
TCOMIDSOControlT<T>::get_XMLDocument(void)
{
  Msxml3::IXMLDOMDocument* ppDoc;
  OLECHECK(this->get_XMLDocument((Msxml3::IXMLDOMDocument**)&ppDoc));
  return (Msxml3::IXMLDOMDocumentPtr)ppDoc;
}

template <class T> HRESULT __fastcall
TCOMIDSOControlT<T>::set_XMLDocument(Msxml3::IXMLDOMDocument* ppDoc/*[in]*/)
{
  return (*this)->set_XMLDocument(ppDoc);
}

template <class T> HRESULT __fastcall
TCOMIDSOControlT<T>::set_XMLDocument(Msxml3::IXMLDOMDocumentPtr ppDoc/*[in]*/)
{
  return (*this)->set_XMLDocument(IXMLDOMDocument*)ppDoc);
}

template <class T> HRESULT __fastcall
TCOMIDSOControlT<T>::get_JavaDSOCompatible(long* fJavaDSOCompatible/*[out,retval]*/)
{
  return (*this)->get_JavaDSOCompatible(fJavaDSOCompatible);
}

template <class T> long __fastcall
TCOMIDSOControlT<T>::get_JavaDSOCompatible(void)
{
  long fJavaDSOCompatible;
  OLECHECK(this->get_JavaDSOCompatible((long*)&fJavaDSOCompatible));
  return fJavaDSOCompatible;
}

template <class T> HRESULT __fastcall
TCOMIDSOControlT<T>::set_JavaDSOCompatible(long fJavaDSOCompatible/*[in]*/)
{
  return (*this)->set_JavaDSOCompatible(fJavaDSOCompatible);
}

template <class T> HRESULT __fastcall
TCOMIDSOControlT<T>::get_readyState(long* state/*[out,retval]*/)
{
  return (*this)->get_readyState(state);
}

template <class T> long __fastcall
TCOMIDSOControlT<T>::get_readyState(void)
{
  long state;
  OLECHECK(this->get_readyState((long*)&state));
  return state;
}

// *********************************************************************//
// DispIntf:  IDSOControl
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {310AFA62-0575-11D2-9CA9-0060B0EC3D39}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDSOControlDispT<T>::get_XMLDocument(Msxml3::IXMLDOMDocument** ppDoc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XMLDocument"), DISPID(65537));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml3::IXMLDOMDocument**)ppDoc /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml3::IXMLDOMDocument* __fastcall
IDSOControlDispT<T>::get_XMLDocument(void)
{
  Msxml3::IXMLDOMDocument* ppDoc;
  this->get_XMLDocument((Msxml3::IXMLDOMDocument**)&ppDoc);
  return ppDoc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDSOControlDispT<T>::set_XMLDocument(Msxml3::IXMLDOMDocument* ppDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("XMLDocument"), DISPID(65537));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml3::IXMLDOMDocument*)ppDoc /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDSOControlDispT<T>::get_JavaDSOCompatible(long* fJavaDSOCompatible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("JavaDSOCompatible"), DISPID(65538));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fJavaDSOCompatible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDSOControlDispT<T>::get_JavaDSOCompatible(void)
{
  long fJavaDSOCompatible;
  this->get_JavaDSOCompatible((long*)&fJavaDSOCompatible);
  return fJavaDSOCompatible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDSOControlDispT<T>::set_JavaDSOCompatible(long fJavaDSOCompatible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("JavaDSOCompatible"), DISPID(65538));
  TAutoArgs<1> _args;
  _args[1] = fJavaDSOCompatible /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDSOControlDispT<T>::get_readyState(long* state/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("readyState"), DISPID(-525));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(state /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDSOControlDispT<T>::get_readyState(void)
{
  long state;
  this->get_readyState((long*)&state);
  return state;
}

// *********************************************************************//
// SmartIntf: TCOMIXMLHTTPRequest
// Interface: IXMLHTTPRequest
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIXMLHTTPRequestT<T>::open(BSTR bstrMethod/*[in]*/, BSTR bstrUrl/*[in]*/, 
                              VARIANT varAsync/*[in,opt]*/, VARIANT bstrUser/*[in,opt]*/, 
                              VARIANT bstrPassword/*[in,opt]*/)
{
  return (*this)->open(bstrMethod, bstrUrl, varAsync, bstrUser, bstrPassword);
}

template <class T> HRESULT __fastcall
TCOMIXMLHTTPRequestT<T>::setRequestHeader(BSTR bstrHeader/*[in]*/, BSTR bstrValue/*[in]*/)
{
  return (*this)->setRequestHeader(bstrHeader, bstrValue);
}

template <class T> HRESULT __fastcall
TCOMIXMLHTTPRequestT<T>::getResponseHeader(BSTR bstrHeader/*[in]*/, BSTR* pbstrValue/*[out,retval]*/)
{
  return (*this)->getResponseHeader(bstrHeader, pbstrValue);
}

template <class T> BSTR __fastcall
TCOMIXMLHTTPRequestT<T>::getResponseHeader(BSTR bstrHeader/*[in]*/)
{
  BSTR pbstrValue = 0;
  OLECHECK(this->getResponseHeader(, (BSTR*)&pbstrValue));
  return pbstrValue;
}

template <class T> HRESULT __fastcall
TCOMIXMLHTTPRequestT<T>::getAllResponseHeaders(BSTR* pbstrHeaders/*[out,retval]*/)
{
  return (*this)->getAllResponseHeaders(pbstrHeaders);
}

template <class T> BSTR __fastcall
TCOMIXMLHTTPRequestT<T>::getAllResponseHeaders(void)
{
  BSTR pbstrHeaders = 0;
  OLECHECK(this->getAllResponseHeaders((BSTR*)&pbstrHeaders));
  return pbstrHeaders;
}

template <class T> HRESULT __fastcall
TCOMIXMLHTTPRequestT<T>::send(VARIANT varBody/*[in,opt]*/)
{
  return (*this)->send(varBody);
}

template <class T> HRESULT __fastcall
TCOMIXMLHTTPRequestT<T>::abort(void)
{
  return (*this)->abort();
}

template <class T> HRESULT __fastcall
TCOMIXMLHTTPRequestT<T>::get_status(long* plStatus/*[out,retval]*/)
{
  return (*this)->get_status(plStatus);
}

template <class T> long __fastcall
TCOMIXMLHTTPRequestT<T>::get_status(void)
{
  long plStatus;
  OLECHECK(this->get_status((long*)&plStatus));
  return plStatus;
}

template <class T> HRESULT __fastcall
TCOMIXMLHTTPRequestT<T>::get_statusText(BSTR* pbstrStatus/*[out,retval]*/)
{
  return (*this)->get_statusText(pbstrStatus);
}

template <class T> BSTR __fastcall
TCOMIXMLHTTPRequestT<T>::get_statusText(void)
{
  BSTR pbstrStatus = 0;
  OLECHECK(this->get_statusText((BSTR*)&pbstrStatus));
  return pbstrStatus;
}

template <class T> HRESULT __fastcall
TCOMIXMLHTTPRequestT<T>::get_responseXML(LPDISPATCH* ppBody/*[out,retval]*/)
{
  return (*this)->get_responseXML(ppBody);
}

template <class T> LPDISPATCH __fastcall
TCOMIXMLHTTPRequestT<T>::get_responseXML(void)
{
  LPDISPATCH ppBody;
  OLECHECK(this->get_responseXML((LPDISPATCH*)&ppBody));
  return ppBody;
}

template <class T> HRESULT __fastcall
TCOMIXMLHTTPRequestT<T>::get_responseText(BSTR* pbstrBody/*[out,retval]*/)
{
  return (*this)->get_responseText(pbstrBody);
}

template <class T> BSTR __fastcall
TCOMIXMLHTTPRequestT<T>::get_responseText(void)
{
  BSTR pbstrBody = 0;
  OLECHECK(this->get_responseText((BSTR*)&pbstrBody));
  return pbstrBody;
}

template <class T> HRESULT __fastcall
TCOMIXMLHTTPRequestT<T>::get_responseBody(VARIANT* pvarBody/*[out,retval]*/)
{
  return (*this)->get_responseBody(pvarBody);
}

template <class T> VARIANT __fastcall
TCOMIXMLHTTPRequestT<T>::get_responseBody(void)
{
  VARIANT pvarBody;
  OLECHECK(this->get_responseBody((VARIANT*)&pvarBody));
  return pvarBody;
}

template <class T> HRESULT __fastcall
TCOMIXMLHTTPRequestT<T>::get_responseStream(VARIANT* pvarBody/*[out,retval]*/)
{
  return (*this)->get_responseStream(pvarBody);
}

template <class T> VARIANT __fastcall
TCOMIXMLHTTPRequestT<T>::get_responseStream(void)
{
  VARIANT pvarBody;
  OLECHECK(this->get_responseStream((VARIANT*)&pvarBody));
  return pvarBody;
}

template <class T> HRESULT __fastcall
TCOMIXMLHTTPRequestT<T>::get_readyState(long* plState/*[out,retval]*/)
{
  return (*this)->get_readyState(plState);
}

template <class T> long __fastcall
TCOMIXMLHTTPRequestT<T>::get_readyState(void)
{
  long plState;
  OLECHECK(this->get_readyState((long*)&plState));
  return plState;
}

template <class T> HRESULT __fastcall
TCOMIXMLHTTPRequestT<T>::set_onreadystatechange(LPDISPATCH Param1/*[in]*/)
{
  return (*this)->set_onreadystatechange(Param1);
}

// *********************************************************************//
// DispIntf:  IXMLHTTPRequest
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ED8C108D-4349-11D2-91A4-00C04F7969E8}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLHTTPRequestDispT<T>::open(BSTR bstrMethod/*[in]*/, BSTR bstrUrl/*[in]*/, 
                              VARIANT varAsync/*[in,opt]*/, VARIANT bstrUser/*[in,opt]*/, 
                              VARIANT bstrPassword/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("open"), DISPID(1));
  TAutoArgs<5> _args;
  _args[1] = bstrMethod /*[VT_BSTR:0]*/;
  _args[2] = bstrUrl /*[VT_BSTR:0]*/;
  _args[3] = varAsync /*[VT_VARIANT:0]*/;
  _args[4] = bstrUser /*[VT_VARIANT:0]*/;
  _args[5] = bstrPassword /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLHTTPRequestDispT<T>::setRequestHeader(BSTR bstrHeader/*[in]*/, BSTR bstrValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setRequestHeader"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = bstrHeader /*[VT_BSTR:0]*/;
  _args[2] = bstrValue /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLHTTPRequestDispT<T>::getResponseHeader(BSTR bstrHeader/*[in]*/, BSTR* pbstrValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getResponseHeader"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = bstrHeader /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrValue /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLHTTPRequestDispT<T>::getResponseHeader(BSTR bstrHeader/*[in]*/)
{
  BSTR pbstrValue;
  this->getResponseHeader(bstrHeader, (BSTR*)&pbstrValue);
  return pbstrValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLHTTPRequestDispT<T>::getAllResponseHeaders(BSTR* pbstrHeaders/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAllResponseHeaders"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrHeaders /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLHTTPRequestDispT<T>::getAllResponseHeaders(void)
{
  BSTR pbstrHeaders;
  this->getAllResponseHeaders((BSTR*)&pbstrHeaders);
  return pbstrHeaders;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLHTTPRequestDispT<T>::send(VARIANT varBody/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("send"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = varBody /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLHTTPRequestDispT<T>::abort()
{
  _TDispID _dispid(*this, OLETEXT("abort"), DISPID(6));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLHTTPRequestDispT<T>::get_status(long* plStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("status"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plStatus /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLHTTPRequestDispT<T>::get_status(void)
{
  long plStatus;
  this->get_status((long*)&plStatus);
  return plStatus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLHTTPRequestDispT<T>::get_statusText(BSTR* pbstrStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("statusText"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrStatus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLHTTPRequestDispT<T>::get_statusText(void)
{
  BSTR pbstrStatus;
  this->get_statusText((BSTR*)&pbstrStatus);
  return pbstrStatus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLHTTPRequestDispT<T>::get_responseXML(LPDISPATCH* ppBody/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("responseXML"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppBody /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IXMLHTTPRequestDispT<T>::get_responseXML(void)
{
  LPDISPATCH ppBody;
  this->get_responseXML((LPDISPATCH*)&ppBody);
  return ppBody;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLHTTPRequestDispT<T>::get_responseText(BSTR* pbstrBody/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("responseText"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrBody /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLHTTPRequestDispT<T>::get_responseText(void)
{
  BSTR pbstrBody;
  this->get_responseText((BSTR*)&pbstrBody);
  return pbstrBody;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLHTTPRequestDispT<T>::get_responseBody(VARIANT* pvarBody/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("responseBody"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarBody /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLHTTPRequestDispT<T>::get_responseBody(void)
{
  VARIANT pvarBody;
  this->get_responseBody((VARIANT*)&pvarBody);
  return pvarBody;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLHTTPRequestDispT<T>::get_responseStream(VARIANT* pvarBody/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("responseStream"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarBody /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IXMLHTTPRequestDispT<T>::get_responseStream(void)
{
  VARIANT pvarBody;
  this->get_responseStream((VARIANT*)&pvarBody);
  return pvarBody;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLHTTPRequestDispT<T>::get_readyState(long* plState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("readyState"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plState /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLHTTPRequestDispT<T>::get_readyState(void)
{
  long plState;
  this->get_readyState((long*)&plState);
  return plState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXMLHTTPRequestDispT<T>::set_onreadystatechange(LPDISPATCH Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("onreadystatechange"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIServerXMLHTTPRequest
// Interface: IServerXMLHTTPRequest
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIServerXMLHTTPRequestT<T>::setTimeouts(long resolveTimeout/*[in]*/, long connectTimeout/*[in]*/, 
                                           long sendTimeout/*[in]*/, long receiveTimeout/*[in]*/)
{
  return (*this)->setTimeouts(resolveTimeout, connectTimeout, sendTimeout, receiveTimeout);
}

template <class T> HRESULT __fastcall
TCOMIServerXMLHTTPRequestT<T>::waitForResponse(VARIANT timeoutInSeconds/*[in,opt]*/, 
                                               VARIANT_BOOL* isSuccessful/*[out,retval]*/)
{
  return (*this)->waitForResponse(timeoutInSeconds, isSuccessful);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIServerXMLHTTPRequestT<T>::waitForResponse(VARIANT timeoutInSeconds/*[in,opt]*/)
{
  VARIANT_BOOL isSuccessful;
  OLECHECK(this->waitForResponse(, (VARIANT_BOOL*)&isSuccessful));
  return isSuccessful;
}

template <class T> HRESULT __fastcall
TCOMIServerXMLHTTPRequestT<T>::getOption(Msxml3::SERVERXMLHTTP_OPTION option/*[in]*/, 
                                         VARIANT* value/*[out,retval]*/)
{
  return (*this)->getOption(option, value);
}

template <class T> VARIANT __fastcall
TCOMIServerXMLHTTPRequestT<T>::getOption(Msxml3::SERVERXMLHTTP_OPTION option/*[in]*/)
{
  VARIANT value;
  OLECHECK(this->getOption(, (VARIANT*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMIServerXMLHTTPRequestT<T>::setOption(Msxml3::SERVERXMLHTTP_OPTION option/*[in]*/, 
                                         VARIANT value/*[in]*/)
{
  return (*this)->setOption(option, value);
}

// *********************************************************************//
// DispIntf:  IServerXMLHTTPRequest
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2E9196BF-13BA-4DD4-91CA-6C571F281495}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IServerXMLHTTPRequestDispT<T>::setTimeouts(long resolveTimeout/*[in]*/, long connectTimeout/*[in]*/
                                           , long sendTimeout/*[in]*/, long receiveTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setTimeouts"), DISPID(15));
  TAutoArgs<4> _args;
  _args[1] = resolveTimeout /*[VT_I4:0]*/;
  _args[2] = connectTimeout /*[VT_I4:0]*/;
  _args[3] = sendTimeout /*[VT_I4:0]*/;
  _args[4] = receiveTimeout /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IServerXMLHTTPRequestDispT<T>::waitForResponse(VARIANT timeoutInSeconds/*[in,opt]*/, 
                                               VARIANT_BOOL* isSuccessful/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("waitForResponse"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = timeoutInSeconds /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(isSuccessful /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IServerXMLHTTPRequestDispT<T>::waitForResponse(VARIANT timeoutInSeconds/*[in,opt]*/)
{
  VARIANT_BOOL isSuccessful;
  this->waitForResponse(timeoutInSeconds, (VARIANT_BOOL*)&isSuccessful);
  return isSuccessful;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IServerXMLHTTPRequestDispT<T>::getOption(Msxml3::SERVERXMLHTTP_OPTION option/*[in]*/, 
                                         VARIANT* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getOption"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = (int)option /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IServerXMLHTTPRequestDispT<T>::getOption(Msxml3::SERVERXMLHTTP_OPTION option/*[in]*/)
{
  VARIANT value;
  this->getOption(option, (VARIANT*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IServerXMLHTTPRequestDispT<T>::setOption(Msxml3::SERVERXMLHTTP_OPTION option/*[in]*/, 
                                         VARIANT value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setOption"), DISPID(18));
  TAutoArgs<2> _args;
  _args[1] = (int)option /*[VT_USERDEFINED:0]*/;
  _args[2] = value /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IServerXMLHTTPRequestDispT<T>::open(BSTR bstrMethod/*[in]*/, BSTR bstrUrl/*[in]*/, 
                                    VARIANT varAsync/*[in,opt]*/, VARIANT bstrUser/*[in,opt]*/, 
                                    VARIANT bstrPassword/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("open"), DISPID(1));
  TAutoArgs<5> _args;
  _args[1] = bstrMethod /*[VT_BSTR:0]*/;
  _args[2] = bstrUrl /*[VT_BSTR:0]*/;
  _args[3] = varAsync /*[VT_VARIANT:0]*/;
  _args[4] = bstrUser /*[VT_VARIANT:0]*/;
  _args[5] = bstrPassword /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IServerXMLHTTPRequestDispT<T>::setRequestHeader(BSTR bstrHeader/*[in]*/, BSTR bstrValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setRequestHeader"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = bstrHeader /*[VT_BSTR:0]*/;
  _args[2] = bstrValue /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IServerXMLHTTPRequestDispT<T>::getResponseHeader(BSTR bstrHeader/*[in]*/, 
                                                 BSTR* pbstrValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getResponseHeader"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = bstrHeader /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrValue /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IServerXMLHTTPRequestDispT<T>::getResponseHeader(BSTR bstrHeader/*[in]*/)
{
  BSTR pbstrValue;
  this->getResponseHeader(bstrHeader, (BSTR*)&pbstrValue);
  return pbstrValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IServerXMLHTTPRequestDispT<T>::getAllResponseHeaders(BSTR* pbstrHeaders/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAllResponseHeaders"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrHeaders /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IServerXMLHTTPRequestDispT<T>::getAllResponseHeaders(void)
{
  BSTR pbstrHeaders;
  this->getAllResponseHeaders((BSTR*)&pbstrHeaders);
  return pbstrHeaders;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IServerXMLHTTPRequestDispT<T>::send(VARIANT varBody/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("send"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = varBody /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IServerXMLHTTPRequestDispT<T>::abort()
{
  _TDispID _dispid(*this, OLETEXT("abort"), DISPID(6));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IServerXMLHTTPRequestDispT<T>::get_status(long* plStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("status"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plStatus /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IServerXMLHTTPRequestDispT<T>::get_status(void)
{
  long plStatus;
  this->get_status((long*)&plStatus);
  return plStatus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IServerXMLHTTPRequestDispT<T>::get_statusText(BSTR* pbstrStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("statusText"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrStatus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IServerXMLHTTPRequestDispT<T>::get_statusText(void)
{
  BSTR pbstrStatus;
  this->get_statusText((BSTR*)&pbstrStatus);
  return pbstrStatus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IServerXMLHTTPRequestDispT<T>::get_responseXML(LPDISPATCH* ppBody/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("responseXML"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppBody /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IServerXMLHTTPRequestDispT<T>::get_responseXML(void)
{
  LPDISPATCH ppBody;
  this->get_responseXML((LPDISPATCH*)&ppBody);
  return ppBody;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IServerXMLHTTPRequestDispT<T>::get_responseText(BSTR* pbstrBody/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("responseText"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrBody /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IServerXMLHTTPRequestDispT<T>::get_responseText(void)
{
  BSTR pbstrBody;
  this->get_responseText((BSTR*)&pbstrBody);
  return pbstrBody;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IServerXMLHTTPRequestDispT<T>::get_responseBody(VARIANT* pvarBody/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("responseBody"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarBody /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IServerXMLHTTPRequestDispT<T>::get_responseBody(void)
{
  VARIANT pvarBody;
  this->get_responseBody((VARIANT*)&pvarBody);
  return pvarBody;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IServerXMLHTTPRequestDispT<T>::get_responseStream(VARIANT* pvarBody/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("responseStream"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarBody /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IServerXMLHTTPRequestDispT<T>::get_responseStream(void)
{
  VARIANT pvarBody;
  this->get_responseStream((VARIANT*)&pvarBody);
  return pvarBody;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IServerXMLHTTPRequestDispT<T>::get_readyState(long* plState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("readyState"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plState /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IServerXMLHTTPRequestDispT<T>::get_readyState(void)
{
  long plState;
  this->get_readyState((long*)&plState);
  return plState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IServerXMLHTTPRequestDispT<T>::set_onreadystatechange(LPDISPATCH Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("onreadystatechange"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msDOMDocument
// Interface: TCOMIXMLDOMDocument2
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIXMLDOMDocument2, IXMLDOMDocument2, &CLSID_msDOMDocument, &IID_IXMLDOMDocument2> ComsDOMDocument;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msDOMDocument26
// Interface: TCOMIXMLDOMDocument2
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIXMLDOMDocument2, IXMLDOMDocument2, &CLSID_msDOMDocument26, &IID_IXMLDOMDocument2> ComsDOMDocument26;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msDOMDocument30
// Interface: TCOMIXMLDOMDocument2
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIXMLDOMDocument2, IXMLDOMDocument2, &CLSID_msDOMDocument30, &IID_IXMLDOMDocument2> ComsDOMDocument30;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msFreeThreadedDOMDocument
// Interface: TCOMIXMLDOMDocument2
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIXMLDOMDocument2, IXMLDOMDocument2, &CLSID_msFreeThreadedDOMDocument, &IID_IXMLDOMDocument2> ComsFreeThreadedDOMDocument;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msFreeThreadedDOMDocument26
// Interface: TCOMIXMLDOMDocument2
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIXMLDOMDocument2, IXMLDOMDocument2, &CLSID_msFreeThreadedDOMDocument26, &IID_IXMLDOMDocument2> ComsFreeThreadedDOMDocument26;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msFreeThreadedDOMDocument30
// Interface: TCOMIXMLDOMDocument2
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIXMLDOMDocument2, IXMLDOMDocument2, &CLSID_msFreeThreadedDOMDocument30, &IID_IXMLDOMDocument2> ComsFreeThreadedDOMDocument30;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msXMLSchemaCache
// Interface: TCOMIXMLDOMSchemaCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIXMLDOMSchemaCollection, IXMLDOMSchemaCollection, &CLSID_msXMLSchemaCache, &IID_IXMLDOMSchemaCollection> ComsXMLSchemaCache;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msXMLSchemaCache26
// Interface: TCOMIXMLDOMSchemaCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIXMLDOMSchemaCollection, IXMLDOMSchemaCollection, &CLSID_msXMLSchemaCache26, &IID_IXMLDOMSchemaCollection> ComsXMLSchemaCache26;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msXMLSchemaCache30
// Interface: TCOMIXMLDOMSchemaCollection
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIXMLDOMSchemaCollection, IXMLDOMSchemaCollection, &CLSID_msXMLSchemaCache30, &IID_IXMLDOMSchemaCollection> ComsXMLSchemaCache30;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msXSLTemplate
// Interface: TCOMIXSLTemplate
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIXSLTemplate, IXSLTemplate, &CLSID_msXSLTemplate, &IID_IXSLTemplate> ComsXSLTemplate;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msXSLTemplate26
// Interface: TCOMIXSLTemplate
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIXSLTemplate, IXSLTemplate, &CLSID_msXSLTemplate26, &IID_IXSLTemplate> ComsXSLTemplate26;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msXSLTemplate30
// Interface: TCOMIXSLTemplate
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIXSLTemplate, IXSLTemplate, &CLSID_msXSLTemplate30, &IID_IXSLTemplate> ComsXSLTemplate30;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msDSOControl
// Interface: TCOMIDSOControl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIDSOControl, IDSOControl, &CLSID_msDSOControl, &IID_IDSOControl> ComsDSOControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msDSOControl26
// Interface: TCOMIDSOControl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIDSOControl, IDSOControl, &CLSID_msDSOControl26, &IID_IDSOControl> ComsDSOControl26;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msDSOControl30
// Interface: TCOMIDSOControl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIDSOControl, IDSOControl, &CLSID_msDSOControl30, &IID_IDSOControl> ComsDSOControl30;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msXMLHTTP
// Interface: TCOMIXMLHTTPRequest
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIXMLHTTPRequest, IXMLHTTPRequest, &CLSID_msXMLHTTP, &IID_IXMLHTTPRequest> ComsXMLHTTP;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msXMLHTTP26
// Interface: TCOMIXMLHTTPRequest
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIXMLHTTPRequest, IXMLHTTPRequest, &CLSID_msXMLHTTP26, &IID_IXMLHTTPRequest> ComsXMLHTTP26;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msXMLHTTP30
// Interface: TCOMIXMLHTTPRequest
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIXMLHTTPRequest, IXMLHTTPRequest, &CLSID_msXMLHTTP30, &IID_IXMLHTTPRequest> ComsXMLHTTP30;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msServerXMLHTTP
// Interface: TCOMIServerXMLHTTPRequest
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIServerXMLHTTPRequest, IServerXMLHTTPRequest, &CLSID_msServerXMLHTTP, &IID_IServerXMLHTTPRequest> ComsServerXMLHTTP;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msServerXMLHTTP30
// Interface: TCOMIServerXMLHTTPRequest
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIServerXMLHTTPRequest, IServerXMLHTTPRequest, &CLSID_msServerXMLHTTP30, &IID_IServerXMLHTTPRequest> ComsServerXMLHTTP30;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msSAXXMLReader
// Interface: TCOMIVBSAXXMLReader
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIVBSAXXMLReader, IVBSAXXMLReader, &CLSID_msSAXXMLReader, &IID_IVBSAXXMLReader> ComsSAXXMLReader;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msSAXXMLReader30
// Interface: TCOMIVBSAXXMLReader
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIVBSAXXMLReader, IVBSAXXMLReader, &CLSID_msSAXXMLReader30, &IID_IVBSAXXMLReader> ComsSAXXMLReader30;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msMXXMLWriter
// Interface: TCOMIMXWriter
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIMXWriter, IMXWriter, &CLSID_msMXXMLWriter, &IID_IMXWriter> ComsMXXMLWriter;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msMXXMLWriter30
// Interface: TCOMIMXWriter
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIMXWriter, IMXWriter, &CLSID_msMXXMLWriter30, &IID_IMXWriter> ComsMXXMLWriter30;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msSAXAttributes
// Interface: TCOMIMXAttributes
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIMXAttributes, IMXAttributes, &CLSID_msSAXAttributes, &IID_IMXAttributes> ComsSAXAttributes;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : msSAXAttributes30
// Interface: TCOMIMXAttributes
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIMXAttributes, IMXAttributes, &CLSID_msSAXAttributes30, &IID_IMXAttributes> ComsSAXAttributes30;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : XMLDocument
// Interface: IXMLDocument2Disp
// *********************************************************************//
typedef TCoClassCreatorT<IXMLDocument2Disp, IXMLDocument2, &CLSID_XMLDocument, &IID_IXMLDocument2> CoXMLDocument;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : msDOMDocument
// Event Interface : XMLDOMDocumentEvents
// *********************************************************************//
template <class T>
class TEvents_msDOMDocument : public IConnectionPointImpl<T,
                                                 &DIID_XMLDOMDocumentEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
{
public:
  HRESULT         Fire_ondataavailable(void);
  HRESULT         Fire_onreadystatechange(void);
protected:
  XMLDOMDocumentEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_msDOMDocument<T>::Fire_ondataavailable(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ondataavailable();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_msDOMDocument<T>::Fire_onreadystatechange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onreadystatechange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : msDOMDocument26
// Event Interface : XMLDOMDocumentEvents
// *********************************************************************//
template <class T>
class TEvents_msDOMDocument26 : public IConnectionPointImpl<T,
                                                 &DIID_XMLDOMDocumentEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
{
public:
  HRESULT         Fire_ondataavailable(void);
  HRESULT         Fire_onreadystatechange(void);
protected:
  XMLDOMDocumentEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_msDOMDocument26<T>::Fire_ondataavailable(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ondataavailable();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_msDOMDocument26<T>::Fire_onreadystatechange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onreadystatechange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : msDOMDocument30
// Event Interface : XMLDOMDocumentEvents
// *********************************************************************//
template <class T>
class TEvents_msDOMDocument30 : public IConnectionPointImpl<T,
                                                 &DIID_XMLDOMDocumentEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
{
public:
  HRESULT         Fire_ondataavailable(void);
  HRESULT         Fire_onreadystatechange(void);
protected:
  XMLDOMDocumentEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_msDOMDocument30<T>::Fire_ondataavailable(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ondataavailable();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_msDOMDocument30<T>::Fire_onreadystatechange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onreadystatechange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : msFreeThreadedDOMDocument
// Event Interface : XMLDOMDocumentEvents
// *********************************************************************//
template <class T>
class TEvents_msFreeThreadedDOMDocument : public IConnectionPointImpl<T,
                                                 &DIID_XMLDOMDocumentEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
{
public:
  HRESULT         Fire_ondataavailable(void);
  HRESULT         Fire_onreadystatechange(void);
protected:
  XMLDOMDocumentEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_msFreeThreadedDOMDocument<T>::Fire_ondataavailable(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ondataavailable();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_msFreeThreadedDOMDocument<T>::Fire_onreadystatechange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onreadystatechange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : msFreeThreadedDOMDocument26
// Event Interface : XMLDOMDocumentEvents
// *********************************************************************//
template <class T>
class TEvents_msFreeThreadedDOMDocument26 : public IConnectionPointImpl<T,
                                                 &DIID_XMLDOMDocumentEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
{
public:
  HRESULT         Fire_ondataavailable(void);
  HRESULT         Fire_onreadystatechange(void);
protected:
  XMLDOMDocumentEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_msFreeThreadedDOMDocument26<T>::Fire_ondataavailable(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ondataavailable();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_msFreeThreadedDOMDocument26<T>::Fire_onreadystatechange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onreadystatechange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : msFreeThreadedDOMDocument30
// Event Interface : XMLDOMDocumentEvents
// *********************************************************************//
template <class T>
class TEvents_msFreeThreadedDOMDocument30 : public IConnectionPointImpl<T,
                                                 &DIID_XMLDOMDocumentEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
{
public:
  HRESULT         Fire_ondataavailable(void);
  HRESULT         Fire_onreadystatechange(void);
protected:
  XMLDOMDocumentEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_msFreeThreadedDOMDocument30<T>::Fire_ondataavailable(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ondataavailable();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_msFreeThreadedDOMDocument30<T>::Fire_onreadystatechange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onreadystatechange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Msxml3

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Msxml3;
#endif

#pragma option pop

#endif // MSXML3H
